{
  "blocks": [
    {
      "type": "code",
      "id": "zgkqio",
      "active": true,
      "focus": true,
      "start": 0,
      "drag_x": 1906.0805065228915,
      "drag_y": 167.58891215862772,
      "drag_w": 470,
      "drag_h": 670,
      "focused": false,
      "output": "let style =`\n\n:root {\n\t--secondary: #F9C23F;\n\t--background: #D1F6DB;\n\t--background: #ffbb0022;\n\t--color: #0000ff;\n\n\t--light-grey: #00000022\n}\n\n@font-face {\n\tfont-family: 'ops';\n\tsrc: url('./ops.ttf') format('truetype');\n}\n\nbody {\n\tcolor: var(--color);\n\tline-height: 1.4em;\n\tfont-family: \"ops\", Arial Narrow;\n    background-color: #ea09;\n    background-size: 60px 60px;\n    background-image:\n\t\tlinear-gradient(to right, #0002 1px, transparent 1px),\n\t\tlinear-gradient(to bottom, #0002 1px, transparent 1px);\n}\n\na {\n\tcolor: var(--color);\n}\n\n/* .block:first-of-type { */\n/* \tposition: sticky; */\n/* \ttop: 0; */\n/* \tleft: 0; */\n/* \tbackground-color: beige; */\n/* } */\n\n.block {\n\tmargin: 20px auto;\n    background-color: #fff8;\n\tborder: .5px solid var(--light-grey);\n\tpadding: 40px;\n\t/* box-shadow: 0 0 10px 0px var(--light-grey); */\n\tborder-top: 3px dotted var(--light-grey);\n\tmax-width: 600px;\n\n\ttransition: all 100ms ease-in-out;\n}\n\n.fixed {\n\tposition: fixed;\n\ttop: 1em;\n\tleft: 1em;\n}\n\nimg,\nvideo {\n\twidth: 100%;\n}\n\n\ninput.w1200:checked~div {\n\tmax-width: 1200px;\n}\n\ninput.invert:checked~div {\n  filter: invert(1);\n}\n\ninput.h-auto:checked~.content {\n height: auto;\n}\n\n.content {\n  height: 35vh;\n  overflow: hidden;\n}\n\n.link,\n.pdf,\n.media {\n\tpadding: 5px;\n\tborder: 2px solid var(--light-grey);\n\tborder-radius: 5px;\n\tbackground: #eee;\n\twidth: 50%;\n\toverflow: hidden;\n}\n\n.media {\n\twidth: 95%;\n\tfont-size: 1.2em;\n\tmargin: 10px 0;\n\tbox-shadow: 0 0 10px 1px var(--light-grey);\n}\n\n.pdf {\n\twidth: 95%;\n\theight: 300px;\n\tbox-shadow: 0 0 10px 1px var(--light-grey);\n}\n\n.pdf img {\n\tpadding-top: 10px;\n}\n\nbutton {\n\tcursor: pointer;\n}\n\n.hover {\n\ttransition: all 100ms ease-in-out;\n}\n\n.hover:hover {\n\ttransform: scale(1.1);\n}\n\n\n.media p {\n\tmargin: 1em 0;\n\tpadding: 0;\n}\n\n.metadata {\n\tpadding: 3px;\n\tfont-size: 0.9em;\n\tborder-top: .8px dotted var(--light-grey);\n\tcolor: #00000088;\n\tmargin: 10px 0;\n\n\tborder: 1px dotted var(--light-grey);\n\tborder-radius: 5px;\n\tbackground: #eee;\n}\n\n.date {\n\tcolor: var(--secondary);\n\tbackground-color: var(--color);\n\twidth: 15em;\n\tmargin-bottom: .5em;\n}\n`\n\n\n\n",
      "cursor": 305
    },
    {
      "type": "code",
      "id": "s9qdg",
      "active": false,
      "focus": false,
      "start": 2071,
      "drag_x": 1219.3916242824998,
      "drag_y": 451.2916542007352,
      "drag_w": 600,
      "drag_h": 290,
      "focused": false,
      "output": "\nimport { mut,render, html, sig, mem, eff_on } from \"/lib/solid/monke.js\"\nimport markdownIt from \"/lib/markdown-it/markdown-it.js\";\nimport makrdownItMark from \"/lib/markdown-it/markdown-it-mark.js\";\n\nlet M = mut({})\ndocument.M = M\n\nconst host = \"http://localhost:3000/api/\"\nconst fetch_json = (link, options) =>\n\tfetch(link, options).then((r) => r.json());\nconst get_block = (id) => fetch_json(host + \"blocks/\" + id, {});\n\n\n\n\n\n\n",
      "cursor": 231
    },
    {
      "type": "code",
      "id": "r370g",
      "active": false,
      "focus": false,
      "start": 2499,
      "drag_x": 580.3661966107454,
      "drag_y": 685.1064468082086,
      "drag_w": 600,
      "drag_h": 840,
      "focused": false,
      "output": "\nlet link_svg =\n\t`<svg width=\"15\" height=\"15\" viewBox=\"0 0 15 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M8.51194 3.00541C9.18829 2.54594 10.0435 2.53694 10.6788 2.95419C10.8231 3.04893 10.9771 3.1993 11.389 3.61119C11.8009 4.02307 11.9513 4.17714 12.046 4.32141C12.4633 4.95675 12.4543 5.81192 11.9948 6.48827C11.8899 6.64264 11.7276 6.80811 11.3006 7.23511L10.6819 7.85383C10.4867 8.04909 10.4867 8.36567 10.6819 8.56093C10.8772 8.7562 11.1938 8.7562 11.389 8.56093L12.0077 7.94221L12.0507 7.89929C12.4203 7.52976 12.6568 7.2933 12.822 7.0502C13.4972 6.05623 13.5321 4.76252 12.8819 3.77248C12.7233 3.53102 12.4922 3.30001 12.1408 2.94871L12.0961 2.90408L12.0515 2.85942C11.7002 2.508 11.4692 2.27689 11.2277 2.11832C10.2377 1.46813 8.94398 1.50299 7.95001 2.17822C7.70691 2.34336 7.47044 2.57991 7.1009 2.94955L7.058 2.99247L6.43928 3.61119C6.24401 3.80645 6.24401 4.12303 6.43928 4.31829C6.63454 4.51355 6.95112 4.51355 7.14638 4.31829L7.7651 3.69957C8.1921 3.27257 8.35757 3.11027 8.51194 3.00541ZM4.31796 7.14672C4.51322 6.95146 4.51322 6.63487 4.31796 6.43961C4.12269 6.24435 3.80611 6.24435 3.61085 6.43961L2.99213 7.05833L2.94922 7.10124C2.57957 7.47077 2.34303 7.70724 2.17788 7.95035C1.50265 8.94432 1.4678 10.238 2.11799 11.2281C2.27656 11.4695 2.50766 11.7005 2.8591 12.0518L2.90374 12.0965L2.94837 12.1411C3.29967 12.4925 3.53068 12.7237 3.77214 12.8822C4.76219 13.5324 6.05589 13.4976 7.04986 12.8223C7.29296 12.6572 7.52943 12.4206 7.89896 12.051L7.89897 12.051L7.94188 12.0081L8.5606 11.3894C8.75586 11.1941 8.75586 10.8775 8.5606 10.6823C8.36533 10.487 8.04875 10.487 7.85349 10.6823L7.23477 11.301C6.80777 11.728 6.6423 11.8903 6.48794 11.9951C5.81158 12.4546 4.95642 12.4636 4.32107 12.0464C4.17681 11.9516 4.02274 11.8012 3.61085 11.3894C3.19896 10.9775 3.0486 10.8234 2.95385 10.6791C2.53661 10.0438 2.54561 9.18863 3.00507 8.51227C3.10993 8.35791 3.27224 8.19244 3.69924 7.76544L4.31796 7.14672ZM9.62172 6.08558C9.81698 5.89032 9.81698 5.57373 9.62172 5.37847C9.42646 5.18321 9.10988 5.18321 8.91461 5.37847L5.37908 8.91401C5.18382 9.10927 5.18382 9.42585 5.37908 9.62111C5.57434 9.81637 5.89092 9.81637 6.08619 9.62111L9.62172 6.08558Z\" fill=\"currentColor\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"></path></svg>`;\n\n// ********************************\n// SECTION : Rendering for Special Components\n// ********************************\n//\nconst media_embed = (block) =>\n\t`<span class=\"media\">${block.embed?.html}</span>`;\n\nconst media = (block) => `\n\t<a href=${block?.source?.url}>\n\t\t<div class=\"media\">\n\t\t\t<p class=\"title\">${block.title}</p>\n\t\t\t<img src=\"${block.image.display.url}\" />\n\t\t\t<p class=\"metadata\">${block.source?.url}</p> \n\t\t</div>\n\t</a>\n`;\n\nconst video = (block) =>\n\t`<video src=${block.attachment.url} controls></video> `;\nconst image = (block) => `<img src=\"${block.image.display.url}\" />`;\nconst link = (block) =>\n\t`<span class=\"link\"> <a target=\"_blank\" href=${block.source.url}>${block.title} ${link_svg}</a> </span>`;\n\nconst pdf = (block) => `\n\t<a target=\"_blank\" href=${block.attachment.url}>\n\t\t<p class=\"pdf\">\n\t\t\t<span>\n\t\t\t${block.title} ${link_svg}\n\t\t\t</span>\n\t\t\t<img src=\"${block.image.display.url}\" />\n\t\t</p>\n\t</a>\n`;\n\n\n\n\n\n\n\n\n",
      "cursor": 2716
    },
    {
      "type": "code",
      "output": "async function run() {\n\tlet channel = await fetch(\"/blog-feed.json\").then((res) => res.json());\n\tchannel.contents = channel.contents.sort((a, b) => b.position - a.position);\n\n\tlet html = await create_html(channel);\n\n\twrite_html(html);\n}\n\nlet padd_zero = (num) => num < 10 ? \"0\" + num : num;\n\nlet time_string = (time) => {\n\tlet week = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\tlet months = [\n\t\t\"Jan\",\n\t\t\"Feb\",\n\t\t\"Mar\",\n\t\t\"Apr\",\n\t\t\"May\",\n\t\t\"Jun\",\n\t\t\"Jul\",\n\t\t\"Aug\",\n\t\t\"Sep\",\n\t\t\"Oct\",\n\t\t\"Nov\",\n\t\t\"Dec\",\n\t];\n\tlet date = time.getDate();\n\tlet month = time.getMonth();\n\tlet year = time.getFullYear();\n\tlet day = time.getDay();\n\tlet hours = time.getHours();\n\tlet minutes = time.getMinutes();\n\tlet seconds = time.getSeconds();\n\n\treturn `${date} ${months[month]}, ${week[day]}, ${padd_zero(hours)}:${padd_zero(minutes)}`;\n};\n\nasync function create_html(channel) {\n\tlet html = \"\";\n\n\tfor await (const block of channel.contents) {\n\t\tif (block.class == \"Text\") {\n\t\t\tif (block.title == \"DRAFT\") continue;\n\n\t\t\tlet date = block.title;\n\t\t\tlet updated_at = new Date(block.updated_at);\n\t\t\tlet updated_at_string = time_string(updated_at);\n\n\t\t\tlet created_at = new Date(block.created_at);\n\t\t\tlet created_at_string = time_string(created_at);\n\n\t\t\tlet content = await MD(block.content);\n\n\t\t\tcontent = content.flat().join(\"\\n\");\n\t\t\thtml += `\n\t\t\t\t<div class=\"block\">\n\t\t\t\t\t<p class=\"date\">${date}</p>\n\t\t\t\t\t<span class=\"metadata\">updated_at: ${updated_at_string}</span>\n\t\t\t\t\t<span class=\"metadata\">posted_on: ${created_at_string}</span>\n                    \n                    <p></p>\n\n        \t\t\t<input type=\"checkbox\" class=\"h-auto\"></input>\n                    <span>Read More</span>\n                    \n                    <div class=\"content\">\n    \t\t\t\t\t${content}\n                    </div>\n\n\t\t\t\t</div>\n\t\t\t`;\n\t\t}\n\t}\n\n\treturn html;\n}\n\nfunction write_html(html) {\n\tlet html_full = `\n\t\t<!DOCTYPE html>\n\t\t<html>\n\t\t\t<head>\n\t\t\t</head> \n            <style>${style}</style>\n\t\t<body>\n\t\t\t<span class=\"fixed\">(   )1200px</span>\n\t\t\t<input type=\"checkbox\" class=\"fixed w1200\"></input>\n\t\t\t<span class=\"fixed\" style=\"top: 4.2em\">(   )invert</span>\n\t\t\t<input type=\"checkbox\" class=\"fixed invert\" style=\"top: 5em\"></input>\n\t\t\t<div class=\"block\">\n\t\t\t\t<a href=\"https://github.com/caizoryan/feed.a-p\">about</a>\n\t\t\t</div>\n\t\t\t${html}\n\t\t</body>\n\t\t</html>`;\n\n  \n  document.body.innerHTML = html_full\n}\n\nrun();\n\n\n\n\n\n\n",
      "start": 5687,
      "focused": false,
      "cursor": 51,
      "active": false,
      "focus": false,
      "drag_x": 973.3690971500702,
      "drag_y": 1589.732399152101,
      "drag_w": 980,
      "drag_h": 630
    },
    {
      "type": "code",
      "id": "9iq9m",
      "active": false,
      "focus": false,
      "start": 8080,
      "drag_x": 1104.0000000000007,
      "drag_y": 2297.7859193216814,
      "drag_w": 600,
      "drag_h": 680,
      "focused": false,
      "output": "// ********************************\n// SECTION : MARKDOWN RENDERING\n// ********************************\nlet md = new markdownIt().use(makrdownItMark);\n\nlet attrs = (item) => {\n\tlet attrs = item.attrs;\n\tif (!attrs) return \"\";\n\treturn Object.fromEntries(attrs);\n};\n\nconst link_is_block = (link) => {\n\treturn link.includes(\"are.na/block\");\n};\n\nconst extract_block_id = (link) => {\n\treturn link.split(\"/\").pop();\n};\n\nasync function eat(tree) {\n\tlet ret = [];\n\n\tif (!tree) return \"\";\n\n\twhile (tree.length > 0) {\n\t\tlet item = tree.shift();\n\n\t\tif (item.nesting === 1) {\n\t\t\tlet at = attrs(item);\n\t\t\tlet ignore = false;\n\n\t\t\tif (at.href && link_is_block(at.href)) {\n\t\t\t\tlet id = extract_block_id(at.href);\n\t\t\t\tlet block = await get_block(id);\n\n\t\t\t\t// --------------------------------\n\t\t\t\t// Attachment\n\t\t\t\t// --------------------------------\n\t\t\t\tif (block.class == \"Attachment\") {\n\n\t\t\t\t\tif (block.attachment.extension == \"mp4\") {\n\t\t\t\t\t\tret.push(video(block));\n\t\t\t\t\t} else if (block.attachment.extension == \"pdf\") {\n\t\t\t\t\t\tret.push(pdf(block));\n\t\t\t\t\t}\n\t\t\t\t\tlet word = await eat(tree);\n\t\t\t\t\tignore = true;\n\n\t\t\t\t}\n\n\t\t\t\t// --------------------------------\n\t\t\t\t// Media\n\t\t\t\t// --------------------------------\n\t\t\t\telse if (block.class == \"Media\") {\n\n\t\t\t\t\tif (block.class == \"Media\" && block.embed) {\n\t\t\t\t\t\tret.push(media_embed(block));\n\t\t\t\t\t} else ret.push(media(block));\n\t\t\t\t\tlet word = await eat(tree);\n\t\t\t\t\tignore = true;\n\n\t\t\t\t}\n\n\t\t\t\t// --------------------------------\n\t\t\t\t// Image\n\t\t\t\t// --------------------------------\n\t\t\t\telse if (block.class == \"Image\") {\n\n\t\t\t\t\tret.push(image(block));\n\t\t\t\t\tlet word = await eat(tree);\n\t\t\t\t\tignore = true;\n\n\t\t\t\t}\n\n\t\t\t\t// --------------------------------\n\t\t\t\t// Link\n\t\t\t\t// --------------------------------\n\t\t\t\telse if (block.class == \"Link\") {\n\n\t\t\t\t\tret.push(link(block));\n\t\t\t\t\tlet word = await eat(tree);\n\t\t\t\t\tignore = true;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet entries = Object.entries\n\t\t\tlet at_string =\n\t\t\t\t// convert attribute (in object form)\n\t\t\t\t// to an html stringified attribute form\n\t\t\t\tentries(at)\n\t\t\t\t\t.map(([key, value]) => `${key} = \"${value}\"`)\n\t\t\t\t\t.join(\" \");\n\n\t\t\tif (!ignore) {\n\t\t\t\tlet children = await eat(tree);\n\t\t\t\tchildren = Array.isArray(children) ? children.join(\"\") : children;\n\t\t\t\tret.push(`<${item.tag} ${at_string}> ${children} </${item.tag}>`);\n\t\t\t}\n\t\t}\n\n\t\tif (item.nesting === 0) {\n\t\t\tif (!item.children || item.children.length === 0) {\n\t\t\t\tlet p = item.type === \"softbreak\" ? \"<br></br>\" : item.content;\n\t\t\t\tret.push(p);\n\t\t\t} else {\n\t\t\t\tlet children = await eat(item.children);\n\t\t\t\tchildren = Array.isArray(children) ? children.join(\"\") : children;\n\t\t\t\tret.push(children);\n\t\t\t}\n\t\t}\n\n\t\tif (item.nesting === -1) break;\n\t}\n\n\treturn ret;\n}\n\nlet safe_parse = (content) => {\n\ttry {\n\t\treturn md.parse(content, { html: true });\n\t} catch (e) {\n\t\treturn undefined;\n\t}\n};\n\nconst MD = async (content) => {\n\tlet tree = safe_parse(content);\n\n\tlet body;\n\n\tif (tree) body = await eat(tree);\n\telse body = content;\n\n\treturn body;\n};\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0
    },
    {
      "type": "sandbox",
      "id": "n0zre4",
      "active": false,
      "focus": false,
      "start": 11045,
      "drag_x": 1965.1531026384848,
      "drag_y": 2742.5819038681316,
      "drag_w": 1110,
      "drag_h": 930,
      "output": "",
      "focused": false,
      "renderer": "function (state) {\n  // ----------------------------------\n  // Are.na channel saver\n  // ----------------------------------\n    \n  // this one will be to load are.na data into a folder in fs\n  // /fs/arena-data/blog-feed.json\n  \n  // TODO: Make a jsdoc are.na library\n  // with utils like hack-refresh, get >100 per, \n\n  const ARENA_HOST = \"http://localhost:3000/api/\"\n  const SLUG = \"blog-feed\"\n  let render = sig(() => h(\"p\", \"...loading\"))\n  let css = sig(\"\")\n  const render_json = (json) => {\n    import(\"/js/snippet/JsonViewer.json\")\n      .then((j) => {\n        \n        let jj = new j.JsonViewer(json)\n        render.set(jj.render.bind(jj))\n        css.set(jj.css())\n      })\n\n    return render\n  }\n  const get_channel = (slug) => {\n    fetch(ARENA_HOST+\"channels/\"+slug)\n      .then((res) => res.json())\n      .then((res) => {\n        let b = {content: JSON.stringify(res)}\n        \n        fetch(\"/fs/arena-data/blog-feed.json\", {\n          headers: { \"Content-Type\": \"application/json\" },\n          method: \"PUT\",\n          body: JSON.stringify(b),\n          \n        });\n        \n        render_json(res)\n      })\n  }\n\n  get_channel(SLUG)\n  \n\n  let style = mem(() => `\n    background: white;\n  `)\n  \n  \n  return h(\"div\", {style: style},render)  \n}",
      "cursor": 0
    },
    {
      "type": "code",
      "id": "lh1luw",
      "start": 11045,
      "focused": false,
      "output": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "cursor": 0,
      "active": false,
      "focus": false,
      "drag_x": 68.82033663245046,
      "drag_y": 595.5606054731293,
      "drag_w": 600,
      "drag_h": 80
    },
    {
      "type": "save-component",
      "id": "rzt5q",
      "start": 11069,
      "path": "test/a-p-feed.json",
      "output": "",
      "active": false,
      "focus": false,
      "drag_x": 69.00384216895974,
      "drag_y": 465.4838964782491,
      "drag_w": 420,
      "drag_h": 80,
      "autosave": true
    }
  ],
  "output": "",
  "properties": {
    "panzoom": {
      "initialX": -1483.6617550090536,
      "initialY": -39.24078749084208,
      "initialZoom": 0.8308472541372349
    },
    "buffer": [
      0,
      3,
      2,
      -1,
      -1
    ]
  }
}
