// node_modules/@codemirror/state/dist/index.js
var Text = class _Text {
  /**
  Get the line description around the given position.
  */
  lineAt(pos) {
    if (pos < 0 || pos > this.length)
      throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
    return this.lineInner(pos, false, 1, 0);
  }
  /**
  Get the description for the given (1-based) line number.
  */
  line(n2) {
    if (n2 < 1 || n2 > this.lines)
      throw new RangeError(`Invalid line number ${n2} in ${this.lines}-line document`);
    return this.lineInner(n2, true, 1, 0);
  }
  /**
  Replace a range of the text with the given content.
  */
  replace(from, to2, text) {
    [from, to2] = clip(this, from, to2);
    let parts = [];
    this.decompose(
      0,
      from,
      parts,
      2
      /* Open.To */
    );
    if (text.length)
      text.decompose(
        0,
        text.length,
        parts,
        1 | 2
        /* Open.To */
      );
    this.decompose(
      to2,
      this.length,
      parts,
      1
      /* Open.From */
    );
    return TextNode.from(parts, this.length - (to2 - from) + text.length);
  }
  /**
  Append another document to this one.
  */
  append(other) {
    return this.replace(this.length, this.length, other);
  }
  /**
  Retrieve the text between the given points.
  */
  slice(from, to2 = this.length) {
    [from, to2] = clip(this, from, to2);
    let parts = [];
    this.decompose(from, to2, parts, 0);
    return TextNode.from(parts, to2 - from);
  }
  /**
  Test whether this text is equal to another instance.
  */
  eq(other) {
    if (other == this)
      return true;
    if (other.length != this.length || other.lines != this.lines)
      return false;
    let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
    let a2 = new RawTextCursor(this), b2 = new RawTextCursor(other);
    for (let skip = start, pos = start; ; ) {
      a2.next(skip);
      b2.next(skip);
      skip = 0;
      if (a2.lineBreak != b2.lineBreak || a2.done != b2.done || a2.value != b2.value)
        return false;
      pos += a2.value.length;
      if (a2.done || pos >= end)
        return true;
    }
  }
  /**
  Iterate over the text. When `dir` is `-1`, iteration happens
  from end to start. This will return lines and the breaks between
  them as separate strings.
  */
  iter(dir = 1) {
    return new RawTextCursor(this, dir);
  }
  /**
  Iterate over a range of the text. When `from` > `to`, the
  iterator will run in reverse.
  */
  iterRange(from, to2 = this.length) {
    return new PartialTextCursor(this, from, to2);
  }
  /**
  Return a cursor that iterates over the given range of lines,
  _without_ returning the line breaks between, and yielding empty
  strings for empty lines.
  
  When `from` and `to` are given, they should be 1-based line numbers.
  */
  iterLines(from, to2) {
    let inner;
    if (from == null) {
      inner = this.iter();
    } else {
      if (to2 == null)
        to2 = this.lines + 1;
      let start = this.line(from).from;
      inner = this.iterRange(start, Math.max(start, to2 == this.lines + 1 ? this.length : to2 <= 1 ? 0 : this.line(to2 - 1).to));
    }
    return new LineCursor(inner);
  }
  /**
  Return the document as a string, using newline characters to
  separate lines.
  */
  toString() {
    return this.sliceString(0);
  }
  /**
  Convert the document to an array of lines (which can be
  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
  */
  toJSON() {
    let lines = [];
    this.flatten(lines);
    return lines;
  }
  /**
  @internal
  */
  constructor() {
  }
  /**
  Create a `Text` instance for the given array of lines.
  */
  static of(text) {
    if (text.length == 0)
      throw new RangeError("A document must have at least one line");
    if (text.length == 1 && !text[0])
      return _Text.empty;
    return text.length <= 32 ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
  }
};
var TextLeaf = class _TextLeaf extends Text {
  constructor(text, length = textLength(text)) {
    super();
    this.text = text;
    this.length = length;
  }
  get lines() {
    return this.text.length;
  }
  get children() {
    return null;
  }
  lineInner(target, isLine, line, offset) {
    for (let i2 = 0; ; i2++) {
      let string2 = this.text[i2], end = offset + string2.length;
      if ((isLine ? line : end) >= target)
        return new Line(offset, end, line, string2);
      offset = end + 1;
      line++;
    }
  }
  decompose(from, to2, target, open) {
    let text = from <= 0 && to2 >= this.length ? this : new _TextLeaf(sliceText(this.text, from, to2), Math.min(to2, this.length) - Math.max(0, from));
    if (open & 1) {
      let prev = target.pop();
      let joined = appendText(text.text, prev.text.slice(), 0, text.length);
      if (joined.length <= 32) {
        target.push(new _TextLeaf(joined, prev.length + text.length));
      } else {
        let mid = joined.length >> 1;
        target.push(new _TextLeaf(joined.slice(0, mid)), new _TextLeaf(joined.slice(mid)));
      }
    } else {
      target.push(text);
    }
  }
  replace(from, to2, text) {
    if (!(text instanceof _TextLeaf))
      return super.replace(from, to2, text);
    [from, to2] = clip(this, from, to2);
    let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to2);
    let newLen = this.length + text.length - (to2 - from);
    if (lines.length <= 32)
      return new _TextLeaf(lines, newLen);
    return TextNode.from(_TextLeaf.split(lines, []), newLen);
  }
  sliceString(from, to2 = this.length, lineSep = "\n") {
    [from, to2] = clip(this, from, to2);
    let result = "";
    for (let pos = 0, i2 = 0; pos <= to2 && i2 < this.text.length; i2++) {
      let line = this.text[i2], end = pos + line.length;
      if (pos > from && i2)
        result += lineSep;
      if (from < end && to2 > pos)
        result += line.slice(Math.max(0, from - pos), to2 - pos);
      pos = end + 1;
    }
    return result;
  }
  flatten(target) {
    for (let line of this.text)
      target.push(line);
  }
  scanIdentical() {
    return 0;
  }
  static split(text, target) {
    let part = [], len = -1;
    for (let line of text) {
      part.push(line);
      len += line.length + 1;
      if (part.length == 32) {
        target.push(new _TextLeaf(part, len));
        part = [];
        len = -1;
      }
    }
    if (len > -1)
      target.push(new _TextLeaf(part, len));
    return target;
  }
};
var TextNode = class _TextNode extends Text {
  constructor(children, length) {
    super();
    this.children = children;
    this.length = length;
    this.lines = 0;
    for (let child of children)
      this.lines += child.lines;
  }
  lineInner(target, isLine, line, offset) {
    for (let i2 = 0; ; i2++) {
      let child = this.children[i2], end = offset + child.length, endLine = line + child.lines - 1;
      if ((isLine ? endLine : end) >= target)
        return child.lineInner(target, isLine, line, offset);
      offset = end + 1;
      line = endLine + 1;
    }
  }
  decompose(from, to2, target, open) {
    for (let i2 = 0, pos = 0; pos <= to2 && i2 < this.children.length; i2++) {
      let child = this.children[i2], end = pos + child.length;
      if (from <= end && to2 >= pos) {
        let childOpen = open & ((pos <= from ? 1 : 0) | (end >= to2 ? 2 : 0));
        if (pos >= from && end <= to2 && !childOpen)
          target.push(child);
        else
          child.decompose(from - pos, to2 - pos, target, childOpen);
      }
      pos = end + 1;
    }
  }
  replace(from, to2, text) {
    [from, to2] = clip(this, from, to2);
    if (text.lines < this.lines)
      for (let i2 = 0, pos = 0; i2 < this.children.length; i2++) {
        let child = this.children[i2], end = pos + child.length;
        if (from >= pos && to2 <= end) {
          let updated = child.replace(from - pos, to2 - pos, text);
          let totalLines = this.lines - child.lines + updated.lines;
          if (updated.lines < totalLines >> 5 - 1 && updated.lines > totalLines >> 5 + 1) {
            let copy = this.children.slice();
            copy[i2] = updated;
            return new _TextNode(copy, this.length - (to2 - from) + text.length);
          }
          return super.replace(pos, end, updated);
        }
        pos = end + 1;
      }
    return super.replace(from, to2, text);
  }
  sliceString(from, to2 = this.length, lineSep = "\n") {
    [from, to2] = clip(this, from, to2);
    let result = "";
    for (let i2 = 0, pos = 0; i2 < this.children.length && pos <= to2; i2++) {
      let child = this.children[i2], end = pos + child.length;
      if (pos > from && i2)
        result += lineSep;
      if (from < end && to2 > pos)
        result += child.sliceString(from - pos, to2 - pos, lineSep);
      pos = end + 1;
    }
    return result;
  }
  flatten(target) {
    for (let child of this.children)
      child.flatten(target);
  }
  scanIdentical(other, dir) {
    if (!(other instanceof _TextNode))
      return 0;
    let length = 0;
    let [iA2, iB2, eA2, eB2] = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1];
    for (; ; iA2 += dir, iB2 += dir) {
      if (iA2 == eA2 || iB2 == eB2)
        return length;
      let chA = this.children[iA2], chB = other.children[iB2];
      if (chA != chB)
        return length + chA.scanIdentical(chB, dir);
      length += chA.length + 1;
    }
  }
  static from(children, length = children.reduce((l2, ch2) => l2 + ch2.length + 1, -1)) {
    let lines = 0;
    for (let ch2 of children)
      lines += ch2.lines;
    if (lines < 32) {
      let flat = [];
      for (let ch2 of children)
        ch2.flatten(flat);
      return new TextLeaf(flat, length);
    }
    let chunk = Math.max(
      32,
      lines >> 5
      /* Tree.BranchShift */
    ), maxChunk = chunk << 1, minChunk = chunk >> 1;
    let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
    function add2(child) {
      let last;
      if (child.lines > maxChunk && child instanceof _TextNode) {
        for (let node of child.children)
          add2(node);
      } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
        flush();
        chunked.push(child);
      } else if (child instanceof TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last.lines <= 32) {
        currentLines += child.lines;
        currentLen += child.length + 1;
        currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
      } else {
        if (currentLines + child.lines > chunk)
          flush();
        currentLines += child.lines;
        currentLen += child.length + 1;
        currentChunk.push(child);
      }
    }
    function flush() {
      if (currentLines == 0)
        return;
      chunked.push(currentChunk.length == 1 ? currentChunk[0] : _TextNode.from(currentChunk, currentLen));
      currentLen = -1;
      currentLines = currentChunk.length = 0;
    }
    for (let child of children)
      add2(child);
    flush();
    return chunked.length == 1 ? chunked[0] : new _TextNode(chunked, length);
  }
};
Text.empty = /* @__PURE__ */ new TextLeaf([""], 0);
function textLength(text) {
  let length = -1;
  for (let line of text)
    length += line.length + 1;
  return length;
}
function appendText(text, target, from = 0, to2 = 1e9) {
  for (let pos = 0, i2 = 0, first = true; i2 < text.length && pos <= to2; i2++) {
    let line = text[i2], end = pos + line.length;
    if (end >= from) {
      if (end > to2)
        line = line.slice(0, to2 - pos);
      if (pos < from)
        line = line.slice(from - pos);
      if (first) {
        target[target.length - 1] += line;
        first = false;
      } else
        target.push(line);
    }
    pos = end + 1;
  }
  return target;
}
function sliceText(text, from, to2) {
  return appendText(text, [""], from, to2);
}
var RawTextCursor = class {
  constructor(text, dir = 1) {
    this.dir = dir;
    this.done = false;
    this.lineBreak = false;
    this.value = "";
    this.nodes = [text];
    this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
  }
  nextInner(skip, dir) {
    this.done = this.lineBreak = false;
    for (; ; ) {
      let last = this.nodes.length - 1;
      let top2 = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
      let size = top2 instanceof TextLeaf ? top2.text.length : top2.children.length;
      if (offset == (dir > 0 ? size : 0)) {
        if (last == 0) {
          this.done = true;
          this.value = "";
          return this;
        }
        if (dir > 0)
          this.offsets[last - 1]++;
        this.nodes.pop();
        this.offsets.pop();
      } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
        this.offsets[last] += dir;
        if (skip == 0) {
          this.lineBreak = true;
          this.value = "\n";
          return this;
        }
        skip--;
      } else if (top2 instanceof TextLeaf) {
        let next = top2.text[offset + (dir < 0 ? -1 : 0)];
        this.offsets[last] += dir;
        if (next.length > Math.max(0, skip)) {
          this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
          return this;
        }
        skip -= next.length;
      } else {
        let next = top2.children[offset + (dir < 0 ? -1 : 0)];
        if (skip > next.length) {
          skip -= next.length;
          this.offsets[last] += dir;
        } else {
          if (dir < 0)
            this.offsets[last]--;
          this.nodes.push(next);
          this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
        }
      }
    }
  }
  next(skip = 0) {
    if (skip < 0) {
      this.nextInner(-skip, -this.dir);
      skip = this.value.length;
    }
    return this.nextInner(skip, this.dir);
  }
};
var PartialTextCursor = class {
  constructor(text, start, end) {
    this.value = "";
    this.done = false;
    this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
    this.pos = start > end ? text.length : 0;
    this.from = Math.min(start, end);
    this.to = Math.max(start, end);
  }
  nextInner(skip, dir) {
    if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
      this.value = "";
      this.done = true;
      return this;
    }
    skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
    let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
    if (skip > limit)
      skip = limit;
    limit -= skip;
    let { value } = this.cursor.next(skip);
    this.pos += (value.length + skip) * dir;
    this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
    this.done = !this.value;
    return this;
  }
  next(skip = 0) {
    if (skip < 0)
      skip = Math.max(skip, this.from - this.pos);
    else if (skip > 0)
      skip = Math.min(skip, this.to - this.pos);
    return this.nextInner(skip, this.cursor.dir);
  }
  get lineBreak() {
    return this.cursor.lineBreak && this.value != "";
  }
};
var LineCursor = class {
  constructor(inner) {
    this.inner = inner;
    this.afterBreak = true;
    this.value = "";
    this.done = false;
  }
  next(skip = 0) {
    let { done, lineBreak, value } = this.inner.next(skip);
    if (done && this.afterBreak) {
      this.value = "";
      this.afterBreak = false;
    } else if (done) {
      this.done = true;
      this.value = "";
    } else if (lineBreak) {
      if (this.afterBreak) {
        this.value = "";
      } else {
        this.afterBreak = true;
        this.next();
      }
    } else {
      this.value = value;
      this.afterBreak = false;
    }
    return this;
  }
  get lineBreak() {
    return false;
  }
};
if (typeof Symbol != "undefined") {
  Text.prototype[Symbol.iterator] = function() {
    return this.iter();
  };
  RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function() {
    return this;
  };
}
var Line = class {
  /**
  @internal
  */
  constructor(from, to2, number2, text) {
    this.from = from;
    this.to = to2;
    this.number = number2;
    this.text = text;
  }
  /**
  The length of the line (not including any line break after it).
  */
  get length() {
    return this.to - this.from;
  }
};
function clip(text, from, to2) {
  from = Math.max(0, Math.min(text.length, from));
  return [from, Math.max(from, Math.min(text.length, to2))];
}
var extend = /* @__PURE__ */ "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((s2) => s2 ? parseInt(s2, 36) : 1);
for (let i2 = 1; i2 < extend.length; i2++)
  extend[i2] += extend[i2 - 1];
function isExtendingChar(code) {
  for (let i2 = 1; i2 < extend.length; i2 += 2)
    if (extend[i2] > code)
      return extend[i2 - 1] <= code;
  return false;
}
function isRegionalIndicator(code) {
  return code >= 127462 && code <= 127487;
}
var ZWJ = 8205;
function findClusterBreak(str, pos, forward = true, includeExtending = true) {
  return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
}
function nextClusterBreak(str, pos, includeExtending) {
  if (pos == str.length)
    return pos;
  if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
    pos--;
  let prev = codePointAt(str, pos);
  pos += codePointSize(prev);
  while (pos < str.length) {
    let next = codePointAt(str, pos);
    if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
      pos += codePointSize(next);
      prev = next;
    } else if (isRegionalIndicator(next)) {
      let countBefore = 0, i2 = pos - 2;
      while (i2 >= 0 && isRegionalIndicator(codePointAt(str, i2))) {
        countBefore++;
        i2 -= 2;
      }
      if (countBefore % 2 == 0)
        break;
      else
        pos += 2;
    } else {
      break;
    }
  }
  return pos;
}
function prevClusterBreak(str, pos, includeExtending) {
  while (pos > 0) {
    let found = nextClusterBreak(str, pos - 2, includeExtending);
    if (found < pos)
      return found;
    pos--;
  }
  return 0;
}
function surrogateLow(ch2) {
  return ch2 >= 56320 && ch2 < 57344;
}
function surrogateHigh(ch2) {
  return ch2 >= 55296 && ch2 < 56320;
}
function codePointAt(str, pos) {
  let code0 = str.charCodeAt(pos);
  if (!surrogateHigh(code0) || pos + 1 == str.length)
    return code0;
  let code1 = str.charCodeAt(pos + 1);
  if (!surrogateLow(code1))
    return code0;
  return (code0 - 55296 << 10) + (code1 - 56320) + 65536;
}
function fromCodePoint(code) {
  if (code <= 65535)
    return String.fromCharCode(code);
  code -= 65536;
  return String.fromCharCode((code >> 10) + 55296, (code & 1023) + 56320);
}
function codePointSize(code) {
  return code < 65536 ? 1 : 2;
}
var DefaultSplit = /\r\n?|\n/;
var MapMode = /* @__PURE__ */ function(MapMode2) {
  MapMode2[MapMode2["Simple"] = 0] = "Simple";
  MapMode2[MapMode2["TrackDel"] = 1] = "TrackDel";
  MapMode2[MapMode2["TrackBefore"] = 2] = "TrackBefore";
  MapMode2[MapMode2["TrackAfter"] = 3] = "TrackAfter";
  return MapMode2;
}(MapMode || (MapMode = {}));
var ChangeDesc = class _ChangeDesc {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.
  /**
  @internal
  */
  constructor(sections) {
    this.sections = sections;
  }
  /**
  The length of the document before the change.
  */
  get length() {
    let result = 0;
    for (let i2 = 0; i2 < this.sections.length; i2 += 2)
      result += this.sections[i2];
    return result;
  }
  /**
  The length of the document after the change.
  */
  get newLength() {
    let result = 0;
    for (let i2 = 0; i2 < this.sections.length; i2 += 2) {
      let ins = this.sections[i2 + 1];
      result += ins < 0 ? this.sections[i2] : ins;
    }
    return result;
  }
  /**
  False when there are actual changes in this set.
  */
  get empty() {
    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
  }
  /**
  Iterate over the unchanged parts left by these changes. `posA`
  provides the position of the range in the old document, `posB`
  the new position in the changed document.
  */
  iterGaps(f2) {
    for (let i2 = 0, posA = 0, posB = 0; i2 < this.sections.length; ) {
      let len = this.sections[i2++], ins = this.sections[i2++];
      if (ins < 0) {
        f2(posA, posB, len);
        posB += len;
      } else {
        posB += ins;
      }
      posA += len;
    }
  }
  /**
  Iterate over the ranges changed by these changes. (See
  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
  variant that also provides you with the inserted text.)
  `fromA`/`toA` provides the extent of the change in the starting
  document, `fromB`/`toB` the extent of the replacement in the
  changed document.
  
  When `individual` is true, adjacent changes (which are kept
  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
  reported separately.
  */
  iterChangedRanges(f2, individual = false) {
    iterChanges(this, f2, individual);
  }
  /**
  Get a description of the inverted form of these changes.
  */
  get invertedDesc() {
    let sections = [];
    for (let i2 = 0; i2 < this.sections.length; ) {
      let len = this.sections[i2++], ins = this.sections[i2++];
      if (ins < 0)
        sections.push(len, ins);
      else
        sections.push(ins, len);
    }
    return new _ChangeDesc(sections);
  }
  /**
  Compute the combined effect of applying another set of changes
  after this one. The length of the document after this set should
  match the length before `other`.
  */
  composeDesc(other) {
    return this.empty ? other : other.empty ? this : composeSets(this, other);
  }
  /**
  Map this description, which should start with the same document
  as `other`, over another set of changes, so that it can be
  applied after it. When `before` is true, map as if the changes
  in `other` happened before the ones in `this`.
  */
  mapDesc(other, before = false) {
    return other.empty ? this : mapSet(this, other, before);
  }
  mapPos(pos, assoc = -1, mode = MapMode.Simple) {
    let posA = 0, posB = 0;
    for (let i2 = 0; i2 < this.sections.length; ) {
      let len = this.sections[i2++], ins = this.sections[i2++], endA = posA + len;
      if (ins < 0) {
        if (endA > pos)
          return posB + (pos - posA);
        posB += len;
      } else {
        if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos))
          return null;
        if (endA > pos || endA == pos && assoc < 0 && !len)
          return pos == posA || assoc < 0 ? posB : posB + ins;
        posB += ins;
      }
      posA = endA;
    }
    if (pos > posA)
      throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
    return posB;
  }
  /**
  Check whether these changes touch a given range. When one of the
  changes entirely covers the range, the string `"cover"` is
  returned.
  */
  touchesRange(from, to2 = from) {
    for (let i2 = 0, pos = 0; i2 < this.sections.length && pos <= to2; ) {
      let len = this.sections[i2++], ins = this.sections[i2++], end = pos + len;
      if (ins >= 0 && pos <= to2 && end >= from)
        return pos < from && end > to2 ? "cover" : true;
      pos = end;
    }
    return false;
  }
  /**
  @internal
  */
  toString() {
    let result = "";
    for (let i2 = 0; i2 < this.sections.length; ) {
      let len = this.sections[i2++], ins = this.sections[i2++];
      result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
    }
    return result;
  }
  /**
  Serialize this change desc to a JSON-representable value.
  */
  toJSON() {
    return this.sections;
  }
  /**
  Create a change desc from its JSON representation (as produced
  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
  */
  static fromJSON(json) {
    if (!Array.isArray(json) || json.length % 2 || json.some((a2) => typeof a2 != "number"))
      throw new RangeError("Invalid JSON representation of ChangeDesc");
    return new _ChangeDesc(json);
  }
  /**
  @internal
  */
  static create(sections) {
    return new _ChangeDesc(sections);
  }
};
var ChangeSet = class _ChangeSet extends ChangeDesc {
  constructor(sections, inserted) {
    super(sections);
    this.inserted = inserted;
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */
  apply(doc2) {
    if (this.length != doc2.length)
      throw new RangeError("Applying change set to a document with the wrong length");
    iterChanges(this, (fromA, toA, fromB, _toB, text) => doc2 = doc2.replace(fromB, fromB + (toA - fromA), text), false);
    return doc2;
  }
  mapDesc(other, before = false) {
    return mapSet(this, other, before, true);
  }
  /**
  Given the document as it existed _before_ the changes, return a
  change set that represents the inverse of this set, which could
  be used to go from the document created by the changes back to
  the document as it existed before the changes.
  */
  invert(doc2) {
    let sections = this.sections.slice(), inserted = [];
    for (let i2 = 0, pos = 0; i2 < sections.length; i2 += 2) {
      let len = sections[i2], ins = sections[i2 + 1];
      if (ins >= 0) {
        sections[i2] = ins;
        sections[i2 + 1] = len;
        let index = i2 >> 1;
        while (inserted.length < index)
          inserted.push(Text.empty);
        inserted.push(len ? doc2.slice(pos, pos + len) : Text.empty);
      }
      pos += len;
    }
    return new _ChangeSet(sections, inserted);
  }
  /**
  Combine two subsequent change sets into a single set. `other`
  must start in the document produced by `this`. If `this` goes
  `docA` → `docB` and `other` represents `docB` → `docC`, the
  returned value will represent the change `docA` → `docC`.
  */
  compose(other) {
    return this.empty ? other : other.empty ? this : composeSets(this, other, true);
  }
  /**
  Given another change set starting in the same document, maps this
  change set over the other, producing a new change set that can be
  applied to the document produced by applying `other`. When
  `before` is `true`, order changes as if `this` comes before
  `other`, otherwise (the default) treat `other` as coming first.
  
  Given two changes `A` and `B`, `A.compose(B.map(A))` and
  `B.compose(A.map(B, true))` will produce the same document. This
  provides a basic form of [operational
  transformation](https://en.wikipedia.org/wiki/Operational_transformation),
  and can be used for collaborative editing.
  */
  map(other, before = false) {
    return other.empty ? this : mapSet(this, other, before, true);
  }
  /**
  Iterate over the changed ranges in the document, calling `f` for
  each, with the range in the original document (`fromA`-`toA`)
  and the range that replaces it in the new document
  (`fromB`-`toB`).
  
  When `individual` is true, adjacent changes are reported
  separately.
  */
  iterChanges(f2, individual = false) {
    iterChanges(this, f2, individual);
  }
  /**
  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
  set.
  */
  get desc() {
    return ChangeDesc.create(this.sections);
  }
  /**
  @internal
  */
  filter(ranges) {
    let resultSections = [], resultInserted = [], filteredSections = [];
    let iter = new SectionIter(this);
    done: for (let i2 = 0, pos = 0; ; ) {
      let next = i2 == ranges.length ? 1e9 : ranges[i2++];
      while (pos < next || pos == next && iter.len == 0) {
        if (iter.done)
          break done;
        let len = Math.min(iter.len, next - pos);
        addSection(filteredSections, len, -1);
        let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
        addSection(resultSections, len, ins);
        if (ins > 0)
          addInsert(resultInserted, resultSections, iter.text);
        iter.forward(len);
        pos += len;
      }
      let end = ranges[i2++];
      while (pos < end) {
        if (iter.done)
          break done;
        let len = Math.min(iter.len, end - pos);
        addSection(resultSections, len, -1);
        addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
        iter.forward(len);
        pos += len;
      }
    }
    return {
      changes: new _ChangeSet(resultSections, resultInserted),
      filtered: ChangeDesc.create(filteredSections)
    };
  }
  /**
  Serialize this change set to a JSON-representable value.
  */
  toJSON() {
    let parts = [];
    for (let i2 = 0; i2 < this.sections.length; i2 += 2) {
      let len = this.sections[i2], ins = this.sections[i2 + 1];
      if (ins < 0)
        parts.push(len);
      else if (ins == 0)
        parts.push([len]);
      else
        parts.push([len].concat(this.inserted[i2 >> 1].toJSON()));
    }
    return parts;
  }
  /**
  Create a change set for the given changes, for a document of the
  given length, using `lineSep` as line separator.
  */
  static of(changes, length, lineSep) {
    let sections = [], inserted = [], pos = 0;
    let total = null;
    function flush(force = false) {
      if (!force && !sections.length)
        return;
      if (pos < length)
        addSection(sections, length - pos, -1);
      let set = new _ChangeSet(sections, inserted);
      total = total ? total.compose(set.map(total)) : set;
      sections = [];
      inserted = [];
      pos = 0;
    }
    function process2(spec) {
      if (Array.isArray(spec)) {
        for (let sub of spec)
          process2(sub);
      } else if (spec instanceof _ChangeSet) {
        if (spec.length != length)
          throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
        flush();
        total = total ? total.compose(spec.map(total)) : spec;
      } else {
        let { from, to: to2 = from, insert: insert2 } = spec;
        if (from > to2 || from < 0 || to2 > length)
          throw new RangeError(`Invalid change range ${from} to ${to2} (in doc of length ${length})`);
        let insText = !insert2 ? Text.empty : typeof insert2 == "string" ? Text.of(insert2.split(lineSep || DefaultSplit)) : insert2;
        let insLen = insText.length;
        if (from == to2 && insLen == 0)
          return;
        if (from < pos)
          flush();
        if (from > pos)
          addSection(sections, from - pos, -1);
        addSection(sections, to2 - from, insLen);
        addInsert(inserted, sections, insText);
        pos = to2;
      }
    }
    process2(changes);
    flush(!total);
    return total;
  }
  /**
  Create an empty changeset of the given length.
  */
  static empty(length) {
    return new _ChangeSet(length ? [length, -1] : [], []);
  }
  /**
  Create a changeset from its JSON representation (as produced by
  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
  */
  static fromJSON(json) {
    if (!Array.isArray(json))
      throw new RangeError("Invalid JSON representation of ChangeSet");
    let sections = [], inserted = [];
    for (let i2 = 0; i2 < json.length; i2++) {
      let part = json[i2];
      if (typeof part == "number") {
        sections.push(part, -1);
      } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e25, i3) => i3 && typeof e25 != "string")) {
        throw new RangeError("Invalid JSON representation of ChangeSet");
      } else if (part.length == 1) {
        sections.push(part[0], 0);
      } else {
        while (inserted.length < i2)
          inserted.push(Text.empty);
        inserted[i2] = Text.of(part.slice(1));
        sections.push(part[0], inserted[i2].length);
      }
    }
    return new _ChangeSet(sections, inserted);
  }
  /**
  @internal
  */
  static createSet(sections, inserted) {
    return new _ChangeSet(sections, inserted);
  }
};
function addSection(sections, len, ins, forceJoin = false) {
  if (len == 0 && ins <= 0)
    return;
  let last = sections.length - 2;
  if (last >= 0 && ins <= 0 && ins == sections[last + 1])
    sections[last] += len;
  else if (len == 0 && sections[last] == 0)
    sections[last + 1] += ins;
  else if (forceJoin) {
    sections[last] += len;
    sections[last + 1] += ins;
  } else
    sections.push(len, ins);
}
function addInsert(values2, sections, value) {
  if (value.length == 0)
    return;
  let index = sections.length - 2 >> 1;
  if (index < values2.length) {
    values2[values2.length - 1] = values2[values2.length - 1].append(value);
  } else {
    while (values2.length < index)
      values2.push(Text.empty);
    values2.push(value);
  }
}
function iterChanges(desc, f2, individual) {
  let inserted = desc.inserted;
  for (let posA = 0, posB = 0, i2 = 0; i2 < desc.sections.length; ) {
    let len = desc.sections[i2++], ins = desc.sections[i2++];
    if (ins < 0) {
      posA += len;
      posB += len;
    } else {
      let endA = posA, endB = posB, text = Text.empty;
      for (; ; ) {
        endA += len;
        endB += ins;
        if (ins && inserted)
          text = text.append(inserted[i2 - 2 >> 1]);
        if (individual || i2 == desc.sections.length || desc.sections[i2 + 1] < 0)
          break;
        len = desc.sections[i2++];
        ins = desc.sections[i2++];
      }
      f2(posA, endA, posB, endB, text);
      posA = endA;
      posB = endB;
    }
  }
}
function mapSet(setA, setB, before, mkSet = false) {
  let sections = [], insert2 = mkSet ? [] : null;
  let a2 = new SectionIter(setA), b2 = new SectionIter(setB);
  for (let inserted = -1; ; ) {
    if (a2.ins == -1 && b2.ins == -1) {
      let len = Math.min(a2.len, b2.len);
      addSection(sections, len, -1);
      a2.forward(len);
      b2.forward(len);
    } else if (b2.ins >= 0 && (a2.ins < 0 || inserted == a2.i || a2.off == 0 && (b2.len < a2.len || b2.len == a2.len && !before))) {
      let len = b2.len;
      addSection(sections, b2.ins, -1);
      while (len) {
        let piece = Math.min(a2.len, len);
        if (a2.ins >= 0 && inserted < a2.i && a2.len <= piece) {
          addSection(sections, 0, a2.ins);
          if (insert2)
            addInsert(insert2, sections, a2.text);
          inserted = a2.i;
        }
        a2.forward(piece);
        len -= piece;
      }
      b2.next();
    } else if (a2.ins >= 0) {
      let len = 0, left = a2.len;
      while (left) {
        if (b2.ins == -1) {
          let piece = Math.min(left, b2.len);
          len += piece;
          left -= piece;
          b2.forward(piece);
        } else if (b2.ins == 0 && b2.len < left) {
          left -= b2.len;
          b2.next();
        } else {
          break;
        }
      }
      addSection(sections, len, inserted < a2.i ? a2.ins : 0);
      if (insert2 && inserted < a2.i)
        addInsert(insert2, sections, a2.text);
      inserted = a2.i;
      a2.forward(a2.len - left);
    } else if (a2.done && b2.done) {
      return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
    } else {
      throw new Error("Mismatched change set lengths");
    }
  }
}
function composeSets(setA, setB, mkSet = false) {
  let sections = [];
  let insert2 = mkSet ? [] : null;
  let a2 = new SectionIter(setA), b2 = new SectionIter(setB);
  for (let open = false; ; ) {
    if (a2.done && b2.done) {
      return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
    } else if (a2.ins == 0) {
      addSection(sections, a2.len, 0, open);
      a2.next();
    } else if (b2.len == 0 && !b2.done) {
      addSection(sections, 0, b2.ins, open);
      if (insert2)
        addInsert(insert2, sections, b2.text);
      b2.next();
    } else if (a2.done || b2.done) {
      throw new Error("Mismatched change set lengths");
    } else {
      let len = Math.min(a2.len2, b2.len), sectionLen = sections.length;
      if (a2.ins == -1) {
        let insB = b2.ins == -1 ? -1 : b2.off ? 0 : b2.ins;
        addSection(sections, len, insB, open);
        if (insert2 && insB)
          addInsert(insert2, sections, b2.text);
      } else if (b2.ins == -1) {
        addSection(sections, a2.off ? 0 : a2.len, len, open);
        if (insert2)
          addInsert(insert2, sections, a2.textBit(len));
      } else {
        addSection(sections, a2.off ? 0 : a2.len, b2.off ? 0 : b2.ins, open);
        if (insert2 && !b2.off)
          addInsert(insert2, sections, b2.text);
      }
      open = (a2.ins > len || b2.ins >= 0 && b2.len > len) && (open || sections.length > sectionLen);
      a2.forward2(len);
      b2.forward(len);
    }
  }
}
var SectionIter = class {
  constructor(set) {
    this.set = set;
    this.i = 0;
    this.next();
  }
  next() {
    let { sections } = this.set;
    if (this.i < sections.length) {
      this.len = sections[this.i++];
      this.ins = sections[this.i++];
    } else {
      this.len = 0;
      this.ins = -2;
    }
    this.off = 0;
  }
  get done() {
    return this.ins == -2;
  }
  get len2() {
    return this.ins < 0 ? this.len : this.ins;
  }
  get text() {
    let { inserted } = this.set, index = this.i - 2 >> 1;
    return index >= inserted.length ? Text.empty : inserted[index];
  }
  textBit(len) {
    let { inserted } = this.set, index = this.i - 2 >> 1;
    return index >= inserted.length && !len ? Text.empty : inserted[index].slice(this.off, len == null ? void 0 : this.off + len);
  }
  forward(len) {
    if (len == this.len)
      this.next();
    else {
      this.len -= len;
      this.off += len;
    }
  }
  forward2(len) {
    if (this.ins == -1)
      this.forward(len);
    else if (len == this.ins)
      this.next();
    else {
      this.ins -= len;
      this.off += len;
    }
  }
};
var SelectionRange = class _SelectionRange {
  constructor(from, to2, flags) {
    this.from = from;
    this.to = to2;
    this.flags = flags;
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */
  get anchor() {
    return this.flags & 32 ? this.to : this.from;
  }
  /**
  The head of the range, which is moved when the range is
  [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
  */
  get head() {
    return this.flags & 32 ? this.from : this.to;
  }
  /**
  True when `anchor` and `head` are at the same position.
  */
  get empty() {
    return this.from == this.to;
  }
  /**
  If this is a cursor that is explicitly associated with the
  character on one of its sides, this returns the side. -1 means
  the character before its position, 1 the character after, and 0
  means no association.
  */
  get assoc() {
    return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;
  }
  /**
  The bidirectional text level associated with this cursor, if
  any.
  */
  get bidiLevel() {
    let level = this.flags & 7;
    return level == 7 ? null : level;
  }
  /**
  The goal column (stored vertical offset) associated with a
  cursor. This is used to preserve the vertical position when
  [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
  lines of different length.
  */
  get goalColumn() {
    let value = this.flags >> 6;
    return value == 16777215 ? void 0 : value;
  }
  /**
  Map this range through a change, producing a valid range in the
  updated document.
  */
  map(change, assoc = -1) {
    let from, to2;
    if (this.empty) {
      from = to2 = change.mapPos(this.from, assoc);
    } else {
      from = change.mapPos(this.from, 1);
      to2 = change.mapPos(this.to, -1);
    }
    return from == this.from && to2 == this.to ? this : new _SelectionRange(from, to2, this.flags);
  }
  /**
  Extend this range to cover at least `from` to `to`.
  */
  extend(from, to2 = from) {
    if (from <= this.anchor && to2 >= this.anchor)
      return EditorSelection.range(from, to2);
    let head = Math.abs(from - this.anchor) > Math.abs(to2 - this.anchor) ? from : to2;
    return EditorSelection.range(this.anchor, head);
  }
  /**
  Compare this range to another range.
  */
  eq(other, includeAssoc = false) {
    return this.anchor == other.anchor && this.head == other.head && (!includeAssoc || !this.empty || this.assoc == other.assoc);
  }
  /**
  Return a JSON-serializable object representing the range.
  */
  toJSON() {
    return { anchor: this.anchor, head: this.head };
  }
  /**
  Convert a JSON representation of a range to a `SelectionRange`
  instance.
  */
  static fromJSON(json) {
    if (!json || typeof json.anchor != "number" || typeof json.head != "number")
      throw new RangeError("Invalid JSON representation for SelectionRange");
    return EditorSelection.range(json.anchor, json.head);
  }
  /**
  @internal
  */
  static create(from, to2, flags) {
    return new _SelectionRange(from, to2, flags);
  }
};
var EditorSelection = class _EditorSelection {
  constructor(ranges, mainIndex) {
    this.ranges = ranges;
    this.mainIndex = mainIndex;
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */
  map(change, assoc = -1) {
    if (change.empty)
      return this;
    return _EditorSelection.create(this.ranges.map((r2) => r2.map(change, assoc)), this.mainIndex);
  }
  /**
  Compare this selection to another selection. By default, ranges
  are compared only by position. When `includeAssoc` is true,
  cursor ranges must also have the same
  [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
  */
  eq(other, includeAssoc = false) {
    if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex)
      return false;
    for (let i2 = 0; i2 < this.ranges.length; i2++)
      if (!this.ranges[i2].eq(other.ranges[i2], includeAssoc))
        return false;
    return true;
  }
  /**
  Get the primary selection range. Usually, you should make sure
  your code applies to _all_ ranges, by using methods like
  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
  */
  get main() {
    return this.ranges[this.mainIndex];
  }
  /**
  Make sure the selection only has one range. Returns a selection
  holding only the main range from this selection.
  */
  asSingle() {
    return this.ranges.length == 1 ? this : new _EditorSelection([this.main], 0);
  }
  /**
  Extend this selection with an extra range.
  */
  addRange(range, main = true) {
    return _EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
  }
  /**
  Replace a given range with another range, and then normalize the
  selection to merge and sort ranges if necessary.
  */
  replaceRange(range, which = this.mainIndex) {
    let ranges = this.ranges.slice();
    ranges[which] = range;
    return _EditorSelection.create(ranges, this.mainIndex);
  }
  /**
  Convert this selection to an object that can be serialized to
  JSON.
  */
  toJSON() {
    return { ranges: this.ranges.map((r2) => r2.toJSON()), main: this.mainIndex };
  }
  /**
  Create a selection from a JSON representation.
  */
  static fromJSON(json) {
    if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
      throw new RangeError("Invalid JSON representation for EditorSelection");
    return new _EditorSelection(json.ranges.map((r2) => SelectionRange.fromJSON(r2)), json.main);
  }
  /**
  Create a selection holding a single range.
  */
  static single(anchor, head = anchor) {
    return new _EditorSelection([_EditorSelection.range(anchor, head)], 0);
  }
  /**
  Sort and merge the given set of ranges, creating a valid
  selection.
  */
  static create(ranges, mainIndex = 0) {
    if (ranges.length == 0)
      throw new RangeError("A selection needs at least one range");
    for (let pos = 0, i2 = 0; i2 < ranges.length; i2++) {
      let range = ranges[i2];
      if (range.empty ? range.from <= pos : range.from < pos)
        return _EditorSelection.normalized(ranges.slice(), mainIndex);
      pos = range.to;
    }
    return new _EditorSelection(ranges, mainIndex);
  }
  /**
  Create a cursor selection range at the given position. You can
  safely ignore the optional arguments in most situations.
  */
  static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
    return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 : 16) | (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6);
  }
  /**
  Create a selection range.
  */
  static range(anchor, head, goalColumn, bidiLevel) {
    let flags = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6 | (bidiLevel == null ? 7 : Math.min(6, bidiLevel));
    return head < anchor ? SelectionRange.create(head, anchor, 32 | 16 | flags) : SelectionRange.create(anchor, head, (head > anchor ? 8 : 0) | flags);
  }
  /**
  @internal
  */
  static normalized(ranges, mainIndex = 0) {
    let main = ranges[mainIndex];
    ranges.sort((a2, b2) => a2.from - b2.from);
    mainIndex = ranges.indexOf(main);
    for (let i2 = 1; i2 < ranges.length; i2++) {
      let range = ranges[i2], prev = ranges[i2 - 1];
      if (range.empty ? range.from <= prev.to : range.from < prev.to) {
        let from = prev.from, to2 = Math.max(range.to, prev.to);
        if (i2 <= mainIndex)
          mainIndex--;
        ranges.splice(--i2, 2, range.anchor > range.head ? _EditorSelection.range(to2, from) : _EditorSelection.range(from, to2));
      }
    }
    return new _EditorSelection(ranges, mainIndex);
  }
};
function checkSelection(selection, docLength) {
  for (let range of selection.ranges)
    if (range.to > docLength)
      throw new RangeError("Selection points outside of document");
}
var nextID = 0;
var Facet = class _Facet {
  constructor(combine, compareInput, compare2, isStatic, enables) {
    this.combine = combine;
    this.compareInput = compareInput;
    this.compare = compare2;
    this.isStatic = isStatic;
    this.id = nextID++;
    this.default = combine([]);
    this.extensions = typeof enables == "function" ? enables(this) : enables;
  }
  /**
  Returns a facet reader for this facet, which can be used to
  [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
  */
  get reader() {
    return this;
  }
  /**
  Define a new facet.
  */
  static define(config2 = {}) {
    return new _Facet(config2.combine || ((a2) => a2), config2.compareInput || ((a2, b2) => a2 === b2), config2.compare || (!config2.combine ? sameArray : (a2, b2) => a2 === b2), !!config2.static, config2.enables);
  }
  /**
  Returns an extension that adds the given value to this facet.
  */
  of(value) {
    return new FacetProvider([], this, 0, value);
  }
  /**
  Create an extension that computes a value for the facet from a
  state. You must take care to declare the parts of the state that
  this value depends on, since your function is only called again
  for a new state when one of those parts changed.
  
  In cases where your value depends only on a single field, you'll
  want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
  */
  compute(deps, get) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new FacetProvider(deps, this, 1, get);
  }
  /**
  Create an extension that computes zero or more values for this
  facet from a state.
  */
  computeN(deps, get) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new FacetProvider(deps, this, 2, get);
  }
  from(field, get) {
    if (!get)
      get = (x2) => x2;
    return this.compute([field], (state) => get(state.field(field)));
  }
};
function sameArray(a2, b2) {
  return a2 == b2 || a2.length == b2.length && a2.every((e25, i2) => e25 === b2[i2]);
}
var FacetProvider = class {
  constructor(dependencies, facet, type, value) {
    this.dependencies = dependencies;
    this.facet = facet;
    this.type = type;
    this.value = value;
    this.id = nextID++;
  }
  dynamicSlot(addresses) {
    var _a3;
    let getter = this.value;
    let compare2 = this.facet.compareInput;
    let id3 = this.id, idx = addresses[id3] >> 1, multi = this.type == 2;
    let depDoc = false, depSel = false, depAddrs = [];
    for (let dep of this.dependencies) {
      if (dep == "doc")
        depDoc = true;
      else if (dep == "selection")
        depSel = true;
      else if ((((_a3 = addresses[dep.id]) !== null && _a3 !== void 0 ? _a3 : 1) & 1) == 0)
        depAddrs.push(addresses[dep.id]);
    }
    return {
      create(state) {
        state.values[idx] = getter(state);
        return 1;
      },
      update(state, tr2) {
        if (depDoc && tr2.docChanged || depSel && (tr2.docChanged || tr2.selection) || ensureAll(state, depAddrs)) {
          let newVal = getter(state);
          if (multi ? !compareArray(newVal, state.values[idx], compare2) : !compare2(newVal, state.values[idx])) {
            state.values[idx] = newVal;
            return 1;
          }
        }
        return 0;
      },
      reconfigure: (state, oldState) => {
        let newVal, oldAddr = oldState.config.address[id3];
        if (oldAddr != null) {
          let oldVal = getAddr(oldState, oldAddr);
          if (this.dependencies.every((dep) => {
            return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) : dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
          }) || (multi ? compareArray(newVal = getter(state), oldVal, compare2) : compare2(newVal = getter(state), oldVal))) {
            state.values[idx] = oldVal;
            return 0;
          }
        } else {
          newVal = getter(state);
        }
        state.values[idx] = newVal;
        return 1;
      }
    };
  }
};
function compareArray(a2, b2, compare2) {
  if (a2.length != b2.length)
    return false;
  for (let i2 = 0; i2 < a2.length; i2++)
    if (!compare2(a2[i2], b2[i2]))
      return false;
  return true;
}
function ensureAll(state, addrs) {
  let changed = false;
  for (let addr of addrs)
    if (ensureAddr(state, addr) & 1)
      changed = true;
  return changed;
}
function dynamicFacetSlot(addresses, facet, providers) {
  let providerAddrs = providers.map((p2) => addresses[p2.id]);
  let providerTypes = providers.map((p2) => p2.type);
  let dynamic = providerAddrs.filter((p2) => !(p2 & 1));
  let idx = addresses[facet.id] >> 1;
  function get(state) {
    let values2 = [];
    for (let i2 = 0; i2 < providerAddrs.length; i2++) {
      let value = getAddr(state, providerAddrs[i2]);
      if (providerTypes[i2] == 2)
        for (let val of value)
          values2.push(val);
      else
        values2.push(value);
    }
    return facet.combine(values2);
  }
  return {
    create(state) {
      for (let addr of providerAddrs)
        ensureAddr(state, addr);
      state.values[idx] = get(state);
      return 1;
    },
    update(state, tr2) {
      if (!ensureAll(state, dynamic))
        return 0;
      let value = get(state);
      if (facet.compare(value, state.values[idx]))
        return 0;
      state.values[idx] = value;
      return 1;
    },
    reconfigure(state, oldState) {
      let depChanged = ensureAll(state, providerAddrs);
      let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
      if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {
        state.values[idx] = oldValue;
        return 0;
      }
      let value = get(state);
      if (facet.compare(value, oldValue)) {
        state.values[idx] = oldValue;
        return 0;
      }
      state.values[idx] = value;
      return 1;
    }
  };
}
var initField = /* @__PURE__ */ Facet.define({ static: true });
var StateField = class _StateField {
  constructor(id3, createF, updateF, compareF, spec) {
    this.id = id3;
    this.createF = createF;
    this.updateF = updateF;
    this.compareF = compareF;
    this.spec = spec;
    this.provides = void 0;
  }
  /**
  Define a state field.
  */
  static define(config2) {
    let field = new _StateField(nextID++, config2.create, config2.update, config2.compare || ((a2, b2) => a2 === b2), config2);
    if (config2.provide)
      field.provides = config2.provide(field);
    return field;
  }
  create(state) {
    let init = state.facet(initField).find((i2) => i2.field == this);
    return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
  }
  /**
  @internal
  */
  slot(addresses) {
    let idx = addresses[this.id] >> 1;
    return {
      create: (state) => {
        state.values[idx] = this.create(state);
        return 1;
      },
      update: (state, tr2) => {
        let oldVal = state.values[idx];
        let value = this.updateF(oldVal, tr2);
        if (this.compareF(oldVal, value))
          return 0;
        state.values[idx] = value;
        return 1;
      },
      reconfigure: (state, oldState) => {
        if (oldState.config.address[this.id] != null) {
          state.values[idx] = oldState.field(this);
          return 0;
        }
        state.values[idx] = this.create(state);
        return 1;
      }
    };
  }
  /**
  Returns an extension that enables this field and overrides the
  way it is initialized. Can be useful when you need to provide a
  non-default starting value for the field.
  */
  init(create) {
    return [this, initField.of({ field: this, create })];
  }
  /**
  State field instances can be used as
  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
  given state.
  */
  get extension() {
    return this;
  }
};
var Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
function prec(value) {
  return (ext) => new PrecExtension(ext, value);
}
var Prec = {
  /**
  The highest precedence level, for extensions that should end up
  near the start of the precedence ordering.
  */
  highest: /* @__PURE__ */ prec(Prec_.highest),
  /**
  A higher-than-default precedence, for extensions that should
  come before those with default precedence.
  */
  high: /* @__PURE__ */ prec(Prec_.high),
  /**
  The default precedence, which is also used for extensions
  without an explicit precedence.
  */
  default: /* @__PURE__ */ prec(Prec_.default),
  /**
  A lower-than-default precedence.
  */
  low: /* @__PURE__ */ prec(Prec_.low),
  /**
  The lowest precedence level. Meant for things that should end up
  near the end of the extension order.
  */
  lowest: /* @__PURE__ */ prec(Prec_.lowest)
};
var PrecExtension = class {
  constructor(inner, prec2) {
    this.inner = inner;
    this.prec = prec2;
  }
};
var Compartment = class _Compartment {
  /**
  Create an instance of this compartment to add to your [state
  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
  */
  of(ext) {
    return new CompartmentInstance(this, ext);
  }
  /**
  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
  reconfigures this compartment.
  */
  reconfigure(content2) {
    return _Compartment.reconfigure.of({ compartment: this, extension: content2 });
  }
  /**
  Get the current content of the compartment in the state, or
  `undefined` if it isn't present.
  */
  get(state) {
    return state.config.compartments.get(this);
  }
};
var CompartmentInstance = class {
  constructor(compartment, inner) {
    this.compartment = compartment;
    this.inner = inner;
  }
};
var Configuration = class _Configuration {
  constructor(base2, compartments, dynamicSlots, address, staticValues, facets) {
    this.base = base2;
    this.compartments = compartments;
    this.dynamicSlots = dynamicSlots;
    this.address = address;
    this.staticValues = staticValues;
    this.facets = facets;
    this.statusTemplate = [];
    while (this.statusTemplate.length < dynamicSlots.length)
      this.statusTemplate.push(
        0
        /* SlotStatus.Unresolved */
      );
  }
  staticFacet(facet) {
    let addr = this.address[facet.id];
    return addr == null ? facet.default : this.staticValues[addr >> 1];
  }
  static resolve(base2, compartments, oldState) {
    let fields = [];
    let facets = /* @__PURE__ */ Object.create(null);
    let newCompartments = /* @__PURE__ */ new Map();
    for (let ext of flatten(base2, compartments, newCompartments)) {
      if (ext instanceof StateField)
        fields.push(ext);
      else
        (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
    }
    let address = /* @__PURE__ */ Object.create(null);
    let staticValues = [];
    let dynamicSlots = [];
    for (let field of fields) {
      address[field.id] = dynamicSlots.length << 1;
      dynamicSlots.push((a2) => field.slot(a2));
    }
    let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
    for (let id3 in facets) {
      let providers = facets[id3], facet = providers[0].facet;
      let oldProviders = oldFacets && oldFacets[id3] || [];
      if (providers.every(
        (p2) => p2.type == 0
        /* Provider.Static */
      )) {
        address[facet.id] = staticValues.length << 1 | 1;
        if (sameArray(oldProviders, providers)) {
          staticValues.push(oldState.facet(facet));
        } else {
          let value = facet.combine(providers.map((p2) => p2.value));
          staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
        }
      } else {
        for (let p2 of providers) {
          if (p2.type == 0) {
            address[p2.id] = staticValues.length << 1 | 1;
            staticValues.push(p2.value);
          } else {
            address[p2.id] = dynamicSlots.length << 1;
            dynamicSlots.push((a2) => p2.dynamicSlot(a2));
          }
        }
        address[facet.id] = dynamicSlots.length << 1;
        dynamicSlots.push((a2) => dynamicFacetSlot(a2, facet, providers));
      }
    }
    let dynamic = dynamicSlots.map((f2) => f2(address));
    return new _Configuration(base2, newCompartments, dynamic, address, staticValues, facets);
  }
};
function flatten(extension, compartments, newCompartments) {
  let result = [[], [], [], [], []];
  let seen = /* @__PURE__ */ new Map();
  function inner(ext, prec2) {
    let known = seen.get(ext);
    if (known != null) {
      if (known <= prec2)
        return;
      let found = result[known].indexOf(ext);
      if (found > -1)
        result[known].splice(found, 1);
      if (ext instanceof CompartmentInstance)
        newCompartments.delete(ext.compartment);
    }
    seen.set(ext, prec2);
    if (Array.isArray(ext)) {
      for (let e25 of ext)
        inner(e25, prec2);
    } else if (ext instanceof CompartmentInstance) {
      if (newCompartments.has(ext.compartment))
        throw new RangeError(`Duplicate use of compartment in extensions`);
      let content2 = compartments.get(ext.compartment) || ext.inner;
      newCompartments.set(ext.compartment, content2);
      inner(content2, prec2);
    } else if (ext instanceof PrecExtension) {
      inner(ext.inner, ext.prec);
    } else if (ext instanceof StateField) {
      result[prec2].push(ext);
      if (ext.provides)
        inner(ext.provides, prec2);
    } else if (ext instanceof FacetProvider) {
      result[prec2].push(ext);
      if (ext.facet.extensions)
        inner(ext.facet.extensions, Prec_.default);
    } else {
      let content2 = ext.extension;
      if (!content2)
        throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      inner(content2, prec2);
    }
  }
  inner(extension, Prec_.default);
  return result.reduce((a2, b2) => a2.concat(b2));
}
function ensureAddr(state, addr) {
  if (addr & 1)
    return 2;
  let idx = addr >> 1;
  let status = state.status[idx];
  if (status == 4)
    throw new Error("Cyclic dependency between fields and/or facets");
  if (status & 2)
    return status;
  state.status[idx] = 4;
  let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
  return state.status[idx] = 2 | changed;
}
function getAddr(state, addr) {
  return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
}
var languageData = /* @__PURE__ */ Facet.define();
var allowMultipleSelections = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.some((v2) => v2),
  static: true
});
var lineSeparator = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.length ? values2[0] : void 0,
  static: true
});
var changeFilter = /* @__PURE__ */ Facet.define();
var transactionFilter = /* @__PURE__ */ Facet.define();
var transactionExtender = /* @__PURE__ */ Facet.define();
var readOnly = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.length ? values2[0] : false
});
var Annotation = class {
  /**
  @internal
  */
  constructor(type, value) {
    this.type = type;
    this.value = value;
  }
  /**
  Define a new type of annotation.
  */
  static define() {
    return new AnnotationType();
  }
};
var AnnotationType = class {
  /**
  Create an instance of this annotation.
  */
  of(value) {
    return new Annotation(this, value);
  }
};
var StateEffectType = class {
  /**
  @internal
  */
  constructor(map) {
    this.map = map;
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */
  of(value) {
    return new StateEffect(this, value);
  }
};
var StateEffect = class _StateEffect {
  /**
  @internal
  */
  constructor(type, value) {
    this.type = type;
    this.value = value;
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */
  map(mapping) {
    let mapped = this.type.map(this.value, mapping);
    return mapped === void 0 ? void 0 : mapped == this.value ? this : new _StateEffect(this.type, mapped);
  }
  /**
  Tells you whether this effect object is of a given
  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
  */
  is(type) {
    return this.type == type;
  }
  /**
  Define a new effect type. The type parameter indicates the type
  of values that his effect holds. It should be a type that
  doesn't include `undefined`, since that is used in
  [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
  removed.
  */
  static define(spec = {}) {
    return new StateEffectType(spec.map || ((v2) => v2));
  }
  /**
  Map an array of effects through a change set.
  */
  static mapEffects(effects, mapping) {
    if (!effects.length)
      return effects;
    let result = [];
    for (let effect of effects) {
      let mapped = effect.map(mapping);
      if (mapped)
        result.push(mapped);
    }
    return result;
  }
};
StateEffect.reconfigure = /* @__PURE__ */ StateEffect.define();
StateEffect.appendConfig = /* @__PURE__ */ StateEffect.define();
var Transaction = class _Transaction {
  constructor(startState, changes, selection, effects, annotations, scrollIntoView3) {
    this.startState = startState;
    this.changes = changes;
    this.selection = selection;
    this.effects = effects;
    this.annotations = annotations;
    this.scrollIntoView = scrollIntoView3;
    this._doc = null;
    this._state = null;
    if (selection)
      checkSelection(selection, changes.newLength);
    if (!annotations.some((a2) => a2.type == _Transaction.time))
      this.annotations = annotations.concat(_Transaction.time.of(Date.now()));
  }
  /**
  @internal
  */
  static create(startState, changes, selection, effects, annotations, scrollIntoView3) {
    return new _Transaction(startState, changes, selection, effects, annotations, scrollIntoView3);
  }
  /**
  The new document produced by the transaction. Contrary to
  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
  force the entire new state to be computed right away, so it is
  recommended that [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
  when they need to look at the new document.
  */
  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc));
  }
  /**
  The new selection produced by the transaction. If
  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
  current selection through the changes made by the transaction.
  */
  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes);
  }
  /**
  The new state created by the transaction. Computed on demand
  (but retained for subsequent access), so it is recommended not to
  access it in [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
  */
  get state() {
    if (!this._state)
      this.startState.applyTransaction(this);
    return this._state;
  }
  /**
  Get the value of the given annotation type, if any.
  */
  annotation(type) {
    for (let ann of this.annotations)
      if (ann.type == type)
        return ann.value;
    return void 0;
  }
  /**
  Indicates whether the transaction changed the document.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Indicates whether this transaction reconfigures the state
  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
  with a top-level configuration
  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
  */
  get reconfigured() {
    return this.startState.config != this.state.config;
  }
  /**
  Returns true if the transaction has a [user
  event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
  or more specific than `event`. For example, if the transaction
  has `"select.pointer"` as user event, `"select"` and
  `"select.pointer"` will match it.
  */
  isUserEvent(event) {
    let e25 = this.annotation(_Transaction.userEvent);
    return !!(e25 && (e25 == event || e25.length > event.length && e25.slice(0, event.length) == event && e25[event.length] == "."));
  }
};
Transaction.time = /* @__PURE__ */ Annotation.define();
Transaction.userEvent = /* @__PURE__ */ Annotation.define();
Transaction.addToHistory = /* @__PURE__ */ Annotation.define();
Transaction.remote = /* @__PURE__ */ Annotation.define();
function joinRanges(a2, b2) {
  let result = [];
  for (let iA2 = 0, iB2 = 0; ; ) {
    let from, to2;
    if (iA2 < a2.length && (iB2 == b2.length || b2[iB2] >= a2[iA2])) {
      from = a2[iA2++];
      to2 = a2[iA2++];
    } else if (iB2 < b2.length) {
      from = b2[iB2++];
      to2 = b2[iB2++];
    } else
      return result;
    if (!result.length || result[result.length - 1] < from)
      result.push(from, to2);
    else if (result[result.length - 1] < to2)
      result[result.length - 1] = to2;
  }
}
function mergeTransaction(a2, b2, sequential) {
  var _a3;
  let mapForA, mapForB, changes;
  if (sequential) {
    mapForA = b2.changes;
    mapForB = ChangeSet.empty(b2.changes.length);
    changes = a2.changes.compose(b2.changes);
  } else {
    mapForA = b2.changes.map(a2.changes);
    mapForB = a2.changes.mapDesc(b2.changes, true);
    changes = a2.changes.compose(mapForA);
  }
  return {
    changes,
    selection: b2.selection ? b2.selection.map(mapForB) : (_a3 = a2.selection) === null || _a3 === void 0 ? void 0 : _a3.map(mapForA),
    effects: StateEffect.mapEffects(a2.effects, mapForA).concat(StateEffect.mapEffects(b2.effects, mapForB)),
    annotations: a2.annotations.length ? a2.annotations.concat(b2.annotations) : b2.annotations,
    scrollIntoView: a2.scrollIntoView || b2.scrollIntoView
  };
}
function resolveTransactionInner(state, spec, docSize) {
  let sel = spec.selection, annotations = asArray(spec.annotations);
  if (spec.userEvent)
    annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
  return {
    changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
    selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
    effects: asArray(spec.effects),
    annotations,
    scrollIntoView: !!spec.scrollIntoView
  };
}
function resolveTransaction(state, specs, filter) {
  let s2 = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
  if (specs.length && specs[0].filter === false)
    filter = false;
  for (let i2 = 1; i2 < specs.length; i2++) {
    if (specs[i2].filter === false)
      filter = false;
    let seq = !!specs[i2].sequential;
    s2 = mergeTransaction(s2, resolveTransactionInner(state, specs[i2], seq ? s2.changes.newLength : state.doc.length), seq);
  }
  let tr2 = Transaction.create(state, s2.changes, s2.selection, s2.effects, s2.annotations, s2.scrollIntoView);
  return extendTransaction(filter ? filterTransaction(tr2) : tr2);
}
function filterTransaction(tr2) {
  let state = tr2.startState;
  let result = true;
  for (let filter of state.facet(changeFilter)) {
    let value = filter(tr2);
    if (value === false) {
      result = false;
      break;
    }
    if (Array.isArray(value))
      result = result === true ? value : joinRanges(result, value);
  }
  if (result !== true) {
    let changes, back;
    if (result === false) {
      back = tr2.changes.invertedDesc;
      changes = ChangeSet.empty(state.doc.length);
    } else {
      let filtered = tr2.changes.filter(result);
      changes = filtered.changes;
      back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
    }
    tr2 = Transaction.create(state, changes, tr2.selection && tr2.selection.map(back), StateEffect.mapEffects(tr2.effects, back), tr2.annotations, tr2.scrollIntoView);
  }
  let filters = state.facet(transactionFilter);
  for (let i2 = filters.length - 1; i2 >= 0; i2--) {
    let filtered = filters[i2](tr2);
    if (filtered instanceof Transaction)
      tr2 = filtered;
    else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
      tr2 = filtered[0];
    else
      tr2 = resolveTransaction(state, asArray(filtered), false);
  }
  return tr2;
}
function extendTransaction(tr2) {
  let state = tr2.startState, extenders = state.facet(transactionExtender), spec = tr2;
  for (let i2 = extenders.length - 1; i2 >= 0; i2--) {
    let extension = extenders[i2](tr2);
    if (extension && Object.keys(extension).length)
      spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr2.changes.newLength), true);
  }
  return spec == tr2 ? tr2 : Transaction.create(state, tr2.changes, tr2.selection, spec.effects, spec.annotations, spec.scrollIntoView);
}
var none = [];
function asArray(value) {
  return value == null ? none : Array.isArray(value) ? value : [value];
}
var CharCategory = /* @__PURE__ */ function(CharCategory2) {
  CharCategory2[CharCategory2["Word"] = 0] = "Word";
  CharCategory2[CharCategory2["Space"] = 1] = "Space";
  CharCategory2[CharCategory2["Other"] = 2] = "Other";
  return CharCategory2;
}(CharCategory || (CharCategory = {}));
var nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
var wordChar;
try {
  wordChar = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch (_2) {
}
function hasWordChar(str) {
  if (wordChar)
    return wordChar.test(str);
  for (let i2 = 0; i2 < str.length; i2++) {
    let ch2 = str[i2];
    if (/\w/.test(ch2) || ch2 > "\x80" && (ch2.toUpperCase() != ch2.toLowerCase() || nonASCIISingleCaseWordChar.test(ch2)))
      return true;
  }
  return false;
}
function makeCategorizer(wordChars) {
  return (char) => {
    if (!/\S/.test(char))
      return CharCategory.Space;
    if (hasWordChar(char))
      return CharCategory.Word;
    for (let i2 = 0; i2 < wordChars.length; i2++)
      if (char.indexOf(wordChars[i2]) > -1)
        return CharCategory.Word;
    return CharCategory.Other;
  };
}
var EditorState = class _EditorState {
  constructor(config2, doc2, selection, values2, computeSlot, tr2) {
    this.config = config2;
    this.doc = doc2;
    this.selection = selection;
    this.values = values2;
    this.status = config2.statusTemplate.slice();
    this.computeSlot = computeSlot;
    if (tr2)
      tr2._state = this;
    for (let i2 = 0; i2 < this.config.dynamicSlots.length; i2++)
      ensureAddr(this, i2 << 1);
    this.computeSlot = null;
  }
  field(field, require2 = true) {
    let addr = this.config.address[field.id];
    if (addr == null) {
      if (require2)
        throw new RangeError("Field is not present in this state");
      return void 0;
    }
    ensureAddr(this, addr);
    return getAddr(this, addr);
  }
  /**
  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
  can be passed. Unless
  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
  are assumed to start in the _current_ document (not the document
  produced by previous specs), and its
  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
  to the document created by its _own_ changes. The resulting
  transaction contains the combined effect of all the different
  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
  specs take precedence over earlier ones.
  */
  update(...specs) {
    return resolveTransaction(this, specs, true);
  }
  /**
  @internal
  */
  applyTransaction(tr2) {
    let conf = this.config, { base: base2, compartments } = conf;
    for (let effect of tr2.effects) {
      if (effect.is(Compartment.reconfigure)) {
        if (conf) {
          compartments = /* @__PURE__ */ new Map();
          conf.compartments.forEach((val, key) => compartments.set(key, val));
          conf = null;
        }
        compartments.set(effect.value.compartment, effect.value.extension);
      } else if (effect.is(StateEffect.reconfigure)) {
        conf = null;
        base2 = effect.value;
      } else if (effect.is(StateEffect.appendConfig)) {
        conf = null;
        base2 = asArray(base2).concat(effect.value);
      }
    }
    let startValues;
    if (!conf) {
      conf = Configuration.resolve(base2, compartments, this);
      let intermediateState = new _EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
      startValues = intermediateState.values;
    } else {
      startValues = tr2.startState.values.slice();
    }
    let selection = tr2.startState.facet(allowMultipleSelections) ? tr2.newSelection : tr2.newSelection.asSingle();
    new _EditorState(conf, tr2.newDoc, selection, startValues, (state, slot) => slot.update(state, tr2), tr2);
  }
  /**
  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
  replaces every selection range with the given content.
  */
  replaceSelection(text) {
    if (typeof text == "string")
      text = this.toText(text);
    return this.changeByRange((range) => ({
      changes: { from: range.from, to: range.to, insert: text },
      range: EditorSelection.cursor(range.from + text.length)
    }));
  }
  /**
  Create a set of changes and a new selection by running the given
  function for each range in the active selection. The function
  can return an optional set of changes (in the coordinate space
  of the start document), plus an updated range (in the coordinate
  space of the document produced by the call's own changes). This
  method will merge all the changes and ranges into a single
  changeset and selection, and return it as a [transaction
  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
  */
  changeByRange(f2) {
    let sel = this.selection;
    let result1 = f2(sel.ranges[0]);
    let changes = this.changes(result1.changes), ranges = [result1.range];
    let effects = asArray(result1.effects);
    for (let i2 = 1; i2 < sel.ranges.length; i2++) {
      let result = f2(sel.ranges[i2]);
      let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
      for (let j2 = 0; j2 < i2; j2++)
        ranges[j2] = ranges[j2].map(newMapped);
      let mapBy = changes.mapDesc(newChanges, true);
      ranges.push(result.range.map(mapBy));
      changes = changes.compose(newMapped);
      effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
    }
    return {
      changes,
      selection: EditorSelection.create(ranges, sel.mainIndex),
      effects
    };
  }
  /**
  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
  description, taking the state's document length and line
  separator into account.
  */
  changes(spec = []) {
    if (spec instanceof ChangeSet)
      return spec;
    return ChangeSet.of(spec, this.doc.length, this.facet(_EditorState.lineSeparator));
  }
  /**
  Using the state's [line
  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
  [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
  */
  toText(string2) {
    return Text.of(string2.split(this.facet(_EditorState.lineSeparator) || DefaultSplit));
  }
  /**
  Return the given range of the document as a string.
  */
  sliceDoc(from = 0, to2 = this.doc.length) {
    return this.doc.sliceString(from, to2, this.lineBreak);
  }
  /**
  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
  */
  facet(facet) {
    let addr = this.config.address[facet.id];
    if (addr == null)
      return facet.default;
    ensureAddr(this, addr);
    return getAddr(this, addr);
  }
  /**
  Convert this state to a JSON-serializable object. When custom
  fields should be serialized, you can pass them in as an object
  mapping property names (in the resulting object, which should
  not use `doc` or `selection`) to fields.
  */
  toJSON(fields) {
    let result = {
      doc: this.sliceDoc(),
      selection: this.selection.toJSON()
    };
    if (fields)
      for (let prop in fields) {
        let value = fields[prop];
        if (value instanceof StateField && this.config.address[value.id] != null)
          result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
      }
    return result;
  }
  /**
  Deserialize a state from its JSON representation. When custom
  fields should be deserialized, pass the same object you passed
  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
  third argument.
  */
  static fromJSON(json, config2 = {}, fields) {
    if (!json || typeof json.doc != "string")
      throw new RangeError("Invalid JSON representation for EditorState");
    let fieldInit = [];
    if (fields)
      for (let prop in fields) {
        if (Object.prototype.hasOwnProperty.call(json, prop)) {
          let field = fields[prop], value = json[prop];
          fieldInit.push(field.init((state) => field.spec.fromJSON(value, state)));
        }
      }
    return _EditorState.create({
      doc: json.doc,
      selection: EditorSelection.fromJSON(json.selection),
      extensions: config2.extensions ? fieldInit.concat([config2.extensions]) : fieldInit
    });
  }
  /**
  Create a new state. You'll usually only need this when
  initializing an editor—updated states are created by applying
  transactions.
  */
  static create(config2 = {}) {
    let configuration = Configuration.resolve(config2.extensions || [], /* @__PURE__ */ new Map());
    let doc2 = config2.doc instanceof Text ? config2.doc : Text.of((config2.doc || "").split(configuration.staticFacet(_EditorState.lineSeparator) || DefaultSplit));
    let selection = !config2.selection ? EditorSelection.single(0) : config2.selection instanceof EditorSelection ? config2.selection : EditorSelection.single(config2.selection.anchor, config2.selection.head);
    checkSelection(selection, doc2.length);
    if (!configuration.staticFacet(allowMultipleSelections))
      selection = selection.asSingle();
    return new _EditorState(configuration, doc2, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
  }
  /**
  The size (in columns) of a tab in the document, determined by
  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
  */
  get tabSize() {
    return this.facet(_EditorState.tabSize);
  }
  /**
  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
  string for this state.
  */
  get lineBreak() {
    return this.facet(_EditorState.lineSeparator) || "\n";
  }
  /**
  Returns true when the editor is
  [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
  */
  get readOnly() {
    return this.facet(readOnly);
  }
  /**
  Look up a translation for the given phrase (via the
  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
  original string if no translation is found.
  
  If additional arguments are passed, they will be inserted in
  place of markers like `$1` (for the first value) and `$2`, etc.
  A single `$` is equivalent to `$1`, and `$$` will produce a
  literal dollar sign.
  */
  phrase(phrase2, ...insert2) {
    for (let map of this.facet(_EditorState.phrases))
      if (Object.prototype.hasOwnProperty.call(map, phrase2)) {
        phrase2 = map[phrase2];
        break;
      }
    if (insert2.length)
      phrase2 = phrase2.replace(/\$(\$|\d*)/g, (m2, i2) => {
        if (i2 == "$")
          return "$";
        let n2 = +(i2 || 1);
        return !n2 || n2 > insert2.length ? m2 : insert2[n2 - 1];
      });
    return phrase2;
  }
  /**
  Find the values for a given language data field, provided by the
  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
  
  Examples of language data fields are...
  
  - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
    comment syntax.
  - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
    for providing language-specific completion sources.
  - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
    characters that should be considered part of words in this
    language.
  - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
    bracket closing behavior.
  */
  languageDataAt(name2, pos, side = -1) {
    let values2 = [];
    for (let provider of this.facet(languageData)) {
      for (let result of provider(this, pos, side)) {
        if (Object.prototype.hasOwnProperty.call(result, name2))
          values2.push(result[name2]);
      }
    }
    return values2;
  }
  /**
  Return a function that can categorize strings (expected to
  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
  into one of:
  
   - Word (contains an alphanumeric character or a character
     explicitly listed in the local language's `"wordChars"`
     language data, which should be a string)
   - Space (contains only whitespace)
   - Other (anything else)
  */
  charCategorizer(at2) {
    return makeCategorizer(this.languageDataAt("wordChars", at2).join(""));
  }
  /**
  Find the word at the given position, meaning the range
  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
  around it. If no word characters are adjacent to the position,
  this returns null.
  */
  wordAt(pos) {
    let { text, from, length } = this.doc.lineAt(pos);
    let cat = this.charCategorizer(pos);
    let start = pos - from, end = pos - from;
    while (start > 0) {
      let prev = findClusterBreak(text, start, false);
      if (cat(text.slice(prev, start)) != CharCategory.Word)
        break;
      start = prev;
    }
    while (end < length) {
      let next = findClusterBreak(text, end);
      if (cat(text.slice(end, next)) != CharCategory.Word)
        break;
      end = next;
    }
    return start == end ? null : EditorSelection.range(start + from, end + from);
  }
};
EditorState.allowMultipleSelections = allowMultipleSelections;
EditorState.tabSize = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.length ? values2[0] : 4
});
EditorState.lineSeparator = lineSeparator;
EditorState.readOnly = readOnly;
EditorState.phrases = /* @__PURE__ */ Facet.define({
  compare(a2, b2) {
    let kA2 = Object.keys(a2), kB2 = Object.keys(b2);
    return kA2.length == kB2.length && kA2.every((k2) => a2[k2] == b2[k2]);
  }
});
EditorState.languageData = languageData;
EditorState.changeFilter = changeFilter;
EditorState.transactionFilter = transactionFilter;
EditorState.transactionExtender = transactionExtender;
Compartment.reconfigure = /* @__PURE__ */ StateEffect.define();
function combineConfig(configs, defaults3, combine = {}) {
  let result = {};
  for (let config2 of configs)
    for (let key of Object.keys(config2)) {
      let value = config2[key], current = result[key];
      if (current === void 0)
        result[key] = value;
      else if (current === value || value === void 0) ;
      else if (Object.hasOwnProperty.call(combine, key))
        result[key] = combine[key](current, value);
      else
        throw new Error("Config merge conflict for field " + key);
    }
  for (let key in defaults3)
    if (result[key] === void 0)
      result[key] = defaults3[key];
  return result;
}
var RangeValue = class {
  /**
  Compare this value with another value. Used when comparing
  rangesets. The default implementation compares by identity.
  Unless you are only creating a fixed number of unique instances
  of your value type, it is a good idea to implement this
  properly.
  */
  eq(other) {
    return this == other;
  }
  /**
  Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
  */
  range(from, to2 = from) {
    return Range.create(from, to2, this);
  }
};
RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
RangeValue.prototype.point = false;
RangeValue.prototype.mapMode = MapMode.TrackDel;
var Range = class _Range {
  constructor(from, to2, value) {
    this.from = from;
    this.to = to2;
    this.value = value;
  }
  /**
  @internal
  */
  static create(from, to2, value) {
    return new _Range(from, to2, value);
  }
};
function cmpRange(a2, b2) {
  return a2.from - b2.from || a2.value.startSide - b2.value.startSide;
}
var Chunk = class _Chunk {
  constructor(from, to2, value, maxPoint) {
    this.from = from;
    this.to = to2;
    this.value = value;
    this.maxPoint = maxPoint;
  }
  get length() {
    return this.to[this.to.length - 1];
  }
  // Find the index of the given position and side. Use the ranges'
  // `from` pos when `end == false`, `to` when `end == true`.
  findIndex(pos, side, end, startAt = 0) {
    let arr = end ? this.to : this.from;
    for (let lo2 = startAt, hi2 = arr.length; ; ) {
      if (lo2 == hi2)
        return lo2;
      let mid = lo2 + hi2 >> 1;
      let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
      if (mid == lo2)
        return diff >= 0 ? lo2 : hi2;
      if (diff >= 0)
        hi2 = mid;
      else
        lo2 = mid + 1;
    }
  }
  between(offset, from, to2, f2) {
    for (let i2 = this.findIndex(from, -1e9, true), e25 = this.findIndex(to2, 1e9, false, i2); i2 < e25; i2++)
      if (f2(this.from[i2] + offset, this.to[i2] + offset, this.value[i2]) === false)
        return false;
  }
  map(offset, changes) {
    let value = [], from = [], to2 = [], newPos = -1, maxPoint = -1;
    for (let i2 = 0; i2 < this.value.length; i2++) {
      let val = this.value[i2], curFrom = this.from[i2] + offset, curTo = this.to[i2] + offset, newFrom, newTo;
      if (curFrom == curTo) {
        let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
        if (mapped == null)
          continue;
        newFrom = newTo = mapped;
        if (val.startSide != val.endSide) {
          newTo = changes.mapPos(curFrom, val.endSide);
          if (newTo < newFrom)
            continue;
        }
      } else {
        newFrom = changes.mapPos(curFrom, val.startSide);
        newTo = changes.mapPos(curTo, val.endSide);
        if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
          continue;
      }
      if ((newTo - newFrom || val.endSide - val.startSide) < 0)
        continue;
      if (newPos < 0)
        newPos = newFrom;
      if (val.point)
        maxPoint = Math.max(maxPoint, newTo - newFrom);
      value.push(val);
      from.push(newFrom - newPos);
      to2.push(newTo - newPos);
    }
    return { mapped: value.length ? new _Chunk(from, to2, value, maxPoint) : null, pos: newPos };
  }
};
var RangeSet = class _RangeSet {
  constructor(chunkPos, chunk, nextLayer, maxPoint) {
    this.chunkPos = chunkPos;
    this.chunk = chunk;
    this.nextLayer = nextLayer;
    this.maxPoint = maxPoint;
  }
  /**
  @internal
  */
  static create(chunkPos, chunk, nextLayer, maxPoint) {
    return new _RangeSet(chunkPos, chunk, nextLayer, maxPoint);
  }
  /**
  @internal
  */
  get length() {
    let last = this.chunk.length - 1;
    return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
  }
  /**
  The number of ranges in the set.
  */
  get size() {
    if (this.isEmpty)
      return 0;
    let size = this.nextLayer.size;
    for (let chunk of this.chunk)
      size += chunk.value.length;
    return size;
  }
  /**
  @internal
  */
  chunkEnd(index) {
    return this.chunkPos[index] + this.chunk[index].length;
  }
  /**
  Update the range set, optionally adding new ranges or filtering
  out existing ones.
  
  (Note: The type parameter is just there as a kludge to work
  around TypeScript variance issues that prevented `RangeSet<X>`
  from being a subtype of `RangeSet<Y>` when `X` is a subtype of
  `Y`.)
  */
  update(updateSpec) {
    let { add: add2 = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
    let filter = updateSpec.filter;
    if (add2.length == 0 && !filter)
      return this;
    if (sort)
      add2 = add2.slice().sort(cmpRange);
    if (this.isEmpty)
      return add2.length ? _RangeSet.of(add2) : this;
    let cur2 = new LayerCursor(this, null, -1).goto(0), i2 = 0, spill = [];
    let builder = new RangeSetBuilder();
    while (cur2.value || i2 < add2.length) {
      if (i2 < add2.length && (cur2.from - add2[i2].from || cur2.startSide - add2[i2].value.startSide) >= 0) {
        let range = add2[i2++];
        if (!builder.addInner(range.from, range.to, range.value))
          spill.push(range);
      } else if (cur2.rangeIndex == 1 && cur2.chunkIndex < this.chunk.length && (i2 == add2.length || this.chunkEnd(cur2.chunkIndex) < add2[i2].from) && (!filter || filterFrom > this.chunkEnd(cur2.chunkIndex) || filterTo < this.chunkPos[cur2.chunkIndex]) && builder.addChunk(this.chunkPos[cur2.chunkIndex], this.chunk[cur2.chunkIndex])) {
        cur2.nextChunk();
      } else {
        if (!filter || filterFrom > cur2.to || filterTo < cur2.from || filter(cur2.from, cur2.to, cur2.value)) {
          if (!builder.addInner(cur2.from, cur2.to, cur2.value))
            spill.push(Range.create(cur2.from, cur2.to, cur2.value));
        }
        cur2.next();
      }
    }
    return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? _RangeSet.empty : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
  }
  /**
  Map this range set through a set of changes, return the new set.
  */
  map(changes) {
    if (changes.empty || this.isEmpty)
      return this;
    let chunks = [], chunkPos = [], maxPoint = -1;
    for (let i2 = 0; i2 < this.chunk.length; i2++) {
      let start = this.chunkPos[i2], chunk = this.chunk[i2];
      let touch = changes.touchesRange(start, start + chunk.length);
      if (touch === false) {
        maxPoint = Math.max(maxPoint, chunk.maxPoint);
        chunks.push(chunk);
        chunkPos.push(changes.mapPos(start));
      } else if (touch === true) {
        let { mapped, pos } = chunk.map(start, changes);
        if (mapped) {
          maxPoint = Math.max(maxPoint, mapped.maxPoint);
          chunks.push(mapped);
          chunkPos.push(pos);
        }
      }
    }
    let next = this.nextLayer.map(changes);
    return chunks.length == 0 ? next : new _RangeSet(chunkPos, chunks, next || _RangeSet.empty, maxPoint);
  }
  /**
  Iterate over the ranges that touch the region `from` to `to`,
  calling `f` for each. There is no guarantee that the ranges will
  be reported in any specific order. When the callback returns
  `false`, iteration stops.
  */
  between(from, to2, f2) {
    if (this.isEmpty)
      return;
    for (let i2 = 0; i2 < this.chunk.length; i2++) {
      let start = this.chunkPos[i2], chunk = this.chunk[i2];
      if (to2 >= start && from <= start + chunk.length && chunk.between(start, from - start, to2 - start, f2) === false)
        return;
    }
    this.nextLayer.between(from, to2, f2);
  }
  /**
  Iterate over the ranges in this set, in order, including all
  ranges that end at or after `from`.
  */
  iter(from = 0) {
    return HeapCursor.from([this]).goto(from);
  }
  /**
  @internal
  */
  get isEmpty() {
    return this.nextLayer == this;
  }
  /**
  Iterate over the ranges in a collection of sets, in order,
  starting from `from`.
  */
  static iter(sets, from = 0) {
    return HeapCursor.from(sets).goto(from);
  }
  /**
  Iterate over two groups of sets, calling methods on `comparator`
  to notify it of possible differences.
  */
  static compare(oldSets, newSets, textDiff, comparator, minPointSize = -1) {
    let a2 = oldSets.filter((set) => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
    let b2 = newSets.filter((set) => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
    let sharedChunks = findSharedChunks(a2, b2, textDiff);
    let sideA = new SpanCursor(a2, sharedChunks, minPointSize);
    let sideB = new SpanCursor(b2, sharedChunks, minPointSize);
    textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
    if (textDiff.empty && textDiff.length == 0)
      compare(sideA, 0, sideB, 0, 0, comparator);
  }
  /**
  Compare the contents of two groups of range sets, returning true
  if they are equivalent in the given range.
  */
  static eq(oldSets, newSets, from = 0, to2) {
    if (to2 == null)
      to2 = 1e9 - 1;
    let a2 = oldSets.filter((set) => !set.isEmpty && newSets.indexOf(set) < 0);
    let b2 = newSets.filter((set) => !set.isEmpty && oldSets.indexOf(set) < 0);
    if (a2.length != b2.length)
      return false;
    if (!a2.length)
      return true;
    let sharedChunks = findSharedChunks(a2, b2);
    let sideA = new SpanCursor(a2, sharedChunks, 0).goto(from), sideB = new SpanCursor(b2, sharedChunks, 0).goto(from);
    for (; ; ) {
      if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
        return false;
      if (sideA.to > to2)
        return true;
      sideA.next();
      sideB.next();
    }
  }
  /**
  Iterate over a group of range sets at the same time, notifying
  the iterator about the ranges covering every given piece of
  content. Returns the open count (see
  [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
  of the iteration.
  */
  static spans(sets, from, to2, iterator, minPointSize = -1) {
    let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
    let openRanges = cursor.openStart;
    for (; ; ) {
      let curTo = Math.min(cursor.to, to2);
      if (cursor.point) {
        let active = cursor.activeForPoint(cursor.to);
        let openCount = cursor.pointFrom < from ? active.length + 1 : cursor.point.startSide < 0 ? active.length : Math.min(active.length, openRanges);
        iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
        openRanges = Math.min(cursor.openEnd(curTo), active.length);
      } else if (curTo > pos) {
        iterator.span(pos, curTo, cursor.active, openRanges);
        openRanges = cursor.openEnd(curTo);
      }
      if (cursor.to > to2)
        return openRanges + (cursor.point && cursor.to > to2 ? 1 : 0);
      pos = cursor.to;
      cursor.next();
    }
  }
  /**
  Create a range set for the given range or array of ranges. By
  default, this expects the ranges to be _sorted_ (by start
  position and, if two start at the same position,
  `value.startSide`). You can pass `true` as second argument to
  cause the method to sort them.
  */
  static of(ranges, sort = false) {
    let build = new RangeSetBuilder();
    for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)
      build.add(range.from, range.to, range.value);
    return build.finish();
  }
  /**
  Join an array of range sets into a single set.
  */
  static join(sets) {
    if (!sets.length)
      return _RangeSet.empty;
    let result = sets[sets.length - 1];
    for (let i2 = sets.length - 2; i2 >= 0; i2--) {
      for (let layer2 = sets[i2]; layer2 != _RangeSet.empty; layer2 = layer2.nextLayer)
        result = new _RangeSet(layer2.chunkPos, layer2.chunk, result, Math.max(layer2.maxPoint, result.maxPoint));
    }
    return result;
  }
};
RangeSet.empty = /* @__PURE__ */ new RangeSet([], [], null, -1);
function lazySort(ranges) {
  if (ranges.length > 1)
    for (let prev = ranges[0], i2 = 1; i2 < ranges.length; i2++) {
      let cur2 = ranges[i2];
      if (cmpRange(prev, cur2) > 0)
        return ranges.slice().sort(cmpRange);
      prev = cur2;
    }
  return ranges;
}
RangeSet.empty.nextLayer = RangeSet.empty;
var RangeSetBuilder = class _RangeSetBuilder {
  finishChunk(newArrays) {
    this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
    this.chunkPos.push(this.chunkStart);
    this.chunkStart = -1;
    this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
    this.maxPoint = -1;
    if (newArrays) {
      this.from = [];
      this.to = [];
      this.value = [];
    }
  }
  /**
  Create an empty builder.
  */
  constructor() {
    this.chunks = [];
    this.chunkPos = [];
    this.chunkStart = -1;
    this.last = null;
    this.lastFrom = -1e9;
    this.lastTo = -1e9;
    this.from = [];
    this.to = [];
    this.value = [];
    this.maxPoint = -1;
    this.setMaxPoint = -1;
    this.nextLayer = null;
  }
  /**
  Add a range. Ranges should be added in sorted (by `from` and
  `value.startSide`) order.
  */
  add(from, to2, value) {
    if (!this.addInner(from, to2, value))
      (this.nextLayer || (this.nextLayer = new _RangeSetBuilder())).add(from, to2, value);
  }
  /**
  @internal
  */
  addInner(from, to2, value) {
    let diff = from - this.lastTo || value.startSide - this.last.endSide;
    if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
      throw new Error("Ranges must be added sorted by `from` position and `startSide`");
    if (diff < 0)
      return false;
    if (this.from.length == 250)
      this.finishChunk(true);
    if (this.chunkStart < 0)
      this.chunkStart = from;
    this.from.push(from - this.chunkStart);
    this.to.push(to2 - this.chunkStart);
    this.last = value;
    this.lastFrom = from;
    this.lastTo = to2;
    this.value.push(value);
    if (value.point)
      this.maxPoint = Math.max(this.maxPoint, to2 - from);
    return true;
  }
  /**
  @internal
  */
  addChunk(from, chunk) {
    if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
      return false;
    if (this.from.length)
      this.finishChunk(true);
    this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
    this.chunks.push(chunk);
    this.chunkPos.push(from);
    let last = chunk.value.length - 1;
    this.last = chunk.value[last];
    this.lastFrom = chunk.from[last] + from;
    this.lastTo = chunk.to[last] + from;
    return true;
  }
  /**
  Finish the range set. Returns the new set. The builder can't be
  used anymore after this has been called.
  */
  finish() {
    return this.finishInner(RangeSet.empty);
  }
  /**
  @internal
  */
  finishInner(next) {
    if (this.from.length)
      this.finishChunk(false);
    if (this.chunks.length == 0)
      return next;
    let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
    this.from = null;
    return result;
  }
};
function findSharedChunks(a2, b2, textDiff) {
  let inA = /* @__PURE__ */ new Map();
  for (let set of a2)
    for (let i2 = 0; i2 < set.chunk.length; i2++)
      if (set.chunk[i2].maxPoint <= 0)
        inA.set(set.chunk[i2], set.chunkPos[i2]);
  let shared = /* @__PURE__ */ new Set();
  for (let set of b2)
    for (let i2 = 0; i2 < set.chunk.length; i2++) {
      let known = inA.get(set.chunk[i2]);
      if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i2] && !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i2].length)))
        shared.add(set.chunk[i2]);
    }
  return shared;
}
var LayerCursor = class {
  constructor(layer2, skip, minPoint, rank = 0) {
    this.layer = layer2;
    this.skip = skip;
    this.minPoint = minPoint;
    this.rank = rank;
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  get endSide() {
    return this.value ? this.value.endSide : 0;
  }
  goto(pos, side = -1e9) {
    this.chunkIndex = this.rangeIndex = 0;
    this.gotoInner(pos, side, false);
    return this;
  }
  gotoInner(pos, side, forward) {
    while (this.chunkIndex < this.layer.chunk.length) {
      let next = this.layer.chunk[this.chunkIndex];
      if (!(this.skip && this.skip.has(next) || this.layer.chunkEnd(this.chunkIndex) < pos || next.maxPoint < this.minPoint))
        break;
      this.chunkIndex++;
      forward = false;
    }
    if (this.chunkIndex < this.layer.chunk.length) {
      let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
      if (!forward || this.rangeIndex < rangeIndex)
        this.setRangeIndex(rangeIndex);
    }
    this.next();
  }
  forward(pos, side) {
    if ((this.to - pos || this.endSide - side) < 0)
      this.gotoInner(pos, side, true);
  }
  next() {
    for (; ; ) {
      if (this.chunkIndex == this.layer.chunk.length) {
        this.from = this.to = 1e9;
        this.value = null;
        break;
      } else {
        let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
        let from = chunkPos + chunk.from[this.rangeIndex];
        this.from = from;
        this.to = chunkPos + chunk.to[this.rangeIndex];
        this.value = chunk.value[this.rangeIndex];
        this.setRangeIndex(this.rangeIndex + 1);
        if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
          break;
      }
    }
  }
  setRangeIndex(index) {
    if (index == this.layer.chunk[this.chunkIndex].value.length) {
      this.chunkIndex++;
      if (this.skip) {
        while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
          this.chunkIndex++;
      }
      this.rangeIndex = 0;
    } else {
      this.rangeIndex = index;
    }
  }
  nextChunk() {
    this.chunkIndex++;
    this.rangeIndex = 0;
    this.next();
  }
  compare(other) {
    return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank || this.to - other.to || this.endSide - other.endSide;
  }
};
var HeapCursor = class _HeapCursor {
  constructor(heap) {
    this.heap = heap;
  }
  static from(sets, skip = null, minPoint = -1) {
    let heap = [];
    for (let i2 = 0; i2 < sets.length; i2++) {
      for (let cur2 = sets[i2]; !cur2.isEmpty; cur2 = cur2.nextLayer) {
        if (cur2.maxPoint >= minPoint)
          heap.push(new LayerCursor(cur2, skip, minPoint, i2));
      }
    }
    return heap.length == 1 ? heap[0] : new _HeapCursor(heap);
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  goto(pos, side = -1e9) {
    for (let cur2 of this.heap)
      cur2.goto(pos, side);
    for (let i2 = this.heap.length >> 1; i2 >= 0; i2--)
      heapBubble(this.heap, i2);
    this.next();
    return this;
  }
  forward(pos, side) {
    for (let cur2 of this.heap)
      cur2.forward(pos, side);
    for (let i2 = this.heap.length >> 1; i2 >= 0; i2--)
      heapBubble(this.heap, i2);
    if ((this.to - pos || this.value.endSide - side) < 0)
      this.next();
  }
  next() {
    if (this.heap.length == 0) {
      this.from = this.to = 1e9;
      this.value = null;
      this.rank = -1;
    } else {
      let top2 = this.heap[0];
      this.from = top2.from;
      this.to = top2.to;
      this.value = top2.value;
      this.rank = top2.rank;
      if (top2.value)
        top2.next();
      heapBubble(this.heap, 0);
    }
  }
};
function heapBubble(heap, index) {
  for (let cur2 = heap[index]; ; ) {
    let childIndex = (index << 1) + 1;
    if (childIndex >= heap.length)
      break;
    let child = heap[childIndex];
    if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
      child = heap[childIndex + 1];
      childIndex++;
    }
    if (cur2.compare(child) < 0)
      break;
    heap[childIndex] = cur2;
    heap[index] = child;
    index = childIndex;
  }
}
var SpanCursor = class {
  constructor(sets, skip, minPoint) {
    this.minPoint = minPoint;
    this.active = [];
    this.activeTo = [];
    this.activeRank = [];
    this.minActive = -1;
    this.point = null;
    this.pointFrom = 0;
    this.pointRank = 0;
    this.to = -1e9;
    this.endSide = 0;
    this.openStart = -1;
    this.cursor = HeapCursor.from(sets, skip, minPoint);
  }
  goto(pos, side = -1e9) {
    this.cursor.goto(pos, side);
    this.active.length = this.activeTo.length = this.activeRank.length = 0;
    this.minActive = -1;
    this.to = pos;
    this.endSide = side;
    this.openStart = -1;
    this.next();
    return this;
  }
  forward(pos, side) {
    while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
      this.removeActive(this.minActive);
    this.cursor.forward(pos, side);
  }
  removeActive(index) {
    remove(this.active, index);
    remove(this.activeTo, index);
    remove(this.activeRank, index);
    this.minActive = findMinIndex(this.active, this.activeTo);
  }
  addActive(trackOpen) {
    let i2 = 0, { value, to: to2, rank } = this.cursor;
    while (i2 < this.activeRank.length && (rank - this.activeRank[i2] || to2 - this.activeTo[i2]) > 0)
      i2++;
    insert(this.active, i2, value);
    insert(this.activeTo, i2, to2);
    insert(this.activeRank, i2, rank);
    if (trackOpen)
      insert(trackOpen, i2, this.cursor.from);
    this.minActive = findMinIndex(this.active, this.activeTo);
  }
  // After calling this, if `this.point` != null, the next range is a
  // point. Otherwise, it's a regular range, covered by `this.active`.
  next() {
    let from = this.to, wasPoint = this.point;
    this.point = null;
    let trackOpen = this.openStart < 0 ? [] : null;
    for (; ; ) {
      let a2 = this.minActive;
      if (a2 > -1 && (this.activeTo[a2] - this.cursor.from || this.active[a2].endSide - this.cursor.startSide) < 0) {
        if (this.activeTo[a2] > from) {
          this.to = this.activeTo[a2];
          this.endSide = this.active[a2].endSide;
          break;
        }
        this.removeActive(a2);
        if (trackOpen)
          remove(trackOpen, a2);
      } else if (!this.cursor.value) {
        this.to = this.endSide = 1e9;
        break;
      } else if (this.cursor.from > from) {
        this.to = this.cursor.from;
        this.endSide = this.cursor.startSide;
        break;
      } else {
        let nextVal = this.cursor.value;
        if (!nextVal.point) {
          this.addActive(trackOpen);
          this.cursor.next();
        } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
          this.cursor.next();
        } else {
          this.point = nextVal;
          this.pointFrom = this.cursor.from;
          this.pointRank = this.cursor.rank;
          this.to = this.cursor.to;
          this.endSide = nextVal.endSide;
          this.cursor.next();
          this.forward(this.to, this.endSide);
          break;
        }
      }
    }
    if (trackOpen) {
      this.openStart = 0;
      for (let i2 = trackOpen.length - 1; i2 >= 0 && trackOpen[i2] < from; i2--)
        this.openStart++;
    }
  }
  activeForPoint(to2) {
    if (!this.active.length)
      return this.active;
    let active = [];
    for (let i2 = this.active.length - 1; i2 >= 0; i2--) {
      if (this.activeRank[i2] < this.pointRank)
        break;
      if (this.activeTo[i2] > to2 || this.activeTo[i2] == to2 && this.active[i2].endSide >= this.point.endSide)
        active.push(this.active[i2]);
    }
    return active.reverse();
  }
  openEnd(to2) {
    let open = 0;
    for (let i2 = this.activeTo.length - 1; i2 >= 0 && this.activeTo[i2] > to2; i2--)
      open++;
    return open;
  }
};
function compare(a2, startA, b2, startB, length, comparator) {
  a2.goto(startA);
  b2.goto(startB);
  let endB = startB + length;
  let pos = startB, dPos = startB - startA;
  for (; ; ) {
    let diff = a2.to + dPos - b2.to || a2.endSide - b2.endSide;
    let end = diff < 0 ? a2.to + dPos : b2.to, clipEnd = Math.min(end, endB);
    if (a2.point || b2.point) {
      if (!(a2.point && b2.point && (a2.point == b2.point || a2.point.eq(b2.point)) && sameValues(a2.activeForPoint(a2.to), b2.activeForPoint(b2.to))))
        comparator.comparePoint(pos, clipEnd, a2.point, b2.point);
    } else {
      if (clipEnd > pos && !sameValues(a2.active, b2.active))
        comparator.compareRange(pos, clipEnd, a2.active, b2.active);
    }
    if (end > endB)
      break;
    pos = end;
    if (diff <= 0)
      a2.next();
    if (diff >= 0)
      b2.next();
  }
}
function sameValues(a2, b2) {
  if (a2.length != b2.length)
    return false;
  for (let i2 = 0; i2 < a2.length; i2++)
    if (a2[i2] != b2[i2] && !a2[i2].eq(b2[i2]))
      return false;
  return true;
}
function remove(array, index) {
  for (let i2 = index, e25 = array.length - 1; i2 < e25; i2++)
    array[i2] = array[i2 + 1];
  array.pop();
}
function insert(array, index, value) {
  for (let i2 = array.length - 1; i2 >= index; i2--)
    array[i2 + 1] = array[i2];
  array[index] = value;
}
function findMinIndex(value, array) {
  let found = -1, foundPos = 1e9;
  for (let i2 = 0; i2 < array.length; i2++)
    if ((array[i2] - foundPos || value[i2].endSide - value[found].endSide) < 0) {
      found = i2;
      foundPos = array[i2];
    }
  return found;
}
function countColumn(string2, tabSize, to2 = string2.length) {
  let n2 = 0;
  for (let i2 = 0; i2 < to2; ) {
    if (string2.charCodeAt(i2) == 9) {
      n2 += tabSize - n2 % tabSize;
      i2++;
    } else {
      n2++;
      i2 = findClusterBreak(string2, i2);
    }
  }
  return n2;
}
function findColumn(string2, col, tabSize, strict) {
  for (let i2 = 0, n2 = 0; ; ) {
    if (n2 >= col)
      return i2;
    if (i2 == string2.length)
      break;
    n2 += string2.charCodeAt(i2) == 9 ? tabSize - n2 % tabSize : 1;
    i2 = findClusterBreak(string2, i2);
  }
  return strict === true ? -1 : string2.length;
}

// node_modules/style-mod/src/style-mod.js
var C = "\u037C";
var COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
var SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
var top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};
var StyleModule = class {
  // :: (Object<Style>, ?{finish: ?(string) → string})
  // Create a style module from the given spec.
  //
  // When `finish` is given, it is called on regular (non-`@`)
  // selectors (after `&` expansion) to compute the final selector.
  constructor(spec, options) {
    this.rules = [];
    let { finish } = options || {};
    function splitSelector(selector) {
      return /^@/.test(selector) ? [selector] : selector.split(/,\s*/);
    }
    function render(selectors, spec2, target, isKeyframes) {
      let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
      if (isAt && spec2 == null) return target.push(selectors[0] + ";");
      for (let prop in spec2) {
        let value = spec2[prop];
        if (/&/.test(prop)) {
          render(
            prop.split(/,\s*/).map((part) => selectors.map((sel) => part.replace(/&/, sel))).reduce((a2, b2) => a2.concat(b2)),
            value,
            target
          );
        } else if (value && typeof value == "object") {
          if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.");
          render(splitSelector(prop), value, local, keyframes);
        } else if (value != null) {
          local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, (l2) => "-" + l2.toLowerCase()) + ": " + value + ";");
        }
      }
      if (local.length || keyframes) {
        target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") + " {" + local.join(" ") + "}");
      }
    }
    for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
  }
  // :: () → string
  // Returns a string containing the module's CSS rules.
  getRules() {
    return this.rules.join("\n");
  }
  // :: () → string
  // Generate a new unique CSS class name.
  static newName() {
    let id3 = top[COUNT] || 1;
    top[COUNT] = id3 + 1;
    return C + id3.toString(36);
  }
  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
  //
  // Mount the given set of modules in the given DOM root, which ensures
  // that the CSS rules defined by the module are available in that
  // context.
  //
  // Rules are only added to the document once per root.
  //
  // Rule order will follow the order of the modules, so that rules from
  // modules later in the array take precedence of those from earlier
  // modules. If you call this function multiple times for the same root
  // in a way that changes the order of already mounted modules, the old
  // order will be changed.
  //
  // If a Content Security Policy nonce is provided, it is added to
  // the `<style>` tag generated by the library.
  static mount(root, modules, options) {
    let set = root[SET], nonce = options && options.nonce;
    if (!set) set = new StyleSet(root, nonce);
    else if (nonce) set.setNonce(nonce);
    set.mount(Array.isArray(modules) ? modules : [modules], root);
  }
};
var adoptedSet = /* @__PURE__ */ new Map();
var StyleSet = class {
  constructor(root, nonce) {
    let doc2 = root.ownerDocument || root, win = doc2.defaultView;
    if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
      let adopted = adoptedSet.get(doc2);
      if (adopted) return root[SET] = adopted;
      this.sheet = new win.CSSStyleSheet();
      adoptedSet.set(doc2, this);
    } else {
      this.styleTag = doc2.createElement("style");
      if (nonce) this.styleTag.setAttribute("nonce", nonce);
    }
    this.modules = [];
    root[SET] = this;
  }
  mount(modules, root) {
    let sheet = this.sheet;
    let pos = 0, j2 = 0;
    for (let i2 = 0; i2 < modules.length; i2++) {
      let mod = modules[i2], index = this.modules.indexOf(mod);
      if (index < j2 && index > -1) {
        this.modules.splice(index, 1);
        j2--;
        index = -1;
      }
      if (index == -1) {
        this.modules.splice(j2++, 0, mod);
        if (sheet) for (let k2 = 0; k2 < mod.rules.length; k2++)
          sheet.insertRule(mod.rules[k2], pos++);
      } else {
        while (j2 < index) pos += this.modules[j2++].rules.length;
        pos += mod.rules.length;
        j2++;
      }
    }
    if (sheet) {
      if (root.adoptedStyleSheets.indexOf(this.sheet) < 0)
        root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets];
    } else {
      let text = "";
      for (let i2 = 0; i2 < this.modules.length; i2++)
        text += this.modules[i2].getRules() + "\n";
      this.styleTag.textContent = text;
      let target = root.head || root;
      if (this.styleTag.parentNode != target)
        target.insertBefore(this.styleTag, target.firstChild);
    }
  }
  setNonce(nonce) {
    if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce)
      this.styleTag.setAttribute("nonce", nonce);
  }
};

// node_modules/w3c-keyname/index.js
var base = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
};
var shift = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
};
var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
var ie = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (i2 = 0; i2 < 10; i2++) base[48 + i2] = base[96 + i2] = String(i2);
var i2;
for (i2 = 1; i2 <= 24; i2++) base[i2 + 111] = "F" + i2;
var i2;
for (i2 = 65; i2 <= 90; i2++) {
  base[i2] = String.fromCharCode(i2 + 32);
  shift[i2] = String.fromCharCode(i2);
}
var i2;
for (code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];
var code;
function keyName(event) {
  var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey || ie && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
  var name2 = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified";
  if (name2 == "Esc") name2 = "Escape";
  if (name2 == "Del") name2 = "Delete";
  if (name2 == "Left") name2 = "ArrowLeft";
  if (name2 == "Up") name2 = "ArrowUp";
  if (name2 == "Right") name2 = "ArrowRight";
  if (name2 == "Down") name2 = "ArrowDown";
  return name2;
}

// node_modules/@codemirror/view/dist/index.js
function getSelection(root) {
  let target;
  if (root.nodeType == 11) {
    target = root.getSelection ? root : root.ownerDocument;
  } else {
    target = root;
  }
  return target.getSelection();
}
function contains(dom, node) {
  return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
}
function deepActiveElement(doc2) {
  let elt2 = doc2.activeElement;
  while (elt2 && elt2.shadowRoot)
    elt2 = elt2.shadowRoot.activeElement;
  return elt2;
}
function hasSelection(dom, selection) {
  if (!selection.anchorNode)
    return false;
  try {
    return contains(dom, selection.anchorNode);
  } catch (_2) {
    return false;
  }
}
function clientRectsFor(dom) {
  if (dom.nodeType == 3)
    return textRange(dom, 0, dom.nodeValue.length).getClientRects();
  else if (dom.nodeType == 1)
    return dom.getClientRects();
  else
    return [];
}
function isEquivalentPosition(node, off2, targetNode, targetOff) {
  return targetNode ? scanFor(node, off2, targetNode, targetOff, -1) || scanFor(node, off2, targetNode, targetOff, 1) : false;
}
function domIndex(node) {
  for (var index = 0; ; index++) {
    node = node.previousSibling;
    if (!node)
      return index;
  }
}
function isBlockElement(node) {
  return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
}
function scanFor(node, off2, targetNode, targetOff, dir) {
  for (; ; ) {
    if (node == targetNode && off2 == targetOff)
      return true;
    if (off2 == (dir < 0 ? 0 : maxOffset(node))) {
      if (node.nodeName == "DIV")
        return false;
      let parent = node.parentNode;
      if (!parent || parent.nodeType != 1)
        return false;
      off2 = domIndex(node) + (dir < 0 ? 0 : 1);
      node = parent;
    } else if (node.nodeType == 1) {
      node = node.childNodes[off2 + (dir < 0 ? -1 : 0)];
      if (node.nodeType == 1 && node.contentEditable == "false")
        return false;
      off2 = dir < 0 ? maxOffset(node) : 0;
    } else {
      return false;
    }
  }
}
function maxOffset(node) {
  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
}
function flattenRect(rect, left) {
  let x2 = left ? rect.left : rect.right;
  return { left: x2, right: x2, top: rect.top, bottom: rect.bottom };
}
function windowRect(win) {
  let vp2 = win.visualViewport;
  if (vp2)
    return {
      left: 0,
      right: vp2.width,
      top: 0,
      bottom: vp2.height
    };
  return {
    left: 0,
    right: win.innerWidth,
    top: 0,
    bottom: win.innerHeight
  };
}
function getScale(elt2, rect) {
  let scaleX = rect.width / elt2.offsetWidth;
  let scaleY = rect.height / elt2.offsetHeight;
  if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect.width - elt2.offsetWidth) < 1)
    scaleX = 1;
  if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect.height - elt2.offsetHeight) < 1)
    scaleY = 1;
  return { scaleX, scaleY };
}
function scrollRectIntoView(dom, rect, side, x2, y2, xMargin, yMargin, ltr) {
  let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
  for (let cur2 = dom, stop = false; cur2 && !stop; ) {
    if (cur2.nodeType == 1) {
      let bounding, top2 = cur2 == doc2.body;
      let scaleX = 1, scaleY = 1;
      if (top2) {
        bounding = windowRect(win);
      } else {
        if (/^(fixed|sticky)$/.test(getComputedStyle(cur2).position))
          stop = true;
        if (cur2.scrollHeight <= cur2.clientHeight && cur2.scrollWidth <= cur2.clientWidth) {
          cur2 = cur2.assignedSlot || cur2.parentNode;
          continue;
        }
        let rect2 = cur2.getBoundingClientRect();
        ({ scaleX, scaleY } = getScale(cur2, rect2));
        bounding = {
          left: rect2.left,
          right: rect2.left + cur2.clientWidth * scaleX,
          top: rect2.top,
          bottom: rect2.top + cur2.clientHeight * scaleY
        };
      }
      let moveX = 0, moveY = 0;
      if (y2 == "nearest") {
        if (rect.top < bounding.top) {
          moveY = -(bounding.top - rect.top + yMargin);
          if (side > 0 && rect.bottom > bounding.bottom + moveY)
            moveY = rect.bottom - bounding.bottom + moveY + yMargin;
        } else if (rect.bottom > bounding.bottom) {
          moveY = rect.bottom - bounding.bottom + yMargin;
          if (side < 0 && rect.top - moveY < bounding.top)
            moveY = -(bounding.top + moveY - rect.top + yMargin);
        }
      } else {
        let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
        let targetTop = y2 == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 : y2 == "start" || y2 == "center" && side < 0 ? rect.top - yMargin : rect.bottom - boundingHeight + yMargin;
        moveY = targetTop - bounding.top;
      }
      if (x2 == "nearest") {
        if (rect.left < bounding.left) {
          moveX = -(bounding.left - rect.left + xMargin);
          if (side > 0 && rect.right > bounding.right + moveX)
            moveX = rect.right - bounding.right + moveX + xMargin;
        } else if (rect.right > bounding.right) {
          moveX = rect.right - bounding.right + xMargin;
          if (side < 0 && rect.left < bounding.left + moveX)
            moveX = -(bounding.left + moveX - rect.left + xMargin);
        }
      } else {
        let targetLeft = x2 == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 : x2 == "start" == ltr ? rect.left - xMargin : rect.right - (bounding.right - bounding.left) + xMargin;
        moveX = targetLeft - bounding.left;
      }
      if (moveX || moveY) {
        if (top2) {
          win.scrollBy(moveX, moveY);
        } else {
          let movedX = 0, movedY = 0;
          if (moveY) {
            let start = cur2.scrollTop;
            cur2.scrollTop += moveY / scaleY;
            movedY = (cur2.scrollTop - start) * scaleY;
          }
          if (moveX) {
            let start = cur2.scrollLeft;
            cur2.scrollLeft += moveX / scaleX;
            movedX = (cur2.scrollLeft - start) * scaleX;
          }
          rect = {
            left: rect.left - movedX,
            top: rect.top - movedY,
            right: rect.right - movedX,
            bottom: rect.bottom - movedY
          };
          if (movedX && Math.abs(movedX - moveX) < 1)
            x2 = "nearest";
          if (movedY && Math.abs(movedY - moveY) < 1)
            y2 = "nearest";
        }
      }
      if (top2)
        break;
      cur2 = cur2.assignedSlot || cur2.parentNode;
    } else if (cur2.nodeType == 11) {
      cur2 = cur2.host;
    } else {
      break;
    }
  }
}
function scrollableParents(dom) {
  let doc2 = dom.ownerDocument, x2, y2;
  for (let cur2 = dom.parentNode; cur2; ) {
    if (cur2 == doc2.body || x2 && y2) {
      break;
    } else if (cur2.nodeType == 1) {
      if (!y2 && cur2.scrollHeight > cur2.clientHeight)
        y2 = cur2;
      if (!x2 && cur2.scrollWidth > cur2.clientWidth)
        x2 = cur2;
      cur2 = cur2.assignedSlot || cur2.parentNode;
    } else if (cur2.nodeType == 11) {
      cur2 = cur2.host;
    } else {
      break;
    }
  }
  return { x: x2, y: y2 };
}
var DOMSelectionState = class {
  constructor() {
    this.anchorNode = null;
    this.anchorOffset = 0;
    this.focusNode = null;
    this.focusOffset = 0;
  }
  eq(domSel) {
    return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
  }
  setRange(range) {
    let { anchorNode, focusNode } = range;
    this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
  }
  set(anchorNode, anchorOffset, focusNode, focusOffset) {
    this.anchorNode = anchorNode;
    this.anchorOffset = anchorOffset;
    this.focusNode = focusNode;
    this.focusOffset = focusOffset;
  }
};
var preventScrollSupported = null;
function focusPreventScroll(dom) {
  if (dom.setActive)
    return dom.setActive();
  if (preventScrollSupported)
    return dom.focus(preventScrollSupported);
  let stack = [];
  for (let cur2 = dom; cur2; cur2 = cur2.parentNode) {
    stack.push(cur2, cur2.scrollTop, cur2.scrollLeft);
    if (cur2 == cur2.ownerDocument)
      break;
  }
  dom.focus(preventScrollSupported == null ? {
    get preventScroll() {
      preventScrollSupported = { preventScroll: true };
      return true;
    }
  } : void 0);
  if (!preventScrollSupported) {
    preventScrollSupported = false;
    for (let i2 = 0; i2 < stack.length; ) {
      let elt2 = stack[i2++], top2 = stack[i2++], left = stack[i2++];
      if (elt2.scrollTop != top2)
        elt2.scrollTop = top2;
      if (elt2.scrollLeft != left)
        elt2.scrollLeft = left;
    }
  }
}
var scratchRange;
function textRange(node, from, to2 = from) {
  let range = scratchRange || (scratchRange = document.createRange());
  range.setEnd(node, to2);
  range.setStart(node, from);
  return range;
}
function dispatchKey(elt2, name2, code, mods) {
  let options = { key: name2, code: name2, keyCode: code, which: code, cancelable: true };
  if (mods)
    ({ altKey: options.altKey, ctrlKey: options.ctrlKey, shiftKey: options.shiftKey, metaKey: options.metaKey } = mods);
  let down = new KeyboardEvent("keydown", options);
  down.synthetic = true;
  elt2.dispatchEvent(down);
  let up2 = new KeyboardEvent("keyup", options);
  up2.synthetic = true;
  elt2.dispatchEvent(up2);
  return down.defaultPrevented || up2.defaultPrevented;
}
function getRoot(node) {
  while (node) {
    if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
      return node;
    node = node.assignedSlot || node.parentNode;
  }
  return null;
}
function clearAttributes(node) {
  while (node.attributes.length)
    node.removeAttributeNode(node.attributes[0]);
}
function atElementStart(doc2, selection) {
  let node = selection.focusNode, offset = selection.focusOffset;
  if (!node || selection.anchorNode != node || selection.anchorOffset != offset)
    return false;
  offset = Math.min(offset, maxOffset(node));
  for (; ; ) {
    if (offset) {
      if (node.nodeType != 1)
        return false;
      let prev = node.childNodes[offset - 1];
      if (prev.contentEditable == "false")
        offset--;
      else {
        node = prev;
        offset = maxOffset(node);
      }
    } else if (node == doc2) {
      return true;
    } else {
      offset = domIndex(node);
      node = node.parentNode;
    }
  }
}
function isScrolledToBottom(elt2) {
  return elt2.scrollTop > Math.max(1, elt2.scrollHeight - elt2.clientHeight - 4);
}
function textNodeBefore(startNode, startOffset) {
  for (let node = startNode, offset = startOffset; ; ) {
    if (node.nodeType == 3 && offset > 0) {
      return { node, offset };
    } else if (node.nodeType == 1 && offset > 0) {
      if (node.contentEditable == "false")
        return null;
      node = node.childNodes[offset - 1];
      offset = maxOffset(node);
    } else if (node.parentNode && !isBlockElement(node)) {
      offset = domIndex(node);
      node = node.parentNode;
    } else {
      return null;
    }
  }
}
function textNodeAfter(startNode, startOffset) {
  for (let node = startNode, offset = startOffset; ; ) {
    if (node.nodeType == 3 && offset < node.nodeValue.length) {
      return { node, offset };
    } else if (node.nodeType == 1 && offset < node.childNodes.length) {
      if (node.contentEditable == "false")
        return null;
      node = node.childNodes[offset];
      offset = 0;
    } else if (node.parentNode && !isBlockElement(node)) {
      offset = domIndex(node) + 1;
      node = node.parentNode;
    } else {
      return null;
    }
  }
}
var DOMPos = class _DOMPos {
  constructor(node, offset, precise = true) {
    this.node = node;
    this.offset = offset;
    this.precise = precise;
  }
  static before(dom, precise) {
    return new _DOMPos(dom.parentNode, domIndex(dom), precise);
  }
  static after(dom, precise) {
    return new _DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
  }
};
var noChildren = [];
var ContentView = class _ContentView {
  constructor() {
    this.parent = null;
    this.dom = null;
    this.flags = 2;
  }
  get overrideDOMText() {
    return null;
  }
  get posAtStart() {
    return this.parent ? this.parent.posBefore(this) : 0;
  }
  get posAtEnd() {
    return this.posAtStart + this.length;
  }
  posBefore(view) {
    let pos = this.posAtStart;
    for (let child of this.children) {
      if (child == view)
        return pos;
      pos += child.length + child.breakAfter;
    }
    throw new RangeError("Invalid child in posBefore");
  }
  posAfter(view) {
    return this.posBefore(view) + view.length;
  }
  sync(view, track) {
    if (this.flags & 2) {
      let parent = this.dom;
      let prev = null, next;
      for (let child of this.children) {
        if (child.flags & 7) {
          if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
            let contentView = _ContentView.get(next);
            if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
              child.reuseDOM(next);
          }
          child.sync(view, track);
          child.flags &= ~7;
        }
        next = prev ? prev.nextSibling : parent.firstChild;
        if (track && !track.written && track.node == parent && next != child.dom)
          track.written = true;
        if (child.dom.parentNode == parent) {
          while (next && next != child.dom)
            next = rm$1(next);
        } else {
          parent.insertBefore(child.dom, next);
        }
        prev = child.dom;
      }
      next = prev ? prev.nextSibling : parent.firstChild;
      if (next && track && track.node == parent)
        track.written = true;
      while (next)
        next = rm$1(next);
    } else if (this.flags & 1) {
      for (let child of this.children)
        if (child.flags & 7) {
          child.sync(view, track);
          child.flags &= ~7;
        }
    }
  }
  reuseDOM(_dom) {
  }
  localPosFromDOM(node, offset) {
    let after;
    if (node == this.dom) {
      after = this.dom.childNodes[offset];
    } else {
      let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
      for (; ; ) {
        let parent = node.parentNode;
        if (parent == this.dom)
          break;
        if (bias == 0 && parent.firstChild != parent.lastChild) {
          if (node == parent.firstChild)
            bias = -1;
          else
            bias = 1;
        }
        node = parent;
      }
      if (bias < 0)
        after = node;
      else
        after = node.nextSibling;
    }
    if (after == this.dom.firstChild)
      return 0;
    while (after && !_ContentView.get(after))
      after = after.nextSibling;
    if (!after)
      return this.length;
    for (let i2 = 0, pos = 0; ; i2++) {
      let child = this.children[i2];
      if (child.dom == after)
        return pos;
      pos += child.length + child.breakAfter;
    }
  }
  domBoundsAround(from, to2, offset = 0) {
    let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
    for (let i2 = 0, pos = offset, prevEnd = offset; i2 < this.children.length; i2++) {
      let child = this.children[i2], end = pos + child.length;
      if (pos < from && end > to2)
        return child.domBoundsAround(from, to2, pos);
      if (end >= from && fromI == -1) {
        fromI = i2;
        fromStart = pos;
      }
      if (pos > to2 && child.dom.parentNode == this.dom) {
        toI = i2;
        toEnd = prevEnd;
        break;
      }
      prevEnd = end;
      pos = end + child.breakAfter;
    }
    return {
      from: fromStart,
      to: toEnd < 0 ? offset + this.length : toEnd,
      startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
      endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
    };
  }
  markDirty(andParent = false) {
    this.flags |= 2;
    this.markParentsDirty(andParent);
  }
  markParentsDirty(childList) {
    for (let parent = this.parent; parent; parent = parent.parent) {
      if (childList)
        parent.flags |= 2;
      if (parent.flags & 1)
        return;
      parent.flags |= 1;
      childList = false;
    }
  }
  setParent(parent) {
    if (this.parent != parent) {
      this.parent = parent;
      if (this.flags & 7)
        this.markParentsDirty(true);
    }
  }
  setDOM(dom) {
    if (this.dom == dom)
      return;
    if (this.dom)
      this.dom.cmView = null;
    this.dom = dom;
    dom.cmView = this;
  }
  get rootView() {
    for (let v2 = this; ; ) {
      let parent = v2.parent;
      if (!parent)
        return v2;
      v2 = parent;
    }
  }
  replaceChildren(from, to2, children = noChildren) {
    this.markDirty();
    for (let i2 = from; i2 < to2; i2++) {
      let child = this.children[i2];
      if (child.parent == this && children.indexOf(child) < 0)
        child.destroy();
    }
    this.children.splice(from, to2 - from, ...children);
    for (let i2 = 0; i2 < children.length; i2++)
      children[i2].setParent(this);
  }
  ignoreMutation(_rec) {
    return false;
  }
  ignoreEvent(_event) {
    return false;
  }
  childCursor(pos = this.length) {
    return new ChildCursor(this.children, pos, this.children.length);
  }
  childPos(pos, bias = 1) {
    return this.childCursor().findPos(pos, bias);
  }
  toString() {
    let name2 = this.constructor.name.replace("View", "");
    return name2 + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name2 == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
  }
  static get(node) {
    return node.cmView;
  }
  get isEditable() {
    return true;
  }
  get isWidget() {
    return false;
  }
  get isHidden() {
    return false;
  }
  merge(from, to2, source, hasStart, openStart, openEnd) {
    return false;
  }
  become(other) {
    return false;
  }
  canReuseDOM(other) {
    return other.constructor == this.constructor && !((this.flags | other.flags) & 8);
  }
  // When this is a zero-length view with a side, this should return a
  // number <= 0 to indicate it is before its position, or a
  // number > 0 when after its position.
  getSide() {
    return 0;
  }
  destroy() {
    for (let child of this.children)
      if (child.parent == this)
        child.destroy();
    this.parent = null;
  }
};
ContentView.prototype.breakAfter = 0;
function rm$1(dom) {
  let next = dom.nextSibling;
  dom.parentNode.removeChild(dom);
  return next;
}
var ChildCursor = class {
  constructor(children, pos, i2) {
    this.children = children;
    this.pos = pos;
    this.i = i2;
    this.off = 0;
  }
  findPos(pos, bias = 1) {
    for (; ; ) {
      if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
        this.off = pos - this.pos;
        return this;
      }
      let next = this.children[--this.i];
      this.pos -= next.length + next.breakAfter;
    }
  }
};
function replaceRange(parent, fromI, fromOff, toI, toOff, insert2, breakAtStart, openStart, openEnd) {
  let { children } = parent;
  let before = children.length ? children[fromI] : null;
  let last = insert2.length ? insert2[insert2.length - 1] : null;
  let breakAtEnd = last ? last.breakAfter : breakAtStart;
  if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert2.length < 2 && before.merge(fromOff, toOff, insert2.length ? last : null, fromOff == 0, openStart, openEnd))
    return;
  if (toI < children.length) {
    let after = children[toI];
    if (after && (toOff < after.length || after.breakAfter && (last === null || last === void 0 ? void 0 : last.breakAfter))) {
      if (fromI == toI) {
        after = after.split(toOff);
        toOff = 0;
      }
      if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
        insert2[insert2.length - 1] = after;
      } else {
        if (toOff || after.children.length && !after.children[0].length)
          after.merge(0, toOff, null, false, 0, openEnd);
        insert2.push(after);
      }
    } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
      if (last)
        last.breakAfter = 1;
      else
        breakAtStart = 1;
    }
    toI++;
  }
  if (before) {
    before.breakAfter = breakAtStart;
    if (fromOff > 0) {
      if (!breakAtStart && insert2.length && before.merge(fromOff, before.length, insert2[0], false, openStart, 0)) {
        before.breakAfter = insert2.shift().breakAfter;
      } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
        before.merge(fromOff, before.length, null, false, openStart, 0);
      }
      fromI++;
    }
  }
  while (fromI < toI && insert2.length) {
    if (children[toI - 1].become(insert2[insert2.length - 1])) {
      toI--;
      insert2.pop();
      openEnd = insert2.length ? 0 : openStart;
    } else if (children[fromI].become(insert2[0])) {
      fromI++;
      insert2.shift();
      openStart = insert2.length ? 0 : openEnd;
    } else {
      break;
    }
  }
  if (!insert2.length && fromI && toI < children.length && !children[fromI - 1].breakAfter && children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
    fromI--;
  if (fromI < toI || insert2.length)
    parent.replaceChildren(fromI, toI, insert2);
}
function mergeChildrenInto(parent, from, to2, insert2, openStart, openEnd) {
  let cur2 = parent.childCursor();
  let { i: toI, off: toOff } = cur2.findPos(to2, 1);
  let { i: fromI, off: fromOff } = cur2.findPos(from, -1);
  let dLen = from - to2;
  for (let view of insert2)
    dLen += view.length;
  parent.length += dLen;
  replaceRange(parent, fromI, fromOff, toI, toOff, insert2, 0, openStart, openEnd);
}
var nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
var doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
var ie_edge = /* @__PURE__ */ /Edge\/(\d+)/.exec(nav.userAgent);
var ie_upto10 = /* @__PURE__ */ /MSIE \d/.test(nav.userAgent);
var ie_11up = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
var ie2 = !!(ie_upto10 || ie_11up || ie_edge);
var gecko = !ie2 && /* @__PURE__ */ /gecko\/(\d+)/i.test(nav.userAgent);
var chrome = !ie2 && /* @__PURE__ */ /Chrome\/(\d+)/.exec(nav.userAgent);
var webkit = "webkitFontSmoothing" in doc.documentElement.style;
var safari = !ie2 && /* @__PURE__ */ /Apple Computer/.test(nav.vendor);
var ios = safari && (/* @__PURE__ */ /Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
var browser = {
  mac: ios || /* @__PURE__ */ /Mac/.test(nav.platform),
  windows: /* @__PURE__ */ /Win/.test(nav.platform),
  linux: /* @__PURE__ */ /Linux|X11/.test(nav.platform),
  ie: ie2,
  ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
  gecko,
  gecko_version: gecko ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
  chrome: !!chrome,
  chrome_version: chrome ? +chrome[1] : 0,
  ios,
  android: /* @__PURE__ */ /Android\b/.test(nav.userAgent),
  webkit,
  safari,
  webkit_version: webkit ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
  tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
var MaxJoinLen = 256;
var TextView = class _TextView extends ContentView {
  constructor(text) {
    super();
    this.text = text;
  }
  get length() {
    return this.text.length;
  }
  createDOM(textDOM) {
    this.setDOM(textDOM || document.createTextNode(this.text));
  }
  sync(view, track) {
    if (!this.dom)
      this.createDOM();
    if (this.dom.nodeValue != this.text) {
      if (track && track.node == this.dom)
        track.written = true;
      this.dom.nodeValue = this.text;
    }
  }
  reuseDOM(dom) {
    if (dom.nodeType == 3)
      this.createDOM(dom);
  }
  merge(from, to2, source) {
    if (this.flags & 8 || source && (!(source instanceof _TextView) || this.length - (to2 - from) + source.length > MaxJoinLen || source.flags & 8))
      return false;
    this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to2);
    this.markDirty();
    return true;
  }
  split(from) {
    let result = new _TextView(this.text.slice(from));
    this.text = this.text.slice(0, from);
    this.markDirty();
    result.flags |= this.flags & 8;
    return result;
  }
  localPosFromDOM(node, offset) {
    return node == this.dom ? offset : offset ? this.text.length : 0;
  }
  domAtPos(pos) {
    return new DOMPos(this.dom, pos);
  }
  domBoundsAround(_from, _to, offset) {
    return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
  }
  coordsAt(pos, side) {
    return textCoords(this.dom, pos, side);
  }
};
var MarkView = class _MarkView extends ContentView {
  constructor(mark, children = [], length = 0) {
    super();
    this.mark = mark;
    this.children = children;
    this.length = length;
    for (let ch2 of children)
      ch2.setParent(this);
  }
  setAttrs(dom) {
    clearAttributes(dom);
    if (this.mark.class)
      dom.className = this.mark.class;
    if (this.mark.attrs)
      for (let name2 in this.mark.attrs)
        dom.setAttribute(name2, this.mark.attrs[name2]);
    return dom;
  }
  canReuseDOM(other) {
    return super.canReuseDOM(other) && !((this.flags | other.flags) & 8);
  }
  reuseDOM(node) {
    if (node.nodeName == this.mark.tagName.toUpperCase()) {
      this.setDOM(node);
      this.flags |= 4 | 2;
    }
  }
  sync(view, track) {
    if (!this.dom)
      this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
    else if (this.flags & 4)
      this.setAttrs(this.dom);
    super.sync(view, track);
  }
  merge(from, to2, source, _hasStart, openStart, openEnd) {
    if (source && (!(source instanceof _MarkView && source.mark.eq(this.mark)) || from && openStart <= 0 || to2 < this.length && openEnd <= 0))
      return false;
    mergeChildrenInto(this, from, to2, source ? source.children.slice() : [], openStart - 1, openEnd - 1);
    this.markDirty();
    return true;
  }
  split(from) {
    let result = [], off2 = 0, detachFrom = -1, i2 = 0;
    for (let elt2 of this.children) {
      let end = off2 + elt2.length;
      if (end > from)
        result.push(off2 < from ? elt2.split(from - off2) : elt2);
      if (detachFrom < 0 && off2 >= from)
        detachFrom = i2;
      off2 = end;
      i2++;
    }
    let length = this.length - from;
    this.length = from;
    if (detachFrom > -1) {
      this.children.length = detachFrom;
      this.markDirty();
    }
    return new _MarkView(this.mark, result, length);
  }
  domAtPos(pos) {
    return inlineDOMAtPos(this, pos);
  }
  coordsAt(pos, side) {
    return coordsInChildren(this, pos, side);
  }
};
function textCoords(text, pos, side) {
  let length = text.nodeValue.length;
  if (pos > length)
    pos = length;
  let from = pos, to2 = pos, flatten2 = 0;
  if (pos == 0 && side < 0 || pos == length && side >= 0) {
    if (!(browser.chrome || browser.gecko)) {
      if (pos) {
        from--;
        flatten2 = 1;
      } else if (to2 < length) {
        to2++;
        flatten2 = -1;
      }
    }
  } else {
    if (side < 0)
      from--;
    else if (to2 < length)
      to2++;
  }
  let rects = textRange(text, from, to2).getClientRects();
  if (!rects.length)
    return null;
  let rect = rects[(flatten2 ? flatten2 < 0 : side >= 0) ? 0 : rects.length - 1];
  if (browser.safari && !flatten2 && rect.width == 0)
    rect = Array.prototype.find.call(rects, (r2) => r2.width) || rect;
  return flatten2 ? flattenRect(rect, flatten2 < 0) : rect || null;
}
var WidgetView = class _WidgetView extends ContentView {
  static create(widget, length, side) {
    return new _WidgetView(widget, length, side);
  }
  constructor(widget, length, side) {
    super();
    this.widget = widget;
    this.length = length;
    this.side = side;
    this.prevWidget = null;
  }
  split(from) {
    let result = _WidgetView.create(this.widget, this.length - from, this.side);
    this.length -= from;
    return result;
  }
  sync(view) {
    if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
      if (this.dom && this.prevWidget)
        this.prevWidget.destroy(this.dom);
      this.prevWidget = null;
      this.setDOM(this.widget.toDOM(view));
      if (!this.widget.editable)
        this.dom.contentEditable = "false";
    }
  }
  getSide() {
    return this.side;
  }
  merge(from, to2, source, hasStart, openStart, openEnd) {
    if (source && (!(source instanceof _WidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to2 < this.length && openEnd <= 0))
      return false;
    this.length = from + (source ? source.length : 0) + (this.length - to2);
    return true;
  }
  become(other) {
    if (other instanceof _WidgetView && other.side == this.side && this.widget.constructor == other.widget.constructor) {
      if (!this.widget.compare(other.widget))
        this.markDirty(true);
      if (this.dom && !this.prevWidget)
        this.prevWidget = this.widget;
      this.widget = other.widget;
      this.length = other.length;
      return true;
    }
    return false;
  }
  ignoreMutation() {
    return true;
  }
  ignoreEvent(event) {
    return this.widget.ignoreEvent(event);
  }
  get overrideDOMText() {
    if (this.length == 0)
      return Text.empty;
    let top2 = this;
    while (top2.parent)
      top2 = top2.parent;
    let { view } = top2, text = view && view.state.doc, start = this.posAtStart;
    return text ? text.slice(start, start + this.length) : Text.empty;
  }
  domAtPos(pos) {
    return (this.length ? pos == 0 : this.side > 0) ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(pos, side) {
    let custom = this.widget.coordsAt(this.dom, pos, side);
    if (custom)
      return custom;
    let rects = this.dom.getClientRects(), rect = null;
    if (!rects.length)
      return null;
    let fromBack = this.side ? this.side < 0 : pos > 0;
    for (let i2 = fromBack ? rects.length - 1 : 0; ; i2 += fromBack ? -1 : 1) {
      rect = rects[i2];
      if (pos > 0 ? i2 == 0 : i2 == rects.length - 1 || rect.top < rect.bottom)
        break;
    }
    return flattenRect(rect, !fromBack);
  }
  get isEditable() {
    return false;
  }
  get isWidget() {
    return true;
  }
  get isHidden() {
    return this.widget.isHidden;
  }
  destroy() {
    super.destroy();
    if (this.dom)
      this.widget.destroy(this.dom);
  }
};
var WidgetBufferView = class _WidgetBufferView extends ContentView {
  constructor(side) {
    super();
    this.side = side;
  }
  get length() {
    return 0;
  }
  merge() {
    return false;
  }
  become(other) {
    return other instanceof _WidgetBufferView && other.side == this.side;
  }
  split() {
    return new _WidgetBufferView(this.side);
  }
  sync() {
    if (!this.dom) {
      let dom = document.createElement("img");
      dom.className = "cm-widgetBuffer";
      dom.setAttribute("aria-hidden", "true");
      this.setDOM(dom);
    }
  }
  getSide() {
    return this.side;
  }
  domAtPos(pos) {
    return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom);
  }
  localPosFromDOM() {
    return 0;
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(pos) {
    return this.dom.getBoundingClientRect();
  }
  get overrideDOMText() {
    return Text.empty;
  }
  get isHidden() {
    return true;
  }
};
TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
function inlineDOMAtPos(parent, pos) {
  let dom = parent.dom, { children } = parent, i2 = 0;
  for (let off2 = 0; i2 < children.length; i2++) {
    let child = children[i2], end = off2 + child.length;
    if (end == off2 && child.getSide() <= 0)
      continue;
    if (pos > off2 && pos < end && child.dom.parentNode == dom)
      return child.domAtPos(pos - off2);
    if (pos <= off2)
      break;
    off2 = end;
  }
  for (let j2 = i2; j2 > 0; j2--) {
    let prev = children[j2 - 1];
    if (prev.dom.parentNode == dom)
      return prev.domAtPos(prev.length);
  }
  for (let j2 = i2; j2 < children.length; j2++) {
    let next = children[j2];
    if (next.dom.parentNode == dom)
      return next.domAtPos(0);
  }
  return new DOMPos(dom, 0);
}
function joinInlineInto(parent, view, open) {
  let last, { children } = parent;
  if (open > 0 && view instanceof MarkView && children.length && (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
    joinInlineInto(last, view.children[0], open - 1);
  } else {
    children.push(view);
    view.setParent(parent);
  }
  parent.length += view.length;
}
function coordsInChildren(view, pos, side) {
  let before = null, beforePos = -1, after = null, afterPos = -1;
  function scan(view2, pos2) {
    for (let i2 = 0, off2 = 0; i2 < view2.children.length && off2 <= pos2; i2++) {
      let child = view2.children[i2], end = off2 + child.length;
      if (end >= pos2) {
        if (child.children.length) {
          scan(child, pos2 - off2);
        } else if ((!after || after.isHidden && side > 0) && (end > pos2 || off2 == end && child.getSide() > 0)) {
          after = child;
          afterPos = pos2 - off2;
        } else if (off2 < pos2 || off2 == end && child.getSide() < 0 && !child.isHidden) {
          before = child;
          beforePos = pos2 - off2;
        }
      }
      off2 = end;
    }
  }
  scan(view, pos);
  let target = (side < 0 ? before : after) || before || after;
  if (target)
    return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
  return fallbackRect(view);
}
function fallbackRect(view) {
  let last = view.dom.lastChild;
  if (!last)
    return view.dom.getBoundingClientRect();
  let rects = clientRectsFor(last);
  return rects[rects.length - 1] || null;
}
function combineAttrs(source, target) {
  for (let name2 in source) {
    if (name2 == "class" && target.class)
      target.class += " " + source.class;
    else if (name2 == "style" && target.style)
      target.style += ";" + source.style;
    else
      target[name2] = source[name2];
  }
  return target;
}
var noAttrs = /* @__PURE__ */ Object.create(null);
function attrsEq(a2, b2, ignore) {
  if (a2 == b2)
    return true;
  if (!a2)
    a2 = noAttrs;
  if (!b2)
    b2 = noAttrs;
  let keysA = Object.keys(a2), keysB = Object.keys(b2);
  if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) != keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))
    return false;
  for (let key of keysA) {
    if (key != ignore && (keysB.indexOf(key) == -1 || a2[key] !== b2[key]))
      return false;
  }
  return true;
}
function updateAttrs(dom, prev, attrs) {
  let changed = false;
  if (prev) {
    for (let name2 in prev)
      if (!(attrs && name2 in attrs)) {
        changed = true;
        if (name2 == "style")
          dom.style.cssText = "";
        else
          dom.removeAttribute(name2);
      }
  }
  if (attrs) {
    for (let name2 in attrs)
      if (!(prev && prev[name2] == attrs[name2])) {
        changed = true;
        if (name2 == "style")
          dom.style.cssText = attrs[name2];
        else
          dom.setAttribute(name2, attrs[name2]);
      }
  }
  return changed;
}
function getAttrs(dom) {
  let attrs = /* @__PURE__ */ Object.create(null);
  for (let i2 = 0; i2 < dom.attributes.length; i2++) {
    let attr = dom.attributes[i2];
    attrs[attr.name] = attr.value;
  }
  return attrs;
}
var LineView = class _LineView extends ContentView {
  constructor() {
    super(...arguments);
    this.children = [];
    this.length = 0;
    this.prevAttrs = void 0;
    this.attrs = null;
    this.breakAfter = 0;
  }
  // Consumes source
  merge(from, to2, source, hasStart, openStart, openEnd) {
    if (source) {
      if (!(source instanceof _LineView))
        return false;
      if (!this.dom)
        source.transferDOM(this);
    }
    if (hasStart)
      this.setDeco(source ? source.attrs : null);
    mergeChildrenInto(this, from, to2, source ? source.children.slice() : [], openStart, openEnd);
    return true;
  }
  split(at2) {
    let end = new _LineView();
    end.breakAfter = this.breakAfter;
    if (this.length == 0)
      return end;
    let { i: i2, off: off2 } = this.childPos(at2);
    if (off2) {
      end.append(this.children[i2].split(off2), 0);
      this.children[i2].merge(off2, this.children[i2].length, null, false, 0, 0);
      i2++;
    }
    for (let j2 = i2; j2 < this.children.length; j2++)
      end.append(this.children[j2], 0);
    while (i2 > 0 && this.children[i2 - 1].length == 0)
      this.children[--i2].destroy();
    this.children.length = i2;
    this.markDirty();
    this.length = at2;
    return end;
  }
  transferDOM(other) {
    if (!this.dom)
      return;
    this.markDirty();
    other.setDOM(this.dom);
    other.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs;
    this.prevAttrs = void 0;
    this.dom = null;
  }
  setDeco(attrs) {
    if (!attrsEq(this.attrs, attrs)) {
      if (this.dom) {
        this.prevAttrs = this.attrs;
        this.markDirty();
      }
      this.attrs = attrs;
    }
  }
  append(child, openStart) {
    joinInlineInto(this, child, openStart);
  }
  // Only called when building a line view in ContentBuilder
  addLineDeco(deco) {
    let attrs = deco.spec.attributes, cls = deco.spec.class;
    if (attrs)
      this.attrs = combineAttrs(attrs, this.attrs || {});
    if (cls)
      this.attrs = combineAttrs({ class: cls }, this.attrs || {});
  }
  domAtPos(pos) {
    return inlineDOMAtPos(this, pos);
  }
  reuseDOM(node) {
    if (node.nodeName == "DIV") {
      this.setDOM(node);
      this.flags |= 4 | 2;
    }
  }
  sync(view, track) {
    var _a3;
    if (!this.dom) {
      this.setDOM(document.createElement("div"));
      this.dom.className = "cm-line";
      this.prevAttrs = this.attrs ? null : void 0;
    } else if (this.flags & 4) {
      clearAttributes(this.dom);
      this.dom.className = "cm-line";
      this.prevAttrs = this.attrs ? null : void 0;
    }
    if (this.prevAttrs !== void 0) {
      updateAttrs(this.dom, this.prevAttrs, this.attrs);
      this.dom.classList.add("cm-line");
      this.prevAttrs = void 0;
    }
    super.sync(view, track);
    let last = this.dom.lastChild;
    while (last && ContentView.get(last) instanceof MarkView)
      last = last.lastChild;
    if (!last || !this.length || last.nodeName != "BR" && ((_a3 = ContentView.get(last)) === null || _a3 === void 0 ? void 0 : _a3.isEditable) == false && (!browser.ios || !this.children.some((ch2) => ch2 instanceof TextView))) {
      let hack = document.createElement("BR");
      hack.cmIgnore = true;
      this.dom.appendChild(hack);
    }
  }
  measureTextSize() {
    if (this.children.length == 0 || this.length > 20)
      return null;
    let totalWidth = 0, textHeight;
    for (let child of this.children) {
      if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
        return null;
      let rects = clientRectsFor(child.dom);
      if (rects.length != 1)
        return null;
      totalWidth += rects[0].width;
      textHeight = rects[0].height;
    }
    return !totalWidth ? null : {
      lineHeight: this.dom.getBoundingClientRect().height,
      charWidth: totalWidth / this.length,
      textHeight
    };
  }
  coordsAt(pos, side) {
    let rect = coordsInChildren(this, pos, side);
    if (!this.children.length && rect && this.parent) {
      let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
      if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
        let dist2 = (height - heightOracle.textHeight) / 2;
        return { top: rect.top + dist2, bottom: rect.bottom - dist2, left: rect.left, right: rect.left };
      }
    }
    return rect;
  }
  become(other) {
    return other instanceof _LineView && this.children.length == 0 && other.children.length == 0 && attrsEq(this.attrs, other.attrs) && this.breakAfter == other.breakAfter;
  }
  covers() {
    return true;
  }
  static find(docView, pos) {
    for (let i2 = 0, off2 = 0; i2 < docView.children.length; i2++) {
      let block = docView.children[i2], end = off2 + block.length;
      if (end >= pos) {
        if (block instanceof _LineView)
          return block;
        if (end > pos)
          break;
      }
      off2 = end + block.breakAfter;
    }
    return null;
  }
};
var BlockWidgetView = class _BlockWidgetView extends ContentView {
  constructor(widget, length, deco) {
    super();
    this.widget = widget;
    this.length = length;
    this.deco = deco;
    this.breakAfter = 0;
    this.prevWidget = null;
  }
  merge(from, to2, source, _takeDeco, openStart, openEnd) {
    if (source && (!(source instanceof _BlockWidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to2 < this.length && openEnd <= 0))
      return false;
    this.length = from + (source ? source.length : 0) + (this.length - to2);
    return true;
  }
  domAtPos(pos) {
    return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
  }
  split(at2) {
    let len = this.length - at2;
    this.length = at2;
    let end = new _BlockWidgetView(this.widget, len, this.deco);
    end.breakAfter = this.breakAfter;
    return end;
  }
  get children() {
    return noChildren;
  }
  sync(view) {
    if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
      if (this.dom && this.prevWidget)
        this.prevWidget.destroy(this.dom);
      this.prevWidget = null;
      this.setDOM(this.widget.toDOM(view));
      if (!this.widget.editable)
        this.dom.contentEditable = "false";
    }
  }
  get overrideDOMText() {
    return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
  }
  domBoundsAround() {
    return null;
  }
  become(other) {
    if (other instanceof _BlockWidgetView && other.widget.constructor == this.widget.constructor) {
      if (!other.widget.compare(this.widget))
        this.markDirty(true);
      if (this.dom && !this.prevWidget)
        this.prevWidget = this.widget;
      this.widget = other.widget;
      this.length = other.length;
      this.deco = other.deco;
      this.breakAfter = other.breakAfter;
      return true;
    }
    return false;
  }
  ignoreMutation() {
    return true;
  }
  ignoreEvent(event) {
    return this.widget.ignoreEvent(event);
  }
  get isEditable() {
    return false;
  }
  get isWidget() {
    return true;
  }
  coordsAt(pos, side) {
    return this.widget.coordsAt(this.dom, pos, side);
  }
  destroy() {
    super.destroy();
    if (this.dom)
      this.widget.destroy(this.dom);
  }
  covers(side) {
    let { startSide, endSide } = this.deco;
    return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;
  }
};
var WidgetType = class {
  /**
  Compare this instance to another instance of the same type.
  (TypeScript can't express this, but only instances of the same
  specific class will be passed to this method.) This is used to
  avoid redrawing widgets when they are replaced by a new
  decoration of the same type. The default implementation just
  returns `false`, which will cause new instances of the widget to
  always be redrawn.
  */
  eq(widget) {
    return false;
  }
  /**
  Update a DOM element created by a widget of the same type (but
  different, non-`eq` content) to reflect this widget. May return
  true to indicate that it could update, false to indicate it
  couldn't (in which case the widget will be redrawn). The default
  implementation just returns false.
  */
  updateDOM(dom, view) {
    return false;
  }
  /**
  @internal
  */
  compare(other) {
    return this == other || this.constructor == other.constructor && this.eq(other);
  }
  /**
  The estimated height this widget will have, to be used when
  estimating the height of content that hasn't been drawn. May
  return -1 to indicate you don't know. The default implementation
  returns -1.
  */
  get estimatedHeight() {
    return -1;
  }
  /**
  For inline widgets that are displayed inline (as opposed to
  `inline-block`) and introduce line breaks (through `<br>` tags
  or textual newlines), this must indicate the amount of line
  breaks they introduce. Defaults to 0.
  */
  get lineBreaks() {
    return 0;
  }
  /**
  Can be used to configure which kinds of events inside the widget
  should be ignored by the editor. The default is to ignore all
  events.
  */
  ignoreEvent(event) {
    return true;
  }
  /**
  Override the way screen coordinates for positions at/in the
  widget are found. `pos` will be the offset into the widget, and
  `side` the side of the position that is being queried—less than
  zero for before, greater than zero for after, and zero for
  directly at that position.
  */
  coordsAt(dom, pos, side) {
    return null;
  }
  /**
  @internal
  */
  get isHidden() {
    return false;
  }
  /**
  @internal
  */
  get editable() {
    return false;
  }
  /**
  This is called when the an instance of the widget is removed
  from the editor view.
  */
  destroy(dom) {
  }
};
var BlockType = /* @__PURE__ */ function(BlockType2) {
  BlockType2[BlockType2["Text"] = 0] = "Text";
  BlockType2[BlockType2["WidgetBefore"] = 1] = "WidgetBefore";
  BlockType2[BlockType2["WidgetAfter"] = 2] = "WidgetAfter";
  BlockType2[BlockType2["WidgetRange"] = 3] = "WidgetRange";
  return BlockType2;
}(BlockType || (BlockType = {}));
var Decoration = class extends RangeValue {
  constructor(startSide, endSide, widget, spec) {
    super();
    this.startSide = startSide;
    this.endSide = endSide;
    this.widget = widget;
    this.spec = spec;
  }
  /**
  @internal
  */
  get heightRelevant() {
    return false;
  }
  /**
  Create a mark decoration, which influences the styling of the
  content in its range. Nested mark decorations will cause nested
  DOM elements to be created. Nesting order is determined by
  precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
  the higher-precedence decorations creating the inner DOM nodes.
  Such elements are split on line boundaries and on the boundaries
  of lower-precedence decorations.
  */
  static mark(spec) {
    return new MarkDecoration(spec);
  }
  /**
  Create a widget decoration, which displays a DOM element at the
  given position.
  */
  static widget(spec) {
    let side = Math.max(-1e4, Math.min(1e4, spec.side || 0)), block = !!spec.block;
    side += block && !spec.inlineOrder ? side > 0 ? 3e8 : -4e8 : side > 0 ? 1e8 : -1e8;
    return new PointDecoration(spec, side, side, block, spec.widget || null, false);
  }
  /**
  Create a replace decoration which replaces the given range with
  a widget, or simply hides it.
  */
  static replace(spec) {
    let block = !!spec.block, startSide, endSide;
    if (spec.isBlockGap) {
      startSide = -5e8;
      endSide = 4e8;
    } else {
      let { start, end } = getInclusive(spec, block);
      startSide = (start ? block ? -3e8 : -1 : 5e8) - 1;
      endSide = (end ? block ? 2e8 : 1 : -6e8) + 1;
    }
    return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
  }
  /**
  Create a line decoration, which can add DOM attributes to the
  line starting at the given position.
  */
  static line(spec) {
    return new LineDecoration(spec);
  }
  /**
  Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
  decorated range or ranges. If the ranges aren't already sorted,
  pass `true` for `sort` to make the library sort them for you.
  */
  static set(of2, sort = false) {
    return RangeSet.of(of2, sort);
  }
  /**
  @internal
  */
  hasHeight() {
    return this.widget ? this.widget.estimatedHeight > -1 : false;
  }
};
Decoration.none = RangeSet.empty;
var MarkDecoration = class _MarkDecoration extends Decoration {
  constructor(spec) {
    let { start, end } = getInclusive(spec);
    super(start ? -1 : 5e8, end ? 1 : -6e8, null, spec);
    this.tagName = spec.tagName || "span";
    this.class = spec.class || "";
    this.attrs = spec.attributes || null;
  }
  eq(other) {
    var _a3, _b2;
    return this == other || other instanceof _MarkDecoration && this.tagName == other.tagName && (this.class || ((_a3 = this.attrs) === null || _a3 === void 0 ? void 0 : _a3.class)) == (other.class || ((_b2 = other.attrs) === null || _b2 === void 0 ? void 0 : _b2.class)) && attrsEq(this.attrs, other.attrs, "class");
  }
  range(from, to2 = from) {
    if (from >= to2)
      throw new RangeError("Mark decorations may not be empty");
    return super.range(from, to2);
  }
};
MarkDecoration.prototype.point = false;
var LineDecoration = class _LineDecoration extends Decoration {
  constructor(spec) {
    super(-2e8, -2e8, null, spec);
  }
  eq(other) {
    return other instanceof _LineDecoration && this.spec.class == other.spec.class && attrsEq(this.spec.attributes, other.spec.attributes);
  }
  range(from, to2 = from) {
    if (to2 != from)
      throw new RangeError("Line decoration ranges must be zero-length");
    return super.range(from, to2);
  }
};
LineDecoration.prototype.mapMode = MapMode.TrackBefore;
LineDecoration.prototype.point = true;
var PointDecoration = class _PointDecoration extends Decoration {
  constructor(spec, startSide, endSide, block, widget, isReplace) {
    super(startSide, endSide, widget, spec);
    this.block = block;
    this.isReplace = isReplace;
    this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
  }
  // Only relevant when this.block == true
  get type() {
    return this.startSide != this.endSide ? BlockType.WidgetRange : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
  }
  get heightRelevant() {
    return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
  }
  eq(other) {
    return other instanceof _PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
  }
  range(from, to2 = from) {
    if (this.isReplace && (from > to2 || from == to2 && this.startSide > 0 && this.endSide <= 0))
      throw new RangeError("Invalid range for replacement decoration");
    if (!this.isReplace && to2 != from)
      throw new RangeError("Widget decorations can only have zero-length ranges");
    return super.range(from, to2);
  }
};
PointDecoration.prototype.point = true;
function getInclusive(spec, block = false) {
  let { inclusiveStart: start, inclusiveEnd: end } = spec;
  if (start == null)
    start = spec.inclusive;
  if (end == null)
    end = spec.inclusive;
  return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
}
function widgetsEq(a2, b2) {
  return a2 == b2 || !!(a2 && b2 && a2.compare(b2));
}
function addRange(from, to2, ranges, margin = 0) {
  let last = ranges.length - 1;
  if (last >= 0 && ranges[last] + margin >= from)
    ranges[last] = Math.max(ranges[last], to2);
  else
    ranges.push(from, to2);
}
var ContentBuilder = class _ContentBuilder {
  constructor(doc2, pos, end, disallowBlockEffectsFor) {
    this.doc = doc2;
    this.pos = pos;
    this.end = end;
    this.disallowBlockEffectsFor = disallowBlockEffectsFor;
    this.content = [];
    this.curLine = null;
    this.breakAtStart = 0;
    this.pendingBuffer = 0;
    this.bufferMarks = [];
    this.atCursorPos = true;
    this.openStart = -1;
    this.openEnd = -1;
    this.text = "";
    this.textOff = 0;
    this.cursor = doc2.iter();
    this.skip = pos;
  }
  posCovered() {
    if (this.content.length == 0)
      return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
    let last = this.content[this.content.length - 1];
    return !(last.breakAfter || last instanceof BlockWidgetView && last.deco.endSide < 0);
  }
  getLine() {
    if (!this.curLine) {
      this.content.push(this.curLine = new LineView());
      this.atCursorPos = true;
    }
    return this.curLine;
  }
  flushBuffer(active = this.bufferMarks) {
    if (this.pendingBuffer) {
      this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
      this.pendingBuffer = 0;
    }
  }
  addBlockWidget(view) {
    this.flushBuffer();
    this.curLine = null;
    this.content.push(view);
  }
  finish(openEnd) {
    if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
      this.flushBuffer();
    else
      this.pendingBuffer = 0;
    if (!this.posCovered() && !(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView))
      this.getLine();
  }
  buildText(length, active, openStart) {
    while (length > 0) {
      if (this.textOff == this.text.length) {
        let { value, lineBreak, done } = this.cursor.next(this.skip);
        this.skip = 0;
        if (done)
          throw new Error("Ran out of text content when drawing inline views");
        if (lineBreak) {
          if (!this.posCovered())
            this.getLine();
          if (this.content.length)
            this.content[this.content.length - 1].breakAfter = 1;
          else
            this.breakAtStart = 1;
          this.flushBuffer();
          this.curLine = null;
          this.atCursorPos = true;
          length--;
          continue;
        } else {
          this.text = value;
          this.textOff = 0;
        }
      }
      let take = Math.min(
        this.text.length - this.textOff,
        length,
        512
        /* T.Chunk */
      );
      this.flushBuffer(active.slice(active.length - openStart));
      this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
      this.atCursorPos = true;
      this.textOff += take;
      length -= take;
      openStart = 0;
    }
  }
  span(from, to2, active, openStart) {
    this.buildText(to2 - from, active, openStart);
    this.pos = to2;
    if (this.openStart < 0)
      this.openStart = openStart;
  }
  point(from, to2, deco, active, openStart, index) {
    if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
      if (deco.block)
        throw new RangeError("Block decorations may not be specified via plugins");
      if (to2 > this.doc.lineAt(this.pos).to)
        throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
    }
    let len = to2 - from;
    if (deco instanceof PointDecoration) {
      if (deco.block) {
        if (deco.startSide > 0 && !this.posCovered())
          this.getLine();
        this.addBlockWidget(new BlockWidgetView(deco.widget || NullWidget.block, len, deco));
      } else {
        let view = WidgetView.create(deco.widget || NullWidget.inline, len, len ? 0 : deco.startSide);
        let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to2 || deco.startSide > 0);
        let cursorAfter = !view.isEditable && (from < to2 || openStart > active.length || deco.startSide <= 0);
        let line = this.getLine();
        if (this.pendingBuffer == 2 && !cursorBefore && !view.isEditable)
          this.pendingBuffer = 0;
        this.flushBuffer(active);
        if (cursorBefore) {
          line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
          openStart = active.length + Math.max(0, openStart - active.length);
        }
        line.append(wrapMarks(view, active), openStart);
        this.atCursorPos = cursorAfter;
        this.pendingBuffer = !cursorAfter ? 0 : from < to2 || openStart > active.length ? 1 : 2;
        if (this.pendingBuffer)
          this.bufferMarks = active.slice();
      }
    } else if (this.doc.lineAt(this.pos).from == this.pos) {
      this.getLine().addLineDeco(deco);
    }
    if (len) {
      if (this.textOff + len <= this.text.length) {
        this.textOff += len;
      } else {
        this.skip += len - (this.text.length - this.textOff);
        this.text = "";
        this.textOff = 0;
      }
      this.pos = to2;
    }
    if (this.openStart < 0)
      this.openStart = openStart;
  }
  static build(text, from, to2, decorations2, dynamicDecorationMap) {
    let builder = new _ContentBuilder(text, from, to2, dynamicDecorationMap);
    builder.openEnd = RangeSet.spans(decorations2, from, to2, builder);
    if (builder.openStart < 0)
      builder.openStart = builder.openEnd;
    builder.finish(builder.openEnd);
    return builder;
  }
};
function wrapMarks(view, active) {
  for (let mark of active)
    view = new MarkView(mark, [view], view.length);
  return view;
}
var NullWidget = class extends WidgetType {
  constructor(tag) {
    super();
    this.tag = tag;
  }
  eq(other) {
    return other.tag == this.tag;
  }
  toDOM() {
    return document.createElement(this.tag);
  }
  updateDOM(elt2) {
    return elt2.nodeName.toLowerCase() == this.tag;
  }
  get isHidden() {
    return true;
  }
};
NullWidget.inline = /* @__PURE__ */ new NullWidget("span");
NullWidget.block = /* @__PURE__ */ new NullWidget("div");
var Direction = /* @__PURE__ */ function(Direction2) {
  Direction2[Direction2["LTR"] = 0] = "LTR";
  Direction2[Direction2["RTL"] = 1] = "RTL";
  return Direction2;
}(Direction || (Direction = {}));
var LTR = Direction.LTR;
var RTL = Direction.RTL;
function dec(str) {
  let result = [];
  for (let i2 = 0; i2 < str.length; i2++)
    result.push(1 << +str[i2]);
  return result;
}
var LowTypes = /* @__PURE__ */ dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
var ArabicTypes = /* @__PURE__ */ dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
var Brackets = /* @__PURE__ */ Object.create(null);
var BracketStack = [];
for (let p2 of ["()", "[]", "{}"]) {
  let l2 = /* @__PURE__ */ p2.charCodeAt(0), r2 = /* @__PURE__ */ p2.charCodeAt(1);
  Brackets[l2] = r2;
  Brackets[r2] = -l2;
}
function charType(ch2) {
  return ch2 <= 247 ? LowTypes[ch2] : 1424 <= ch2 && ch2 <= 1524 ? 2 : 1536 <= ch2 && ch2 <= 1785 ? ArabicTypes[ch2 - 1536] : 1774 <= ch2 && ch2 <= 2220 ? 4 : 8192 <= ch2 && ch2 <= 8204 ? 256 : 64336 <= ch2 && ch2 <= 65023 ? 4 : 1;
}
var BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
var BidiSpan = class {
  /**
  The direction of this span.
  */
  get dir() {
    return this.level % 2 ? RTL : LTR;
  }
  /**
  @internal
  */
  constructor(from, to2, level) {
    this.from = from;
    this.to = to2;
    this.level = level;
  }
  /**
  @internal
  */
  side(end, dir) {
    return this.dir == dir == end ? this.to : this.from;
  }
  /**
  @internal
  */
  forward(forward, dir) {
    return forward == (this.dir == dir);
  }
  /**
  @internal
  */
  static find(order, index, level, assoc) {
    let maybe = -1;
    for (let i2 = 0; i2 < order.length; i2++) {
      let span = order[i2];
      if (span.from <= index && span.to >= index) {
        if (span.level == level)
          return i2;
        if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order[maybe].level > span.level))
          maybe = i2;
      }
    }
    if (maybe < 0)
      throw new RangeError("Index out of range");
    return maybe;
  }
};
function isolatesEq(a2, b2) {
  if (a2.length != b2.length)
    return false;
  for (let i2 = 0; i2 < a2.length; i2++) {
    let iA2 = a2[i2], iB2 = b2[i2];
    if (iA2.from != iB2.from || iA2.to != iB2.to || iA2.direction != iB2.direction || !isolatesEq(iA2.inner, iB2.inner))
      return false;
  }
  return true;
}
var types = [];
function computeCharTypes(line, rFrom, rTo, isolates, outerType) {
  for (let iI2 = 0; iI2 <= isolates.length; iI2++) {
    let from = iI2 ? isolates[iI2 - 1].to : rFrom, to2 = iI2 < isolates.length ? isolates[iI2].from : rTo;
    let prevType = iI2 ? 256 : outerType;
    for (let i2 = from, prev = prevType, prevStrong = prevType; i2 < to2; i2++) {
      let type = charType(line.charCodeAt(i2));
      if (type == 512)
        type = prev;
      else if (type == 8 && prevStrong == 4)
        type = 16;
      types[i2] = type == 4 ? 2 : type;
      if (type & 7)
        prevStrong = type;
      prev = type;
    }
    for (let i2 = from, prev = prevType, prevStrong = prevType; i2 < to2; i2++) {
      let type = types[i2];
      if (type == 128) {
        if (i2 < to2 - 1 && prev == types[i2 + 1] && prev & 24)
          type = types[i2] = prev;
        else
          types[i2] = 256;
      } else if (type == 64) {
        let end = i2 + 1;
        while (end < to2 && types[end] == 64)
          end++;
        let replace2 = i2 && prev == 8 || end < rTo && types[end] == 8 ? prevStrong == 1 ? 1 : 8 : 256;
        for (let j2 = i2; j2 < end; j2++)
          types[j2] = replace2;
        i2 = end - 1;
      } else if (type == 8 && prevStrong == 1) {
        types[i2] = 1;
      }
      prev = type;
      if (type & 7)
        prevStrong = type;
    }
  }
}
function processBracketPairs(line, rFrom, rTo, isolates, outerType) {
  let oppositeType = outerType == 1 ? 2 : 1;
  for (let iI2 = 0, sI2 = 0, context = 0; iI2 <= isolates.length; iI2++) {
    let from = iI2 ? isolates[iI2 - 1].to : rFrom, to2 = iI2 < isolates.length ? isolates[iI2].from : rTo;
    for (let i2 = from, ch2, br2, type; i2 < to2; i2++) {
      if (br2 = Brackets[ch2 = line.charCodeAt(i2)]) {
        if (br2 < 0) {
          for (let sJ = sI2 - 3; sJ >= 0; sJ -= 3) {
            if (BracketStack[sJ + 1] == -br2) {
              let flags = BracketStack[sJ + 2];
              let type2 = flags & 2 ? outerType : !(flags & 4) ? 0 : flags & 1 ? oppositeType : outerType;
              if (type2)
                types[i2] = types[BracketStack[sJ]] = type2;
              sI2 = sJ;
              break;
            }
          }
        } else if (BracketStack.length == 189) {
          break;
        } else {
          BracketStack[sI2++] = i2;
          BracketStack[sI2++] = ch2;
          BracketStack[sI2++] = context;
        }
      } else if ((type = types[i2]) == 2 || type == 1) {
        let embed = type == outerType;
        context = embed ? 0 : 1;
        for (let sJ = sI2 - 3; sJ >= 0; sJ -= 3) {
          let cur2 = BracketStack[sJ + 2];
          if (cur2 & 2)
            break;
          if (embed) {
            BracketStack[sJ + 2] |= 2;
          } else {
            if (cur2 & 4)
              break;
            BracketStack[sJ + 2] |= 4;
          }
        }
      }
    }
  }
}
function processNeutrals(rFrom, rTo, isolates, outerType) {
  for (let iI2 = 0, prev = outerType; iI2 <= isolates.length; iI2++) {
    let from = iI2 ? isolates[iI2 - 1].to : rFrom, to2 = iI2 < isolates.length ? isolates[iI2].from : rTo;
    for (let i2 = from; i2 < to2; ) {
      let type = types[i2];
      if (type == 256) {
        let end = i2 + 1;
        for (; ; ) {
          if (end == to2) {
            if (iI2 == isolates.length)
              break;
            end = isolates[iI2++].to;
            to2 = iI2 < isolates.length ? isolates[iI2].from : rTo;
          } else if (types[end] == 256) {
            end++;
          } else {
            break;
          }
        }
        let beforeL = prev == 1;
        let afterL = (end < rTo ? types[end] : outerType) == 1;
        let replace2 = beforeL == afterL ? beforeL ? 1 : 2 : outerType;
        for (let j2 = end, jI2 = iI2, fromJ = jI2 ? isolates[jI2 - 1].to : rFrom; j2 > i2; ) {
          if (j2 == fromJ) {
            j2 = isolates[--jI2].from;
            fromJ = jI2 ? isolates[jI2 - 1].to : rFrom;
          }
          types[--j2] = replace2;
        }
        i2 = end;
      } else {
        prev = type;
        i2++;
      }
    }
  }
}
function emitSpans(line, from, to2, level, baseLevel, isolates, order) {
  let ourType = level % 2 ? 2 : 1;
  if (level % 2 == baseLevel % 2) {
    for (let iCh = from, iI2 = 0; iCh < to2; ) {
      let sameDir = true, isNum = false;
      if (iI2 == isolates.length || iCh < isolates[iI2].from) {
        let next = types[iCh];
        if (next != ourType) {
          sameDir = false;
          isNum = next == 16;
        }
      }
      let recurse = !sameDir && ourType == 1 ? [] : null;
      let localLevel = sameDir ? level : level + 1;
      let iScan = iCh;
      run: for (; ; ) {
        if (iI2 < isolates.length && iScan == isolates[iI2].from) {
          if (isNum)
            break run;
          let iso = isolates[iI2];
          if (!sameDir)
            for (let upto = iso.to, jI2 = iI2 + 1; ; ) {
              if (upto == to2)
                break run;
              if (jI2 < isolates.length && isolates[jI2].from == upto)
                upto = isolates[jI2++].to;
              else if (types[upto] == ourType)
                break run;
              else
                break;
            }
          iI2++;
          if (recurse) {
            recurse.push(iso);
          } else {
            if (iso.from > iCh)
              order.push(new BidiSpan(iCh, iso.from, localLevel));
            let dirSwap = iso.direction == LTR != !(localLevel % 2);
            computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
            iCh = iso.to;
          }
          iScan = iso.to;
        } else if (iScan == to2 || (sameDir ? types[iScan] != ourType : types[iScan] == ourType)) {
          break;
        } else {
          iScan++;
        }
      }
      if (recurse)
        emitSpans(line, iCh, iScan, level + 1, baseLevel, recurse, order);
      else if (iCh < iScan)
        order.push(new BidiSpan(iCh, iScan, localLevel));
      iCh = iScan;
    }
  } else {
    for (let iCh = to2, iI2 = isolates.length; iCh > from; ) {
      let sameDir = true, isNum = false;
      if (!iI2 || iCh > isolates[iI2 - 1].to) {
        let next = types[iCh - 1];
        if (next != ourType) {
          sameDir = false;
          isNum = next == 16;
        }
      }
      let recurse = !sameDir && ourType == 1 ? [] : null;
      let localLevel = sameDir ? level : level + 1;
      let iScan = iCh;
      run: for (; ; ) {
        if (iI2 && iScan == isolates[iI2 - 1].to) {
          if (isNum)
            break run;
          let iso = isolates[--iI2];
          if (!sameDir)
            for (let upto = iso.from, jI2 = iI2; ; ) {
              if (upto == from)
                break run;
              if (jI2 && isolates[jI2 - 1].to == upto)
                upto = isolates[--jI2].from;
              else if (types[upto - 1] == ourType)
                break run;
              else
                break;
            }
          if (recurse) {
            recurse.push(iso);
          } else {
            if (iso.to < iCh)
              order.push(new BidiSpan(iso.to, iCh, localLevel));
            let dirSwap = iso.direction == LTR != !(localLevel % 2);
            computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
            iCh = iso.from;
          }
          iScan = iso.from;
        } else if (iScan == from || (sameDir ? types[iScan - 1] != ourType : types[iScan - 1] == ourType)) {
          break;
        } else {
          iScan--;
        }
      }
      if (recurse)
        emitSpans(line, iScan, iCh, level + 1, baseLevel, recurse, order);
      else if (iScan < iCh)
        order.push(new BidiSpan(iScan, iCh, localLevel));
      iCh = iScan;
    }
  }
}
function computeSectionOrder(line, level, baseLevel, isolates, from, to2, order) {
  let outerType = level % 2 ? 2 : 1;
  computeCharTypes(line, from, to2, isolates, outerType);
  processBracketPairs(line, from, to2, isolates, outerType);
  processNeutrals(from, to2, isolates, outerType);
  emitSpans(line, from, to2, level, baseLevel, isolates, order);
}
function computeOrder(line, direction, isolates) {
  if (!line)
    return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
  if (direction == LTR && !isolates.length && !BidiRE.test(line))
    return trivialOrder(line.length);
  if (isolates.length)
    while (line.length > types.length)
      types[types.length] = 256;
  let order = [], level = direction == LTR ? 0 : 1;
  computeSectionOrder(line, level, level, isolates, 0, line.length, order);
  return order;
}
function trivialOrder(length) {
  return [new BidiSpan(0, length, 0)];
}
var movedOver = "";
function moveVisually(line, order, dir, start, forward) {
  var _a3;
  let startIndex = start.head - line.from;
  let spanI = BidiSpan.find(order, startIndex, (_a3 = start.bidiLevel) !== null && _a3 !== void 0 ? _a3 : -1, start.assoc);
  let span = order[spanI], spanEnd = span.side(forward, dir);
  if (startIndex == spanEnd) {
    let nextI = spanI += forward ? 1 : -1;
    if (nextI < 0 || nextI >= order.length)
      return null;
    span = order[spanI = nextI];
    startIndex = span.side(!forward, dir);
    spanEnd = span.side(forward, dir);
  }
  let nextIndex = findClusterBreak(line.text, startIndex, span.forward(forward, dir));
  if (nextIndex < span.from || nextIndex > span.to)
    nextIndex = spanEnd;
  movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
  let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
  if (nextSpan && nextIndex == spanEnd && nextSpan.level + (forward ? 0 : 1) < span.level)
    return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, nextSpan.forward(forward, dir) ? 1 : -1, nextSpan.level);
  return EditorSelection.cursor(nextIndex + line.from, span.forward(forward, dir) ? -1 : 1, span.level);
}
function autoDirection(text, from, to2) {
  for (let i2 = from; i2 < to2; i2++) {
    let type = charType(text.charCodeAt(i2));
    if (type == 1)
      return LTR;
    if (type == 2 || type == 4)
      return RTL;
  }
  return LTR;
}
var clickAddsSelectionRange = /* @__PURE__ */ Facet.define();
var dragMovesSelection$1 = /* @__PURE__ */ Facet.define();
var mouseSelectionStyle = /* @__PURE__ */ Facet.define();
var exceptionSink = /* @__PURE__ */ Facet.define();
var updateListener = /* @__PURE__ */ Facet.define();
var inputHandler = /* @__PURE__ */ Facet.define();
var focusChangeEffect = /* @__PURE__ */ Facet.define();
var perLineTextDirection = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.some((x2) => x2)
});
var nativeSelectionHidden = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.some((x2) => x2)
});
var scrollHandler = /* @__PURE__ */ Facet.define();
var ScrollTarget = class _ScrollTarget {
  constructor(range, y2 = "nearest", x2 = "nearest", yMargin = 5, xMargin = 5, isSnapshot = false) {
    this.range = range;
    this.y = y2;
    this.x = x2;
    this.yMargin = yMargin;
    this.xMargin = xMargin;
    this.isSnapshot = isSnapshot;
  }
  map(changes) {
    return changes.empty ? this : new _ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
  clip(state) {
    return this.range.to <= state.doc.length ? this : new _ScrollTarget(EditorSelection.cursor(state.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
};
var scrollIntoView = /* @__PURE__ */ StateEffect.define({ map: (t3, ch2) => t3.map(ch2) });
var setEditContextFormatting = /* @__PURE__ */ StateEffect.define();
function logException(state, exception, context) {
  let handler = state.facet(exceptionSink);
  if (handler.length)
    handler[0](exception);
  else if (window.onerror)
    window.onerror(String(exception), context, void 0, void 0, exception);
  else if (context)
    console.error(context + ":", exception);
  else
    console.error(exception);
}
var editable = /* @__PURE__ */ Facet.define({ combine: (values2) => values2.length ? values2[0] : true });
var nextPluginID = 0;
var viewPlugin = /* @__PURE__ */ Facet.define();
var ViewPlugin = class _ViewPlugin {
  constructor(id3, create, domEventHandlers, domEventObservers, buildExtensions) {
    this.id = id3;
    this.create = create;
    this.domEventHandlers = domEventHandlers;
    this.domEventObservers = domEventObservers;
    this.extension = buildExtensions(this);
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */
  static define(create, spec) {
    const { eventHandlers, eventObservers, provide, decorations: deco } = spec || {};
    return new _ViewPlugin(nextPluginID++, create, eventHandlers, eventObservers, (plugin) => {
      let ext = [viewPlugin.of(plugin)];
      if (deco)
        ext.push(decorations.of((view) => {
          let pluginInst = view.plugin(plugin);
          return pluginInst ? deco(pluginInst) : Decoration.none;
        }));
      if (provide)
        ext.push(provide(plugin));
      return ext;
    });
  }
  /**
  Create a plugin for a class whose constructor takes a single
  editor view as argument.
  */
  static fromClass(cls, spec) {
    return _ViewPlugin.define((view) => new cls(view), spec);
  }
};
var PluginInstance = class {
  constructor(spec) {
    this.spec = spec;
    this.mustUpdate = null;
    this.value = null;
  }
  update(view) {
    if (!this.value) {
      if (this.spec) {
        try {
          this.value = this.spec.create(view);
        } catch (e25) {
          logException(view.state, e25, "CodeMirror plugin crashed");
          this.deactivate();
        }
      }
    } else if (this.mustUpdate) {
      let update = this.mustUpdate;
      this.mustUpdate = null;
      if (this.value.update) {
        try {
          this.value.update(update);
        } catch (e25) {
          logException(update.state, e25, "CodeMirror plugin crashed");
          if (this.value.destroy)
            try {
              this.value.destroy();
            } catch (_2) {
            }
          this.deactivate();
        }
      }
    }
    return this;
  }
  destroy(view) {
    var _a3;
    if ((_a3 = this.value) === null || _a3 === void 0 ? void 0 : _a3.destroy) {
      try {
        this.value.destroy();
      } catch (e25) {
        logException(view.state, e25, "CodeMirror plugin crashed");
      }
    }
  }
  deactivate() {
    this.spec = this.value = null;
  }
};
var editorAttributes = /* @__PURE__ */ Facet.define();
var contentAttributes = /* @__PURE__ */ Facet.define();
var decorations = /* @__PURE__ */ Facet.define();
var outerDecorations = /* @__PURE__ */ Facet.define();
var atomicRanges = /* @__PURE__ */ Facet.define();
var bidiIsolatedRanges = /* @__PURE__ */ Facet.define();
function getIsolatedRanges(view, line) {
  let isolates = view.state.facet(bidiIsolatedRanges);
  if (!isolates.length)
    return isolates;
  let sets = isolates.map((i2) => i2 instanceof Function ? i2(view) : i2);
  let result = [];
  RangeSet.spans(sets, line.from, line.to, {
    point() {
    },
    span(fromDoc, toDoc, active, open) {
      let from = fromDoc - line.from, to2 = toDoc - line.from;
      let level = result;
      for (let i2 = active.length - 1; i2 >= 0; i2--, open--) {
        let direction = active[i2].spec.bidiIsolate, update;
        if (direction == null)
          direction = autoDirection(line.text, from, to2);
        if (open > 0 && level.length && (update = level[level.length - 1]).to == from && update.direction == direction) {
          update.to = to2;
          level = update.inner;
        } else {
          let add2 = { from, to: to2, direction, inner: [] };
          level.push(add2);
          level = add2.inner;
        }
      }
    }
  });
  return result;
}
var scrollMargins = /* @__PURE__ */ Facet.define();
function getScrollMargins(view) {
  let left = 0, right = 0, top2 = 0, bottom = 0;
  for (let source of view.state.facet(scrollMargins)) {
    let m2 = source(view);
    if (m2) {
      if (m2.left != null)
        left = Math.max(left, m2.left);
      if (m2.right != null)
        right = Math.max(right, m2.right);
      if (m2.top != null)
        top2 = Math.max(top2, m2.top);
      if (m2.bottom != null)
        bottom = Math.max(bottom, m2.bottom);
    }
  }
  return { left, right, top: top2, bottom };
}
var styleModule = /* @__PURE__ */ Facet.define();
var ChangedRange = class _ChangedRange {
  constructor(fromA, toA, fromB, toB) {
    this.fromA = fromA;
    this.toA = toA;
    this.fromB = fromB;
    this.toB = toB;
  }
  join(other) {
    return new _ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
  }
  addToSet(set) {
    let i2 = set.length, me2 = this;
    for (; i2 > 0; i2--) {
      let range = set[i2 - 1];
      if (range.fromA > me2.toA)
        continue;
      if (range.toA < me2.fromA)
        break;
      me2 = me2.join(range);
      set.splice(i2 - 1, 1);
    }
    set.splice(i2, 0, me2);
    return set;
  }
  static extendWithRanges(diff, ranges) {
    if (ranges.length == 0)
      return diff;
    let result = [];
    for (let dI2 = 0, rI2 = 0, posA = 0, posB = 0; ; dI2++) {
      let next = dI2 == diff.length ? null : diff[dI2], off2 = posA - posB;
      let end = next ? next.fromB : 1e9;
      while (rI2 < ranges.length && ranges[rI2] < end) {
        let from = ranges[rI2], to2 = ranges[rI2 + 1];
        let fromB = Math.max(posB, from), toB = Math.min(end, to2);
        if (fromB <= toB)
          new _ChangedRange(fromB + off2, toB + off2, fromB, toB).addToSet(result);
        if (to2 > end)
          break;
        else
          rI2 += 2;
      }
      if (!next)
        return result;
      new _ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
      posA = next.toA;
      posB = next.toB;
    }
  }
};
var ViewUpdate = class _ViewUpdate {
  constructor(view, state, transactions) {
    this.view = view;
    this.state = state;
    this.transactions = transactions;
    this.flags = 0;
    this.startState = view.state;
    this.changes = ChangeSet.empty(this.startState.doc.length);
    for (let tr2 of transactions)
      this.changes = this.changes.compose(tr2.changes);
    let changedRanges = [];
    this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
    this.changedRanges = changedRanges;
  }
  /**
  @internal
  */
  static create(view, state, transactions) {
    return new _ViewUpdate(view, state, transactions);
  }
  /**
  Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
  [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
  update.
  */
  get viewportChanged() {
    return (this.flags & 4) > 0;
  }
  /**
  Indicates whether the height of a block element in the editor
  changed in this update.
  */
  get heightChanged() {
    return (this.flags & 2) > 0;
  }
  /**
  Returns true when the document was modified or the size of the
  editor, or elements within the editor, changed.
  */
  get geometryChanged() {
    return this.docChanged || (this.flags & (8 | 2)) > 0;
  }
  /**
  True when this update indicates a focus change.
  */
  get focusChanged() {
    return (this.flags & 1) > 0;
  }
  /**
  Whether the document changed in this update.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Whether the selection was explicitly set in this update.
  */
  get selectionSet() {
    return this.transactions.some((tr2) => tr2.selection);
  }
  /**
  @internal
  */
  get empty() {
    return this.flags == 0 && this.transactions.length == 0;
  }
};
var DocView = class extends ContentView {
  get length() {
    return this.view.state.doc.length;
  }
  constructor(view) {
    super();
    this.view = view;
    this.decorations = [];
    this.dynamicDecorationMap = [false];
    this.domChanged = null;
    this.hasComposition = null;
    this.markedForComposition = /* @__PURE__ */ new Set();
    this.editContextFormatting = Decoration.none;
    this.lastCompositionAfterCursor = false;
    this.minWidth = 0;
    this.minWidthFrom = 0;
    this.minWidthTo = 0;
    this.impreciseAnchor = null;
    this.impreciseHead = null;
    this.forceSelection = false;
    this.lastUpdate = Date.now();
    this.setDOM(view.contentDOM);
    this.children = [new LineView()];
    this.children[0].setParent(this);
    this.updateDeco();
    this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);
  }
  // Update the document view to a given state.
  update(update) {
    var _a3;
    let changedRanges = update.changedRanges;
    if (this.minWidth > 0 && changedRanges.length) {
      if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
        this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
      } else {
        this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
        this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
      }
    }
    this.updateEditContextFormatting(update);
    let readCompositionAt = -1;
    if (this.view.inputState.composing >= 0 && !this.view.observer.editContext) {
      if ((_a3 = this.domChanged) === null || _a3 === void 0 ? void 0 : _a3.newSel)
        readCompositionAt = this.domChanged.newSel.head;
      else if (!touchesComposition(update.changes, this.hasComposition) && !update.selectionSet)
        readCompositionAt = update.state.selection.main.head;
    }
    let composition = readCompositionAt > -1 ? findCompositionRange(this.view, update.changes, readCompositionAt) : null;
    this.domChanged = null;
    if (this.hasComposition) {
      this.markedForComposition.clear();
      let { from, to: to2 } = this.hasComposition;
      changedRanges = new ChangedRange(from, to2, update.changes.mapPos(from, -1), update.changes.mapPos(to2, 1)).addToSet(changedRanges.slice());
    }
    this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;
    if ((browser.ie || browser.chrome) && !composition && update && update.state.doc.lines != update.startState.doc.lines)
      this.forceSelection = true;
    let prevDeco = this.decorations, deco = this.updateDeco();
    let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
    changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
    if (!(this.flags & 7) && changedRanges.length == 0) {
      return false;
    } else {
      this.updateInner(changedRanges, update.startState.doc.length, composition);
      if (update.transactions.length)
        this.lastUpdate = Date.now();
      return true;
    }
  }
  // Used by update and the constructor do perform the actual DOM
  // update
  updateInner(changes, oldLength, composition) {
    this.view.viewState.mustMeasureContent = true;
    this.updateChildren(changes, oldLength, composition);
    let { observer } = this.view;
    observer.ignore(() => {
      this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px";
      this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
      let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : void 0;
      this.sync(this.view, track);
      this.flags &= ~7;
      if (track && (track.written || observer.selectionRange.focusNode != track.node))
        this.forceSelection = true;
      this.dom.style.height = "";
    });
    this.markedForComposition.forEach(
      (cView) => cView.flags &= ~8
      /* ViewFlag.Composition */
    );
    let gaps = [];
    if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) {
      for (let child of this.children)
        if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
          gaps.push(child.dom);
    }
    observer.updateGaps(gaps);
  }
  updateChildren(changes, oldLength, composition) {
    let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
    let cursor = this.childCursor(oldLength);
    for (let i2 = ranges.length - 1; ; i2--) {
      let next = i2 >= 0 ? ranges[i2] : null;
      if (!next)
        break;
      let { fromA, toA, fromB, toB } = next, content2, breakAtStart, openStart, openEnd;
      if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
        let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
        let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
        breakAtStart = before.breakAtStart;
        openStart = before.openStart;
        openEnd = after.openEnd;
        let compLine = this.compositionView(composition);
        if (after.breakAtStart) {
          compLine.breakAfter = 1;
        } else if (after.content.length && compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
          compLine.breakAfter = after.content[0].breakAfter;
          after.content.shift();
        }
        if (before.content.length && compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
          before.content.pop();
        }
        content2 = before.content.concat(compLine).concat(after.content);
      } else {
        ({ content: content2, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));
      }
      let { i: toI, off: toOff } = cursor.findPos(toA, 1);
      let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
      replaceRange(this, fromI, fromOff, toI, toOff, content2, breakAtStart, openStart, openEnd);
    }
    if (composition)
      this.fixCompositionDOM(composition);
  }
  updateEditContextFormatting(update) {
    this.editContextFormatting = this.editContextFormatting.map(update.changes);
    for (let tr2 of update.transactions)
      for (let effect of tr2.effects)
        if (effect.is(setEditContextFormatting)) {
          this.editContextFormatting = effect.value;
        }
  }
  compositionView(composition) {
    let cur2 = new TextView(composition.text.nodeValue);
    cur2.flags |= 8;
    for (let { deco } of composition.marks)
      cur2 = new MarkView(deco, [cur2], cur2.length);
    let line = new LineView();
    line.append(cur2, 0);
    return line;
  }
  fixCompositionDOM(composition) {
    let fix = (dom, cView2) => {
      cView2.flags |= 8 | (cView2.children.some(
        (c2) => c2.flags & 7
        /* ViewFlag.Dirty */
      ) ? 1 : 0);
      this.markedForComposition.add(cView2);
      let prev = ContentView.get(dom);
      if (prev && prev != cView2)
        prev.dom = null;
      cView2.setDOM(dom);
    };
    let pos = this.childPos(composition.range.fromB, 1);
    let cView = this.children[pos.i];
    fix(composition.line, cView);
    for (let i2 = composition.marks.length - 1; i2 >= -1; i2--) {
      pos = cView.childPos(pos.off, 1);
      cView = cView.children[pos.i];
      fix(i2 >= 0 ? composition.marks[i2].node : composition.text, cView);
    }
  }
  // Sync the DOM selection to this.state.selection
  updateSelection(mustRead = false, fromPointer = false) {
    if (mustRead || !this.view.observer.selectionRange.focusNode)
      this.view.observer.readSelectionRange();
    let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
    let selectionNotFocus = !focused && hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
    if (!(focused || fromPointer || selectionNotFocus))
      return;
    let force = this.forceSelection;
    this.forceSelection = false;
    let main = this.view.state.selection.main;
    let anchor = this.moveToLine(this.domAtPos(main.anchor));
    let head = main.empty ? anchor : this.moveToLine(this.domAtPos(main.head));
    if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {
      let dummy = document.createTextNode("");
      this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
      anchor = head = new DOMPos(dummy, 0);
      force = true;
    }
    let domSel = this.view.observer.selectionRange;
    if (force || !domSel.focusNode || (!isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) && !this.suppressWidgetCursorChange(domSel, main)) {
      this.view.observer.ignore(() => {
        if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) && inUneditable(domSel.focusNode, this.dom)) {
          this.dom.blur();
          this.dom.focus({ preventScroll: true });
        }
        let rawSel = getSelection(this.view.root);
        if (!rawSel) ;
        else if (main.empty) {
          if (browser.gecko) {
            let nextTo = nextToUneditable(anchor.node, anchor.offset);
            if (nextTo && nextTo != (1 | 2)) {
              let text = (nextTo == 1 ? textNodeBefore : textNodeAfter)(anchor.node, anchor.offset);
              if (text)
                anchor = new DOMPos(text.node, text.offset);
            }
          }
          rawSel.collapse(anchor.node, anchor.offset);
          if (main.bidiLevel != null && rawSel.caretBidiLevel !== void 0)
            rawSel.caretBidiLevel = main.bidiLevel;
        } else if (rawSel.extend) {
          rawSel.collapse(anchor.node, anchor.offset);
          try {
            rawSel.extend(head.node, head.offset);
          } catch (_2) {
          }
        } else {
          let range = document.createRange();
          if (main.anchor > main.head)
            [anchor, head] = [head, anchor];
          range.setEnd(head.node, head.offset);
          range.setStart(anchor.node, anchor.offset);
          rawSel.removeAllRanges();
          rawSel.addRange(range);
        }
        if (selectionNotFocus && this.view.root.activeElement == this.dom) {
          this.dom.blur();
          if (activeElt)
            activeElt.focus();
        }
      });
      this.view.observer.setSelectionRange(anchor, head);
    }
    this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
    this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
  }
  // If a zero-length widget is inserted next to the cursor during
  // composition, avoid moving it across it and disrupting the
  // composition.
  suppressWidgetCursorChange(sel, cursor) {
    return this.hasComposition && cursor.empty && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset) && this.posFromDOM(sel.focusNode, sel.focusOffset) == cursor.head;
  }
  enforceCursorAssoc() {
    if (this.hasComposition)
      return;
    let { view } = this, cursor = view.state.selection.main;
    let sel = getSelection(view.root);
    let { anchorNode, anchorOffset } = view.observer.selectionRange;
    if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
      return;
    let line = LineView.find(this, cursor.head);
    if (!line)
      return;
    let lineStart = line.posAtStart;
    if (cursor.head == lineStart || cursor.head == lineStart + line.length)
      return;
    let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
    if (!before || !after || before.bottom > after.top)
      return;
    let dom = this.domAtPos(cursor.head + cursor.assoc);
    sel.collapse(dom.node, dom.offset);
    sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
    view.observer.readSelectionRange();
    let newRange = view.observer.selectionRange;
    if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
      sel.collapse(anchorNode, anchorOffset);
  }
  // If a position is in/near a block widget, move it to a nearby text
  // line, since we don't want the cursor inside a block widget.
  moveToLine(pos) {
    let dom = this.dom, newPos;
    if (pos.node != dom)
      return pos;
    for (let i2 = pos.offset; !newPos && i2 < dom.childNodes.length; i2++) {
      let view = ContentView.get(dom.childNodes[i2]);
      if (view instanceof LineView)
        newPos = view.domAtPos(0);
    }
    for (let i2 = pos.offset - 1; !newPos && i2 >= 0; i2--) {
      let view = ContentView.get(dom.childNodes[i2]);
      if (view instanceof LineView)
        newPos = view.domAtPos(view.length);
    }
    return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos;
  }
  nearest(dom) {
    for (let cur2 = dom; cur2; ) {
      let domView = ContentView.get(cur2);
      if (domView && domView.rootView == this)
        return domView;
      cur2 = cur2.parentNode;
    }
    return null;
  }
  posFromDOM(node, offset) {
    let view = this.nearest(node);
    if (!view)
      throw new RangeError("Trying to find position for a DOM position outside of the document");
    return view.localPosFromDOM(node, offset) + view.posAtStart;
  }
  domAtPos(pos) {
    let { i: i2, off: off2 } = this.childCursor().findPos(pos, -1);
    for (; i2 < this.children.length - 1; ) {
      let child = this.children[i2];
      if (off2 < child.length || child instanceof LineView)
        break;
      i2++;
      off2 = 0;
    }
    return this.children[i2].domAtPos(off2);
  }
  coordsAt(pos, side) {
    let best = null, bestPos = 0;
    for (let off2 = this.length, i2 = this.children.length - 1; i2 >= 0; i2--) {
      let child = this.children[i2], end = off2 - child.breakAfter, start = end - child.length;
      if (end < pos)
        break;
      if (start <= pos && (start < pos || child.covers(-1)) && (end > pos || child.covers(1)) && (!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {
        best = child;
        bestPos = start;
      } else if (best && start == pos && end == pos && child instanceof BlockWidgetView && Math.abs(side) < 2) {
        if (child.deco.startSide < 0)
          break;
        else if (i2)
          best = null;
      }
      off2 = start;
    }
    return best ? best.coordsAt(pos - bestPos, side) : null;
  }
  coordsForChar(pos) {
    let { i: i2, off: off2 } = this.childPos(pos, 1), child = this.children[i2];
    if (!(child instanceof LineView))
      return null;
    while (child.children.length) {
      let { i: i3, off: childOff } = child.childPos(off2, 1);
      for (; ; i3++) {
        if (i3 == child.children.length)
          return null;
        if ((child = child.children[i3]).length)
          break;
      }
      off2 = childOff;
    }
    if (!(child instanceof TextView))
      return null;
    let end = findClusterBreak(child.text, off2);
    if (end == off2)
      return null;
    let rects = textRange(child.dom, off2, end).getClientRects();
    for (let i3 = 0; i3 < rects.length; i3++) {
      let rect = rects[i3];
      if (i3 == rects.length - 1 || rect.top < rect.bottom && rect.left < rect.right)
        return rect;
    }
    return null;
  }
  measureVisibleLineHeights(viewport) {
    let result = [], { from, to: to2 } = viewport;
    let contentWidth = this.view.contentDOM.clientWidth;
    let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
    let widest = -1, ltr = this.view.textDirection == Direction.LTR;
    for (let pos = 0, i2 = 0; i2 < this.children.length; i2++) {
      let child = this.children[i2], end = pos + child.length;
      if (end > to2)
        break;
      if (pos >= from) {
        let childRect = child.dom.getBoundingClientRect();
        result.push(childRect.height);
        if (isWider) {
          let last = child.dom.lastChild;
          let rects = last ? clientRectsFor(last) : [];
          if (rects.length) {
            let rect = rects[rects.length - 1];
            let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
            if (width > widest) {
              widest = width;
              this.minWidth = contentWidth;
              this.minWidthFrom = pos;
              this.minWidthTo = end;
            }
          }
        }
      }
      pos = end + child.breakAfter;
    }
    return result;
  }
  textDirectionAt(pos) {
    let { i: i2 } = this.childPos(pos, 1);
    return getComputedStyle(this.children[i2].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
  }
  measureTextSize() {
    for (let child of this.children) {
      if (child instanceof LineView) {
        let measure = child.measureTextSize();
        if (measure)
          return measure;
      }
    }
    let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
    dummy.className = "cm-line";
    dummy.style.width = "99999px";
    dummy.style.position = "absolute";
    dummy.textContent = "abc def ghi jkl mno pqr stu";
    this.view.observer.ignore(() => {
      this.dom.appendChild(dummy);
      let rect = clientRectsFor(dummy.firstChild)[0];
      lineHeight = dummy.getBoundingClientRect().height;
      charWidth = rect ? rect.width / 27 : 7;
      textHeight = rect ? rect.height : lineHeight;
      dummy.remove();
    });
    return { lineHeight, charWidth, textHeight };
  }
  childCursor(pos = this.length) {
    let i2 = this.children.length;
    if (i2)
      pos -= this.children[--i2].length;
    return new ChildCursor(this.children, pos, i2);
  }
  computeBlockGapDeco() {
    let deco = [], vs = this.view.viewState;
    for (let pos = 0, i2 = 0; ; i2++) {
      let next = i2 == vs.viewports.length ? null : vs.viewports[i2];
      let end = next ? next.from - 1 : this.length;
      if (end > pos) {
        let height = (vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top) / this.view.scaleY;
        deco.push(Decoration.replace({
          widget: new BlockGapWidget(height),
          block: true,
          inclusive: true,
          isBlockGap: true
        }).range(pos, end));
      }
      if (!next)
        break;
      pos = next.to + 1;
    }
    return Decoration.set(deco);
  }
  updateDeco() {
    let i2 = 1;
    let allDeco = this.view.state.facet(decorations).map((d2) => {
      let dynamic = this.dynamicDecorationMap[i2++] = typeof d2 == "function";
      return dynamic ? d2(this.view) : d2;
    });
    let dynamicOuter = false, outerDeco = this.view.state.facet(outerDecorations).map((d2, i3) => {
      let dynamic = typeof d2 == "function";
      if (dynamic)
        dynamicOuter = true;
      return dynamic ? d2(this.view) : d2;
    });
    if (outerDeco.length) {
      this.dynamicDecorationMap[i2++] = dynamicOuter;
      allDeco.push(RangeSet.join(outerDeco));
    }
    this.decorations = [
      this.editContextFormatting,
      ...allDeco,
      this.computeBlockGapDeco(),
      this.view.viewState.lineGapDeco
    ];
    while (i2 < this.decorations.length)
      this.dynamicDecorationMap[i2++] = false;
    return this.decorations;
  }
  scrollIntoView(target) {
    if (target.isSnapshot) {
      let ref = this.view.viewState.lineBlockAt(target.range.head);
      this.view.scrollDOM.scrollTop = ref.top - target.yMargin;
      this.view.scrollDOM.scrollLeft = target.xMargin;
      return;
    }
    for (let handler of this.view.state.facet(scrollHandler)) {
      try {
        if (handler(this.view, target.range, target))
          return true;
      } catch (e25) {
        logException(this.view.state, e25, "scroll handler");
      }
    }
    let { range } = target;
    let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
    if (!rect)
      return;
    if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
      rect = {
        left: Math.min(rect.left, other.left),
        top: Math.min(rect.top, other.top),
        right: Math.max(rect.right, other.right),
        bottom: Math.max(rect.bottom, other.bottom)
      };
    let margins = getScrollMargins(this.view);
    let targetRect = {
      left: rect.left - margins.left,
      top: rect.top - margins.top,
      right: rect.right + margins.right,
      bottom: rect.bottom + margins.bottom
    };
    let { offsetWidth, offsetHeight } = this.view.scrollDOM;
    scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == Direction.LTR);
  }
};
function betweenUneditable(pos) {
  return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
}
var BlockGapWidget = class extends WidgetType {
  constructor(height) {
    super();
    this.height = height;
  }
  toDOM() {
    let elt2 = document.createElement("div");
    elt2.className = "cm-gap";
    this.updateDOM(elt2);
    return elt2;
  }
  eq(other) {
    return other.height == this.height;
  }
  updateDOM(elt2) {
    elt2.style.height = this.height + "px";
    return true;
  }
  get editable() {
    return true;
  }
  get estimatedHeight() {
    return this.height;
  }
  ignoreEvent() {
    return false;
  }
};
function findCompositionNode(view, headPos) {
  let sel = view.observer.selectionRange;
  if (!sel.focusNode)
    return null;
  let textBefore = textNodeBefore(sel.focusNode, sel.focusOffset);
  let textAfter = textNodeAfter(sel.focusNode, sel.focusOffset);
  let textNode = textBefore || textAfter;
  if (textAfter && textBefore && textAfter.node != textBefore.node) {
    let descAfter = ContentView.get(textAfter.node);
    if (!descAfter || descAfter instanceof TextView && descAfter.text != textAfter.node.nodeValue) {
      textNode = textAfter;
    } else if (view.docView.lastCompositionAfterCursor) {
      let descBefore = ContentView.get(textBefore.node);
      if (!(!descBefore || descBefore instanceof TextView && descBefore.text != textBefore.node.nodeValue))
        textNode = textAfter;
    }
  }
  view.docView.lastCompositionAfterCursor = textNode != textBefore;
  if (!textNode)
    return null;
  let from = headPos - textNode.offset;
  return { from, to: from + textNode.node.nodeValue.length, node: textNode.node };
}
function findCompositionRange(view, changes, headPos) {
  let found = findCompositionNode(view, headPos);
  if (!found)
    return null;
  let { node: textNode, from, to: to2 } = found, text = textNode.nodeValue;
  if (/[\n\r]/.test(text))
    return null;
  if (view.state.doc.sliceString(found.from, found.to) != text)
    return null;
  let inv = changes.invertedDesc;
  let range = new ChangedRange(inv.mapPos(from), inv.mapPos(to2), from, to2);
  let marks2 = [];
  for (let parent = textNode.parentNode; ; parent = parent.parentNode) {
    let parentView = ContentView.get(parent);
    if (parentView instanceof MarkView)
      marks2.push({ node: parent, deco: parentView.mark });
    else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view.contentDOM)
      return { range, text: textNode, marks: marks2, line: parent };
    else if (parent != view.contentDOM)
      marks2.push({ node: parent, deco: new MarkDecoration({
        inclusive: true,
        attributes: getAttrs(parent),
        tagName: parent.tagName.toLowerCase()
      }) });
    else
      return null;
  }
}
function nextToUneditable(node, offset) {
  if (node.nodeType != 1)
    return 0;
  return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 : 0) | (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 : 0);
}
var DecorationComparator$1 = class DecorationComparator {
  constructor() {
    this.changes = [];
  }
  compareRange(from, to2) {
    addRange(from, to2, this.changes);
  }
  comparePoint(from, to2) {
    addRange(from, to2, this.changes);
  }
};
function findChangedDeco(a2, b2, diff) {
  let comp = new DecorationComparator$1();
  RangeSet.compare(a2, b2, diff, comp);
  return comp.changes;
}
function inUneditable(node, inside2) {
  for (let cur2 = node; cur2 && cur2 != inside2; cur2 = cur2.assignedSlot || cur2.parentNode) {
    if (cur2.nodeType == 1 && cur2.contentEditable == "false") {
      return true;
    }
  }
  return false;
}
function touchesComposition(changes, composition) {
  let touched = false;
  if (composition)
    changes.iterChangedRanges((from, to2) => {
      if (from < composition.to && to2 > composition.from)
        touched = true;
    });
  return touched;
}
function groupAt(state, pos, bias = 1) {
  let categorize = state.charCategorizer(pos);
  let line = state.doc.lineAt(pos), linePos = pos - line.from;
  if (line.length == 0)
    return EditorSelection.cursor(pos);
  if (linePos == 0)
    bias = 1;
  else if (linePos == line.length)
    bias = -1;
  let from = linePos, to2 = linePos;
  if (bias < 0)
    from = findClusterBreak(line.text, linePos, false);
  else
    to2 = findClusterBreak(line.text, linePos);
  let cat = categorize(line.text.slice(from, to2));
  while (from > 0) {
    let prev = findClusterBreak(line.text, from, false);
    if (categorize(line.text.slice(prev, from)) != cat)
      break;
    from = prev;
  }
  while (to2 < line.length) {
    let next = findClusterBreak(line.text, to2);
    if (categorize(line.text.slice(to2, next)) != cat)
      break;
    to2 = next;
  }
  return EditorSelection.range(from + line.from, to2 + line.from);
}
function getdx(x2, rect) {
  return rect.left > x2 ? rect.left - x2 : Math.max(0, x2 - rect.right);
}
function getdy(y2, rect) {
  return rect.top > y2 ? rect.top - y2 : Math.max(0, y2 - rect.bottom);
}
function yOverlap(a2, b2) {
  return a2.top < b2.bottom - 1 && a2.bottom > b2.top + 1;
}
function upTop(rect, top2) {
  return top2 < rect.top ? { top: top2, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
}
function upBot(rect, bottom) {
  return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
}
function domPosAtCoords(parent, x2, y2) {
  let closest, closestRect, closestX, closestY, closestOverlap = false;
  let above, below, aboveRect, belowRect;
  for (let child = parent.firstChild; child; child = child.nextSibling) {
    let rects = clientRectsFor(child);
    for (let i2 = 0; i2 < rects.length; i2++) {
      let rect = rects[i2];
      if (closestRect && yOverlap(closestRect, rect))
        rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
      let dx2 = getdx(x2, rect), dy2 = getdy(y2, rect);
      if (dx2 == 0 && dy2 == 0)
        return child.nodeType == 3 ? domPosInText(child, x2, y2) : domPosAtCoords(child, x2, y2);
      if (!closest || closestY > dy2 || closestY == dy2 && closestX > dx2) {
        closest = child;
        closestRect = rect;
        closestX = dx2;
        closestY = dy2;
        let side = dy2 ? y2 < rect.top ? -1 : 1 : dx2 ? x2 < rect.left ? -1 : 1 : 0;
        closestOverlap = !side || (side > 0 ? i2 < rects.length - 1 : i2 > 0);
      }
      if (dx2 == 0) {
        if (y2 > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
          above = child;
          aboveRect = rect;
        } else if (y2 < rect.top && (!belowRect || belowRect.top > rect.top)) {
          below = child;
          belowRect = rect;
        }
      } else if (aboveRect && yOverlap(aboveRect, rect)) {
        aboveRect = upBot(aboveRect, rect.bottom);
      } else if (belowRect && yOverlap(belowRect, rect)) {
        belowRect = upTop(belowRect, rect.top);
      }
    }
  }
  if (aboveRect && aboveRect.bottom >= y2) {
    closest = above;
    closestRect = aboveRect;
  } else if (belowRect && belowRect.top <= y2) {
    closest = below;
    closestRect = belowRect;
  }
  if (!closest)
    return { node: parent, offset: 0 };
  let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x2));
  if (closest.nodeType == 3)
    return domPosInText(closest, clipX, y2);
  if (closestOverlap && closest.contentEditable != "false")
    return domPosAtCoords(closest, clipX, y2);
  let offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x2 >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
  return { node: parent, offset };
}
function domPosInText(node, x2, y2) {
  let len = node.nodeValue.length;
  let closestOffset = -1, closestDY = 1e9, generalSide = 0;
  for (let i2 = 0; i2 < len; i2++) {
    let rects = textRange(node, i2, i2 + 1).getClientRects();
    for (let j2 = 0; j2 < rects.length; j2++) {
      let rect = rects[j2];
      if (rect.top == rect.bottom)
        continue;
      if (!generalSide)
        generalSide = x2 - rect.left;
      let dy2 = (rect.top > y2 ? rect.top - y2 : y2 - rect.bottom) - 1;
      if (rect.left - 1 <= x2 && rect.right + 1 >= x2 && dy2 < closestDY) {
        let right = x2 >= (rect.left + rect.right) / 2, after = right;
        if (browser.chrome || browser.gecko) {
          let rectBefore = textRange(node, i2).getBoundingClientRect();
          if (rectBefore.left == rect.right)
            after = !right;
        }
        if (dy2 <= 0)
          return { node, offset: i2 + (after ? 1 : 0) };
        closestOffset = i2 + (after ? 1 : 0);
        closestDY = dy2;
      }
    }
  }
  return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
}
function posAtCoords(view, coords, precise, bias = -1) {
  var _a3, _b2;
  let content2 = view.contentDOM.getBoundingClientRect(), docTop = content2.top + view.viewState.paddingTop;
  let block, { docHeight } = view.viewState;
  let { x: x2, y: y2 } = coords, yOffset = y2 - docTop;
  if (yOffset < 0)
    return 0;
  if (yOffset > docHeight)
    return view.state.doc.length;
  for (let halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false; ; ) {
    block = view.elementAtHeight(yOffset);
    if (block.type == BlockType.Text)
      break;
    for (; ; ) {
      yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
      if (yOffset >= 0 && yOffset <= docHeight)
        break;
      if (bounced)
        return precise ? null : 0;
      bounced = true;
      bias = -bias;
    }
  }
  y2 = docTop + yOffset;
  let lineStart = block.from;
  if (lineStart < view.viewport.from)
    return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content2, block, x2, y2);
  if (lineStart > view.viewport.to)
    return view.viewport.to == view.state.doc.length ? view.state.doc.length : precise ? null : posAtCoordsImprecise(view, content2, block, x2, y2);
  let doc2 = view.dom.ownerDocument;
  let root = view.root.elementFromPoint ? view.root : doc2;
  let element = root.elementFromPoint(x2, y2);
  if (element && !view.contentDOM.contains(element))
    element = null;
  if (!element) {
    x2 = Math.max(content2.left + 1, Math.min(content2.right - 1, x2));
    element = root.elementFromPoint(x2, y2);
    if (element && !view.contentDOM.contains(element))
      element = null;
  }
  let node, offset = -1;
  if (element && ((_a3 = view.docView.nearest(element)) === null || _a3 === void 0 ? void 0 : _a3.isEditable) != false) {
    if (doc2.caretPositionFromPoint) {
      let pos = doc2.caretPositionFromPoint(x2, y2);
      if (pos)
        ({ offsetNode: node, offset } = pos);
    } else if (doc2.caretRangeFromPoint) {
      let range = doc2.caretRangeFromPoint(x2, y2);
      if (range) {
        ({ startContainer: node, startOffset: offset } = range);
        if (!view.contentDOM.contains(node) || browser.safari && isSuspiciousSafariCaretResult(node, offset, x2) || browser.chrome && isSuspiciousChromeCaretResult(node, offset, x2))
          node = void 0;
      }
    }
  }
  if (!node || !view.docView.dom.contains(node)) {
    let line = LineView.find(view.docView, lineStart);
    if (!line)
      return yOffset > block.top + block.height / 2 ? block.to : block.from;
    ({ node, offset } = domPosAtCoords(line.dom, x2, y2));
  }
  let nearest = view.docView.nearest(node);
  if (!nearest)
    return null;
  if (nearest.isWidget && ((_b2 = nearest.dom) === null || _b2 === void 0 ? void 0 : _b2.nodeType) == 1) {
    let rect = nearest.dom.getBoundingClientRect();
    return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2 ? nearest.posAtStart : nearest.posAtEnd;
  } else {
    return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
  }
}
function posAtCoordsImprecise(view, contentRect, block, x2, y2) {
  let into = Math.round((x2 - contentRect.left) * view.defaultCharacterWidth);
  if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
    let textHeight = view.viewState.heightOracle.textHeight;
    let line = Math.floor((y2 - block.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);
    into += line * view.viewState.heightOracle.lineLength;
  }
  let content2 = view.state.sliceDoc(block.from, block.to);
  return block.from + findColumn(content2, into, view.state.tabSize);
}
function isSuspiciousSafariCaretResult(node, offset, x2) {
  let len;
  if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
    return false;
  for (let next = node.nextSibling; next; next = next.nextSibling)
    if (next.nodeType != 1 || next.nodeName != "BR")
      return false;
  return textRange(node, len - 1, len).getBoundingClientRect().left > x2;
}
function isSuspiciousChromeCaretResult(node, offset, x2) {
  if (offset != 0)
    return false;
  for (let cur2 = node; ; ) {
    let parent = cur2.parentNode;
    if (!parent || parent.nodeType != 1 || parent.firstChild != cur2)
      return false;
    if (parent.classList.contains("cm-line"))
      break;
    cur2 = parent;
  }
  let rect = node.nodeType == 1 ? node.getBoundingClientRect() : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
  return x2 - rect.left > 5;
}
function blockAt(view, pos) {
  let line = view.lineBlockAt(pos);
  if (Array.isArray(line.type))
    for (let l2 of line.type) {
      if (l2.to > pos || l2.to == pos && (l2.to == line.to || l2.type == BlockType.Text))
        return l2;
    }
  return line;
}
function moveToLineBoundary(view, start, forward, includeWrap) {
  let line = blockAt(view, start.head);
  let coords = !includeWrap || line.type != BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
  if (coords) {
    let editorRect = view.dom.getBoundingClientRect();
    let direction = view.textDirectionAt(line.from);
    let pos = view.posAtCoords({
      x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
      y: (coords.top + coords.bottom) / 2
    });
    if (pos != null)
      return EditorSelection.cursor(pos, forward ? -1 : 1);
  }
  return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);
}
function moveByChar(view, start, forward, by2) {
  let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
  let direction = view.textDirectionAt(line.from);
  for (let cur2 = start, check = null; ; ) {
    let next = moveVisually(line, spans, direction, cur2, forward), char = movedOver;
    if (!next) {
      if (line.number == (forward ? view.state.doc.lines : 1))
        return cur2;
      char = "\n";
      line = view.state.doc.line(line.number + (forward ? 1 : -1));
      spans = view.bidiSpans(line);
      next = view.visualLineSide(line, !forward);
    }
    if (!check) {
      if (!by2)
        return next;
      check = by2(char);
    } else if (!check(char)) {
      return cur2;
    }
    cur2 = next;
  }
}
function byGroup(view, pos, start) {
  let categorize = view.state.charCategorizer(pos);
  let cat = categorize(start);
  return (next) => {
    let nextCat = categorize(next);
    if (cat == CharCategory.Space)
      cat = nextCat;
    return cat == nextCat;
  };
}
function moveVertically(view, start, forward, distance) {
  let startPos = start.head, dir = forward ? 1 : -1;
  if (startPos == (forward ? view.state.doc.length : 0))
    return EditorSelection.cursor(startPos, start.assoc);
  let goal = start.goalColumn, startY;
  let rect = view.contentDOM.getBoundingClientRect();
  let startCoords = view.coordsAtPos(startPos, start.assoc || -1), docTop = view.documentTop;
  if (startCoords) {
    if (goal == null)
      goal = startCoords.left - rect.left;
    startY = dir < 0 ? startCoords.top : startCoords.bottom;
  } else {
    let line = view.viewState.lineBlockAt(startPos);
    if (goal == null)
      goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
    startY = (dir < 0 ? line.top : line.bottom) + docTop;
  }
  let resolvedGoal = rect.left + goal;
  let dist2 = distance !== null && distance !== void 0 ? distance : view.viewState.heightOracle.textHeight >> 1;
  for (let extra = 0; ; extra += 10) {
    let curY = startY + (dist2 + extra) * dir;
    let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
    if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) {
      let charRect = view.docView.coordsForChar(pos);
      let assoc = !charRect || curY < charRect.top ? -1 : 1;
      return EditorSelection.cursor(pos, assoc, void 0, goal);
    }
  }
}
function skipAtomicRanges(atoms, pos, bias) {
  for (; ; ) {
    let moved = 0;
    for (let set of atoms) {
      set.between(pos - 1, pos + 1, (from, to2, value) => {
        if (pos > from && pos < to2) {
          let side = moved || bias || (pos - from < to2 - pos ? -1 : 1);
          pos = side < 0 ? from : to2;
          moved = side;
        }
      });
    }
    if (!moved)
      return pos;
  }
}
function skipAtoms(view, oldPos, pos) {
  let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map((f2) => f2(view)), pos.from, oldPos.head > pos.from ? -1 : 1);
  return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
}
var InputState = class {
  setSelectionOrigin(origin) {
    this.lastSelectionOrigin = origin;
    this.lastSelectionTime = Date.now();
  }
  constructor(view) {
    this.view = view;
    this.lastKeyCode = 0;
    this.lastKeyTime = 0;
    this.lastTouchTime = 0;
    this.lastFocusTime = 0;
    this.lastScrollTop = 0;
    this.lastScrollLeft = 0;
    this.pendingIOSKey = void 0;
    this.tabFocusMode = -1;
    this.lastSelectionOrigin = null;
    this.lastSelectionTime = 0;
    this.lastContextMenu = 0;
    this.scrollHandlers = [];
    this.handlers = /* @__PURE__ */ Object.create(null);
    this.composing = -1;
    this.compositionFirstChange = null;
    this.compositionEndedAt = 0;
    this.compositionPendingKey = false;
    this.compositionPendingChange = false;
    this.mouseSelection = null;
    this.draggedContent = null;
    this.handleEvent = this.handleEvent.bind(this);
    this.notifiedFocused = view.hasFocus;
    if (browser.safari)
      view.contentDOM.addEventListener("input", () => null);
    if (browser.gecko)
      firefoxCopyCutHack(view.contentDOM.ownerDocument);
  }
  handleEvent(event) {
    if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event))
      return;
    if (event.type == "keydown" && this.keydown(event))
      return;
    this.runHandlers(event.type, event);
  }
  runHandlers(type, event) {
    let handlers2 = this.handlers[type];
    if (handlers2) {
      for (let observer of handlers2.observers)
        observer(this.view, event);
      for (let handler of handlers2.handlers) {
        if (event.defaultPrevented)
          break;
        if (handler(this.view, event)) {
          event.preventDefault();
          break;
        }
      }
    }
  }
  ensureHandlers(plugins) {
    let handlers2 = computeHandlers(plugins), prev = this.handlers, dom = this.view.contentDOM;
    for (let type in handlers2)
      if (type != "scroll") {
        let passive = !handlers2[type].handlers.length;
        let exists = prev[type];
        if (exists && passive != !exists.handlers.length) {
          dom.removeEventListener(type, this.handleEvent);
          exists = null;
        }
        if (!exists)
          dom.addEventListener(type, this.handleEvent, { passive });
      }
    for (let type in prev)
      if (type != "scroll" && !handlers2[type])
        dom.removeEventListener(type, this.handleEvent);
    this.handlers = handlers2;
  }
  keydown(event) {
    this.lastKeyCode = event.keyCode;
    this.lastKeyTime = Date.now();
    if (event.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode))
      return true;
    if (this.tabFocusMode > 0 && event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
      this.tabFocusMode = -1;
    if (browser.android && browser.chrome && !event.synthetic && (event.keyCode == 13 || event.keyCode == 8)) {
      this.view.observer.delayAndroidKey(event.key, event.keyCode);
      return true;
    }
    let pending;
    if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey && ((pending = PendingKeys.find((key) => key.keyCode == event.keyCode)) && !event.ctrlKey || EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
      this.pendingIOSKey = pending || event;
      setTimeout(() => this.flushIOSKey(), 250);
      return true;
    }
    if (event.keyCode != 229)
      this.view.observer.forceFlush();
    return false;
  }
  flushIOSKey(change) {
    let key = this.pendingIOSKey;
    if (!key)
      return false;
    if (key.key == "Enter" && change && change.from < change.to && /^\S+$/.test(change.insert.toString()))
      return false;
    this.pendingIOSKey = void 0;
    return dispatchKey(this.view.contentDOM, key.key, key.keyCode, key instanceof KeyboardEvent ? key : void 0);
  }
  ignoreDuringComposition(event) {
    if (!/^key/.test(event.type))
      return false;
    if (this.composing > 0)
      return true;
    if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
      this.compositionPendingKey = false;
      return true;
    }
    return false;
  }
  startMouseSelection(mouseSelection) {
    if (this.mouseSelection)
      this.mouseSelection.destroy();
    this.mouseSelection = mouseSelection;
  }
  update(update) {
    this.view.observer.update(update);
    if (this.mouseSelection)
      this.mouseSelection.update(update);
    if (this.draggedContent && update.docChanged)
      this.draggedContent = this.draggedContent.map(update.changes);
    if (update.transactions.length)
      this.lastKeyCode = this.lastSelectionTime = 0;
  }
  destroy() {
    if (this.mouseSelection)
      this.mouseSelection.destroy();
  }
};
function bindHandler(plugin, handler) {
  return (view, event) => {
    try {
      return handler.call(plugin, event, view);
    } catch (e25) {
      logException(view.state, e25);
    }
  };
}
function computeHandlers(plugins) {
  let result = /* @__PURE__ */ Object.create(null);
  function record(type) {
    return result[type] || (result[type] = { observers: [], handlers: [] });
  }
  for (let plugin of plugins) {
    let spec = plugin.spec;
    if (spec && spec.domEventHandlers)
      for (let type in spec.domEventHandlers) {
        let f2 = spec.domEventHandlers[type];
        if (f2)
          record(type).handlers.push(bindHandler(plugin.value, f2));
      }
    if (spec && spec.domEventObservers)
      for (let type in spec.domEventObservers) {
        let f2 = spec.domEventObservers[type];
        if (f2)
          record(type).observers.push(bindHandler(plugin.value, f2));
      }
  }
  for (let type in handlers)
    record(type).handlers.push(handlers[type]);
  for (let type in observers)
    record(type).observers.push(observers[type]);
  return result;
}
var PendingKeys = [
  { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
  { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
  { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
  { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
];
var EmacsyPendingKeys = "dthko";
var modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
var dragScrollMargin = 6;
function dragScrollSpeed(dist2) {
  return Math.max(0, dist2) * 0.7 + 8;
}
function dist(a2, b2) {
  return Math.max(Math.abs(a2.clientX - b2.clientX), Math.abs(a2.clientY - b2.clientY));
}
var MouseSelection = class {
  constructor(view, startEvent, style, mustSelect) {
    this.view = view;
    this.startEvent = startEvent;
    this.style = style;
    this.mustSelect = mustSelect;
    this.scrollSpeed = { x: 0, y: 0 };
    this.scrolling = -1;
    this.lastEvent = startEvent;
    this.scrollParents = scrollableParents(view.contentDOM);
    this.atoms = view.state.facet(atomicRanges).map((f2) => f2(view));
    let doc2 = view.contentDOM.ownerDocument;
    doc2.addEventListener("mousemove", this.move = this.move.bind(this));
    doc2.addEventListener("mouseup", this.up = this.up.bind(this));
    this.extend = startEvent.shiftKey;
    this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
    this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
  }
  start(event) {
    if (this.dragging === false)
      this.select(event);
  }
  move(event) {
    if (event.buttons == 0)
      return this.destroy();
    if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10)
      return;
    this.select(this.lastEvent = event);
    let sx2 = 0, sy2 = 0;
    let left = 0, top2 = 0, right = this.view.win.innerWidth, bottom = this.view.win.innerHeight;
    if (this.scrollParents.x)
      ({ left, right } = this.scrollParents.x.getBoundingClientRect());
    if (this.scrollParents.y)
      ({ top: top2, bottom } = this.scrollParents.y.getBoundingClientRect());
    let margins = getScrollMargins(this.view);
    if (event.clientX - margins.left <= left + dragScrollMargin)
      sx2 = -dragScrollSpeed(left - event.clientX);
    else if (event.clientX + margins.right >= right - dragScrollMargin)
      sx2 = dragScrollSpeed(event.clientX - right);
    if (event.clientY - margins.top <= top2 + dragScrollMargin)
      sy2 = -dragScrollSpeed(top2 - event.clientY);
    else if (event.clientY + margins.bottom >= bottom - dragScrollMargin)
      sy2 = dragScrollSpeed(event.clientY - bottom);
    this.setScrollSpeed(sx2, sy2);
  }
  up(event) {
    if (this.dragging == null)
      this.select(this.lastEvent);
    if (!this.dragging)
      event.preventDefault();
    this.destroy();
  }
  destroy() {
    this.setScrollSpeed(0, 0);
    let doc2 = this.view.contentDOM.ownerDocument;
    doc2.removeEventListener("mousemove", this.move);
    doc2.removeEventListener("mouseup", this.up);
    this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
  }
  setScrollSpeed(sx2, sy2) {
    this.scrollSpeed = { x: sx2, y: sy2 };
    if (sx2 || sy2) {
      if (this.scrolling < 0)
        this.scrolling = setInterval(() => this.scroll(), 50);
    } else if (this.scrolling > -1) {
      clearInterval(this.scrolling);
      this.scrolling = -1;
    }
  }
  scroll() {
    let { x: x2, y: y2 } = this.scrollSpeed;
    if (x2 && this.scrollParents.x) {
      this.scrollParents.x.scrollLeft += x2;
      x2 = 0;
    }
    if (y2 && this.scrollParents.y) {
      this.scrollParents.y.scrollTop += y2;
      y2 = 0;
    }
    if (x2 || y2)
      this.view.win.scrollBy(x2, y2);
    if (this.dragging === false)
      this.select(this.lastEvent);
  }
  skipAtoms(sel) {
    let ranges = null;
    for (let i2 = 0; i2 < sel.ranges.length; i2++) {
      let range = sel.ranges[i2], updated = null;
      if (range.empty) {
        let pos = skipAtomicRanges(this.atoms, range.from, 0);
        if (pos != range.from)
          updated = EditorSelection.cursor(pos, -1);
      } else {
        let from = skipAtomicRanges(this.atoms, range.from, -1);
        let to2 = skipAtomicRanges(this.atoms, range.to, 1);
        if (from != range.from || to2 != range.to)
          updated = EditorSelection.range(range.from == range.anchor ? from : to2, range.from == range.head ? from : to2);
      }
      if (updated) {
        if (!ranges)
          ranges = sel.ranges.slice();
        ranges[i2] = updated;
      }
    }
    return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
  }
  select(event) {
    let { view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
    if (this.mustSelect || !selection.eq(view.state.selection, this.dragging === false))
      this.view.dispatch({
        selection,
        userEvent: "select.pointer"
      });
    this.mustSelect = false;
  }
  update(update) {
    if (update.transactions.some((tr2) => tr2.isUserEvent("input.type")))
      this.destroy();
    else if (this.style.update(update))
      setTimeout(() => this.select(this.lastEvent), 20);
  }
};
function addsSelectionRange(view, event) {
  let facet = view.state.facet(clickAddsSelectionRange);
  return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
}
function dragMovesSelection(view, event) {
  let facet = view.state.facet(dragMovesSelection$1);
  return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
}
function isInPrimarySelection(view, event) {
  let { main } = view.state.selection;
  if (main.empty)
    return false;
  let sel = getSelection(view.root);
  if (!sel || sel.rangeCount == 0)
    return true;
  let rects = sel.getRangeAt(0).getClientRects();
  for (let i2 = 0; i2 < rects.length; i2++) {
    let rect = rects[i2];
    if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY)
      return true;
  }
  return false;
}
function eventBelongsToEditor(view, event) {
  if (!event.bubbles)
    return true;
  if (event.defaultPrevented)
    return false;
  for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
    if (!node || node.nodeType == 11 || (cView = ContentView.get(node)) && cView.ignoreEvent(event))
      return false;
  return true;
}
var handlers = /* @__PURE__ */ Object.create(null);
var observers = /* @__PURE__ */ Object.create(null);
var brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;
function capturePaste(view) {
  let parent = view.dom.parentNode;
  if (!parent)
    return;
  let target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.focus();
  setTimeout(() => {
    view.focus();
    target.remove();
    doPaste(view, target.value);
  }, 50);
}
function doPaste(view, input) {
  let { state } = view, changes, i2 = 1, text = state.toText(input);
  let byLine = text.lines == state.selection.ranges.length;
  let linewise = lastLinewiseCopy != null && state.selection.ranges.every((r2) => r2.empty) && lastLinewiseCopy == text.toString();
  if (linewise) {
    let lastLine = -1;
    changes = state.changeByRange((range) => {
      let line = state.doc.lineAt(range.from);
      if (line.from == lastLine)
        return { range };
      lastLine = line.from;
      let insert2 = state.toText((byLine ? text.line(i2++).text : input) + state.lineBreak);
      return {
        changes: { from: line.from, insert: insert2 },
        range: EditorSelection.cursor(range.from + insert2.length)
      };
    });
  } else if (byLine) {
    changes = state.changeByRange((range) => {
      let line = text.line(i2++);
      return {
        changes: { from: range.from, to: range.to, insert: line.text },
        range: EditorSelection.cursor(range.from + line.length)
      };
    });
  } else {
    changes = state.replaceSelection(text);
  }
  view.dispatch(changes, {
    userEvent: "input.paste",
    scrollIntoView: true
  });
}
observers.scroll = (view) => {
  view.inputState.lastScrollTop = view.scrollDOM.scrollTop;
  view.inputState.lastScrollLeft = view.scrollDOM.scrollLeft;
};
handlers.keydown = (view, event) => {
  view.inputState.setSelectionOrigin("select");
  if (event.keyCode == 27 && view.inputState.tabFocusMode != 0)
    view.inputState.tabFocusMode = Date.now() + 2e3;
  return false;
};
observers.touchstart = (view, e25) => {
  view.inputState.lastTouchTime = Date.now();
  view.inputState.setSelectionOrigin("select.pointer");
};
observers.touchmove = (view) => {
  view.inputState.setSelectionOrigin("select.pointer");
};
handlers.mousedown = (view, event) => {
  view.observer.flush();
  if (view.inputState.lastTouchTime > Date.now() - 2e3)
    return false;
  let style = null;
  for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
    style = makeStyle(view, event);
    if (style)
      break;
  }
  if (!style && event.button == 0)
    style = basicMouseSelection(view, event);
  if (style) {
    let mustFocus = !view.hasFocus;
    view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
    if (mustFocus)
      view.observer.ignore(() => {
        focusPreventScroll(view.contentDOM);
        let active = view.root.activeElement;
        if (active && !active.contains(view.contentDOM))
          active.blur();
      });
    let mouseSel = view.inputState.mouseSelection;
    if (mouseSel) {
      mouseSel.start(event);
      return mouseSel.dragging === false;
    }
  }
  return false;
};
function rangeForClick(view, pos, bias, type) {
  if (type == 1) {
    return EditorSelection.cursor(pos, bias);
  } else if (type == 2) {
    return groupAt(view.state, pos, bias);
  } else {
    let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
    let from = visual ? visual.posAtStart : line.from, to2 = visual ? visual.posAtEnd : line.to;
    if (to2 < view.state.doc.length && to2 == line.to)
      to2++;
    return EditorSelection.range(from, to2);
  }
}
var inside = (x2, y2, rect) => y2 >= rect.top && y2 <= rect.bottom && x2 >= rect.left && x2 <= rect.right;
function findPositionSide(view, pos, x2, y2) {
  let line = LineView.find(view.docView, pos);
  if (!line)
    return 1;
  let off2 = pos - line.posAtStart;
  if (off2 == 0)
    return 1;
  if (off2 == line.length)
    return -1;
  let before = line.coordsAt(off2, -1);
  if (before && inside(x2, y2, before))
    return -1;
  let after = line.coordsAt(off2, 1);
  if (after && inside(x2, y2, after))
    return 1;
  return before && before.bottom >= y2 ? -1 : 1;
}
function queryPos(view, event) {
  let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
  return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
}
var BadMouseDetail = browser.ie && browser.ie_version <= 11;
var lastMouseDown = null;
var lastMouseDownCount = 0;
var lastMouseDownTime = 0;
function getClickType(event) {
  if (!BadMouseDetail)
    return event.detail;
  let last = lastMouseDown, lastTime = lastMouseDownTime;
  lastMouseDown = event;
  lastMouseDownTime = Date.now();
  return lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
}
function basicMouseSelection(view, event) {
  let start = queryPos(view, event), type = getClickType(event);
  let startSel = view.state.selection;
  return {
    update(update) {
      if (update.docChanged) {
        start.pos = update.changes.mapPos(start.pos);
        startSel = startSel.map(update.changes);
      }
    },
    get(event2, extend2, multiple) {
      let cur2 = queryPos(view, event2), removed;
      let range = rangeForClick(view, cur2.pos, cur2.bias, type);
      if (start.pos != cur2.pos && !extend2) {
        let startRange = rangeForClick(view, start.pos, start.bias, type);
        let from = Math.min(startRange.from, range.from), to2 = Math.max(startRange.to, range.to);
        range = from < range.from ? EditorSelection.range(from, to2) : EditorSelection.range(to2, from);
      }
      if (extend2)
        return startSel.replaceRange(startSel.main.extend(range.from, range.to));
      else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur2.pos)))
        return removed;
      else if (multiple)
        return startSel.addRange(range);
      else
        return EditorSelection.create([range]);
    }
  };
}
function removeRangeAround(sel, pos) {
  for (let i2 = 0; i2 < sel.ranges.length; i2++) {
    let { from, to: to2 } = sel.ranges[i2];
    if (from <= pos && to2 >= pos)
      return EditorSelection.create(sel.ranges.slice(0, i2).concat(sel.ranges.slice(i2 + 1)), sel.mainIndex == i2 ? 0 : sel.mainIndex - (sel.mainIndex > i2 ? 1 : 0));
  }
  return null;
}
handlers.dragstart = (view, event) => {
  let { selection: { main: range } } = view.state;
  if (event.target.draggable) {
    let cView = view.docView.nearest(event.target);
    if (cView && cView.isWidget) {
      let from = cView.posAtStart, to2 = from + cView.length;
      if (from >= range.to || to2 <= range.from)
        range = EditorSelection.range(from, to2);
    }
  }
  let { inputState } = view;
  if (inputState.mouseSelection)
    inputState.mouseSelection.dragging = true;
  inputState.draggedContent = range;
  if (event.dataTransfer) {
    event.dataTransfer.setData("Text", view.state.sliceDoc(range.from, range.to));
    event.dataTransfer.effectAllowed = "copyMove";
  }
  return false;
};
handlers.dragend = (view) => {
  view.inputState.draggedContent = null;
  return false;
};
function dropText(view, event, text, direct) {
  if (!text)
    return;
  let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
  let { draggedContent } = view.inputState;
  let del = direct && draggedContent && dragMovesSelection(view, event) ? { from: draggedContent.from, to: draggedContent.to } : null;
  let ins = { from: dropPos, insert: text };
  let changes = view.state.changes(del ? [del, ins] : ins);
  view.focus();
  view.dispatch({
    changes,
    selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
    userEvent: del ? "move.drop" : "input.drop"
  });
  view.inputState.draggedContent = null;
}
handlers.drop = (view, event) => {
  if (!event.dataTransfer)
    return false;
  if (view.state.readOnly)
    return true;
  let files = event.dataTransfer.files;
  if (files && files.length) {
    let text = Array(files.length), read = 0;
    let finishFile = () => {
      if (++read == files.length)
        dropText(view, event, text.filter((s2) => s2 != null).join(view.state.lineBreak), false);
    };
    for (let i2 = 0; i2 < files.length; i2++) {
      let reader = new FileReader();
      reader.onerror = finishFile;
      reader.onload = () => {
        if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
          text[i2] = reader.result;
        finishFile();
      };
      reader.readAsText(files[i2]);
    }
    return true;
  } else {
    let text = event.dataTransfer.getData("Text");
    if (text) {
      dropText(view, event, text, true);
      return true;
    }
  }
  return false;
};
handlers.paste = (view, event) => {
  if (view.state.readOnly)
    return true;
  view.observer.flush();
  let data2 = brokenClipboardAPI ? null : event.clipboardData;
  if (data2) {
    doPaste(view, data2.getData("text/plain") || data2.getData("text/uri-list"));
    return true;
  } else {
    capturePaste(view);
    return false;
  }
};
function captureCopy(view, text) {
  let parent = view.dom.parentNode;
  if (!parent)
    return;
  let target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.value = text;
  target.focus();
  target.selectionEnd = text.length;
  target.selectionStart = 0;
  setTimeout(() => {
    target.remove();
    view.focus();
  }, 50);
}
function copiedRange(state) {
  let content2 = [], ranges = [], linewise = false;
  for (let range of state.selection.ranges)
    if (!range.empty) {
      content2.push(state.sliceDoc(range.from, range.to));
      ranges.push(range);
    }
  if (!content2.length) {
    let upto = -1;
    for (let { from } of state.selection.ranges) {
      let line = state.doc.lineAt(from);
      if (line.number > upto) {
        content2.push(line.text);
        ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
      }
      upto = line.number;
    }
    linewise = true;
  }
  return { text: content2.join(state.lineBreak), ranges, linewise };
}
var lastLinewiseCopy = null;
handlers.copy = handlers.cut = (view, event) => {
  let { text, ranges, linewise } = copiedRange(view.state);
  if (!text && !linewise)
    return false;
  lastLinewiseCopy = linewise ? text : null;
  if (event.type == "cut" && !view.state.readOnly)
    view.dispatch({
      changes: ranges,
      scrollIntoView: true,
      userEvent: "delete.cut"
    });
  let data2 = brokenClipboardAPI ? null : event.clipboardData;
  if (data2) {
    data2.clearData();
    data2.setData("text/plain", text);
    return true;
  } else {
    captureCopy(view, text);
    return false;
  }
};
var isFocusChange = /* @__PURE__ */ Annotation.define();
function focusChangeTransaction(state, focus) {
  let effects = [];
  for (let getEffect of state.facet(focusChangeEffect)) {
    let effect = getEffect(state, focus);
    if (effect)
      effects.push(effect);
  }
  return effects ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
}
function updateForFocusChange(view) {
  setTimeout(() => {
    let focus = view.hasFocus;
    if (focus != view.inputState.notifiedFocused) {
      let tr2 = focusChangeTransaction(view.state, focus);
      if (tr2)
        view.dispatch(tr2);
      else
        view.update([]);
    }
  }, 10);
}
observers.focus = (view) => {
  view.inputState.lastFocusTime = Date.now();
  if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
    view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
    view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
  }
  updateForFocusChange(view);
};
observers.blur = (view) => {
  view.observer.clearSelectionRange();
  updateForFocusChange(view);
};
observers.compositionstart = observers.compositionupdate = (view) => {
  if (view.observer.editContext)
    return;
  if (view.inputState.compositionFirstChange == null)
    view.inputState.compositionFirstChange = true;
  if (view.inputState.composing < 0) {
    view.inputState.composing = 0;
  }
};
observers.compositionend = (view) => {
  if (view.observer.editContext)
    return;
  view.inputState.composing = -1;
  view.inputState.compositionEndedAt = Date.now();
  view.inputState.compositionPendingKey = true;
  view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
  view.inputState.compositionFirstChange = null;
  if (browser.chrome && browser.android) {
    view.observer.flushSoon();
  } else if (view.inputState.compositionPendingChange) {
    Promise.resolve().then(() => view.observer.flush());
  } else {
    setTimeout(() => {
      if (view.inputState.composing < 0 && view.docView.hasComposition)
        view.update([]);
    }, 50);
  }
};
observers.contextmenu = (view) => {
  view.inputState.lastContextMenu = Date.now();
};
handlers.beforeinput = (view, event) => {
  var _a3;
  let pending;
  if (browser.chrome && browser.android && (pending = PendingKeys.find((key) => key.inputType == event.inputType))) {
    view.observer.delayAndroidKey(pending.key, pending.keyCode);
    if (pending.key == "Backspace" || pending.key == "Delete") {
      let startViewHeight = ((_a3 = window.visualViewport) === null || _a3 === void 0 ? void 0 : _a3.height) || 0;
      setTimeout(() => {
        var _a4;
        if ((((_a4 = window.visualViewport) === null || _a4 === void 0 ? void 0 : _a4.height) || 0) > startViewHeight + 10 && view.hasFocus) {
          view.contentDOM.blur();
          view.focus();
        }
      }, 100);
    }
  }
  if (browser.ios && event.inputType == "deleteContentForward") {
    view.observer.flushSoon();
  }
  if (browser.safari && event.inputType == "insertText" && view.inputState.composing >= 0) {
    setTimeout(() => observers.compositionend(view, event), 20);
  }
  return false;
};
var appliedFirefoxHack = /* @__PURE__ */ new Set();
function firefoxCopyCutHack(doc2) {
  if (!appliedFirefoxHack.has(doc2)) {
    appliedFirefoxHack.add(doc2);
    doc2.addEventListener("copy", () => {
    });
    doc2.addEventListener("cut", () => {
    });
  }
}
var wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
var heightChangeFlag = false;
function clearHeightChangeFlag() {
  heightChangeFlag = false;
}
var HeightOracle = class {
  constructor(lineWrapping) {
    this.lineWrapping = lineWrapping;
    this.doc = Text.empty;
    this.heightSamples = {};
    this.lineHeight = 14;
    this.charWidth = 7;
    this.textHeight = 14;
    this.lineLength = 30;
  }
  heightForGap(from, to2) {
    let lines = this.doc.lineAt(to2).number - this.doc.lineAt(from).number + 1;
    if (this.lineWrapping)
      lines += Math.max(0, Math.ceil((to2 - from - lines * this.lineLength * 0.5) / this.lineLength));
    return this.lineHeight * lines;
  }
  heightForLine(length) {
    if (!this.lineWrapping)
      return this.lineHeight;
    let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
    return lines * this.lineHeight;
  }
  setDoc(doc2) {
    this.doc = doc2;
    return this;
  }
  mustRefreshForWrapping(whiteSpace) {
    return wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping;
  }
  mustRefreshForHeights(lineHeights) {
    let newHeight = false;
    for (let i2 = 0; i2 < lineHeights.length; i2++) {
      let h2 = lineHeights[i2];
      if (h2 < 0) {
        i2++;
      } else if (!this.heightSamples[Math.floor(h2 * 10)]) {
        newHeight = true;
        this.heightSamples[Math.floor(h2 * 10)] = true;
      }
    }
    return newHeight;
  }
  refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
    let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
    let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
    this.lineWrapping = lineWrapping;
    this.lineHeight = lineHeight;
    this.charWidth = charWidth;
    this.textHeight = textHeight;
    this.lineLength = lineLength;
    if (changed) {
      this.heightSamples = {};
      for (let i2 = 0; i2 < knownHeights.length; i2++) {
        let h2 = knownHeights[i2];
        if (h2 < 0)
          i2++;
        else
          this.heightSamples[Math.floor(h2 * 10)] = true;
      }
    }
    return changed;
  }
};
var MeasuredHeights = class {
  constructor(from, heights) {
    this.from = from;
    this.heights = heights;
    this.index = 0;
  }
  get more() {
    return this.index < this.heights.length;
  }
};
var BlockInfo = class _BlockInfo {
  /**
  @internal
  */
  constructor(from, length, top2, height, _content) {
    this.from = from;
    this.length = length;
    this.top = top2;
    this.height = height;
    this._content = _content;
  }
  /**
  The type of element this is. When querying lines, this may be
  an array of all the blocks that make up the line.
  */
  get type() {
    return typeof this._content == "number" ? BlockType.Text : Array.isArray(this._content) ? this._content : this._content.type;
  }
  /**
  The end of the element as a document position.
  */
  get to() {
    return this.from + this.length;
  }
  /**
  The bottom position of the element.
  */
  get bottom() {
    return this.top + this.height;
  }
  /**
  If this is a widget block, this will return the widget
  associated with it.
  */
  get widget() {
    return this._content instanceof PointDecoration ? this._content.widget : null;
  }
  /**
  If this is a textblock, this holds the number of line breaks
  that appear in widgets inside the block.
  */
  get widgetLineBreaks() {
    return typeof this._content == "number" ? this._content : 0;
  }
  /**
  @internal
  */
  join(other) {
    let content2 = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(other._content) ? other._content : [other]);
    return new _BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content2);
  }
};
var QueryType = /* @__PURE__ */ function(QueryType3) {
  QueryType3[QueryType3["ByPos"] = 0] = "ByPos";
  QueryType3[QueryType3["ByHeight"] = 1] = "ByHeight";
  QueryType3[QueryType3["ByPosNoHeight"] = 2] = "ByPosNoHeight";
  return QueryType3;
}(QueryType || (QueryType = {}));
var Epsilon = 1e-3;
var HeightMap = class _HeightMap {
  constructor(length, height, flags = 2) {
    this.length = length;
    this.height = height;
    this.flags = flags;
  }
  get outdated() {
    return (this.flags & 2) > 0;
  }
  set outdated(value) {
    this.flags = (value ? 2 : 0) | this.flags & ~2;
  }
  setHeight(height) {
    if (this.height != height) {
      if (Math.abs(this.height - height) > Epsilon)
        heightChangeFlag = true;
      this.height = height;
    }
  }
  // Base case is to replace a leaf node, which simply builds a tree
  // from the new nodes and returns that (HeightMapBranch and
  // HeightMapGap override this to actually use from/to)
  replace(_from, _to, nodes) {
    return _HeightMap.of(nodes);
  }
  // Again, these are base cases, and are overridden for branch and gap nodes.
  decomposeLeft(_to, result) {
    result.push(this);
  }
  decomposeRight(_from, result) {
    result.push(this);
  }
  applyChanges(decorations2, oldDoc, oracle, changes) {
    let me2 = this, doc2 = oracle.doc;
    for (let i2 = changes.length - 1; i2 >= 0; i2--) {
      let { fromA, toA, fromB, toB } = changes[i2];
      let start = me2.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
      let end = start.to >= toA ? start : me2.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
      toB += end.to - toA;
      toA = end.to;
      while (i2 > 0 && start.from <= changes[i2 - 1].toA) {
        fromA = changes[i2 - 1].fromA;
        fromB = changes[i2 - 1].fromB;
        i2--;
        if (fromA < start.from)
          start = me2.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
      }
      fromB += start.from - fromA;
      fromA = start.from;
      let nodes = NodeBuilder.build(oracle.setDoc(doc2), decorations2, fromB, toB);
      me2 = replace(me2, me2.replace(fromA, toA, nodes));
    }
    return me2.updateHeight(oracle, 0);
  }
  static empty() {
    return new HeightMapText(0, 0);
  }
  // nodes uses null values to indicate the position of line breaks.
  // There are never line breaks at the start or end of the array, or
  // two line breaks next to each other, and the array isn't allowed
  // to be empty (same restrictions as return value from the builder).
  static of(nodes) {
    if (nodes.length == 1)
      return nodes[0];
    let i2 = 0, j2 = nodes.length, before = 0, after = 0;
    for (; ; ) {
      if (i2 == j2) {
        if (before > after * 2) {
          let split = nodes[i2 - 1];
          if (split.break)
            nodes.splice(--i2, 1, split.left, null, split.right);
          else
            nodes.splice(--i2, 1, split.left, split.right);
          j2 += 1 + split.break;
          before -= split.size;
        } else if (after > before * 2) {
          let split = nodes[j2];
          if (split.break)
            nodes.splice(j2, 1, split.left, null, split.right);
          else
            nodes.splice(j2, 1, split.left, split.right);
          j2 += 2 + split.break;
          after -= split.size;
        } else {
          break;
        }
      } else if (before < after) {
        let next = nodes[i2++];
        if (next)
          before += next.size;
      } else {
        let next = nodes[--j2];
        if (next)
          after += next.size;
      }
    }
    let brk = 0;
    if (nodes[i2 - 1] == null) {
      brk = 1;
      i2--;
    } else if (nodes[i2] == null) {
      brk = 1;
      j2++;
    }
    return new HeightMapBranch(_HeightMap.of(nodes.slice(0, i2)), brk, _HeightMap.of(nodes.slice(j2)));
  }
};
function replace(old, val) {
  if (old == val)
    return old;
  if (old.constructor != val.constructor)
    heightChangeFlag = true;
  return val;
}
HeightMap.prototype.size = 1;
var HeightMapBlock = class extends HeightMap {
  constructor(length, height, deco) {
    super(length, height);
    this.deco = deco;
  }
  blockAt(_height, _oracle, top2, offset) {
    return new BlockInfo(offset, this.length, top2, this.height, this.deco || 0);
  }
  lineAt(_value, _type, oracle, top2, offset) {
    return this.blockAt(0, oracle, top2, offset);
  }
  forEachLine(from, to2, oracle, top2, offset, f2) {
    if (from <= offset + this.length && to2 >= offset)
      f2(this.blockAt(0, oracle, top2, offset));
  }
  updateHeight(oracle, offset = 0, _force = false, measured) {
    if (measured && measured.from <= offset && measured.more)
      this.setHeight(measured.heights[measured.index++]);
    this.outdated = false;
    return this;
  }
  toString() {
    return `block(${this.length})`;
  }
};
var HeightMapText = class _HeightMapText extends HeightMapBlock {
  constructor(length, height) {
    super(length, height, null);
    this.collapsed = 0;
    this.widgetHeight = 0;
    this.breaks = 0;
  }
  blockAt(_height, _oracle, top2, offset) {
    return new BlockInfo(offset, this.length, top2, this.height, this.breaks);
  }
  replace(_from, _to, nodes) {
    let node = nodes[0];
    if (nodes.length == 1 && (node instanceof _HeightMapText || node instanceof HeightMapGap && node.flags & 4) && Math.abs(this.length - node.length) < 10) {
      if (node instanceof HeightMapGap)
        node = new _HeightMapText(node.length, this.height);
      else
        node.height = this.height;
      if (!this.outdated)
        node.outdated = false;
      return node;
    } else {
      return HeightMap.of(nodes);
    }
  }
  updateHeight(oracle, offset = 0, force = false, measured) {
    if (measured && measured.from <= offset && measured.more)
      this.setHeight(measured.heights[measured.index++]);
    else if (force || this.outdated)
      this.setHeight(Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) + this.breaks * oracle.lineHeight);
    this.outdated = false;
    return this;
  }
  toString() {
    return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
  }
};
var HeightMapGap = class _HeightMapGap extends HeightMap {
  constructor(length) {
    super(length, 0);
  }
  heightMetrics(oracle, offset) {
    let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
    let lines = lastLine - firstLine + 1;
    let perLine, perChar = 0;
    if (oracle.lineWrapping) {
      let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
      perLine = totalPerLine / lines;
      if (this.length > lines + 1)
        perChar = (this.height - totalPerLine) / (this.length - lines - 1);
    } else {
      perLine = this.height / lines;
    }
    return { firstLine, lastLine, perLine, perChar };
  }
  blockAt(height, oracle, top2, offset) {
    let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
    if (oracle.lineWrapping) {
      let guess = offset + (height < oracle.lineHeight ? 0 : Math.round(Math.max(0, Math.min(1, (height - top2) / this.height)) * this.length));
      let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;
      let lineTop = Math.max(top2, height - lineHeight / 2);
      return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);
    } else {
      let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top2) / perLine)));
      let { from, length } = oracle.doc.line(firstLine + line);
      return new BlockInfo(from, length, top2 + perLine * line, perLine, 0);
    }
  }
  lineAt(value, type, oracle, top2, offset) {
    if (type == QueryType.ByHeight)
      return this.blockAt(value, oracle, top2, offset);
    if (type == QueryType.ByPosNoHeight) {
      let { from, to: to2 } = oracle.doc.lineAt(value);
      return new BlockInfo(from, to2 - from, 0, 0, 0);
    }
    let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
    let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;
    let linesAbove = line.number - firstLine;
    let lineTop = top2 + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
    return new BlockInfo(line.from, line.length, Math.max(top2, Math.min(lineTop, top2 + this.height - lineHeight)), lineHeight, 0);
  }
  forEachLine(from, to2, oracle, top2, offset, f2) {
    from = Math.max(from, offset);
    to2 = Math.min(to2, offset + this.length);
    let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
    for (let pos = from, lineTop = top2; pos <= to2; ) {
      let line = oracle.doc.lineAt(pos);
      if (pos == from) {
        let linesAbove = line.number - firstLine;
        lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
      }
      let lineHeight = perLine + perChar * line.length;
      f2(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));
      lineTop += lineHeight;
      pos = line.to + 1;
    }
  }
  replace(from, to2, nodes) {
    let after = this.length - to2;
    if (after > 0) {
      let last = nodes[nodes.length - 1];
      if (last instanceof _HeightMapGap)
        nodes[nodes.length - 1] = new _HeightMapGap(last.length + after);
      else
        nodes.push(null, new _HeightMapGap(after - 1));
    }
    if (from > 0) {
      let first = nodes[0];
      if (first instanceof _HeightMapGap)
        nodes[0] = new _HeightMapGap(from + first.length);
      else
        nodes.unshift(new _HeightMapGap(from - 1), null);
    }
    return HeightMap.of(nodes);
  }
  decomposeLeft(to2, result) {
    result.push(new _HeightMapGap(to2 - 1), null);
  }
  decomposeRight(from, result) {
    result.push(null, new _HeightMapGap(this.length - from - 1));
  }
  updateHeight(oracle, offset = 0, force = false, measured) {
    let end = offset + this.length;
    if (measured && measured.from <= offset + this.length && measured.more) {
      let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
      if (measured.from > offset)
        nodes.push(new _HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
      while (pos <= end && measured.more) {
        let len = oracle.doc.lineAt(pos).length;
        if (nodes.length)
          nodes.push(null);
        let height = measured.heights[measured.index++];
        if (singleHeight == -1)
          singleHeight = height;
        else if (Math.abs(height - singleHeight) >= Epsilon)
          singleHeight = -2;
        let line = new HeightMapText(len, height);
        line.outdated = false;
        nodes.push(line);
        pos += len + 1;
      }
      if (pos <= end)
        nodes.push(null, new _HeightMapGap(end - pos).updateHeight(oracle, pos));
      let result = HeightMap.of(nodes);
      if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon || Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)
        heightChangeFlag = true;
      return replace(this, result);
    } else if (force || this.outdated) {
      this.setHeight(oracle.heightForGap(offset, offset + this.length));
      this.outdated = false;
    }
    return this;
  }
  toString() {
    return `gap(${this.length})`;
  }
};
var HeightMapBranch = class extends HeightMap {
  constructor(left, brk, right) {
    super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 : 0));
    this.left = left;
    this.right = right;
    this.size = left.size + right.size;
  }
  get break() {
    return this.flags & 1;
  }
  blockAt(height, oracle, top2, offset) {
    let mid = top2 + this.left.height;
    return height < mid ? this.left.blockAt(height, oracle, top2, offset) : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
  }
  lineAt(value, type, oracle, top2, offset) {
    let rightTop = top2 + this.left.height, rightOffset = offset + this.left.length + this.break;
    let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
    let base2 = left ? this.left.lineAt(value, type, oracle, top2, offset) : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
    if (this.break || (left ? base2.to < rightOffset : base2.from > rightOffset))
      return base2;
    let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
    if (left)
      return base2.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
    else
      return this.left.lineAt(rightOffset, subQuery, oracle, top2, offset).join(base2);
  }
  forEachLine(from, to2, oracle, top2, offset, f2) {
    let rightTop = top2 + this.left.height, rightOffset = offset + this.left.length + this.break;
    if (this.break) {
      if (from < rightOffset)
        this.left.forEachLine(from, to2, oracle, top2, offset, f2);
      if (to2 >= rightOffset)
        this.right.forEachLine(from, to2, oracle, rightTop, rightOffset, f2);
    } else {
      let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top2, offset);
      if (from < mid.from)
        this.left.forEachLine(from, mid.from - 1, oracle, top2, offset, f2);
      if (mid.to >= from && mid.from <= to2)
        f2(mid);
      if (to2 > mid.to)
        this.right.forEachLine(mid.to + 1, to2, oracle, rightTop, rightOffset, f2);
    }
  }
  replace(from, to2, nodes) {
    let rightStart = this.left.length + this.break;
    if (to2 < rightStart)
      return this.balanced(this.left.replace(from, to2, nodes), this.right);
    if (from > this.left.length)
      return this.balanced(this.left, this.right.replace(from - rightStart, to2 - rightStart, nodes));
    let result = [];
    if (from > 0)
      this.decomposeLeft(from, result);
    let left = result.length;
    for (let node of nodes)
      result.push(node);
    if (from > 0)
      mergeGaps(result, left - 1);
    if (to2 < this.length) {
      let right = result.length;
      this.decomposeRight(to2, result);
      mergeGaps(result, right);
    }
    return HeightMap.of(result);
  }
  decomposeLeft(to2, result) {
    let left = this.left.length;
    if (to2 <= left)
      return this.left.decomposeLeft(to2, result);
    result.push(this.left);
    if (this.break) {
      left++;
      if (to2 >= left)
        result.push(null);
    }
    if (to2 > left)
      this.right.decomposeLeft(to2 - left, result);
  }
  decomposeRight(from, result) {
    let left = this.left.length, right = left + this.break;
    if (from >= right)
      return this.right.decomposeRight(from - right, result);
    if (from < left)
      this.left.decomposeRight(from, result);
    if (this.break && from < right)
      result.push(null);
    result.push(this.right);
  }
  balanced(left, right) {
    if (left.size > 2 * right.size || right.size > 2 * left.size)
      return HeightMap.of(this.break ? [left, null, right] : [left, right]);
    this.left = replace(this.left, left);
    this.right = replace(this.right, right);
    this.setHeight(left.height + right.height);
    this.outdated = left.outdated || right.outdated;
    this.size = left.size + right.size;
    this.length = left.length + this.break + right.length;
    return this;
  }
  updateHeight(oracle, offset = 0, force = false, measured) {
    let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
    if (measured && measured.from <= offset + left.length && measured.more)
      rebalance = left = left.updateHeight(oracle, offset, force, measured);
    else
      left.updateHeight(oracle, offset, force);
    if (measured && measured.from <= rightStart + right.length && measured.more)
      rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
    else
      right.updateHeight(oracle, rightStart, force);
    if (rebalance)
      return this.balanced(left, right);
    this.height = this.left.height + this.right.height;
    this.outdated = false;
    return this;
  }
  toString() {
    return this.left + (this.break ? " " : "-") + this.right;
  }
};
function mergeGaps(nodes, around) {
  let before, after;
  if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap)
    nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
}
var relevantWidgetHeight = 5;
var NodeBuilder = class _NodeBuilder {
  constructor(pos, oracle) {
    this.pos = pos;
    this.oracle = oracle;
    this.nodes = [];
    this.lineStart = -1;
    this.lineEnd = -1;
    this.covering = null;
    this.writtenTo = pos;
  }
  get isCovered() {
    return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
  }
  span(_from, to2) {
    if (this.lineStart > -1) {
      let end = Math.min(to2, this.lineEnd), last = this.nodes[this.nodes.length - 1];
      if (last instanceof HeightMapText)
        last.length += end - this.pos;
      else if (end > this.pos || !this.isCovered)
        this.nodes.push(new HeightMapText(end - this.pos, -1));
      this.writtenTo = end;
      if (to2 > end) {
        this.nodes.push(null);
        this.writtenTo++;
        this.lineStart = -1;
      }
    }
    this.pos = to2;
  }
  point(from, to2, deco) {
    if (from < to2 || deco.heightRelevant) {
      let height = deco.widget ? deco.widget.estimatedHeight : 0;
      let breaks = deco.widget ? deco.widget.lineBreaks : 0;
      if (height < 0)
        height = this.oracle.lineHeight;
      let len = to2 - from;
      if (deco.block) {
        this.addBlock(new HeightMapBlock(len, height, deco));
      } else if (len || breaks || height >= relevantWidgetHeight) {
        this.addLineDeco(height, breaks, len);
      }
    } else if (to2 > from) {
      this.span(from, to2);
    }
    if (this.lineEnd > -1 && this.lineEnd < this.pos)
      this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
  }
  enterLine() {
    if (this.lineStart > -1)
      return;
    let { from, to: to2 } = this.oracle.doc.lineAt(this.pos);
    this.lineStart = from;
    this.lineEnd = to2;
    if (this.writtenTo < from) {
      if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
        this.nodes.push(this.blankContent(this.writtenTo, from - 1));
      this.nodes.push(null);
    }
    if (this.pos > from)
      this.nodes.push(new HeightMapText(this.pos - from, -1));
    this.writtenTo = this.pos;
  }
  blankContent(from, to2) {
    let gap = new HeightMapGap(to2 - from);
    if (this.oracle.doc.lineAt(from).to == to2)
      gap.flags |= 4;
    return gap;
  }
  ensureLine() {
    this.enterLine();
    let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
    if (last instanceof HeightMapText)
      return last;
    let line = new HeightMapText(0, -1);
    this.nodes.push(line);
    return line;
  }
  addBlock(block) {
    this.enterLine();
    let deco = block.deco;
    if (deco && deco.startSide > 0 && !this.isCovered)
      this.ensureLine();
    this.nodes.push(block);
    this.writtenTo = this.pos = this.pos + block.length;
    if (deco && deco.endSide > 0)
      this.covering = block;
  }
  addLineDeco(height, breaks, length) {
    let line = this.ensureLine();
    line.length += length;
    line.collapsed += length;
    line.widgetHeight = Math.max(line.widgetHeight, height);
    line.breaks += breaks;
    this.writtenTo = this.pos = this.pos + length;
  }
  finish(from) {
    let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
    if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
      this.nodes.push(new HeightMapText(0, -1));
    else if (this.writtenTo < this.pos || last == null)
      this.nodes.push(this.blankContent(this.writtenTo, this.pos));
    let pos = from;
    for (let node of this.nodes) {
      if (node instanceof HeightMapText)
        node.updateHeight(this.oracle, pos);
      pos += node ? node.length : 1;
    }
    return this.nodes;
  }
  // Always called with a region that on both sides either stretches
  // to a line break or the end of the document.
  // The returned array uses null to indicate line breaks, but never
  // starts or ends in a line break, or has multiple line breaks next
  // to each other.
  static build(oracle, decorations2, from, to2) {
    let builder = new _NodeBuilder(from, oracle);
    RangeSet.spans(decorations2, from, to2, builder, 0);
    return builder.finish(from);
  }
};
function heightRelevantDecoChanges(a2, b2, diff) {
  let comp = new DecorationComparator2();
  RangeSet.compare(a2, b2, diff, comp, 0);
  return comp.changes;
}
var DecorationComparator2 = class {
  constructor() {
    this.changes = [];
  }
  compareRange() {
  }
  comparePoint(from, to2, a2, b2) {
    if (from < to2 || a2 && a2.heightRelevant || b2 && b2.heightRelevant)
      addRange(from, to2, this.changes, 5);
  }
};
function visiblePixelRange(dom, paddingTop) {
  let rect = dom.getBoundingClientRect();
  let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
  let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
  let top2 = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
  for (let parent = dom.parentNode; parent && parent != doc2.body; ) {
    if (parent.nodeType == 1) {
      let elt2 = parent;
      let style = window.getComputedStyle(elt2);
      if ((elt2.scrollHeight > elt2.clientHeight || elt2.scrollWidth > elt2.clientWidth) && style.overflow != "visible") {
        let parentRect = elt2.getBoundingClientRect();
        left = Math.max(left, parentRect.left);
        right = Math.min(right, parentRect.right);
        top2 = Math.max(top2, parentRect.top);
        bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);
      }
      parent = style.position == "absolute" || style.position == "fixed" ? elt2.offsetParent : elt2.parentNode;
    } else if (parent.nodeType == 11) {
      parent = parent.host;
    } else {
      break;
    }
  }
  return {
    left: left - rect.left,
    right: Math.max(left, right) - rect.left,
    top: top2 - (rect.top + paddingTop),
    bottom: Math.max(top2, bottom) - (rect.top + paddingTop)
  };
}
function fullPixelRange(dom, paddingTop) {
  let rect = dom.getBoundingClientRect();
  return {
    left: 0,
    right: rect.right - rect.left,
    top: paddingTop,
    bottom: rect.bottom - (rect.top + paddingTop)
  };
}
var LineGap = class {
  constructor(from, to2, size) {
    this.from = from;
    this.to = to2;
    this.size = size;
  }
  static same(a2, b2) {
    if (a2.length != b2.length)
      return false;
    for (let i2 = 0; i2 < a2.length; i2++) {
      let gA2 = a2[i2], gB2 = b2[i2];
      if (gA2.from != gB2.from || gA2.to != gB2.to || gA2.size != gB2.size)
        return false;
    }
    return true;
  }
  draw(viewState, wrapping) {
    return Decoration.replace({
      widget: new LineGapWidget(this.size * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
    }).range(this.from, this.to);
  }
};
var LineGapWidget = class extends WidgetType {
  constructor(size, vertical) {
    super();
    this.size = size;
    this.vertical = vertical;
  }
  eq(other) {
    return other.size == this.size && other.vertical == this.vertical;
  }
  toDOM() {
    let elt2 = document.createElement("div");
    if (this.vertical) {
      elt2.style.height = this.size + "px";
    } else {
      elt2.style.width = this.size + "px";
      elt2.style.height = "2px";
      elt2.style.display = "inline-block";
    }
    return elt2;
  }
  get estimatedHeight() {
    return this.vertical ? this.size : -1;
  }
};
var ViewState = class {
  constructor(state) {
    this.state = state;
    this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
    this.inView = true;
    this.paddingTop = 0;
    this.paddingBottom = 0;
    this.contentDOMWidth = 0;
    this.contentDOMHeight = 0;
    this.editorHeight = 0;
    this.editorWidth = 0;
    this.scrollTop = 0;
    this.scrolledToBottom = false;
    this.scaleX = 1;
    this.scaleY = 1;
    this.scrollAnchorPos = 0;
    this.scrollAnchorHeight = -1;
    this.scaler = IdScaler;
    this.scrollTarget = null;
    this.printing = false;
    this.mustMeasureContent = true;
    this.defaultTextDirection = Direction.LTR;
    this.visibleRanges = [];
    this.mustEnforceCursorAssoc = false;
    let guessWrapping = state.facet(contentAttributes).some((v2) => typeof v2 != "function" && v2.class == "cm-lineWrapping");
    this.heightOracle = new HeightOracle(guessWrapping);
    this.stateDeco = state.facet(decorations).filter((d2) => typeof d2 != "function");
    this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
    for (let i2 = 0; i2 < 2; i2++) {
      this.viewport = this.getViewport(0, null);
      if (!this.updateForViewport())
        break;
    }
    this.updateViewportLines();
    this.lineGaps = this.ensureLineGaps([]);
    this.lineGapDeco = Decoration.set(this.lineGaps.map((gap) => gap.draw(this, false)));
    this.computeVisibleRanges();
  }
  updateForViewport() {
    let viewports = [this.viewport], { main } = this.state.selection;
    for (let i2 = 0; i2 <= 1; i2++) {
      let pos = i2 ? main.head : main.anchor;
      if (!viewports.some(({ from, to: to2 }) => pos >= from && pos <= to2)) {
        let { from, to: to2 } = this.lineBlockAt(pos);
        viewports.push(new Viewport(from, to2));
      }
    }
    this.viewports = viewports.sort((a2, b2) => a2.from - b2.from);
    return this.updateScaler();
  }
  updateScaler() {
    let scaler = this.scaler;
    this.scaler = this.heightMap.height <= 7e6 ? IdScaler : new BigScaler(this.heightOracle, this.heightMap, this.viewports);
    return scaler.eq(this.scaler) ? 0 : 2;
  }
  updateViewportLines() {
    this.viewportLines = [];
    this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (block) => {
      this.viewportLines.push(scaleBlock(block, this.scaler));
    });
  }
  update(update, scrollTarget = null) {
    this.state = update.state;
    let prevDeco = this.stateDeco;
    this.stateDeco = this.state.facet(decorations).filter((d2) => typeof d2 != "function");
    let contentChanges = update.changedRanges;
    let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
    let prevHeight = this.heightMap.height;
    let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
    clearHeightChangeFlag();
    this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
    if (this.heightMap.height != prevHeight || heightChangeFlag)
      update.flags |= 2;
    if (scrollAnchor) {
      this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);
      this.scrollAnchorHeight = scrollAnchor.top;
    } else {
      this.scrollAnchorPos = -1;
      this.scrollAnchorHeight = this.heightMap.height;
    }
    let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
    if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) || !this.viewportIsAppropriate(viewport))
      viewport = this.getViewport(0, scrollTarget);
    let viewportChange = viewport.from != this.viewport.from || viewport.to != this.viewport.to;
    this.viewport = viewport;
    update.flags |= this.updateForViewport();
    if (viewportChange || !update.changes.empty || update.flags & 2)
      this.updateViewportLines();
    if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
      this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
    update.flags |= this.computeVisibleRanges();
    if (scrollTarget)
      this.scrollTarget = scrollTarget;
    if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping && update.state.selection.main.empty && update.state.selection.main.assoc && !update.state.facet(nativeSelectionHidden))
      this.mustEnforceCursorAssoc = true;
  }
  measure(view) {
    let dom = view.contentDOM, style = window.getComputedStyle(dom);
    let oracle = this.heightOracle;
    let whiteSpace = style.whiteSpace;
    this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
    let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
    let domRect = dom.getBoundingClientRect();
    let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
    this.contentDOMHeight = domRect.height;
    this.mustMeasureContent = false;
    let result = 0, bias = 0;
    if (domRect.width && domRect.height) {
      let { scaleX, scaleY } = getScale(dom, domRect);
      if (scaleX > 5e-3 && Math.abs(this.scaleX - scaleX) > 5e-3 || scaleY > 5e-3 && Math.abs(this.scaleY - scaleY) > 5e-3) {
        this.scaleX = scaleX;
        this.scaleY = scaleY;
        result |= 8;
        refresh = measureContent = true;
      }
    }
    let paddingTop = (parseInt(style.paddingTop) || 0) * this.scaleY;
    let paddingBottom = (parseInt(style.paddingBottom) || 0) * this.scaleY;
    if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
      this.paddingTop = paddingTop;
      this.paddingBottom = paddingBottom;
      result |= 8 | 2;
    }
    if (this.editorWidth != view.scrollDOM.clientWidth) {
      if (oracle.lineWrapping)
        measureContent = true;
      this.editorWidth = view.scrollDOM.clientWidth;
      result |= 8;
    }
    let scrollTop = view.scrollDOM.scrollTop * this.scaleY;
    if (this.scrollTop != scrollTop) {
      this.scrollAnchorHeight = -1;
      this.scrollTop = scrollTop;
    }
    this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);
    let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
    let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
    this.pixelViewport = pixelViewport;
    let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
    if (inView != this.inView) {
      this.inView = inView;
      if (inView)
        measureContent = true;
    }
    if (!this.inView && !this.scrollTarget)
      return 0;
    let contentWidth = domRect.width;
    if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
      this.contentDOMWidth = domRect.width;
      this.editorHeight = view.scrollDOM.clientHeight;
      result |= 8;
    }
    if (measureContent) {
      let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
      if (oracle.mustRefreshForHeights(lineHeights))
        refresh = true;
      if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
        let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
        refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
        if (refresh) {
          view.docView.minWidth = 0;
          result |= 8;
        }
      }
      if (dTop > 0 && dBottom > 0)
        bias = Math.max(dTop, dBottom);
      else if (dTop < 0 && dBottom < 0)
        bias = Math.min(dTop, dBottom);
      clearHeightChangeFlag();
      for (let vp2 of this.viewports) {
        let heights = vp2.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp2);
        this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp2.from, heights));
      }
      if (heightChangeFlag)
        result |= 2;
    }
    let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
    if (viewportChange) {
      if (result & 2)
        result |= this.updateScaler();
      this.viewport = this.getViewport(bias, this.scrollTarget);
      result |= this.updateForViewport();
    }
    if (result & 2 || viewportChange)
      this.updateViewportLines();
    if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
      this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
    result |= this.computeVisibleRanges();
    if (this.mustEnforceCursorAssoc) {
      this.mustEnforceCursorAssoc = false;
      view.docView.enforceCursorAssoc();
    }
    return result;
  }
  get visibleTop() {
    return this.scaler.fromDOM(this.pixelViewport.top);
  }
  get visibleBottom() {
    return this.scaler.fromDOM(this.pixelViewport.bottom);
  }
  getViewport(bias, scrollTarget) {
    let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1e3 / 2));
    let map = this.heightMap, oracle = this.heightOracle;
    let { visibleTop, visibleBottom } = this;
    let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1e3, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1e3, QueryType.ByHeight, oracle, 0, 0).to);
    if (scrollTarget) {
      let { head } = scrollTarget.range;
      if (head < viewport.from || head > viewport.to) {
        let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
        let block = map.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;
        if (scrollTarget.y == "center")
          topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
        else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
          topPos = block.top;
        else
          topPos = block.bottom - viewHeight;
        viewport = new Viewport(map.lineAt(topPos - 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).to);
      }
    }
    return viewport;
  }
  mapViewport(viewport, changes) {
    let from = changes.mapPos(viewport.from, -1), to2 = changes.mapPos(viewport.to, 1);
    return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to2, QueryType.ByPos, this.heightOracle, 0, 0).to);
  }
  // Checks if a given viewport covers the visible part of the
  // document and not too much beyond that.
  viewportIsAppropriate({ from, to: to2 }, bias = 0) {
    if (!this.inView)
      return true;
    let { top: top2 } = this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0);
    let { bottom } = this.heightMap.lineAt(to2, QueryType.ByPos, this.heightOracle, 0, 0);
    let { visibleTop, visibleBottom } = this;
    return (from == 0 || top2 <= visibleTop - Math.max(10, Math.min(
      -bias,
      250
      /* VP.MaxCoverMargin */
    ))) && (to2 == this.state.doc.length || bottom >= visibleBottom + Math.max(10, Math.min(
      bias,
      250
      /* VP.MaxCoverMargin */
    ))) && (top2 > visibleTop - 2 * 1e3 && bottom < visibleBottom + 2 * 1e3);
  }
  mapLineGaps(gaps, changes) {
    if (!gaps.length || changes.empty)
      return gaps;
    let mapped = [];
    for (let gap of gaps)
      if (!changes.touchesRange(gap.from, gap.to))
        mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
    return mapped;
  }
  // Computes positions in the viewport where the start or end of a
  // line should be hidden, trying to reuse existing line gaps when
  // appropriate to avoid unneccesary redraws.
  // Uses crude character-counting for the positioning and sizing,
  // since actual DOM coordinates aren't always available and
  // predictable. Relies on generous margins (see LG.Margin) to hide
  // the artifacts this might produce from the user.
  ensureLineGaps(current, mayMeasure) {
    let wrapping = this.heightOracle.lineWrapping;
    let margin = wrapping ? 1e4 : 2e3, halfMargin = margin >> 1, doubleMargin = margin << 1;
    if (this.defaultTextDirection != Direction.LTR && !wrapping)
      return [];
    let gaps = [];
    let addGap = (from, to2, line, structure) => {
      if (to2 - from < halfMargin)
        return;
      let sel = this.state.selection.main, avoid = [sel.from];
      if (!sel.empty)
        avoid.push(sel.to);
      for (let pos of avoid) {
        if (pos > from && pos < to2) {
          addGap(from, pos - 10, line, structure);
          addGap(pos + 10, to2, line, structure);
          return;
        }
      }
      let gap = find(current, (gap2) => gap2.from >= line.from && gap2.to <= line.to && Math.abs(gap2.from - from) < halfMargin && Math.abs(gap2.to - to2) < halfMargin && !avoid.some((pos) => gap2.from < pos && gap2.to > pos));
      if (!gap) {
        if (to2 < line.to && mayMeasure && wrapping && mayMeasure.visibleRanges.some((r2) => r2.from <= to2 && r2.to >= to2)) {
          let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to2), false, true).head;
          if (lineStart > from)
            to2 = lineStart;
        }
        gap = new LineGap(from, to2, this.gapSize(line, from, to2, structure));
      }
      gaps.push(gap);
    };
    let checkLine = (line) => {
      if (line.length < doubleMargin || line.type != BlockType.Text)
        return;
      let structure = lineStructure(line.from, line.to, this.stateDeco);
      if (structure.total < doubleMargin)
        return;
      let target = this.scrollTarget ? this.scrollTarget.range.head : null;
      let viewFrom, viewTo;
      if (wrapping) {
        let marginHeight = margin / this.heightOracle.lineLength * this.heightOracle.lineHeight;
        let top2, bot;
        if (target != null) {
          let targetFrac = findFraction(structure, target);
          let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
          top2 = targetFrac - spaceFrac;
          bot = targetFrac + spaceFrac;
        } else {
          top2 = (this.visibleTop - line.top - marginHeight) / line.height;
          bot = (this.visibleBottom - line.top + marginHeight) / line.height;
        }
        viewFrom = findPosition(structure, top2);
        viewTo = findPosition(structure, bot);
      } else {
        let totalWidth = structure.total * this.heightOracle.charWidth;
        let marginWidth = margin * this.heightOracle.charWidth;
        let left, right;
        if (target != null) {
          let targetFrac = findFraction(structure, target);
          let spaceFrac = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + marginWidth) / totalWidth;
          left = targetFrac - spaceFrac;
          right = targetFrac + spaceFrac;
        } else {
          left = (this.pixelViewport.left - marginWidth) / totalWidth;
          right = (this.pixelViewport.right + marginWidth) / totalWidth;
        }
        viewFrom = findPosition(structure, left);
        viewTo = findPosition(structure, right);
      }
      if (viewFrom > line.from)
        addGap(line.from, viewFrom, line, structure);
      if (viewTo < line.to)
        addGap(viewTo, line.to, line, structure);
    };
    for (let line of this.viewportLines) {
      if (Array.isArray(line.type))
        line.type.forEach(checkLine);
      else
        checkLine(line);
    }
    return gaps;
  }
  gapSize(line, from, to2, structure) {
    let fraction = findFraction(structure, to2) - findFraction(structure, from);
    if (this.heightOracle.lineWrapping) {
      return line.height * fraction;
    } else {
      return structure.total * this.heightOracle.charWidth * fraction;
    }
  }
  updateLineGaps(gaps) {
    if (!LineGap.same(gaps, this.lineGaps)) {
      this.lineGaps = gaps;
      this.lineGapDeco = Decoration.set(gaps.map((gap) => gap.draw(this, this.heightOracle.lineWrapping)));
    }
  }
  computeVisibleRanges() {
    let deco = this.stateDeco;
    if (this.lineGaps.length)
      deco = deco.concat(this.lineGapDeco);
    let ranges = [];
    RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
      span(from, to2) {
        ranges.push({ from, to: to2 });
      },
      point() {
      }
    }, 20);
    let changed = ranges.length != this.visibleRanges.length || this.visibleRanges.some((r2, i2) => r2.from != ranges[i2].from || r2.to != ranges[i2].to);
    this.visibleRanges = ranges;
    return changed ? 4 : 0;
  }
  lineBlockAt(pos) {
    return pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find((b2) => b2.from <= pos && b2.to >= pos) || scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
  }
  lineBlockAtHeight(height) {
    return height >= this.viewportLines[0].top && height <= this.viewportLines[this.viewportLines.length - 1].bottom && this.viewportLines.find((l2) => l2.top <= height && l2.bottom >= height) || scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
  }
  scrollAnchorAt(scrollTop) {
    let block = this.lineBlockAtHeight(scrollTop + 8);
    return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];
  }
  elementAtHeight(height) {
    return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
  }
  get docHeight() {
    return this.scaler.toDOM(this.heightMap.height);
  }
  get contentHeight() {
    return this.docHeight + this.paddingTop + this.paddingBottom;
  }
};
var Viewport = class {
  constructor(from, to2) {
    this.from = from;
    this.to = to2;
  }
};
function lineStructure(from, to2, stateDeco) {
  let ranges = [], pos = from, total = 0;
  RangeSet.spans(stateDeco, from, to2, {
    span() {
    },
    point(from2, to3) {
      if (from2 > pos) {
        ranges.push({ from: pos, to: from2 });
        total += from2 - pos;
      }
      pos = to3;
    }
  }, 20);
  if (pos < to2) {
    ranges.push({ from: pos, to: to2 });
    total += to2 - pos;
  }
  return { total, ranges };
}
function findPosition({ total, ranges }, ratio) {
  if (ratio <= 0)
    return ranges[0].from;
  if (ratio >= 1)
    return ranges[ranges.length - 1].to;
  let dist2 = Math.floor(total * ratio);
  for (let i2 = 0; ; i2++) {
    let { from, to: to2 } = ranges[i2], size = to2 - from;
    if (dist2 <= size)
      return from + dist2;
    dist2 -= size;
  }
}
function findFraction(structure, pos) {
  let counted = 0;
  for (let { from, to: to2 } of structure.ranges) {
    if (pos <= to2) {
      counted += pos - from;
      break;
    }
    counted += to2 - from;
  }
  return counted / structure.total;
}
function find(array, f2) {
  for (let val of array)
    if (f2(val))
      return val;
  return void 0;
}
var IdScaler = {
  toDOM(n2) {
    return n2;
  },
  fromDOM(n2) {
    return n2;
  },
  scale: 1,
  eq(other) {
    return other == this;
  }
};
var BigScaler = class _BigScaler {
  constructor(oracle, heightMap, viewports) {
    let vpHeight = 0, base2 = 0, domBase = 0;
    this.viewports = viewports.map(({ from, to: to2 }) => {
      let top2 = heightMap.lineAt(from, QueryType.ByPos, oracle, 0, 0).top;
      let bottom = heightMap.lineAt(to2, QueryType.ByPos, oracle, 0, 0).bottom;
      vpHeight += bottom - top2;
      return { from, to: to2, top: top2, bottom, domTop: 0, domBottom: 0 };
    });
    this.scale = (7e6 - vpHeight) / (heightMap.height - vpHeight);
    for (let obj of this.viewports) {
      obj.domTop = domBase + (obj.top - base2) * this.scale;
      domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
      base2 = obj.bottom;
    }
  }
  toDOM(n2) {
    for (let i2 = 0, base2 = 0, domBase = 0; ; i2++) {
      let vp2 = i2 < this.viewports.length ? this.viewports[i2] : null;
      if (!vp2 || n2 < vp2.top)
        return domBase + (n2 - base2) * this.scale;
      if (n2 <= vp2.bottom)
        return vp2.domTop + (n2 - vp2.top);
      base2 = vp2.bottom;
      domBase = vp2.domBottom;
    }
  }
  fromDOM(n2) {
    for (let i2 = 0, base2 = 0, domBase = 0; ; i2++) {
      let vp2 = i2 < this.viewports.length ? this.viewports[i2] : null;
      if (!vp2 || n2 < vp2.domTop)
        return base2 + (n2 - domBase) / this.scale;
      if (n2 <= vp2.domBottom)
        return vp2.top + (n2 - vp2.domTop);
      base2 = vp2.bottom;
      domBase = vp2.domBottom;
    }
  }
  eq(other) {
    if (!(other instanceof _BigScaler))
      return false;
    return this.scale == other.scale && this.viewports.length == other.viewports.length && this.viewports.every((vp2, i2) => vp2.from == other.viewports[i2].from && vp2.to == other.viewports[i2].to);
  }
};
function scaleBlock(block, scaler) {
  if (scaler.scale == 1)
    return block;
  let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
  return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map((b2) => scaleBlock(b2, scaler)) : block._content);
}
var theme = /* @__PURE__ */ Facet.define({ combine: (strs) => strs.join(" ") });
var darkTheme = /* @__PURE__ */ Facet.define({ combine: (values2) => values2.indexOf(true) > -1 });
var baseThemeID = /* @__PURE__ */ StyleModule.newName();
var baseLightID = /* @__PURE__ */ StyleModule.newName();
var baseDarkID = /* @__PURE__ */ StyleModule.newName();
var lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
function buildTheme(main, spec, scopes) {
  return new StyleModule(spec, {
    finish(sel) {
      return /&/.test(sel) ? sel.replace(/&\w*/, (m2) => {
        if (m2 == "&")
          return main;
        if (!scopes || !scopes[m2])
          throw new RangeError(`Unsupported selector: ${m2}`);
        return scopes[m2];
      }) : main + " " + sel;
    }
  });
}
var baseTheme$1 = /* @__PURE__ */ buildTheme("." + baseThemeID, {
  "&": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      // Provide a simple default outline to make sure a focused
      // editor is visually distinct. Can't leave the default behavior
      // because that will apply to the content element, which is
      // inside the scrollable container and doesn't include the
      // gutters. We also can't use an 'auto' outline, since those
      // are, for some reason, drawn behind the element content, which
      // will cause things like the active line background to cover
      // the outline (#297).
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    flexShrink: 0,
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    // https://github.com/codemirror/dev/issues/456
    boxSizing: "border-box",
    minHeight: "100%",
    padding: "4px 0",
    outline: "none",
    "&[contenteditable=true]": {
      WebkitUserModify: "read-write-plaintext-only"
    }
  },
  ".cm-lineWrapping": {
    whiteSpace_fallback: "pre-wrap",
    // For IE
    whiteSpace: "break-spaces",
    wordBreak: "break-word",
    // For Safari, which doesn't support overflow-wrap: anywhere
    overflowWrap: "anywhere",
    flexShrink: 1
  },
  "&light .cm-content": { caretColor: "black" },
  "&dark .cm-content": { caretColor: "white" },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 6px"
  },
  ".cm-layer": {
    position: "absolute",
    left: 0,
    top: 0,
    contain: "size style",
    "& > *": {
      position: "absolute"
    }
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    pointerEvents: "none"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  // Two animations defined so that we can switch between them to
  // restart the animation without forcing another style
  // recomputation.
  "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  ".cm-cursor, .cm-dropCursor": {
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none"
  },
  ".cm-cursor": {
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#444"
  },
  ".cm-dropCursor": {
    position: "absolute"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
    display: "block"
  },
  ".cm-iso": {
    unicodeBidi: "isolate"
  },
  ".cm-announced": {
    position: "fixed",
    top: "-10000px"
  },
  "@media print": {
    ".cm-announced": { display: "none" }
  },
  "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
  "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
  "&light .cm-specialChar": { color: "red" },
  "&dark .cm-specialChar": { color: "#f78" },
  ".cm-gutters": {
    flexShrink: 0,
    display: "flex",
    height: "100%",
    boxSizing: "border-box",
    insetInlineStart: 0,
    zIndex: 200
  },
  "&light .cm-gutters": {
    backgroundColor: "#f5f5f5",
    color: "#6c6c6c",
    borderRight: "1px solid #ddd"
  },
  "&dark .cm-gutters": {
    backgroundColor: "#333338",
    color: "#ccc"
  },
  ".cm-gutter": {
    display: "flex !important",
    // Necessary -- prevents margin collapsing
    flexDirection: "column",
    flexShrink: 0,
    boxSizing: "border-box",
    minHeight: "100%",
    overflow: "hidden"
  },
  ".cm-gutterElement": {
    boxSizing: "border-box"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: "0 3px 0 5px",
    minWidth: "20px",
    textAlign: "right",
    whiteSpace: "nowrap"
  },
  "&light .cm-activeLineGutter": {
    backgroundColor: "#e2f2ff"
  },
  "&dark .cm-activeLineGutter": {
    backgroundColor: "#222227"
  },
  ".cm-panels": {
    boxSizing: "border-box",
    position: "sticky",
    left: 0,
    right: 0
  },
  "&light .cm-panels": {
    backgroundColor: "#f5f5f5",
    color: "black"
  },
  "&light .cm-panels-top": {
    borderBottom: "1px solid #ddd"
  },
  "&light .cm-panels-bottom": {
    borderTop: "1px solid #ddd"
  },
  "&dark .cm-panels": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-widgetBuffer": {
    verticalAlign: "text-top",
    height: "1em",
    width: 0,
    display: "inline"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block",
    verticalAlign: "top"
  },
  ".cm-highlightSpace:before": {
    content: "attr(data-display)",
    position: "absolute",
    pointerEvents: "none",
    color: "#888"
  },
  ".cm-highlightTab": {
    backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
    backgroundSize: "auto 100%",
    backgroundPosition: "right 90%",
    backgroundRepeat: "no-repeat"
  },
  ".cm-trailingSpace": {
    backgroundColor: "#ff332255"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "1px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, lightDarkIDs);
var LineBreakPlaceholder = "\uFFFF";
var DOMReader = class {
  constructor(points, state) {
    this.points = points;
    this.text = "";
    this.lineSeparator = state.facet(EditorState.lineSeparator);
  }
  append(text) {
    this.text += text;
  }
  lineBreak() {
    this.text += LineBreakPlaceholder;
  }
  readRange(start, end) {
    if (!start)
      return this;
    let parent = start.parentNode;
    for (let cur2 = start; ; ) {
      this.findPointBefore(parent, cur2);
      let oldLen = this.text.length;
      this.readNode(cur2);
      let next = cur2.nextSibling;
      if (next == end)
        break;
      let view = ContentView.get(cur2), nextView = ContentView.get(next);
      if (view && nextView ? view.breakAfter : (view ? view.breakAfter : isBlockElement(cur2)) || isBlockElement(next) && (cur2.nodeName != "BR" || cur2.cmIgnore) && this.text.length > oldLen)
        this.lineBreak();
      cur2 = next;
    }
    this.findPointBefore(parent, end);
    return this;
  }
  readTextNode(node) {
    let text = node.nodeValue;
    for (let point of this.points)
      if (point.node == node)
        point.pos = this.text.length + Math.min(point.offset, text.length);
    for (let off2 = 0, re2 = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
      let nextBreak = -1, breakSize = 1, m2;
      if (this.lineSeparator) {
        nextBreak = text.indexOf(this.lineSeparator, off2);
        breakSize = this.lineSeparator.length;
      } else if (m2 = re2.exec(text)) {
        nextBreak = m2.index;
        breakSize = m2[0].length;
      }
      this.append(text.slice(off2, nextBreak < 0 ? text.length : nextBreak));
      if (nextBreak < 0)
        break;
      this.lineBreak();
      if (breakSize > 1) {
        for (let point of this.points)
          if (point.node == node && point.pos > this.text.length)
            point.pos -= breakSize - 1;
      }
      off2 = nextBreak + breakSize;
    }
  }
  readNode(node) {
    if (node.cmIgnore)
      return;
    let view = ContentView.get(node);
    let fromView = view && view.overrideDOMText;
    if (fromView != null) {
      this.findPointInside(node, fromView.length);
      for (let i2 = fromView.iter(); !i2.next().done; ) {
        if (i2.lineBreak)
          this.lineBreak();
        else
          this.append(i2.value);
      }
    } else if (node.nodeType == 3) {
      this.readTextNode(node);
    } else if (node.nodeName == "BR") {
      if (node.nextSibling)
        this.lineBreak();
    } else if (node.nodeType == 1) {
      this.readRange(node.firstChild, null);
    }
  }
  findPointBefore(node, next) {
    for (let point of this.points)
      if (point.node == node && node.childNodes[point.offset] == next)
        point.pos = this.text.length;
  }
  findPointInside(node, length) {
    for (let point of this.points)
      if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
        point.pos = this.text.length + (isAtEnd(node, point.node, point.offset) ? length : 0);
  }
};
function isAtEnd(parent, node, offset) {
  for (; ; ) {
    if (!node || offset < maxOffset(node))
      return false;
    if (node == parent)
      return true;
    offset = domIndex(node) + 1;
    node = node.parentNode;
  }
}
var DOMPoint = class {
  constructor(node, offset) {
    this.node = node;
    this.offset = offset;
    this.pos = -1;
  }
};
var DOMChange = class {
  constructor(view, start, end, typeOver) {
    this.typeOver = typeOver;
    this.bounds = null;
    this.text = "";
    this.domChanged = start > -1;
    let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
    if (view.state.readOnly && start > -1) {
      this.newSel = null;
    } else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
      let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
      let reader = new DOMReader(selPoints, view.state);
      reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
      this.text = reader.text;
      this.newSel = selectionFromPoints(selPoints, this.bounds.from);
    } else {
      let domSel = view.observer.selectionRange;
      let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
      let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
      let vp2 = view.viewport;
      if ((browser.ios || browser.chrome) && view.state.selection.main.empty && head != anchor && (vp2.from > 0 || vp2.to < view.state.doc.length)) {
        let from = Math.min(head, anchor), to2 = Math.max(head, anchor);
        let offFrom = vp2.from - from, offTo = vp2.to - to2;
        if ((offFrom == 0 || offFrom == 1 || from == 0) && (offTo == 0 || offTo == -1 || to2 == view.state.doc.length)) {
          head = 0;
          anchor = view.state.doc.length;
        }
      }
      this.newSel = EditorSelection.single(anchor, head);
    }
  }
};
function applyDOMChange(view, domChange) {
  let change;
  let { newSel } = domChange, sel = view.state.selection.main;
  let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
  if (domChange.bounds) {
    let { from, to: to2 } = domChange.bounds;
    let preferredPos = sel.from, preferredSide = null;
    if (lastKey === 8 || browser.android && domChange.text.length < to2 - from) {
      preferredPos = sel.to;
      preferredSide = "end";
    }
    let diff = findDiff(view.state.doc.sliceString(from, to2, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
    if (diff) {
      if (browser.chrome && lastKey == 13 && diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
        diff.toB--;
      change = {
        from: from + diff.from,
        to: from + diff.toA,
        insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder))
      };
    }
  } else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
    newSel = null;
  }
  if (!change && !newSel)
    return false;
  if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
    change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
  } else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) {
    change = {
      from: sel.from,
      to: sel.to,
      insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
    };
  } else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 && /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
    if (newSel && change.insert.length == 2)
      newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
    change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
  } else if (browser.chrome && change && change.from == change.to && change.from == sel.head && change.insert.toString() == "\n " && view.lineWrapping) {
    if (newSel)
      newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
    change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
  }
  if (change) {
    return applyDOMChangeInner(view, change, newSel, lastKey);
  } else if (newSel && !newSel.main.eq(sel)) {
    let scrollIntoView3 = false, userEvent = "select";
    if (view.inputState.lastSelectionTime > Date.now() - 50) {
      if (view.inputState.lastSelectionOrigin == "select")
        scrollIntoView3 = true;
      userEvent = view.inputState.lastSelectionOrigin;
    }
    view.dispatch({ selection: newSel, scrollIntoView: scrollIntoView3, userEvent });
    return true;
  } else {
    return false;
  }
}
function applyDOMChangeInner(view, change, newSel, lastKey = -1) {
  if (browser.ios && view.inputState.flushIOSKey(change))
    return true;
  let sel = view.state.selection.main;
  if (browser.android && (change.to == sel.to && // GBoard will sometimes remove a space it just inserted
  // after a completion when you press enter
  (change.from == sel.from || change.from == sel.from - 1 && view.state.sliceDoc(change.from, sel.from) == " ") && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view.contentDOM, "Enter", 13) || (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 || lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) && dispatchKey(view.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view.contentDOM, "Delete", 46)))
    return true;
  let text = change.insert.toString();
  if (view.inputState.composing >= 0)
    view.inputState.composing++;
  let defaultTr;
  let defaultInsert = () => defaultTr || (defaultTr = applyDefaultInsert(view, change, newSel));
  if (!view.state.facet(inputHandler).some((h2) => h2(view, change.from, change.to, text, defaultInsert)))
    view.dispatch(defaultInsert());
  return true;
}
function applyDefaultInsert(view, change, newSel) {
  let tr2, startState = view.state, sel = startState.selection.main;
  if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) && view.inputState.composing < 0) {
    let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
    let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
    tr2 = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, void 0, view.state.lineBreak) + after));
  } else {
    let changes = startState.changes(change);
    let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : void 0;
    if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 && change.to <= sel.to && change.to >= sel.to - 10) {
      let replaced = view.state.sliceDoc(change.from, change.to);
      let compositionRange, composition = newSel && findCompositionNode(view, newSel.main.head);
      if (composition) {
        let dLen = change.insert.length - (change.to - change.from);
        compositionRange = { from: composition.from, to: composition.to - dLen };
      } else {
        compositionRange = view.state.doc.lineAt(sel.head);
      }
      let offset = sel.to - change.to, size = sel.to - sel.from;
      tr2 = startState.changeByRange((range) => {
        if (range.from == sel.from && range.to == sel.to)
          return { changes, range: mainSel || range.map(changes) };
        let to2 = range.to - offset, from = to2 - replaced.length;
        if (range.to - range.from != size || view.state.sliceDoc(from, to2) != replaced || // Unfortunately, there's no way to make multiple
        // changes in the same node work without aborting
        // composition, so cursors in the composition range are
        // ignored.
        range.to >= compositionRange.from && range.from <= compositionRange.to)
          return { range };
        let rangeChanges = startState.changes({ from, to: to2, insert: change.insert }), selOff = range.to - sel.to;
        return {
          changes: rangeChanges,
          range: !mainSel ? range.map(rangeChanges) : EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
        };
      });
    } else {
      tr2 = {
        changes,
        selection: mainSel && startState.selection.replaceRange(mainSel)
      };
    }
  }
  let userEvent = "input.type";
  if (view.composing || view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
    view.inputState.compositionPendingChange = false;
    userEvent += ".compose";
    if (view.inputState.compositionFirstChange) {
      userEvent += ".start";
      view.inputState.compositionFirstChange = false;
    }
  }
  return startState.update(tr2, { userEvent, scrollIntoView: true });
}
function findDiff(a2, b2, preferredPos, preferredSide) {
  let minLen = Math.min(a2.length, b2.length);
  let from = 0;
  while (from < minLen && a2.charCodeAt(from) == b2.charCodeAt(from))
    from++;
  if (from == minLen && a2.length == b2.length)
    return null;
  let toA = a2.length, toB = b2.length;
  while (toA > 0 && toB > 0 && a2.charCodeAt(toA - 1) == b2.charCodeAt(toB - 1)) {
    toA--;
    toB--;
  }
  if (preferredSide == "end") {
    let adjust = Math.max(0, from - Math.min(toA, toB));
    preferredPos -= toA + adjust - from;
  }
  if (toA < from && a2.length < b2.length) {
    let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
    from -= move;
    toB = from + (toB - toA);
    toA = from;
  } else if (toB < from) {
    let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
    from -= move;
    toA = from + (toA - toB);
    toB = from;
  }
  return { from, toA, toB };
}
function selectionPoints(view) {
  let result = [];
  if (view.root.activeElement != view.contentDOM)
    return result;
  let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
  if (anchorNode) {
    result.push(new DOMPoint(anchorNode, anchorOffset));
    if (focusNode != anchorNode || focusOffset != anchorOffset)
      result.push(new DOMPoint(focusNode, focusOffset));
  }
  return result;
}
function selectionFromPoints(points, base2) {
  if (points.length == 0)
    return null;
  let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
  return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base2, head + base2) : null;
}
var observeOptions = {
  childList: true,
  characterData: true,
  subtree: true,
  attributes: true,
  characterDataOldValue: true
};
var useCharData = browser.ie && browser.ie_version <= 11;
var DOMObserver = class {
  constructor(view) {
    this.view = view;
    this.active = false;
    this.editContext = null;
    this.selectionRange = new DOMSelectionState();
    this.selectionChanged = false;
    this.delayedFlush = -1;
    this.resizeTimeout = -1;
    this.queue = [];
    this.delayedAndroidKey = null;
    this.flushingAndroidKey = -1;
    this.lastChange = 0;
    this.scrollTargets = [];
    this.intersection = null;
    this.resizeScroll = null;
    this.intersecting = false;
    this.gapIntersection = null;
    this.gaps = [];
    this.printQuery = null;
    this.parentCheck = -1;
    this.dom = view.contentDOM;
    this.observer = new MutationObserver((mutations) => {
      for (let mut of mutations)
        this.queue.push(mut);
      if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) && mutations.some((m2) => m2.type == "childList" && m2.removedNodes.length || m2.type == "characterData" && m2.oldValue.length > m2.target.nodeValue.length))
        this.flushSoon();
      else
        this.flush();
    });
    if (window.EditContext && view.constructor.EDIT_CONTEXT !== false && // Chrome <126 doesn't support inverted selections in edit context (#1392)
    !(browser.chrome && browser.chrome_version < 126)) {
      this.editContext = new EditContextManager(view);
      if (view.state.facet(editable))
        view.contentDOM.editContext = this.editContext.editContext;
    }
    if (useCharData)
      this.onCharData = (event) => {
        this.queue.push({
          target: event.target,
          type: "characterData",
          oldValue: event.prevValue
        });
        this.flushSoon();
      };
    this.onSelectionChange = this.onSelectionChange.bind(this);
    this.onResize = this.onResize.bind(this);
    this.onPrint = this.onPrint.bind(this);
    this.onScroll = this.onScroll.bind(this);
    if (window.matchMedia)
      this.printQuery = window.matchMedia("print");
    if (typeof ResizeObserver == "function") {
      this.resizeScroll = new ResizeObserver(() => {
        var _a3;
        if (((_a3 = this.view.docView) === null || _a3 === void 0 ? void 0 : _a3.lastUpdate) < Date.now() - 75)
          this.onResize();
      });
      this.resizeScroll.observe(view.scrollDOM);
    }
    this.addWindowListeners(this.win = view.win);
    this.start();
    if (typeof IntersectionObserver == "function") {
      this.intersection = new IntersectionObserver((entries) => {
        if (this.parentCheck < 0)
          this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3);
        if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
          this.intersecting = !this.intersecting;
          if (this.intersecting != this.view.inView)
            this.onScrollChanged(document.createEvent("Event"));
        }
      }, { threshold: [0, 1e-3] });
      this.intersection.observe(this.dom);
      this.gapIntersection = new IntersectionObserver((entries) => {
        if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
          this.onScrollChanged(document.createEvent("Event"));
      }, {});
    }
    this.listenForScroll();
    this.readSelectionRange();
  }
  onScrollChanged(e25) {
    this.view.inputState.runHandlers("scroll", e25);
    if (this.intersecting)
      this.view.measure();
  }
  onScroll(e25) {
    if (this.intersecting)
      this.flush(false);
    if (this.editContext)
      this.view.requestMeasure(this.editContext.measureReq);
    this.onScrollChanged(e25);
  }
  onResize() {
    if (this.resizeTimeout < 0)
      this.resizeTimeout = setTimeout(() => {
        this.resizeTimeout = -1;
        this.view.requestMeasure();
      }, 50);
  }
  onPrint(event) {
    if ((event.type == "change" || !event.type) && !event.matches)
      return;
    this.view.viewState.printing = true;
    this.view.measure();
    setTimeout(() => {
      this.view.viewState.printing = false;
      this.view.requestMeasure();
    }, 500);
  }
  updateGaps(gaps) {
    if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g2, i2) => g2 != gaps[i2]))) {
      this.gapIntersection.disconnect();
      for (let gap of gaps)
        this.gapIntersection.observe(gap);
      this.gaps = gaps;
    }
  }
  onSelectionChange(event) {
    let wasChanged = this.selectionChanged;
    if (!this.readSelectionRange() || this.delayedAndroidKey)
      return;
    let { view } = this, sel = this.selectionRange;
    if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))
      return;
    let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
    if (context && context.ignoreEvent(event)) {
      if (!wasChanged)
        this.selectionChanged = false;
      return;
    }
    if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
    sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
      this.flushSoon();
    else
      this.flush(false);
  }
  readSelectionRange() {
    let { view } = this;
    let selection = getSelection(view.root);
    if (!selection)
      return false;
    let range = browser.safari && view.root.nodeType == 11 && deepActiveElement(this.dom.ownerDocument) == this.dom && safariSelectionRangeHack(this.view, selection) || selection;
    if (!range || this.selectionRange.eq(range))
      return false;
    let local = hasSelection(this.dom, range);
    if (local && !this.selectionChanged && view.inputState.lastFocusTime > Date.now() - 200 && view.inputState.lastTouchTime < Date.now() - 300 && atElementStart(this.dom, range)) {
      this.view.inputState.lastFocusTime = 0;
      view.docView.updateSelection();
      return false;
    }
    this.selectionRange.setRange(range);
    if (local)
      this.selectionChanged = true;
    return true;
  }
  setSelectionRange(anchor, head) {
    this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
    this.selectionChanged = false;
  }
  clearSelectionRange() {
    this.selectionRange.set(null, 0, null, 0);
  }
  listenForScroll() {
    this.parentCheck = -1;
    let i2 = 0, changed = null;
    for (let dom = this.dom; dom; ) {
      if (dom.nodeType == 1) {
        if (!changed && i2 < this.scrollTargets.length && this.scrollTargets[i2] == dom)
          i2++;
        else if (!changed)
          changed = this.scrollTargets.slice(0, i2);
        if (changed)
          changed.push(dom);
        dom = dom.assignedSlot || dom.parentNode;
      } else if (dom.nodeType == 11) {
        dom = dom.host;
      } else {
        break;
      }
    }
    if (i2 < this.scrollTargets.length && !changed)
      changed = this.scrollTargets.slice(0, i2);
    if (changed) {
      for (let dom of this.scrollTargets)
        dom.removeEventListener("scroll", this.onScroll);
      for (let dom of this.scrollTargets = changed)
        dom.addEventListener("scroll", this.onScroll);
    }
  }
  ignore(f2) {
    if (!this.active)
      return f2();
    try {
      this.stop();
      return f2();
    } finally {
      this.start();
      this.clear();
    }
  }
  start() {
    if (this.active)
      return;
    this.observer.observe(this.dom, observeOptions);
    if (useCharData)
      this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
    this.active = true;
  }
  stop() {
    if (!this.active)
      return;
    this.active = false;
    this.observer.disconnect();
    if (useCharData)
      this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
  }
  // Throw away any pending changes
  clear() {
    this.processRecords();
    this.queue.length = 0;
    this.selectionChanged = false;
  }
  // Chrome Android, especially in combination with GBoard, not only
  // doesn't reliably fire regular key events, but also often
  // surrounds the effect of enter or backspace with a bunch of
  // composition events that, when interrupted, cause text duplication
  // or other kinds of corruption. This hack makes the editor back off
  // from handling DOM changes for a moment when such a key is
  // detected (via beforeinput or keydown), and then tries to flush
  // them or, if that has no effect, dispatches the given key.
  delayAndroidKey(key, keyCode) {
    var _a3;
    if (!this.delayedAndroidKey) {
      let flush = () => {
        let key2 = this.delayedAndroidKey;
        if (key2) {
          this.clearDelayedAndroidKey();
          this.view.inputState.lastKeyCode = key2.keyCode;
          this.view.inputState.lastKeyTime = Date.now();
          let flushed = this.flush();
          if (!flushed && key2.force)
            dispatchKey(this.dom, key2.key, key2.keyCode);
        }
      };
      this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
    }
    if (!this.delayedAndroidKey || key == "Enter")
      this.delayedAndroidKey = {
        key,
        keyCode,
        // Only run the key handler when no changes are detected if
        // this isn't coming right after another change, in which case
        // it is probably part of a weird chain of updates, and should
        // be ignored if it returns the DOM to its previous state.
        force: this.lastChange < Date.now() - 50 || !!((_a3 = this.delayedAndroidKey) === null || _a3 === void 0 ? void 0 : _a3.force)
      };
  }
  clearDelayedAndroidKey() {
    this.win.cancelAnimationFrame(this.flushingAndroidKey);
    this.delayedAndroidKey = null;
    this.flushingAndroidKey = -1;
  }
  flushSoon() {
    if (this.delayedFlush < 0)
      this.delayedFlush = this.view.win.requestAnimationFrame(() => {
        this.delayedFlush = -1;
        this.flush();
      });
  }
  forceFlush() {
    if (this.delayedFlush >= 0) {
      this.view.win.cancelAnimationFrame(this.delayedFlush);
      this.delayedFlush = -1;
    }
    this.flush();
  }
  pendingRecords() {
    for (let mut of this.observer.takeRecords())
      this.queue.push(mut);
    return this.queue;
  }
  processRecords() {
    let records = this.pendingRecords();
    if (records.length)
      this.queue = [];
    let from = -1, to2 = -1, typeOver = false;
    for (let record of records) {
      let range = this.readMutation(record);
      if (!range)
        continue;
      if (range.typeOver)
        typeOver = true;
      if (from == -1) {
        ({ from, to: to2 } = range);
      } else {
        from = Math.min(range.from, from);
        to2 = Math.max(range.to, to2);
      }
    }
    return { from, to: to2, typeOver };
  }
  readChange() {
    let { from, to: to2, typeOver } = this.processRecords();
    let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
    if (from < 0 && !newSel)
      return null;
    if (from > -1)
      this.lastChange = Date.now();
    this.view.inputState.lastFocusTime = 0;
    this.selectionChanged = false;
    let change = new DOMChange(this.view, from, to2, typeOver);
    this.view.docView.domChanged = { newSel: change.newSel ? change.newSel.main : null };
    return change;
  }
  // Apply pending changes, if any
  flush(readSelection = true) {
    if (this.delayedFlush >= 0 || this.delayedAndroidKey)
      return false;
    if (readSelection)
      this.readSelectionRange();
    let domChange = this.readChange();
    if (!domChange) {
      this.view.requestMeasure();
      return false;
    }
    let startState = this.view.state;
    let handled = applyDOMChange(this.view, domChange);
    if (this.view.state == startState && (domChange.domChanged || domChange.newSel && !domChange.newSel.main.eq(this.view.state.selection.main)))
      this.view.update([]);
    return handled;
  }
  readMutation(rec) {
    let cView = this.view.docView.nearest(rec.target);
    if (!cView || cView.ignoreMutation(rec))
      return null;
    cView.markDirty(rec.type == "attributes");
    if (rec.type == "attributes")
      cView.flags |= 4;
    if (rec.type == "childList") {
      let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
      let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
      return {
        from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
        to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
        typeOver: false
      };
    } else if (rec.type == "characterData") {
      return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
    } else {
      return null;
    }
  }
  setWindow(win) {
    if (win != this.win) {
      this.removeWindowListeners(this.win);
      this.win = win;
      this.addWindowListeners(this.win);
    }
  }
  addWindowListeners(win) {
    win.addEventListener("resize", this.onResize);
    if (this.printQuery) {
      if (this.printQuery.addEventListener)
        this.printQuery.addEventListener("change", this.onPrint);
      else
        this.printQuery.addListener(this.onPrint);
    } else
      win.addEventListener("beforeprint", this.onPrint);
    win.addEventListener("scroll", this.onScroll);
    win.document.addEventListener("selectionchange", this.onSelectionChange);
  }
  removeWindowListeners(win) {
    win.removeEventListener("scroll", this.onScroll);
    win.removeEventListener("resize", this.onResize);
    if (this.printQuery) {
      if (this.printQuery.removeEventListener)
        this.printQuery.removeEventListener("change", this.onPrint);
      else
        this.printQuery.removeListener(this.onPrint);
    } else
      win.removeEventListener("beforeprint", this.onPrint);
    win.document.removeEventListener("selectionchange", this.onSelectionChange);
  }
  update(update) {
    if (this.editContext) {
      this.editContext.update(update);
      if (update.startState.facet(editable) != update.state.facet(editable))
        update.view.contentDOM.editContext = update.state.facet(editable) ? this.editContext.editContext : null;
    }
  }
  destroy() {
    var _a3, _b2, _c2;
    this.stop();
    (_a3 = this.intersection) === null || _a3 === void 0 ? void 0 : _a3.disconnect();
    (_b2 = this.gapIntersection) === null || _b2 === void 0 ? void 0 : _b2.disconnect();
    (_c2 = this.resizeScroll) === null || _c2 === void 0 ? void 0 : _c2.disconnect();
    for (let dom of this.scrollTargets)
      dom.removeEventListener("scroll", this.onScroll);
    this.removeWindowListeners(this.win);
    clearTimeout(this.parentCheck);
    clearTimeout(this.resizeTimeout);
    this.win.cancelAnimationFrame(this.delayedFlush);
    this.win.cancelAnimationFrame(this.flushingAndroidKey);
    if (this.editContext) {
      this.view.contentDOM.editContext = null;
      this.editContext.destroy();
    }
  }
};
function findChild(cView, dom, dir) {
  while (dom) {
    let curView = ContentView.get(dom);
    if (curView && curView.parent == cView)
      return curView;
    let parent = dom.parentNode;
    dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
  }
  return null;
}
function buildSelectionRangeFromRange(view, range) {
  let anchorNode = range.startContainer, anchorOffset = range.startOffset;
  let focusNode = range.endContainer, focusOffset = range.endOffset;
  let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
  if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
    [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
  return { anchorNode, anchorOffset, focusNode, focusOffset };
}
function safariSelectionRangeHack(view, selection) {
  if (selection.getComposedRanges) {
    let range = selection.getComposedRanges(view.root)[0];
    if (range)
      return buildSelectionRangeFromRange(view, range);
  }
  let found = null;
  function read(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
    found = event.getTargetRanges()[0];
  }
  view.contentDOM.addEventListener("beforeinput", read, true);
  view.dom.ownerDocument.execCommand("indent");
  view.contentDOM.removeEventListener("beforeinput", read, true);
  return found ? buildSelectionRangeFromRange(view, found) : null;
}
var EditContextManager = class {
  constructor(view) {
    this.from = 0;
    this.to = 0;
    this.pendingContextChange = null;
    this.handlers = /* @__PURE__ */ Object.create(null);
    this.resetRange(view.state);
    let context = this.editContext = new window.EditContext({
      text: view.state.doc.sliceString(this.from, this.to),
      selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, view.state.selection.main.anchor))),
      selectionEnd: this.toContextPos(view.state.selection.main.head)
    });
    this.handlers.textupdate = (e25) => {
      let { anchor } = view.state.selection.main;
      let change = {
        from: this.toEditorPos(e25.updateRangeStart),
        to: this.toEditorPos(e25.updateRangeEnd),
        insert: Text.of(e25.text.split("\n"))
      };
      if (change.from == this.from && anchor < this.from)
        change.from = anchor;
      else if (change.to == this.to && anchor > this.to)
        change.to = anchor;
      if (change.from == change.to && !change.insert.length)
        return;
      this.pendingContextChange = change;
      if (!view.state.readOnly)
        applyDOMChangeInner(view, change, EditorSelection.single(this.toEditorPos(e25.selectionStart), this.toEditorPos(e25.selectionEnd)));
      if (this.pendingContextChange) {
        this.revertPending(view.state);
        this.setSelection(view.state);
      }
    };
    this.handlers.characterboundsupdate = (e25) => {
      let rects = [], prev = null;
      for (let i2 = this.toEditorPos(e25.rangeStart), end = this.toEditorPos(e25.rangeEnd); i2 < end; i2++) {
        let rect = view.coordsForChar(i2);
        prev = rect && new DOMRect(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top) || prev || new DOMRect();
        rects.push(prev);
      }
      context.updateCharacterBounds(e25.rangeStart, rects);
    };
    this.handlers.textformatupdate = (e25) => {
      let deco = [];
      for (let format of e25.getTextFormats()) {
        let lineStyle = format.underlineStyle, thickness = format.underlineThickness;
        if (lineStyle != "None" && thickness != "None") {
          let style = `text-decoration: underline ${lineStyle == "Dashed" ? "dashed " : lineStyle == "Squiggle" ? "wavy " : ""}${thickness == "Thin" ? 1 : 2}px`;
          deco.push(Decoration.mark({ attributes: { style } }).range(this.toEditorPos(format.rangeStart), this.toEditorPos(format.rangeEnd)));
        }
      }
      view.dispatch({ effects: setEditContextFormatting.of(Decoration.set(deco)) });
    };
    this.handlers.compositionstart = () => {
      if (view.inputState.composing < 0) {
        view.inputState.composing = 0;
        view.inputState.compositionFirstChange = true;
      }
    };
    this.handlers.compositionend = () => {
      view.inputState.composing = -1;
      view.inputState.compositionFirstChange = null;
    };
    for (let event in this.handlers)
      context.addEventListener(event, this.handlers[event]);
    this.measureReq = { read: (view2) => {
      this.editContext.updateControlBounds(view2.contentDOM.getBoundingClientRect());
      let sel = getSelection(view2.root);
      if (sel && sel.rangeCount)
        this.editContext.updateSelectionBounds(sel.getRangeAt(0).getBoundingClientRect());
    } };
  }
  applyEdits(update) {
    let off2 = 0, abort = false, pending = this.pendingContextChange;
    update.changes.iterChanges((fromA, toA, _fromB, _toB, insert2) => {
      if (abort)
        return;
      let dLen = insert2.length - (toA - fromA);
      if (pending && toA >= pending.to) {
        if (pending.from == fromA && pending.to == toA && pending.insert.eq(insert2)) {
          pending = this.pendingContextChange = null;
          off2 += dLen;
          this.to += dLen;
          return;
        } else {
          pending = null;
          this.revertPending(update.state);
        }
      }
      fromA += off2;
      toA += off2;
      if (toA <= this.from) {
        this.from += dLen;
        this.to += dLen;
      } else if (fromA < this.to) {
        if (fromA < this.from || toA > this.to || this.to - this.from + insert2.length > 3e4) {
          abort = true;
          return;
        }
        this.editContext.updateText(this.toContextPos(fromA), this.toContextPos(toA), insert2.toString());
        this.to += dLen;
      }
      off2 += dLen;
    });
    if (pending && !abort)
      this.revertPending(update.state);
    return !abort;
  }
  update(update) {
    let reverted = this.pendingContextChange;
    if (!this.applyEdits(update) || !this.rangeIsValid(update.state)) {
      this.pendingContextChange = null;
      this.resetRange(update.state);
      this.editContext.updateText(0, this.editContext.text.length, update.state.doc.sliceString(this.from, this.to));
      this.setSelection(update.state);
    } else if (update.docChanged || update.selectionSet || reverted) {
      this.setSelection(update.state);
    }
    if (update.geometryChanged || update.docChanged || update.selectionSet)
      update.view.requestMeasure(this.measureReq);
  }
  resetRange(state) {
    let { head } = state.selection.main;
    this.from = Math.max(
      0,
      head - 1e4
      /* CxVp.Margin */
    );
    this.to = Math.min(
      state.doc.length,
      head + 1e4
      /* CxVp.Margin */
    );
  }
  revertPending(state) {
    let pending = this.pendingContextChange;
    this.pendingContextChange = null;
    this.editContext.updateText(this.toContextPos(pending.from), this.toContextPos(pending.from + pending.insert.length), state.doc.sliceString(pending.from, pending.to));
  }
  setSelection(state) {
    let { main } = state.selection;
    let start = this.toContextPos(Math.max(this.from, Math.min(this.to, main.anchor)));
    let end = this.toContextPos(main.head);
    if (this.editContext.selectionStart != start || this.editContext.selectionEnd != end)
      this.editContext.updateSelection(start, end);
  }
  rangeIsValid(state) {
    let { head } = state.selection.main;
    return !(this.from > 0 && head - this.from < 500 || this.to < state.doc.length && this.to - head < 500 || this.to - this.from > 1e4 * 3);
  }
  toEditorPos(contextPos) {
    return contextPos + this.from;
  }
  toContextPos(editorPos) {
    return editorPos - this.from;
  }
  destroy() {
    for (let event in this.handlers)
      this.editContext.removeEventListener(event, this.handlers[event]);
  }
};
var EditorView = class _EditorView {
  /**
  The current editor state.
  */
  get state() {
    return this.viewState.state;
  }
  /**
  To be able to display large documents without consuming too much
  memory or overloading the browser, CodeMirror only draws the
  code that is visible (plus a margin around it) to the DOM. This
  property tells you the extent of the current drawn viewport, in
  document positions.
  */
  get viewport() {
    return this.viewState.viewport;
  }
  /**
  When there are, for example, large collapsed ranges in the
  viewport, its size can be a lot bigger than the actual visible
  content. Thus, if you are doing something like styling the
  content in the viewport, it is preferable to only do so for
  these ranges, which are the subset of the viewport that is
  actually drawn.
  */
  get visibleRanges() {
    return this.viewState.visibleRanges;
  }
  /**
  Returns false when the editor is entirely scrolled out of view
  or otherwise hidden.
  */
  get inView() {
    return this.viewState.inView;
  }
  /**
  Indicates whether the user is currently composing text via
  [IME](https://en.wikipedia.org/wiki/Input_method), and at least
  one change has been made in the current composition.
  */
  get composing() {
    return this.inputState.composing > 0;
  }
  /**
  Indicates whether the user is currently in composing state. Note
  that on some platforms, like Android, this will be the case a
  lot, since just putting the cursor on a word starts a
  composition there.
  */
  get compositionStarted() {
    return this.inputState.composing >= 0;
  }
  /**
  The document or shadow root that the view lives in.
  */
  get root() {
    return this._root;
  }
  /**
  @internal
  */
  get win() {
    return this.dom.ownerDocument.defaultView || window;
  }
  /**
  Construct a new view. You'll want to either provide a `parent`
  option, or put `view.dom` into your document after creating a
  view, so that the user can see the editor.
  */
  constructor(config2 = {}) {
    this.plugins = [];
    this.pluginMap = /* @__PURE__ */ new Map();
    this.editorAttrs = {};
    this.contentAttrs = {};
    this.bidiCache = [];
    this.destroyed = false;
    this.updateState = 2;
    this.measureScheduled = -1;
    this.measureRequests = [];
    this.contentDOM = document.createElement("div");
    this.scrollDOM = document.createElement("div");
    this.scrollDOM.tabIndex = -1;
    this.scrollDOM.className = "cm-scroller";
    this.scrollDOM.appendChild(this.contentDOM);
    this.announceDOM = document.createElement("div");
    this.announceDOM.className = "cm-announced";
    this.announceDOM.setAttribute("aria-live", "polite");
    this.dom = document.createElement("div");
    this.dom.appendChild(this.announceDOM);
    this.dom.appendChild(this.scrollDOM);
    if (config2.parent)
      config2.parent.appendChild(this.dom);
    let { dispatch } = config2;
    this.dispatchTransactions = config2.dispatchTransactions || dispatch && ((trs) => trs.forEach((tr2) => dispatch(tr2, this))) || ((trs) => this.update(trs));
    this.dispatch = this.dispatch.bind(this);
    this._root = config2.root || getRoot(config2.parent) || document;
    this.viewState = new ViewState(config2.state || EditorState.create(config2));
    if (config2.scrollTo && config2.scrollTo.is(scrollIntoView))
      this.viewState.scrollTarget = config2.scrollTo.value.clip(this.viewState.state);
    this.plugins = this.state.facet(viewPlugin).map((spec) => new PluginInstance(spec));
    for (let plugin of this.plugins)
      plugin.update(this);
    this.observer = new DOMObserver(this);
    this.inputState = new InputState(this);
    this.inputState.ensureHandlers(this.plugins);
    this.docView = new DocView(this);
    this.mountStyles();
    this.updateAttrs();
    this.updateState = 0;
    this.requestMeasure();
  }
  dispatch(...input) {
    let trs = input.length == 1 && input[0] instanceof Transaction ? input : input.length == 1 && Array.isArray(input[0]) ? input[0] : [this.state.update(...input)];
    this.dispatchTransactions(trs, this);
  }
  /**
  Update the view for the given array of transactions. This will
  update the visible document and selection to match the state
  produced by the transactions, and notify view plugins of the
  change. You should usually call
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
  as a primitive.
  */
  update(transactions) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
    let redrawn = false, attrsChanged = false, update;
    let state = this.state;
    for (let tr2 of transactions) {
      if (tr2.startState != state)
        throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
      state = tr2.state;
    }
    if (this.destroyed) {
      this.viewState.state = state;
      return;
    }
    let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
    if (transactions.some((tr2) => tr2.annotation(isFocusChange))) {
      this.inputState.notifiedFocused = focus;
      focusFlag = 1;
    } else if (focus != this.inputState.notifiedFocused) {
      this.inputState.notifiedFocused = focus;
      dispatchFocus = focusChangeTransaction(state, focus);
      if (!dispatchFocus)
        focusFlag = 1;
    }
    let pendingKey = this.observer.delayedAndroidKey, domChange = null;
    if (pendingKey) {
      this.observer.clearDelayedAndroidKey();
      domChange = this.observer.readChange();
      if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
        domChange = null;
    } else {
      this.observer.clear();
    }
    if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
      return this.setState(state);
    update = ViewUpdate.create(this, state, transactions);
    update.flags |= focusFlag;
    let scrollTarget = this.viewState.scrollTarget;
    try {
      this.updateState = 2;
      for (let tr2 of transactions) {
        if (scrollTarget)
          scrollTarget = scrollTarget.map(tr2.changes);
        if (tr2.scrollIntoView) {
          let { main } = tr2.state.selection;
          scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
        }
        for (let e25 of tr2.effects)
          if (e25.is(scrollIntoView))
            scrollTarget = e25.value.clip(this.state);
      }
      this.viewState.update(update, scrollTarget);
      this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
      if (!update.empty) {
        this.updatePlugins(update);
        this.inputState.update(update);
      }
      redrawn = this.docView.update(update);
      if (this.state.facet(styleModule) != this.styleModules)
        this.mountStyles();
      attrsChanged = this.updateAttrs();
      this.showAnnouncements(transactions);
      this.docView.updateSelection(redrawn, transactions.some((tr2) => tr2.isUserEvent("select.pointer")));
    } finally {
      this.updateState = 0;
    }
    if (update.startState.facet(theme) != update.state.facet(theme))
      this.viewState.mustMeasureContent = true;
    if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
      this.requestMeasure();
    if (redrawn)
      this.docViewUpdate();
    if (!update.empty)
      for (let listener of this.state.facet(updateListener)) {
        try {
          listener(update);
        } catch (e25) {
          logException(this.state, e25, "update listener");
        }
      }
    if (dispatchFocus || domChange)
      Promise.resolve().then(() => {
        if (dispatchFocus && this.state == dispatchFocus.startState)
          this.dispatch(dispatchFocus);
        if (domChange) {
          if (!applyDOMChange(this, domChange) && pendingKey.force)
            dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
        }
      });
  }
  /**
  Reset the view to the given state. (This will cause the entire
  document to be redrawn and all view plugins to be reinitialized,
  so you should probably only use it when the new state isn't
  derived from the old state. Otherwise, use
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
  */
  setState(newState) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
    if (this.destroyed) {
      this.viewState.state = newState;
      return;
    }
    this.updateState = 2;
    let hadFocus = this.hasFocus;
    try {
      for (let plugin of this.plugins)
        plugin.destroy(this);
      this.viewState = new ViewState(newState);
      this.plugins = newState.facet(viewPlugin).map((spec) => new PluginInstance(spec));
      this.pluginMap.clear();
      for (let plugin of this.plugins)
        plugin.update(this);
      this.docView.destroy();
      this.docView = new DocView(this);
      this.inputState.ensureHandlers(this.plugins);
      this.mountStyles();
      this.updateAttrs();
      this.bidiCache = [];
    } finally {
      this.updateState = 0;
    }
    if (hadFocus)
      this.focus();
    this.requestMeasure();
  }
  updatePlugins(update) {
    let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
    if (prevSpecs != specs) {
      let newPlugins = [];
      for (let spec of specs) {
        let found = prevSpecs.indexOf(spec);
        if (found < 0) {
          newPlugins.push(new PluginInstance(spec));
        } else {
          let plugin = this.plugins[found];
          plugin.mustUpdate = update;
          newPlugins.push(plugin);
        }
      }
      for (let plugin of this.plugins)
        if (plugin.mustUpdate != update)
          plugin.destroy(this);
      this.plugins = newPlugins;
      this.pluginMap.clear();
    } else {
      for (let p2 of this.plugins)
        p2.mustUpdate = update;
    }
    for (let i2 = 0; i2 < this.plugins.length; i2++)
      this.plugins[i2].update(this);
    if (prevSpecs != specs)
      this.inputState.ensureHandlers(this.plugins);
  }
  docViewUpdate() {
    for (let plugin of this.plugins) {
      let val = plugin.value;
      if (val && val.docViewUpdate) {
        try {
          val.docViewUpdate(this);
        } catch (e25) {
          logException(this.state, e25, "doc view update listener");
        }
      }
    }
  }
  /**
  @internal
  */
  measure(flush = true) {
    if (this.destroyed)
      return;
    if (this.measureScheduled > -1)
      this.win.cancelAnimationFrame(this.measureScheduled);
    if (this.observer.delayedAndroidKey) {
      this.measureScheduled = -1;
      this.requestMeasure();
      return;
    }
    this.measureScheduled = 0;
    if (flush)
      this.observer.forceFlush();
    let updated = null;
    let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;
    let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;
    if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)
      scrollAnchorHeight = -1;
    this.viewState.scrollAnchorHeight = -1;
    try {
      for (let i2 = 0; ; i2++) {
        if (scrollAnchorHeight < 0) {
          if (isScrolledToBottom(sDOM)) {
            scrollAnchorPos = -1;
            scrollAnchorHeight = this.viewState.heightMap.height;
          } else {
            let block = this.viewState.scrollAnchorAt(scrollTop);
            scrollAnchorPos = block.from;
            scrollAnchorHeight = block.top;
          }
        }
        this.updateState = 1;
        let changed = this.viewState.measure(this);
        if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
          break;
        if (i2 > 5) {
          console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
          break;
        }
        let measuring = [];
        if (!(changed & 4))
          [this.measureRequests, measuring] = [measuring, this.measureRequests];
        let measured = measuring.map((m2) => {
          try {
            return m2.read(this);
          } catch (e25) {
            logException(this.state, e25);
            return BadMeasure;
          }
        });
        let update = ViewUpdate.create(this, this.state, []), redrawn = false;
        update.flags |= changed;
        if (!updated)
          updated = update;
        else
          updated.flags |= changed;
        this.updateState = 2;
        if (!update.empty) {
          this.updatePlugins(update);
          this.inputState.update(update);
          this.updateAttrs();
          redrawn = this.docView.update(update);
          if (redrawn)
            this.docViewUpdate();
        }
        for (let i3 = 0; i3 < measuring.length; i3++)
          if (measured[i3] != BadMeasure) {
            try {
              let m2 = measuring[i3];
              if (m2.write)
                m2.write(measured[i3], this);
            } catch (e25) {
              logException(this.state, e25);
            }
          }
        if (redrawn)
          this.docView.updateSelection(true);
        if (!update.viewportChanged && this.measureRequests.length == 0) {
          if (this.viewState.editorHeight) {
            if (this.viewState.scrollTarget) {
              this.docView.scrollIntoView(this.viewState.scrollTarget);
              this.viewState.scrollTarget = null;
              scrollAnchorHeight = -1;
              continue;
            } else {
              let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(scrollAnchorPos).top;
              let diff = newAnchorHeight - scrollAnchorHeight;
              if (diff > 1 || diff < -1) {
                scrollTop = scrollTop + diff;
                sDOM.scrollTop = scrollTop / this.scaleY;
                scrollAnchorHeight = -1;
                continue;
              }
            }
          }
          break;
        }
      }
    } finally {
      this.updateState = 0;
      this.measureScheduled = -1;
    }
    if (updated && !updated.empty)
      for (let listener of this.state.facet(updateListener))
        listener(updated);
  }
  /**
  Get the CSS classes for the currently active editor themes.
  */
  get themeClasses() {
    return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(theme);
  }
  updateAttrs() {
    let editorAttrs = attrsFromFacet(this, editorAttributes, {
      class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
    });
    let contentAttrs = {
      spellcheck: "false",
      autocorrect: "off",
      autocapitalize: "off",
      translate: "no",
      contenteditable: !this.state.facet(editable) ? "false" : "true",
      class: "cm-content",
      style: `${browser.tabSize}: ${this.state.tabSize}`,
      role: "textbox",
      "aria-multiline": "true"
    };
    if (this.state.readOnly)
      contentAttrs["aria-readonly"] = "true";
    attrsFromFacet(this, contentAttributes, contentAttrs);
    let changed = this.observer.ignore(() => {
      let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
      let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
      return changedContent || changedEditor;
    });
    this.editorAttrs = editorAttrs;
    this.contentAttrs = contentAttrs;
    return changed;
  }
  showAnnouncements(trs) {
    let first = true;
    for (let tr2 of trs)
      for (let effect of tr2.effects)
        if (effect.is(_EditorView.announce)) {
          if (first)
            this.announceDOM.textContent = "";
          first = false;
          let div = this.announceDOM.appendChild(document.createElement("div"));
          div.textContent = effect.value;
        }
  }
  mountStyles() {
    this.styleModules = this.state.facet(styleModule);
    let nonce = this.state.facet(_EditorView.cspNonce);
    StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1).reverse(), nonce ? { nonce } : void 0);
  }
  readMeasured() {
    if (this.updateState == 2)
      throw new Error("Reading the editor layout isn't allowed during an update");
    if (this.updateState == 0 && this.measureScheduled > -1)
      this.measure(false);
  }
  /**
  Schedule a layout measurement, optionally providing callbacks to
  do custom DOM measuring followed by a DOM write phase. Using
  this is preferable reading DOM layout directly from, for
  example, an event handler, because it'll make sure measuring and
  drawing done by other components is synchronized, avoiding
  unnecessary DOM layout computations.
  */
  requestMeasure(request) {
    if (this.measureScheduled < 0)
      this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
    if (request) {
      if (this.measureRequests.indexOf(request) > -1)
        return;
      if (request.key != null)
        for (let i2 = 0; i2 < this.measureRequests.length; i2++) {
          if (this.measureRequests[i2].key === request.key) {
            this.measureRequests[i2] = request;
            return;
          }
        }
      this.measureRequests.push(request);
    }
  }
  /**
  Get the value of a specific plugin, if present. Note that
  plugins that crash can be dropped from a view, so even when you
  know you registered a given plugin, it is recommended to check
  the return value of this method.
  */
  plugin(plugin) {
    let known = this.pluginMap.get(plugin);
    if (known === void 0 || known && known.spec != plugin)
      this.pluginMap.set(plugin, known = this.plugins.find((p2) => p2.spec == plugin) || null);
    return known && known.update(this).value;
  }
  /**
  The top position of the document, in screen coordinates. This
  may be negative when the editor is scrolled down. Points
  directly to the top of the first line, not above the padding.
  */
  get documentTop() {
    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
  }
  /**
  Reports the padding above and below the document.
  */
  get documentPadding() {
    return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
  }
  /**
  If the editor is transformed with CSS, this provides the scale
  along the X axis. Otherwise, it will just be 1. Note that
  transforms other than translation and scaling are not supported.
  */
  get scaleX() {
    return this.viewState.scaleX;
  }
  /**
  Provide the CSS transformed scale along the Y axis.
  */
  get scaleY() {
    return this.viewState.scaleY;
  }
  /**
  Find the text line or block widget at the given vertical
  position (which is interpreted as relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
  */
  elementAtHeight(height) {
    this.readMeasured();
    return this.viewState.elementAtHeight(height);
  }
  /**
  Find the line block (see
  [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
  height, again interpreted relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
  */
  lineBlockAtHeight(height) {
    this.readMeasured();
    return this.viewState.lineBlockAtHeight(height);
  }
  /**
  Get the extent and vertical position of all [line
  blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
  are relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
  */
  get viewportLineBlocks() {
    return this.viewState.viewportLines;
  }
  /**
  Find the line block around the given document position. A line
  block is a range delimited on both sides by either a
  non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
  start/end of the document. It will usually just hold a line of
  text, but may be broken into multiple textblocks by block
  widgets.
  */
  lineBlockAt(pos) {
    return this.viewState.lineBlockAt(pos);
  }
  /**
  The editor's total content height.
  */
  get contentHeight() {
    return this.viewState.contentHeight;
  }
  /**
  Move a cursor position by [grapheme
  cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
  the motion is away from the line start, or towards it. In
  bidirectional text, the line is traversed in visual order, using
  the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  When the start position was the last one on the line, the
  returned position will be across the line break. If there is no
  further line, the original position is returned.
  
  By default, this method moves over a single cluster. The
  optional `by` argument can be used to move across more. It will
  be called with the first cluster as argument, and should return
  a predicate that determines, for each subsequent cluster,
  whether it should also be moved over.
  */
  moveByChar(start, forward, by2) {
    return skipAtoms(this, start, moveByChar(this, start, forward, by2));
  }
  /**
  Move a cursor position across the next group of either
  [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
  non-whitespace characters.
  */
  moveByGroup(start, forward) {
    return skipAtoms(this, start, moveByChar(this, start, forward, (initial) => byGroup(this, start.head, initial)));
  }
  /**
  Get the cursor position visually at the start or end of a line.
  Note that this may differ from the _logical_ position at its
  start or end (which is simply at `line.from`/`line.to`) if text
  at the start or end goes against the line's base text direction.
  */
  visualLineSide(line, end) {
    let order = this.bidiSpans(line), dir = this.textDirectionAt(line.from);
    let span = order[end ? order.length - 1 : 0];
    return EditorSelection.cursor(span.side(end, dir) + line.from, span.forward(!end, dir) ? 1 : -1);
  }
  /**
  Move to the next line boundary in the given direction. If
  `includeWrap` is true, line wrapping is on, and there is a
  further wrap point on the current line, the wrap point will be
  returned. Otherwise this function will return the start or end
  of the line.
  */
  moveToLineBoundary(start, forward, includeWrap = true) {
    return moveToLineBoundary(this, start, forward, includeWrap);
  }
  /**
  Move a cursor position vertically. When `distance` isn't given,
  it defaults to moving to the next line (including wrapped
  lines). Otherwise, `distance` should provide a positive distance
  in pixels.
  
  When `start` has a
  [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
  motion will use that as a target horizontal position. Otherwise,
  the cursor's own horizontal position is used. The returned
  cursor will have its goal column set to whichever column was
  used.
  */
  moveVertically(start, forward, distance) {
    return skipAtoms(this, start, moveVertically(this, start, forward, distance));
  }
  /**
  Find the DOM parent node and offset (child offset if `node` is
  an element, character offset when it is a text node) at the
  given document position.
  
  Note that for positions that aren't currently in
  `visibleRanges`, the resulting DOM position isn't necessarily
  meaningful (it may just point before or after a placeholder
  element).
  */
  domAtPos(pos) {
    return this.docView.domAtPos(pos);
  }
  /**
  Find the document position at the given DOM node. Can be useful
  for associating positions with DOM events. Will raise an error
  when `node` isn't part of the editor content.
  */
  posAtDOM(node, offset = 0) {
    return this.docView.posFromDOM(node, offset);
  }
  posAtCoords(coords, precise = true) {
    this.readMeasured();
    return posAtCoords(this, coords, precise);
  }
  /**
  Get the screen coordinates at the given document position.
  `side` determines whether the coordinates are based on the
  element before (-1) or after (1) the position (if no element is
  available on the given side, the method will transparently use
  another strategy to get reasonable coordinates).
  */
  coordsAtPos(pos, side = 1) {
    this.readMeasured();
    let rect = this.docView.coordsAt(pos, side);
    if (!rect || rect.left == rect.right)
      return rect;
    let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
    let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
    return flattenRect(rect, span.dir == Direction.LTR == side > 0);
  }
  /**
  Return the rectangle around a given character. If `pos` does not
  point in front of a character that is in the viewport and
  rendered (i.e. not replaced, not a line break), this will return
  null. For space characters that are a line wrap point, this will
  return the position before the line break.
  */
  coordsForChar(pos) {
    this.readMeasured();
    return this.docView.coordsForChar(pos);
  }
  /**
  The default width of a character in the editor. May not
  accurately reflect the width of all characters (given variable
  width fonts or styling of invididual ranges).
  */
  get defaultCharacterWidth() {
    return this.viewState.heightOracle.charWidth;
  }
  /**
  The default height of a line in the editor. May not be accurate
  for all lines.
  */
  get defaultLineHeight() {
    return this.viewState.heightOracle.lineHeight;
  }
  /**
  The text direction
  ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
  CSS property) of the editor's content element.
  */
  get textDirection() {
    return this.viewState.defaultTextDirection;
  }
  /**
  Find the text direction of the block at the given position, as
  assigned by CSS. If
  [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
  isn't enabled, or the given position is outside of the viewport,
  this will always return the same as
  [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
  this may trigger a DOM layout.
  */
  textDirectionAt(pos) {
    let perLine = this.state.facet(perLineTextDirection);
    if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
      return this.textDirection;
    this.readMeasured();
    return this.docView.textDirectionAt(pos);
  }
  /**
  Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
  (as determined by the
  [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
  CSS property of its content element).
  */
  get lineWrapping() {
    return this.viewState.heightOracle.lineWrapping;
  }
  /**
  Returns the bidirectional text structure of the given line
  (which should be in the current document) as an array of span
  objects. The order of these spans matches the [text
  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
  left-to-right, the leftmost spans come first, otherwise the
  rightmost spans come first.
  */
  bidiSpans(line) {
    if (line.length > MaxBidiLine)
      return trivialOrder(line.length);
    let dir = this.textDirectionAt(line.from), isolates;
    for (let entry of this.bidiCache) {
      if (entry.from == line.from && entry.dir == dir && (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line))))
        return entry.order;
    }
    if (!isolates)
      isolates = getIsolatedRanges(this, line);
    let order = computeOrder(line.text, dir, isolates);
    this.bidiCache.push(new CachedOrder(line.from, line.to, dir, isolates, true, order));
    return order;
  }
  /**
  Check whether the editor has focus.
  */
  get hasFocus() {
    var _a3;
    return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a3 = this.inputState) === null || _a3 === void 0 ? void 0 : _a3.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
  }
  /**
  Put focus on the editor.
  */
  focus() {
    this.observer.ignore(() => {
      focusPreventScroll(this.contentDOM);
      this.docView.updateSelection();
    });
  }
  /**
  Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
  necessary when moving the editor's existing DOM to a new window or shadow root.
  */
  setRoot(root) {
    if (this._root != root) {
      this._root = root;
      this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
      this.mountStyles();
    }
  }
  /**
  Clean up this editor view, removing its element from the
  document, unregistering event handlers, and notifying
  plugins. The view instance can no longer be used after
  calling this.
  */
  destroy() {
    if (this.root.activeElement == this.contentDOM)
      this.contentDOM.blur();
    for (let plugin of this.plugins)
      plugin.destroy(this);
    this.plugins = [];
    this.inputState.destroy();
    this.docView.destroy();
    this.dom.remove();
    this.observer.destroy();
    if (this.measureScheduled > -1)
      this.win.cancelAnimationFrame(this.measureScheduled);
    this.destroyed = true;
  }
  /**
  Returns an effect that can be
  [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
  cause it to scroll the given position or range into view.
  */
  static scrollIntoView(pos, options = {}) {
    return scrollIntoView.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
  }
  /**
  Return an effect that resets the editor to its current (at the
  time this method was called) scroll position. Note that this
  only affects the editor's own scrollable element, not parents.
  See also
  [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
  
  The effect should be used with a document identical to the one
  it was created for. Failing to do so is not an error, but may
  not scroll to the expected position. You can
  [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
  */
  scrollSnapshot() {
    let { scrollTop, scrollLeft } = this.scrollDOM;
    let ref = this.viewState.scrollAnchorAt(scrollTop);
    return scrollIntoView.of(new ScrollTarget(EditorSelection.cursor(ref.from), "start", "start", ref.top - scrollTop, scrollLeft, true));
  }
  /**
  Enable or disable tab-focus mode, which disables key bindings
  for Tab and Shift-Tab, letting the browser's default
  focus-changing behavior go through instead. This is useful to
  prevent trapping keyboard users in your editor.
  
  Without argument, this toggles the mode. With a boolean, it
  enables (true) or disables it (false). Given a number, it
  temporarily enables the mode until that number of milliseconds
  have passed or another non-Tab key is pressed.
  */
  setTabFocusMode(to2) {
    if (to2 == null)
      this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1;
    else if (typeof to2 == "boolean")
      this.inputState.tabFocusMode = to2 ? 0 : -1;
    else if (this.inputState.tabFocusMode != 0)
      this.inputState.tabFocusMode = Date.now() + to2;
  }
  /**
  Returns an extension that can be used to add DOM event handlers.
  The value should be an object mapping event names to handler
  functions. For any given event, such functions are ordered by
  extension precedence, and the first handler to return true will
  be assumed to have handled that event, and no other handlers or
  built-in behavior will be activated for it. These are registered
  on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
  for `scroll` handlers, which will be called any time the
  editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
  its parent nodes is scrolled.
  */
  static domEventHandlers(handlers2) {
    return ViewPlugin.define(() => ({}), { eventHandlers: handlers2 });
  }
  /**
  Create an extension that registers DOM event observers. Contrary
  to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
  observers can't be prevented from running by a higher-precedence
  handler returning true. They also don't prevent other handlers
  and observers from running when they return true, and should not
  call `preventDefault`.
  */
  static domEventObservers(observers2) {
    return ViewPlugin.define(() => ({}), { eventObservers: observers2 });
  }
  /**
  Create a theme extension. The first argument can be a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)
  style spec providing the styles for the theme. These will be
  prefixed with a generated class for the style.
  
  Because the selectors will be prefixed with a scope class, rule
  that directly match the editor's [wrapper
  element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
  added—need to be explicitly differentiated by adding an `&` to
  the selector for that element—for example
  `&.cm-focused`.
  
  When `dark` is set to true, the theme will be marked as dark,
  which will cause the `&dark` rules from [base
  themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
  `&light` when a light theme is active).
  */
  static theme(spec, options) {
    let prefix = StyleModule.newName();
    let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
    if (options && options.dark)
      result.push(darkTheme.of(true));
    return result;
  }
  /**
  Create an extension that adds styles to the base theme. Like
  with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
  place of the editor wrapper element when directly targeting
  that. You can also use `&dark` or `&light` instead to only
  target editors with a dark or light theme.
  */
  static baseTheme(spec) {
    return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
  }
  /**
  Retrieve an editor view instance from the view's DOM
  representation.
  */
  static findFromDOM(dom) {
    var _a3;
    let content2 = dom.querySelector(".cm-content");
    let cView = content2 && ContentView.get(content2) || ContentView.get(dom);
    return ((_a3 = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a3 === void 0 ? void 0 : _a3.view) || null;
  }
};
EditorView.styleModule = styleModule;
EditorView.inputHandler = inputHandler;
EditorView.scrollHandler = scrollHandler;
EditorView.focusChangeEffect = focusChangeEffect;
EditorView.perLineTextDirection = perLineTextDirection;
EditorView.exceptionSink = exceptionSink;
EditorView.updateListener = updateListener;
EditorView.editable = editable;
EditorView.mouseSelectionStyle = mouseSelectionStyle;
EditorView.dragMovesSelection = dragMovesSelection$1;
EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
EditorView.decorations = decorations;
EditorView.outerDecorations = outerDecorations;
EditorView.atomicRanges = atomicRanges;
EditorView.bidiIsolatedRanges = bidiIsolatedRanges;
EditorView.scrollMargins = scrollMargins;
EditorView.darkTheme = darkTheme;
EditorView.cspNonce = /* @__PURE__ */ Facet.define({ combine: (values2) => values2.length ? values2[0] : "" });
EditorView.contentAttributes = contentAttributes;
EditorView.editorAttributes = editorAttributes;
EditorView.lineWrapping = /* @__PURE__ */ EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
EditorView.announce = /* @__PURE__ */ StateEffect.define();
var MaxBidiLine = 4096;
var BadMeasure = {};
var CachedOrder = class _CachedOrder {
  constructor(from, to2, dir, isolates, fresh, order) {
    this.from = from;
    this.to = to2;
    this.dir = dir;
    this.isolates = isolates;
    this.fresh = fresh;
    this.order = order;
  }
  static update(cache2, changes) {
    if (changes.empty && !cache2.some((c2) => c2.fresh))
      return cache2;
    let result = [], lastDir = cache2.length ? cache2[cache2.length - 1].dir : Direction.LTR;
    for (let i2 = Math.max(0, cache2.length - 10); i2 < cache2.length; i2++) {
      let entry = cache2[i2];
      if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
        result.push(new _CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
    }
    return result;
  }
};
function attrsFromFacet(view, facet, base2) {
  for (let sources = view.state.facet(facet), i2 = sources.length - 1; i2 >= 0; i2--) {
    let source = sources[i2], value = typeof source == "function" ? source(view) : source;
    if (value)
      combineAttrs(value, base2);
  }
  return base2;
}
var currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
function normalizeKeyName(name2, platform) {
  const parts = name2.split(/-(?!$)/);
  let result = parts[parts.length - 1];
  if (result == "Space")
    result = " ";
  let alt, ctrl, shift2, meta2;
  for (let i2 = 0; i2 < parts.length - 1; ++i2) {
    const mod = parts[i2];
    if (/^(cmd|meta|m)$/i.test(mod))
      meta2 = true;
    else if (/^a(lt)?$/i.test(mod))
      alt = true;
    else if (/^(c|ctrl|control)$/i.test(mod))
      ctrl = true;
    else if (/^s(hift)?$/i.test(mod))
      shift2 = true;
    else if (/^mod$/i.test(mod)) {
      if (platform == "mac")
        meta2 = true;
      else
        ctrl = true;
    } else
      throw new Error("Unrecognized modifier name: " + mod);
  }
  if (alt)
    result = "Alt-" + result;
  if (ctrl)
    result = "Ctrl-" + result;
  if (meta2)
    result = "Meta-" + result;
  if (shift2)
    result = "Shift-" + result;
  return result;
}
function modifiers(name2, event, shift2) {
  if (event.altKey)
    name2 = "Alt-" + name2;
  if (event.ctrlKey)
    name2 = "Ctrl-" + name2;
  if (event.metaKey)
    name2 = "Meta-" + name2;
  if (shift2 !== false && event.shiftKey)
    name2 = "Shift-" + name2;
  return name2;
}
var handleKeyEvents = /* @__PURE__ */ Prec.default(/* @__PURE__ */ EditorView.domEventHandlers({
  keydown(event, view) {
    return runHandlers(getKeymap(view.state), event, view, "editor");
  }
}));
var keymap = /* @__PURE__ */ Facet.define({ enables: handleKeyEvents });
var Keymaps = /* @__PURE__ */ new WeakMap();
function getKeymap(state) {
  let bindings = state.facet(keymap);
  let map = Keymaps.get(bindings);
  if (!map)
    Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a2, b2) => a2.concat(b2), [])));
  return map;
}
function runScopeHandlers(view, event, scope) {
  return runHandlers(getKeymap(view.state), event, view, scope);
}
var storedPrefix = null;
var PrefixTimeout = 4e3;
function buildKeymap(bindings, platform = currentPlatform) {
  let bound = /* @__PURE__ */ Object.create(null);
  let isPrefix = /* @__PURE__ */ Object.create(null);
  let checkPrefix = (name2, is2) => {
    let current = isPrefix[name2];
    if (current == null)
      isPrefix[name2] = is2;
    else if (current != is2)
      throw new Error("Key binding " + name2 + " is used both as a regular binding and as a multi-stroke prefix");
  };
  let add2 = (scope, key, command2, preventDefault, stopPropagation) => {
    var _a3, _b2;
    let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
    let parts = key.split(/ (?!$)/).map((k2) => normalizeKeyName(k2, platform));
    for (let i2 = 1; i2 < parts.length; i2++) {
      let prefix = parts.slice(0, i2).join(" ");
      checkPrefix(prefix, true);
      if (!scopeObj[prefix])
        scopeObj[prefix] = {
          preventDefault: true,
          stopPropagation: false,
          run: [(view) => {
            let ourObj = storedPrefix = { view, prefix, scope };
            setTimeout(() => {
              if (storedPrefix == ourObj)
                storedPrefix = null;
            }, PrefixTimeout);
            return true;
          }]
        };
    }
    let full = parts.join(" ");
    checkPrefix(full, false);
    let binding = scopeObj[full] || (scopeObj[full] = {
      preventDefault: false,
      stopPropagation: false,
      run: ((_b2 = (_a3 = scopeObj._any) === null || _a3 === void 0 ? void 0 : _a3.run) === null || _b2 === void 0 ? void 0 : _b2.slice()) || []
    });
    if (command2)
      binding.run.push(command2);
    if (preventDefault)
      binding.preventDefault = true;
    if (stopPropagation)
      binding.stopPropagation = true;
  };
  for (let b2 of bindings) {
    let scopes = b2.scope ? b2.scope.split(" ") : ["editor"];
    if (b2.any)
      for (let scope of scopes) {
        let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
        if (!scopeObj._any)
          scopeObj._any = { preventDefault: false, stopPropagation: false, run: [] };
        let { any } = b2;
        for (let key in scopeObj)
          scopeObj[key].run.push((view) => any(view, currentKeyEvent));
      }
    let name2 = b2[platform] || b2.key;
    if (!name2)
      continue;
    for (let scope of scopes) {
      add2(scope, name2, b2.run, b2.preventDefault, b2.stopPropagation);
      if (b2.shift)
        add2(scope, "Shift-" + name2, b2.shift, b2.preventDefault, b2.stopPropagation);
    }
  }
  return bound;
}
var currentKeyEvent = null;
function runHandlers(map, event, view, scope) {
  currentKeyEvent = event;
  let name2 = keyName(event);
  let charCode = codePointAt(name2, 0), isChar = codePointSize(charCode) == name2.length && name2 != " ";
  let prefix = "", handled = false, prevented = false, stopPropagation = false;
  if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
    prefix = storedPrefix.prefix + " ";
    if (modifierCodes.indexOf(event.keyCode) < 0) {
      prevented = true;
      storedPrefix = null;
    }
  }
  let ran = /* @__PURE__ */ new Set();
  let runFor = (binding) => {
    if (binding) {
      for (let cmd2 of binding.run)
        if (!ran.has(cmd2)) {
          ran.add(cmd2);
          if (cmd2(view)) {
            if (binding.stopPropagation)
              stopPropagation = true;
            return true;
          }
        }
      if (binding.preventDefault) {
        if (binding.stopPropagation)
          stopPropagation = true;
        prevented = true;
      }
    }
    return false;
  };
  let scopeObj = map[scope], baseName, shiftName;
  if (scopeObj) {
    if (runFor(scopeObj[prefix + modifiers(name2, event, !isChar)])) {
      handled = true;
    } else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
    !(browser.windows && event.ctrlKey && event.altKey) && (baseName = base[event.keyCode]) && baseName != name2) {
      if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) {
        handled = true;
      } else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name2 && shiftName != baseName && runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) {
        handled = true;
      }
    } else if (isChar && event.shiftKey && runFor(scopeObj[prefix + modifiers(name2, event, true)])) {
      handled = true;
    }
    if (!handled && runFor(scopeObj._any))
      handled = true;
  }
  if (prevented)
    handled = true;
  if (handled && stopPropagation)
    event.stopPropagation();
  currentKeyEvent = null;
  return handled;
}
var RectangleMarker = class _RectangleMarker {
  /**
  Create a marker with the given class and dimensions. If `width`
  is null, the DOM element will get no width style.
  */
  constructor(className, left, top2, width, height) {
    this.className = className;
    this.left = left;
    this.top = top2;
    this.width = width;
    this.height = height;
  }
  draw() {
    let elt2 = document.createElement("div");
    elt2.className = this.className;
    this.adjust(elt2);
    return elt2;
  }
  update(elt2, prev) {
    if (prev.className != this.className)
      return false;
    this.adjust(elt2);
    return true;
  }
  adjust(elt2) {
    elt2.style.left = this.left + "px";
    elt2.style.top = this.top + "px";
    if (this.width != null)
      elt2.style.width = this.width + "px";
    elt2.style.height = this.height + "px";
  }
  eq(p2) {
    return this.left == p2.left && this.top == p2.top && this.width == p2.width && this.height == p2.height && this.className == p2.className;
  }
  /**
  Create a set of rectangles for the given selection range,
  assigning them theclass`className`. Will create a single
  rectangle for empty ranges, and a set of selection-style
  rectangles covering the range's content (in a bidi-aware
  way) for non-empty ones.
  */
  static forRange(view, className, range) {
    if (range.empty) {
      let pos = view.coordsAtPos(range.head, range.assoc || 1);
      if (!pos)
        return [];
      let base2 = getBase(view);
      return [new _RectangleMarker(className, pos.left - base2.left, pos.top - base2.top, null, pos.bottom - pos.top)];
    } else {
      return rectanglesForRange(view, className, range);
    }
  }
};
function getBase(view) {
  let rect = view.scrollDOM.getBoundingClientRect();
  let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth * view.scaleX;
  return { left: left - view.scrollDOM.scrollLeft * view.scaleX, top: rect.top - view.scrollDOM.scrollTop * view.scaleY };
}
function wrappedLine(view, pos, side, inside2) {
  let coords = view.coordsAtPos(pos, side * 2);
  if (!coords)
    return inside2;
  let editorRect = view.dom.getBoundingClientRect();
  let y2 = (coords.top + coords.bottom) / 2;
  let left = view.posAtCoords({ x: editorRect.left + 1, y: y2 });
  let right = view.posAtCoords({ x: editorRect.right - 1, y: y2 });
  if (left == null || right == null)
    return inside2;
  return { from: Math.max(inside2.from, Math.min(left, right)), to: Math.min(inside2.to, Math.max(left, right)) };
}
function rectanglesForRange(view, className, range) {
  if (range.to <= view.viewport.from || range.from >= view.viewport.to)
    return [];
  let from = Math.max(range.from, view.viewport.from), to2 = Math.min(range.to, view.viewport.to);
  let ltr = view.textDirection == Direction.LTR;
  let content2 = view.contentDOM, contentRect = content2.getBoundingClientRect(), base2 = getBase(view);
  let lineElt = content2.querySelector(".cm-line"), lineStyle = lineElt && window.getComputedStyle(lineElt);
  let leftSide = contentRect.left + (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);
  let rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);
  let startBlock = blockAt(view, from), endBlock = blockAt(view, to2);
  let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
  let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
  if (visualStart && (view.lineWrapping || startBlock.widgetLineBreaks))
    visualStart = wrappedLine(view, from, 1, visualStart);
  if (visualEnd && (view.lineWrapping || endBlock.widgetLineBreaks))
    visualEnd = wrappedLine(view, to2, -1, visualEnd);
  if (visualStart && visualEnd && visualStart.from == visualEnd.from && visualStart.to == visualEnd.to) {
    return pieces(drawForLine(range.from, range.to, visualStart));
  } else {
    let top2 = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
    let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
    let between = [];
    if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) || startBlock.widgetLineBreaks > 1 && top2.bottom + view.defaultLineHeight / 2 < bottom.top)
      between.push(piece(leftSide, top2.bottom, rightSide, bottom.top));
    else if (top2.bottom < bottom.top && view.elementAtHeight((top2.bottom + bottom.top) / 2).type == BlockType.Text)
      top2.bottom = bottom.top = (top2.bottom + bottom.top) / 2;
    return pieces(top2).concat(between).concat(pieces(bottom));
  }
  function piece(left, top2, right, bottom) {
    return new RectangleMarker(
      className,
      left - base2.left,
      top2 - base2.top - 0.01,
      right - left,
      bottom - top2 + 0.01
      /* C.Epsilon */
    );
  }
  function pieces({ top: top2, bottom, horizontal }) {
    let pieces2 = [];
    for (let i2 = 0; i2 < horizontal.length; i2 += 2)
      pieces2.push(piece(horizontal[i2], top2, horizontal[i2 + 1], bottom));
    return pieces2;
  }
  function drawForLine(from2, to3, line) {
    let top2 = 1e9, bottom = -1e9, horizontal = [];
    function addSpan(from3, fromOpen, to4, toOpen, dir) {
      let fromCoords = view.coordsAtPos(from3, from3 == line.to ? -2 : 2);
      let toCoords = view.coordsAtPos(to4, to4 == line.from ? 2 : -2);
      if (!fromCoords || !toCoords)
        return;
      top2 = Math.min(fromCoords.top, toCoords.top, top2);
      bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
      if (dir == Direction.LTR)
        horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
      else
        horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
    }
    let start = from2 !== null && from2 !== void 0 ? from2 : line.from, end = to3 !== null && to3 !== void 0 ? to3 : line.to;
    for (let r2 of view.visibleRanges)
      if (r2.to > start && r2.from < end) {
        for (let pos = Math.max(r2.from, start), endPos = Math.min(r2.to, end); ; ) {
          let docLine = view.state.doc.lineAt(pos);
          for (let span of view.bidiSpans(docLine)) {
            let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
            if (spanFrom >= endPos)
              break;
            if (spanTo > pos)
              addSpan(Math.max(spanFrom, pos), from2 == null && spanFrom <= start, Math.min(spanTo, endPos), to3 == null && spanTo >= end, span.dir);
          }
          pos = docLine.to + 1;
          if (pos >= endPos)
            break;
        }
      }
    if (horizontal.length == 0)
      addSpan(start, from2 == null, end, to3 == null, view.textDirection);
    return { top: top2, bottom, horizontal };
  }
  function drawForWidget(block, top2) {
    let y2 = contentRect.top + (top2 ? block.top : block.bottom);
    return { top: y2, bottom: y2, horizontal: [] };
  }
}
function sameMarker(a2, b2) {
  return a2.constructor == b2.constructor && a2.eq(b2);
}
var LayerView = class {
  constructor(view, layer2) {
    this.view = view;
    this.layer = layer2;
    this.drawn = [];
    this.scaleX = 1;
    this.scaleY = 1;
    this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) };
    this.dom = view.scrollDOM.appendChild(document.createElement("div"));
    this.dom.classList.add("cm-layer");
    if (layer2.above)
      this.dom.classList.add("cm-layer-above");
    if (layer2.class)
      this.dom.classList.add(layer2.class);
    this.scale();
    this.dom.setAttribute("aria-hidden", "true");
    this.setOrder(view.state);
    view.requestMeasure(this.measureReq);
    if (layer2.mount)
      layer2.mount(this.dom, view);
  }
  update(update) {
    if (update.startState.facet(layerOrder) != update.state.facet(layerOrder))
      this.setOrder(update.state);
    if (this.layer.update(update, this.dom) || update.geometryChanged) {
      this.scale();
      update.view.requestMeasure(this.measureReq);
    }
  }
  docViewUpdate(view) {
    if (this.layer.updateOnDocViewUpdate !== false)
      view.requestMeasure(this.measureReq);
  }
  setOrder(state) {
    let pos = 0, order = state.facet(layerOrder);
    while (pos < order.length && order[pos] != this.layer)
      pos++;
    this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);
  }
  measure() {
    return this.layer.markers(this.view);
  }
  scale() {
    let { scaleX, scaleY } = this.view;
    if (scaleX != this.scaleX || scaleY != this.scaleY) {
      this.scaleX = scaleX;
      this.scaleY = scaleY;
      this.dom.style.transform = `scale(${1 / scaleX}, ${1 / scaleY})`;
    }
  }
  draw(markers) {
    if (markers.length != this.drawn.length || markers.some((p2, i2) => !sameMarker(p2, this.drawn[i2]))) {
      let old = this.dom.firstChild, oldI = 0;
      for (let marker of markers) {
        if (marker.update && old && marker.constructor && this.drawn[oldI].constructor && marker.update(old, this.drawn[oldI])) {
          old = old.nextSibling;
          oldI++;
        } else {
          this.dom.insertBefore(marker.draw(), old);
        }
      }
      while (old) {
        let next = old.nextSibling;
        old.remove();
        old = next;
      }
      this.drawn = markers;
    }
  }
  destroy() {
    if (this.layer.destroy)
      this.layer.destroy(this.dom, this.view);
    this.dom.remove();
  }
};
var layerOrder = /* @__PURE__ */ Facet.define();
function layer(config2) {
  return [
    ViewPlugin.define((v2) => new LayerView(v2, config2)),
    layerOrder.of(config2)
  ];
}
var CanHidePrimary = !browser.ios;
var selectionConfig = /* @__PURE__ */ Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      cursorBlinkRate: 1200,
      drawRangeCursor: true
    }, {
      cursorBlinkRate: (a2, b2) => Math.min(a2, b2),
      drawRangeCursor: (a2, b2) => a2 || b2
    });
  }
});
function drawSelection(config2 = {}) {
  return [
    selectionConfig.of(config2),
    cursorLayer,
    selectionLayer,
    hideNativeSelection,
    nativeSelectionHidden.of(true)
  ];
}
function getDrawSelectionConfig(state) {
  return state.facet(selectionConfig);
}
function configChanged(update) {
  return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
}
var cursorLayer = /* @__PURE__ */ layer({
  above: true,
  markers(view) {
    let { state } = view, conf = state.facet(selectionConfig);
    let cursors = [];
    for (let r2 of state.selection.ranges) {
      let prim = r2 == state.selection.main;
      if (r2.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
        let className = prim ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary";
        let cursor = r2.empty ? r2 : EditorSelection.cursor(r2.head, r2.head > r2.anchor ? -1 : 1);
        for (let piece of RectangleMarker.forRange(view, className, cursor))
          cursors.push(piece);
      }
    }
    return cursors;
  },
  update(update, dom) {
    if (update.transactions.some((tr2) => tr2.selection))
      dom.style.animationName = dom.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
    let confChange = configChanged(update);
    if (confChange)
      setBlinkRate(update.state, dom);
    return update.docChanged || update.selectionSet || confChange;
  },
  mount(dom, view) {
    setBlinkRate(view.state, dom);
  },
  class: "cm-cursorLayer"
});
function setBlinkRate(state, dom) {
  dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + "ms";
}
var selectionLayer = /* @__PURE__ */ layer({
  above: false,
  markers(view) {
    return view.state.selection.ranges.map((r2) => r2.empty ? [] : RectangleMarker.forRange(view, "cm-selectionBackground", r2)).reduce((a2, b2) => a2.concat(b2));
  },
  update(update, dom) {
    return update.docChanged || update.selectionSet || update.viewportChanged || configChanged(update);
  },
  class: "cm-selectionLayer"
});
var themeSpec = {
  ".cm-line": {
    "& ::selection, &::selection": { backgroundColor: "transparent !important" }
  },
  ".cm-content": {
    "& :focus": {
      caretColor: "initial !important",
      "&::selection, & ::selection": {
        backgroundColor: "Highlight !important"
      }
    }
  }
};
if (CanHidePrimary)
  themeSpec[".cm-line"].caretColor = themeSpec[".cm-content"].caretColor = "transparent !important";
var hideNativeSelection = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ EditorView.theme(themeSpec));
var setDropCursorPos = /* @__PURE__ */ StateEffect.define({
  map(pos, mapping) {
    return pos == null ? null : mapping.mapPos(pos);
  }
});
var dropCursorPos = /* @__PURE__ */ StateField.define({
  create() {
    return null;
  },
  update(pos, tr2) {
    if (pos != null)
      pos = tr2.changes.mapPos(pos);
    return tr2.effects.reduce((pos2, e25) => e25.is(setDropCursorPos) ? e25.value : pos2, pos);
  }
});
var drawDropCursor = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.cursor = null;
    this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
  }
  update(update) {
    var _a3;
    let cursorPos = update.state.field(dropCursorPos);
    if (cursorPos == null) {
      if (this.cursor != null) {
        (_a3 = this.cursor) === null || _a3 === void 0 ? void 0 : _a3.remove();
        this.cursor = null;
      }
    } else {
      if (!this.cursor) {
        this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
        this.cursor.className = "cm-dropCursor";
      }
      if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)
        this.view.requestMeasure(this.measureReq);
    }
  }
  readPos() {
    let { view } = this;
    let pos = view.state.field(dropCursorPos);
    let rect = pos != null && view.coordsAtPos(pos);
    if (!rect)
      return null;
    let outer = view.scrollDOM.getBoundingClientRect();
    return {
      left: rect.left - outer.left + view.scrollDOM.scrollLeft * view.scaleX,
      top: rect.top - outer.top + view.scrollDOM.scrollTop * view.scaleY,
      height: rect.bottom - rect.top
    };
  }
  drawCursor(pos) {
    if (this.cursor) {
      let { scaleX, scaleY } = this.view;
      if (pos) {
        this.cursor.style.left = pos.left / scaleX + "px";
        this.cursor.style.top = pos.top / scaleY + "px";
        this.cursor.style.height = pos.height / scaleY + "px";
      } else {
        this.cursor.style.left = "-100000px";
      }
    }
  }
  destroy() {
    if (this.cursor)
      this.cursor.remove();
  }
  setDropPos(pos) {
    if (this.view.state.field(dropCursorPos) != pos)
      this.view.dispatch({ effects: setDropCursorPos.of(pos) });
  }
}, {
  eventObservers: {
    dragover(event) {
      this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));
    },
    dragleave(event) {
      if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))
        this.setDropPos(null);
    },
    dragend() {
      this.setDropPos(null);
    },
    drop() {
      this.setDropPos(null);
    }
  }
});
function dropCursor() {
  return [dropCursorPos, drawDropCursor];
}
function iterMatches(doc2, re2, from, to2, f2) {
  re2.lastIndex = 0;
  for (let cursor = doc2.iterRange(from, to2), pos = from, m2; !cursor.next().done; pos += cursor.value.length) {
    if (!cursor.lineBreak)
      while (m2 = re2.exec(cursor.value))
        f2(pos + m2.index, m2);
  }
}
function matchRanges(view, maxLength) {
  let visible = view.visibleRanges;
  if (visible.length == 1 && visible[0].from == view.viewport.from && visible[0].to == view.viewport.to)
    return visible;
  let result = [];
  for (let { from, to: to2 } of visible) {
    from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
    to2 = Math.min(view.state.doc.lineAt(to2).to, to2 + maxLength);
    if (result.length && result[result.length - 1].to >= from)
      result[result.length - 1].to = to2;
    else
      result.push({ from, to: to2 });
  }
  return result;
}
var MatchDecorator = class {
  /**
  Create a decorator.
  */
  constructor(config2) {
    const { regexp, decoration, decorate, boundary, maxLength = 1e3 } = config2;
    if (!regexp.global)
      throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
    this.regexp = regexp;
    if (decorate) {
      this.addMatch = (match, view, from, add2) => decorate(add2, from, from + match[0].length, match, view);
    } else if (typeof decoration == "function") {
      this.addMatch = (match, view, from, add2) => {
        let deco = decoration(match, view, from);
        if (deco)
          add2(from, from + match[0].length, deco);
      };
    } else if (decoration) {
      this.addMatch = (match, _view, from, add2) => add2(from, from + match[0].length, decoration);
    } else {
      throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
    }
    this.boundary = boundary;
    this.maxLength = maxLength;
  }
  /**
  Compute the full set of decorations for matches in the given
  view's viewport. You'll want to call this when initializing your
  plugin.
  */
  createDeco(view) {
    let build = new RangeSetBuilder(), add2 = build.add.bind(build);
    for (let { from, to: to2 } of matchRanges(view, this.maxLength))
      iterMatches(view.state.doc, this.regexp, from, to2, (from2, m2) => this.addMatch(m2, view, from2, add2));
    return build.finish();
  }
  /**
  Update a set of decorations for a view update. `deco` _must_ be
  the set of decorations produced by _this_ `MatchDecorator` for
  the view state before the update.
  */
  updateDeco(update, deco) {
    let changeFrom = 1e9, changeTo = -1;
    if (update.docChanged)
      update.changes.iterChanges((_f2, _t2, from, to2) => {
        if (to2 > update.view.viewport.from && from < update.view.viewport.to) {
          changeFrom = Math.min(from, changeFrom);
          changeTo = Math.max(to2, changeTo);
        }
      });
    if (update.viewportChanged || changeTo - changeFrom > 1e3)
      return this.createDeco(update.view);
    if (changeTo > -1)
      return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
    return deco;
  }
  updateRange(view, deco, updateFrom, updateTo) {
    for (let r2 of view.visibleRanges) {
      let from = Math.max(r2.from, updateFrom), to2 = Math.min(r2.to, updateTo);
      if (to2 > from) {
        let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to2 ? view.state.doc.lineAt(to2) : fromLine;
        let start = Math.max(r2.from, fromLine.from), end = Math.min(r2.to, toLine.to);
        if (this.boundary) {
          for (; from > fromLine.from; from--)
            if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
              start = from;
              break;
            }
          for (; to2 < toLine.to; to2++)
            if (this.boundary.test(toLine.text[to2 - toLine.from])) {
              end = to2;
              break;
            }
        }
        let ranges = [], m2;
        let add2 = (from2, to3, deco2) => ranges.push(deco2.range(from2, to3));
        if (fromLine == toLine) {
          this.regexp.lastIndex = start - fromLine.from;
          while ((m2 = this.regexp.exec(fromLine.text)) && m2.index < end - fromLine.from)
            this.addMatch(m2, view, m2.index + fromLine.from, add2);
        } else {
          iterMatches(view.state.doc, this.regexp, start, end, (from2, m3) => this.addMatch(m3, view, from2, add2));
        }
        deco = deco.update({ filterFrom: start, filterTo: end, filter: (from2, to3) => from2 < start || to3 > end, add: ranges });
      }
    }
    return deco;
  }
};
var UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
var Specials = /* @__PURE__ */ new RegExp("[\0-\b\n-\x7F-\x9F\xAD\u061C\u200B\u200E\u200F\u2028\u2029\u202D\u202E\u2066\u2067\u2069\uFEFF\uFFF9-\uFFFC]", UnicodeRegexpSupport);
var Names = {
  0: "null",
  7: "bell",
  8: "backspace",
  10: "newline",
  11: "vertical tab",
  13: "carriage return",
  27: "escape",
  8203: "zero width space",
  8204: "zero width non-joiner",
  8205: "zero width joiner",
  8206: "left-to-right mark",
  8207: "right-to-left mark",
  8232: "line separator",
  8237: "left-to-right override",
  8238: "right-to-left override",
  8294: "left-to-right isolate",
  8295: "right-to-left isolate",
  8297: "pop directional isolate",
  8233: "paragraph separator",
  65279: "zero width no-break space",
  65532: "object replacement"
};
var _supportsTabSize = null;
function supportsTabSize() {
  var _a3;
  if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
    let styles = document.body.style;
    _supportsTabSize = ((_a3 = styles.tabSize) !== null && _a3 !== void 0 ? _a3 : styles.MozTabSize) != null;
  }
  return _supportsTabSize || false;
}
var specialCharConfig = /* @__PURE__ */ Facet.define({
  combine(configs) {
    let config2 = combineConfig(configs, {
      render: null,
      specialChars: Specials,
      addSpecialChars: null
    });
    if (config2.replaceTabs = !supportsTabSize())
      config2.specialChars = new RegExp("	|" + config2.specialChars.source, UnicodeRegexpSupport);
    if (config2.addSpecialChars)
      config2.specialChars = new RegExp(config2.specialChars.source + "|" + config2.addSpecialChars.source, UnicodeRegexpSupport);
    return config2;
  }
});
function highlightSpecialChars(config2 = {}) {
  return [specialCharConfig.of(config2), specialCharPlugin()];
}
var _plugin = null;
function specialCharPlugin() {
  return _plugin || (_plugin = ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.decorations = Decoration.none;
      this.decorationCache = /* @__PURE__ */ Object.create(null);
      this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
      this.decorations = this.decorator.createDeco(view);
    }
    makeDecorator(conf) {
      return new MatchDecorator({
        regexp: conf.specialChars,
        decoration: (m2, view, pos) => {
          let { doc: doc2 } = view.state;
          let code = codePointAt(m2[0], 0);
          if (code == 9) {
            let line = doc2.lineAt(pos);
            let size = view.state.tabSize, col = countColumn(line.text, size, pos - line.from);
            return Decoration.replace({
              widget: new TabWidget((size - col % size) * this.view.defaultCharacterWidth / this.view.scaleX)
            });
          }
          return this.decorationCache[code] || (this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(conf, code) }));
        },
        boundary: conf.replaceTabs ? void 0 : /[^]/
      });
    }
    update(update) {
      let conf = update.state.facet(specialCharConfig);
      if (update.startState.facet(specialCharConfig) != conf) {
        this.decorator = this.makeDecorator(conf);
        this.decorations = this.decorator.createDeco(update.view);
      } else {
        this.decorations = this.decorator.updateDeco(update, this.decorations);
      }
    }
  }, {
    decorations: (v2) => v2.decorations
  }));
}
var DefaultPlaceholder = "\u2022";
function placeholder$1(code) {
  if (code >= 32)
    return DefaultPlaceholder;
  if (code == 10)
    return "\u2424";
  return String.fromCharCode(9216 + code);
}
var SpecialCharWidget = class extends WidgetType {
  constructor(options, code) {
    super();
    this.options = options;
    this.code = code;
  }
  eq(other) {
    return other.code == this.code;
  }
  toDOM(view) {
    let ph2 = placeholder$1(this.code);
    let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
    let custom = this.options.render && this.options.render(this.code, desc, ph2);
    if (custom)
      return custom;
    let span = document.createElement("span");
    span.textContent = ph2;
    span.title = desc;
    span.setAttribute("aria-label", desc);
    span.className = "cm-specialChar";
    return span;
  }
  ignoreEvent() {
    return false;
  }
};
var TabWidget = class extends WidgetType {
  constructor(width) {
    super();
    this.width = width;
  }
  eq(other) {
    return other.width == this.width;
  }
  toDOM() {
    let span = document.createElement("span");
    span.textContent = "	";
    span.className = "cm-tab";
    span.style.width = this.width + "px";
    return span;
  }
  ignoreEvent() {
    return false;
  }
};
function highlightActiveLine() {
  return activeLineHighlighter;
}
var lineDeco = /* @__PURE__ */ Decoration.line({ class: "cm-activeLine" });
var activeLineHighlighter = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.decorations = this.getDeco(view);
  }
  update(update) {
    if (update.docChanged || update.selectionSet)
      this.decorations = this.getDeco(update.view);
  }
  getDeco(view) {
    let lastLineStart = -1, deco = [];
    for (let r2 of view.state.selection.ranges) {
      let line = view.lineBlockAt(r2.head);
      if (line.from > lastLineStart) {
        deco.push(lineDeco.range(line.from));
        lastLineStart = line.from;
      }
    }
    return Decoration.set(deco);
  }
}, {
  decorations: (v2) => v2.decorations
});
var MaxOff = 2e3;
function rectangleFor(state, a2, b2) {
  let startLine = Math.min(a2.line, b2.line), endLine = Math.max(a2.line, b2.line);
  let ranges = [];
  if (a2.off > MaxOff || b2.off > MaxOff || a2.col < 0 || b2.col < 0) {
    let startOff = Math.min(a2.off, b2.off), endOff = Math.max(a2.off, b2.off);
    for (let i2 = startLine; i2 <= endLine; i2++) {
      let line = state.doc.line(i2);
      if (line.length <= endOff)
        ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));
    }
  } else {
    let startCol = Math.min(a2.col, b2.col), endCol = Math.max(a2.col, b2.col);
    for (let i2 = startLine; i2 <= endLine; i2++) {
      let line = state.doc.line(i2);
      let start = findColumn(line.text, startCol, state.tabSize, true);
      if (start < 0) {
        ranges.push(EditorSelection.cursor(line.to));
      } else {
        let end = findColumn(line.text, endCol, state.tabSize);
        ranges.push(EditorSelection.range(line.from + start, line.from + end));
      }
    }
  }
  return ranges;
}
function absoluteColumn(view, x2) {
  let ref = view.coordsAtPos(view.viewport.from);
  return ref ? Math.round(Math.abs((ref.left - x2) / view.defaultCharacterWidth)) : -1;
}
function getPos(view, event) {
  let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
  let line = view.state.doc.lineAt(offset), off2 = offset - line.from;
  let col = off2 > MaxOff ? -1 : off2 == line.length ? absoluteColumn(view, event.clientX) : countColumn(line.text, view.state.tabSize, offset - line.from);
  return { line: line.number, col, off: off2 };
}
function rectangleSelectionStyle(view, event) {
  let start = getPos(view, event), startSel = view.state.selection;
  if (!start)
    return null;
  return {
    update(update) {
      if (update.docChanged) {
        let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);
        let newLine = update.state.doc.lineAt(newStart);
        start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };
        startSel = startSel.map(update.changes);
      }
    },
    get(event2, _extend, multiple) {
      let cur2 = getPos(view, event2);
      if (!cur2)
        return startSel;
      let ranges = rectangleFor(view.state, start, cur2);
      if (!ranges.length)
        return startSel;
      if (multiple)
        return EditorSelection.create(ranges.concat(startSel.ranges));
      else
        return EditorSelection.create(ranges);
    }
  };
}
function rectangularSelection(options) {
  let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || ((e25) => e25.altKey && e25.button == 0);
  return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);
}
var keys = {
  Alt: [18, (e25) => !!e25.altKey],
  Control: [17, (e25) => !!e25.ctrlKey],
  Shift: [16, (e25) => !!e25.shiftKey],
  Meta: [91, (e25) => !!e25.metaKey]
};
var showCrosshair = { style: "cursor: crosshair" };
function crosshairCursor(options = {}) {
  let [code, getter] = keys[options.key || "Alt"];
  let plugin = ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.isDown = false;
    }
    set(isDown) {
      if (this.isDown != isDown) {
        this.isDown = isDown;
        this.view.update([]);
      }
    }
  }, {
    eventObservers: {
      keydown(e25) {
        this.set(e25.keyCode == code || getter(e25));
      },
      keyup(e25) {
        if (e25.keyCode == code || !getter(e25))
          this.set(false);
      },
      mousemove(e25) {
        this.set(getter(e25));
      }
    }
  });
  return [
    plugin,
    EditorView.contentAttributes.of((view) => {
      var _a3;
      return ((_a3 = view.plugin(plugin)) === null || _a3 === void 0 ? void 0 : _a3.isDown) ? showCrosshair : null;
    })
  ];
}
var Outside = "-10000px";
var TooltipViewManager = class {
  constructor(view, facet, createTooltipView, removeTooltipView) {
    this.facet = facet;
    this.createTooltipView = createTooltipView;
    this.removeTooltipView = removeTooltipView;
    this.input = view.state.facet(facet);
    this.tooltips = this.input.filter((t3) => t3);
    let prev = null;
    this.tooltipViews = this.tooltips.map((t3) => prev = createTooltipView(t3, prev));
  }
  update(update, above) {
    var _a3;
    let input = update.state.facet(this.facet);
    let tooltips = input.filter((x2) => x2);
    if (input === this.input) {
      for (let t3 of this.tooltipViews)
        if (t3.update)
          t3.update(update);
      return false;
    }
    let tooltipViews = [], newAbove = above ? [] : null;
    for (let i2 = 0; i2 < tooltips.length; i2++) {
      let tip = tooltips[i2], known = -1;
      if (!tip)
        continue;
      for (let i3 = 0; i3 < this.tooltips.length; i3++) {
        let other = this.tooltips[i3];
        if (other && other.create == tip.create)
          known = i3;
      }
      if (known < 0) {
        tooltipViews[i2] = this.createTooltipView(tip, i2 ? tooltipViews[i2 - 1] : null);
        if (newAbove)
          newAbove[i2] = !!tip.above;
      } else {
        let tooltipView = tooltipViews[i2] = this.tooltipViews[known];
        if (newAbove)
          newAbove[i2] = above[known];
        if (tooltipView.update)
          tooltipView.update(update);
      }
    }
    for (let t3 of this.tooltipViews)
      if (tooltipViews.indexOf(t3) < 0) {
        this.removeTooltipView(t3);
        (_a3 = t3.destroy) === null || _a3 === void 0 ? void 0 : _a3.call(t3);
      }
    if (above) {
      newAbove.forEach((val, i2) => above[i2] = val);
      above.length = newAbove.length;
    }
    this.input = input;
    this.tooltips = tooltips;
    this.tooltipViews = tooltipViews;
    return true;
  }
};
function windowSpace(view) {
  let { win } = view;
  return { top: 0, left: 0, bottom: win.innerHeight, right: win.innerWidth };
}
var tooltipConfig = /* @__PURE__ */ Facet.define({
  combine: (values2) => {
    var _a3, _b2, _c2;
    return {
      position: browser.ios ? "absolute" : ((_a3 = values2.find((conf) => conf.position)) === null || _a3 === void 0 ? void 0 : _a3.position) || "fixed",
      parent: ((_b2 = values2.find((conf) => conf.parent)) === null || _b2 === void 0 ? void 0 : _b2.parent) || null,
      tooltipSpace: ((_c2 = values2.find((conf) => conf.tooltipSpace)) === null || _c2 === void 0 ? void 0 : _c2.tooltipSpace) || windowSpace
    };
  }
});
var knownHeight = /* @__PURE__ */ new WeakMap();
var tooltipPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.above = [];
    this.inView = true;
    this.madeAbsolute = false;
    this.lastTransaction = 0;
    this.measureTimeout = -1;
    let config2 = view.state.facet(tooltipConfig);
    this.position = config2.position;
    this.parent = config2.parent;
    this.classes = view.themeClasses;
    this.createContainer();
    this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
    this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(() => this.measureSoon()) : null;
    this.manager = new TooltipViewManager(view, showTooltip, (t3, p2) => this.createTooltip(t3, p2), (t3) => {
      if (this.resizeObserver)
        this.resizeObserver.unobserve(t3.dom);
      t3.dom.remove();
    });
    this.above = this.manager.tooltips.map((t3) => !!t3.above);
    this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((entries) => {
      if (Date.now() > this.lastTransaction - 50 && entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
        this.measureSoon();
    }, { threshold: [1] }) : null;
    this.observeIntersection();
    view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
    this.maybeMeasure();
  }
  createContainer() {
    if (this.parent) {
      this.container = document.createElement("div");
      this.container.style.position = "relative";
      this.container.className = this.view.themeClasses;
      this.parent.appendChild(this.container);
    } else {
      this.container = this.view.dom;
    }
  }
  observeIntersection() {
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
      for (let tooltip of this.manager.tooltipViews)
        this.intersectionObserver.observe(tooltip.dom);
    }
  }
  measureSoon() {
    if (this.measureTimeout < 0)
      this.measureTimeout = setTimeout(() => {
        this.measureTimeout = -1;
        this.maybeMeasure();
      }, 50);
  }
  update(update) {
    if (update.transactions.length)
      this.lastTransaction = Date.now();
    let updated = this.manager.update(update, this.above);
    if (updated)
      this.observeIntersection();
    let shouldMeasure = updated || update.geometryChanged;
    let newConfig = update.state.facet(tooltipConfig);
    if (newConfig.position != this.position && !this.madeAbsolute) {
      this.position = newConfig.position;
      for (let t3 of this.manager.tooltipViews)
        t3.dom.style.position = this.position;
      shouldMeasure = true;
    }
    if (newConfig.parent != this.parent) {
      if (this.parent)
        this.container.remove();
      this.parent = newConfig.parent;
      this.createContainer();
      for (let t3 of this.manager.tooltipViews)
        this.container.appendChild(t3.dom);
      shouldMeasure = true;
    } else if (this.parent && this.view.themeClasses != this.classes) {
      this.classes = this.container.className = this.view.themeClasses;
    }
    if (shouldMeasure)
      this.maybeMeasure();
  }
  createTooltip(tooltip, prev) {
    let tooltipView = tooltip.create(this.view);
    let before = prev ? prev.dom : null;
    tooltipView.dom.classList.add("cm-tooltip");
    if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
      let arrow = document.createElement("div");
      arrow.className = "cm-tooltip-arrow";
      tooltipView.dom.appendChild(arrow);
    }
    tooltipView.dom.style.position = this.position;
    tooltipView.dom.style.top = Outside;
    tooltipView.dom.style.left = "0px";
    this.container.insertBefore(tooltipView.dom, before);
    if (tooltipView.mount)
      tooltipView.mount(this.view);
    if (this.resizeObserver)
      this.resizeObserver.observe(tooltipView.dom);
    return tooltipView;
  }
  destroy() {
    var _a3, _b2, _c2;
    this.view.win.removeEventListener("resize", this.measureSoon);
    for (let tooltipView of this.manager.tooltipViews) {
      tooltipView.dom.remove();
      (_a3 = tooltipView.destroy) === null || _a3 === void 0 ? void 0 : _a3.call(tooltipView);
    }
    if (this.parent)
      this.container.remove();
    (_b2 = this.resizeObserver) === null || _b2 === void 0 ? void 0 : _b2.disconnect();
    (_c2 = this.intersectionObserver) === null || _c2 === void 0 ? void 0 : _c2.disconnect();
    clearTimeout(this.measureTimeout);
  }
  readMeasure() {
    let editor = this.view.dom.getBoundingClientRect();
    let scaleX = 1, scaleY = 1, makeAbsolute = false;
    if (this.position == "fixed" && this.manager.tooltipViews.length) {
      let { dom } = this.manager.tooltipViews[0];
      if (browser.gecko) {
        makeAbsolute = dom.offsetParent != this.container.ownerDocument.body;
      } else if (dom.style.top == Outside && dom.style.left == "0px") {
        let rect = dom.getBoundingClientRect();
        makeAbsolute = Math.abs(rect.top + 1e4) > 1 || Math.abs(rect.left) > 1;
      }
    }
    if (makeAbsolute || this.position == "absolute") {
      if (this.parent) {
        let rect = this.parent.getBoundingClientRect();
        if (rect.width && rect.height) {
          scaleX = rect.width / this.parent.offsetWidth;
          scaleY = rect.height / this.parent.offsetHeight;
        }
      } else {
        ({ scaleX, scaleY } = this.view.viewState);
      }
    }
    return {
      editor,
      parent: this.parent ? this.container.getBoundingClientRect() : editor,
      pos: this.manager.tooltips.map((t3, i2) => {
        let tv2 = this.manager.tooltipViews[i2];
        return tv2.getCoords ? tv2.getCoords(t3.pos) : this.view.coordsAtPos(t3.pos);
      }),
      size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
      space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
      scaleX,
      scaleY,
      makeAbsolute
    };
  }
  writeMeasure(measured) {
    var _a3;
    if (measured.makeAbsolute) {
      this.madeAbsolute = true;
      this.position = "absolute";
      for (let t3 of this.manager.tooltipViews)
        t3.dom.style.position = "absolute";
    }
    let { editor, space: space4, scaleX, scaleY } = measured;
    let others = [];
    for (let i2 = 0; i2 < this.manager.tooltips.length; i2++) {
      let tooltip = this.manager.tooltips[i2], tView = this.manager.tooltipViews[i2], { dom } = tView;
      let pos = measured.pos[i2], size = measured.size[i2];
      if (!pos || pos.bottom <= Math.max(editor.top, space4.top) || pos.top >= Math.min(editor.bottom, space4.bottom) || pos.right < Math.max(editor.left, space4.left) - 0.1 || pos.left > Math.min(editor.right, space4.right) + 0.1) {
        dom.style.top = Outside;
        continue;
      }
      let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
      let arrowHeight = arrow ? 7 : 0;
      let width = size.right - size.left, height = (_a3 = knownHeight.get(tView)) !== null && _a3 !== void 0 ? _a3 : size.bottom - size.top;
      let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;
      let left = size.width > space4.right - space4.left ? ltr ? space4.left : space4.right - size.width : ltr ? Math.max(space4.left, Math.min(pos.left - (arrow ? 14 : 0) + offset.x, space4.right - width)) : Math.min(Math.max(space4.left, pos.left - width + (arrow ? 14 : 0) - offset.x), space4.right - width);
      let above = this.above[i2];
      if (!tooltip.strictSide && (above ? pos.top - (size.bottom - size.top) - offset.y < space4.top : pos.bottom + (size.bottom - size.top) + offset.y > space4.bottom) && above == space4.bottom - pos.bottom > pos.top - space4.top)
        above = this.above[i2] = !above;
      let spaceVert = (above ? pos.top - space4.top : space4.bottom - pos.bottom) - arrowHeight;
      if (spaceVert < height && tView.resize !== false) {
        if (spaceVert < this.view.defaultLineHeight) {
          dom.style.top = Outside;
          continue;
        }
        knownHeight.set(tView, height);
        dom.style.height = (height = spaceVert) / scaleY + "px";
      } else if (dom.style.height) {
        dom.style.height = "";
      }
      let top2 = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
      let right = left + width;
      if (tView.overlap !== true) {
        for (let r2 of others)
          if (r2.left < right && r2.right > left && r2.top < top2 + height && r2.bottom > top2)
            top2 = above ? r2.top - height - 2 - arrowHeight : r2.bottom + arrowHeight + 2;
      }
      if (this.position == "absolute") {
        dom.style.top = (top2 - measured.parent.top) / scaleY + "px";
        dom.style.left = (left - measured.parent.left) / scaleX + "px";
      } else {
        dom.style.top = top2 / scaleY + "px";
        dom.style.left = left / scaleX + "px";
      }
      if (arrow) {
        let arrowLeft = pos.left + (ltr ? offset.x : -offset.x) - (left + 14 - 7);
        arrow.style.left = arrowLeft / scaleX + "px";
      }
      if (tView.overlap !== true)
        others.push({ left, top: top2, right, bottom: top2 + height });
      dom.classList.toggle("cm-tooltip-above", above);
      dom.classList.toggle("cm-tooltip-below", !above);
      if (tView.positioned)
        tView.positioned(measured.space);
    }
  }
  maybeMeasure() {
    if (this.manager.tooltips.length) {
      if (this.view.inView)
        this.view.requestMeasure(this.measureReq);
      if (this.inView != this.view.inView) {
        this.inView = this.view.inView;
        if (!this.inView)
          for (let tv2 of this.manager.tooltipViews)
            tv2.dom.style.top = Outside;
      }
    }
  }
}, {
  eventObservers: {
    scroll() {
      this.maybeMeasure();
    }
  }
});
var baseTheme = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-tooltip": {
    zIndex: 100,
    boxSizing: "border-box"
  },
  "&light .cm-tooltip": {
    border: "1px solid #bbb",
    backgroundColor: "#f5f5f5"
  },
  "&light .cm-tooltip-section:not(:first-child)": {
    borderTop: "1px solid #bbb"
  },
  "&dark .cm-tooltip": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tooltip-arrow": {
    height: `${7}px`,
    width: `${7 * 2}px`,
    position: "absolute",
    zIndex: -1,
    overflow: "hidden",
    "&:before, &:after": {
      content: "''",
      position: "absolute",
      width: 0,
      height: 0,
      borderLeft: `${7}px solid transparent`,
      borderRight: `${7}px solid transparent`
    },
    ".cm-tooltip-above &": {
      bottom: `-${7}px`,
      "&:before": {
        borderTop: `${7}px solid #bbb`
      },
      "&:after": {
        borderTop: `${7}px solid #f5f5f5`,
        bottom: "1px"
      }
    },
    ".cm-tooltip-below &": {
      top: `-${7}px`,
      "&:before": {
        borderBottom: `${7}px solid #bbb`
      },
      "&:after": {
        borderBottom: `${7}px solid #f5f5f5`,
        top: "1px"
      }
    }
  },
  "&dark .cm-tooltip .cm-tooltip-arrow": {
    "&:before": {
      borderTopColor: "#333338",
      borderBottomColor: "#333338"
    },
    "&:after": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    }
  }
});
var noOffset = { x: 0, y: 0 };
var showTooltip = /* @__PURE__ */ Facet.define({
  enables: [tooltipPlugin, baseTheme]
});
var showHoverTooltip = /* @__PURE__ */ Facet.define({
  combine: (inputs) => inputs.reduce((a2, i2) => a2.concat(i2), [])
});
var HoverTooltipHost = class _HoverTooltipHost {
  // Needs to be static so that host tooltip instances always match
  static create(view) {
    return new _HoverTooltipHost(view);
  }
  constructor(view) {
    this.view = view;
    this.mounted = false;
    this.dom = document.createElement("div");
    this.dom.classList.add("cm-tooltip-hover");
    this.manager = new TooltipViewManager(view, showHoverTooltip, (t3, p2) => this.createHostedView(t3, p2), (t3) => t3.dom.remove());
  }
  createHostedView(tooltip, prev) {
    let hostedView = tooltip.create(this.view);
    hostedView.dom.classList.add("cm-tooltip-section");
    this.dom.insertBefore(hostedView.dom, prev ? prev.dom.nextSibling : this.dom.firstChild);
    if (this.mounted && hostedView.mount)
      hostedView.mount(this.view);
    return hostedView;
  }
  mount(view) {
    for (let hostedView of this.manager.tooltipViews) {
      if (hostedView.mount)
        hostedView.mount(view);
    }
    this.mounted = true;
  }
  positioned(space4) {
    for (let hostedView of this.manager.tooltipViews) {
      if (hostedView.positioned)
        hostedView.positioned(space4);
    }
  }
  update(update) {
    this.manager.update(update);
  }
  destroy() {
    var _a3;
    for (let t3 of this.manager.tooltipViews)
      (_a3 = t3.destroy) === null || _a3 === void 0 ? void 0 : _a3.call(t3);
  }
  passProp(name2) {
    let value = void 0;
    for (let view of this.manager.tooltipViews) {
      let given = view[name2];
      if (given !== void 0) {
        if (value === void 0)
          value = given;
        else if (value !== given)
          return void 0;
      }
    }
    return value;
  }
  get offset() {
    return this.passProp("offset");
  }
  get getCoords() {
    return this.passProp("getCoords");
  }
  get overlap() {
    return this.passProp("overlap");
  }
  get resize() {
    return this.passProp("resize");
  }
};
var showHoverTooltipHost = /* @__PURE__ */ showTooltip.compute([showHoverTooltip], (state) => {
  let tooltips = state.facet(showHoverTooltip);
  if (tooltips.length === 0)
    return null;
  return {
    pos: Math.min(...tooltips.map((t3) => t3.pos)),
    end: Math.max(...tooltips.map((t3) => {
      var _a3;
      return (_a3 = t3.end) !== null && _a3 !== void 0 ? _a3 : t3.pos;
    })),
    create: HoverTooltipHost.create,
    above: tooltips[0].above,
    arrow: tooltips.some((t3) => t3.arrow)
  };
});
var HoverPlugin = class {
  constructor(view, source, field, setHover, hoverTime) {
    this.view = view;
    this.source = source;
    this.field = field;
    this.setHover = setHover;
    this.hoverTime = hoverTime;
    this.hoverTimeout = -1;
    this.restartTimeout = -1;
    this.pending = null;
    this.lastMove = { x: 0, y: 0, target: view.dom, time: 0 };
    this.checkHover = this.checkHover.bind(this);
    view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
    view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
  }
  update() {
    if (this.pending) {
      this.pending = null;
      clearTimeout(this.restartTimeout);
      this.restartTimeout = setTimeout(() => this.startHover(), 20);
    }
  }
  get active() {
    return this.view.state.field(this.field);
  }
  checkHover() {
    this.hoverTimeout = -1;
    if (this.active.length)
      return;
    let hovered = Date.now() - this.lastMove.time;
    if (hovered < this.hoverTime)
      this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);
    else
      this.startHover();
  }
  startHover() {
    clearTimeout(this.restartTimeout);
    let { view, lastMove } = this;
    let desc = view.docView.nearest(lastMove.target);
    if (!desc)
      return;
    let pos, side = 1;
    if (desc instanceof WidgetView) {
      pos = desc.posAtStart;
    } else {
      pos = view.posAtCoords(lastMove);
      if (pos == null)
        return;
      let posCoords = view.coordsAtPos(pos);
      if (!posCoords || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom || lastMove.x < posCoords.left - view.defaultCharacterWidth || lastMove.x > posCoords.right + view.defaultCharacterWidth)
        return;
      let bidi = view.bidiSpans(view.state.doc.lineAt(pos)).find((s2) => s2.from <= pos && s2.to >= pos);
      let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
      side = lastMove.x < posCoords.left ? -rtl : rtl;
    }
    let open = this.source(view, pos, side);
    if (open === null || open === void 0 ? void 0 : open.then) {
      let pending = this.pending = { pos };
      open.then((result) => {
        if (this.pending == pending) {
          this.pending = null;
          if (result && !(Array.isArray(result) && !result.length))
            view.dispatch({ effects: this.setHover.of(Array.isArray(result) ? result : [result]) });
        }
      }, (e25) => logException(view.state, e25, "hover tooltip"));
    } else if (open && !(Array.isArray(open) && !open.length)) {
      view.dispatch({ effects: this.setHover.of(Array.isArray(open) ? open : [open]) });
    }
  }
  get tooltip() {
    let plugin = this.view.plugin(tooltipPlugin);
    let index = plugin ? plugin.manager.tooltips.findIndex((t3) => t3.create == HoverTooltipHost.create) : -1;
    return index > -1 ? plugin.manager.tooltipViews[index] : null;
  }
  mousemove(event) {
    var _a3, _b2;
    this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };
    if (this.hoverTimeout < 0)
      this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
    let { active, tooltip } = this;
    if (active.length && tooltip && !isInTooltip(tooltip.dom, event) || this.pending) {
      let { pos } = active[0] || this.pending, end = (_b2 = (_a3 = active[0]) === null || _a3 === void 0 ? void 0 : _a3.end) !== null && _b2 !== void 0 ? _b2 : pos;
      if (pos == end ? this.view.posAtCoords(this.lastMove) != pos : !isOverRange(this.view, pos, end, event.clientX, event.clientY)) {
        this.view.dispatch({ effects: this.setHover.of([]) });
        this.pending = null;
      }
    }
  }
  mouseleave(event) {
    clearTimeout(this.hoverTimeout);
    this.hoverTimeout = -1;
    let { active } = this;
    if (active.length) {
      let { tooltip } = this;
      let inTooltip = tooltip && tooltip.dom.contains(event.relatedTarget);
      if (!inTooltip)
        this.view.dispatch({ effects: this.setHover.of([]) });
      else
        this.watchTooltipLeave(tooltip.dom);
    }
  }
  watchTooltipLeave(tooltip) {
    let watch = (event) => {
      tooltip.removeEventListener("mouseleave", watch);
      if (this.active.length && !this.view.dom.contains(event.relatedTarget))
        this.view.dispatch({ effects: this.setHover.of([]) });
    };
    tooltip.addEventListener("mouseleave", watch);
  }
  destroy() {
    clearTimeout(this.hoverTimeout);
    this.view.dom.removeEventListener("mouseleave", this.mouseleave);
    this.view.dom.removeEventListener("mousemove", this.mousemove);
  }
};
var tooltipMargin = 4;
function isInTooltip(tooltip, event) {
  let rect = tooltip.getBoundingClientRect();
  return event.clientX >= rect.left - tooltipMargin && event.clientX <= rect.right + tooltipMargin && event.clientY >= rect.top - tooltipMargin && event.clientY <= rect.bottom + tooltipMargin;
}
function isOverRange(view, from, to2, x2, y2, margin) {
  let rect = view.scrollDOM.getBoundingClientRect();
  let docBottom = view.documentTop + view.documentPadding.top + view.contentHeight;
  if (rect.left > x2 || rect.right < x2 || rect.top > y2 || Math.min(rect.bottom, docBottom) < y2)
    return false;
  let pos = view.posAtCoords({ x: x2, y: y2 }, false);
  return pos >= from && pos <= to2;
}
function hoverTooltip(source, options = {}) {
  let setHover = StateEffect.define();
  let hoverState = StateField.define({
    create() {
      return [];
    },
    update(value, tr2) {
      if (value.length) {
        if (options.hideOnChange && (tr2.docChanged || tr2.selection))
          value = [];
        else if (options.hideOn)
          value = value.filter((v2) => !options.hideOn(tr2, v2));
        if (tr2.docChanged) {
          let mapped = [];
          for (let tooltip of value) {
            let newPos = tr2.changes.mapPos(tooltip.pos, -1, MapMode.TrackDel);
            if (newPos != null) {
              let copy = Object.assign(/* @__PURE__ */ Object.create(null), tooltip);
              copy.pos = newPos;
              if (copy.end != null)
                copy.end = tr2.changes.mapPos(copy.end);
              mapped.push(copy);
            }
          }
          value = mapped;
        }
      }
      for (let effect of tr2.effects) {
        if (effect.is(setHover))
          value = effect.value;
        if (effect.is(closeHoverTooltipEffect))
          value = [];
      }
      return value;
    },
    provide: (f2) => showHoverTooltip.from(f2)
  });
  return [
    hoverState,
    ViewPlugin.define((view) => new HoverPlugin(
      view,
      source,
      hoverState,
      setHover,
      options.hoverTime || 300
      /* Hover.Time */
    )),
    showHoverTooltipHost
  ];
}
function getTooltip(view, tooltip) {
  let plugin = view.plugin(tooltipPlugin);
  if (!plugin)
    return null;
  let found = plugin.manager.tooltips.indexOf(tooltip);
  return found < 0 ? null : plugin.manager.tooltipViews[found];
}
var closeHoverTooltipEffect = /* @__PURE__ */ StateEffect.define();
var panelConfig = /* @__PURE__ */ Facet.define({
  combine(configs) {
    let topContainer, bottomContainer;
    for (let c2 of configs) {
      topContainer = topContainer || c2.topContainer;
      bottomContainer = bottomContainer || c2.bottomContainer;
    }
    return { topContainer, bottomContainer };
  }
});
function getPanel(view, panel) {
  let plugin = view.plugin(panelPlugin);
  let index = plugin ? plugin.specs.indexOf(panel) : -1;
  return index > -1 ? plugin.panels[index] : null;
}
var panelPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.input = view.state.facet(showPanel);
    this.specs = this.input.filter((s2) => s2);
    this.panels = this.specs.map((spec) => spec(view));
    let conf = view.state.facet(panelConfig);
    this.top = new PanelGroup(view, true, conf.topContainer);
    this.bottom = new PanelGroup(view, false, conf.bottomContainer);
    this.top.sync(this.panels.filter((p2) => p2.top));
    this.bottom.sync(this.panels.filter((p2) => !p2.top));
    for (let p2 of this.panels) {
      p2.dom.classList.add("cm-panel");
      if (p2.mount)
        p2.mount();
    }
  }
  update(update) {
    let conf = update.state.facet(panelConfig);
    if (this.top.container != conf.topContainer) {
      this.top.sync([]);
      this.top = new PanelGroup(update.view, true, conf.topContainer);
    }
    if (this.bottom.container != conf.bottomContainer) {
      this.bottom.sync([]);
      this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
    }
    this.top.syncClasses();
    this.bottom.syncClasses();
    let input = update.state.facet(showPanel);
    if (input != this.input) {
      let specs = input.filter((x2) => x2);
      let panels = [], top2 = [], bottom = [], mount = [];
      for (let spec of specs) {
        let known = this.specs.indexOf(spec), panel;
        if (known < 0) {
          panel = spec(update.view);
          mount.push(panel);
        } else {
          panel = this.panels[known];
          if (panel.update)
            panel.update(update);
        }
        panels.push(panel);
        (panel.top ? top2 : bottom).push(panel);
      }
      this.specs = specs;
      this.panels = panels;
      this.top.sync(top2);
      this.bottom.sync(bottom);
      for (let p2 of mount) {
        p2.dom.classList.add("cm-panel");
        if (p2.mount)
          p2.mount();
      }
    } else {
      for (let p2 of this.panels)
        if (p2.update)
          p2.update(update);
    }
  }
  destroy() {
    this.top.sync([]);
    this.bottom.sync([]);
  }
}, {
  provide: (plugin) => EditorView.scrollMargins.of((view) => {
    let value = view.plugin(plugin);
    return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };
  })
});
var PanelGroup = class {
  constructor(view, top2, container) {
    this.view = view;
    this.top = top2;
    this.container = container;
    this.dom = void 0;
    this.classes = "";
    this.panels = [];
    this.syncClasses();
  }
  sync(panels) {
    for (let p2 of this.panels)
      if (p2.destroy && panels.indexOf(p2) < 0)
        p2.destroy();
    this.panels = panels;
    this.syncDOM();
  }
  syncDOM() {
    if (this.panels.length == 0) {
      if (this.dom) {
        this.dom.remove();
        this.dom = void 0;
      }
      return;
    }
    if (!this.dom) {
      this.dom = document.createElement("div");
      this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
      this.dom.style[this.top ? "top" : "bottom"] = "0";
      let parent = this.container || this.view.dom;
      parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
    }
    let curDOM = this.dom.firstChild;
    for (let panel of this.panels) {
      if (panel.dom.parentNode == this.dom) {
        while (curDOM != panel.dom)
          curDOM = rm(curDOM);
        curDOM = curDOM.nextSibling;
      } else {
        this.dom.insertBefore(panel.dom, curDOM);
      }
    }
    while (curDOM)
      curDOM = rm(curDOM);
  }
  scrollMargin() {
    return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
  }
  syncClasses() {
    if (!this.container || this.classes == this.view.themeClasses)
      return;
    for (let cls of this.classes.split(" "))
      if (cls)
        this.container.classList.remove(cls);
    for (let cls of (this.classes = this.view.themeClasses).split(" "))
      if (cls)
        this.container.classList.add(cls);
  }
};
function rm(node) {
  let next = node.nextSibling;
  node.remove();
  return next;
}
var showPanel = /* @__PURE__ */ Facet.define({
  enables: panelPlugin
});
var GutterMarker = class extends RangeValue {
  /**
  @internal
  */
  compare(other) {
    return this == other || this.constructor == other.constructor && this.eq(other);
  }
  /**
  Compare this marker to another marker of the same type.
  */
  eq(other) {
    return false;
  }
  /**
  Called if the marker has a `toDOM` method and its representation
  was removed from a gutter.
  */
  destroy(dom) {
  }
};
GutterMarker.prototype.elementClass = "";
GutterMarker.prototype.toDOM = void 0;
GutterMarker.prototype.mapMode = MapMode.TrackBefore;
GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
GutterMarker.prototype.point = true;
var gutterLineClass = /* @__PURE__ */ Facet.define();
var defaults = {
  class: "",
  renderEmptyElements: false,
  elementStyle: "",
  markers: () => RangeSet.empty,
  lineMarker: () => null,
  widgetMarker: () => null,
  lineMarkerChange: null,
  initialSpacer: null,
  updateSpacer: null,
  domEventHandlers: {}
};
var activeGutters = /* @__PURE__ */ Facet.define();
function gutter(config2) {
  return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config2))];
}
var unfixGutters = /* @__PURE__ */ Facet.define({
  combine: (values2) => values2.some((x2) => x2)
});
function gutters(config2) {
  let result = [
    gutterView
  ];
  if (config2 && config2.fixed === false)
    result.push(unfixGutters.of(true));
  return result;
}
var gutterView = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.prevViewport = view.viewport;
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutters";
    this.dom.setAttribute("aria-hidden", "true");
    this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
    this.gutters = view.state.facet(activeGutters).map((conf) => new SingleGutterView(view, conf));
    for (let gutter2 of this.gutters)
      this.dom.appendChild(gutter2.dom);
    this.fixed = !view.state.facet(unfixGutters);
    if (this.fixed) {
      this.dom.style.position = "sticky";
    }
    this.syncGutters(false);
    view.scrollDOM.insertBefore(this.dom, view.contentDOM);
  }
  update(update) {
    if (this.updateGutters(update)) {
      let vpA = this.prevViewport, vpB = update.view.viewport;
      let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
      this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
    }
    if (update.geometryChanged) {
      this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
    }
    if (this.view.state.facet(unfixGutters) != !this.fixed) {
      this.fixed = !this.fixed;
      this.dom.style.position = this.fixed ? "sticky" : "";
    }
    this.prevViewport = update.view.viewport;
  }
  syncGutters(detach) {
    let after = this.dom.nextSibling;
    if (detach)
      this.dom.remove();
    let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
    let classSet = [];
    let contexts = this.gutters.map((gutter2) => new UpdateContext(gutter2, this.view.viewport, -this.view.documentPadding.top));
    for (let line of this.view.viewportLineBlocks) {
      if (classSet.length)
        classSet = [];
      if (Array.isArray(line.type)) {
        let first = true;
        for (let b2 of line.type) {
          if (b2.type == BlockType.Text && first) {
            advanceCursor(lineClasses, classSet, b2.from);
            for (let cx2 of contexts)
              cx2.line(this.view, b2, classSet);
            first = false;
          } else if (b2.widget) {
            for (let cx2 of contexts)
              cx2.widget(this.view, b2);
          }
        }
      } else if (line.type == BlockType.Text) {
        advanceCursor(lineClasses, classSet, line.from);
        for (let cx2 of contexts)
          cx2.line(this.view, line, classSet);
      } else if (line.widget) {
        for (let cx2 of contexts)
          cx2.widget(this.view, line);
      }
    }
    for (let cx2 of contexts)
      cx2.finish();
    if (detach)
      this.view.scrollDOM.insertBefore(this.dom, after);
  }
  updateGutters(update) {
    let prev = update.startState.facet(activeGutters), cur2 = update.state.facet(activeGutters);
    let change = update.docChanged || update.heightChanged || update.viewportChanged || !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
    if (prev == cur2) {
      for (let gutter2 of this.gutters)
        if (gutter2.update(update))
          change = true;
    } else {
      change = true;
      let gutters2 = [];
      for (let conf of cur2) {
        let known = prev.indexOf(conf);
        if (known < 0) {
          gutters2.push(new SingleGutterView(this.view, conf));
        } else {
          this.gutters[known].update(update);
          gutters2.push(this.gutters[known]);
        }
      }
      for (let g2 of this.gutters) {
        g2.dom.remove();
        if (gutters2.indexOf(g2) < 0)
          g2.destroy();
      }
      for (let g2 of gutters2)
        this.dom.appendChild(g2.dom);
      this.gutters = gutters2;
    }
    return change;
  }
  destroy() {
    for (let view of this.gutters)
      view.destroy();
    this.dom.remove();
  }
}, {
  provide: (plugin) => EditorView.scrollMargins.of((view) => {
    let value = view.plugin(plugin);
    if (!value || value.gutters.length == 0 || !value.fixed)
      return null;
    return view.textDirection == Direction.LTR ? { left: value.dom.offsetWidth * view.scaleX } : { right: value.dom.offsetWidth * view.scaleX };
  })
});
function asArray2(val) {
  return Array.isArray(val) ? val : [val];
}
function advanceCursor(cursor, collect, pos) {
  while (cursor.value && cursor.from <= pos) {
    if (cursor.from == pos)
      collect.push(cursor.value);
    cursor.next();
  }
}
var UpdateContext = class {
  constructor(gutter2, viewport, height) {
    this.gutter = gutter2;
    this.height = height;
    this.i = 0;
    this.cursor = RangeSet.iter(gutter2.markers, viewport.from);
  }
  addElement(view, block, markers) {
    let { gutter: gutter2 } = this, above = (block.top - this.height) / view.scaleY, height = block.height / view.scaleY;
    if (this.i == gutter2.elements.length) {
      let newElt = new GutterElement(view, height, above, markers);
      gutter2.elements.push(newElt);
      gutter2.dom.appendChild(newElt.dom);
    } else {
      gutter2.elements[this.i].update(view, height, above, markers);
    }
    this.height = block.bottom;
    this.i++;
  }
  line(view, line, extraMarkers) {
    let localMarkers = [];
    advanceCursor(this.cursor, localMarkers, line.from);
    if (extraMarkers.length)
      localMarkers = localMarkers.concat(extraMarkers);
    let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
    if (forLine)
      localMarkers.unshift(forLine);
    let gutter2 = this.gutter;
    if (localMarkers.length == 0 && !gutter2.config.renderEmptyElements)
      return;
    this.addElement(view, line, localMarkers);
  }
  widget(view, block) {
    let marker = this.gutter.config.widgetMarker(view, block.widget, block);
    if (marker)
      this.addElement(view, block, [marker]);
  }
  finish() {
    let gutter2 = this.gutter;
    while (gutter2.elements.length > this.i) {
      let last = gutter2.elements.pop();
      gutter2.dom.removeChild(last.dom);
      last.destroy();
    }
  }
};
var SingleGutterView = class {
  constructor(view, config2) {
    this.view = view;
    this.config = config2;
    this.elements = [];
    this.spacer = null;
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
    for (let prop in config2.domEventHandlers) {
      this.dom.addEventListener(prop, (event) => {
        let target = event.target, y2;
        if (target != this.dom && this.dom.contains(target)) {
          while (target.parentNode != this.dom)
            target = target.parentNode;
          let rect = target.getBoundingClientRect();
          y2 = (rect.top + rect.bottom) / 2;
        } else {
          y2 = event.clientY;
        }
        let line = view.lineBlockAtHeight(y2 - view.documentTop);
        if (config2.domEventHandlers[prop](view, line, event))
          event.preventDefault();
      });
    }
    this.markers = asArray2(config2.markers(view));
    if (config2.initialSpacer) {
      this.spacer = new GutterElement(view, 0, 0, [config2.initialSpacer(view)]);
      this.dom.appendChild(this.spacer.dom);
      this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
    }
  }
  update(update) {
    let prevMarkers = this.markers;
    this.markers = asArray2(this.config.markers(update.view));
    if (this.spacer && this.config.updateSpacer) {
      let updated = this.config.updateSpacer(this.spacer.markers[0], update);
      if (updated != this.spacer.markers[0])
        this.spacer.update(update.view, 0, 0, [updated]);
    }
    let vp2 = update.view.viewport;
    return !RangeSet.eq(this.markers, prevMarkers, vp2.from, vp2.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
  }
  destroy() {
    for (let elt2 of this.elements)
      elt2.destroy();
  }
};
var GutterElement = class {
  constructor(view, height, above, markers) {
    this.height = -1;
    this.above = 0;
    this.markers = [];
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutterElement";
    this.update(view, height, above, markers);
  }
  update(view, height, above, markers) {
    if (this.height != height) {
      this.height = height;
      this.dom.style.height = height + "px";
    }
    if (this.above != above)
      this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
    if (!sameMarkers(this.markers, markers))
      this.setMarkers(view, markers);
  }
  setMarkers(view, markers) {
    let cls = "cm-gutterElement", domPos = this.dom.firstChild;
    for (let iNew = 0, iOld = 0; ; ) {
      let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
      if (marker) {
        let c2 = marker.elementClass;
        if (c2)
          cls += " " + c2;
        for (let i2 = iOld; i2 < this.markers.length; i2++)
          if (this.markers[i2].compare(marker)) {
            skipTo = i2;
            matched = true;
            break;
          }
      } else {
        skipTo = this.markers.length;
      }
      while (iOld < skipTo) {
        let next = this.markers[iOld++];
        if (next.toDOM) {
          next.destroy(domPos);
          let after = domPos.nextSibling;
          domPos.remove();
          domPos = after;
        }
      }
      if (!marker)
        break;
      if (marker.toDOM) {
        if (matched)
          domPos = domPos.nextSibling;
        else
          this.dom.insertBefore(marker.toDOM(view), domPos);
      }
      if (matched)
        iOld++;
    }
    this.dom.className = cls;
    this.markers = markers;
  }
  destroy() {
    this.setMarkers(null, []);
  }
};
function sameMarkers(a2, b2) {
  if (a2.length != b2.length)
    return false;
  for (let i2 = 0; i2 < a2.length; i2++)
    if (!a2[i2].compare(b2[i2]))
      return false;
  return true;
}
var lineNumberMarkers = /* @__PURE__ */ Facet.define();
var lineNumberConfig = /* @__PURE__ */ Facet.define({
  combine(values2) {
    return combineConfig(values2, { formatNumber: String, domEventHandlers: {} }, {
      domEventHandlers(a2, b2) {
        let result = Object.assign({}, a2);
        for (let event in b2) {
          let exists = result[event], add2 = b2[event];
          result[event] = exists ? (view, line, event2) => exists(view, line, event2) || add2(view, line, event2) : add2;
        }
        return result;
      }
    });
  }
});
var NumberMarker = class extends GutterMarker {
  constructor(number2) {
    super();
    this.number = number2;
  }
  eq(other) {
    return this.number == other.number;
  }
  toDOM() {
    return document.createTextNode(this.number);
  }
};
function formatNumber(view, number2) {
  return view.state.facet(lineNumberConfig).formatNumber(number2, view.state);
}
var lineNumberGutter = /* @__PURE__ */ activeGutters.compute([lineNumberConfig], (state) => ({
  class: "cm-lineNumbers",
  renderEmptyElements: false,
  markers(view) {
    return view.state.facet(lineNumberMarkers);
  },
  lineMarker(view, line, others) {
    if (others.some((m2) => m2.toDOM))
      return null;
    return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
  },
  widgetMarker: () => null,
  lineMarkerChange: (update) => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),
  initialSpacer(view) {
    return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
  },
  updateSpacer(spacer, update) {
    let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
    return max == spacer.number ? spacer : new NumberMarker(max);
  },
  domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
}));
function lineNumbers(config2 = {}) {
  return [
    lineNumberConfig.of(config2),
    gutters(),
    lineNumberGutter
  ];
}
function maxLineNumber(lines) {
  let last = 9;
  while (last < lines)
    last = last * 10 + 9;
  return last;
}
var activeLineGutterMarker = /* @__PURE__ */ new class extends GutterMarker {
  constructor() {
    super(...arguments);
    this.elementClass = "cm-activeLineGutter";
  }
}();
var activeLineGutterHighlighter = /* @__PURE__ */ gutterLineClass.compute(["selection"], (state) => {
  let marks2 = [], last = -1;
  for (let range of state.selection.ranges) {
    let linePos = state.doc.lineAt(range.head).from;
    if (linePos > last) {
      last = linePos;
      marks2.push(activeLineGutterMarker.range(linePos));
    }
  }
  return RangeSet.of(marks2);
});
function highlightActiveLineGutter() {
  return activeLineGutterHighlighter;
}

// node_modules/@lezer/common/dist/index.js
var DefaultBufferLength = 1024;
var nextPropID = 0;
var Range2 = class {
  constructor(from, to2) {
    this.from = from;
    this.to = to2;
  }
};
var NodeProp = class {
  /**
  Create a new node prop type.
  */
  constructor(config2 = {}) {
    this.id = nextPropID++;
    this.perNode = !!config2.perNode;
    this.deserialize = config2.deserialize || (() => {
      throw new Error("This node type doesn't define a deserialize function");
    });
  }
  /**
  This is meant to be used with
  [`NodeSet.extend`](#common.NodeSet.extend) or
  [`LRParser.configure`](#lr.ParserConfig.props) to compute
  prop values for each node type in the set. Takes a [match
  object](#common.NodeType^match) or function that returns undefined
  if the node type doesn't get this prop, and the prop's value if
  it does.
  */
  add(match) {
    if (this.perNode)
      throw new RangeError("Can't add per-node props to node types");
    if (typeof match != "function")
      match = NodeType.match(match);
    return (type) => {
      let result = match(type);
      return result === void 0 ? null : [this, result];
    };
  }
};
NodeProp.closedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
NodeProp.openedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
NodeProp.group = new NodeProp({ deserialize: (str) => str.split(" ") });
NodeProp.isolate = new NodeProp({ deserialize: (value) => {
  if (value && value != "rtl" && value != "ltr" && value != "auto")
    throw new RangeError("Invalid value for isolate: " + value);
  return value || "auto";
} });
NodeProp.contextHash = new NodeProp({ perNode: true });
NodeProp.lookAhead = new NodeProp({ perNode: true });
NodeProp.mounted = new NodeProp({ perNode: true });
var MountedTree = class {
  constructor(tree, overlay, parser5) {
    this.tree = tree;
    this.overlay = overlay;
    this.parser = parser5;
  }
  /**
  @internal
  */
  static get(tree) {
    return tree && tree.props && tree.props[NodeProp.mounted.id];
  }
};
var noProps = /* @__PURE__ */ Object.create(null);
var NodeType = class _NodeType {
  /**
  @internal
  */
  constructor(name2, props, id3, flags = 0) {
    this.name = name2;
    this.props = props;
    this.id = id3;
    this.flags = flags;
  }
  /**
  Define a node type.
  */
  static define(spec) {
    let props = spec.props && spec.props.length ? /* @__PURE__ */ Object.create(null) : noProps;
    let flags = (spec.top ? 1 : 0) | (spec.skipped ? 2 : 0) | (spec.error ? 4 : 0) | (spec.name == null ? 8 : 0);
    let type = new _NodeType(spec.name || "", props, spec.id, flags);
    if (spec.props)
      for (let src of spec.props) {
        if (!Array.isArray(src))
          src = src(type);
        if (src) {
          if (src[0].perNode)
            throw new RangeError("Can't store a per-node prop on a node type");
          props[src[0].id] = src[1];
        }
      }
    return type;
  }
  /**
  Retrieves a node prop for this type. Will return `undefined` if
  the prop isn't present on this node.
  */
  prop(prop) {
    return this.props[prop.id];
  }
  /**
  True when this is the top node of a grammar.
  */
  get isTop() {
    return (this.flags & 1) > 0;
  }
  /**
  True when this node is produced by a skip rule.
  */
  get isSkipped() {
    return (this.flags & 2) > 0;
  }
  /**
  Indicates whether this is an error node.
  */
  get isError() {
    return (this.flags & 4) > 0;
  }
  /**
  When true, this node type doesn't correspond to a user-declared
  named node, for example because it is used to cache repetition.
  */
  get isAnonymous() {
    return (this.flags & 8) > 0;
  }
  /**
  Returns true when this node's name or one of its
  [groups](#common.NodeProp^group) matches the given string.
  */
  is(name2) {
    if (typeof name2 == "string") {
      if (this.name == name2)
        return true;
      let group = this.prop(NodeProp.group);
      return group ? group.indexOf(name2) > -1 : false;
    }
    return this.id == name2;
  }
  /**
  Create a function from node types to arbitrary values by
  specifying an object whose property names are node or
  [group](#common.NodeProp^group) names. Often useful with
  [`NodeProp.add`](#common.NodeProp.add). You can put multiple
  names, separated by spaces, in a single property name to map
  multiple node names to a single value.
  */
  static match(map) {
    let direct = /* @__PURE__ */ Object.create(null);
    for (let prop in map)
      for (let name2 of prop.split(" "))
        direct[name2] = map[prop];
    return (node) => {
      for (let groups = node.prop(NodeProp.group), i2 = -1; i2 < (groups ? groups.length : 0); i2++) {
        let found = direct[i2 < 0 ? node.name : groups[i2]];
        if (found)
          return found;
      }
    };
  }
};
NodeType.none = new NodeType(
  "",
  /* @__PURE__ */ Object.create(null),
  0,
  8
  /* NodeFlag.Anonymous */
);
var NodeSet = class _NodeSet {
  /**
  Create a set with the given types. The `id` property of each
  type should correspond to its position within the array.
  */
  constructor(types2) {
    this.types = types2;
    for (let i2 = 0; i2 < types2.length; i2++)
      if (types2[i2].id != i2)
        throw new RangeError("Node type ids should correspond to array positions when creating a node set");
  }
  /**
  Create a copy of this set with some node properties added. The
  arguments to this method can be created with
  [`NodeProp.add`](#common.NodeProp.add).
  */
  extend(...props) {
    let newTypes = [];
    for (let type of this.types) {
      let newProps = null;
      for (let source of props) {
        let add2 = source(type);
        if (add2) {
          if (!newProps)
            newProps = Object.assign({}, type.props);
          newProps[add2[0].id] = add2[1];
        }
      }
      newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
    }
    return new _NodeSet(newTypes);
  }
};
var CachedNode = /* @__PURE__ */ new WeakMap();
var CachedInnerNode = /* @__PURE__ */ new WeakMap();
var IterMode;
(function(IterMode2) {
  IterMode2[IterMode2["ExcludeBuffers"] = 1] = "ExcludeBuffers";
  IterMode2[IterMode2["IncludeAnonymous"] = 2] = "IncludeAnonymous";
  IterMode2[IterMode2["IgnoreMounts"] = 4] = "IgnoreMounts";
  IterMode2[IterMode2["IgnoreOverlays"] = 8] = "IgnoreOverlays";
})(IterMode || (IterMode = {}));
var Tree = class _Tree {
  /**
  Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  */
  constructor(type, children, positions, length, props) {
    this.type = type;
    this.children = children;
    this.positions = positions;
    this.length = length;
    this.props = null;
    if (props && props.length) {
      this.props = /* @__PURE__ */ Object.create(null);
      for (let [prop, value] of props)
        this.props[typeof prop == "number" ? prop : prop.id] = value;
    }
  }
  /**
  @internal
  */
  toString() {
    let mounted = MountedTree.get(this);
    if (mounted && !mounted.overlay)
      return mounted.tree.toString();
    let children = "";
    for (let ch2 of this.children) {
      let str = ch2.toString();
      if (str) {
        if (children)
          children += ",";
        children += str;
      }
    }
    return !this.type.name ? children : (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? "(" + children + ")" : "");
  }
  /**
  Get a [tree cursor](#common.TreeCursor) positioned at the top of
  the tree. Mode can be used to [control](#common.IterMode) which
  nodes the cursor visits.
  */
  cursor(mode = 0) {
    return new TreeCursor(this.topNode, mode);
  }
  /**
  Get a [tree cursor](#common.TreeCursor) pointing into this tree
  at the given position and side (see
  [`moveTo`](#common.TreeCursor.moveTo).
  */
  cursorAt(pos, side = 0, mode = 0) {
    let scope = CachedNode.get(this) || this.topNode;
    let cursor = new TreeCursor(scope);
    cursor.moveTo(pos, side);
    CachedNode.set(this, cursor._tree);
    return cursor;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) object for the top of the
  tree.
  */
  get topNode() {
    return new TreeNode(this, 0, 0, null);
  }
  /**
  Get the [syntax node](#common.SyntaxNode) at the given position.
  If `side` is -1, this will move into nodes that end at the
  position. If 1, it'll move into nodes that start at the
  position. With 0, it'll only enter nodes that cover the position
  from both sides.
  
  Note that this will not enter
  [overlays](#common.MountedTree.overlay), and you often want
  [`resolveInner`](#common.Tree.resolveInner) instead.
  */
  resolve(pos, side = 0) {
    let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
    CachedNode.set(this, node);
    return node;
  }
  /**
  Like [`resolve`](#common.Tree.resolve), but will enter
  [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
  pointing into the innermost overlaid tree at the given position
  (with parent links going through all parent structure, including
  the host trees).
  */
  resolveInner(pos, side = 0) {
    let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
    CachedInnerNode.set(this, node);
    return node;
  }
  /**
  In some situations, it can be useful to iterate through all
  nodes around a position, including those in overlays that don't
  directly cover the position. This method gives you an iterator
  that will produce all nodes, from small to big, around the given
  position.
  */
  resolveStack(pos, side = 0) {
    return stackIterator(this, pos, side);
  }
  /**
  Iterate over the tree and its children, calling `enter` for any
  node that touches the `from`/`to` region (if given) before
  running over such a node's children, and `leave` (if given) when
  leaving the node. When `enter` returns `false`, that node will
  not have its children iterated over (or `leave` called).
  */
  iterate(spec) {
    let { enter, leave, from = 0, to: to2 = this.length } = spec;
    let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;
    for (let c2 = this.cursor(mode | IterMode.IncludeAnonymous); ; ) {
      let entered = false;
      if (c2.from <= to2 && c2.to >= from && (!anon && c2.type.isAnonymous || enter(c2) !== false)) {
        if (c2.firstChild())
          continue;
        entered = true;
      }
      for (; ; ) {
        if (entered && leave && (anon || !c2.type.isAnonymous))
          leave(c2);
        if (c2.nextSibling())
          break;
        if (!c2.parent())
          return;
        entered = true;
      }
    }
  }
  /**
  Get the value of the given [node prop](#common.NodeProp) for this
  node. Works with both per-node and per-type props.
  */
  prop(prop) {
    return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : void 0;
  }
  /**
  Returns the node's [per-node props](#common.NodeProp.perNode) in a
  format that can be passed to the [`Tree`](#common.Tree)
  constructor.
  */
  get propValues() {
    let result = [];
    if (this.props)
      for (let id3 in this.props)
        result.push([+id3, this.props[id3]]);
    return result;
  }
  /**
  Balance the direct children of this tree, producing a copy of
  which may have children grouped into subtrees with type
  [`NodeType.none`](#common.NodeType^none).
  */
  balance(config2 = {}) {
    return this.children.length <= 8 ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new _Tree(this.type, children, positions, length, this.propValues), config2.makeTree || ((children, positions, length) => new _Tree(NodeType.none, children, positions, length)));
  }
  /**
  Build a tree from a postfix-ordered buffer of node information,
  or a cursor over such a buffer.
  */
  static build(data2) {
    return buildTree(data2);
  }
};
Tree.empty = new Tree(NodeType.none, [], [], 0);
var FlatBufferCursor = class _FlatBufferCursor {
  constructor(buffer, index) {
    this.buffer = buffer;
    this.index = index;
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  get pos() {
    return this.index;
  }
  next() {
    this.index -= 4;
  }
  fork() {
    return new _FlatBufferCursor(this.buffer, this.index);
  }
};
var TreeBuffer = class _TreeBuffer {
  /**
  Create a tree buffer.
  */
  constructor(buffer, length, set) {
    this.buffer = buffer;
    this.length = length;
    this.set = set;
  }
  /**
  @internal
  */
  get type() {
    return NodeType.none;
  }
  /**
  @internal
  */
  toString() {
    let result = [];
    for (let index = 0; index < this.buffer.length; ) {
      result.push(this.childString(index));
      index = this.buffer[index + 3];
    }
    return result.join(",");
  }
  /**
  @internal
  */
  childString(index) {
    let id3 = this.buffer[index], endIndex = this.buffer[index + 3];
    let type = this.set.types[id3], result = type.name;
    if (/\W/.test(result) && !type.isError)
      result = JSON.stringify(result);
    index += 4;
    if (endIndex == index)
      return result;
    let children = [];
    while (index < endIndex) {
      children.push(this.childString(index));
      index = this.buffer[index + 3];
    }
    return result + "(" + children.join(",") + ")";
  }
  /**
  @internal
  */
  findChild(startIndex, endIndex, dir, pos, side) {
    let { buffer } = this, pick = -1;
    for (let i2 = startIndex; i2 != endIndex; i2 = buffer[i2 + 3]) {
      if (checkSide(side, pos, buffer[i2 + 1], buffer[i2 + 2])) {
        pick = i2;
        if (dir > 0)
          break;
      }
    }
    return pick;
  }
  /**
  @internal
  */
  slice(startI, endI, from) {
    let b2 = this.buffer;
    let copy = new Uint16Array(endI - startI), len = 0;
    for (let i2 = startI, j2 = 0; i2 < endI; ) {
      copy[j2++] = b2[i2++];
      copy[j2++] = b2[i2++] - from;
      let to2 = copy[j2++] = b2[i2++] - from;
      copy[j2++] = b2[i2++] - startI;
      len = Math.max(len, to2);
    }
    return new _TreeBuffer(copy, len, this.set);
  }
};
function checkSide(side, pos, from, to2) {
  switch (side) {
    case -2:
      return from < pos;
    case -1:
      return to2 >= pos && from < pos;
    case 0:
      return from < pos && to2 > pos;
    case 1:
      return from <= pos && to2 > pos;
    case 2:
      return to2 > pos;
    case 4:
      return true;
  }
}
function resolveNode(node, pos, side, overlays) {
  var _a3;
  while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {
    let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
    if (!parent)
      return node;
    node = parent;
  }
  let mode = overlays ? 0 : IterMode.IgnoreOverlays;
  if (overlays)
    for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
      if (scan instanceof TreeNode && scan.index < 0 && ((_a3 = parent.enter(pos, side, mode)) === null || _a3 === void 0 ? void 0 : _a3.from) != scan.from)
        node = parent;
    }
  for (; ; ) {
    let inner = node.enter(pos, side, mode);
    if (!inner)
      return node;
    node = inner;
  }
}
var BaseNode = class {
  cursor(mode = 0) {
    return new TreeCursor(this, mode);
  }
  getChild(type, before = null, after = null) {
    let r2 = getChildren(this, type, before, after);
    return r2.length ? r2[0] : null;
  }
  getChildren(type, before = null, after = null) {
    return getChildren(this, type, before, after);
  }
  resolve(pos, side = 0) {
    return resolveNode(this, pos, side, false);
  }
  resolveInner(pos, side = 0) {
    return resolveNode(this, pos, side, true);
  }
  matchContext(context) {
    return matchNodeContext(this, context);
  }
  enterUnfinishedNodesBefore(pos) {
    let scan = this.childBefore(pos), node = this;
    while (scan) {
      let last = scan.lastChild;
      if (!last || last.to != scan.to)
        break;
      if (last.type.isError && last.from == last.to) {
        node = scan;
        scan = last.prevSibling;
      } else {
        scan = last;
      }
    }
    return node;
  }
  get node() {
    return this;
  }
  get next() {
    return this.parent;
  }
};
var TreeNode = class _TreeNode extends BaseNode {
  constructor(_tree, from, index, _parent) {
    super();
    this._tree = _tree;
    this.from = from;
    this.index = index;
    this._parent = _parent;
  }
  get type() {
    return this._tree.type;
  }
  get name() {
    return this._tree.type.name;
  }
  get to() {
    return this.from + this._tree.length;
  }
  nextChild(i2, dir, pos, side, mode = 0) {
    for (let parent = this; ; ) {
      for (let { children, positions } = parent._tree, e25 = dir > 0 ? children.length : -1; i2 != e25; i2 += dir) {
        let next = children[i2], start = positions[i2] + parent.from;
        if (!checkSide(side, pos, start, start + next.length))
          continue;
        if (next instanceof TreeBuffer) {
          if (mode & IterMode.ExcludeBuffers)
            continue;
          let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
          if (index > -1)
            return new BufferNode(new BufferContext(parent, next, i2, start), null, index);
        } else if (mode & IterMode.IncludeAnonymous || (!next.type.isAnonymous || hasChild(next))) {
          let mounted;
          if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)
            return new _TreeNode(mounted.tree, start, i2, parent);
          let inner = new _TreeNode(next, start, i2, parent);
          return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
        }
      }
      if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous)
        return null;
      if (parent.index >= 0)
        i2 = parent.index + dir;
      else
        i2 = dir < 0 ? -1 : parent._parent._tree.children.length;
      parent = parent._parent;
      if (!parent)
        return null;
    }
  }
  get firstChild() {
    return this.nextChild(
      0,
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(pos) {
    return this.nextChild(
      0,
      1,
      pos,
      2
      /* Side.After */
    );
  }
  childBefore(pos) {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      pos,
      -2
      /* Side.Before */
    );
  }
  enter(pos, side, mode = 0) {
    let mounted;
    if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {
      let rPos = pos - this.from;
      for (let { from, to: to2 } of mounted.overlay) {
        if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to2 >= rPos : to2 > rPos))
          return new _TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
      }
    }
    return this.nextChild(0, 1, pos, side, mode);
  }
  nextSignificantParent() {
    let val = this;
    while (val.type.isAnonymous && val._parent)
      val = val._parent;
    return val;
  }
  get parent() {
    return this._parent ? this._parent.nextSignificantParent() : null;
  }
  get nextSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index + 1,
      1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get prevSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get tree() {
    return this._tree;
  }
  toTree() {
    return this._tree;
  }
  /**
  @internal
  */
  toString() {
    return this._tree.toString();
  }
};
function getChildren(node, type, before, after) {
  let cur2 = node.cursor(), result = [];
  if (!cur2.firstChild())
    return result;
  if (before != null)
    for (let found = false; !found; ) {
      found = cur2.type.is(before);
      if (!cur2.nextSibling())
        return result;
    }
  for (; ; ) {
    if (after != null && cur2.type.is(after))
      return result;
    if (cur2.type.is(type))
      result.push(cur2.node);
    if (!cur2.nextSibling())
      return after == null ? result : [];
  }
}
function matchNodeContext(node, context, i2 = context.length - 1) {
  for (let p2 = node.parent; i2 >= 0; p2 = p2.parent) {
    if (!p2)
      return false;
    if (!p2.type.isAnonymous) {
      if (context[i2] && context[i2] != p2.name)
        return false;
      i2--;
    }
  }
  return true;
}
var BufferContext = class {
  constructor(parent, buffer, index, start) {
    this.parent = parent;
    this.buffer = buffer;
    this.index = index;
    this.start = start;
  }
};
var BufferNode = class _BufferNode extends BaseNode {
  get name() {
    return this.type.name;
  }
  get from() {
    return this.context.start + this.context.buffer.buffer[this.index + 1];
  }
  get to() {
    return this.context.start + this.context.buffer.buffer[this.index + 2];
  }
  constructor(context, _parent, index) {
    super();
    this.context = context;
    this._parent = _parent;
    this.index = index;
    this.type = context.buffer.set.types[context.buffer.buffer[index]];
  }
  child(dir, pos, side) {
    let { buffer } = this.context;
    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
    return index < 0 ? null : new _BufferNode(this.context, this, index);
  }
  get firstChild() {
    return this.child(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.child(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(pos) {
    return this.child(
      1,
      pos,
      2
      /* Side.After */
    );
  }
  childBefore(pos) {
    return this.child(
      -1,
      pos,
      -2
      /* Side.Before */
    );
  }
  enter(pos, side, mode = 0) {
    if (mode & IterMode.ExcludeBuffers)
      return null;
    let { buffer } = this.context;
    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
    return index < 0 ? null : new _BufferNode(this.context, this, index);
  }
  get parent() {
    return this._parent || this.context.parent.nextSignificantParent();
  }
  externalSibling(dir) {
    return this._parent ? null : this.context.parent.nextChild(
      this.context.index + dir,
      dir,
      0,
      4
      /* Side.DontCare */
    );
  }
  get nextSibling() {
    let { buffer } = this.context;
    let after = buffer.buffer[this.index + 3];
    if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
      return new _BufferNode(this.context, this._parent, after);
    return this.externalSibling(1);
  }
  get prevSibling() {
    let { buffer } = this.context;
    let parentStart = this._parent ? this._parent.index + 4 : 0;
    if (this.index == parentStart)
      return this.externalSibling(-1);
    return new _BufferNode(this.context, this._parent, buffer.findChild(
      parentStart,
      this.index,
      -1,
      0,
      4
      /* Side.DontCare */
    ));
  }
  get tree() {
    return null;
  }
  toTree() {
    let children = [], positions = [];
    let { buffer } = this.context;
    let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
    if (endI > startI) {
      let from = buffer.buffer[this.index + 1];
      children.push(buffer.slice(startI, endI, from));
      positions.push(0);
    }
    return new Tree(this.type, children, positions, this.to - this.from);
  }
  /**
  @internal
  */
  toString() {
    return this.context.buffer.childString(this.index);
  }
};
function iterStack(heads) {
  if (!heads.length)
    return null;
  let pick = 0, picked = heads[0];
  for (let i2 = 1; i2 < heads.length; i2++) {
    let node = heads[i2];
    if (node.from > picked.from || node.to < picked.to) {
      picked = node;
      pick = i2;
    }
  }
  let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;
  let newHeads = heads.slice();
  if (next)
    newHeads[pick] = next;
  else
    newHeads.splice(pick, 1);
  return new StackIterator(newHeads, picked);
}
var StackIterator = class {
  constructor(heads, node) {
    this.heads = heads;
    this.node = node;
  }
  get next() {
    return iterStack(this.heads);
  }
};
function stackIterator(tree, pos, side) {
  let inner = tree.resolveInner(pos, side), layers = null;
  for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {
    if (scan.index < 0) {
      let parent = scan.parent;
      (layers || (layers = [inner])).push(parent.resolve(pos, side));
      scan = parent;
    } else {
      let mount = MountedTree.get(scan.tree);
      if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {
        let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);
        (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));
      }
    }
  }
  return layers ? iterStack(layers) : inner;
}
var TreeCursor = class {
  /**
  Shorthand for `.type.name`.
  */
  get name() {
    return this.type.name;
  }
  /**
  @internal
  */
  constructor(node, mode = 0) {
    this.mode = mode;
    this.buffer = null;
    this.stack = [];
    this.index = 0;
    this.bufferNode = null;
    if (node instanceof TreeNode) {
      this.yieldNode(node);
    } else {
      this._tree = node.context.parent;
      this.buffer = node.context;
      for (let n2 = node._parent; n2; n2 = n2._parent)
        this.stack.unshift(n2.index);
      this.bufferNode = node;
      this.yieldBuf(node.index);
    }
  }
  yieldNode(node) {
    if (!node)
      return false;
    this._tree = node;
    this.type = node.type;
    this.from = node.from;
    this.to = node.to;
    return true;
  }
  yieldBuf(index, type) {
    this.index = index;
    let { start, buffer } = this.buffer;
    this.type = type || buffer.set.types[buffer.buffer[index]];
    this.from = start + buffer.buffer[index + 1];
    this.to = start + buffer.buffer[index + 2];
    return true;
  }
  /**
  @internal
  */
  yield(node) {
    if (!node)
      return false;
    if (node instanceof TreeNode) {
      this.buffer = null;
      return this.yieldNode(node);
    }
    this.buffer = node.context;
    return this.yieldBuf(node.index, node.type);
  }
  /**
  @internal
  */
  toString() {
    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
  }
  /**
  @internal
  */
  enterChild(dir, pos, side) {
    if (!this.buffer)
      return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
    let { buffer } = this.buffer;
    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
    if (index < 0)
      return false;
    this.stack.push(this.index);
    return this.yieldBuf(index);
  }
  /**
  Move the cursor to this node's first child. When this returns
  false, the node has no child, and the cursor has not been moved.
  */
  firstChild() {
    return this.enterChild(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to this node's last child.
  */
  lastChild() {
    return this.enterChild(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to the first child that ends after `pos`.
  */
  childAfter(pos) {
    return this.enterChild(
      1,
      pos,
      2
      /* Side.After */
    );
  }
  /**
  Move to the last child that starts before `pos`.
  */
  childBefore(pos) {
    return this.enterChild(
      -1,
      pos,
      -2
      /* Side.Before */
    );
  }
  /**
  Move the cursor to the child around `pos`. If side is -1 the
  child may end at that position, when 1 it may start there. This
  will also enter [overlaid](#common.MountedTree.overlay)
  [mounted](#common.NodeProp^mounted) trees unless `overlays` is
  set to false.
  */
  enter(pos, side, mode = this.mode) {
    if (!this.buffer)
      return this.yield(this._tree.enter(pos, side, mode));
    return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
  }
  /**
  Move to the node's parent node, if this isn't the top node.
  */
  parent() {
    if (!this.buffer)
      return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);
    if (this.stack.length)
      return this.yieldBuf(this.stack.pop());
    let parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
    this.buffer = null;
    return this.yieldNode(parent);
  }
  /**
  @internal
  */
  sibling(dir) {
    if (!this.buffer)
      return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4, this.mode));
    let { buffer } = this.buffer, d2 = this.stack.length - 1;
    if (dir < 0) {
      let parentStart = d2 < 0 ? 0 : this.stack[d2] + 4;
      if (this.index != parentStart)
        return this.yieldBuf(buffer.findChild(
          parentStart,
          this.index,
          -1,
          0,
          4
          /* Side.DontCare */
        ));
    } else {
      let after = buffer.buffer[this.index + 3];
      if (after < (d2 < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d2] + 3]))
        return this.yieldBuf(after);
    }
    return d2 < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4, this.mode)) : false;
  }
  /**
  Move to this node's next sibling, if any.
  */
  nextSibling() {
    return this.sibling(1);
  }
  /**
  Move to this node's previous sibling, if any.
  */
  prevSibling() {
    return this.sibling(-1);
  }
  atLastNode(dir) {
    let index, parent, { buffer } = this;
    if (buffer) {
      if (dir > 0) {
        if (this.index < buffer.buffer.buffer.length)
          return false;
      } else {
        for (let i2 = 0; i2 < this.index; i2++)
          if (buffer.buffer.buffer[i2 + 3] < this.index)
            return false;
      }
      ({ index, parent } = buffer);
    } else {
      ({ index, _parent: parent } = this._tree);
    }
    for (; parent; { index, _parent: parent } = parent) {
      if (index > -1)
        for (let i2 = index + dir, e25 = dir < 0 ? -1 : parent._tree.children.length; i2 != e25; i2 += dir) {
          let child = parent._tree.children[i2];
          if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child))
            return false;
        }
    }
    return true;
  }
  move(dir, enter) {
    if (enter && this.enterChild(
      dir,
      0,
      4
      /* Side.DontCare */
    ))
      return true;
    for (; ; ) {
      if (this.sibling(dir))
        return true;
      if (this.atLastNode(dir) || !this.parent())
        return false;
    }
  }
  /**
  Move to the next node in a
  [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
  traversal, going from a node to its first child or, if the
  current node is empty or `enter` is false, its next sibling or
  the next sibling of the first parent node that has one.
  */
  next(enter = true) {
    return this.move(1, enter);
  }
  /**
  Move to the next node in a last-to-first pre-order traveral. A
  node is followed by its last child or, if it has none, its
  previous sibling or the previous sibling of the first parent
  node that has one.
  */
  prev(enter = true) {
    return this.move(-1, enter);
  }
  /**
  Move the cursor to the innermost node that covers `pos`. If
  `side` is -1, it will enter nodes that end at `pos`. If it is 1,
  it will enter nodes that start at `pos`.
  */
  moveTo(pos, side = 0) {
    while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos))
      if (!this.parent())
        break;
    while (this.enterChild(1, pos, side)) {
    }
    return this;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) at the cursor's current
  position.
  */
  get node() {
    if (!this.buffer)
      return this._tree;
    let cache2 = this.bufferNode, result = null, depth = 0;
    if (cache2 && cache2.context == this.buffer) {
      scan: for (let index = this.index, d2 = this.stack.length; d2 >= 0; ) {
        for (let c2 = cache2; c2; c2 = c2._parent)
          if (c2.index == index) {
            if (index == this.index)
              return c2;
            result = c2;
            depth = d2 + 1;
            break scan;
          }
        index = this.stack[--d2];
      }
    }
    for (let i2 = depth; i2 < this.stack.length; i2++)
      result = new BufferNode(this.buffer, result, this.stack[i2]);
    return this.bufferNode = new BufferNode(this.buffer, result, this.index);
  }
  /**
  Get the [tree](#common.Tree) that represents the current node, if
  any. Will return null when the node is in a [tree
  buffer](#common.TreeBuffer).
  */
  get tree() {
    return this.buffer ? null : this._tree._tree;
  }
  /**
  Iterate over the current node and all its descendants, calling
  `enter` when entering a node and `leave`, if given, when leaving
  one. When `enter` returns `false`, any children of that node are
  skipped, and `leave` isn't called for it.
  */
  iterate(enter, leave) {
    for (let depth = 0; ; ) {
      let mustLeave = false;
      if (this.type.isAnonymous || enter(this) !== false) {
        if (this.firstChild()) {
          depth++;
          continue;
        }
        if (!this.type.isAnonymous)
          mustLeave = true;
      }
      for (; ; ) {
        if (mustLeave && leave)
          leave(this);
        mustLeave = this.type.isAnonymous;
        if (this.nextSibling())
          break;
        if (!depth)
          return;
        this.parent();
        depth--;
        mustLeave = true;
      }
    }
  }
  /**
  Test whether the current node matches a given context—a sequence
  of direct parent node names. Empty strings in the context array
  are treated as wildcards.
  */
  matchContext(context) {
    if (!this.buffer)
      return matchNodeContext(this.node, context);
    let { buffer } = this.buffer, { types: types2 } = buffer.set;
    for (let i2 = context.length - 1, d2 = this.stack.length - 1; i2 >= 0; d2--) {
      if (d2 < 0)
        return matchNodeContext(this.node, context, i2);
      let type = types2[buffer.buffer[this.stack[d2]]];
      if (!type.isAnonymous) {
        if (context[i2] && context[i2] != type.name)
          return false;
        i2--;
      }
    }
    return true;
  }
};
function hasChild(tree) {
  return tree.children.some((ch2) => ch2 instanceof TreeBuffer || !ch2.type.isAnonymous || hasChild(ch2));
}
function buildTree(data2) {
  var _a3;
  let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data2;
  let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
  let types2 = nodeSet.types;
  let contextHash = 0, lookAhead = 0;
  function takeNode(parentStart, minPos, children2, positions2, inRepeat, depth) {
    let { id: id3, start, end, size } = cursor;
    let lookAheadAtStart = lookAhead;
    while (size < 0) {
      cursor.next();
      if (size == -1) {
        let node2 = reused[id3];
        children2.push(node2);
        positions2.push(start - parentStart);
        return;
      } else if (size == -3) {
        contextHash = id3;
        return;
      } else if (size == -4) {
        lookAhead = id3;
        return;
      } else {
        throw new RangeError(`Unrecognized record size: ${size}`);
      }
    }
    let type = types2[id3], node, buffer2;
    let startPos = start - parentStart;
    if (end - start <= maxBufferLength && (buffer2 = findBufferSize(cursor.pos - minPos, inRepeat))) {
      let data3 = new Uint16Array(buffer2.size - buffer2.skip);
      let endPos = cursor.pos - buffer2.size, index = data3.length;
      while (cursor.pos > endPos)
        index = copyToBuffer(buffer2.start, data3, index);
      node = new TreeBuffer(data3, end - buffer2.start, nodeSet);
      startPos = buffer2.start - parentStart;
    } else {
      let endPos = cursor.pos - size;
      cursor.next();
      let localChildren = [], localPositions = [];
      let localInRepeat = id3 >= minRepeatType ? id3 : -1;
      let lastGroup = 0, lastEnd = end;
      while (cursor.pos > endPos) {
        if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
          if (cursor.end <= lastEnd - maxBufferLength) {
            makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
            lastGroup = localChildren.length;
            lastEnd = cursor.end;
          }
          cursor.next();
        } else if (depth > 2500) {
          takeFlatNode(start, endPos, localChildren, localPositions);
        } else {
          takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth + 1);
        }
      }
      if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
      localChildren.reverse();
      localPositions.reverse();
      if (localInRepeat > -1 && lastGroup > 0) {
        let make = makeBalanced(type);
        node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
      } else {
        node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
      }
    }
    children2.push(node);
    positions2.push(startPos);
  }
  function takeFlatNode(parentStart, minPos, children2, positions2) {
    let nodes = [];
    let nodeCount = 0, stopAt = -1;
    while (cursor.pos > minPos) {
      let { id: id3, start, end, size } = cursor;
      if (size > 4) {
        cursor.next();
      } else if (stopAt > -1 && start < stopAt) {
        break;
      } else {
        if (stopAt < 0)
          stopAt = end - maxBufferLength;
        nodes.push(id3, start, end);
        nodeCount++;
        cursor.next();
      }
    }
    if (nodeCount) {
      let buffer2 = new Uint16Array(nodeCount * 4);
      let start = nodes[nodes.length - 2];
      for (let i2 = nodes.length - 3, j2 = 0; i2 >= 0; i2 -= 3) {
        buffer2[j2++] = nodes[i2];
        buffer2[j2++] = nodes[i2 + 1] - start;
        buffer2[j2++] = nodes[i2 + 2] - start;
        buffer2[j2++] = j2;
      }
      children2.push(new TreeBuffer(buffer2, nodes[2] - start, nodeSet));
      positions2.push(start - parentStart);
    }
  }
  function makeBalanced(type) {
    return (children2, positions2, length2) => {
      let lookAhead2 = 0, lastI = children2.length - 1, last, lookAheadProp;
      if (lastI >= 0 && (last = children2[lastI]) instanceof Tree) {
        if (!lastI && last.type == type && last.length == length2)
          return last;
        if (lookAheadProp = last.prop(NodeProp.lookAhead))
          lookAhead2 = positions2[lastI] + last.length + lookAheadProp;
      }
      return makeTree(type, children2, positions2, length2, lookAhead2);
    };
  }
  function makeRepeatLeaf(children2, positions2, base2, i2, from, to2, type, lookAhead2) {
    let localChildren = [], localPositions = [];
    while (children2.length > i2) {
      localChildren.push(children2.pop());
      localPositions.push(positions2.pop() + base2 - from);
    }
    children2.push(makeTree(nodeSet.types[type], localChildren, localPositions, to2 - from, lookAhead2 - to2));
    positions2.push(from - base2);
  }
  function makeTree(type, children2, positions2, length2, lookAhead2 = 0, props) {
    if (contextHash) {
      let pair2 = [NodeProp.contextHash, contextHash];
      props = props ? [pair2].concat(props) : [pair2];
    }
    if (lookAhead2 > 25) {
      let pair2 = [NodeProp.lookAhead, lookAhead2];
      props = props ? [pair2].concat(props) : [pair2];
    }
    return new Tree(type, children2, positions2, length2, props);
  }
  function findBufferSize(maxSize, inRepeat) {
    let fork = cursor.fork();
    let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
    let result = { size: 0, start: 0, skip: 0 };
    scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos; ) {
      let nodeSize2 = fork.size;
      if (fork.id == inRepeat && nodeSize2 >= 0) {
        result.size = size;
        result.start = start;
        result.skip = skip;
        skip += 4;
        size += 4;
        fork.next();
        continue;
      }
      let startPos = fork.pos - nodeSize2;
      if (nodeSize2 < 0 || startPos < minPos || fork.start < minStart)
        break;
      let localSkipped = fork.id >= minRepeatType ? 4 : 0;
      let nodeStart2 = fork.start;
      fork.next();
      while (fork.pos > startPos) {
        if (fork.size < 0) {
          if (fork.size == -3)
            localSkipped += 4;
          else
            break scan;
        } else if (fork.id >= minRepeatType) {
          localSkipped += 4;
        }
        fork.next();
      }
      start = nodeStart2;
      size += nodeSize2;
      skip += localSkipped;
    }
    if (inRepeat < 0 || size == maxSize) {
      result.size = size;
      result.start = start;
      result.skip = skip;
    }
    return result.size > 4 ? result : void 0;
  }
  function copyToBuffer(bufferStart, buffer2, index) {
    let { id: id3, start, end, size } = cursor;
    cursor.next();
    if (size >= 0 && id3 < minRepeatType) {
      let startIndex = index;
      if (size > 4) {
        let endPos = cursor.pos - (size - 4);
        while (cursor.pos > endPos)
          index = copyToBuffer(bufferStart, buffer2, index);
      }
      buffer2[--index] = startIndex;
      buffer2[--index] = end - bufferStart;
      buffer2[--index] = start - bufferStart;
      buffer2[--index] = id3;
    } else if (size == -3) {
      contextHash = id3;
    } else if (size == -4) {
      lookAhead = id3;
    }
    return index;
  }
  let children = [], positions = [];
  while (cursor.pos > 0)
    takeNode(data2.start || 0, data2.bufferStart || 0, children, positions, -1, 0);
  let length = (_a3 = data2.length) !== null && _a3 !== void 0 ? _a3 : children.length ? positions[0] + children[0].length : 0;
  return new Tree(types2[data2.topID], children.reverse(), positions.reverse(), length);
}
var nodeSizeCache = /* @__PURE__ */ new WeakMap();
function nodeSize(balanceType, node) {
  if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
    return 1;
  let size = nodeSizeCache.get(node);
  if (size == null) {
    size = 1;
    for (let child of node.children) {
      if (child.type != balanceType || !(child instanceof Tree)) {
        size = 1;
        break;
      }
      size += nodeSize(balanceType, child);
    }
    nodeSizeCache.set(node, size);
  }
  return size;
}
function balanceRange(balanceType, children, positions, from, to2, start, length, mkTop, mkTree) {
  let total = 0;
  for (let i2 = from; i2 < to2; i2++)
    total += nodeSize(balanceType, children[i2]);
  let maxChild = Math.ceil(
    total * 1.5 / 8
    /* Balance.BranchFactor */
  );
  let localChildren = [], localPositions = [];
  function divide(children2, positions2, from2, to3, offset) {
    for (let i2 = from2; i2 < to3; ) {
      let groupFrom = i2, groupStart = positions2[i2], groupSize = nodeSize(balanceType, children2[i2]);
      i2++;
      for (; i2 < to3; i2++) {
        let nextSize = nodeSize(balanceType, children2[i2]);
        if (groupSize + nextSize >= maxChild)
          break;
        groupSize += nextSize;
      }
      if (i2 == groupFrom + 1) {
        if (groupSize > maxChild) {
          let only = children2[groupFrom];
          divide(only.children, only.positions, 0, only.children.length, positions2[groupFrom] + offset);
          continue;
        }
        localChildren.push(children2[groupFrom]);
      } else {
        let length2 = positions2[i2 - 1] + children2[i2 - 1].length - groupStart;
        localChildren.push(balanceRange(balanceType, children2, positions2, groupFrom, i2, groupStart, length2, null, mkTree));
      }
      localPositions.push(groupStart + offset - start);
    }
  }
  divide(children, positions, from, to2, 0);
  return (mkTop || mkTree)(localChildren, localPositions, length);
}
var NodeWeakMap = class {
  constructor() {
    this.map = /* @__PURE__ */ new WeakMap();
  }
  setBuffer(buffer, index, value) {
    let inner = this.map.get(buffer);
    if (!inner)
      this.map.set(buffer, inner = /* @__PURE__ */ new Map());
    inner.set(index, value);
  }
  getBuffer(buffer, index) {
    let inner = this.map.get(buffer);
    return inner && inner.get(index);
  }
  /**
  Set the value for this syntax node.
  */
  set(node, value) {
    if (node instanceof BufferNode)
      this.setBuffer(node.context.buffer, node.index, value);
    else if (node instanceof TreeNode)
      this.map.set(node.tree, value);
  }
  /**
  Retrieve value for this syntax node, if it exists in the map.
  */
  get(node) {
    return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index) : node instanceof TreeNode ? this.map.get(node.tree) : void 0;
  }
  /**
  Set the value for the node that a cursor currently points to.
  */
  cursorSet(cursor, value) {
    if (cursor.buffer)
      this.setBuffer(cursor.buffer.buffer, cursor.index, value);
    else
      this.map.set(cursor.tree, value);
  }
  /**
  Retrieve the value for the node that a cursor currently points
  to.
  */
  cursorGet(cursor) {
    return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);
  }
};
var TreeFragment = class _TreeFragment {
  /**
  Construct a tree fragment. You'll usually want to use
  [`addTree`](#common.TreeFragment^addTree) and
  [`applyChanges`](#common.TreeFragment^applyChanges) instead of
  calling this directly.
  */
  constructor(from, to2, tree, offset, openStart = false, openEnd = false) {
    this.from = from;
    this.to = to2;
    this.tree = tree;
    this.offset = offset;
    this.open = (openStart ? 1 : 0) | (openEnd ? 2 : 0);
  }
  /**
  Whether the start of the fragment represents the start of a
  parse, or the end of a change. (In the second case, it may not
  be safe to reuse some nodes at the start, depending on the
  parsing algorithm.)
  */
  get openStart() {
    return (this.open & 1) > 0;
  }
  /**
  Whether the end of the fragment represents the end of a
  full-document parse, or the start of a change.
  */
  get openEnd() {
    return (this.open & 2) > 0;
  }
  /**
  Create a set of fragments from a freshly parsed tree, or update
  an existing set of fragments by replacing the ones that overlap
  with a tree with content from the new tree. When `partial` is
  true, the parse is treated as incomplete, and the resulting
  fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
  true.
  */
  static addTree(tree, fragments = [], partial = false) {
    let result = [new _TreeFragment(0, tree.length, tree, 0, false, partial)];
    for (let f2 of fragments)
      if (f2.to > tree.length)
        result.push(f2);
    return result;
  }
  /**
  Apply a set of edits to an array of fragments, removing or
  splitting fragments as necessary to remove edited ranges, and
  adjusting offsets for fragments that moved.
  */
  static applyChanges(fragments, changes, minGap = 128) {
    if (!changes.length)
      return fragments;
    let result = [];
    let fI2 = 1, nextF = fragments.length ? fragments[0] : null;
    for (let cI2 = 0, pos = 0, off2 = 0; ; cI2++) {
      let nextC = cI2 < changes.length ? changes[cI2] : null;
      let nextPos = nextC ? nextC.fromA : 1e9;
      if (nextPos - pos >= minGap)
        while (nextF && nextF.from < nextPos) {
          let cut = nextF;
          if (pos >= cut.from || nextPos <= cut.to || off2) {
            let fFrom = Math.max(cut.from, pos) - off2, fTo = Math.min(cut.to, nextPos) - off2;
            cut = fFrom >= fTo ? null : new _TreeFragment(fFrom, fTo, cut.tree, cut.offset + off2, cI2 > 0, !!nextC);
          }
          if (cut)
            result.push(cut);
          if (nextF.to > nextPos)
            break;
          nextF = fI2 < fragments.length ? fragments[fI2++] : null;
        }
      if (!nextC)
        break;
      pos = nextC.toA;
      off2 = nextC.toA - nextC.toB;
    }
    return result;
  }
};
var Parser = class {
  /**
  Start a parse, returning a [partial parse](#common.PartialParse)
  object. [`fragments`](#common.TreeFragment) can be passed in to
  make the parse incremental.
  
  By default, the entire input is parsed. You can pass `ranges`,
  which should be a sorted array of non-empty, non-overlapping
  ranges, to parse only those ranges. The tree returned in that
  case will start at `ranges[0].from`.
  */
  startParse(input, fragments, ranges) {
    if (typeof input == "string")
      input = new StringInput(input);
    ranges = !ranges ? [new Range2(0, input.length)] : ranges.length ? ranges.map((r2) => new Range2(r2.from, r2.to)) : [new Range2(0, 0)];
    return this.createParse(input, fragments || [], ranges);
  }
  /**
  Run a full parse, returning the resulting tree.
  */
  parse(input, fragments, ranges) {
    let parse = this.startParse(input, fragments, ranges);
    for (; ; ) {
      let done = parse.advance();
      if (done)
        return done;
    }
  }
};
var StringInput = class {
  constructor(string2) {
    this.string = string2;
  }
  get length() {
    return this.string.length;
  }
  chunk(from) {
    return this.string.slice(from);
  }
  get lineChunks() {
    return false;
  }
  read(from, to2) {
    return this.string.slice(from, to2);
  }
};
function parseMixed(nest) {
  return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);
}
var InnerParse = class {
  constructor(parser5, parse, overlay, target, from) {
    this.parser = parser5;
    this.parse = parse;
    this.overlay = overlay;
    this.target = target;
    this.from = from;
  }
};
function checkRanges(ranges) {
  if (!ranges.length || ranges.some((r2) => r2.from >= r2.to))
    throw new RangeError("Invalid inner parse ranges given: " + JSON.stringify(ranges));
}
var ActiveOverlay = class {
  constructor(parser5, predicate, mounts, index, start, target, prev) {
    this.parser = parser5;
    this.predicate = predicate;
    this.mounts = mounts;
    this.index = index;
    this.start = start;
    this.target = target;
    this.prev = prev;
    this.depth = 0;
    this.ranges = [];
  }
};
var stoppedInner = new NodeProp({ perNode: true });
var MixedParse = class {
  constructor(base2, nest, input, fragments, ranges) {
    this.nest = nest;
    this.input = input;
    this.fragments = fragments;
    this.ranges = ranges;
    this.inner = [];
    this.innerDone = 0;
    this.baseTree = null;
    this.stoppedAt = null;
    this.baseParse = base2;
  }
  advance() {
    if (this.baseParse) {
      let done2 = this.baseParse.advance();
      if (!done2)
        return null;
      this.baseParse = null;
      this.baseTree = done2;
      this.startInner();
      if (this.stoppedAt != null)
        for (let inner2 of this.inner)
          inner2.parse.stopAt(this.stoppedAt);
    }
    if (this.innerDone == this.inner.length) {
      let result = this.baseTree;
      if (this.stoppedAt != null)
        result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));
      return result;
    }
    let inner = this.inner[this.innerDone], done = inner.parse.advance();
    if (done) {
      this.innerDone++;
      let props = Object.assign(/* @__PURE__ */ Object.create(null), inner.target.props);
      props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);
      inner.target.props = props;
    }
    return null;
  }
  get parsedPos() {
    if (this.baseParse)
      return 0;
    let pos = this.input.length;
    for (let i2 = this.innerDone; i2 < this.inner.length; i2++) {
      if (this.inner[i2].from < pos)
        pos = Math.min(pos, this.inner[i2].parse.parsedPos);
    }
    return pos;
  }
  stopAt(pos) {
    this.stoppedAt = pos;
    if (this.baseParse)
      this.baseParse.stopAt(pos);
    else
      for (let i2 = this.innerDone; i2 < this.inner.length; i2++)
        this.inner[i2].parse.stopAt(pos);
  }
  startInner() {
    let fragmentCursor = new FragmentCursor(this.fragments);
    let overlay = null;
    let covered = null;
    let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
    scan: for (let nest, isCovered; ; ) {
      let enter = true, range;
      if (this.stoppedAt != null && cursor.from >= this.stoppedAt) {
        enter = false;
      } else if (fragmentCursor.hasNode(cursor)) {
        if (overlay) {
          let match = overlay.mounts.find((m2) => m2.frag.from <= cursor.from && m2.frag.to >= cursor.to && m2.mount.overlay);
          if (match)
            for (let r2 of match.mount.overlay) {
              let from = r2.from + match.pos, to2 = r2.to + match.pos;
              if (from >= cursor.from && to2 <= cursor.to && !overlay.ranges.some((r3) => r3.from < to2 && r3.to > from))
                overlay.ranges.push({ from, to: to2 });
            }
        }
        enter = false;
      } else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {
        enter = isCovered != 2;
      } else if (!cursor.type.isAnonymous && (nest = this.nest(cursor, this.input)) && (cursor.from < cursor.to || !nest.overlay)) {
        if (!cursor.tree)
          materialize(cursor);
        let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);
        if (typeof nest.overlay == "function") {
          overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);
        } else {
          let ranges = punchRanges(this.ranges, nest.overlay || (cursor.from < cursor.to ? [new Range2(cursor.from, cursor.to)] : []));
          if (ranges.length)
            checkRanges(ranges);
          if (ranges.length || !nest.overlay)
            this.inner.push(new InnerParse(nest.parser, ranges.length ? nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges) : nest.parser.startParse(""), nest.overlay ? nest.overlay.map((r2) => new Range2(r2.from - cursor.from, r2.to - cursor.from)) : null, cursor.tree, ranges.length ? ranges[0].from : cursor.from));
          if (!nest.overlay)
            enter = false;
          else if (ranges.length)
            covered = { ranges, depth: 0, prev: covered };
        }
      } else if (overlay && (range = overlay.predicate(cursor))) {
        if (range === true)
          range = new Range2(cursor.from, cursor.to);
        if (range.from < range.to)
          overlay.ranges.push(range);
      }
      if (enter && cursor.firstChild()) {
        if (overlay)
          overlay.depth++;
        if (covered)
          covered.depth++;
      } else {
        for (; ; ) {
          if (cursor.nextSibling())
            break;
          if (!cursor.parent())
            break scan;
          if (overlay && !--overlay.depth) {
            let ranges = punchRanges(this.ranges, overlay.ranges);
            if (ranges.length) {
              checkRanges(ranges);
              this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map((r2) => new Range2(r2.from - overlay.start, r2.to - overlay.start)), overlay.target, ranges[0].from));
            }
            overlay = overlay.prev;
          }
          if (covered && !--covered.depth)
            covered = covered.prev;
        }
      }
    }
  }
};
function checkCover(covered, from, to2) {
  for (let range of covered) {
    if (range.from >= to2)
      break;
    if (range.to > from)
      return range.from <= from && range.to >= to2 ? 2 : 1;
  }
  return 0;
}
function sliceBuf(buf, startI, endI, nodes, positions, off2) {
  if (startI < endI) {
    let from = buf.buffer[startI + 1];
    nodes.push(buf.slice(startI, endI, from));
    positions.push(from - off2);
  }
}
function materialize(cursor) {
  let { node } = cursor, stack = [];
  let buffer = node.context.buffer;
  do {
    stack.push(cursor.index);
    cursor.parent();
  } while (!cursor.tree);
  let base2 = cursor.tree, i2 = base2.children.indexOf(buffer);
  let buf = base2.children[i2], b2 = buf.buffer, newStack = [i2];
  function split(startI, endI, type, innerOffset, length, stackPos) {
    let targetI = stack[stackPos];
    let children = [], positions = [];
    sliceBuf(buf, startI, targetI, children, positions, innerOffset);
    let from = b2[targetI + 1], to2 = b2[targetI + 2];
    newStack.push(children.length);
    let child = stackPos ? split(targetI + 4, b2[targetI + 3], buf.set.types[b2[targetI]], from, to2 - from, stackPos - 1) : node.toTree();
    children.push(child);
    positions.push(from - innerOffset);
    sliceBuf(buf, b2[targetI + 3], endI, children, positions, innerOffset);
    return new Tree(type, children, positions, length);
  }
  base2.children[i2] = split(0, b2.length, NodeType.none, 0, buf.length, stack.length - 1);
  for (let index of newStack) {
    let tree = cursor.tree.children[index], pos = cursor.tree.positions[index];
    cursor.yield(new TreeNode(tree, pos + cursor.from, index, cursor._tree));
  }
}
var StructureCursor = class {
  constructor(root, offset) {
    this.offset = offset;
    this.done = false;
    this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
  }
  // Move to the first node (in pre-order) that starts at or after `pos`.
  moveTo(pos) {
    let { cursor } = this, p2 = pos - this.offset;
    while (!this.done && cursor.from < p2) {
      if (cursor.to >= pos && cursor.enter(p2, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;
      else if (!cursor.next(false))
        this.done = true;
    }
  }
  hasNode(cursor) {
    this.moveTo(cursor.from);
    if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {
      for (let tree = this.cursor.tree; ; ) {
        if (tree == cursor.tree)
          return true;
        if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)
          tree = tree.children[0];
        else
          break;
      }
    }
    return false;
  }
};
var FragmentCursor = class {
  constructor(fragments) {
    var _a3;
    this.fragments = fragments;
    this.curTo = 0;
    this.fragI = 0;
    if (fragments.length) {
      let first = this.curFrag = fragments[0];
      this.curTo = (_a3 = first.tree.prop(stoppedInner)) !== null && _a3 !== void 0 ? _a3 : first.to;
      this.inner = new StructureCursor(first.tree, -first.offset);
    } else {
      this.curFrag = this.inner = null;
    }
  }
  hasNode(node) {
    while (this.curFrag && node.from >= this.curTo)
      this.nextFrag();
    return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);
  }
  nextFrag() {
    var _a3;
    this.fragI++;
    if (this.fragI == this.fragments.length) {
      this.curFrag = this.inner = null;
    } else {
      let frag = this.curFrag = this.fragments[this.fragI];
      this.curTo = (_a3 = frag.tree.prop(stoppedInner)) !== null && _a3 !== void 0 ? _a3 : frag.to;
      this.inner = new StructureCursor(frag.tree, -frag.offset);
    }
  }
  findMounts(pos, parser5) {
    var _a3;
    let result = [];
    if (this.inner) {
      this.inner.cursor.moveTo(pos, 1);
      for (let pos2 = this.inner.cursor.node; pos2; pos2 = pos2.parent) {
        let mount = (_a3 = pos2.tree) === null || _a3 === void 0 ? void 0 : _a3.prop(NodeProp.mounted);
        if (mount && mount.parser == parser5) {
          for (let i2 = this.fragI; i2 < this.fragments.length; i2++) {
            let frag = this.fragments[i2];
            if (frag.from >= pos2.to)
              break;
            if (frag.tree == this.curFrag.tree)
              result.push({
                frag,
                pos: pos2.from - frag.offset,
                mount
              });
          }
        }
      }
    }
    return result;
  }
};
function punchRanges(outer, ranges) {
  let copy = null, current = ranges;
  for (let i2 = 1, j2 = 0; i2 < outer.length; i2++) {
    let gapFrom = outer[i2 - 1].to, gapTo = outer[i2].from;
    for (; j2 < current.length; j2++) {
      let r2 = current[j2];
      if (r2.from >= gapTo)
        break;
      if (r2.to <= gapFrom)
        continue;
      if (!copy)
        current = copy = ranges.slice();
      if (r2.from < gapFrom) {
        copy[j2] = new Range2(r2.from, gapFrom);
        if (r2.to > gapTo)
          copy.splice(j2 + 1, 0, new Range2(gapTo, r2.to));
      } else if (r2.to > gapTo) {
        copy[j2--] = new Range2(gapTo, r2.to);
      } else {
        copy.splice(j2--, 1);
      }
    }
  }
  return current;
}
function findCoverChanges(a2, b2, from, to2) {
  let iA2 = 0, iB2 = 0, inA = false, inB = false, pos = -1e9;
  let result = [];
  for (; ; ) {
    let nextA = iA2 == a2.length ? 1e9 : inA ? a2[iA2].to : a2[iA2].from;
    let nextB = iB2 == b2.length ? 1e9 : inB ? b2[iB2].to : b2[iB2].from;
    if (inA != inB) {
      let start = Math.max(pos, from), end = Math.min(nextA, nextB, to2);
      if (start < end)
        result.push(new Range2(start, end));
    }
    pos = Math.min(nextA, nextB);
    if (pos == 1e9)
      break;
    if (nextA == pos) {
      if (!inA)
        inA = true;
      else {
        inA = false;
        iA2++;
      }
    }
    if (nextB == pos) {
      if (!inB)
        inB = true;
      else {
        inB = false;
        iB2++;
      }
    }
  }
  return result;
}
function enterFragments(mounts, ranges) {
  let result = [];
  for (let { pos, mount, frag } of mounts) {
    let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;
    let from = Math.max(frag.from, startPos), to2 = Math.min(frag.to, endPos);
    if (mount.overlay) {
      let overlay = mount.overlay.map((r2) => new Range2(r2.from + pos, r2.to + pos));
      let changes = findCoverChanges(ranges, overlay, from, to2);
      for (let i2 = 0, pos2 = from; ; i2++) {
        let last = i2 == changes.length, end = last ? to2 : changes[i2].from;
        if (end > pos2)
          result.push(new TreeFragment(pos2, end, mount.tree, -startPos, frag.from >= pos2 || frag.openStart, frag.to <= end || frag.openEnd));
        if (last)
          break;
        pos2 = changes[i2].to;
      }
    } else {
      result.push(new TreeFragment(from, to2, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));
    }
  }
  return result;
}

// node_modules/@lezer/highlight/dist/index.js
var nextTagID = 0;
var Tag = class _Tag {
  /**
  @internal
  */
  constructor(set, base2, modified) {
    this.set = set;
    this.base = base2;
    this.modified = modified;
    this.id = nextTagID++;
  }
  /**
  Define a new tag. If `parent` is given, the tag is treated as a
  sub-tag of that parent, and
  [highlighters](#highlight.tagHighlighter) that don't mention
  this tag will try to fall back to the parent tag (or grandparent
  tag, etc).
  */
  static define(parent) {
    if (parent === null || parent === void 0 ? void 0 : parent.base)
      throw new Error("Can not derive from a modified tag");
    let tag = new _Tag([], null, []);
    tag.set.push(tag);
    if (parent)
      for (let t3 of parent.set)
        tag.set.push(t3);
    return tag;
  }
  /**
  Define a tag _modifier_, which is a function that, given a tag,
  will return a tag that is a subtag of the original. Applying the
  same modifier to a twice tag will return the same value (`m1(t1)
  == m1(t1)`) and applying multiple modifiers will, regardless or
  order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
  
  When multiple modifiers are applied to a given base tag, each
  smaller set of modifiers is registered as a parent, so that for
  example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
  `m1(m3(t1)`, and so on.
  */
  static defineModifier() {
    let mod = new Modifier();
    return (tag) => {
      if (tag.modified.indexOf(mod) > -1)
        return tag;
      return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a2, b2) => a2.id - b2.id));
    };
  }
};
var nextModifierID = 0;
var Modifier = class _Modifier {
  constructor() {
    this.instances = [];
    this.id = nextModifierID++;
  }
  static get(base2, mods) {
    if (!mods.length)
      return base2;
    let exists = mods[0].instances.find((t3) => t3.base == base2 && sameArray2(mods, t3.modified));
    if (exists)
      return exists;
    let set = [], tag = new Tag(set, base2, mods);
    for (let m2 of mods)
      m2.instances.push(tag);
    let configs = powerSet(mods);
    for (let parent of base2.set)
      if (!parent.modified.length)
        for (let config2 of configs)
          set.push(_Modifier.get(parent, config2));
    return tag;
  }
};
function sameArray2(a2, b2) {
  return a2.length == b2.length && a2.every((x2, i2) => x2 == b2[i2]);
}
function powerSet(array) {
  let sets = [[]];
  for (let i2 = 0; i2 < array.length; i2++) {
    for (let j2 = 0, e25 = sets.length; j2 < e25; j2++) {
      sets.push(sets[j2].concat(array[i2]));
    }
  }
  return sets.sort((a2, b2) => b2.length - a2.length);
}
function styleTags(spec) {
  let byName = /* @__PURE__ */ Object.create(null);
  for (let prop in spec) {
    let tags3 = spec[prop];
    if (!Array.isArray(tags3))
      tags3 = [tags3];
    for (let part of prop.split(" "))
      if (part) {
        let pieces = [], mode = 2, rest = part;
        for (let pos = 0; ; ) {
          if (rest == "..." && pos > 0 && pos + 3 == part.length) {
            mode = 1;
            break;
          }
          let m2 = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
          if (!m2)
            throw new RangeError("Invalid path: " + part);
          pieces.push(m2[0] == "*" ? "" : m2[0][0] == '"' ? JSON.parse(m2[0]) : m2[0]);
          pos += m2[0].length;
          if (pos == part.length)
            break;
          let next = part[pos++];
          if (pos == part.length && next == "!") {
            mode = 0;
            break;
          }
          if (next != "/")
            throw new RangeError("Invalid path: " + part);
          rest = part.slice(pos);
        }
        let last = pieces.length - 1, inner = pieces[last];
        if (!inner)
          throw new RangeError("Invalid path: " + part);
        let rule = new Rule(tags3, mode, last > 0 ? pieces.slice(0, last) : null);
        byName[inner] = rule.sort(byName[inner]);
      }
  }
  return ruleNodeProp.add(byName);
}
var ruleNodeProp = new NodeProp();
var Rule = class {
  constructor(tags3, mode, context, next) {
    this.tags = tags3;
    this.mode = mode;
    this.context = context;
    this.next = next;
  }
  get opaque() {
    return this.mode == 0;
  }
  get inherit() {
    return this.mode == 1;
  }
  sort(other) {
    if (!other || other.depth < this.depth) {
      this.next = other;
      return this;
    }
    other.next = this.sort(other.next);
    return other;
  }
  get depth() {
    return this.context ? this.context.length : 0;
  }
};
Rule.empty = new Rule([], 2, null);
function tagHighlighter(tags3, options) {
  let map = /* @__PURE__ */ Object.create(null);
  for (let style of tags3) {
    if (!Array.isArray(style.tag))
      map[style.tag.id] = style.class;
    else
      for (let tag of style.tag)
        map[tag.id] = style.class;
  }
  let { scope, all = null } = options || {};
  return {
    style: (tags4) => {
      let cls = all;
      for (let tag of tags4) {
        for (let sub of tag.set) {
          let tagClass = map[sub.id];
          if (tagClass) {
            cls = cls ? cls + " " + tagClass : tagClass;
            break;
          }
        }
      }
      return cls;
    },
    scope
  };
}
function highlightTags(highlighters, tags3) {
  let result = null;
  for (let highlighter of highlighters) {
    let value = highlighter.style(tags3);
    if (value)
      result = result ? result + " " + value : value;
  }
  return result;
}
function highlightTree(tree, highlighter, putStyle, from = 0, to2 = tree.length) {
  let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
  builder.highlightRange(tree.cursor(), from, to2, "", builder.highlighters);
  builder.flush(to2);
}
var HighlightBuilder = class {
  constructor(at2, highlighters, span) {
    this.at = at2;
    this.highlighters = highlighters;
    this.span = span;
    this.class = "";
  }
  startSpan(at2, cls) {
    if (cls != this.class) {
      this.flush(at2);
      if (at2 > this.at)
        this.at = at2;
      this.class = cls;
    }
  }
  flush(to2) {
    if (to2 > this.at && this.class)
      this.span(this.at, to2, this.class);
  }
  highlightRange(cursor, from, to2, inheritedClass, highlighters) {
    let { type, from: start, to: end } = cursor;
    if (start >= to2 || end <= from)
      return;
    if (type.isTop)
      highlighters = this.highlighters.filter((h2) => !h2.scope || h2.scope(type));
    let cls = inheritedClass;
    let rule = getStyleTags(cursor) || Rule.empty;
    let tagCls = highlightTags(highlighters, rule.tags);
    if (tagCls) {
      if (cls)
        cls += " ";
      cls += tagCls;
      if (rule.mode == 1)
        inheritedClass += (inheritedClass ? " " : "") + tagCls;
    }
    this.startSpan(Math.max(from, start), cls);
    if (rule.opaque)
      return;
    let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
    if (mounted && mounted.overlay) {
      let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
      let innerHighlighters = this.highlighters.filter((h2) => !h2.scope || h2.scope(mounted.tree.type));
      let hasChild2 = cursor.firstChild();
      for (let i2 = 0, pos = start; ; i2++) {
        let next = i2 < mounted.overlay.length ? mounted.overlay[i2] : null;
        let nextPos = next ? next.from + start : end;
        let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to2, nextPos);
        if (rangeFrom < rangeTo && hasChild2) {
          while (cursor.from < rangeTo) {
            this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
            this.startSpan(Math.min(rangeTo, cursor.to), cls);
            if (cursor.to >= nextPos || !cursor.nextSibling())
              break;
          }
        }
        if (!next || nextPos > to2)
          break;
        pos = next.to + start;
        if (pos > from) {
          this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to2, pos), "", innerHighlighters);
          this.startSpan(Math.min(to2, pos), cls);
        }
      }
      if (hasChild2)
        cursor.parent();
    } else if (cursor.firstChild()) {
      if (mounted)
        inheritedClass = "";
      do {
        if (cursor.to <= from)
          continue;
        if (cursor.from >= to2)
          break;
        this.highlightRange(cursor, from, to2, inheritedClass, highlighters);
        this.startSpan(Math.min(to2, cursor.to), cls);
      } while (cursor.nextSibling());
      cursor.parent();
    }
  }
};
function getStyleTags(node) {
  let rule = node.type.prop(ruleNodeProp);
  while (rule && rule.context && !node.matchContext(rule.context))
    rule = rule.next;
  return rule || null;
}
var t = Tag.define;
var comment = t();
var name = t();
var typeName = t(name);
var propertyName = t(name);
var literal = t();
var string = t(literal);
var number = t(literal);
var content = t();
var heading = t(content);
var keyword = t();
var operator = t();
var punctuation = t();
var bracket = t(punctuation);
var meta = t();
var tags = {
  /**
  A comment.
  */
  comment,
  /**
  A line [comment](#highlight.tags.comment).
  */
  lineComment: t(comment),
  /**
  A block [comment](#highlight.tags.comment).
  */
  blockComment: t(comment),
  /**
  A documentation [comment](#highlight.tags.comment).
  */
  docComment: t(comment),
  /**
  Any kind of identifier.
  */
  name,
  /**
  The [name](#highlight.tags.name) of a variable.
  */
  variableName: t(name),
  /**
  A type [name](#highlight.tags.name).
  */
  typeName,
  /**
  A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
  */
  tagName: t(typeName),
  /**
  A property or field [name](#highlight.tags.name).
  */
  propertyName,
  /**
  An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
  */
  attributeName: t(propertyName),
  /**
  The [name](#highlight.tags.name) of a class.
  */
  className: t(name),
  /**
  A label [name](#highlight.tags.name).
  */
  labelName: t(name),
  /**
  A namespace [name](#highlight.tags.name).
  */
  namespace: t(name),
  /**
  The [name](#highlight.tags.name) of a macro.
  */
  macroName: t(name),
  /**
  A literal value.
  */
  literal,
  /**
  A string [literal](#highlight.tags.literal).
  */
  string,
  /**
  A documentation [string](#highlight.tags.string).
  */
  docString: t(string),
  /**
  A character literal (subtag of [string](#highlight.tags.string)).
  */
  character: t(string),
  /**
  An attribute value (subtag of [string](#highlight.tags.string)).
  */
  attributeValue: t(string),
  /**
  A number [literal](#highlight.tags.literal).
  */
  number,
  /**
  An integer [number](#highlight.tags.number) literal.
  */
  integer: t(number),
  /**
  A floating-point [number](#highlight.tags.number) literal.
  */
  float: t(number),
  /**
  A boolean [literal](#highlight.tags.literal).
  */
  bool: t(literal),
  /**
  Regular expression [literal](#highlight.tags.literal).
  */
  regexp: t(literal),
  /**
  An escape [literal](#highlight.tags.literal), for example a
  backslash escape in a string.
  */
  escape: t(literal),
  /**
  A color [literal](#highlight.tags.literal).
  */
  color: t(literal),
  /**
  A URL [literal](#highlight.tags.literal).
  */
  url: t(literal),
  /**
  A language keyword.
  */
  keyword,
  /**
  The [keyword](#highlight.tags.keyword) for the self or this
  object.
  */
  self: t(keyword),
  /**
  The [keyword](#highlight.tags.keyword) for null.
  */
  null: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) denoting some atomic value.
  */
  atom: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that represents a unit.
  */
  unit: t(keyword),
  /**
  A modifier [keyword](#highlight.tags.keyword).
  */
  modifier: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that acts as an operator.
  */
  operatorKeyword: t(keyword),
  /**
  A control-flow related [keyword](#highlight.tags.keyword).
  */
  controlKeyword: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that defines something.
  */
  definitionKeyword: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) related to defining or
  interfacing with modules.
  */
  moduleKeyword: t(keyword),
  /**
  An operator.
  */
  operator,
  /**
  An [operator](#highlight.tags.operator) that dereferences something.
  */
  derefOperator: t(operator),
  /**
  Arithmetic-related [operator](#highlight.tags.operator).
  */
  arithmeticOperator: t(operator),
  /**
  Logical [operator](#highlight.tags.operator).
  */
  logicOperator: t(operator),
  /**
  Bit [operator](#highlight.tags.operator).
  */
  bitwiseOperator: t(operator),
  /**
  Comparison [operator](#highlight.tags.operator).
  */
  compareOperator: t(operator),
  /**
  [Operator](#highlight.tags.operator) that updates its operand.
  */
  updateOperator: t(operator),
  /**
  [Operator](#highlight.tags.operator) that defines something.
  */
  definitionOperator: t(operator),
  /**
  Type-related [operator](#highlight.tags.operator).
  */
  typeOperator: t(operator),
  /**
  Control-flow [operator](#highlight.tags.operator).
  */
  controlOperator: t(operator),
  /**
  Program or markup punctuation.
  */
  punctuation,
  /**
  [Punctuation](#highlight.tags.punctuation) that separates
  things.
  */
  separator: t(punctuation),
  /**
  Bracket-style [punctuation](#highlight.tags.punctuation).
  */
  bracket,
  /**
  Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
  tokens).
  */
  angleBracket: t(bracket),
  /**
  Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
  tokens).
  */
  squareBracket: t(bracket),
  /**
  Parentheses (usually `(` and `)` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  paren: t(bracket),
  /**
  Braces (usually `{` and `}` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  brace: t(bracket),
  /**
  Content, for example plain text in XML or markup documents.
  */
  content,
  /**
  [Content](#highlight.tags.content) that represents a heading.
  */
  heading,
  /**
  A level 1 [heading](#highlight.tags.heading).
  */
  heading1: t(heading),
  /**
  A level 2 [heading](#highlight.tags.heading).
  */
  heading2: t(heading),
  /**
  A level 3 [heading](#highlight.tags.heading).
  */
  heading3: t(heading),
  /**
  A level 4 [heading](#highlight.tags.heading).
  */
  heading4: t(heading),
  /**
  A level 5 [heading](#highlight.tags.heading).
  */
  heading5: t(heading),
  /**
  A level 6 [heading](#highlight.tags.heading).
  */
  heading6: t(heading),
  /**
  A prose separator (such as a horizontal rule).
  */
  contentSeparator: t(content),
  /**
  [Content](#highlight.tags.content) that represents a list.
  */
  list: t(content),
  /**
  [Content](#highlight.tags.content) that represents a quote.
  */
  quote: t(content),
  /**
  [Content](#highlight.tags.content) that is emphasized.
  */
  emphasis: t(content),
  /**
  [Content](#highlight.tags.content) that is styled strong.
  */
  strong: t(content),
  /**
  [Content](#highlight.tags.content) that is part of a link.
  */
  link: t(content),
  /**
  [Content](#highlight.tags.content) that is styled as code or
  monospace.
  */
  monospace: t(content),
  /**
  [Content](#highlight.tags.content) that has a strike-through
  style.
  */
  strikethrough: t(content),
  /**
  Inserted text in a change-tracking format.
  */
  inserted: t(),
  /**
  Deleted text.
  */
  deleted: t(),
  /**
  Changed text.
  */
  changed: t(),
  /**
  An invalid or unsyntactic element.
  */
  invalid: t(),
  /**
  Metadata or meta-instruction.
  */
  meta,
  /**
  [Metadata](#highlight.tags.meta) that applies to the entire
  document.
  */
  documentMeta: t(meta),
  /**
  [Metadata](#highlight.tags.meta) that annotates or adds
  attributes to a given syntactic element.
  */
  annotation: t(meta),
  /**
  Processing instruction or preprocessor directive. Subtag of
  [meta](#highlight.tags.meta).
  */
  processingInstruction: t(meta),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that a
  given element is being defined. Expected to be used with the
  various [name](#highlight.tags.name) tags.
  */
  definition: Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that
  something is constant. Mostly expected to be used with
  [variable names](#highlight.tags.variableName).
  */
  constant: Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) used to indicate that
  a [variable](#highlight.tags.variableName) or [property
  name](#highlight.tags.propertyName) is being called or defined
  as a function.
  */
  function: Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that can be applied to
  [names](#highlight.tags.name) to indicate that they belong to
  the language's standard environment.
  */
  standard: Tag.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates a given
  [names](#highlight.tags.name) is local to some scope.
  */
  local: Tag.defineModifier(),
  /**
  A generic variant [modifier](#highlight.Tag^defineModifier) that
  can be used to tag language-specific alternative variants of
  some common tag. It is recommended for themes to define special
  forms of at least the [string](#highlight.tags.string) and
  [variable name](#highlight.tags.variableName) tags, since those
  come up a lot.
  */
  special: Tag.defineModifier()
};
var classHighlighter = tagHighlighter([
  { tag: tags.link, class: "tok-link" },
  { tag: tags.heading, class: "tok-heading" },
  { tag: tags.emphasis, class: "tok-emphasis" },
  { tag: tags.strong, class: "tok-strong" },
  { tag: tags.keyword, class: "tok-keyword" },
  { tag: tags.atom, class: "tok-atom" },
  { tag: tags.bool, class: "tok-bool" },
  { tag: tags.url, class: "tok-url" },
  { tag: tags.labelName, class: "tok-labelName" },
  { tag: tags.inserted, class: "tok-inserted" },
  { tag: tags.deleted, class: "tok-deleted" },
  { tag: tags.literal, class: "tok-literal" },
  { tag: tags.string, class: "tok-string" },
  { tag: tags.number, class: "tok-number" },
  { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "tok-string2" },
  { tag: tags.variableName, class: "tok-variableName" },
  { tag: tags.local(tags.variableName), class: "tok-variableName tok-local" },
  { tag: tags.definition(tags.variableName), class: "tok-variableName tok-definition" },
  { tag: tags.special(tags.variableName), class: "tok-variableName2" },
  { tag: tags.definition(tags.propertyName), class: "tok-propertyName tok-definition" },
  { tag: tags.typeName, class: "tok-typeName" },
  { tag: tags.namespace, class: "tok-namespace" },
  { tag: tags.className, class: "tok-className" },
  { tag: tags.macroName, class: "tok-macroName" },
  { tag: tags.propertyName, class: "tok-propertyName" },
  { tag: tags.operator, class: "tok-operator" },
  { tag: tags.comment, class: "tok-comment" },
  { tag: tags.meta, class: "tok-meta" },
  { tag: tags.invalid, class: "tok-invalid" },
  { tag: tags.punctuation, class: "tok-punctuation" }
]);

// node_modules/@codemirror/language/dist/index.js
var _a;
var languageDataProp = /* @__PURE__ */ new NodeProp();
function defineLanguageFacet(baseData) {
  return Facet.define({
    combine: baseData ? (values2) => values2.concat(baseData) : void 0
  });
}
var sublanguageProp = /* @__PURE__ */ new NodeProp();
var Language = class {
  /**
  Construct a language object. If you need to invoke this
  directly, first define a data facet with
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
  to the language's outer syntax node.
  */
  constructor(data2, parser5, extraExtensions = [], name2 = "") {
    this.data = data2;
    this.name = name2;
    if (!EditorState.prototype.hasOwnProperty("tree"))
      Object.defineProperty(EditorState.prototype, "tree", { get() {
        return syntaxTree(this);
      } });
    this.parser = parser5;
    this.extension = [
      language.of(this),
      EditorState.languageData.of((state, pos, side) => {
        let top2 = topNodeAt(state, pos, side), data3 = top2.type.prop(languageDataProp);
        if (!data3)
          return [];
        let base2 = state.facet(data3), sub = top2.type.prop(sublanguageProp);
        if (sub) {
          let innerNode = top2.resolve(pos - top2.from, side);
          for (let sublang of sub)
            if (sublang.test(innerNode, state)) {
              let data4 = state.facet(sublang.facet);
              return sublang.type == "replace" ? data4 : data4.concat(base2);
            }
        }
        return base2;
      })
    ].concat(extraExtensions);
  }
  /**
  Query whether this language is active at the given position.
  */
  isActiveAt(state, pos, side = -1) {
    return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
  }
  /**
  Find the document regions that were parsed using this language.
  The returned regions will _include_ any nested languages rooted
  in this language, when those exist.
  */
  findRegions(state) {
    let lang = state.facet(language);
    if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
      return [{ from: 0, to: state.doc.length }];
    if (!lang || !lang.allowsNesting)
      return [];
    let result = [];
    let explore = (tree, from) => {
      if (tree.prop(languageDataProp) == this.data) {
        result.push({ from, to: from + tree.length });
        return;
      }
      let mount = tree.prop(NodeProp.mounted);
      if (mount) {
        if (mount.tree.prop(languageDataProp) == this.data) {
          if (mount.overlay)
            for (let r2 of mount.overlay)
              result.push({ from: r2.from + from, to: r2.to + from });
          else
            result.push({ from, to: from + tree.length });
          return;
        } else if (mount.overlay) {
          let size = result.length;
          explore(mount.tree, mount.overlay[0].from + from);
          if (result.length > size)
            return;
        }
      }
      for (let i2 = 0; i2 < tree.children.length; i2++) {
        let ch2 = tree.children[i2];
        if (ch2 instanceof Tree)
          explore(ch2, tree.positions[i2] + from);
      }
    };
    explore(syntaxTree(state), 0);
    return result;
  }
  /**
  Indicates whether this language allows nested languages. The
  default implementation returns true.
  */
  get allowsNesting() {
    return true;
  }
};
Language.setState = /* @__PURE__ */ StateEffect.define();
function topNodeAt(state, pos, side) {
  let topLang = state.facet(language), tree = syntaxTree(state).topNode;
  if (!topLang || topLang.allowsNesting) {
    for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
      if (node.type.isTop)
        tree = node;
  }
  return tree;
}
var LRLanguage = class _LRLanguage extends Language {
  constructor(data2, parser5, name2) {
    super(data2, parser5, [], name2);
    this.parser = parser5;
  }
  /**
  Define a language from a parser.
  */
  static define(spec) {
    let data2 = defineLanguageFacet(spec.languageData);
    return new _LRLanguage(data2, spec.parser.configure({
      props: [languageDataProp.add((type) => type.isTop ? data2 : void 0)]
    }), spec.name);
  }
  /**
  Create a new instance of this language with a reconfigured
  version of its parser and optionally a new name.
  */
  configure(options, name2) {
    return new _LRLanguage(this.data, this.parser.configure(options), name2 || this.name);
  }
  get allowsNesting() {
    return this.parser.hasWrappers();
  }
};
function syntaxTree(state) {
  let field = state.field(Language.state, false);
  return field ? field.tree : Tree.empty;
}
function ensureSyntaxTree(state, upto, timeout = 50) {
  var _a3;
  let parse = (_a3 = state.field(Language.state, false)) === null || _a3 === void 0 ? void 0 : _a3.context;
  if (!parse)
    return null;
  let oldVieport = parse.viewport;
  parse.updateViewport({ from: 0, to: upto });
  let result = parse.isDone(upto) || parse.work(timeout, upto) ? parse.tree : null;
  parse.updateViewport(oldVieport);
  return result;
}
var DocInput = class {
  /**
  Create an input object for the given document.
  */
  constructor(doc2) {
    this.doc = doc2;
    this.cursorPos = 0;
    this.string = "";
    this.cursor = doc2.iter();
  }
  get length() {
    return this.doc.length;
  }
  syncTo(pos) {
    this.string = this.cursor.next(pos - this.cursorPos).value;
    this.cursorPos = pos + this.string.length;
    return this.cursorPos - this.string.length;
  }
  chunk(pos) {
    this.syncTo(pos);
    return this.string;
  }
  get lineChunks() {
    return true;
  }
  read(from, to2) {
    let stringStart = this.cursorPos - this.string.length;
    if (from < stringStart || to2 >= this.cursorPos)
      return this.doc.sliceString(from, to2);
    else
      return this.string.slice(from - stringStart, to2 - stringStart);
  }
};
var currentContext = null;
var ParseContext = class _ParseContext {
  constructor(parser5, state, fragments = [], tree, treeLen, viewport, skipped, scheduleOn) {
    this.parser = parser5;
    this.state = state;
    this.fragments = fragments;
    this.tree = tree;
    this.treeLen = treeLen;
    this.viewport = viewport;
    this.skipped = skipped;
    this.scheduleOn = scheduleOn;
    this.parse = null;
    this.tempSkipped = [];
  }
  /**
  @internal
  */
  static create(parser5, state, viewport) {
    return new _ParseContext(parser5, state, [], Tree.empty, 0, viewport, [], null);
  }
  startParse() {
    return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
  }
  /**
  @internal
  */
  work(until, upto) {
    if (upto != null && upto >= this.state.doc.length)
      upto = void 0;
    if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
      this.takeTree();
      return true;
    }
    return this.withContext(() => {
      var _a3;
      if (typeof until == "number") {
        let endTime = Date.now() + until;
        until = () => Date.now() > endTime;
      }
      if (!this.parse)
        this.parse = this.startParse();
      if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) && upto < this.state.doc.length)
        this.parse.stopAt(upto);
      for (; ; ) {
        let done = this.parse.advance();
        if (done) {
          this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
          this.treeLen = (_a3 = this.parse.stoppedAt) !== null && _a3 !== void 0 ? _a3 : this.state.doc.length;
          this.tree = done;
          this.parse = null;
          if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
            this.parse = this.startParse();
          else
            return true;
        }
        if (until())
          return false;
      }
    });
  }
  /**
  @internal
  */
  takeTree() {
    let pos, tree;
    if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
      if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
        this.parse.stopAt(pos);
      this.withContext(() => {
        while (!(tree = this.parse.advance())) {
        }
      });
      this.treeLen = pos;
      this.tree = tree;
      this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
      this.parse = null;
    }
  }
  withContext(f2) {
    let prev = currentContext;
    currentContext = this;
    try {
      return f2();
    } finally {
      currentContext = prev;
    }
  }
  withoutTempSkipped(fragments) {
    for (let r2; r2 = this.tempSkipped.pop(); )
      fragments = cutFragments(fragments, r2.from, r2.to);
    return fragments;
  }
  /**
  @internal
  */
  changes(changes, newState) {
    let { fragments, tree, treeLen, viewport, skipped } = this;
    this.takeTree();
    if (!changes.empty) {
      let ranges = [];
      changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
      fragments = TreeFragment.applyChanges(fragments, ranges);
      tree = Tree.empty;
      treeLen = 0;
      viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
      if (this.skipped.length) {
        skipped = [];
        for (let r2 of this.skipped) {
          let from = changes.mapPos(r2.from, 1), to2 = changes.mapPos(r2.to, -1);
          if (from < to2)
            skipped.push({ from, to: to2 });
        }
      }
    }
    return new _ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
  }
  /**
  @internal
  */
  updateViewport(viewport) {
    if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
      return false;
    this.viewport = viewport;
    let startLen = this.skipped.length;
    for (let i2 = 0; i2 < this.skipped.length; i2++) {
      let { from, to: to2 } = this.skipped[i2];
      if (from < viewport.to && to2 > viewport.from) {
        this.fragments = cutFragments(this.fragments, from, to2);
        this.skipped.splice(i2--, 1);
      }
    }
    if (this.skipped.length >= startLen)
      return false;
    this.reset();
    return true;
  }
  /**
  @internal
  */
  reset() {
    if (this.parse) {
      this.takeTree();
      this.parse = null;
    }
  }
  /**
  Notify the parse scheduler that the given region was skipped
  because it wasn't in view, and the parse should be restarted
  when it comes into view.
  */
  skipUntilInView(from, to2) {
    this.skipped.push({ from, to: to2 });
  }
  /**
  Returns a parser intended to be used as placeholder when
  asynchronously loading a nested parser. It'll skip its input and
  mark it as not-really-parsed, so that the next update will parse
  it again.
  
  When `until` is given, a reparse will be scheduled when that
  promise resolves.
  */
  static getSkippingParser(until) {
    return new class extends Parser {
      createParse(input, fragments, ranges) {
        let from = ranges[0].from, to2 = ranges[ranges.length - 1].to;
        let parser5 = {
          parsedPos: from,
          advance() {
            let cx2 = currentContext;
            if (cx2) {
              for (let r2 of ranges)
                cx2.tempSkipped.push(r2);
              if (until)
                cx2.scheduleOn = cx2.scheduleOn ? Promise.all([cx2.scheduleOn, until]) : until;
            }
            this.parsedPos = to2;
            return new Tree(NodeType.none, [], [], to2 - from);
          },
          stoppedAt: null,
          stopAt() {
          }
        };
        return parser5;
      }
    }();
  }
  /**
  @internal
  */
  isDone(upto) {
    upto = Math.min(upto, this.state.doc.length);
    let frags = this.fragments;
    return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
  }
  /**
  Get the context for the current parse, or `null` if no editor
  parse is in progress.
  */
  static get() {
    return currentContext;
  }
};
function cutFragments(fragments, from, to2) {
  return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to2, fromB: from, toB: to2 }]);
}
var LanguageState = class _LanguageState {
  constructor(context) {
    this.context = context;
    this.tree = context.tree;
  }
  apply(tr2) {
    if (!tr2.docChanged && this.tree == this.context.tree)
      return this;
    let newCx = this.context.changes(tr2.changes, tr2.state);
    let upto = this.context.treeLen == tr2.startState.doc.length ? void 0 : Math.max(tr2.changes.mapPos(this.context.treeLen), newCx.viewport.to);
    if (!newCx.work(20, upto))
      newCx.takeTree();
    return new _LanguageState(newCx);
  }
  static init(state) {
    let vpTo = Math.min(3e3, state.doc.length);
    let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
    if (!parseState.work(20, vpTo))
      parseState.takeTree();
    return new _LanguageState(parseState);
  }
};
Language.state = /* @__PURE__ */ StateField.define({
  create: LanguageState.init,
  update(value, tr2) {
    for (let e25 of tr2.effects)
      if (e25.is(Language.setState))
        return e25.value;
    if (tr2.startState.facet(language) != tr2.state.facet(language))
      return LanguageState.init(tr2.state);
    return value.apply(tr2);
  }
});
var requestIdle = (callback) => {
  let timeout = setTimeout(
    () => callback(),
    500
    /* Work.MaxPause */
  );
  return () => clearTimeout(timeout);
};
if (typeof requestIdleCallback != "undefined")
  requestIdle = (callback) => {
    let idle = -1, timeout = setTimeout(
      () => {
        idle = requestIdleCallback(callback, {
          timeout: 500 - 100
          /* Work.MinPause */
        });
      },
      100
      /* Work.MinPause */
    );
    return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
  };
var isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? () => navigator.scheduling.isInputPending() : null;
var parseWorker = /* @__PURE__ */ ViewPlugin.fromClass(class ParseWorker {
  constructor(view) {
    this.view = view;
    this.working = null;
    this.workScheduled = 0;
    this.chunkEnd = -1;
    this.chunkBudget = -1;
    this.work = this.work.bind(this);
    this.scheduleWork();
  }
  update(update) {
    let cx2 = this.view.state.field(Language.state).context;
    if (cx2.updateViewport(update.view.viewport) || this.view.viewport.to > cx2.treeLen)
      this.scheduleWork();
    if (update.docChanged || update.selectionSet) {
      if (this.view.hasFocus)
        this.chunkBudget += 50;
      this.scheduleWork();
    }
    this.checkAsyncSchedule(cx2);
  }
  scheduleWork() {
    if (this.working)
      return;
    let { state } = this.view, field = state.field(Language.state);
    if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
      this.working = requestIdle(this.work);
  }
  work(deadline) {
    this.working = null;
    let now = Date.now();
    if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {
      this.chunkEnd = now + 3e4;
      this.chunkBudget = 3e3;
    }
    if (this.chunkBudget <= 0)
      return;
    let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
    if (field.tree == field.context.tree && field.context.isDone(
      vpTo + 1e5
      /* Work.MaxParseAhead */
    ))
      return;
    let endTime = Date.now() + Math.min(this.chunkBudget, 100, deadline && !isInputPending ? Math.max(25, deadline.timeRemaining() - 5) : 1e9);
    let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1e3;
    let done = field.context.work(() => {
      return isInputPending && isInputPending() || Date.now() > endTime;
    }, vpTo + (viewportFirst ? 0 : 1e5));
    this.chunkBudget -= Date.now() - now;
    if (done || this.chunkBudget <= 0) {
      field.context.takeTree();
      this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
    }
    if (this.chunkBudget > 0 && !(done && !viewportFirst))
      this.scheduleWork();
    this.checkAsyncSchedule(field.context);
  }
  checkAsyncSchedule(cx2) {
    if (cx2.scheduleOn) {
      this.workScheduled++;
      cx2.scheduleOn.then(() => this.scheduleWork()).catch((err) => logException(this.view.state, err)).then(() => this.workScheduled--);
      cx2.scheduleOn = null;
    }
  }
  destroy() {
    if (this.working)
      this.working();
  }
  isWorking() {
    return !!(this.working || this.workScheduled > 0);
  }
}, {
  eventHandlers: { focus() {
    this.scheduleWork();
  } }
});
var language = /* @__PURE__ */ Facet.define({
  combine(languages) {
    return languages.length ? languages[0] : null;
  },
  enables: (language2) => [
    Language.state,
    parseWorker,
    EditorView.contentAttributes.compute([language2], (state) => {
      let lang = state.facet(language2);
      return lang && lang.name ? { "data-language": lang.name } : {};
    })
  ]
});
var LanguageSupport = class {
  /**
  Create a language support object.
  */
  constructor(language2, support = []) {
    this.language = language2;
    this.support = support;
    this.extension = [language2, support];
  }
};
var LanguageDescription = class _LanguageDescription {
  constructor(name2, alias, extensions, filename, loadFunc, support = void 0) {
    this.name = name2;
    this.alias = alias;
    this.extensions = extensions;
    this.filename = filename;
    this.loadFunc = loadFunc;
    this.support = support;
    this.loading = null;
  }
  /**
  Start loading the the language. Will return a promise that
  resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)
  object when the language successfully loads.
  */
  load() {
    return this.loading || (this.loading = this.loadFunc().then((support) => this.support = support, (err) => {
      this.loading = null;
      throw err;
    }));
  }
  /**
  Create a language description.
  */
  static of(spec) {
    let { load, support } = spec;
    if (!load) {
      if (!support)
        throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");
      load = () => Promise.resolve(support);
    }
    return new _LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map((s2) => s2.toLowerCase()), spec.extensions || [], spec.filename, load, support);
  }
  /**
  Look for a language in the given array of descriptions that
  matches the filename. Will first match
  [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,
  and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),
  and return the first language that matches.
  */
  static matchFilename(descs, filename) {
    for (let d2 of descs)
      if (d2.filename && d2.filename.test(filename))
        return d2;
    let ext = /\.([^.]+)$/.exec(filename);
    if (ext) {
      for (let d2 of descs)
        if (d2.extensions.indexOf(ext[1]) > -1)
          return d2;
    }
    return null;
  }
  /**
  Look for a language whose name or alias matches the the given
  name (case-insensitively). If `fuzzy` is true, and no direct
  matchs is found, this'll also search for a language whose name
  or alias occurs in the string (for names shorter than three
  characters, only when surrounded by non-word characters).
  */
  static matchLanguageName(descs, name2, fuzzy = true) {
    name2 = name2.toLowerCase();
    for (let d2 of descs)
      if (d2.alias.some((a2) => a2 == name2))
        return d2;
    if (fuzzy)
      for (let d2 of descs)
        for (let a2 of d2.alias) {
          let found = name2.indexOf(a2);
          if (found > -1 && (a2.length > 2 || !/\w/.test(name2[found - 1]) && !/\w/.test(name2[found + a2.length])))
            return d2;
        }
    return null;
  }
};
var indentService = /* @__PURE__ */ Facet.define();
var indentUnit = /* @__PURE__ */ Facet.define({
  combine: (values2) => {
    if (!values2.length)
      return "  ";
    let unit = values2[0];
    if (!unit || /\S/.test(unit) || Array.from(unit).some((e25) => e25 != unit[0]))
      throw new Error("Invalid indent unit: " + JSON.stringify(values2[0]));
    return unit;
  }
});
function getIndentUnit(state) {
  let unit = state.facet(indentUnit);
  return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
}
function indentString(state, cols) {
  let result = "", ts2 = state.tabSize, ch2 = state.facet(indentUnit)[0];
  if (ch2 == "	") {
    while (cols >= ts2) {
      result += "	";
      cols -= ts2;
    }
    ch2 = " ";
  }
  for (let i2 = 0; i2 < cols; i2++)
    result += ch2;
  return result;
}
function getIndentation(context, pos) {
  if (context instanceof EditorState)
    context = new IndentContext(context);
  for (let service of context.state.facet(indentService)) {
    let result = service(context, pos);
    if (result !== void 0)
      return result;
  }
  let tree = syntaxTree(context.state);
  return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;
}
var IndentContext = class {
  /**
  Create an indent context.
  */
  constructor(state, options = {}) {
    this.state = state;
    this.options = options;
    this.unit = getIndentUnit(state);
  }
  /**
  Get a description of the line at the given position, taking
  [simulated line
  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  into account. If there is such a break at `pos`, the `bias`
  argument determines whether the part of the line line before or
  after the break is used.
  */
  lineAt(pos, bias = 1) {
    let line = this.state.doc.lineAt(pos);
    let { simulateBreak, simulateDoubleBreak } = this.options;
    if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
      if (simulateDoubleBreak && simulateBreak == pos)
        return { text: "", from: pos };
      else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
        return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
      else
        return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
    }
    return line;
  }
  /**
  Get the text directly after `pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  textAfterPos(pos, bias = 1) {
    if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
      return "";
    let { text, from } = this.lineAt(pos, bias);
    return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
  }
  /**
  Find the column for the given position.
  */
  column(pos, bias = 1) {
    let { text, from } = this.lineAt(pos, bias);
    let result = this.countColumn(text, pos - from);
    let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
    if (override > -1)
      result += override - this.countColumn(text, text.search(/\S|$/));
    return result;
  }
  /**
  Find the column position (taking tabs into account) of the given
  position in the given string.
  */
  countColumn(line, pos = line.length) {
    return countColumn(line, this.state.tabSize, pos);
  }
  /**
  Find the indentation column of the line at the given point.
  */
  lineIndent(pos, bias = 1) {
    let { text, from } = this.lineAt(pos, bias);
    let override = this.options.overrideIndentation;
    if (override) {
      let overriden = override(from);
      if (overriden > -1)
        return overriden;
    }
    return this.countColumn(text, text.search(/\S|$/));
  }
  /**
  Returns the [simulated line
  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  for this context, if any.
  */
  get simulatedBreak() {
    return this.options.simulateBreak || null;
  }
};
var indentNodeProp = /* @__PURE__ */ new NodeProp();
function syntaxIndentation(cx2, ast, pos) {
  let stack = ast.resolveStack(pos);
  let inner = stack.node.enterUnfinishedNodesBefore(pos);
  if (inner != stack.node) {
    let add2 = [];
    for (let cur2 = inner; cur2 != stack.node; cur2 = cur2.parent)
      add2.push(cur2);
    for (let i2 = add2.length - 1; i2 >= 0; i2--)
      stack = { node: add2[i2], next: stack };
  }
  return indentFor(stack, cx2, pos);
}
function indentFor(stack, cx2, pos) {
  for (let cur2 = stack; cur2; cur2 = cur2.next) {
    let strategy = indentStrategy(cur2.node);
    if (strategy)
      return strategy(TreeIndentContext.create(cx2, pos, cur2));
  }
  return 0;
}
function ignoreClosed(cx2) {
  return cx2.pos == cx2.options.simulateBreak && cx2.options.simulateDoubleBreak;
}
function indentStrategy(tree) {
  let strategy = tree.type.prop(indentNodeProp);
  if (strategy)
    return strategy;
  let first = tree.firstChild, close;
  if (first && (close = first.type.prop(NodeProp.closedBy))) {
    let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
    return (cx2) => delimitedStrategy(cx2, true, 1, void 0, closed && !ignoreClosed(cx2) ? last.from : void 0);
  }
  return tree.parent == null ? topIndent : null;
}
function topIndent() {
  return 0;
}
var TreeIndentContext = class _TreeIndentContext extends IndentContext {
  constructor(base2, pos, context) {
    super(base2.state, base2.options);
    this.base = base2;
    this.pos = pos;
    this.context = context;
  }
  /**
  The syntax tree node to which the indentation strategy
  applies.
  */
  get node() {
    return this.context.node;
  }
  /**
  @internal
  */
  static create(base2, pos, context) {
    return new _TreeIndentContext(base2, pos, context);
  }
  /**
  Get the text directly after `this.pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  get textAfter() {
    return this.textAfterPos(this.pos);
  }
  /**
  Get the indentation at the reference line for `this.node`, which
  is the line on which it starts, unless there is a node that is
  _not_ a parent of this node covering the start of that line. If
  so, the line at the start of that node is tried, again skipping
  on if it is covered by another such node.
  */
  get baseIndent() {
    return this.baseIndentFor(this.node);
  }
  /**
  Get the indentation for the reference line of the given node
  (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
  */
  baseIndentFor(node) {
    let line = this.state.doc.lineAt(node.from);
    for (; ; ) {
      let atBreak = node.resolve(line.from);
      while (atBreak.parent && atBreak.parent.from == atBreak.from)
        atBreak = atBreak.parent;
      if (isParent(atBreak, node))
        break;
      line = this.state.doc.lineAt(atBreak.from);
    }
    return this.lineIndent(line.from);
  }
  /**
  Continue looking for indentations in the node's parent nodes,
  and return the result of that.
  */
  continue() {
    return indentFor(this.context.next, this.base, this.pos);
  }
};
function isParent(parent, of2) {
  for (let cur2 = of2; cur2; cur2 = cur2.parent)
    if (parent == cur2)
      return true;
  return false;
}
function bracketedAligned(context) {
  let tree = context.node;
  let openToken = tree.childAfter(tree.from), last = tree.lastChild;
  if (!openToken)
    return null;
  let sim = context.options.simulateBreak;
  let openLine = context.state.doc.lineAt(openToken.from);
  let lineEnd2 = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
  for (let pos = openToken.to; ; ) {
    let next = tree.childAfter(pos);
    if (!next || next == last)
      return null;
    if (!next.type.isSkipped)
      return next.from < lineEnd2 ? openToken : null;
    pos = next.to;
  }
}
function delimitedIndent({ closing: closing2, align = true, units = 1 }) {
  return (context) => delimitedStrategy(context, align, units, closing2);
}
function delimitedStrategy(context, align, units, closing2, closedAt) {
  let after = context.textAfter, space4 = after.match(/^\s*/)[0].length;
  let closed = closing2 && after.slice(space4, space4 + closing2.length) == closing2 || closedAt == context.pos + space4;
  let aligned = align ? bracketedAligned(context) : null;
  if (aligned)
    return closed ? context.column(aligned.from) : context.column(aligned.to);
  return context.baseIndent + (closed ? 0 : context.unit * units);
}
var flatIndent = (context) => context.baseIndent;
function continuedIndent({ except, units = 1 } = {}) {
  return (context) => {
    let matchExcept = except && except.test(context.textAfter);
    return context.baseIndent + (matchExcept ? 0 : units * context.unit);
  };
}
var DontIndentBeyond = 200;
function indentOnInput() {
  return EditorState.transactionFilter.of((tr2) => {
    if (!tr2.docChanged || !tr2.isUserEvent("input.type") && !tr2.isUserEvent("input.complete"))
      return tr2;
    let rules = tr2.startState.languageDataAt("indentOnInput", tr2.startState.selection.main.head);
    if (!rules.length)
      return tr2;
    let doc2 = tr2.newDoc, { head } = tr2.newSelection.main, line = doc2.lineAt(head);
    if (head > line.from + DontIndentBeyond)
      return tr2;
    let lineStart = doc2.sliceString(line.from, head);
    if (!rules.some((r2) => r2.test(lineStart)))
      return tr2;
    let { state } = tr2, last = -1, changes = [];
    for (let { head: head2 } of state.selection.ranges) {
      let line2 = state.doc.lineAt(head2);
      if (line2.from == last)
        continue;
      last = line2.from;
      let indent = getIndentation(state, line2.from);
      if (indent == null)
        continue;
      let cur2 = /^\s*/.exec(line2.text)[0];
      let norm = indentString(state, indent);
      if (cur2 != norm)
        changes.push({ from: line2.from, to: line2.from + cur2.length, insert: norm });
    }
    return changes.length ? [tr2, { changes, sequential: true }] : tr2;
  });
}
var foldService = /* @__PURE__ */ Facet.define();
var foldNodeProp = /* @__PURE__ */ new NodeProp();
function foldInside(node) {
  let first = node.firstChild, last = node.lastChild;
  return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;
}
function syntaxFolding(state, start, end) {
  let tree = syntaxTree(state);
  if (tree.length < end)
    return null;
  let stack = tree.resolveStack(end, 1);
  let found = null;
  for (let iter = stack; iter; iter = iter.next) {
    let cur2 = iter.node;
    if (cur2.to <= end || cur2.from > end)
      continue;
    if (found && cur2.from < start)
      break;
    let prop = cur2.type.prop(foldNodeProp);
    if (prop && (cur2.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur2))) {
      let value = prop(cur2, state);
      if (value && value.from <= end && value.from >= start && value.to > end)
        found = value;
    }
  }
  return found;
}
function isUnfinished(node) {
  let ch2 = node.lastChild;
  return ch2 && ch2.to == node.to && ch2.type.isError;
}
function foldable(state, lineStart, lineEnd2) {
  for (let service of state.facet(foldService)) {
    let result = service(state, lineStart, lineEnd2);
    if (result)
      return result;
  }
  return syntaxFolding(state, lineStart, lineEnd2);
}
function mapRange(range, mapping) {
  let from = mapping.mapPos(range.from, 1), to2 = mapping.mapPos(range.to, -1);
  return from >= to2 ? void 0 : { from, to: to2 };
}
var foldEffect = /* @__PURE__ */ StateEffect.define({ map: mapRange });
var unfoldEffect = /* @__PURE__ */ StateEffect.define({ map: mapRange });
function selectedLines(view) {
  let lines = [];
  for (let { head } of view.state.selection.ranges) {
    if (lines.some((l2) => l2.from <= head && l2.to >= head))
      continue;
    lines.push(view.lineBlockAt(head));
  }
  return lines;
}
var foldState = /* @__PURE__ */ StateField.define({
  create() {
    return Decoration.none;
  },
  update(folded, tr2) {
    folded = folded.map(tr2.changes);
    for (let e25 of tr2.effects) {
      if (e25.is(foldEffect) && !foldExists(folded, e25.value.from, e25.value.to)) {
        let { preparePlaceholder } = tr2.state.facet(foldConfig);
        let widget = !preparePlaceholder ? foldWidget : Decoration.replace({ widget: new PreparedFoldWidget(preparePlaceholder(tr2.state, e25.value)) });
        folded = folded.update({ add: [widget.range(e25.value.from, e25.value.to)] });
      } else if (e25.is(unfoldEffect)) {
        folded = folded.update({
          filter: (from, to2) => e25.value.from != from || e25.value.to != to2,
          filterFrom: e25.value.from,
          filterTo: e25.value.to
        });
      }
    }
    if (tr2.selection) {
      let onSelection = false, { head } = tr2.selection.main;
      folded.between(head, head, (a2, b2) => {
        if (a2 < head && b2 > head)
          onSelection = true;
      });
      if (onSelection)
        folded = folded.update({
          filterFrom: head,
          filterTo: head,
          filter: (a2, b2) => b2 <= head || a2 >= head
        });
    }
    return folded;
  },
  provide: (f2) => EditorView.decorations.from(f2),
  toJSON(folded, state) {
    let ranges = [];
    folded.between(0, state.doc.length, (from, to2) => {
      ranges.push(from, to2);
    });
    return ranges;
  },
  fromJSON(value) {
    if (!Array.isArray(value) || value.length % 2)
      throw new RangeError("Invalid JSON for fold state");
    let ranges = [];
    for (let i2 = 0; i2 < value.length; ) {
      let from = value[i2++], to2 = value[i2++];
      if (typeof from != "number" || typeof to2 != "number")
        throw new RangeError("Invalid JSON for fold state");
      ranges.push(foldWidget.range(from, to2));
    }
    return Decoration.set(ranges, true);
  }
});
function findFold(state, from, to2) {
  var _a3;
  let found = null;
  (_a3 = state.field(foldState, false)) === null || _a3 === void 0 ? void 0 : _a3.between(from, to2, (from2, to3) => {
    if (!found || found.from > from2)
      found = { from: from2, to: to3 };
  });
  return found;
}
function foldExists(folded, from, to2) {
  let found = false;
  folded.between(from, from, (a2, b2) => {
    if (a2 == from && b2 == to2)
      found = true;
  });
  return found;
}
function maybeEnable(state, other) {
  return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));
}
var foldCode = (view) => {
  for (let line of selectedLines(view)) {
    let range = foldable(view.state, line.from, line.to);
    if (range) {
      view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });
      return true;
    }
  }
  return false;
};
var unfoldCode = (view) => {
  if (!view.state.field(foldState, false))
    return false;
  let effects = [];
  for (let line of selectedLines(view)) {
    let folded = findFold(view.state, line.from, line.to);
    if (folded)
      effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
  }
  if (effects.length)
    view.dispatch({ effects });
  return effects.length > 0;
};
function announceFold(view, range, fold = true) {
  let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;
  return EditorView.announce.of(`${view.state.phrase(fold ? "Folded lines" : "Unfolded lines")} ${lineFrom} ${view.state.phrase("to")} ${lineTo}.`);
}
var foldAll = (view) => {
  let { state } = view, effects = [];
  for (let pos = 0; pos < state.doc.length; ) {
    let line = view.lineBlockAt(pos), range = foldable(state, line.from, line.to);
    if (range)
      effects.push(foldEffect.of(range));
    pos = (range ? view.lineBlockAt(range.to) : line).to + 1;
  }
  if (effects.length)
    view.dispatch({ effects: maybeEnable(view.state, effects) });
  return !!effects.length;
};
var unfoldAll = (view) => {
  let field = view.state.field(foldState, false);
  if (!field || !field.size)
    return false;
  let effects = [];
  field.between(0, view.state.doc.length, (from, to2) => {
    effects.push(unfoldEffect.of({ from, to: to2 }));
  });
  view.dispatch({ effects });
  return true;
};
function foldableContainer(view, lineBlock) {
  for (let line = lineBlock; ; ) {
    let foldableRegion = foldable(view.state, line.from, line.to);
    if (foldableRegion && foldableRegion.to > lineBlock.from)
      return foldableRegion;
    if (!line.from)
      return null;
    line = view.lineBlockAt(line.from - 1);
  }
}
var toggleFold = (view) => {
  let effects = [];
  for (let line of selectedLines(view)) {
    let folded = findFold(view.state, line.from, line.to);
    if (folded) {
      effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
    } else {
      let foldRange = foldableContainer(view, line);
      if (foldRange)
        effects.push(foldEffect.of(foldRange), announceFold(view, foldRange));
    }
  }
  if (effects.length > 0)
    view.dispatch({ effects: maybeEnable(view.state, effects) });
  return !!effects.length;
};
var foldKeymap = [
  { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: foldCode },
  { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: unfoldCode },
  { key: "Ctrl-Alt-[", run: foldAll },
  { key: "Ctrl-Alt-]", run: unfoldAll }
];
var defaultConfig = {
  placeholderDOM: null,
  preparePlaceholder: null,
  placeholderText: "\u2026"
};
var foldConfig = /* @__PURE__ */ Facet.define({
  combine(values2) {
    return combineConfig(values2, defaultConfig);
  }
});
function codeFolding(config2) {
  let result = [foldState, baseTheme$12];
  if (config2)
    result.push(foldConfig.of(config2));
  return result;
}
function widgetToDOM(view, prepared) {
  let { state } = view, conf = state.facet(foldConfig);
  let onclick = (event) => {
    let line = view.lineBlockAt(view.posAtDOM(event.target));
    let folded = findFold(view.state, line.from, line.to);
    if (folded)
      view.dispatch({ effects: unfoldEffect.of(folded) });
    event.preventDefault();
  };
  if (conf.placeholderDOM)
    return conf.placeholderDOM(view, onclick, prepared);
  let element = document.createElement("span");
  element.textContent = conf.placeholderText;
  element.setAttribute("aria-label", state.phrase("folded code"));
  element.title = state.phrase("unfold");
  element.className = "cm-foldPlaceholder";
  element.onclick = onclick;
  return element;
}
var foldWidget = /* @__PURE__ */ Decoration.replace({ widget: /* @__PURE__ */ new class extends WidgetType {
  toDOM(view) {
    return widgetToDOM(view, null);
  }
}() });
var PreparedFoldWidget = class extends WidgetType {
  constructor(value) {
    super();
    this.value = value;
  }
  eq(other) {
    return this.value == other.value;
  }
  toDOM(view) {
    return widgetToDOM(view, this.value);
  }
};
var foldGutterDefaults = {
  openText: "\u2304",
  closedText: "\u203A",
  markerDOM: null,
  domEventHandlers: {},
  foldingChanged: () => false
};
var FoldMarker = class extends GutterMarker {
  constructor(config2, open) {
    super();
    this.config = config2;
    this.open = open;
  }
  eq(other) {
    return this.config == other.config && this.open == other.open;
  }
  toDOM(view) {
    if (this.config.markerDOM)
      return this.config.markerDOM(this.open);
    let span = document.createElement("span");
    span.textContent = this.open ? this.config.openText : this.config.closedText;
    span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
    return span;
  }
};
function foldGutter(config2 = {}) {
  let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config2);
  let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
  let markers = ViewPlugin.fromClass(class {
    constructor(view) {
      this.from = view.viewport.from;
      this.markers = this.buildMarkers(view);
    }
    update(update) {
      if (update.docChanged || update.viewportChanged || update.startState.facet(language) != update.state.facet(language) || update.startState.field(foldState, false) != update.state.field(foldState, false) || syntaxTree(update.startState) != syntaxTree(update.state) || fullConfig.foldingChanged(update))
        this.markers = this.buildMarkers(update.view);
    }
    buildMarkers(view) {
      let builder = new RangeSetBuilder();
      for (let line of view.viewportLineBlocks) {
        let mark = findFold(view.state, line.from, line.to) ? canUnfold : foldable(view.state, line.from, line.to) ? canFold : null;
        if (mark)
          builder.add(line.from, line.from, mark);
      }
      return builder.finish();
    }
  });
  let { domEventHandlers } = fullConfig;
  return [
    markers,
    gutter({
      class: "cm-foldGutter",
      markers(view) {
        var _a3;
        return ((_a3 = view.plugin(markers)) === null || _a3 === void 0 ? void 0 : _a3.markers) || RangeSet.empty;
      },
      initialSpacer() {
        return new FoldMarker(fullConfig, false);
      },
      domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), { click: (view, line, event) => {
        if (domEventHandlers.click && domEventHandlers.click(view, line, event))
          return true;
        let folded = findFold(view.state, line.from, line.to);
        if (folded) {
          view.dispatch({ effects: unfoldEffect.of(folded) });
          return true;
        }
        let range = foldable(view.state, line.from, line.to);
        if (range) {
          view.dispatch({ effects: foldEffect.of(range) });
          return true;
        }
        return false;
      } })
    }),
    codeFolding()
  ];
}
var baseTheme$12 = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-foldPlaceholder": {
    backgroundColor: "#eee",
    border: "1px solid #ddd",
    color: "#888",
    borderRadius: ".2em",
    margin: "0 1px",
    padding: "0 1px",
    cursor: "pointer"
  },
  ".cm-foldGutter span": {
    padding: "0 1px",
    cursor: "pointer"
  }
});
var HighlightStyle = class _HighlightStyle {
  constructor(specs, options) {
    this.specs = specs;
    let modSpec;
    function def(spec) {
      let cls = StyleModule.newName();
      (modSpec || (modSpec = /* @__PURE__ */ Object.create(null)))["." + cls] = spec;
      return cls;
    }
    const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : void 0;
    const scopeOpt = options.scope;
    this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data : scopeOpt ? (type) => type == scopeOpt : void 0;
    this.style = tagHighlighter(specs.map((style) => ({
      tag: style.tag,
      class: style.class || def(Object.assign({}, style, { tag: null }))
    })), {
      all
    }).style;
    this.module = modSpec ? new StyleModule(modSpec) : null;
    this.themeType = options.themeType;
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The specs must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighter
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */
  static define(specs, options) {
    return new _HighlightStyle(specs, options || {});
  }
};
var highlighterFacet = /* @__PURE__ */ Facet.define();
var fallbackHighlighter = /* @__PURE__ */ Facet.define({
  combine(values2) {
    return values2.length ? [values2[0]] : null;
  }
});
function getHighlighters(state) {
  let main = state.facet(highlighterFacet);
  return main.length ? main : state.facet(fallbackHighlighter);
}
function syntaxHighlighting(highlighter, options) {
  let ext = [treeHighlighter], themeType;
  if (highlighter instanceof HighlightStyle) {
    if (highlighter.module)
      ext.push(EditorView.styleModule.of(highlighter.module));
    themeType = highlighter.themeType;
  }
  if (options === null || options === void 0 ? void 0 : options.fallback)
    ext.push(fallbackHighlighter.of(highlighter));
  else if (themeType)
    ext.push(highlighterFacet.computeN([EditorView.darkTheme], (state) => {
      return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
    }));
  else
    ext.push(highlighterFacet.of(highlighter));
  return ext;
}
var TreeHighlighter = class {
  constructor(view) {
    this.markCache = /* @__PURE__ */ Object.create(null);
    this.tree = syntaxTree(view.state);
    this.decorations = this.buildDeco(view, getHighlighters(view.state));
    this.decoratedTo = view.viewport.to;
  }
  update(update) {
    let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
    let styleChange = highlighters != getHighlighters(update.startState);
    let { viewport } = update.view, decoratedToMapped = update.changes.mapPos(this.decoratedTo, 1);
    if (tree.length < viewport.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport.to) {
      this.decorations = this.decorations.map(update.changes);
      this.decoratedTo = decoratedToMapped;
    } else if (tree != this.tree || update.viewportChanged || styleChange) {
      this.tree = tree;
      this.decorations = this.buildDeco(update.view, highlighters);
      this.decoratedTo = viewport.to;
    }
  }
  buildDeco(view, highlighters) {
    if (!highlighters || !this.tree.length)
      return Decoration.none;
    let builder = new RangeSetBuilder();
    for (let { from, to: to2 } of view.visibleRanges) {
      highlightTree(this.tree, highlighters, (from2, to3, style) => {
        builder.add(from2, to3, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
      }, from, to2);
    }
    return builder.finish();
  }
};
var treeHighlighter = /* @__PURE__ */ Prec.high(/* @__PURE__ */ ViewPlugin.fromClass(TreeHighlighter, {
  decorations: (v2) => v2.decorations
}));
var defaultHighlightStyle = /* @__PURE__ */ HighlightStyle.define([
  {
    tag: tags.meta,
    color: "#404740"
  },
  {
    tag: tags.link,
    textDecoration: "underline"
  },
  {
    tag: tags.heading,
    textDecoration: "underline",
    fontWeight: "bold"
  },
  {
    tag: tags.emphasis,
    fontStyle: "italic"
  },
  {
    tag: tags.strong,
    fontWeight: "bold"
  },
  {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: tags.keyword,
    color: "#708"
  },
  {
    tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
    color: "#219"
  },
  {
    tag: [tags.literal, tags.inserted],
    color: "#164"
  },
  {
    tag: [tags.string, tags.deleted],
    color: "#a11"
  },
  {
    tag: [tags.regexp, tags.escape, /* @__PURE__ */ tags.special(tags.string)],
    color: "#e40"
  },
  {
    tag: /* @__PURE__ */ tags.definition(tags.variableName),
    color: "#00f"
  },
  {
    tag: /* @__PURE__ */ tags.local(tags.variableName),
    color: "#30a"
  },
  {
    tag: [tags.typeName, tags.namespace],
    color: "#085"
  },
  {
    tag: tags.className,
    color: "#167"
  },
  {
    tag: [/* @__PURE__ */ tags.special(tags.variableName), tags.macroName],
    color: "#256"
  },
  {
    tag: /* @__PURE__ */ tags.definition(tags.propertyName),
    color: "#00c"
  },
  {
    tag: tags.comment,
    color: "#940"
  },
  {
    tag: tags.invalid,
    color: "#f00"
  }
]);
var baseTheme2 = /* @__PURE__ */ EditorView.baseTheme({
  "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
  "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
});
var DefaultScanDist = 1e4;
var DefaultBrackets = "()[]{}";
var bracketMatchingConfig = /* @__PURE__ */ Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      afterCursor: true,
      brackets: DefaultBrackets,
      maxScanDistance: DefaultScanDist,
      renderMatch: defaultRenderMatch
    });
  }
});
var matchingMark = /* @__PURE__ */ Decoration.mark({ class: "cm-matchingBracket" });
var nonmatchingMark = /* @__PURE__ */ Decoration.mark({ class: "cm-nonmatchingBracket" });
function defaultRenderMatch(match) {
  let decorations2 = [];
  let mark = match.matched ? matchingMark : nonmatchingMark;
  decorations2.push(mark.range(match.start.from, match.start.to));
  if (match.end)
    decorations2.push(mark.range(match.end.from, match.end.to));
  return decorations2;
}
var bracketMatchingState = /* @__PURE__ */ StateField.define({
  create() {
    return Decoration.none;
  },
  update(deco, tr2) {
    if (!tr2.docChanged && !tr2.selection)
      return deco;
    let decorations2 = [];
    let config2 = tr2.state.facet(bracketMatchingConfig);
    for (let range of tr2.state.selection.ranges) {
      if (!range.empty)
        continue;
      let match = matchBrackets(tr2.state, range.head, -1, config2) || range.head > 0 && matchBrackets(tr2.state, range.head - 1, 1, config2) || config2.afterCursor && (matchBrackets(tr2.state, range.head, 1, config2) || range.head < tr2.state.doc.length && matchBrackets(tr2.state, range.head + 1, -1, config2));
      if (match)
        decorations2 = decorations2.concat(config2.renderMatch(match, tr2.state));
    }
    return Decoration.set(decorations2, true);
  },
  provide: (f2) => EditorView.decorations.from(f2)
});
var bracketMatchingUnique = [
  bracketMatchingState,
  baseTheme2
];
function bracketMatching(config2 = {}) {
  return [bracketMatchingConfig.of(config2), bracketMatchingUnique];
}
var bracketMatchingHandle = /* @__PURE__ */ new NodeProp();
function matchingNodes(node, dir, brackets) {
  let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
  if (byProp)
    return byProp;
  if (node.name.length == 1) {
    let index = brackets.indexOf(node.name);
    if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
      return [brackets[index + dir]];
  }
  return null;
}
function findHandle(node) {
  let hasHandle = node.type.prop(bracketMatchingHandle);
  return hasHandle ? hasHandle(node.node) : node;
}
function matchBrackets(state, pos, dir, config2 = {}) {
  let maxScanDistance = config2.maxScanDistance || DefaultScanDist, brackets = config2.brackets || DefaultBrackets;
  let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
  for (let cur2 = node; cur2; cur2 = cur2.parent) {
    let matches = matchingNodes(cur2.type, dir, brackets);
    if (matches && cur2.from < cur2.to) {
      let handle = findHandle(cur2);
      if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))
        return matchMarkedBrackets(state, pos, dir, cur2, handle, matches, brackets);
    }
  }
  return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
}
function matchMarkedBrackets(_state, _pos, dir, token, handle, matching2, brackets) {
  let parent = token.parent, firstToken = { from: handle.from, to: handle.to };
  let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
  if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
    do {
      if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
        if (depth == 0 && matching2.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
          let endHandle = findHandle(cursor);
          return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : void 0, matched: true };
        } else if (matchingNodes(cursor.type, dir, brackets)) {
          depth++;
        } else if (matchingNodes(cursor.type, -dir, brackets)) {
          if (depth == 0) {
            let endHandle = findHandle(cursor);
            return {
              start: firstToken,
              end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : void 0,
              matched: false
            };
          }
          depth--;
        }
      }
    } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
  return { start: firstToken, matched: false };
}
function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
  let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
  let bracket2 = brackets.indexOf(startCh);
  if (bracket2 < 0 || bracket2 % 2 == 0 != dir > 0)
    return null;
  let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
  let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
  for (let distance = 0; !iter.next().done && distance <= maxScanDistance; ) {
    let text = iter.value;
    if (dir < 0)
      distance += text.length;
    let basePos = pos + distance * dir;
    for (let pos2 = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos2 != end; pos2 += dir) {
      let found = brackets.indexOf(text[pos2]);
      if (found < 0 || tree.resolveInner(basePos + pos2, 1).type != tokenType)
        continue;
      if (found % 2 == 0 == dir > 0) {
        depth++;
      } else if (depth == 1) {
        return { start: startToken, end: { from: basePos + pos2, to: basePos + pos2 + 1 }, matched: found >> 1 == bracket2 >> 1 };
      } else {
        depth--;
      }
    }
    if (dir > 0)
      distance += text.length;
  }
  return iter.done ? { start: startToken, matched: false } : null;
}
function countCol(string2, end, tabSize, startIndex = 0, startValue = 0) {
  if (end == null) {
    end = string2.search(/[^\s\u00a0]/);
    if (end == -1)
      end = string2.length;
  }
  let n2 = startValue;
  for (let i2 = startIndex; i2 < end; i2++) {
    if (string2.charCodeAt(i2) == 9)
      n2 += tabSize - n2 % tabSize;
    else
      n2++;
  }
  return n2;
}
var StringStream = class {
  /**
  Create a stream.
  */
  constructor(string2, tabSize, indentUnit2, overrideIndent) {
    this.string = string2;
    this.tabSize = tabSize;
    this.indentUnit = indentUnit2;
    this.overrideIndent = overrideIndent;
    this.pos = 0;
    this.start = 0;
    this.lastColumnPos = 0;
    this.lastColumnValue = 0;
  }
  /**
  True if we are at the end of the line.
  */
  eol() {
    return this.pos >= this.string.length;
  }
  /**
  True if we are at the start of the line.
  */
  sol() {
    return this.pos == 0;
  }
  /**
  Get the next code unit after the current position, or undefined
  if we're at the end of the line.
  */
  peek() {
    return this.string.charAt(this.pos) || void 0;
  }
  /**
  Read the next code unit and advance `this.pos`.
  */
  next() {
    if (this.pos < this.string.length)
      return this.string.charAt(this.pos++);
  }
  /**
  Match the next character against the given string, regular
  expression, or predicate. Consume and return it if it matches.
  */
  eat(match) {
    let ch2 = this.string.charAt(this.pos);
    let ok2;
    if (typeof match == "string")
      ok2 = ch2 == match;
    else
      ok2 = ch2 && (match instanceof RegExp ? match.test(ch2) : match(ch2));
    if (ok2) {
      ++this.pos;
      return ch2;
    }
  }
  /**
  Continue matching characters that match the given string,
  regular expression, or predicate function. Return true if any
  characters were consumed.
  */
  eatWhile(match) {
    let start = this.pos;
    while (this.eat(match)) {
    }
    return this.pos > start;
  }
  /**
  Consume whitespace ahead of `this.pos`. Return true if any was
  found.
  */
  eatSpace() {
    let start = this.pos;
    while (/[\s\u00a0]/.test(this.string.charAt(this.pos)))
      ++this.pos;
    return this.pos > start;
  }
  /**
  Move to the end of the line.
  */
  skipToEnd() {
    this.pos = this.string.length;
  }
  /**
  Move to directly before the given character, if found on the
  current line.
  */
  skipTo(ch2) {
    let found = this.string.indexOf(ch2, this.pos);
    if (found > -1) {
      this.pos = found;
      return true;
    }
  }
  /**
  Move back `n` characters.
  */
  backUp(n2) {
    this.pos -= n2;
  }
  /**
  Get the column position at `this.pos`.
  */
  column() {
    if (this.lastColumnPos < this.start) {
      this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);
      this.lastColumnPos = this.start;
    }
    return this.lastColumnValue;
  }
  /**
  Get the indentation column of the current line.
  */
  indentation() {
    var _a3;
    return (_a3 = this.overrideIndent) !== null && _a3 !== void 0 ? _a3 : countCol(this.string, null, this.tabSize);
  }
  /**
  Match the input against the given string or regular expression
  (which should start with a `^`). Return true or the regexp match
  if it matches.
  
  Unless `consume` is set to `false`, this will move `this.pos`
  past the matched text.
  
  When matching a string `caseInsensitive` can be set to true to
  make the match case-insensitive.
  */
  match(pattern, consume, caseInsensitive) {
    if (typeof pattern == "string") {
      let cased = (str) => caseInsensitive ? str.toLowerCase() : str;
      let substr = this.string.substr(this.pos, pattern.length);
      if (cased(substr) == cased(pattern)) {
        if (consume !== false)
          this.pos += pattern.length;
        return true;
      } else
        return null;
    } else {
      let match = this.string.slice(this.pos).match(pattern);
      if (match && match.index > 0)
        return null;
      if (match && consume !== false)
        this.pos += match[0].length;
      return match;
    }
  }
  /**
  Get the current token.
  */
  current() {
    return this.string.slice(this.start, this.pos);
  }
};
var noTokens = /* @__PURE__ */ Object.create(null);
var typeArray = [NodeType.none];
var warned = [];
var byTag = /* @__PURE__ */ Object.create(null);
var defaultTable = /* @__PURE__ */ Object.create(null);
for (let [legacyName, name2] of [
  ["variable", "variableName"],
  ["variable-2", "variableName.special"],
  ["string-2", "string.special"],
  ["def", "variableName.definition"],
  ["tag", "tagName"],
  ["attribute", "attributeName"],
  ["type", "typeName"],
  ["builtin", "variableName.standard"],
  ["qualifier", "modifier"],
  ["error", "invalid"],
  ["header", "heading"],
  ["property", "propertyName"]
])
  defaultTable[legacyName] = /* @__PURE__ */ createTokenType(noTokens, name2);
function warnForPart(part, msg) {
  if (warned.indexOf(part) > -1)
    return;
  warned.push(part);
  console.warn(msg);
}
function createTokenType(extra, tagStr) {
  let tags$1 = [];
  for (let name3 of tagStr.split(" ")) {
    let found = [];
    for (let part of name3.split(".")) {
      let value = extra[part] || tags[part];
      if (!value) {
        warnForPart(part, `Unknown highlighting tag ${part}`);
      } else if (typeof value == "function") {
        if (!found.length)
          warnForPart(part, `Modifier ${part} used at start of tag`);
        else
          found = found.map(value);
      } else {
        if (found.length)
          warnForPart(part, `Tag ${part} used as modifier`);
        else
          found = Array.isArray(value) ? value : [value];
      }
    }
    for (let tag of found)
      tags$1.push(tag);
  }
  if (!tags$1.length)
    return 0;
  let name2 = tagStr.replace(/ /g, "_"), key = name2 + " " + tags$1.map((t3) => t3.id);
  let known = byTag[key];
  if (known)
    return known.id;
  let type = byTag[key] = NodeType.define({
    id: typeArray.length,
    name: name2,
    props: [styleTags({ [name2]: tags$1 })]
  });
  typeArray.push(type);
  return type.id;
}
var marks = {
  rtl: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "rtl" }, bidiIsolate: Direction.RTL }),
  ltr: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "ltr" }, bidiIsolate: Direction.LTR }),
  auto: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "auto" }, bidiIsolate: null })
};

// node_modules/@codemirror/commands/dist/index.js
var toggleComment = (target) => {
  let { state } = target, line = state.doc.lineAt(state.selection.main.from), config2 = getConfig(target.state, line.from);
  return config2.line ? toggleLineComment(target) : config2.block ? toggleBlockCommentByLine(target) : false;
};
function command(f2, option) {
  return ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let tr2 = f2(option, state);
    if (!tr2)
      return false;
    dispatch(state.update(tr2));
    return true;
  };
}
var toggleLineComment = /* @__PURE__ */ command(
  changeLineComment,
  0
  /* CommentOption.Toggle */
);
var toggleBlockComment = /* @__PURE__ */ command(
  changeBlockComment,
  0
  /* CommentOption.Toggle */
);
var toggleBlockCommentByLine = /* @__PURE__ */ command(
  (o2, s2) => changeBlockComment(o2, s2, selectedLineRanges(s2)),
  0
  /* CommentOption.Toggle */
);
function getConfig(state, pos) {
  let data2 = state.languageDataAt("commentTokens", pos);
  return data2.length ? data2[0] : {};
}
var SearchMargin = 50;
function findBlockComment(state, { open, close }, from, to2) {
  let textBefore = state.sliceDoc(from - SearchMargin, from);
  let textAfter = state.sliceDoc(to2, to2 + SearchMargin);
  let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
  let beforeOff = textBefore.length - spaceBefore;
  if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
    return {
      open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
      close: { pos: to2 + spaceAfter, margin: spaceAfter && 1 }
    };
  }
  let startText, endText;
  if (to2 - from <= 2 * SearchMargin) {
    startText = endText = state.sliceDoc(from, to2);
  } else {
    startText = state.sliceDoc(from, from + SearchMargin);
    endText = state.sliceDoc(to2 - SearchMargin, to2);
  }
  let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
  let endOff = endText.length - endSpace - close.length;
  if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close.length) == close) {
    return {
      open: {
        pos: from + startSpace + open.length,
        margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0
      },
      close: {
        pos: to2 - endSpace - close.length,
        margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0
      }
    };
  }
  return null;
}
function selectedLineRanges(state) {
  let ranges = [];
  for (let r2 of state.selection.ranges) {
    let fromLine = state.doc.lineAt(r2.from);
    let toLine = r2.to <= fromLine.to ? fromLine : state.doc.lineAt(r2.to);
    let last = ranges.length - 1;
    if (last >= 0 && ranges[last].to > fromLine.from)
      ranges[last].to = toLine.to;
    else
      ranges.push({ from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length, to: toLine.to });
  }
  return ranges;
}
function changeBlockComment(option, state, ranges = state.selection.ranges) {
  let tokens = ranges.map((r2) => getConfig(state, r2.from).block);
  if (!tokens.every((c2) => c2))
    return null;
  let comments = ranges.map((r2, i2) => findBlockComment(state, tokens[i2], r2.from, r2.to));
  if (option != 2 && !comments.every((c2) => c2)) {
    return { changes: state.changes(ranges.map((range, i2) => {
      if (comments[i2])
        return [];
      return [{ from: range.from, insert: tokens[i2].open + " " }, { from: range.to, insert: " " + tokens[i2].close }];
    })) };
  } else if (option != 1 && comments.some((c2) => c2)) {
    let changes = [];
    for (let i2 = 0, comment2; i2 < comments.length; i2++)
      if (comment2 = comments[i2]) {
        let token = tokens[i2], { open, close } = comment2;
        changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
      }
    return { changes };
  }
  return null;
}
function changeLineComment(option, state, ranges = state.selection.ranges) {
  let lines = [];
  let prevLine = -1;
  for (let { from, to: to2 } of ranges) {
    let startI = lines.length, minIndent = 1e9;
    let token = getConfig(state, from).line;
    if (!token)
      continue;
    for (let pos = from; pos <= to2; ) {
      let line = state.doc.lineAt(pos);
      if (line.from > prevLine && (from == to2 || to2 > line.from)) {
        prevLine = line.from;
        let indent = /^\s*/.exec(line.text)[0].length;
        let empty2 = indent == line.length;
        let comment2 = line.text.slice(indent, indent + token.length) == token ? indent : -1;
        if (indent < line.text.length && indent < minIndent)
          minIndent = indent;
        lines.push({ line, comment: comment2, token, indent, empty: empty2, single: false });
      }
      pos = line.to + 1;
    }
    if (minIndent < 1e9) {
      for (let i2 = startI; i2 < lines.length; i2++)
        if (lines[i2].indent < lines[i2].line.text.length)
          lines[i2].indent = minIndent;
    }
    if (lines.length == startI + 1)
      lines[startI].single = true;
  }
  if (option != 2 && lines.some((l2) => l2.comment < 0 && (!l2.empty || l2.single))) {
    let changes = [];
    for (let { line, token, indent, empty: empty2, single } of lines)
      if (single || !empty2)
        changes.push({ from: line.from + indent, insert: token + " " });
    let changeSet = state.changes(changes);
    return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
  } else if (option != 1 && lines.some((l2) => l2.comment >= 0)) {
    let changes = [];
    for (let { line, comment: comment2, token } of lines)
      if (comment2 >= 0) {
        let from = line.from + comment2, to2 = from + token.length;
        if (line.text[to2 - line.from] == " ")
          to2++;
        changes.push({ from, to: to2 });
      }
    return { changes };
  }
  return null;
}
var fromHistory = /* @__PURE__ */ Annotation.define();
var isolateHistory = /* @__PURE__ */ Annotation.define();
var invertedEffects = /* @__PURE__ */ Facet.define();
var historyConfig = /* @__PURE__ */ Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      minDepth: 100,
      newGroupDelay: 500,
      joinToEvent: (_t2, isAdjacent2) => isAdjacent2
    }, {
      minDepth: Math.max,
      newGroupDelay: Math.min,
      joinToEvent: (a2, b2) => (tr2, adj) => a2(tr2, adj) || b2(tr2, adj)
    });
  }
});
var historyField_ = /* @__PURE__ */ StateField.define({
  create() {
    return HistoryState.empty;
  },
  update(state, tr2) {
    let config2 = tr2.state.facet(historyConfig);
    let fromHist = tr2.annotation(fromHistory);
    if (fromHist) {
      let item = HistEvent.fromTransaction(tr2, fromHist.selection), from = fromHist.side;
      let other = from == 0 ? state.undone : state.done;
      if (item)
        other = updateBranch(other, other.length, config2.minDepth, item);
      else
        other = addSelection(other, tr2.startState.selection);
      return new HistoryState(from == 0 ? fromHist.rest : other, from == 0 ? other : fromHist.rest);
    }
    let isolate = tr2.annotation(isolateHistory);
    if (isolate == "full" || isolate == "before")
      state = state.isolate();
    if (tr2.annotation(Transaction.addToHistory) === false)
      return !tr2.changes.empty ? state.addMapping(tr2.changes.desc) : state;
    let event = HistEvent.fromTransaction(tr2);
    let time = tr2.annotation(Transaction.time), userEvent = tr2.annotation(Transaction.userEvent);
    if (event)
      state = state.addChanges(event, time, userEvent, config2, tr2);
    else if (tr2.selection)
      state = state.addSelection(tr2.startState.selection, time, userEvent, config2.newGroupDelay);
    if (isolate == "full" || isolate == "after")
      state = state.isolate();
    return state;
  },
  toJSON(value) {
    return { done: value.done.map((e25) => e25.toJSON()), undone: value.undone.map((e25) => e25.toJSON()) };
  },
  fromJSON(json) {
    return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
  }
});
function history(config2 = {}) {
  return [
    historyField_,
    historyConfig.of(config2),
    EditorView.domEventHandlers({
      beforeinput(e25, view) {
        let command2 = e25.inputType == "historyUndo" ? undo : e25.inputType == "historyRedo" ? redo : null;
        if (!command2)
          return false;
        e25.preventDefault();
        return command2(view);
      }
    })
  ];
}
function cmd(side, selection) {
  return function({ state, dispatch }) {
    if (!selection && state.readOnly)
      return false;
    let historyState = state.field(historyField_, false);
    if (!historyState)
      return false;
    let tr2 = historyState.pop(side, state, selection);
    if (!tr2)
      return false;
    dispatch(tr2);
    return true;
  };
}
var undo = /* @__PURE__ */ cmd(0, false);
var redo = /* @__PURE__ */ cmd(1, false);
var undoSelection = /* @__PURE__ */ cmd(0, true);
var redoSelection = /* @__PURE__ */ cmd(1, true);
var HistEvent = class _HistEvent {
  constructor(changes, effects, mapped, startSelection, selectionsAfter) {
    this.changes = changes;
    this.effects = effects;
    this.mapped = mapped;
    this.startSelection = startSelection;
    this.selectionsAfter = selectionsAfter;
  }
  setSelAfter(after) {
    return new _HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
  }
  toJSON() {
    var _a3, _b2, _c2;
    return {
      changes: (_a3 = this.changes) === null || _a3 === void 0 ? void 0 : _a3.toJSON(),
      mapped: (_b2 = this.mapped) === null || _b2 === void 0 ? void 0 : _b2.toJSON(),
      startSelection: (_c2 = this.startSelection) === null || _c2 === void 0 ? void 0 : _c2.toJSON(),
      selectionsAfter: this.selectionsAfter.map((s2) => s2.toJSON())
    };
  }
  static fromJSON(json) {
    return new _HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
  }
  // This does not check `addToHistory` and such, it assumes the
  // transaction needs to be converted to an item. Returns null when
  // there are no changes or effects in the transaction.
  static fromTransaction(tr2, selection) {
    let effects = none2;
    for (let invert of tr2.startState.facet(invertedEffects)) {
      let result = invert(tr2);
      if (result.length)
        effects = effects.concat(result);
    }
    if (!effects.length && tr2.changes.empty)
      return null;
    return new _HistEvent(tr2.changes.invert(tr2.startState.doc), effects, void 0, selection || tr2.startState.selection, none2);
  }
  static selection(selections) {
    return new _HistEvent(void 0, none2, void 0, void 0, selections);
  }
};
function updateBranch(branch, to2, maxLen, newEvent) {
  let start = to2 + 1 > maxLen + 20 ? to2 - maxLen - 1 : 0;
  let newBranch = branch.slice(start, to2);
  newBranch.push(newEvent);
  return newBranch;
}
function isAdjacent(a2, b2) {
  let ranges = [], isAdjacent2 = false;
  a2.iterChangedRanges((f2, t3) => ranges.push(f2, t3));
  b2.iterChangedRanges((_f2, _t2, f2, t3) => {
    for (let i2 = 0; i2 < ranges.length; ) {
      let from = ranges[i2++], to2 = ranges[i2++];
      if (t3 >= from && f2 <= to2)
        isAdjacent2 = true;
    }
  });
  return isAdjacent2;
}
function eqSelectionShape(a2, b2) {
  return a2.ranges.length == b2.ranges.length && a2.ranges.filter((r2, i2) => r2.empty != b2.ranges[i2].empty).length === 0;
}
function conc(a2, b2) {
  return !a2.length ? b2 : !b2.length ? a2 : a2.concat(b2);
}
var none2 = [];
var MaxSelectionsPerEvent = 200;
function addSelection(branch, selection) {
  if (!branch.length) {
    return [HistEvent.selection([selection])];
  } else {
    let lastEvent = branch[branch.length - 1];
    let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
    if (sels.length && sels[sels.length - 1].eq(selection))
      return branch;
    sels.push(selection);
    return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
  }
}
function popSelection(branch) {
  let last = branch[branch.length - 1];
  let newBranch = branch.slice();
  newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
  return newBranch;
}
function addMappingToBranch(branch, mapping) {
  if (!branch.length)
    return branch;
  let length = branch.length, selections = none2;
  while (length) {
    let event = mapEvent(branch[length - 1], mapping, selections);
    if (event.changes && !event.changes.empty || event.effects.length) {
      let result = branch.slice(0, length);
      result[length - 1] = event;
      return result;
    } else {
      mapping = event.mapped;
      length--;
      selections = event.selectionsAfter;
    }
  }
  return selections.length ? [HistEvent.selection(selections)] : none2;
}
function mapEvent(event, mapping, extraSelections) {
  let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map((s2) => s2.map(mapping)) : none2, extraSelections);
  if (!event.changes)
    return HistEvent.selection(selections);
  let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
  let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
  return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
}
var joinableUserEvent = /^(input\.type|delete)($|\.)/;
var HistoryState = class _HistoryState {
  constructor(done, undone, prevTime = 0, prevUserEvent = void 0) {
    this.done = done;
    this.undone = undone;
    this.prevTime = prevTime;
    this.prevUserEvent = prevUserEvent;
  }
  isolate() {
    return this.prevTime ? new _HistoryState(this.done, this.undone) : this;
  }
  addChanges(event, time, userEvent, config2, tr2) {
    let done = this.done, lastEvent = done[done.length - 1];
    if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes && (!userEvent || joinableUserEvent.test(userEvent)) && (!lastEvent.selectionsAfter.length && time - this.prevTime < config2.newGroupDelay && config2.joinToEvent(tr2, isAdjacent(lastEvent.changes, event.changes)) || // For compose (but not compose.start) events, always join with previous event
    userEvent == "input.type.compose")) {
      done = updateBranch(done, done.length - 1, config2.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none2));
    } else {
      done = updateBranch(done, done.length, config2.minDepth, event);
    }
    return new _HistoryState(done, none2, time, userEvent);
  }
  addSelection(selection, time, userEvent, newGroupDelay) {
    let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none2;
    if (last.length > 0 && time - this.prevTime < newGroupDelay && userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) && eqSelectionShape(last[last.length - 1], selection))
      return this;
    return new _HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
  }
  addMapping(mapping) {
    return new _HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
  }
  pop(side, state, onlySelection) {
    let branch = side == 0 ? this.done : this.undone;
    if (branch.length == 0)
      return null;
    let event = branch[branch.length - 1], selection = event.selectionsAfter[0] || state.selection;
    if (onlySelection && event.selectionsAfter.length) {
      return state.update({
        selection: event.selectionsAfter[event.selectionsAfter.length - 1],
        annotations: fromHistory.of({ side, rest: popSelection(branch), selection }),
        userEvent: side == 0 ? "select.undo" : "select.redo",
        scrollIntoView: true
      });
    } else if (!event.changes) {
      return null;
    } else {
      let rest = branch.length == 1 ? none2 : branch.slice(0, branch.length - 1);
      if (event.mapped)
        rest = addMappingToBranch(rest, event.mapped);
      return state.update({
        changes: event.changes,
        selection: event.startSelection,
        effects: event.effects,
        annotations: fromHistory.of({ side, rest, selection }),
        filter: false,
        userEvent: side == 0 ? "undo" : "redo",
        scrollIntoView: true
      });
    }
  }
};
HistoryState.empty = /* @__PURE__ */ new HistoryState(none2, none2);
var historyKeymap = [
  { key: "Mod-z", run: undo, preventDefault: true },
  { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
  { linux: "Ctrl-Shift-z", run: redo, preventDefault: true },
  { key: "Mod-u", run: undoSelection, preventDefault: true },
  { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
];
function updateSel(sel, by2) {
  return EditorSelection.create(sel.ranges.map(by2), sel.mainIndex);
}
function setSel(state, selection) {
  return state.update({ selection, scrollIntoView: true, userEvent: "select" });
}
function moveSel({ state, dispatch }, how) {
  let selection = updateSel(state.selection, how);
  if (selection.eq(state.selection, true))
    return false;
  dispatch(setSel(state, selection));
  return true;
}
function rangeEnd(range, forward) {
  return EditorSelection.cursor(forward ? range.to : range.from);
}
function cursorByChar(view, forward) {
  return moveSel(view, (range) => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
}
function ltrAtCursor(view) {
  return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
}
var cursorCharLeft = (view) => cursorByChar(view, !ltrAtCursor(view));
var cursorCharRight = (view) => cursorByChar(view, ltrAtCursor(view));
var cursorCharBackward = (view) => cursorByChar(view, false);
function cursorByGroup(view, forward) {
  return moveSel(view, (range) => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
}
var cursorGroupLeft = (view) => cursorByGroup(view, !ltrAtCursor(view));
var cursorGroupRight = (view) => cursorByGroup(view, ltrAtCursor(view));
var segmenter = typeof Intl != "undefined" && Intl.Segmenter ? /* @__PURE__ */ new Intl.Segmenter(void 0, { granularity: "word" }) : null;
function interestingNode(state, node, bracketProp) {
  if (node.type.prop(bracketProp))
    return true;
  let len = node.to - node.from;
  return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
}
function moveBySyntax(state, start, forward) {
  let pos = syntaxTree(state).resolveInner(start.head);
  let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
  for (let at2 = start.head; ; ) {
    let next = forward ? pos.childAfter(at2) : pos.childBefore(at2);
    if (!next)
      break;
    if (interestingNode(state, next, bracketProp))
      pos = next;
    else
      at2 = forward ? next.to : next.from;
  }
  let bracket2 = pos.type.prop(bracketProp), match, newPos;
  if (bracket2 && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
    newPos = forward ? match.end.to : match.end.from;
  else
    newPos = forward ? pos.to : pos.from;
  return EditorSelection.cursor(newPos, forward ? -1 : 1);
}
var cursorSyntaxLeft = (view) => moveSel(view, (range) => moveBySyntax(view.state, range, !ltrAtCursor(view)));
var cursorSyntaxRight = (view) => moveSel(view, (range) => moveBySyntax(view.state, range, ltrAtCursor(view)));
function cursorByLine(view, forward) {
  return moveSel(view, (range) => {
    if (!range.empty)
      return rangeEnd(range, forward);
    let moved = view.moveVertically(range, forward);
    return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
  });
}
var cursorLineUp = (view) => cursorByLine(view, false);
var cursorLineDown = (view) => cursorByLine(view, true);
function pageInfo(view) {
  let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
  let marginTop = 0, marginBottom = 0, height;
  if (selfScroll) {
    for (let source of view.state.facet(EditorView.scrollMargins)) {
      let margins = source(view);
      if (margins === null || margins === void 0 ? void 0 : margins.top)
        marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
      if (margins === null || margins === void 0 ? void 0 : margins.bottom)
        marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
    }
    height = view.scrollDOM.clientHeight - marginTop - marginBottom;
  } else {
    height = (view.dom.ownerDocument.defaultView || window).innerHeight;
  }
  return {
    marginTop,
    marginBottom,
    selfScroll,
    height: Math.max(view.defaultLineHeight, height - 5)
  };
}
function cursorByPage(view, forward) {
  let page = pageInfo(view);
  let { state } = view, selection = updateSel(state.selection, (range) => {
    return range.empty ? view.moveVertically(range, forward, page.height) : rangeEnd(range, forward);
  });
  if (selection.eq(state.selection))
    return false;
  let effect;
  if (page.selfScroll) {
    let startPos = view.coordsAtPos(state.selection.main.head);
    let scrollRect = view.scrollDOM.getBoundingClientRect();
    let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;
    if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
      effect = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollTop });
  }
  view.dispatch(setSel(state, selection), { effects: effect });
  return true;
}
var cursorPageUp = (view) => cursorByPage(view, false);
var cursorPageDown = (view) => cursorByPage(view, true);
function moveByLineBoundary(view, start, forward) {
  let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);
  if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
    moved = view.moveToLineBoundary(start, forward, false);
  if (!forward && moved.head == line.from && line.length) {
    let space4 = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
    if (space4 && start.head != line.from + space4)
      moved = EditorSelection.cursor(line.from + space4);
  }
  return moved;
}
var cursorLineBoundaryForward = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, true));
var cursorLineBoundaryBackward = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, false));
var cursorLineBoundaryLeft = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, !ltrAtCursor(view)));
var cursorLineBoundaryRight = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, ltrAtCursor(view)));
var cursorLineStart = (view) => moveSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
var cursorLineEnd = (view) => moveSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
function toMatchingBracket(state, dispatch, extend2) {
  let found = false, selection = updateSel(state.selection, (range) => {
    let matching2 = matchBrackets(state, range.head, -1) || matchBrackets(state, range.head, 1) || range.head > 0 && matchBrackets(state, range.head - 1, 1) || range.head < state.doc.length && matchBrackets(state, range.head + 1, -1);
    if (!matching2 || !matching2.end)
      return range;
    found = true;
    let head = matching2.start.from == range.head ? matching2.end.to : matching2.end.from;
    return extend2 ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
  });
  if (!found)
    return false;
  dispatch(setSel(state, selection));
  return true;
}
var cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
function extendSel(view, how) {
  let selection = updateSel(view.state.selection, (range) => {
    let head = how(range);
    return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || void 0);
  });
  if (selection.eq(view.state.selection))
    return false;
  view.dispatch(setSel(view.state, selection));
  return true;
}
function selectByChar(view, forward) {
  return extendSel(view, (range) => view.moveByChar(range, forward));
}
var selectCharLeft = (view) => selectByChar(view, !ltrAtCursor(view));
var selectCharRight = (view) => selectByChar(view, ltrAtCursor(view));
function selectByGroup(view, forward) {
  return extendSel(view, (range) => view.moveByGroup(range, forward));
}
var selectGroupLeft = (view) => selectByGroup(view, !ltrAtCursor(view));
var selectGroupRight = (view) => selectByGroup(view, ltrAtCursor(view));
var selectSyntaxLeft = (view) => extendSel(view, (range) => moveBySyntax(view.state, range, !ltrAtCursor(view)));
var selectSyntaxRight = (view) => extendSel(view, (range) => moveBySyntax(view.state, range, ltrAtCursor(view)));
function selectByLine(view, forward) {
  return extendSel(view, (range) => view.moveVertically(range, forward));
}
var selectLineUp = (view) => selectByLine(view, false);
var selectLineDown = (view) => selectByLine(view, true);
function selectByPage(view, forward) {
  return extendSel(view, (range) => view.moveVertically(range, forward, pageInfo(view).height));
}
var selectPageUp = (view) => selectByPage(view, false);
var selectPageDown = (view) => selectByPage(view, true);
var selectLineBoundaryForward = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, true));
var selectLineBoundaryBackward = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, false));
var selectLineBoundaryLeft = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, !ltrAtCursor(view)));
var selectLineBoundaryRight = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, ltrAtCursor(view)));
var selectLineStart = (view) => extendSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).from));
var selectLineEnd = (view) => extendSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).to));
var cursorDocStart = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: 0 }));
  return true;
};
var cursorDocEnd = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: state.doc.length }));
  return true;
};
var selectDocStart = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
  return true;
};
var selectDocEnd = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
  return true;
};
var selectAll = ({ state, dispatch }) => {
  dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
  return true;
};
var selectLine = ({ state, dispatch }) => {
  let ranges = selectedLineBlocks(state).map(({ from, to: to2 }) => EditorSelection.range(from, Math.min(to2 + 1, state.doc.length)));
  dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
  return true;
};
var selectParentSyntax = ({ state, dispatch }) => {
  let selection = updateSel(state.selection, (range) => {
    var _a3;
    let stack = syntaxTree(state).resolveStack(range.from, 1);
    for (let cur2 = stack; cur2; cur2 = cur2.next) {
      let { node } = cur2;
      if ((node.from < range.from && node.to >= range.to || node.to > range.to && node.from <= range.from) && ((_a3 = node.parent) === null || _a3 === void 0 ? void 0 : _a3.parent))
        return EditorSelection.range(node.to, node.from);
    }
    return range;
  });
  dispatch(setSel(state, selection));
  return true;
};
var simplifySelection = ({ state, dispatch }) => {
  let cur2 = state.selection, selection = null;
  if (cur2.ranges.length > 1)
    selection = EditorSelection.create([cur2.main]);
  else if (!cur2.main.empty)
    selection = EditorSelection.create([EditorSelection.cursor(cur2.main.head)]);
  if (!selection)
    return false;
  dispatch(setSel(state, selection));
  return true;
};
function deleteBy(target, by2) {
  if (target.state.readOnly)
    return false;
  let event = "delete.selection", { state } = target;
  let changes = state.changeByRange((range) => {
    let { from, to: to2 } = range;
    if (from == to2) {
      let towards = by2(range);
      if (towards < from) {
        event = "delete.backward";
        towards = skipAtomic(target, towards, false);
      } else if (towards > from) {
        event = "delete.forward";
        towards = skipAtomic(target, towards, true);
      }
      from = Math.min(from, towards);
      to2 = Math.max(to2, towards);
    } else {
      from = skipAtomic(target, from, false);
      to2 = skipAtomic(target, to2, true);
    }
    return from == to2 ? { range } : { changes: { from, to: to2 }, range: EditorSelection.cursor(from, from < range.head ? -1 : 1) };
  });
  if (changes.changes.empty)
    return false;
  target.dispatch(state.update(changes, {
    scrollIntoView: true,
    userEvent: event,
    effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : void 0
  }));
  return true;
}
function skipAtomic(target, pos, forward) {
  if (target instanceof EditorView)
    for (let ranges of target.state.facet(EditorView.atomicRanges).map((f2) => f2(target)))
      ranges.between(pos, pos, (from, to2) => {
        if (from < pos && to2 > pos)
          pos = forward ? to2 : from;
      });
  return pos;
}
var deleteByChar = (target, forward, byIndentUnit) => deleteBy(target, (range) => {
  let pos = range.from, { state } = target, line = state.doc.lineAt(pos), before, targetPos;
  if (byIndentUnit && !forward && pos > line.from && pos < line.from + 200 && !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
    if (before[before.length - 1] == "	")
      return pos - 1;
    let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
    for (let i2 = 0; i2 < drop && before[before.length - 1 - i2] == " "; i2++)
      pos--;
    targetPos = pos;
  } else {
    targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
    if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
      targetPos += forward ? 1 : -1;
    else if (!forward && /[\ufe00-\ufe0f]/.test(line.text.slice(targetPos - line.from, pos - line.from)))
      targetPos = findClusterBreak(line.text, targetPos - line.from, false, false) + line.from;
  }
  return targetPos;
});
var deleteCharBackward = (view) => deleteByChar(view, false, true);
var deleteCharForward = (view) => deleteByChar(view, true, false);
var deleteByGroup = (target, forward) => deleteBy(target, (range) => {
  let pos = range.head, { state } = target, line = state.doc.lineAt(pos);
  let categorize = state.charCategorizer(pos);
  for (let cat = null; ; ) {
    if (pos == (forward ? line.to : line.from)) {
      if (pos == range.head && line.number != (forward ? state.doc.lines : 1))
        pos += forward ? 1 : -1;
      break;
    }
    let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
    let nextChar2 = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
    let nextCat = categorize(nextChar2);
    if (cat != null && nextCat != cat)
      break;
    if (nextChar2 != " " || pos != range.head)
      cat = nextCat;
    pos = next;
  }
  return pos;
});
var deleteGroupBackward = (target) => deleteByGroup(target, false);
var deleteGroupForward = (target) => deleteByGroup(target, true);
var deleteToLineEnd = (view) => deleteBy(view, (range) => {
  let lineEnd2 = view.lineBlockAt(range.head).to;
  return range.head < lineEnd2 ? lineEnd2 : Math.min(view.state.doc.length, range.head + 1);
});
var deleteLineBoundaryBackward = (view) => deleteBy(view, (range) => {
  let lineStart = view.moveToLineBoundary(range, false).head;
  return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);
});
var deleteLineBoundaryForward = (view) => deleteBy(view, (range) => {
  let lineStart = view.moveToLineBoundary(range, true).head;
  return range.head < lineStart ? lineStart : Math.min(view.state.doc.length, range.head + 1);
});
var splitLine = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  let changes = state.changeByRange((range) => {
    return {
      changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
      range: EditorSelection.cursor(range.from)
    };
  });
  dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
  return true;
};
var transposeChars = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  let changes = state.changeByRange((range) => {
    if (!range.empty || range.from == 0 || range.from == state.doc.length)
      return { range };
    let pos = range.from, line = state.doc.lineAt(pos);
    let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
    let to2 = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
    return {
      changes: { from, to: to2, insert: state.doc.slice(pos, to2).append(state.doc.slice(from, pos)) },
      range: EditorSelection.cursor(to2)
    };
  });
  if (changes.changes.empty)
    return false;
  dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
  return true;
};
function selectedLineBlocks(state) {
  let blocks = [], upto = -1;
  for (let range of state.selection.ranges) {
    let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
    if (!range.empty && range.to == endLine.from)
      endLine = state.doc.lineAt(range.to - 1);
    if (upto >= startLine.number) {
      let prev = blocks[blocks.length - 1];
      prev.to = endLine.to;
      prev.ranges.push(range);
    } else {
      blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
    }
    upto = endLine.number + 1;
  }
  return blocks;
}
function moveLine(state, dispatch, forward) {
  if (state.readOnly)
    return false;
  let changes = [], ranges = [];
  for (let block of selectedLineBlocks(state)) {
    if (forward ? block.to == state.doc.length : block.from == 0)
      continue;
    let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
    let size = nextLine.length + 1;
    if (forward) {
      changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
      for (let r2 of block.ranges)
        ranges.push(EditorSelection.range(Math.min(state.doc.length, r2.anchor + size), Math.min(state.doc.length, r2.head + size)));
    } else {
      changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
      for (let r2 of block.ranges)
        ranges.push(EditorSelection.range(r2.anchor - size, r2.head - size));
    }
  }
  if (!changes.length)
    return false;
  dispatch(state.update({
    changes,
    scrollIntoView: true,
    selection: EditorSelection.create(ranges, state.selection.mainIndex),
    userEvent: "move.line"
  }));
  return true;
}
var moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
var moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
function copyLine(state, dispatch, forward) {
  if (state.readOnly)
    return false;
  let changes = [];
  for (let block of selectedLineBlocks(state)) {
    if (forward)
      changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
    else
      changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
  }
  dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
  return true;
}
var copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
var copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
var deleteLine = (view) => {
  if (view.state.readOnly)
    return false;
  let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to: to2 }) => {
    if (from > 0)
      from--;
    else if (to2 < state.doc.length)
      to2++;
    return { from, to: to2 };
  }));
  let selection = updateSel(state.selection, (range) => {
    let dist2 = void 0;
    if (view.lineWrapping) {
      let block = view.lineBlockAt(range.head), pos = view.coordsAtPos(range.head, range.assoc || 1);
      if (pos)
        dist2 = block.bottom + view.documentTop - pos.bottom + view.defaultLineHeight / 2;
    }
    return view.moveVertically(range, true, dist2);
  }).map(changes);
  view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
  return true;
};
function isBetweenBrackets(state, pos) {
  if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
    return { from: pos, to: pos };
  let context = syntaxTree(state).resolveInner(pos);
  let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
  if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from && !/\S/.test(state.sliceDoc(before.to, after.from)))
    return { from: before.to, to: after.from };
  return null;
}
var insertNewlineAndIndent = /* @__PURE__ */ newlineAndIndent(false);
var insertBlankLine = /* @__PURE__ */ newlineAndIndent(true);
function newlineAndIndent(atEof) {
  return ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let changes = state.changeByRange((range) => {
      let { from, to: to2 } = range, line = state.doc.lineAt(from);
      let explode = !atEof && from == to2 && isBetweenBrackets(state, from);
      if (atEof)
        from = to2 = (to2 <= line.to ? line : state.doc.lineAt(to2)).to;
      let cx2 = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
      let indent = getIndentation(cx2, from);
      if (indent == null)
        indent = countColumn(/^\s*/.exec(state.doc.lineAt(from).text)[0], state.tabSize);
      while (to2 < line.to && /\s/.test(line.text[to2 - line.from]))
        to2++;
      if (explode)
        ({ from, to: to2 } = explode);
      else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
        from = line.from;
      let insert2 = ["", indentString(state, indent)];
      if (explode)
        insert2.push(indentString(state, cx2.lineIndent(line.from, -1)));
      return {
        changes: { from, to: to2, insert: Text.of(insert2) },
        range: EditorSelection.cursor(from + 1 + insert2[1].length)
      };
    });
    dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
    return true;
  };
}
function changeBySelectedLine(state, f2) {
  let atLine = -1;
  return state.changeByRange((range) => {
    let changes = [];
    for (let pos = range.from; pos <= range.to; ) {
      let line = state.doc.lineAt(pos);
      if (line.number > atLine && (range.empty || range.to > line.from)) {
        f2(line, changes, range);
        atLine = line.number;
      }
      pos = line.to + 1;
    }
    let changeSet = state.changes(changes);
    return {
      changes,
      range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1))
    };
  });
}
var indentSelection = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  let updated = /* @__PURE__ */ Object.create(null);
  let context = new IndentContext(state, { overrideIndentation: (start) => {
    let found = updated[start];
    return found == null ? -1 : found;
  } });
  let changes = changeBySelectedLine(state, (line, changes2, range) => {
    let indent = getIndentation(context, line.from);
    if (indent == null)
      return;
    if (!/\S/.test(line.text))
      indent = 0;
    let cur2 = /^\s*/.exec(line.text)[0];
    let norm = indentString(state, indent);
    if (cur2 != norm || range.from < line.from + cur2.length) {
      updated[line.from] = indent;
      changes2.push({ from: line.from, to: line.from + cur2.length, insert: norm });
    }
  });
  if (!changes.changes.empty)
    dispatch(state.update(changes, { userEvent: "indent" }));
  return true;
};
var indentMore = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
    changes.push({ from: line.from, insert: state.facet(indentUnit) });
  }), { userEvent: "input.indent" }));
  return true;
};
var indentLess = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
    let space4 = /^\s*/.exec(line.text)[0];
    if (!space4)
      return;
    let col = countColumn(space4, state.tabSize), keep = 0;
    let insert2 = indentString(state, Math.max(0, col - getIndentUnit(state)));
    while (keep < space4.length && keep < insert2.length && space4.charCodeAt(keep) == insert2.charCodeAt(keep))
      keep++;
    changes.push({ from: line.from + keep, to: line.from + space4.length, insert: insert2.slice(keep) });
  }), { userEvent: "delete.dedent" }));
  return true;
};
var toggleTabFocusMode = (view) => {
  view.setTabFocusMode();
  return true;
};
var emacsStyleKeymap = [
  { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
  { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
  { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
  { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
  { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
  { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
  { key: "Ctrl-d", run: deleteCharForward },
  { key: "Ctrl-h", run: deleteCharBackward },
  { key: "Ctrl-k", run: deleteToLineEnd },
  { key: "Ctrl-Alt-h", run: deleteGroupBackward },
  { key: "Ctrl-o", run: splitLine },
  { key: "Ctrl-t", run: transposeChars },
  { key: "Ctrl-v", run: cursorPageDown }
];
var standardKeymap = /* @__PURE__ */ [
  { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
  { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },
  { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },
  { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
  { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },
  { mac: "Cmd-ArrowRight", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },
  { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
  { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
  { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
  { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
  { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
  { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
  { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
  { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
  { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
  { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
  { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
  { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
  { key: "Enter", run: insertNewlineAndIndent },
  { key: "Mod-a", run: selectAll },
  { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
  { key: "Delete", run: deleteCharForward },
  { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
  { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
  { mac: "Mod-Backspace", run: deleteLineBoundaryBackward },
  { mac: "Mod-Delete", run: deleteLineBoundaryForward }
].concat(/* @__PURE__ */ emacsStyleKeymap.map((b2) => ({ mac: b2.key, run: b2.run, shift: b2.shift })));
var defaultKeymap = /* @__PURE__ */ [
  { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
  { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
  { key: "Alt-ArrowUp", run: moveLineUp },
  { key: "Shift-Alt-ArrowUp", run: copyLineUp },
  { key: "Alt-ArrowDown", run: moveLineDown },
  { key: "Shift-Alt-ArrowDown", run: copyLineDown },
  { key: "Escape", run: simplifySelection },
  { key: "Mod-Enter", run: insertBlankLine },
  { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
  { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
  { key: "Mod-[", run: indentLess },
  { key: "Mod-]", run: indentMore },
  { key: "Mod-Alt-\\", run: indentSelection },
  { key: "Shift-Mod-k", run: deleteLine },
  { key: "Shift-Mod-\\", run: cursorMatchingBracket },
  { key: "Mod-/", run: toggleComment },
  { key: "Alt-A", run: toggleBlockComment },
  { key: "Ctrl-m", mac: "Shift-Alt-m", run: toggleTabFocusMode }
].concat(standardKeymap);
var indentWithTab = { key: "Tab", run: indentMore, shift: indentLess };

// node_modules/crelt/index.js
function crelt() {
  var elt2 = arguments[0];
  if (typeof elt2 == "string") elt2 = document.createElement(elt2);
  var i2 = 1, next = arguments[1];
  if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
    for (var name2 in next) if (Object.prototype.hasOwnProperty.call(next, name2)) {
      var value = next[name2];
      if (typeof value == "string") elt2.setAttribute(name2, value);
      else if (value != null) elt2[name2] = value;
    }
    i2++;
  }
  for (; i2 < arguments.length; i2++) add(elt2, arguments[i2]);
  return elt2;
}
function add(elt2, child) {
  if (typeof child == "string") {
    elt2.appendChild(document.createTextNode(child));
  } else if (child == null) {
  } else if (child.nodeType != null) {
    elt2.appendChild(child);
  } else if (Array.isArray(child)) {
    for (var i2 = 0; i2 < child.length; i2++) add(elt2, child[i2]);
  } else {
    throw new RangeError("Unsupported child node: " + child);
  }
}

// node_modules/@codemirror/search/dist/index.js
var basicNormalize = typeof String.prototype.normalize == "function" ? (x2) => x2.normalize("NFKD") : (x2) => x2;
var SearchCursor = class {
  /**
  Create a text cursor. The query is the search string, `from` to
  `to` provides the region to search.
  
  When `normalize` is given, it will be called, on both the query
  string and the content it is matched against, before comparing.
  You can, for example, create a case-insensitive search by
  passing `s => s.toLowerCase()`.
  
  Text is always normalized with
  [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
  (when supported).
  */
  constructor(text, query, from = 0, to2 = text.length, normalize, test) {
    this.test = test;
    this.value = { from: 0, to: 0 };
    this.done = false;
    this.matches = [];
    this.buffer = "";
    this.bufferPos = 0;
    this.iter = text.iterRange(from, to2);
    this.bufferStart = from;
    this.normalize = normalize ? (x2) => normalize(basicNormalize(x2)) : basicNormalize;
    this.query = this.normalize(query);
  }
  peek() {
    if (this.bufferPos == this.buffer.length) {
      this.bufferStart += this.buffer.length;
      this.iter.next();
      if (this.iter.done)
        return -1;
      this.bufferPos = 0;
      this.buffer = this.iter.value;
    }
    return codePointAt(this.buffer, this.bufferPos);
  }
  /**
  Look for the next match. Updates the iterator's
  [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
  [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
  at least once before using the cursor.
  */
  next() {
    while (this.matches.length)
      this.matches.pop();
    return this.nextOverlapping();
  }
  /**
  The `next` method will ignore matches that partially overlap a
  previous match. This method behaves like `next`, but includes
  such matches.
  */
  nextOverlapping() {
    for (; ; ) {
      let next = this.peek();
      if (next < 0) {
        this.done = true;
        return this;
      }
      let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;
      this.bufferPos += codePointSize(next);
      let norm = this.normalize(str);
      for (let i2 = 0, pos = start; ; i2++) {
        let code = norm.charCodeAt(i2);
        let match = this.match(code, pos, this.bufferPos + this.bufferStart);
        if (i2 == norm.length - 1) {
          if (match) {
            this.value = match;
            return this;
          }
          break;
        }
        if (pos == start && i2 < str.length && str.charCodeAt(i2) == code)
          pos++;
      }
    }
  }
  match(code, pos, end) {
    let match = null;
    for (let i2 = 0; i2 < this.matches.length; i2 += 2) {
      let index = this.matches[i2], keep = false;
      if (this.query.charCodeAt(index) == code) {
        if (index == this.query.length - 1) {
          match = { from: this.matches[i2 + 1], to: end };
        } else {
          this.matches[i2]++;
          keep = true;
        }
      }
      if (!keep) {
        this.matches.splice(i2, 2);
        i2 -= 2;
      }
    }
    if (this.query.charCodeAt(0) == code) {
      if (this.query.length == 1)
        match = { from: pos, to: end };
      else
        this.matches.push(1, pos);
    }
    if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferStart))
      match = null;
    return match;
  }
};
if (typeof Symbol != "undefined")
  SearchCursor.prototype[Symbol.iterator] = function() {
    return this;
  };
var empty = { from: -1, to: -1, match: /* @__PURE__ */ /.*/.exec("") };
var baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
var RegExpCursor = class {
  /**
  Create a cursor that will search the given range in the given
  document. `query` should be the raw pattern (as you'd pass it to
  `new RegExp`).
  */
  constructor(text, query, options, from = 0, to2 = text.length) {
    this.text = text;
    this.to = to2;
    this.curLine = "";
    this.done = false;
    this.value = empty;
    if (/\\[sWDnr]|\n|\r|\[\^/.test(query))
      return new MultilineRegExpCursor(text, query, options, from, to2);
    this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
    this.test = options === null || options === void 0 ? void 0 : options.test;
    this.iter = text.iter();
    let startLine = text.lineAt(from);
    this.curLineStart = startLine.from;
    this.matchPos = toCharEnd(text, from);
    this.getLine(this.curLineStart);
  }
  getLine(skip) {
    this.iter.next(skip);
    if (this.iter.lineBreak) {
      this.curLine = "";
    } else {
      this.curLine = this.iter.value;
      if (this.curLineStart + this.curLine.length > this.to)
        this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
      this.iter.next();
    }
  }
  nextLine() {
    this.curLineStart = this.curLineStart + this.curLine.length + 1;
    if (this.curLineStart > this.to)
      this.curLine = "";
    else
      this.getLine(0);
  }
  /**
  Move to the next match, if there is one.
  */
  next() {
    for (let off2 = this.matchPos - this.curLineStart; ; ) {
      this.re.lastIndex = off2;
      let match = this.matchPos <= this.to && this.re.exec(this.curLine);
      if (match) {
        let from = this.curLineStart + match.index, to2 = from + match[0].length;
        this.matchPos = toCharEnd(this.text, to2 + (from == to2 ? 1 : 0));
        if (from == this.curLineStart + this.curLine.length)
          this.nextLine();
        if ((from < to2 || from > this.value.to) && (!this.test || this.test(from, to2, match))) {
          this.value = { from, to: to2, match };
          return this;
        }
        off2 = this.matchPos - this.curLineStart;
      } else if (this.curLineStart + this.curLine.length < this.to) {
        this.nextLine();
        off2 = 0;
      } else {
        this.done = true;
        return this;
      }
    }
  }
};
var flattened = /* @__PURE__ */ new WeakMap();
var FlattenedDoc = class _FlattenedDoc {
  constructor(from, text) {
    this.from = from;
    this.text = text;
  }
  get to() {
    return this.from + this.text.length;
  }
  static get(doc2, from, to2) {
    let cached = flattened.get(doc2);
    if (!cached || cached.from >= to2 || cached.to <= from) {
      let flat = new _FlattenedDoc(from, doc2.sliceString(from, to2));
      flattened.set(doc2, flat);
      return flat;
    }
    if (cached.from == from && cached.to == to2)
      return cached;
    let { text, from: cachedFrom } = cached;
    if (cachedFrom > from) {
      text = doc2.sliceString(from, cachedFrom) + text;
      cachedFrom = from;
    }
    if (cached.to < to2)
      text += doc2.sliceString(cached.to, to2);
    flattened.set(doc2, new _FlattenedDoc(cachedFrom, text));
    return new _FlattenedDoc(from, text.slice(from - cachedFrom, to2 - cachedFrom));
  }
};
var MultilineRegExpCursor = class {
  constructor(text, query, options, from, to2) {
    this.text = text;
    this.to = to2;
    this.done = false;
    this.value = empty;
    this.matchPos = toCharEnd(text, from);
    this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
    this.test = options === null || options === void 0 ? void 0 : options.test;
    this.flat = FlattenedDoc.get(text, from, this.chunkEnd(
      from + 5e3
      /* Chunk.Base */
    ));
  }
  chunkEnd(pos) {
    return pos >= this.to ? this.to : this.text.lineAt(pos).to;
  }
  next() {
    for (; ; ) {
      let off2 = this.re.lastIndex = this.matchPos - this.flat.from;
      let match = this.re.exec(this.flat.text);
      if (match && !match[0] && match.index == off2) {
        this.re.lastIndex = off2 + 1;
        match = this.re.exec(this.flat.text);
      }
      if (match) {
        let from = this.flat.from + match.index, to2 = from + match[0].length;
        if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) && (!this.test || this.test(from, to2, match))) {
          this.value = { from, to: to2, match };
          this.matchPos = toCharEnd(this.text, to2 + (from == to2 ? 1 : 0));
          return this;
        }
      }
      if (this.flat.to == this.to) {
        this.done = true;
        return this;
      }
      this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
    }
  }
};
if (typeof Symbol != "undefined") {
  RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] = function() {
    return this;
  };
}
function validRegExp(source) {
  try {
    new RegExp(source, baseFlags);
    return true;
  } catch (_a3) {
    return false;
  }
}
function toCharEnd(text, pos) {
  if (pos >= text.length)
    return pos;
  let line = text.lineAt(pos), next;
  while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 56320 && next < 57344)
    pos++;
  return pos;
}
function createLineDialog(view) {
  let line = String(view.state.doc.lineAt(view.state.selection.main.head).number);
  let input = crelt("input", { class: "cm-textfield", name: "line", value: line });
  let dom = crelt("form", {
    class: "cm-gotoLine",
    onkeydown: (event) => {
      if (event.keyCode == 27) {
        event.preventDefault();
        view.dispatch({ effects: dialogEffect.of(false) });
        view.focus();
      } else if (event.keyCode == 13) {
        event.preventDefault();
        go2();
      }
    },
    onsubmit: (event) => {
      event.preventDefault();
      go2();
    }
  }, crelt("label", view.state.phrase("Go to line"), ": ", input), " ", crelt("button", { class: "cm-button", type: "submit" }, view.state.phrase("go")));
  function go2() {
    let match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
    if (!match)
      return;
    let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);
    let [, sign, ln2, cl2, percent2] = match;
    let col = cl2 ? +cl2.slice(1) : 0;
    let line2 = ln2 ? +ln2 : startLine.number;
    if (ln2 && percent2) {
      let pc2 = line2 / 100;
      if (sign)
        pc2 = pc2 * (sign == "-" ? -1 : 1) + startLine.number / state.doc.lines;
      line2 = Math.round(state.doc.lines * pc2);
    } else if (ln2 && sign) {
      line2 = line2 * (sign == "-" ? -1 : 1) + startLine.number;
    }
    let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line2)));
    let selection = EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length)));
    view.dispatch({
      effects: [dialogEffect.of(false), EditorView.scrollIntoView(selection.from, { y: "center" })],
      selection
    });
    view.focus();
  }
  return { dom };
}
var dialogEffect = /* @__PURE__ */ StateEffect.define();
var dialogField = /* @__PURE__ */ StateField.define({
  create() {
    return true;
  },
  update(value, tr2) {
    for (let e25 of tr2.effects)
      if (e25.is(dialogEffect))
        value = e25.value;
    return value;
  },
  provide: (f2) => showPanel.from(f2, (val) => val ? createLineDialog : null)
});
var gotoLine = (view) => {
  let panel = getPanel(view, createLineDialog);
  if (!panel) {
    let effects = [dialogEffect.of(true)];
    if (view.state.field(dialogField, false) == null)
      effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$13]));
    view.dispatch({ effects });
    panel = getPanel(view, createLineDialog);
  }
  if (panel)
    panel.dom.querySelector("input").select();
  return true;
};
var baseTheme$13 = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-panel.cm-gotoLine": {
    padding: "2px 6px 4px",
    "& label": { fontSize: "80%" }
  }
});
var defaultHighlightOptions = {
  highlightWordAroundCursor: false,
  minSelectionLength: 1,
  maxMatches: 100,
  wholeWords: false
};
var highlightConfig = /* @__PURE__ */ Facet.define({
  combine(options) {
    return combineConfig(options, defaultHighlightOptions, {
      highlightWordAroundCursor: (a2, b2) => a2 || b2,
      minSelectionLength: Math.min,
      maxMatches: Math.min
    });
  }
});
function highlightSelectionMatches(options) {
  let ext = [defaultTheme, matchHighlighter];
  if (options)
    ext.push(highlightConfig.of(options));
  return ext;
}
var matchDeco = /* @__PURE__ */ Decoration.mark({ class: "cm-selectionMatch" });
var mainMatchDeco = /* @__PURE__ */ Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
function insideWordBoundaries(check, state, from, to2) {
  return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) && (to2 == state.doc.length || check(state.sliceDoc(to2, to2 + 1)) != CharCategory.Word);
}
function insideWord(check, state, from, to2) {
  return check(state.sliceDoc(from, from + 1)) == CharCategory.Word && check(state.sliceDoc(to2 - 1, to2)) == CharCategory.Word;
}
var matchHighlighter = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.decorations = this.getDeco(view);
  }
  update(update) {
    if (update.selectionSet || update.docChanged || update.viewportChanged)
      this.decorations = this.getDeco(update.view);
  }
  getDeco(view) {
    let conf = view.state.facet(highlightConfig);
    let { state } = view, sel = state.selection;
    if (sel.ranges.length > 1)
      return Decoration.none;
    let range = sel.main, query, check = null;
    if (range.empty) {
      if (!conf.highlightWordAroundCursor)
        return Decoration.none;
      let word = state.wordAt(range.head);
      if (!word)
        return Decoration.none;
      check = state.charCategorizer(range.head);
      query = state.sliceDoc(word.from, word.to);
    } else {
      let len = range.to - range.from;
      if (len < conf.minSelectionLength || len > 200)
        return Decoration.none;
      if (conf.wholeWords) {
        query = state.sliceDoc(range.from, range.to);
        check = state.charCategorizer(range.head);
        if (!(insideWordBoundaries(check, state, range.from, range.to) && insideWord(check, state, range.from, range.to)))
          return Decoration.none;
      } else {
        query = state.sliceDoc(range.from, range.to);
        if (!query)
          return Decoration.none;
      }
    }
    let deco = [];
    for (let part of view.visibleRanges) {
      let cursor = new SearchCursor(state.doc, query, part.from, part.to);
      while (!cursor.next().done) {
        let { from, to: to2 } = cursor.value;
        if (!check || insideWordBoundaries(check, state, from, to2)) {
          if (range.empty && from <= range.from && to2 >= range.to)
            deco.push(mainMatchDeco.range(from, to2));
          else if (from >= range.to || to2 <= range.from)
            deco.push(matchDeco.range(from, to2));
          if (deco.length > conf.maxMatches)
            return Decoration.none;
        }
      }
    }
    return Decoration.set(deco);
  }
}, {
  decorations: (v2) => v2.decorations
});
var defaultTheme = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
  ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
});
var selectWord = ({ state, dispatch }) => {
  let { selection } = state;
  let newSel = EditorSelection.create(selection.ranges.map((range) => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);
  if (newSel.eq(selection))
    return false;
  dispatch(state.update({ selection: newSel }));
  return true;
};
function findNextOccurrence(state, query) {
  let { main, ranges } = state.selection;
  let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;
  for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to); ; ) {
    cursor.next();
    if (cursor.done) {
      if (cycled)
        return null;
      cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
      cycled = true;
    } else {
      if (cycled && ranges.some((r2) => r2.from == cursor.value.from))
        continue;
      if (fullWord) {
        let word2 = state.wordAt(cursor.value.from);
        if (!word2 || word2.from != cursor.value.from || word2.to != cursor.value.to)
          continue;
      }
      return cursor.value;
    }
  }
}
var selectNextOccurrence = ({ state, dispatch }) => {
  let { ranges } = state.selection;
  if (ranges.some((sel) => sel.from === sel.to))
    return selectWord({ state, dispatch });
  let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
  if (state.selection.ranges.some((r2) => state.sliceDoc(r2.from, r2.to) != searchedText))
    return false;
  let range = findNextOccurrence(state, searchedText);
  if (!range)
    return false;
  dispatch(state.update({
    selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),
    effects: EditorView.scrollIntoView(range.to)
  }));
  return true;
};
var searchConfigFacet = /* @__PURE__ */ Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      top: false,
      caseSensitive: false,
      literal: false,
      regexp: false,
      wholeWord: false,
      createPanel: (view) => new SearchPanel(view),
      scrollToMatch: (range) => EditorView.scrollIntoView(range)
    });
  }
});
var SearchQuery = class {
  /**
  Create a query object.
  */
  constructor(config2) {
    this.search = config2.search;
    this.caseSensitive = !!config2.caseSensitive;
    this.literal = !!config2.literal;
    this.regexp = !!config2.regexp;
    this.replace = config2.replace || "";
    this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
    this.unquoted = this.unquote(this.search);
    this.wholeWord = !!config2.wholeWord;
  }
  /**
  @internal
  */
  unquote(text) {
    return this.literal ? text : text.replace(/\\([nrt\\])/g, (_2, ch2) => ch2 == "n" ? "\n" : ch2 == "r" ? "\r" : ch2 == "t" ? "	" : "\\");
  }
  /**
  Compare this query to another query.
  */
  eq(other) {
    return this.search == other.search && this.replace == other.replace && this.caseSensitive == other.caseSensitive && this.regexp == other.regexp && this.wholeWord == other.wholeWord;
  }
  /**
  @internal
  */
  create() {
    return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
  }
  /**
  Get a search cursor for this query, searching through the given
  range in the given state.
  */
  getCursor(state, from = 0, to2) {
    let st2 = state.doc ? state : EditorState.create({ doc: state });
    if (to2 == null)
      to2 = st2.doc.length;
    return this.regexp ? regexpCursor(this, st2, from, to2) : stringCursor(this, st2, from, to2);
  }
};
var QueryType2 = class {
  constructor(spec) {
    this.spec = spec;
  }
};
function stringCursor(spec, state, from, to2) {
  return new SearchCursor(state.doc, spec.unquoted, from, to2, spec.caseSensitive ? void 0 : (x2) => x2.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : void 0);
}
function stringWordTest(doc2, categorizer) {
  return (from, to2, buf, bufPos) => {
    if (bufPos > from || bufPos + buf.length < to2) {
      bufPos = Math.max(0, from - 2);
      buf = doc2.sliceString(bufPos, Math.min(doc2.length, to2 + 2));
    }
    return (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word || categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word) && (categorizer(charAfter(buf, to2 - bufPos)) != CharCategory.Word || categorizer(charBefore(buf, to2 - bufPos)) != CharCategory.Word);
  };
}
var StringQuery = class extends QueryType2 {
  constructor(spec) {
    super(spec);
  }
  nextMatch(state, curFrom, curTo) {
    let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();
    if (cursor.done)
      cursor = stringCursor(this.spec, state, 0, curFrom).nextOverlapping();
    return cursor.done ? null : cursor.value;
  }
  // Searching in reverse is, rather than implementing an inverted search
  // cursor, done by scanning chunk after chunk forward.
  prevMatchInRange(state, from, to2) {
    for (let pos = to2; ; ) {
      let start = Math.max(from, pos - 1e4 - this.spec.unquoted.length);
      let cursor = stringCursor(this.spec, state, start, pos), range = null;
      while (!cursor.nextOverlapping().done)
        range = cursor.value;
      if (range)
        return range;
      if (start == from)
        return null;
      pos -= 1e4;
    }
  }
  prevMatch(state, curFrom, curTo) {
    return this.prevMatchInRange(state, 0, curFrom) || this.prevMatchInRange(state, curTo, state.doc.length);
  }
  getReplacement(_result) {
    return this.spec.unquote(this.spec.replace);
  }
  matchAll(state, limit) {
    let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];
    while (!cursor.next().done) {
      if (ranges.length >= limit)
        return null;
      ranges.push(cursor.value);
    }
    return ranges;
  }
  highlight(state, from, to2, add2) {
    let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to2 + this.spec.unquoted.length, state.doc.length));
    while (!cursor.next().done)
      add2(cursor.value.from, cursor.value.to);
  }
};
function regexpCursor(spec, state, from, to2) {
  return new RegExpCursor(state.doc, spec.search, {
    ignoreCase: !spec.caseSensitive,
    test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : void 0
  }, from, to2);
}
function charBefore(str, index) {
  return str.slice(findClusterBreak(str, index, false), index);
}
function charAfter(str, index) {
  return str.slice(index, findClusterBreak(str, index));
}
function regexpWordTest(categorizer) {
  return (_from, _to, match) => !match[0].length || (categorizer(charBefore(match.input, match.index)) != CharCategory.Word || categorizer(charAfter(match.input, match.index)) != CharCategory.Word) && (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word || categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);
}
var RegExpQuery = class extends QueryType2 {
  nextMatch(state, curFrom, curTo) {
    let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();
    if (cursor.done)
      cursor = regexpCursor(this.spec, state, 0, curFrom).next();
    return cursor.done ? null : cursor.value;
  }
  prevMatchInRange(state, from, to2) {
    for (let size = 1; ; size++) {
      let start = Math.max(
        from,
        to2 - size * 1e4
        /* FindPrev.ChunkSize */
      );
      let cursor = regexpCursor(this.spec, state, start, to2), range = null;
      while (!cursor.next().done)
        range = cursor.value;
      if (range && (start == from || range.from > start + 10))
        return range;
      if (start == from)
        return null;
    }
  }
  prevMatch(state, curFrom, curTo) {
    return this.prevMatchInRange(state, 0, curFrom) || this.prevMatchInRange(state, curTo, state.doc.length);
  }
  getReplacement(result) {
    return this.spec.unquote(this.spec.replace).replace(/\$([$&\d+])/g, (m2, i2) => i2 == "$" ? "$" : i2 == "&" ? result.match[0] : i2 != "0" && +i2 < result.match.length ? result.match[i2] : m2);
  }
  matchAll(state, limit) {
    let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];
    while (!cursor.next().done) {
      if (ranges.length >= limit)
        return null;
      ranges.push(cursor.value);
    }
    return ranges;
  }
  highlight(state, from, to2, add2) {
    let cursor = regexpCursor(this.spec, state, Math.max(
      0,
      from - 250
      /* RegExp.HighlightMargin */
    ), Math.min(to2 + 250, state.doc.length));
    while (!cursor.next().done)
      add2(cursor.value.from, cursor.value.to);
  }
};
var setSearchQuery = /* @__PURE__ */ StateEffect.define();
var togglePanel = /* @__PURE__ */ StateEffect.define();
var searchState = /* @__PURE__ */ StateField.define({
  create(state) {
    return new SearchState(defaultQuery(state).create(), null);
  },
  update(value, tr2) {
    for (let effect of tr2.effects) {
      if (effect.is(setSearchQuery))
        value = new SearchState(effect.value.create(), value.panel);
      else if (effect.is(togglePanel))
        value = new SearchState(value.query, effect.value ? createSearchPanel : null);
    }
    return value;
  },
  provide: (f2) => showPanel.from(f2, (val) => val.panel)
});
var SearchState = class {
  constructor(query, panel) {
    this.query = query;
    this.panel = panel;
  }
};
var matchMark = /* @__PURE__ */ Decoration.mark({ class: "cm-searchMatch" });
var selectedMatchMark = /* @__PURE__ */ Decoration.mark({ class: "cm-searchMatch cm-searchMatch-selected" });
var searchHighlighter = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.decorations = this.highlight(view.state.field(searchState));
  }
  update(update) {
    let state = update.state.field(searchState);
    if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)
      this.decorations = this.highlight(state);
  }
  highlight({ query, panel }) {
    if (!panel || !query.spec.valid)
      return Decoration.none;
    let { view } = this;
    let builder = new RangeSetBuilder();
    for (let i2 = 0, ranges = view.visibleRanges, l2 = ranges.length; i2 < l2; i2++) {
      let { from, to: to2 } = ranges[i2];
      while (i2 < l2 - 1 && to2 > ranges[i2 + 1].from - 2 * 250)
        to2 = ranges[++i2].to;
      query.highlight(view.state, from, to2, (from2, to3) => {
        let selected = view.state.selection.ranges.some((r2) => r2.from == from2 && r2.to == to3);
        builder.add(from2, to3, selected ? selectedMatchMark : matchMark);
      });
    }
    return builder.finish();
  }
}, {
  decorations: (v2) => v2.decorations
});
function searchCommand(f2) {
  return (view) => {
    let state = view.state.field(searchState, false);
    return state && state.query.spec.valid ? f2(view, state) : openSearchPanel(view);
  };
}
var findNext = /* @__PURE__ */ searchCommand((view, { query }) => {
  let { to: to2 } = view.state.selection.main;
  let next = query.nextMatch(view.state, to2, to2);
  if (!next)
    return false;
  let selection = EditorSelection.single(next.from, next.to);
  let config2 = view.state.facet(searchConfigFacet);
  view.dispatch({
    selection,
    effects: [announceMatch(view, next), config2.scrollToMatch(selection.main, view)],
    userEvent: "select.search"
  });
  selectSearchInput(view);
  return true;
});
var findPrevious = /* @__PURE__ */ searchCommand((view, { query }) => {
  let { state } = view, { from } = state.selection.main;
  let prev = query.prevMatch(state, from, from);
  if (!prev)
    return false;
  let selection = EditorSelection.single(prev.from, prev.to);
  let config2 = view.state.facet(searchConfigFacet);
  view.dispatch({
    selection,
    effects: [announceMatch(view, prev), config2.scrollToMatch(selection.main, view)],
    userEvent: "select.search"
  });
  selectSearchInput(view);
  return true;
});
var selectMatches = /* @__PURE__ */ searchCommand((view, { query }) => {
  let ranges = query.matchAll(view.state, 1e3);
  if (!ranges || !ranges.length)
    return false;
  view.dispatch({
    selection: EditorSelection.create(ranges.map((r2) => EditorSelection.range(r2.from, r2.to))),
    userEvent: "select.search.matches"
  });
  return true;
});
var selectSelectionMatches = ({ state, dispatch }) => {
  let sel = state.selection;
  if (sel.ranges.length > 1 || sel.main.empty)
    return false;
  let { from, to: to2 } = sel.main;
  let ranges = [], main = 0;
  for (let cur2 = new SearchCursor(state.doc, state.sliceDoc(from, to2)); !cur2.next().done; ) {
    if (ranges.length > 1e3)
      return false;
    if (cur2.value.from == from)
      main = ranges.length;
    ranges.push(EditorSelection.range(cur2.value.from, cur2.value.to));
  }
  dispatch(state.update({
    selection: EditorSelection.create(ranges, main),
    userEvent: "select.search.matches"
  }));
  return true;
};
var replaceNext = /* @__PURE__ */ searchCommand((view, { query }) => {
  let { state } = view, { from, to: to2 } = state.selection.main;
  if (state.readOnly)
    return false;
  let next = query.nextMatch(state, from, from);
  if (!next)
    return false;
  let changes = [], selection, replacement;
  let effects = [];
  if (next.from == from && next.to == to2) {
    replacement = state.toText(query.getReplacement(next));
    changes.push({ from: next.from, to: next.to, insert: replacement });
    next = query.nextMatch(state, next.from, next.to);
    effects.push(EditorView.announce.of(state.phrase("replaced match on line $", state.doc.lineAt(from).number) + "."));
  }
  if (next) {
    let off2 = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;
    selection = EditorSelection.single(next.from - off2, next.to - off2);
    effects.push(announceMatch(view, next));
    effects.push(state.facet(searchConfigFacet).scrollToMatch(selection.main, view));
  }
  view.dispatch({
    changes,
    selection,
    effects,
    userEvent: "input.replace"
  });
  return true;
});
var replaceAll = /* @__PURE__ */ searchCommand((view, { query }) => {
  if (view.state.readOnly)
    return false;
  let changes = query.matchAll(view.state, 1e9).map((match) => {
    let { from, to: to2 } = match;
    return { from, to: to2, insert: query.getReplacement(match) };
  });
  if (!changes.length)
    return false;
  let announceText = view.state.phrase("replaced $ matches", changes.length) + ".";
  view.dispatch({
    changes,
    effects: EditorView.announce.of(announceText),
    userEvent: "input.replace.all"
  });
  return true;
});
function createSearchPanel(view) {
  return view.state.facet(searchConfigFacet).createPanel(view);
}
function defaultQuery(state, fallback) {
  var _a3, _b2, _c2, _d2, _e2;
  let sel = state.selection.main;
  let selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
  if (fallback && !selText)
    return fallback;
  let config2 = state.facet(searchConfigFacet);
  return new SearchQuery({
    search: ((_a3 = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a3 !== void 0 ? _a3 : config2.literal) ? selText : selText.replace(/\n/g, "\\n"),
    caseSensitive: (_b2 = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b2 !== void 0 ? _b2 : config2.caseSensitive,
    literal: (_c2 = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c2 !== void 0 ? _c2 : config2.literal,
    regexp: (_d2 = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d2 !== void 0 ? _d2 : config2.regexp,
    wholeWord: (_e2 = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e2 !== void 0 ? _e2 : config2.wholeWord
  });
}
function getSearchInput(view) {
  let panel = getPanel(view, createSearchPanel);
  return panel && panel.dom.querySelector("[main-field]");
}
function selectSearchInput(view) {
  let input = getSearchInput(view);
  if (input && input == view.root.activeElement)
    input.select();
}
var openSearchPanel = (view) => {
  let state = view.state.field(searchState, false);
  if (state && state.panel) {
    let searchInput = getSearchInput(view);
    if (searchInput && searchInput != view.root.activeElement) {
      let query = defaultQuery(view.state, state.query.spec);
      if (query.valid)
        view.dispatch({ effects: setSearchQuery.of(query) });
      searchInput.focus();
      searchInput.select();
    }
  } else {
    view.dispatch({ effects: [
      togglePanel.of(true),
      state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)
    ] });
  }
  return true;
};
var closeSearchPanel = (view) => {
  let state = view.state.field(searchState, false);
  if (!state || !state.panel)
    return false;
  let panel = getPanel(view, createSearchPanel);
  if (panel && panel.dom.contains(view.root.activeElement))
    view.focus();
  view.dispatch({ effects: togglePanel.of(false) });
  return true;
};
var searchKeymap = [
  { key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
  { key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
  { key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
  { key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
  { key: "Mod-Shift-l", run: selectSelectionMatches },
  { key: "Mod-Alt-g", run: gotoLine },
  { key: "Mod-d", run: selectNextOccurrence, preventDefault: true }
];
var SearchPanel = class {
  constructor(view) {
    this.view = view;
    let query = this.query = view.state.field(searchState).query.spec;
    this.commit = this.commit.bind(this);
    this.searchField = crelt("input", {
      value: query.search,
      placeholder: phrase(view, "Find"),
      "aria-label": phrase(view, "Find"),
      class: "cm-textfield",
      name: "search",
      form: "",
      "main-field": "true",
      onchange: this.commit,
      onkeyup: this.commit
    });
    this.replaceField = crelt("input", {
      value: query.replace,
      placeholder: phrase(view, "Replace"),
      "aria-label": phrase(view, "Replace"),
      class: "cm-textfield",
      name: "replace",
      form: "",
      onchange: this.commit,
      onkeyup: this.commit
    });
    this.caseField = crelt("input", {
      type: "checkbox",
      name: "case",
      form: "",
      checked: query.caseSensitive,
      onchange: this.commit
    });
    this.reField = crelt("input", {
      type: "checkbox",
      name: "re",
      form: "",
      checked: query.regexp,
      onchange: this.commit
    });
    this.wordField = crelt("input", {
      type: "checkbox",
      name: "word",
      form: "",
      checked: query.wholeWord,
      onchange: this.commit
    });
    function button(name2, onclick, content2) {
      return crelt("button", { class: "cm-button", name: name2, onclick, type: "button" }, content2);
    }
    this.dom = crelt("div", { onkeydown: (e25) => this.keydown(e25), class: "cm-search" }, [
      this.searchField,
      button("next", () => findNext(view), [phrase(view, "next")]),
      button("prev", () => findPrevious(view), [phrase(view, "previous")]),
      button("select", () => selectMatches(view), [phrase(view, "all")]),
      crelt("label", null, [this.caseField, phrase(view, "match case")]),
      crelt("label", null, [this.reField, phrase(view, "regexp")]),
      crelt("label", null, [this.wordField, phrase(view, "by word")]),
      ...view.state.readOnly ? [] : [
        crelt("br"),
        this.replaceField,
        button("replace", () => replaceNext(view), [phrase(view, "replace")]),
        button("replaceAll", () => replaceAll(view), [phrase(view, "replace all")])
      ],
      crelt("button", {
        name: "close",
        onclick: () => closeSearchPanel(view),
        "aria-label": phrase(view, "close"),
        type: "button"
      }, ["\xD7"])
    ]);
  }
  commit() {
    let query = new SearchQuery({
      search: this.searchField.value,
      caseSensitive: this.caseField.checked,
      regexp: this.reField.checked,
      wholeWord: this.wordField.checked,
      replace: this.replaceField.value
    });
    if (!query.eq(this.query)) {
      this.query = query;
      this.view.dispatch({ effects: setSearchQuery.of(query) });
    }
  }
  keydown(e25) {
    if (runScopeHandlers(this.view, e25, "search-panel")) {
      e25.preventDefault();
    } else if (e25.keyCode == 13 && e25.target == this.searchField) {
      e25.preventDefault();
      (e25.shiftKey ? findPrevious : findNext)(this.view);
    } else if (e25.keyCode == 13 && e25.target == this.replaceField) {
      e25.preventDefault();
      replaceNext(this.view);
    }
  }
  update(update) {
    for (let tr2 of update.transactions)
      for (let effect of tr2.effects) {
        if (effect.is(setSearchQuery) && !effect.value.eq(this.query))
          this.setQuery(effect.value);
      }
  }
  setQuery(query) {
    this.query = query;
    this.searchField.value = query.search;
    this.replaceField.value = query.replace;
    this.caseField.checked = query.caseSensitive;
    this.reField.checked = query.regexp;
    this.wordField.checked = query.wholeWord;
  }
  mount() {
    this.searchField.select();
  }
  get pos() {
    return 80;
  }
  get top() {
    return this.view.state.facet(searchConfigFacet).top;
  }
};
function phrase(view, phrase2) {
  return view.state.phrase(phrase2);
}
var AnnounceMargin = 30;
var Break = /[\s\.,:;?!]/;
function announceMatch(view, { from, to: to2 }) {
  let line = view.state.doc.lineAt(from), lineEnd2 = view.state.doc.lineAt(to2).to;
  let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd2, to2 + AnnounceMargin);
  let text = view.state.sliceDoc(start, end);
  if (start != line.from) {
    for (let i2 = 0; i2 < AnnounceMargin; i2++)
      if (!Break.test(text[i2 + 1]) && Break.test(text[i2])) {
        text = text.slice(i2);
        break;
      }
  }
  if (end != lineEnd2) {
    for (let i2 = text.length - 1; i2 > text.length - AnnounceMargin; i2--)
      if (!Break.test(text[i2 - 1]) && Break.test(text[i2])) {
        text = text.slice(0, i2);
        break;
      }
  }
  return EditorView.announce.of(`${view.state.phrase("current match")}. ${text} ${view.state.phrase("on line")} ${line.number}.`);
}
var baseTheme3 = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-panel.cm-search": {
    padding: "2px 6px 4px",
    position: "relative",
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    },
    "& input, & button, & label": {
      margin: ".2em .6em .2em 0"
    },
    "& input[type=checkbox]": {
      marginRight: ".2em"
    },
    "& label": {
      fontSize: "80%",
      whiteSpace: "pre"
    }
  },
  "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
  "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
  "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
  "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
});
var searchExtensions = [
  searchState,
  /* @__PURE__ */ Prec.low(searchHighlighter),
  baseTheme3
];

// node_modules/@codemirror/autocomplete/dist/index.js
var CompletionContext = class {
  /**
  Create a new completion context. (Mostly useful for testing
  completion sources—in the editor, the extension will create
  these for you.)
  */
  constructor(state, pos, explicit, view) {
    this.state = state;
    this.pos = pos;
    this.explicit = explicit;
    this.view = view;
    this.abortListeners = [];
  }
  /**
  Get the extent, content, and (if there is a token) type of the
  token before `this.pos`.
  */
  tokenBefore(types2) {
    let token = syntaxTree(this.state).resolveInner(this.pos, -1);
    while (token && types2.indexOf(token.name) < 0)
      token = token.parent;
    return token ? {
      from: token.from,
      to: this.pos,
      text: this.state.sliceDoc(token.from, this.pos),
      type: token.type
    } : null;
  }
  /**
  Get the match of the given expression directly before the
  cursor.
  */
  matchBefore(expr) {
    let line = this.state.doc.lineAt(this.pos);
    let start = Math.max(line.from, this.pos - 250);
    let str = line.text.slice(start - line.from, this.pos - line.from);
    let found = str.search(ensureAnchor(expr, false));
    return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
  }
  /**
  Yields true when the query has been aborted. Can be useful in
  asynchronous queries to avoid doing work that will be ignored.
  */
  get aborted() {
    return this.abortListeners == null;
  }
  /**
  Allows you to register abort handlers, which will be called when
  the query is
  [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
  */
  addEventListener(type, listener) {
    if (type == "abort" && this.abortListeners)
      this.abortListeners.push(listener);
  }
};
function toSet(chars) {
  let flat = Object.keys(chars).join("");
  let words = /\w/.test(flat);
  if (words)
    flat = flat.replace(/\w/g, "");
  return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
}
function prefixMatch(options) {
  let first = /* @__PURE__ */ Object.create(null), rest = /* @__PURE__ */ Object.create(null);
  for (let { label } of options) {
    first[label[0]] = true;
    for (let i2 = 1; i2 < label.length; i2++)
      rest[label[i2]] = true;
  }
  let source = toSet(first) + toSet(rest) + "*$";
  return [new RegExp("^" + source), new RegExp(source)];
}
function completeFromList(list) {
  let options = list.map((o2) => typeof o2 == "string" ? { label: o2 } : o2);
  let [validFor, match] = options.every((o2) => /^\w+$/.test(o2.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
  return (context) => {
    let token = context.matchBefore(match);
    return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;
  };
}
function ifNotIn(nodes, source) {
  return (context) => {
    for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {
      if (nodes.indexOf(pos.name) > -1)
        return null;
      if (pos.type.isTop)
        break;
    }
    return source(context);
  };
}
var Option = class {
  constructor(completion, source, match, score2) {
    this.completion = completion;
    this.source = source;
    this.match = match;
    this.score = score2;
  }
};
function cur(state) {
  return state.selection.main.from;
}
function ensureAnchor(expr, start) {
  var _a3;
  let { source } = expr;
  let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
  if (!addStart && !addEnd)
    return expr;
  return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a3 = expr.flags) !== null && _a3 !== void 0 ? _a3 : expr.ignoreCase ? "i" : "");
}
var pickedCompletion = /* @__PURE__ */ Annotation.define();
function insertCompletionText(state, text, from, to2) {
  let { main } = state.selection, fromOff = from - main.from, toOff = to2 - main.from;
  return Object.assign(Object.assign({}, state.changeByRange((range) => {
    if (range != main && from != to2 && state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from, to2))
      return { range };
    return {
      changes: { from: range.from + fromOff, to: to2 == main.from ? range.to : range.from + toOff, insert: text },
      range: EditorSelection.cursor(range.from + fromOff + text.length)
    };
  })), { scrollIntoView: true, userEvent: "input.complete" });
}
var SourceCache = /* @__PURE__ */ new WeakMap();
function asSource(source) {
  if (!Array.isArray(source))
    return source;
  let known = SourceCache.get(source);
  if (!known)
    SourceCache.set(source, known = completeFromList(source));
  return known;
}
var startCompletionEffect = /* @__PURE__ */ StateEffect.define();
var closeCompletionEffect = /* @__PURE__ */ StateEffect.define();
var FuzzyMatcher = class {
  constructor(pattern) {
    this.pattern = pattern;
    this.chars = [];
    this.folded = [];
    this.any = [];
    this.precise = [];
    this.byWord = [];
    this.score = 0;
    this.matched = [];
    for (let p2 = 0; p2 < pattern.length; ) {
      let char = codePointAt(pattern, p2), size = codePointSize(char);
      this.chars.push(char);
      let part = pattern.slice(p2, p2 + size), upper = part.toUpperCase();
      this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
      p2 += size;
    }
    this.astral = pattern.length != this.chars.length;
  }
  ret(score2, matched) {
    this.score = score2;
    this.matched = matched;
    return this;
  }
  // Matches a given word (completion) against the pattern (input).
  // Will return a boolean indicating whether there was a match and,
  // on success, set `this.score` to the score, `this.matched` to an
  // array of `from, to` pairs indicating the matched parts of `word`.
  //
  // The score is a number that is more negative the worse the match
  // is. See `Penalty` above.
  match(word) {
    if (this.pattern.length == 0)
      return this.ret(-100, []);
    if (word.length < this.pattern.length)
      return null;
    let { chars, folded, any, precise, byWord } = this;
    if (chars.length == 1) {
      let first = codePointAt(word, 0), firstSize = codePointSize(first);
      let score2 = firstSize == word.length ? 0 : -100;
      if (first == chars[0]) ;
      else if (first == folded[0])
        score2 += -200;
      else
        return null;
      return this.ret(score2, [0, firstSize]);
    }
    let direct = word.indexOf(this.pattern);
    if (direct == 0)
      return this.ret(word.length == this.pattern.length ? 0 : -100, [0, this.pattern.length]);
    let len = chars.length, anyTo = 0;
    if (direct < 0) {
      for (let i2 = 0, e25 = Math.min(word.length, 200); i2 < e25 && anyTo < len; ) {
        let next = codePointAt(word, i2);
        if (next == chars[anyTo] || next == folded[anyTo])
          any[anyTo++] = i2;
        i2 += codePointSize(next);
      }
      if (anyTo < len)
        return null;
    }
    let preciseTo = 0;
    let byWordTo = 0, byWordFolded = false;
    let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
    let hasLower = /[a-z]/.test(word), wordAdjacent = true;
    for (let i2 = 0, e25 = Math.min(word.length, 200), prevType = 0; i2 < e25 && byWordTo < len; ) {
      let next = codePointAt(word, i2);
      if (direct < 0) {
        if (preciseTo < len && next == chars[preciseTo])
          precise[preciseTo++] = i2;
        if (adjacentTo < len) {
          if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
            if (adjacentTo == 0)
              adjacentStart = i2;
            adjacentEnd = i2 + 1;
            adjacentTo++;
          } else {
            adjacentTo = 0;
          }
        }
      }
      let ch2, type = next < 255 ? next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 : next >= 65 && next <= 90 ? 1 : 0 : (ch2 = fromCodePoint(next)) != ch2.toLowerCase() ? 1 : ch2 != ch2.toUpperCase() ? 2 : 0;
      if (!i2 || type == 1 && hasLower || prevType == 0 && type != 0) {
        if (chars[byWordTo] == next || folded[byWordTo] == next && (byWordFolded = true))
          byWord[byWordTo++] = i2;
        else if (byWord.length)
          wordAdjacent = false;
      }
      prevType = type;
      i2 += codePointSize(next);
    }
    if (byWordTo == len && byWord[0] == 0 && wordAdjacent)
      return this.result(-100 + (byWordFolded ? -200 : 0), byWord, word);
    if (adjacentTo == len && adjacentStart == 0)
      return this.ret(-200 - word.length + (adjacentEnd == word.length ? 0 : -100), [0, adjacentEnd]);
    if (direct > -1)
      return this.ret(-700 - word.length, [direct, direct + this.pattern.length]);
    if (adjacentTo == len)
      return this.ret(-200 + -700 - word.length, [adjacentStart, adjacentEnd]);
    if (byWordTo == len)
      return this.result(-100 + (byWordFolded ? -200 : 0) + -700 + (wordAdjacent ? 0 : -1100), byWord, word);
    return chars.length == 2 ? null : this.result((any[0] ? -700 : 0) + -200 + -1100, any, word);
  }
  result(score2, positions, word) {
    let result = [], i2 = 0;
    for (let pos of positions) {
      let to2 = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
      if (i2 && result[i2 - 1] == pos)
        result[i2 - 1] = to2;
      else {
        result[i2++] = pos;
        result[i2++] = to2;
      }
    }
    return this.ret(score2 - word.length, result);
  }
};
var StrictMatcher = class {
  constructor(pattern) {
    this.pattern = pattern;
    this.matched = [];
    this.score = 0;
    this.folded = pattern.toLowerCase();
  }
  match(word) {
    if (word.length < this.pattern.length)
      return null;
    let start = word.slice(0, this.pattern.length);
    let match = start == this.pattern ? 0 : start.toLowerCase() == this.folded ? -200 : null;
    if (match == null)
      return null;
    this.matched = [0, start.length];
    this.score = match + (word.length == this.pattern.length ? 0 : -100);
    return this;
  }
};
var completionConfig = /* @__PURE__ */ Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      activateOnTyping: true,
      activateOnCompletion: () => false,
      activateOnTypingDelay: 100,
      selectOnOpen: true,
      override: null,
      closeOnBlur: true,
      maxRenderedOptions: 100,
      defaultKeymap: true,
      tooltipClass: () => "",
      optionClass: () => "",
      aboveCursor: false,
      icons: true,
      addToOptions: [],
      positionInfo: defaultPositionInfo,
      filterStrict: false,
      compareCompletions: (a2, b2) => a2.label.localeCompare(b2.label),
      interactionDelay: 75,
      updateSyncTime: 100
    }, {
      defaultKeymap: (a2, b2) => a2 && b2,
      closeOnBlur: (a2, b2) => a2 && b2,
      icons: (a2, b2) => a2 && b2,
      tooltipClass: (a2, b2) => (c2) => joinClass(a2(c2), b2(c2)),
      optionClass: (a2, b2) => (c2) => joinClass(a2(c2), b2(c2)),
      addToOptions: (a2, b2) => a2.concat(b2),
      filterStrict: (a2, b2) => a2 || b2
    });
  }
});
function joinClass(a2, b2) {
  return a2 ? b2 ? a2 + " " + b2 : a2 : b2;
}
function defaultPositionInfo(view, list, option, info, space4, tooltip) {
  let rtl = view.textDirection == Direction.RTL, left = rtl, narrow = false;
  let side = "top", offset, maxWidth;
  let spaceLeft = list.left - space4.left, spaceRight = space4.right - list.right;
  let infoWidth = info.right - info.left, infoHeight = info.bottom - info.top;
  if (left && spaceLeft < Math.min(infoWidth, spaceRight))
    left = false;
  else if (!left && spaceRight < Math.min(infoWidth, spaceLeft))
    left = true;
  if (infoWidth <= (left ? spaceLeft : spaceRight)) {
    offset = Math.max(space4.top, Math.min(option.top, space4.bottom - infoHeight)) - list.top;
    maxWidth = Math.min(400, left ? spaceLeft : spaceRight);
  } else {
    narrow = true;
    maxWidth = Math.min(
      400,
      (rtl ? list.right : space4.right - list.left) - 30
      /* Info.Margin */
    );
    let spaceBelow = space4.bottom - list.bottom;
    if (spaceBelow >= infoHeight || spaceBelow > list.top) {
      offset = option.bottom - list.top;
    } else {
      side = "bottom";
      offset = list.bottom - option.top;
    }
  }
  let scaleY = (list.bottom - list.top) / tooltip.offsetHeight;
  let scaleX = (list.right - list.left) / tooltip.offsetWidth;
  return {
    style: `${side}: ${offset / scaleY}px; max-width: ${maxWidth / scaleX}px`,
    class: "cm-completionInfo-" + (narrow ? rtl ? "left-narrow" : "right-narrow" : left ? "left" : "right")
  };
}
function optionContent(config2) {
  let content2 = config2.addToOptions.slice();
  if (config2.icons)
    content2.push({
      render(completion) {
        let icon = document.createElement("div");
        icon.classList.add("cm-completionIcon");
        if (completion.type)
          icon.classList.add(...completion.type.split(/\s+/g).map((cls) => "cm-completionIcon-" + cls));
        icon.setAttribute("aria-hidden", "true");
        return icon;
      },
      position: 20
    });
  content2.push({
    render(completion, _s2, _v2, match) {
      let labelElt = document.createElement("span");
      labelElt.className = "cm-completionLabel";
      let label = completion.displayLabel || completion.label, off2 = 0;
      for (let j2 = 0; j2 < match.length; ) {
        let from = match[j2++], to2 = match[j2++];
        if (from > off2)
          labelElt.appendChild(document.createTextNode(label.slice(off2, from)));
        let span = labelElt.appendChild(document.createElement("span"));
        span.appendChild(document.createTextNode(label.slice(from, to2)));
        span.className = "cm-completionMatchedText";
        off2 = to2;
      }
      if (off2 < label.length)
        labelElt.appendChild(document.createTextNode(label.slice(off2)));
      return labelElt;
    },
    position: 50
  }, {
    render(completion) {
      if (!completion.detail)
        return null;
      let detailElt = document.createElement("span");
      detailElt.className = "cm-completionDetail";
      detailElt.textContent = completion.detail;
      return detailElt;
    },
    position: 80
  });
  return content2.sort((a2, b2) => a2.position - b2.position).map((a2) => a2.render);
}
function rangeAroundSelected(total, selected, max) {
  if (total <= max)
    return { from: 0, to: total };
  if (selected < 0)
    selected = 0;
  if (selected <= total >> 1) {
    let off3 = Math.floor(selected / max);
    return { from: off3 * max, to: (off3 + 1) * max };
  }
  let off2 = Math.floor((total - selected) / max);
  return { from: total - (off2 + 1) * max, to: total - off2 * max };
}
var CompletionTooltip = class {
  constructor(view, stateField, applyCompletion2) {
    this.view = view;
    this.stateField = stateField;
    this.applyCompletion = applyCompletion2;
    this.info = null;
    this.infoDestroy = null;
    this.placeInfoReq = {
      read: () => this.measureInfo(),
      write: (pos) => this.placeInfo(pos),
      key: this
    };
    this.space = null;
    this.currentClass = "";
    let cState = view.state.field(stateField);
    let { options, selected } = cState.open;
    let config2 = view.state.facet(completionConfig);
    this.optionContent = optionContent(config2);
    this.optionClass = config2.optionClass;
    this.tooltipClass = config2.tooltipClass;
    this.range = rangeAroundSelected(options.length, selected, config2.maxRenderedOptions);
    this.dom = document.createElement("div");
    this.dom.className = "cm-tooltip-autocomplete";
    this.updateTooltipClass(view.state);
    this.dom.addEventListener("mousedown", (e25) => {
      let { options: options2 } = view.state.field(stateField).open;
      for (let dom = e25.target, match; dom && dom != this.dom; dom = dom.parentNode) {
        if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options2.length) {
          this.applyCompletion(view, options2[+match[1]]);
          e25.preventDefault();
          return;
        }
      }
    });
    this.dom.addEventListener("focusout", (e25) => {
      let state = view.state.field(this.stateField, false);
      if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur && e25.relatedTarget != view.contentDOM)
        view.dispatch({ effects: closeCompletionEffect.of(null) });
    });
    this.showOptions(options, cState.id);
  }
  mount() {
    this.updateSel();
  }
  showOptions(options, id3) {
    if (this.list)
      this.list.remove();
    this.list = this.dom.appendChild(this.createListBox(options, id3, this.range));
    this.list.addEventListener("scroll", () => {
      if (this.info)
        this.view.requestMeasure(this.placeInfoReq);
    });
  }
  update(update) {
    var _a3;
    let cState = update.state.field(this.stateField);
    let prevState = update.startState.field(this.stateField);
    this.updateTooltipClass(update.state);
    if (cState != prevState) {
      let { options, selected, disabled } = cState.open;
      if (!prevState.open || prevState.open.options != options) {
        this.range = rangeAroundSelected(options.length, selected, update.state.facet(completionConfig).maxRenderedOptions);
        this.showOptions(options, cState.id);
      }
      this.updateSel();
      if (disabled != ((_a3 = prevState.open) === null || _a3 === void 0 ? void 0 : _a3.disabled))
        this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!disabled);
    }
  }
  updateTooltipClass(state) {
    let cls = this.tooltipClass(state);
    if (cls != this.currentClass) {
      for (let c2 of this.currentClass.split(" "))
        if (c2)
          this.dom.classList.remove(c2);
      for (let c2 of cls.split(" "))
        if (c2)
          this.dom.classList.add(c2);
      this.currentClass = cls;
    }
  }
  positioned(space4) {
    this.space = space4;
    if (this.info)
      this.view.requestMeasure(this.placeInfoReq);
  }
  updateSel() {
    let cState = this.view.state.field(this.stateField), open = cState.open;
    if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
      this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
      this.showOptions(open.options, cState.id);
    }
    if (this.updateSelectedOption(open.selected)) {
      this.destroyInfo();
      let { completion } = open.options[open.selected];
      let { info } = completion;
      if (!info)
        return;
      let infoResult = typeof info === "string" ? document.createTextNode(info) : info(completion);
      if (!infoResult)
        return;
      if ("then" in infoResult) {
        infoResult.then((obj) => {
          if (obj && this.view.state.field(this.stateField, false) == cState)
            this.addInfoPane(obj, completion);
        }).catch((e25) => logException(this.view.state, e25, "completion info"));
      } else {
        this.addInfoPane(infoResult, completion);
      }
    }
  }
  addInfoPane(content2, completion) {
    this.destroyInfo();
    let wrap = this.info = document.createElement("div");
    wrap.className = "cm-tooltip cm-completionInfo";
    if (content2.nodeType != null) {
      wrap.appendChild(content2);
      this.infoDestroy = null;
    } else {
      let { dom, destroy } = content2;
      wrap.appendChild(dom);
      this.infoDestroy = destroy || null;
    }
    this.dom.appendChild(wrap);
    this.view.requestMeasure(this.placeInfoReq);
  }
  updateSelectedOption(selected) {
    let set = null;
    for (let opt = this.list.firstChild, i2 = this.range.from; opt; opt = opt.nextSibling, i2++) {
      if (opt.nodeName != "LI" || !opt.id) {
        i2--;
      } else if (i2 == selected) {
        if (!opt.hasAttribute("aria-selected")) {
          opt.setAttribute("aria-selected", "true");
          set = opt;
        }
      } else {
        if (opt.hasAttribute("aria-selected"))
          opt.removeAttribute("aria-selected");
      }
    }
    if (set)
      scrollIntoView2(this.list, set);
    return set;
  }
  measureInfo() {
    let sel = this.dom.querySelector("[aria-selected]");
    if (!sel || !this.info)
      return null;
    let listRect = this.dom.getBoundingClientRect();
    let infoRect = this.info.getBoundingClientRect();
    let selRect = sel.getBoundingClientRect();
    let space4 = this.space;
    if (!space4) {
      let win = this.dom.ownerDocument.defaultView || window;
      space4 = { left: 0, top: 0, right: win.innerWidth, bottom: win.innerHeight };
    }
    if (selRect.top > Math.min(space4.bottom, listRect.bottom) - 10 || selRect.bottom < Math.max(space4.top, listRect.top) + 10)
      return null;
    return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space4, this.dom);
  }
  placeInfo(pos) {
    if (this.info) {
      if (pos) {
        if (pos.style)
          this.info.style.cssText = pos.style;
        this.info.className = "cm-tooltip cm-completionInfo " + (pos.class || "");
      } else {
        this.info.style.cssText = "top: -1e6px";
      }
    }
  }
  createListBox(options, id3, range) {
    const ul2 = document.createElement("ul");
    ul2.id = id3;
    ul2.setAttribute("role", "listbox");
    ul2.setAttribute("aria-expanded", "true");
    ul2.setAttribute("aria-label", this.view.state.phrase("Completions"));
    let curSection = null;
    for (let i2 = range.from; i2 < range.to; i2++) {
      let { completion, match } = options[i2], { section } = completion;
      if (section) {
        let name2 = typeof section == "string" ? section : section.name;
        if (name2 != curSection && (i2 > range.from || range.from == 0)) {
          curSection = name2;
          if (typeof section != "string" && section.header) {
            ul2.appendChild(section.header(section));
          } else {
            let header = ul2.appendChild(document.createElement("completion-section"));
            header.textContent = name2;
          }
        }
      }
      const li2 = ul2.appendChild(document.createElement("li"));
      li2.id = id3 + "-" + i2;
      li2.setAttribute("role", "option");
      let cls = this.optionClass(completion);
      if (cls)
        li2.className = cls;
      for (let source of this.optionContent) {
        let node = source(completion, this.view.state, this.view, match);
        if (node)
          li2.appendChild(node);
      }
    }
    if (range.from)
      ul2.classList.add("cm-completionListIncompleteTop");
    if (range.to < options.length)
      ul2.classList.add("cm-completionListIncompleteBottom");
    return ul2;
  }
  destroyInfo() {
    if (this.info) {
      if (this.infoDestroy)
        this.infoDestroy();
      this.info.remove();
      this.info = null;
    }
  }
  destroy() {
    this.destroyInfo();
  }
};
function completionTooltip(stateField, applyCompletion2) {
  return (view) => new CompletionTooltip(view, stateField, applyCompletion2);
}
function scrollIntoView2(container, element) {
  let parent = container.getBoundingClientRect();
  let self2 = element.getBoundingClientRect();
  let scaleY = parent.height / container.offsetHeight;
  if (self2.top < parent.top)
    container.scrollTop -= (parent.top - self2.top) / scaleY;
  else if (self2.bottom > parent.bottom)
    container.scrollTop += (self2.bottom - parent.bottom) / scaleY;
}
function score(option) {
  return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) + (option.type ? 1 : 0);
}
function sortOptions(active, state) {
  let options = [];
  let sections = null;
  let addOption = (option) => {
    options.push(option);
    let { section } = option.completion;
    if (section) {
      if (!sections)
        sections = [];
      let name2 = typeof section == "string" ? section : section.name;
      if (!sections.some((s2) => s2.name == name2))
        sections.push(typeof section == "string" ? { name: name2 } : section);
    }
  };
  let conf = state.facet(completionConfig);
  for (let a2 of active)
    if (a2.hasResult()) {
      let getMatch = a2.result.getMatch;
      if (a2.result.filter === false) {
        for (let option of a2.result.options) {
          addOption(new Option(option, a2.source, getMatch ? getMatch(option) : [], 1e9 - options.length));
        }
      } else {
        let pattern = state.sliceDoc(a2.from, a2.to), match;
        let matcher = conf.filterStrict ? new StrictMatcher(pattern) : new FuzzyMatcher(pattern);
        for (let option of a2.result.options)
          if (match = matcher.match(option.label)) {
            let matched = !option.displayLabel ? match.matched : getMatch ? getMatch(option, match.matched) : [];
            addOption(new Option(option, a2.source, matched, match.score + (option.boost || 0)));
          }
      }
    }
  if (sections) {
    let sectionOrder = /* @__PURE__ */ Object.create(null), pos = 0;
    let cmp = (a2, b2) => {
      var _a3, _b2;
      return ((_a3 = a2.rank) !== null && _a3 !== void 0 ? _a3 : 1e9) - ((_b2 = b2.rank) !== null && _b2 !== void 0 ? _b2 : 1e9) || (a2.name < b2.name ? -1 : 1);
    };
    for (let s2 of sections.sort(cmp)) {
      pos -= 1e5;
      sectionOrder[s2.name] = pos;
    }
    for (let option of options) {
      let { section } = option.completion;
      if (section)
        option.score += sectionOrder[typeof section == "string" ? section : section.name];
    }
  }
  let result = [], prev = null;
  let compare2 = conf.compareCompletions;
  for (let opt of options.sort((a2, b2) => b2.score - a2.score || compare2(a2.completion, b2.completion))) {
    let cur2 = opt.completion;
    if (!prev || prev.label != cur2.label || prev.detail != cur2.detail || prev.type != null && cur2.type != null && prev.type != cur2.type || prev.apply != cur2.apply || prev.boost != cur2.boost)
      result.push(opt);
    else if (score(opt.completion) > score(prev))
      result[result.length - 1] = opt;
    prev = opt.completion;
  }
  return result;
}
var CompletionDialog = class _CompletionDialog {
  constructor(options, attrs, tooltip, timestamp, selected, disabled) {
    this.options = options;
    this.attrs = attrs;
    this.tooltip = tooltip;
    this.timestamp = timestamp;
    this.selected = selected;
    this.disabled = disabled;
  }
  setSelected(selected, id3) {
    return selected == this.selected || selected >= this.options.length ? this : new _CompletionDialog(this.options, makeAttrs(id3, selected), this.tooltip, this.timestamp, selected, this.disabled);
  }
  static build(active, state, id3, prev, conf) {
    let options = sortOptions(active, state);
    if (!options.length) {
      return prev && active.some(
        (a2) => a2.state == 1
        /* State.Pending */
      ) ? new _CompletionDialog(prev.options, prev.attrs, prev.tooltip, prev.timestamp, prev.selected, true) : null;
    }
    let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
    if (prev && prev.selected != selected && prev.selected != -1) {
      let selectedValue = prev.options[prev.selected].completion;
      for (let i2 = 0; i2 < options.length; i2++)
        if (options[i2].completion == selectedValue) {
          selected = i2;
          break;
        }
    }
    return new _CompletionDialog(options, makeAttrs(id3, selected), {
      pos: active.reduce((a2, b2) => b2.hasResult() ? Math.min(a2, b2.from) : a2, 1e8),
      create: createTooltip,
      above: conf.aboveCursor
    }, prev ? prev.timestamp : Date.now(), selected, false);
  }
  map(changes) {
    return new _CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
  }
};
var CompletionState = class _CompletionState {
  constructor(active, id3, open) {
    this.active = active;
    this.id = id3;
    this.open = open;
  }
  static start() {
    return new _CompletionState(none3, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
  }
  update(tr2) {
    let { state } = tr2, conf = state.facet(completionConfig);
    let sources = conf.override || state.languageDataAt("autocomplete", cur(state)).map(asSource);
    let active = sources.map((source) => {
      let value = this.active.find((s2) => s2.source == source) || new ActiveSource(
        source,
        this.active.some(
          (a2) => a2.state != 0
          /* State.Inactive */
        ) ? 1 : 0
        /* State.Inactive */
      );
      return value.update(tr2, conf);
    });
    if (active.length == this.active.length && active.every((a2, i2) => a2 == this.active[i2]))
      active = this.active;
    let open = this.open;
    if (open && tr2.docChanged)
      open = open.map(tr2.changes);
    if (tr2.selection || active.some((a2) => a2.hasResult() && tr2.changes.touchesRange(a2.from, a2.to)) || !sameResults(active, this.active))
      open = CompletionDialog.build(active, state, this.id, open, conf);
    else if (open && open.disabled && !active.some(
      (a2) => a2.state == 1
      /* State.Pending */
    ))
      open = null;
    if (!open && active.every(
      (a2) => a2.state != 1
      /* State.Pending */
    ) && active.some((a2) => a2.hasResult()))
      active = active.map((a2) => a2.hasResult() ? new ActiveSource(
        a2.source,
        0
        /* State.Inactive */
      ) : a2);
    for (let effect of tr2.effects)
      if (effect.is(setSelectedEffect))
        open = open && open.setSelected(effect.value, this.id);
    return active == this.active && open == this.open ? this : new _CompletionState(active, this.id, open);
  }
  get tooltip() {
    return this.open ? this.open.tooltip : null;
  }
  get attrs() {
    return this.open ? this.open.attrs : this.active.length ? baseAttrs : noAttrs2;
  }
};
function sameResults(a2, b2) {
  if (a2 == b2)
    return true;
  for (let iA2 = 0, iB2 = 0; ; ) {
    while (iA2 < a2.length && !a2[iA2].hasResult)
      iA2++;
    while (iB2 < b2.length && !b2[iB2].hasResult)
      iB2++;
    let endA = iA2 == a2.length, endB = iB2 == b2.length;
    if (endA || endB)
      return endA == endB;
    if (a2[iA2++].result != b2[iB2++].result)
      return false;
  }
}
var baseAttrs = {
  "aria-autocomplete": "list"
};
var noAttrs2 = {};
function makeAttrs(id3, selected) {
  let result = {
    "aria-autocomplete": "list",
    "aria-haspopup": "listbox",
    "aria-controls": id3
  };
  if (selected > -1)
    result["aria-activedescendant"] = id3 + "-" + selected;
  return result;
}
var none3 = [];
function getUpdateType(tr2, conf) {
  if (tr2.isUserEvent("input.complete")) {
    let completion = tr2.annotation(pickedCompletion);
    if (completion && conf.activateOnCompletion(completion))
      return 4 | 8;
  }
  let typing = tr2.isUserEvent("input.type");
  return typing && conf.activateOnTyping ? 4 | 1 : typing ? 1 : tr2.isUserEvent("delete.backward") ? 2 : tr2.selection ? 8 : tr2.docChanged ? 16 : 0;
}
var ActiveSource = class _ActiveSource {
  constructor(source, state, explicitPos = -1) {
    this.source = source;
    this.state = state;
    this.explicitPos = explicitPos;
  }
  hasResult() {
    return false;
  }
  update(tr2, conf) {
    let type = getUpdateType(tr2, conf), value = this;
    if (type & 8 || type & 16 && this.touches(tr2))
      value = new _ActiveSource(
        value.source,
        0
        /* State.Inactive */
      );
    if (type & 4 && value.state == 0)
      value = new _ActiveSource(
        this.source,
        1
        /* State.Pending */
      );
    value = value.updateFor(tr2, type);
    for (let effect of tr2.effects) {
      if (effect.is(startCompletionEffect))
        value = new _ActiveSource(value.source, 1, effect.value ? cur(tr2.state) : -1);
      else if (effect.is(closeCompletionEffect))
        value = new _ActiveSource(
          value.source,
          0
          /* State.Inactive */
        );
      else if (effect.is(setActiveEffect)) {
        for (let active of effect.value)
          if (active.source == value.source)
            value = active;
      }
    }
    return value;
  }
  updateFor(tr2, type) {
    return this.map(tr2.changes);
  }
  map(changes) {
    return changes.empty || this.explicitPos < 0 ? this : new _ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));
  }
  touches(tr2) {
    return tr2.changes.touchesRange(cur(tr2.state));
  }
};
var ActiveResult = class _ActiveResult extends ActiveSource {
  constructor(source, explicitPos, result, from, to2) {
    super(source, 2, explicitPos);
    this.result = result;
    this.from = from;
    this.to = to2;
  }
  hasResult() {
    return true;
  }
  updateFor(tr2, type) {
    var _a3;
    if (!(type & 3))
      return this.map(tr2.changes);
    let result = this.result;
    if (result.map && !tr2.changes.empty)
      result = result.map(result, tr2.changes);
    let from = tr2.changes.mapPos(this.from), to2 = tr2.changes.mapPos(this.to, 1);
    let pos = cur(tr2.state);
    if ((this.explicitPos < 0 ? pos <= from : pos < this.from) || pos > to2 || !result || type & 2 && cur(tr2.startState) == this.from)
      return new ActiveSource(
        this.source,
        type & 4 ? 1 : 0
        /* State.Inactive */
      );
    let explicitPos = this.explicitPos < 0 ? -1 : tr2.changes.mapPos(this.explicitPos);
    if (checkValid(result.validFor, tr2.state, from, to2))
      return new _ActiveResult(this.source, explicitPos, result, from, to2);
    if (result.update && (result = result.update(result, from, to2, new CompletionContext(tr2.state, pos, explicitPos >= 0))))
      return new _ActiveResult(this.source, explicitPos, result, result.from, (_a3 = result.to) !== null && _a3 !== void 0 ? _a3 : cur(tr2.state));
    return new ActiveSource(this.source, 1, explicitPos);
  }
  map(mapping) {
    if (mapping.empty)
      return this;
    let result = this.result.map ? this.result.map(this.result, mapping) : this.result;
    if (!result)
      return new ActiveSource(
        this.source,
        0
        /* State.Inactive */
      );
    return new _ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
  }
  touches(tr2) {
    return tr2.changes.touchesRange(this.from, this.to);
  }
};
function checkValid(validFor, state, from, to2) {
  if (!validFor)
    return false;
  let text = state.sliceDoc(from, to2);
  return typeof validFor == "function" ? validFor(text, from, to2, state) : ensureAnchor(validFor, true).test(text);
}
var setActiveEffect = /* @__PURE__ */ StateEffect.define({
  map(sources, mapping) {
    return sources.map((s2) => s2.map(mapping));
  }
});
var setSelectedEffect = /* @__PURE__ */ StateEffect.define();
var completionState = /* @__PURE__ */ StateField.define({
  create() {
    return CompletionState.start();
  },
  update(value, tr2) {
    return value.update(tr2);
  },
  provide: (f2) => [
    showTooltip.from(f2, (val) => val.tooltip),
    EditorView.contentAttributes.from(f2, (state) => state.attrs)
  ]
});
function applyCompletion(view, option) {
  const apply = option.completion.apply || option.completion.label;
  let result = view.state.field(completionState).active.find((a2) => a2.source == option.source);
  if (!(result instanceof ActiveResult))
    return false;
  if (typeof apply == "string")
    view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), { annotations: pickedCompletion.of(option.completion) }));
  else
    apply(view, option.completion, result.from, result.to);
  return true;
}
var createTooltip = /* @__PURE__ */ completionTooltip(completionState, applyCompletion);
function moveCompletionSelection(forward, by2 = "option") {
  return (view) => {
    let cState = view.state.field(completionState, false);
    if (!cState || !cState.open || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
      return false;
    let step = 1, tooltip;
    if (by2 == "page" && (tooltip = getTooltip(view, cState.open.tooltip)))
      step = Math.max(2, Math.floor(tooltip.dom.offsetHeight / tooltip.dom.querySelector("li").offsetHeight) - 1);
    let { length } = cState.open.options;
    let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;
    if (selected < 0)
      selected = by2 == "page" ? 0 : length - 1;
    else if (selected >= length)
      selected = by2 == "page" ? length - 1 : 0;
    view.dispatch({ effects: setSelectedEffect.of(selected) });
    return true;
  };
}
var acceptCompletion = (view) => {
  let cState = view.state.field(completionState, false);
  if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
    return false;
  return applyCompletion(view, cState.open.options[cState.open.selected]);
};
var startCompletion = (view) => {
  let cState = view.state.field(completionState, false);
  if (!cState)
    return false;
  view.dispatch({ effects: startCompletionEffect.of(true) });
  return true;
};
var closeCompletion = (view) => {
  let cState = view.state.field(completionState, false);
  if (!cState || !cState.active.some(
    (a2) => a2.state != 0
    /* State.Inactive */
  ))
    return false;
  view.dispatch({ effects: closeCompletionEffect.of(null) });
  return true;
};
var RunningQuery = class {
  constructor(active, context) {
    this.active = active;
    this.context = context;
    this.time = Date.now();
    this.updates = [];
    this.done = void 0;
  }
};
var MaxUpdateCount = 50;
var MinAbortTime = 1e3;
var completionPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.debounceUpdate = -1;
    this.running = [];
    this.debounceAccept = -1;
    this.pendingStart = false;
    this.composing = 0;
    for (let active of view.state.field(completionState).active)
      if (active.state == 1)
        this.startQuery(active);
  }
  update(update) {
    let cState = update.state.field(completionState);
    let conf = update.state.facet(completionConfig);
    if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
      return;
    let doesReset = update.transactions.some((tr2) => {
      let type = getUpdateType(tr2, conf);
      return type & 8 || (tr2.selection || tr2.docChanged) && !(type & 3);
    });
    for (let i2 = 0; i2 < this.running.length; i2++) {
      let query = this.running[i2];
      if (doesReset || query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
        for (let handler of query.context.abortListeners) {
          try {
            handler();
          } catch (e25) {
            logException(this.view.state, e25);
          }
        }
        query.context.abortListeners = null;
        this.running.splice(i2--, 1);
      } else {
        query.updates.push(...update.transactions);
      }
    }
    if (this.debounceUpdate > -1)
      clearTimeout(this.debounceUpdate);
    if (update.transactions.some((tr2) => tr2.effects.some((e25) => e25.is(startCompletionEffect))))
      this.pendingStart = true;
    let delay = this.pendingStart ? 50 : conf.activateOnTypingDelay;
    this.debounceUpdate = cState.active.some((a2) => a2.state == 1 && !this.running.some((q2) => q2.active.source == a2.source)) ? setTimeout(() => this.startUpdate(), delay) : -1;
    if (this.composing != 0)
      for (let tr2 of update.transactions) {
        if (tr2.isUserEvent("input.type"))
          this.composing = 2;
        else if (this.composing == 2 && tr2.selection)
          this.composing = 3;
      }
  }
  startUpdate() {
    this.debounceUpdate = -1;
    this.pendingStart = false;
    let { state } = this.view, cState = state.field(completionState);
    for (let active of cState.active) {
      if (active.state == 1 && !this.running.some((r2) => r2.active.source == active.source))
        this.startQuery(active);
    }
  }
  startQuery(active) {
    let { state } = this.view, pos = cur(state);
    let context = new CompletionContext(state, pos, active.explicitPos == pos, this.view);
    let pending = new RunningQuery(active, context);
    this.running.push(pending);
    Promise.resolve(active.source(context)).then((result) => {
      if (!pending.context.aborted) {
        pending.done = result || null;
        this.scheduleAccept();
      }
    }, (err) => {
      this.view.dispatch({ effects: closeCompletionEffect.of(null) });
      logException(this.view.state, err);
    });
  }
  scheduleAccept() {
    if (this.running.every((q2) => q2.done !== void 0))
      this.accept();
    else if (this.debounceAccept < 0)
      this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
  }
  // For each finished query in this.running, try to create a result
  // or, if appropriate, restart the query.
  accept() {
    var _a3;
    if (this.debounceAccept > -1)
      clearTimeout(this.debounceAccept);
    this.debounceAccept = -1;
    let updated = [];
    let conf = this.view.state.facet(completionConfig);
    for (let i2 = 0; i2 < this.running.length; i2++) {
      let query = this.running[i2];
      if (query.done === void 0)
        continue;
      this.running.splice(i2--, 1);
      if (query.done) {
        let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a3 = query.done.to) !== null && _a3 !== void 0 ? _a3 : cur(query.updates.length ? query.updates[0].startState : this.view.state));
        for (let tr2 of query.updates)
          active = active.update(tr2, conf);
        if (active.hasResult()) {
          updated.push(active);
          continue;
        }
      }
      let current = this.view.state.field(completionState).active.find((a2) => a2.source == query.active.source);
      if (current && current.state == 1) {
        if (query.done == null) {
          let active = new ActiveSource(
            query.active.source,
            0
            /* State.Inactive */
          );
          for (let tr2 of query.updates)
            active = active.update(tr2, conf);
          if (active.state != 1)
            updated.push(active);
        } else {
          this.startQuery(current);
        }
      }
    }
    if (updated.length)
      this.view.dispatch({ effects: setActiveEffect.of(updated) });
  }
}, {
  eventHandlers: {
    blur(event) {
      let state = this.view.state.field(completionState, false);
      if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {
        let dialog = state.open && getTooltip(this.view, state.open.tooltip);
        if (!dialog || !dialog.dom.contains(event.relatedTarget))
          setTimeout(() => this.view.dispatch({ effects: closeCompletionEffect.of(null) }), 10);
      }
    },
    compositionstart() {
      this.composing = 1;
    },
    compositionend() {
      if (this.composing == 3) {
        setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
      }
      this.composing = 0;
    }
  }
});
var windows = typeof navigator == "object" && /* @__PURE__ */ /Win/.test(navigator.platform);
var commitCharacters = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ EditorView.domEventHandlers({
  keydown(event, view) {
    let field = view.state.field(completionState, false);
    if (!field || !field.open || field.open.disabled || field.open.selected < 0 || event.key.length > 1 || event.ctrlKey && !(windows && event.altKey) || event.metaKey)
      return false;
    let option = field.open.options[field.open.selected];
    let result = field.active.find((a2) => a2.source == option.source);
    let commitChars = option.completion.commitCharacters || result.result.commitCharacters;
    if (commitChars && commitChars.indexOf(event.key) > -1)
      applyCompletion(view, option);
    return false;
  }
}));
var baseTheme4 = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-tooltip.cm-tooltip-autocomplete": {
    "& > ul": {
      fontFamily: "monospace",
      whiteSpace: "nowrap",
      overflow: "hidden auto",
      maxWidth_fallback: "700px",
      maxWidth: "min(700px, 95vw)",
      minWidth: "250px",
      maxHeight: "10em",
      height: "100%",
      listStyle: "none",
      margin: 0,
      padding: 0,
      "& > li, & > completion-section": {
        padding: "1px 3px",
        lineHeight: 1.2
      },
      "& > li": {
        overflowX: "hidden",
        textOverflow: "ellipsis",
        cursor: "pointer"
      },
      "& > completion-section": {
        display: "list-item",
        borderBottom: "1px solid silver",
        paddingLeft: "0.5em",
        opacity: 0.7
      }
    }
  },
  "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#17c",
    color: "white"
  },
  "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#777"
  },
  "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#347",
    color: "white"
  },
  "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#444"
  },
  ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
    content: '"\xB7\xB7\xB7"',
    opacity: 0.5,
    display: "block",
    textAlign: "center"
  },
  ".cm-tooltip.cm-completionInfo": {
    position: "absolute",
    padding: "3px 9px",
    width: "max-content",
    maxWidth: `${400}px`,
    boxSizing: "border-box"
  },
  ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
  ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
  ".cm-completionInfo.cm-completionInfo-left-narrow": { right: `${30}px` },
  ".cm-completionInfo.cm-completionInfo-right-narrow": { left: `${30}px` },
  "&light .cm-snippetField": { backgroundColor: "#00000022" },
  "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
  ".cm-snippetFieldPosition": {
    verticalAlign: "text-top",
    width: 0,
    height: "1.15em",
    display: "inline-block",
    margin: "0 -0.7px -.7em",
    borderLeft: "1.4px dotted #888"
  },
  ".cm-completionMatchedText": {
    textDecoration: "underline"
  },
  ".cm-completionDetail": {
    marginLeft: "0.5em",
    fontStyle: "italic"
  },
  ".cm-completionIcon": {
    fontSize: "90%",
    width: ".8em",
    display: "inline-block",
    textAlign: "center",
    paddingRight: ".6em",
    opacity: "0.6",
    boxSizing: "content-box"
  },
  ".cm-completionIcon-function, .cm-completionIcon-method": {
    "&:after": { content: "'\u0192'" }
  },
  ".cm-completionIcon-class": {
    "&:after": { content: "'\u25CB'" }
  },
  ".cm-completionIcon-interface": {
    "&:after": { content: "'\u25CC'" }
  },
  ".cm-completionIcon-variable": {
    "&:after": { content: "'\u{1D465}'" }
  },
  ".cm-completionIcon-constant": {
    "&:after": { content: "'\u{1D436}'" }
  },
  ".cm-completionIcon-type": {
    "&:after": { content: "'\u{1D461}'" }
  },
  ".cm-completionIcon-enum": {
    "&:after": { content: "'\u222A'" }
  },
  ".cm-completionIcon-property": {
    "&:after": { content: "'\u25A1'" }
  },
  ".cm-completionIcon-keyword": {
    "&:after": { content: "'\u{1F511}\uFE0E'" }
    // Disable emoji rendering
  },
  ".cm-completionIcon-namespace": {
    "&:after": { content: "'\u25A2'" }
  },
  ".cm-completionIcon-text": {
    "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
  }
});
var FieldPos = class {
  constructor(field, line, from, to2) {
    this.field = field;
    this.line = line;
    this.from = from;
    this.to = to2;
  }
};
var FieldRange = class _FieldRange {
  constructor(field, from, to2) {
    this.field = field;
    this.from = from;
    this.to = to2;
  }
  map(changes) {
    let from = changes.mapPos(this.from, -1, MapMode.TrackDel);
    let to2 = changes.mapPos(this.to, 1, MapMode.TrackDel);
    return from == null || to2 == null ? null : new _FieldRange(this.field, from, to2);
  }
};
var Snippet = class _Snippet {
  constructor(lines, fieldPositions) {
    this.lines = lines;
    this.fieldPositions = fieldPositions;
  }
  instantiate(state, pos) {
    let text = [], lineStart = [pos];
    let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
    for (let line of this.lines) {
      if (text.length) {
        let indent = baseIndent, tabs = /^\t*/.exec(line)[0].length;
        for (let i2 = 0; i2 < tabs; i2++)
          indent += state.facet(indentUnit);
        lineStart.push(pos + indent.length - tabs);
        line = indent + line.slice(tabs);
      }
      text.push(line);
      pos += line.length + 1;
    }
    let ranges = this.fieldPositions.map((pos2) => new FieldRange(pos2.field, lineStart[pos2.line] + pos2.from, lineStart[pos2.line] + pos2.to));
    return { text, ranges };
  }
  static parse(template) {
    let fields = [];
    let lines = [], positions = [], m2;
    for (let line of template.split(/\r\n?|\n/)) {
      while (m2 = /[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(line)) {
        let seq = m2[1] ? +m2[1] : null, rawName = m2[2] || m2[3] || "", found = -1;
        let name2 = rawName.replace(/\\[{}]/g, (m3) => m3[1]);
        for (let i2 = 0; i2 < fields.length; i2++) {
          if (seq != null ? fields[i2].seq == seq : name2 ? fields[i2].name == name2 : false)
            found = i2;
        }
        if (found < 0) {
          let i2 = 0;
          while (i2 < fields.length && (seq == null || fields[i2].seq != null && fields[i2].seq < seq))
            i2++;
          fields.splice(i2, 0, { seq, name: name2 });
          found = i2;
          for (let pos of positions)
            if (pos.field >= found)
              pos.field++;
        }
        positions.push(new FieldPos(found, lines.length, m2.index, m2.index + name2.length));
        line = line.slice(0, m2.index) + rawName + line.slice(m2.index + m2[0].length);
      }
      line = line.replace(/\\([{}])/g, (_2, brace, index) => {
        for (let pos of positions)
          if (pos.line == lines.length && pos.from > index) {
            pos.from--;
            pos.to--;
          }
        return brace;
      });
      lines.push(line);
    }
    return new _Snippet(lines, positions);
  }
};
var fieldMarker = /* @__PURE__ */ Decoration.widget({ widget: /* @__PURE__ */ new class extends WidgetType {
  toDOM() {
    let span = document.createElement("span");
    span.className = "cm-snippetFieldPosition";
    return span;
  }
  ignoreEvent() {
    return false;
  }
}() });
var fieldRange = /* @__PURE__ */ Decoration.mark({ class: "cm-snippetField" });
var ActiveSnippet = class _ActiveSnippet {
  constructor(ranges, active) {
    this.ranges = ranges;
    this.active = active;
    this.deco = Decoration.set(ranges.map((r2) => (r2.from == r2.to ? fieldMarker : fieldRange).range(r2.from, r2.to)));
  }
  map(changes) {
    let ranges = [];
    for (let r2 of this.ranges) {
      let mapped = r2.map(changes);
      if (!mapped)
        return null;
      ranges.push(mapped);
    }
    return new _ActiveSnippet(ranges, this.active);
  }
  selectionInsideField(sel) {
    return sel.ranges.every((range) => this.ranges.some((r2) => r2.field == this.active && r2.from <= range.from && r2.to >= range.to));
  }
};
var setActive = /* @__PURE__ */ StateEffect.define({
  map(value, changes) {
    return value && value.map(changes);
  }
});
var moveToField = /* @__PURE__ */ StateEffect.define();
var snippetState = /* @__PURE__ */ StateField.define({
  create() {
    return null;
  },
  update(value, tr2) {
    for (let effect of tr2.effects) {
      if (effect.is(setActive))
        return effect.value;
      if (effect.is(moveToField) && value)
        return new ActiveSnippet(value.ranges, effect.value);
    }
    if (value && tr2.docChanged)
      value = value.map(tr2.changes);
    if (value && tr2.selection && !value.selectionInsideField(tr2.selection))
      value = null;
    return value;
  },
  provide: (f2) => EditorView.decorations.from(f2, (val) => val ? val.deco : Decoration.none)
});
function fieldSelection(ranges, field) {
  return EditorSelection.create(ranges.filter((r2) => r2.field == field).map((r2) => EditorSelection.range(r2.from, r2.to)));
}
function snippet(template) {
  let snippet2 = Snippet.parse(template);
  return (editor, completion, from, to2) => {
    let { text, ranges } = snippet2.instantiate(editor.state, from);
    let spec = {
      changes: { from, to: to2, insert: Text.of(text) },
      scrollIntoView: true,
      annotations: completion ? [pickedCompletion.of(completion), Transaction.userEvent.of("input.complete")] : void 0
    };
    if (ranges.length)
      spec.selection = fieldSelection(ranges, 0);
    if (ranges.some((r2) => r2.field > 0)) {
      let active = new ActiveSnippet(ranges, 0);
      let effects = spec.effects = [setActive.of(active)];
      if (editor.state.field(snippetState, false) === void 0)
        effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme4]));
    }
    editor.dispatch(editor.state.update(spec));
  };
}
function moveField(dir) {
  return ({ state, dispatch }) => {
    let active = state.field(snippetState, false);
    if (!active || dir < 0 && active.active == 0)
      return false;
    let next = active.active + dir, last = dir > 0 && !active.ranges.some((r2) => r2.field == next + dir);
    dispatch(state.update({
      selection: fieldSelection(active.ranges, next),
      effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next)),
      scrollIntoView: true
    }));
    return true;
  };
}
var clearSnippet = ({ state, dispatch }) => {
  let active = state.field(snippetState, false);
  if (!active)
    return false;
  dispatch(state.update({ effects: setActive.of(null) }));
  return true;
};
var nextSnippetField = /* @__PURE__ */ moveField(1);
var prevSnippetField = /* @__PURE__ */ moveField(-1);
var defaultSnippetKeymap = [
  { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
  { key: "Escape", run: clearSnippet }
];
var snippetKeymap = /* @__PURE__ */ Facet.define({
  combine(maps) {
    return maps.length ? maps[0] : defaultSnippetKeymap;
  }
});
var addSnippetKeymap = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ keymap.compute([snippetKeymap], (state) => state.facet(snippetKeymap)));
function snippetCompletion(template, completion) {
  return Object.assign(Object.assign({}, completion), { apply: snippet(template) });
}
var snippetPointerHandler = /* @__PURE__ */ EditorView.domEventHandlers({
  mousedown(event, view) {
    let active = view.state.field(snippetState, false), pos;
    if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
      return false;
    let match = active.ranges.find((r2) => r2.from <= pos && r2.to >= pos);
    if (!match || match.field == active.active)
      return false;
    view.dispatch({
      selection: fieldSelection(active.ranges, match.field),
      effects: setActive.of(active.ranges.some((r2) => r2.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null),
      scrollIntoView: true
    });
    return true;
  }
});
var defaults2 = {
  brackets: ["(", "[", "{", "'", '"'],
  before: ")]}:;>",
  stringPrefixes: []
};
var closeBracketEffect = /* @__PURE__ */ StateEffect.define({
  map(value, mapping) {
    let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
    return mapped == null ? void 0 : mapped;
  }
});
var closedBracket = /* @__PURE__ */ new class extends RangeValue {
}();
closedBracket.startSide = 1;
closedBracket.endSide = -1;
var bracketState = /* @__PURE__ */ StateField.define({
  create() {
    return RangeSet.empty;
  },
  update(value, tr2) {
    value = value.map(tr2.changes);
    if (tr2.selection) {
      let line = tr2.state.doc.lineAt(tr2.selection.main.head);
      value = value.update({ filter: (from) => from >= line.from && from <= line.to });
    }
    for (let effect of tr2.effects)
      if (effect.is(closeBracketEffect))
        value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
    return value;
  }
});
function closeBrackets() {
  return [inputHandler2, bracketState];
}
var definedClosing = "()[]{}<>";
function closing(ch2) {
  for (let i2 = 0; i2 < definedClosing.length; i2 += 2)
    if (definedClosing.charCodeAt(i2) == ch2)
      return definedClosing.charAt(i2 + 1);
  return fromCodePoint(ch2 < 128 ? ch2 : ch2 + 1);
}
function config(state, pos) {
  return state.languageDataAt("closeBrackets", pos)[0] || defaults2;
}
var android = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent);
var inputHandler2 = /* @__PURE__ */ EditorView.inputHandler.of((view, from, to2, insert2) => {
  if ((android ? view.composing : view.compositionStarted) || view.state.readOnly)
    return false;
  let sel = view.state.selection.main;
  if (insert2.length > 2 || insert2.length == 2 && codePointSize(codePointAt(insert2, 0)) == 1 || from != sel.from || to2 != sel.to)
    return false;
  let tr2 = insertBracket(view.state, insert2);
  if (!tr2)
    return false;
  view.dispatch(tr2);
  return true;
});
var deleteBracketPair = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  let conf = config(state, state.selection.main.head);
  let tokens = conf.brackets || defaults2.brackets;
  let dont = null, changes = state.changeByRange((range) => {
    if (range.empty) {
      let before = prevChar(state.doc, range.head);
      for (let token of tokens) {
        if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0)))
          return {
            changes: { from: range.head - token.length, to: range.head + token.length },
            range: EditorSelection.cursor(range.head - token.length)
          };
      }
    }
    return { range: dont = range };
  });
  if (!dont)
    dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete.backward" }));
  return !dont;
};
var closeBracketsKeymap = [
  { key: "Backspace", run: deleteBracketPair }
];
function insertBracket(state, bracket2) {
  let conf = config(state, state.selection.main.head);
  let tokens = conf.brackets || defaults2.brackets;
  for (let tok of tokens) {
    let closed = closing(codePointAt(tok, 0));
    if (bracket2 == tok)
      return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf) : handleOpen(state, tok, closed, conf.before || defaults2.before);
    if (bracket2 == closed && closedBracketAt(state, state.selection.main.from))
      return handleClose(state, tok, closed);
  }
  return null;
}
function closedBracketAt(state, pos) {
  let found = false;
  state.field(bracketState).between(0, state.doc.length, (from) => {
    if (from == pos)
      found = true;
  });
  return found;
}
function nextChar(doc2, pos) {
  let next = doc2.sliceString(pos, pos + 2);
  return next.slice(0, codePointSize(codePointAt(next, 0)));
}
function prevChar(doc2, pos) {
  let prev = doc2.sliceString(pos - 2, pos);
  return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
}
function handleOpen(state, open, close, closeBefore) {
  let dont = null, changes = state.changeByRange((range) => {
    if (!range.empty)
      return {
        changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
        effects: closeBracketEffect.of(range.to + open.length),
        range: EditorSelection.range(range.anchor + open.length, range.head + open.length)
      };
    let next = nextChar(state.doc, range.head);
    if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
      return {
        changes: { insert: open + close, from: range.head },
        effects: closeBracketEffect.of(range.head + open.length),
        range: EditorSelection.cursor(range.head + open.length)
      };
    return { range: dont = range };
  });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
function handleClose(state, _open, close) {
  let dont = null, changes = state.changeByRange((range) => {
    if (range.empty && nextChar(state.doc, range.head) == close)
      return {
        changes: { from: range.head, to: range.head + close.length, insert: close },
        range: EditorSelection.cursor(range.head + close.length)
      };
    return dont = { range };
  });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
function handleSame(state, token, allowTriple, config2) {
  let stringPrefixes = config2.stringPrefixes || defaults2.stringPrefixes;
  let dont = null, changes = state.changeByRange((range) => {
    if (!range.empty)
      return {
        changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
        effects: closeBracketEffect.of(range.to + token.length),
        range: EditorSelection.range(range.anchor + token.length, range.head + token.length)
      };
    let pos = range.head, next = nextChar(state.doc, pos), start;
    if (next == token) {
      if (nodeStart(state, pos)) {
        return {
          changes: { insert: token + token, from: pos },
          effects: closeBracketEffect.of(pos + token.length),
          range: EditorSelection.cursor(pos + token.length)
        };
      } else if (closedBracketAt(state, pos)) {
        let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
        let content2 = isTriple ? token + token + token : token;
        return {
          changes: { from: pos, to: pos + content2.length, insert: content2 },
          range: EditorSelection.cursor(pos + content2.length)
        };
      }
    } else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token && (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 && nodeStart(state, start)) {
      return {
        changes: { insert: token + token + token + token, from: pos },
        effects: closeBracketEffect.of(pos + token.length),
        range: EditorSelection.cursor(pos + token.length)
      };
    } else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
      if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes))
        return {
          changes: { insert: token + token, from: pos },
          effects: closeBracketEffect.of(pos + token.length),
          range: EditorSelection.cursor(pos + token.length)
        };
    }
    return { range: dont = range };
  });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
function nodeStart(state, pos) {
  let tree = syntaxTree(state).resolveInner(pos + 1);
  return tree.parent && tree.from == pos;
}
function probablyInString(state, pos, quoteToken, prefixes) {
  let node = syntaxTree(state).resolveInner(pos, -1);
  let maxPrefix = prefixes.reduce((m2, p2) => Math.max(m2, p2.length), 0);
  for (let i2 = 0; i2 < 5; i2++) {
    let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));
    let quotePos = start.indexOf(quoteToken);
    if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
      let first = node.firstChild;
      while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {
        if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)
          return false;
        first = first.firstChild;
      }
      return true;
    }
    let parent = node.to == pos && node.parent;
    if (!parent)
      break;
    node = parent;
  }
  return false;
}
function canStartStringAt(state, pos, prefixes) {
  let charCat = state.charCategorizer(pos);
  if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word)
    return pos;
  for (let prefix of prefixes) {
    let start = pos - prefix.length;
    if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word)
      return start;
  }
  return -1;
}
function autocompletion(config2 = {}) {
  return [
    commitCharacters,
    completionState,
    completionConfig.of(config2),
    completionPlugin,
    completionKeymapExt,
    baseTheme4
  ];
}
var completionKeymap = [
  { key: "Ctrl-Space", run: startCompletion },
  { key: "Escape", run: closeCompletion },
  { key: "ArrowDown", run: /* @__PURE__ */ moveCompletionSelection(true) },
  { key: "ArrowUp", run: /* @__PURE__ */ moveCompletionSelection(false) },
  { key: "PageDown", run: /* @__PURE__ */ moveCompletionSelection(true, "page") },
  { key: "PageUp", run: /* @__PURE__ */ moveCompletionSelection(false, "page") },
  { key: "Enter", run: acceptCompletion }
];
var completionKeymapExt = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ keymap.computeN([completionConfig], (state) => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));

// node_modules/@codemirror/lint/dist/index.js
var SelectedDiagnostic = class {
  constructor(from, to2, diagnostic) {
    this.from = from;
    this.to = to2;
    this.diagnostic = diagnostic;
  }
};
var LintState = class _LintState {
  constructor(diagnostics, panel, selected) {
    this.diagnostics = diagnostics;
    this.panel = panel;
    this.selected = selected;
  }
  static init(diagnostics, panel, state) {
    let markedDiagnostics = diagnostics;
    let diagnosticFilter = state.facet(lintConfig).markerFilter;
    if (diagnosticFilter)
      markedDiagnostics = diagnosticFilter(markedDiagnostics, state);
    let ranges = Decoration.set(markedDiagnostics.map((d2) => {
      return d2.from == d2.to || d2.from == d2.to - 1 && state.doc.lineAt(d2.from).to == d2.from ? Decoration.widget({
        widget: new DiagnosticWidget(d2),
        diagnostic: d2
      }).range(d2.from) : Decoration.mark({
        attributes: { class: "cm-lintRange cm-lintRange-" + d2.severity + (d2.markClass ? " " + d2.markClass : "") },
        diagnostic: d2
      }).range(d2.from, d2.to);
    }), true);
    return new _LintState(ranges, panel, findDiagnostic(ranges));
  }
};
function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
  let found = null;
  diagnostics.between(after, 1e9, (from, to2, { spec }) => {
    if (diagnostic && spec.diagnostic != diagnostic)
      return;
    found = new SelectedDiagnostic(from, to2, spec.diagnostic);
    return false;
  });
  return found;
}
function hideTooltip(tr2, tooltip) {
  let from = tooltip.pos, to2 = tooltip.end || from;
  let result = tr2.state.facet(lintConfig).hideOn(tr2, from, to2);
  if (result != null)
    return result;
  let line = tr2.startState.doc.lineAt(tooltip.pos);
  return !!(tr2.effects.some((e25) => e25.is(setDiagnosticsEffect)) || tr2.changes.touchesRange(line.from, Math.max(line.to, to2)));
}
function maybeEnableLint(state, effects) {
  return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of(lintExtensions));
}
function setDiagnostics(state, diagnostics) {
  return {
    effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])
  };
}
var setDiagnosticsEffect = /* @__PURE__ */ StateEffect.define();
var togglePanel2 = /* @__PURE__ */ StateEffect.define();
var movePanelSelection = /* @__PURE__ */ StateEffect.define();
var lintState = /* @__PURE__ */ StateField.define({
  create() {
    return new LintState(Decoration.none, null, null);
  },
  update(value, tr2) {
    if (tr2.docChanged && value.diagnostics.size) {
      let mapped = value.diagnostics.map(tr2.changes), selected = null, panel = value.panel;
      if (value.selected) {
        let selPos = tr2.changes.mapPos(value.selected.from, 1);
        selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
      }
      if (!mapped.size && panel && tr2.state.facet(lintConfig).autoPanel)
        panel = null;
      value = new LintState(mapped, panel, selected);
    }
    for (let effect of tr2.effects) {
      if (effect.is(setDiagnosticsEffect)) {
        let panel = !tr2.state.facet(lintConfig).autoPanel ? value.panel : effect.value.length ? LintPanel.open : null;
        value = LintState.init(effect.value, panel, tr2.state);
      } else if (effect.is(togglePanel2)) {
        value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
      } else if (effect.is(movePanelSelection)) {
        value = new LintState(value.diagnostics, value.panel, effect.value);
      }
    }
    return value;
  },
  provide: (f2) => [
    showPanel.from(f2, (val) => val.panel),
    EditorView.decorations.from(f2, (s2) => s2.diagnostics)
  ]
});
var activeMark = /* @__PURE__ */ Decoration.mark({ class: "cm-lintRange cm-lintRange-active" });
function lintTooltip(view, pos, side) {
  let { diagnostics } = view.state.field(lintState);
  let found = [], stackStart = 2e8, stackEnd = 0;
  diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to2, { spec }) => {
    if (pos >= from && pos <= to2 && (from == to2 || (pos > from || side > 0) && (pos < to2 || side < 0))) {
      found.push(spec.diagnostic);
      stackStart = Math.min(from, stackStart);
      stackEnd = Math.max(to2, stackEnd);
    }
  });
  let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
  if (diagnosticFilter)
    found = diagnosticFilter(found, view.state);
  if (!found.length)
    return null;
  return {
    pos: stackStart,
    end: stackEnd,
    above: view.state.doc.lineAt(stackStart).to < stackEnd,
    create() {
      return { dom: diagnosticsTooltip(view, found) };
    }
  };
}
function diagnosticsTooltip(view, diagnostics) {
  return crelt("ul", { class: "cm-tooltip-lint" }, diagnostics.map((d2) => renderDiagnostic(view, d2, false)));
}
var openLintPanel = (view) => {
  let field = view.state.field(lintState, false);
  if (!field || !field.panel)
    view.dispatch({ effects: maybeEnableLint(view.state, [togglePanel2.of(true)]) });
  let panel = getPanel(view, LintPanel.open);
  if (panel)
    panel.dom.querySelector(".cm-panel-lint ul").focus();
  return true;
};
var closeLintPanel = (view) => {
  let field = view.state.field(lintState, false);
  if (!field || !field.panel)
    return false;
  view.dispatch({ effects: togglePanel2.of(false) });
  return true;
};
var nextDiagnostic = (view) => {
  let field = view.state.field(lintState, false);
  if (!field)
    return false;
  let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);
  if (!next.value) {
    next = field.diagnostics.iter(0);
    if (!next.value || next.from == sel.from && next.to == sel.to)
      return false;
  }
  view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });
  return true;
};
var lintKeymap = [
  { key: "Mod-Shift-m", run: openLintPanel, preventDefault: true },
  { key: "F8", run: nextDiagnostic }
];
var lintPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.timeout = -1;
    this.set = true;
    let { delay } = view.state.facet(lintConfig);
    this.lintTime = Date.now() + delay;
    this.run = this.run.bind(this);
    this.timeout = setTimeout(this.run, delay);
  }
  run() {
    clearTimeout(this.timeout);
    let now = Date.now();
    if (now < this.lintTime - 10) {
      this.timeout = setTimeout(this.run, this.lintTime - now);
    } else {
      this.set = false;
      let { state } = this.view, { sources } = state.facet(lintConfig);
      if (sources.length)
        Promise.all(sources.map((source) => Promise.resolve(source(this.view)))).then((annotations) => {
          let all = annotations.reduce((a2, b2) => a2.concat(b2));
          if (this.view.state.doc == state.doc)
            this.view.dispatch(setDiagnostics(this.view.state, all));
        }, (error) => {
          logException(this.view.state, error);
        });
    }
  }
  update(update) {
    let config2 = update.state.facet(lintConfig);
    if (update.docChanged || config2 != update.startState.facet(lintConfig) || config2.needsRefresh && config2.needsRefresh(update)) {
      this.lintTime = Date.now() + config2.delay;
      if (!this.set) {
        this.set = true;
        this.timeout = setTimeout(this.run, config2.delay);
      }
    }
  }
  force() {
    if (this.set) {
      this.lintTime = Date.now();
      this.run();
    }
  }
  destroy() {
    clearTimeout(this.timeout);
  }
});
var lintConfig = /* @__PURE__ */ Facet.define({
  combine(input) {
    return Object.assign({ sources: input.map((i2) => i2.source).filter((x2) => x2 != null) }, combineConfig(input.map((i2) => i2.config), {
      delay: 750,
      markerFilter: null,
      tooltipFilter: null,
      needsRefresh: null,
      hideOn: () => null
    }, {
      needsRefresh: (a2, b2) => !a2 ? b2 : !b2 ? a2 : (u2) => a2(u2) || b2(u2)
    }));
  }
});
function linter(source, config2 = {}) {
  return [
    lintConfig.of({ source, config: config2 }),
    lintPlugin,
    lintExtensions
  ];
}
function assignKeys(actions) {
  let assigned = [];
  if (actions)
    actions: for (let { name: name2 } of actions) {
      for (let i2 = 0; i2 < name2.length; i2++) {
        let ch2 = name2[i2];
        if (/[a-zA-Z]/.test(ch2) && !assigned.some((c2) => c2.toLowerCase() == ch2.toLowerCase())) {
          assigned.push(ch2);
          continue actions;
        }
      }
      assigned.push("");
    }
  return assigned;
}
function renderDiagnostic(view, diagnostic, inPanel) {
  var _a3;
  let keys3 = inPanel ? assignKeys(diagnostic.actions) : [];
  return crelt("li", { class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity }, crelt("span", { class: "cm-diagnosticText" }, diagnostic.renderMessage ? diagnostic.renderMessage(view) : diagnostic.message), (_a3 = diagnostic.actions) === null || _a3 === void 0 ? void 0 : _a3.map((action, i2) => {
    let fired = false, click = (e25) => {
      e25.preventDefault();
      if (fired)
        return;
      fired = true;
      let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
      if (found)
        action.apply(view, found.from, found.to);
    };
    let { name: name2 } = action, keyIndex = keys3[i2] ? name2.indexOf(keys3[i2]) : -1;
    let nameElt = keyIndex < 0 ? name2 : [
      name2.slice(0, keyIndex),
      crelt("u", name2.slice(keyIndex, keyIndex + 1)),
      name2.slice(keyIndex + 1)
    ];
    return crelt("button", {
      type: "button",
      class: "cm-diagnosticAction",
      onclick: click,
      onmousedown: click,
      "aria-label": ` Action: ${name2}${keyIndex < 0 ? "" : ` (access key "${keys3[i2]})"`}.`
    }, nameElt);
  }), diagnostic.source && crelt("div", { class: "cm-diagnosticSource" }, diagnostic.source));
}
var DiagnosticWidget = class extends WidgetType {
  constructor(diagnostic) {
    super();
    this.diagnostic = diagnostic;
  }
  eq(other) {
    return other.diagnostic == this.diagnostic;
  }
  toDOM() {
    return crelt("span", { class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity });
  }
};
var PanelItem = class {
  constructor(view, diagnostic) {
    this.diagnostic = diagnostic;
    this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16);
    this.dom = renderDiagnostic(view, diagnostic, true);
    this.dom.id = this.id;
    this.dom.setAttribute("role", "option");
  }
};
var LintPanel = class _LintPanel {
  constructor(view) {
    this.view = view;
    this.items = [];
    let onkeydown = (event) => {
      if (event.keyCode == 27) {
        closeLintPanel(this.view);
        this.view.focus();
      } else if (event.keyCode == 38 || event.keyCode == 33) {
        this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
      } else if (event.keyCode == 40 || event.keyCode == 34) {
        this.moveSelection((this.selectedIndex + 1) % this.items.length);
      } else if (event.keyCode == 36) {
        this.moveSelection(0);
      } else if (event.keyCode == 35) {
        this.moveSelection(this.items.length - 1);
      } else if (event.keyCode == 13) {
        this.view.focus();
      } else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) {
        let { diagnostic } = this.items[this.selectedIndex], keys3 = assignKeys(diagnostic.actions);
        for (let i2 = 0; i2 < keys3.length; i2++)
          if (keys3[i2].toUpperCase().charCodeAt(0) == event.keyCode) {
            let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
            if (found)
              diagnostic.actions[i2].apply(view, found.from, found.to);
          }
      } else {
        return;
      }
      event.preventDefault();
    };
    let onclick = (event) => {
      for (let i2 = 0; i2 < this.items.length; i2++) {
        if (this.items[i2].dom.contains(event.target))
          this.moveSelection(i2);
      }
    };
    this.list = crelt("ul", {
      tabIndex: 0,
      role: "listbox",
      "aria-label": this.view.state.phrase("Diagnostics"),
      onkeydown,
      onclick
    });
    this.dom = crelt("div", { class: "cm-panel-lint" }, this.list, crelt("button", {
      type: "button",
      name: "close",
      "aria-label": this.view.state.phrase("close"),
      onclick: () => closeLintPanel(this.view)
    }, "\xD7"));
    this.update();
  }
  get selectedIndex() {
    let selected = this.view.state.field(lintState).selected;
    if (!selected)
      return -1;
    for (let i2 = 0; i2 < this.items.length; i2++)
      if (this.items[i2].diagnostic == selected.diagnostic)
        return i2;
    return -1;
  }
  update() {
    let { diagnostics, selected } = this.view.state.field(lintState);
    let i2 = 0, needsSync = false, newSelectedItem = null;
    diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
      let found = -1, item;
      for (let j2 = i2; j2 < this.items.length; j2++)
        if (this.items[j2].diagnostic == spec.diagnostic) {
          found = j2;
          break;
        }
      if (found < 0) {
        item = new PanelItem(this.view, spec.diagnostic);
        this.items.splice(i2, 0, item);
        needsSync = true;
      } else {
        item = this.items[found];
        if (found > i2) {
          this.items.splice(i2, found - i2);
          needsSync = true;
        }
      }
      if (selected && item.diagnostic == selected.diagnostic) {
        if (!item.dom.hasAttribute("aria-selected")) {
          item.dom.setAttribute("aria-selected", "true");
          newSelectedItem = item;
        }
      } else if (item.dom.hasAttribute("aria-selected")) {
        item.dom.removeAttribute("aria-selected");
      }
      i2++;
    });
    while (i2 < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
      needsSync = true;
      this.items.pop();
    }
    if (this.items.length == 0) {
      this.items.push(new PanelItem(this.view, {
        from: -1,
        to: -1,
        severity: "info",
        message: this.view.state.phrase("No diagnostics")
      }));
      needsSync = true;
    }
    if (newSelectedItem) {
      this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
      this.view.requestMeasure({
        key: this,
        read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
        write: ({ sel, panel }) => {
          let scaleY = panel.height / this.list.offsetHeight;
          if (sel.top < panel.top)
            this.list.scrollTop -= (panel.top - sel.top) / scaleY;
          else if (sel.bottom > panel.bottom)
            this.list.scrollTop += (sel.bottom - panel.bottom) / scaleY;
        }
      });
    } else if (this.selectedIndex < 0) {
      this.list.removeAttribute("aria-activedescendant");
    }
    if (needsSync)
      this.sync();
  }
  sync() {
    let domPos = this.list.firstChild;
    function rm3() {
      let prev = domPos;
      domPos = prev.nextSibling;
      prev.remove();
    }
    for (let item of this.items) {
      if (item.dom.parentNode == this.list) {
        while (domPos != item.dom)
          rm3();
        domPos = item.dom.nextSibling;
      } else {
        this.list.insertBefore(item.dom, domPos);
      }
    }
    while (domPos)
      rm3();
  }
  moveSelection(selectedIndex) {
    if (this.selectedIndex < 0)
      return;
    let field = this.view.state.field(lintState);
    let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
    if (!selection)
      return;
    this.view.dispatch({
      selection: { anchor: selection.from, head: selection.to },
      scrollIntoView: true,
      effects: movePanelSelection.of(selection)
    });
  }
  static open(view) {
    return new _LintPanel(view);
  }
};
function svg(content2, attrs = `viewBox="0 0 40 40"`) {
  return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${attrs}>${encodeURIComponent(content2)}</svg>')`;
}
function underline(color) {
  return svg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>`, `width="6" height="3"`);
}
var baseTheme5 = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-diagnostic": {
    padding: "3px 6px 3px 8px",
    marginLeft: "-1px",
    display: "block",
    whiteSpace: "pre-wrap"
  },
  ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
  ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
  ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
  ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
  ".cm-diagnosticAction": {
    font: "inherit",
    border: "none",
    padding: "2px 4px",
    backgroundColor: "#444",
    color: "white",
    borderRadius: "3px",
    marginLeft: "8px",
    cursor: "pointer"
  },
  ".cm-diagnosticSource": {
    fontSize: "70%",
    opacity: 0.7
  },
  ".cm-lintRange": {
    backgroundPosition: "left bottom",
    backgroundRepeat: "repeat-x",
    paddingBottom: "0.7px"
  },
  ".cm-lintRange-error": { backgroundImage: /* @__PURE__ */ underline("#d11") },
  ".cm-lintRange-warning": { backgroundImage: /* @__PURE__ */ underline("orange") },
  ".cm-lintRange-info": { backgroundImage: /* @__PURE__ */ underline("#999") },
  ".cm-lintRange-hint": { backgroundImage: /* @__PURE__ */ underline("#66d") },
  ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
  ".cm-tooltip-lint": {
    padding: 0,
    margin: 0
  },
  ".cm-lintPoint": {
    position: "relative",
    "&:after": {
      content: '""',
      position: "absolute",
      bottom: 0,
      left: "-2px",
      borderLeft: "3px solid transparent",
      borderRight: "3px solid transparent",
      borderBottom: "4px solid #d11"
    }
  },
  ".cm-lintPoint-warning": {
    "&:after": { borderBottomColor: "orange" }
  },
  ".cm-lintPoint-info": {
    "&:after": { borderBottomColor: "#999" }
  },
  ".cm-lintPoint-hint": {
    "&:after": { borderBottomColor: "#66d" }
  },
  ".cm-panel.cm-panel-lint": {
    position: "relative",
    "& ul": {
      maxHeight: "100px",
      overflowY: "auto",
      "& [aria-selected]": {
        backgroundColor: "#ddd",
        "& u": { textDecoration: "underline" }
      },
      "&:focus [aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      },
      "& u": { textDecoration: "none" },
      padding: 0,
      margin: 0
    },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "2px",
      background: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    }
  }
});
function severityWeight(sev) {
  return sev == "error" ? 4 : sev == "warning" ? 3 : sev == "info" ? 2 : 1;
}
var LintGutterMarker = class extends GutterMarker {
  constructor(diagnostics) {
    super();
    this.diagnostics = diagnostics;
    this.severity = diagnostics.reduce((max, d2) => severityWeight(max) < severityWeight(d2.severity) ? d2.severity : max, "hint");
  }
  toDOM(view) {
    let elt2 = document.createElement("div");
    elt2.className = "cm-lint-marker cm-lint-marker-" + this.severity;
    let diagnostics = this.diagnostics;
    let diagnosticsFilter = view.state.facet(lintGutterConfig).tooltipFilter;
    if (diagnosticsFilter)
      diagnostics = diagnosticsFilter(diagnostics, view.state);
    if (diagnostics.length)
      elt2.onmouseover = () => gutterMarkerMouseOver(view, elt2, diagnostics);
    return elt2;
  }
};
function trackHoverOn(view, marker) {
  let mousemove = (event) => {
    let rect = marker.getBoundingClientRect();
    if (event.clientX > rect.left - 10 && event.clientX < rect.right + 10 && event.clientY > rect.top - 10 && event.clientY < rect.bottom + 10)
      return;
    for (let target = event.target; target; target = target.parentNode) {
      if (target.nodeType == 1 && target.classList.contains("cm-tooltip-lint"))
        return;
    }
    window.removeEventListener("mousemove", mousemove);
    if (view.state.field(lintGutterTooltip))
      view.dispatch({ effects: setLintGutterTooltip.of(null) });
  };
  window.addEventListener("mousemove", mousemove);
}
function gutterMarkerMouseOver(view, marker, diagnostics) {
  function hovered() {
    let line = view.elementAtHeight(marker.getBoundingClientRect().top + 5 - view.documentTop);
    const linePos = view.coordsAtPos(line.from);
    if (linePos) {
      view.dispatch({ effects: setLintGutterTooltip.of({
        pos: line.from,
        above: false,
        create() {
          return {
            dom: diagnosticsTooltip(view, diagnostics),
            getCoords: () => marker.getBoundingClientRect()
          };
        }
      }) });
    }
    marker.onmouseout = marker.onmousemove = null;
    trackHoverOn(view, marker);
  }
  let { hoverTime } = view.state.facet(lintGutterConfig);
  let hoverTimeout = setTimeout(hovered, hoverTime);
  marker.onmouseout = () => {
    clearTimeout(hoverTimeout);
    marker.onmouseout = marker.onmousemove = null;
  };
  marker.onmousemove = () => {
    clearTimeout(hoverTimeout);
    hoverTimeout = setTimeout(hovered, hoverTime);
  };
}
function markersForDiagnostics(doc2, diagnostics) {
  let byLine = /* @__PURE__ */ Object.create(null);
  for (let diagnostic of diagnostics) {
    let line = doc2.lineAt(diagnostic.from);
    (byLine[line.from] || (byLine[line.from] = [])).push(diagnostic);
  }
  let markers = [];
  for (let line in byLine) {
    markers.push(new LintGutterMarker(byLine[line]).range(+line));
  }
  return RangeSet.of(markers, true);
}
var lintGutterExtension = /* @__PURE__ */ gutter({
  class: "cm-gutter-lint",
  markers: (view) => view.state.field(lintGutterMarkers)
});
var lintGutterMarkers = /* @__PURE__ */ StateField.define({
  create() {
    return RangeSet.empty;
  },
  update(markers, tr2) {
    markers = markers.map(tr2.changes);
    let diagnosticFilter = tr2.state.facet(lintGutterConfig).markerFilter;
    for (let effect of tr2.effects) {
      if (effect.is(setDiagnosticsEffect)) {
        let diagnostics = effect.value;
        if (diagnosticFilter)
          diagnostics = diagnosticFilter(diagnostics || [], tr2.state);
        markers = markersForDiagnostics(tr2.state.doc, diagnostics.slice(0));
      }
    }
    return markers;
  }
});
var setLintGutterTooltip = /* @__PURE__ */ StateEffect.define();
var lintGutterTooltip = /* @__PURE__ */ StateField.define({
  create() {
    return null;
  },
  update(tooltip, tr2) {
    if (tooltip && tr2.docChanged)
      tooltip = hideTooltip(tr2, tooltip) ? null : Object.assign(Object.assign({}, tooltip), { pos: tr2.changes.mapPos(tooltip.pos) });
    return tr2.effects.reduce((t3, e25) => e25.is(setLintGutterTooltip) ? e25.value : t3, tooltip);
  },
  provide: (field) => showTooltip.from(field)
});
var lintGutterTheme = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-gutter-lint": {
    width: "1.4em",
    "& .cm-gutterElement": {
      padding: ".2em"
    }
  },
  ".cm-lint-marker": {
    width: "1em",
    height: "1em"
  },
  ".cm-lint-marker-info": {
    content: /* @__PURE__ */ svg(`<path fill="#aaf" stroke="#77e" stroke-width="6" stroke-linejoin="round" d="M5 5L35 5L35 35L5 35Z"/>`)
  },
  ".cm-lint-marker-warning": {
    content: /* @__PURE__ */ svg(`<path fill="#fe8" stroke="#fd7" stroke-width="6" stroke-linejoin="round" d="M20 6L37 35L3 35Z"/>`)
  },
  ".cm-lint-marker-error": {
    content: /* @__PURE__ */ svg(`<circle cx="20" cy="20" r="15" fill="#f87" stroke="#f43" stroke-width="6"/>`)
  }
});
var lintExtensions = [
  lintState,
  /* @__PURE__ */ EditorView.decorations.compute([lintState], (state) => {
    let { selected, panel } = state.field(lintState);
    return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([
      activeMark.range(selected.from, selected.to)
    ]);
  }),
  /* @__PURE__ */ hoverTooltip(lintTooltip, { hideOn: hideTooltip }),
  baseTheme5
];
var lintGutterConfig = /* @__PURE__ */ Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      hoverTime: 300,
      markerFilter: null,
      tooltipFilter: null
    });
  }
});
function lintGutter(config2 = {}) {
  return [lintGutterConfig.of(config2), lintGutterMarkers, lintGutterExtension, lintGutterTheme, lintGutterTooltip];
}

// node_modules/codemirror/dist/index.js
var basicSetup = /* @__PURE__ */ (() => [
  lineNumbers(),
  highlightActiveLineGutter(),
  highlightSpecialChars(),
  history(),
  foldGutter(),
  drawSelection(),
  dropCursor(),
  EditorState.allowMultipleSelections.of(true),
  indentOnInput(),
  syntaxHighlighting(defaultHighlightStyle, { fallback: true }),
  bracketMatching(),
  closeBrackets(),
  autocompletion(),
  rectangularSelection(),
  crosshairCursor(),
  highlightActiveLine(),
  highlightSelectionMatches(),
  keymap.of([
    ...closeBracketsKeymap,
    ...defaultKeymap,
    ...searchKeymap,
    ...historyKeymap,
    ...foldKeymap,
    ...completionKeymap,
    ...lintKeymap
  ])
])();

// node_modules/@replit/codemirror-vim/dist/index.js
function initVim(CodeMirror2) {
  var Pos2 = CodeMirror2.Pos;
  function updateSelectionForSurrogateCharacters(cm2, curStart, curEnd) {
    if (curStart.line === curEnd.line && curStart.ch >= curEnd.ch - 1) {
      var text = cm2.getLine(curStart.line);
      var charCode = text.charCodeAt(curStart.ch);
      if (55296 <= charCode && charCode <= 55551) {
        curEnd.ch += 1;
      }
    }
    return { start: curStart, end: curEnd };
  }
  var defaultKeymap2 = [
    // Key to key mapping. This goes first to make it possible to override
    // existing mappings.
    { keys: "<Left>", type: "keyToKey", toKeys: "h" },
    { keys: "<Right>", type: "keyToKey", toKeys: "l" },
    { keys: "<Up>", type: "keyToKey", toKeys: "k" },
    { keys: "<Down>", type: "keyToKey", toKeys: "j" },
    { keys: "g<Up>", type: "keyToKey", toKeys: "gk" },
    { keys: "g<Down>", type: "keyToKey", toKeys: "gj" },
    { keys: "<Space>", type: "keyToKey", toKeys: "l" },
    { keys: "<BS>", type: "keyToKey", toKeys: "h" },
    { keys: "<Del>", type: "keyToKey", toKeys: "x" },
    { keys: "<C-Space>", type: "keyToKey", toKeys: "W" },
    { keys: "<C-BS>", type: "keyToKey", toKeys: "B" },
    { keys: "<S-Space>", type: "keyToKey", toKeys: "w" },
    { keys: "<S-BS>", type: "keyToKey", toKeys: "b" },
    { keys: "<C-n>", type: "keyToKey", toKeys: "j" },
    { keys: "<C-p>", type: "keyToKey", toKeys: "k" },
    { keys: "<C-[>", type: "keyToKey", toKeys: "<Esc>" },
    { keys: "<C-c>", type: "keyToKey", toKeys: "<Esc>" },
    { keys: "<C-[>", type: "keyToKey", toKeys: "<Esc>", context: "insert" },
    { keys: "<C-c>", type: "keyToKey", toKeys: "<Esc>", context: "insert" },
    { keys: "<C-Esc>", type: "keyToKey", toKeys: "<Esc>" },
    // ipad keyboard sends C-Esc instead of C-[
    { keys: "<C-Esc>", type: "keyToKey", toKeys: "<Esc>", context: "insert" },
    { keys: "s", type: "keyToKey", toKeys: "cl", context: "normal" },
    { keys: "s", type: "keyToKey", toKeys: "c", context: "visual" },
    { keys: "S", type: "keyToKey", toKeys: "cc", context: "normal" },
    { keys: "S", type: "keyToKey", toKeys: "VdO", context: "visual" },
    { keys: "<Home>", type: "keyToKey", toKeys: "0" },
    { keys: "<End>", type: "keyToKey", toKeys: "$" },
    { keys: "<PageUp>", type: "keyToKey", toKeys: "<C-b>" },
    { keys: "<PageDown>", type: "keyToKey", toKeys: "<C-f>" },
    { keys: "<CR>", type: "keyToKey", toKeys: "j^", context: "normal" },
    { keys: "<Ins>", type: "keyToKey", toKeys: "i", context: "normal" },
    { keys: "<Ins>", type: "action", action: "toggleOverwrite", context: "insert" },
    // Motions
    { keys: "H", type: "motion", motion: "moveToTopLine", motionArgs: { linewise: true, toJumplist: true } },
    { keys: "M", type: "motion", motion: "moveToMiddleLine", motionArgs: { linewise: true, toJumplist: true } },
    { keys: "L", type: "motion", motion: "moveToBottomLine", motionArgs: { linewise: true, toJumplist: true } },
    { keys: "h", type: "motion", motion: "moveByCharacters", motionArgs: { forward: false } },
    { keys: "l", type: "motion", motion: "moveByCharacters", motionArgs: { forward: true } },
    { keys: "j", type: "motion", motion: "moveByLines", motionArgs: { forward: true, linewise: true } },
    { keys: "k", type: "motion", motion: "moveByLines", motionArgs: { forward: false, linewise: true } },
    { keys: "gj", type: "motion", motion: "moveByDisplayLines", motionArgs: { forward: true } },
    { keys: "gk", type: "motion", motion: "moveByDisplayLines", motionArgs: { forward: false } },
    { keys: "w", type: "motion", motion: "moveByWords", motionArgs: { forward: true, wordEnd: false } },
    { keys: "W", type: "motion", motion: "moveByWords", motionArgs: { forward: true, wordEnd: false, bigWord: true } },
    { keys: "e", type: "motion", motion: "moveByWords", motionArgs: { forward: true, wordEnd: true, inclusive: true } },
    { keys: "E", type: "motion", motion: "moveByWords", motionArgs: { forward: true, wordEnd: true, bigWord: true, inclusive: true } },
    { keys: "b", type: "motion", motion: "moveByWords", motionArgs: { forward: false, wordEnd: false } },
    { keys: "B", type: "motion", motion: "moveByWords", motionArgs: { forward: false, wordEnd: false, bigWord: true } },
    { keys: "ge", type: "motion", motion: "moveByWords", motionArgs: { forward: false, wordEnd: true, inclusive: true } },
    { keys: "gE", type: "motion", motion: "moveByWords", motionArgs: { forward: false, wordEnd: true, bigWord: true, inclusive: true } },
    { keys: "{", type: "motion", motion: "moveByParagraph", motionArgs: { forward: false, toJumplist: true } },
    { keys: "}", type: "motion", motion: "moveByParagraph", motionArgs: { forward: true, toJumplist: true } },
    { keys: "(", type: "motion", motion: "moveBySentence", motionArgs: { forward: false } },
    { keys: ")", type: "motion", motion: "moveBySentence", motionArgs: { forward: true } },
    { keys: "<C-f>", type: "motion", motion: "moveByPage", motionArgs: { forward: true } },
    { keys: "<C-b>", type: "motion", motion: "moveByPage", motionArgs: { forward: false } },
    { keys: "<C-d>", type: "motion", motion: "moveByScroll", motionArgs: { forward: true, explicitRepeat: true } },
    { keys: "<C-u>", type: "motion", motion: "moveByScroll", motionArgs: { forward: false, explicitRepeat: true } },
    { keys: "gg", type: "motion", motion: "moveToLineOrEdgeOfDocument", motionArgs: { forward: false, explicitRepeat: true, linewise: true, toJumplist: true } },
    { keys: "G", type: "motion", motion: "moveToLineOrEdgeOfDocument", motionArgs: { forward: true, explicitRepeat: true, linewise: true, toJumplist: true } },
    { keys: "g$", type: "motion", motion: "moveToEndOfDisplayLine" },
    { keys: "g^", type: "motion", motion: "moveToStartOfDisplayLine" },
    { keys: "g0", type: "motion", motion: "moveToStartOfDisplayLine" },
    { keys: "0", type: "motion", motion: "moveToStartOfLine" },
    { keys: "^", type: "motion", motion: "moveToFirstNonWhiteSpaceCharacter" },
    { keys: "+", type: "motion", motion: "moveByLines", motionArgs: { forward: true, toFirstChar: true } },
    { keys: "-", type: "motion", motion: "moveByLines", motionArgs: { forward: false, toFirstChar: true } },
    { keys: "_", type: "motion", motion: "moveByLines", motionArgs: { forward: true, toFirstChar: true, repeatOffset: -1 } },
    { keys: "$", type: "motion", motion: "moveToEol", motionArgs: { inclusive: true } },
    { keys: "%", type: "motion", motion: "moveToMatchedSymbol", motionArgs: { inclusive: true, toJumplist: true } },
    { keys: "f<character>", type: "motion", motion: "moveToCharacter", motionArgs: { forward: true, inclusive: true } },
    { keys: "F<character>", type: "motion", motion: "moveToCharacter", motionArgs: { forward: false } },
    { keys: "t<character>", type: "motion", motion: "moveTillCharacter", motionArgs: { forward: true, inclusive: true } },
    { keys: "T<character>", type: "motion", motion: "moveTillCharacter", motionArgs: { forward: false } },
    { keys: ";", type: "motion", motion: "repeatLastCharacterSearch", motionArgs: { forward: true } },
    { keys: ",", type: "motion", motion: "repeatLastCharacterSearch", motionArgs: { forward: false } },
    { keys: "'<register>", type: "motion", motion: "goToMark", motionArgs: { toJumplist: true, linewise: true } },
    { keys: "`<register>", type: "motion", motion: "goToMark", motionArgs: { toJumplist: true } },
    { keys: "]`", type: "motion", motion: "jumpToMark", motionArgs: { forward: true } },
    { keys: "[`", type: "motion", motion: "jumpToMark", motionArgs: { forward: false } },
    { keys: "]'", type: "motion", motion: "jumpToMark", motionArgs: { forward: true, linewise: true } },
    { keys: "['", type: "motion", motion: "jumpToMark", motionArgs: { forward: false, linewise: true } },
    // the next two aren't motions but must come before more general motion declarations
    { keys: "]p", type: "action", action: "paste", isEdit: true, actionArgs: { after: true, isEdit: true, matchIndent: true } },
    { keys: "[p", type: "action", action: "paste", isEdit: true, actionArgs: { after: false, isEdit: true, matchIndent: true } },
    { keys: "]<character>", type: "motion", motion: "moveToSymbol", motionArgs: { forward: true, toJumplist: true } },
    { keys: "[<character>", type: "motion", motion: "moveToSymbol", motionArgs: { forward: false, toJumplist: true } },
    { keys: "|", type: "motion", motion: "moveToColumn" },
    { keys: "o", type: "motion", motion: "moveToOtherHighlightedEnd", context: "visual" },
    { keys: "O", type: "motion", motion: "moveToOtherHighlightedEnd", motionArgs: { sameLine: true }, context: "visual" },
    // Operators
    { keys: "d", type: "operator", operator: "delete" },
    { keys: "y", type: "operator", operator: "yank" },
    { keys: "c", type: "operator", operator: "change" },
    { keys: "=", type: "operator", operator: "indentAuto" },
    { keys: ">", type: "operator", operator: "indent", operatorArgs: { indentRight: true } },
    { keys: "<", type: "operator", operator: "indent", operatorArgs: { indentRight: false } },
    { keys: "g~", type: "operator", operator: "changeCase" },
    { keys: "gu", type: "operator", operator: "changeCase", operatorArgs: { toLower: true }, isEdit: true },
    { keys: "gU", type: "operator", operator: "changeCase", operatorArgs: { toLower: false }, isEdit: true },
    { keys: "n", type: "motion", motion: "findNext", motionArgs: { forward: true, toJumplist: true } },
    { keys: "N", type: "motion", motion: "findNext", motionArgs: { forward: false, toJumplist: true } },
    { keys: "gn", type: "motion", motion: "findAndSelectNextInclusive", motionArgs: { forward: true } },
    { keys: "gN", type: "motion", motion: "findAndSelectNextInclusive", motionArgs: { forward: false } },
    { keys: "gq", type: "operator", operator: "hardWrap" },
    { keys: "gw", type: "operator", operator: "hardWrap", operatorArgs: { keepCursor: true } },
    // Operator-Motion dual commands
    { keys: "x", type: "operatorMotion", operator: "delete", motion: "moveByCharacters", motionArgs: { forward: true }, operatorMotionArgs: { visualLine: false } },
    { keys: "X", type: "operatorMotion", operator: "delete", motion: "moveByCharacters", motionArgs: { forward: false }, operatorMotionArgs: { visualLine: true } },
    { keys: "D", type: "operatorMotion", operator: "delete", motion: "moveToEol", motionArgs: { inclusive: true }, context: "normal" },
    { keys: "D", type: "operator", operator: "delete", operatorArgs: { linewise: true }, context: "visual" },
    { keys: "Y", type: "operatorMotion", operator: "yank", motion: "expandToLine", motionArgs: { linewise: true }, context: "normal" },
    { keys: "Y", type: "operator", operator: "yank", operatorArgs: { linewise: true }, context: "visual" },
    { keys: "C", type: "operatorMotion", operator: "change", motion: "moveToEol", motionArgs: { inclusive: true }, context: "normal" },
    { keys: "C", type: "operator", operator: "change", operatorArgs: { linewise: true }, context: "visual" },
    { keys: "~", type: "operatorMotion", operator: "changeCase", motion: "moveByCharacters", motionArgs: { forward: true }, operatorArgs: { shouldMoveCursor: true }, context: "normal" },
    { keys: "~", type: "operator", operator: "changeCase", context: "visual" },
    { keys: "<C-u>", type: "operatorMotion", operator: "delete", motion: "moveToStartOfLine", context: "insert" },
    { keys: "<C-w>", type: "operatorMotion", operator: "delete", motion: "moveByWords", motionArgs: { forward: false, wordEnd: false }, context: "insert" },
    //ignore C-w in normal mode
    { keys: "<C-w>", type: "idle", context: "normal" },
    // Actions
    { keys: "<C-i>", type: "action", action: "jumpListWalk", actionArgs: { forward: true } },
    { keys: "<C-o>", type: "action", action: "jumpListWalk", actionArgs: { forward: false } },
    { keys: "<C-e>", type: "action", action: "scroll", actionArgs: { forward: true, linewise: true } },
    { keys: "<C-y>", type: "action", action: "scroll", actionArgs: { forward: false, linewise: true } },
    { keys: "a", type: "action", action: "enterInsertMode", isEdit: true, actionArgs: { insertAt: "charAfter" }, context: "normal" },
    { keys: "A", type: "action", action: "enterInsertMode", isEdit: true, actionArgs: { insertAt: "eol" }, context: "normal" },
    { keys: "A", type: "action", action: "enterInsertMode", isEdit: true, actionArgs: { insertAt: "endOfSelectedArea" }, context: "visual" },
    { keys: "i", type: "action", action: "enterInsertMode", isEdit: true, actionArgs: { insertAt: "inplace" }, context: "normal" },
    { keys: "gi", type: "action", action: "enterInsertMode", isEdit: true, actionArgs: { insertAt: "lastEdit" }, context: "normal" },
    { keys: "I", type: "action", action: "enterInsertMode", isEdit: true, actionArgs: { insertAt: "firstNonBlank" }, context: "normal" },
    { keys: "gI", type: "action", action: "enterInsertMode", isEdit: true, actionArgs: { insertAt: "bol" }, context: "normal" },
    { keys: "I", type: "action", action: "enterInsertMode", isEdit: true, actionArgs: { insertAt: "startOfSelectedArea" }, context: "visual" },
    { keys: "o", type: "action", action: "newLineAndEnterInsertMode", isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: true }, context: "normal" },
    { keys: "O", type: "action", action: "newLineAndEnterInsertMode", isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: false }, context: "normal" },
    { keys: "v", type: "action", action: "toggleVisualMode" },
    { keys: "V", type: "action", action: "toggleVisualMode", actionArgs: { linewise: true } },
    { keys: "<C-v>", type: "action", action: "toggleVisualMode", actionArgs: { blockwise: true } },
    { keys: "<C-q>", type: "action", action: "toggleVisualMode", actionArgs: { blockwise: true } },
    { keys: "gv", type: "action", action: "reselectLastSelection" },
    { keys: "J", type: "action", action: "joinLines", isEdit: true },
    { keys: "gJ", type: "action", action: "joinLines", actionArgs: { keepSpaces: true }, isEdit: true },
    { keys: "p", type: "action", action: "paste", isEdit: true, actionArgs: { after: true, isEdit: true } },
    { keys: "P", type: "action", action: "paste", isEdit: true, actionArgs: { after: false, isEdit: true } },
    { keys: "r<character>", type: "action", action: "replace", isEdit: true },
    { keys: "@<register>", type: "action", action: "replayMacro" },
    { keys: "q<register>", type: "action", action: "enterMacroRecordMode" },
    // Handle Replace-mode as a special case of insert mode.
    { keys: "R", type: "action", action: "enterInsertMode", isEdit: true, actionArgs: { replace: true }, context: "normal" },
    { keys: "R", type: "operator", operator: "change", operatorArgs: { linewise: true, fullLine: true }, context: "visual", exitVisualBlock: true },
    { keys: "u", type: "action", action: "undo", context: "normal" },
    { keys: "u", type: "operator", operator: "changeCase", operatorArgs: { toLower: true }, context: "visual", isEdit: true },
    { keys: "U", type: "operator", operator: "changeCase", operatorArgs: { toLower: false }, context: "visual", isEdit: true },
    { keys: "<C-r>", type: "action", action: "redo" },
    { keys: "m<register>", type: "action", action: "setMark" },
    { keys: '"<register>', type: "action", action: "setRegister" },
    { keys: "<C-r><register>", type: "action", action: "insertRegister", context: "insert", isEdit: true },
    { keys: "<C-o>", type: "action", action: "oneNormalCommand", context: "insert" },
    { keys: "zz", type: "action", action: "scrollToCursor", actionArgs: { position: "center" } },
    { keys: "z.", type: "action", action: "scrollToCursor", actionArgs: { position: "center" }, motion: "moveToFirstNonWhiteSpaceCharacter" },
    { keys: "zt", type: "action", action: "scrollToCursor", actionArgs: { position: "top" } },
    { keys: "z<CR>", type: "action", action: "scrollToCursor", actionArgs: { position: "top" }, motion: "moveToFirstNonWhiteSpaceCharacter" },
    { keys: "zb", type: "action", action: "scrollToCursor", actionArgs: { position: "bottom" } },
    { keys: "z-", type: "action", action: "scrollToCursor", actionArgs: { position: "bottom" }, motion: "moveToFirstNonWhiteSpaceCharacter" },
    { keys: ".", type: "action", action: "repeatLastEdit" },
    { keys: "<C-a>", type: "action", action: "incrementNumberToken", isEdit: true, actionArgs: { increase: true, backtrack: false } },
    { keys: "<C-x>", type: "action", action: "incrementNumberToken", isEdit: true, actionArgs: { increase: false, backtrack: false } },
    { keys: "<C-t>", type: "action", action: "indent", actionArgs: { indentRight: true }, context: "insert" },
    { keys: "<C-d>", type: "action", action: "indent", actionArgs: { indentRight: false }, context: "insert" },
    // Text object motions
    { keys: "a<register>", type: "motion", motion: "textObjectManipulation" },
    { keys: "i<register>", type: "motion", motion: "textObjectManipulation", motionArgs: { textObjectInner: true } },
    // Search
    { keys: "/", type: "search", searchArgs: { forward: true, querySrc: "prompt", toJumplist: true } },
    { keys: "?", type: "search", searchArgs: { forward: false, querySrc: "prompt", toJumplist: true } },
    { keys: "*", type: "search", searchArgs: { forward: true, querySrc: "wordUnderCursor", wholeWordOnly: true, toJumplist: true } },
    { keys: "#", type: "search", searchArgs: { forward: false, querySrc: "wordUnderCursor", wholeWordOnly: true, toJumplist: true } },
    { keys: "g*", type: "search", searchArgs: { forward: true, querySrc: "wordUnderCursor", toJumplist: true } },
    { keys: "g#", type: "search", searchArgs: { forward: false, querySrc: "wordUnderCursor", toJumplist: true } },
    // Ex command
    { keys: ":", type: "ex" }
  ];
  var defaultKeymapLength = defaultKeymap2.length;
  var defaultExCommandMap = [
    { name: "colorscheme", shortName: "colo" },
    { name: "map" },
    { name: "imap", shortName: "im" },
    { name: "nmap", shortName: "nm" },
    { name: "vmap", shortName: "vm" },
    { name: "omap", shortName: "om" },
    { name: "noremap", shortName: "no" },
    { name: "nnoremap", shortName: "nn" },
    { name: "vnoremap", shortName: "vn" },
    { name: "inoremap", shortName: "ino" },
    { name: "onoremap", shortName: "ono" },
    { name: "unmap" },
    { name: "mapclear", shortName: "mapc" },
    { name: "nmapclear", shortName: "nmapc" },
    { name: "vmapclear", shortName: "vmapc" },
    { name: "imapclear", shortName: "imapc" },
    { name: "omapclear", shortName: "omapc" },
    { name: "write", shortName: "w" },
    { name: "undo", shortName: "u" },
    { name: "redo", shortName: "red" },
    { name: "set", shortName: "se" },
    { name: "setlocal", shortName: "setl" },
    { name: "setglobal", shortName: "setg" },
    { name: "sort", shortName: "sor" },
    { name: "substitute", shortName: "s", possiblyAsync: true },
    { name: "startinsert", shortName: "start" },
    { name: "nohlsearch", shortName: "noh" },
    { name: "yank", shortName: "y" },
    { name: "delmarks", shortName: "delm" },
    { name: "registers", shortName: "reg", excludeFromCommandHistory: true },
    { name: "vglobal", shortName: "v" },
    { name: "delete", shortName: "d" },
    { name: "join", shortName: "j" },
    { name: "normal", shortName: "norm" },
    { name: "global", shortName: "g" }
  ];
  var langmap = parseLangmap("");
  function enterVimMode(cm2) {
    cm2.setOption("disableInput", true);
    cm2.setOption("showCursorWhenSelecting", false);
    CodeMirror2.signal(cm2, "vim-mode-change", { mode: "normal" });
    cm2.on("cursorActivity", onCursorActivity);
    maybeInitVimState(cm2);
    CodeMirror2.on(cm2.getInputField(), "paste", getOnPasteFn(cm2));
  }
  function leaveVimMode(cm2) {
    cm2.setOption("disableInput", false);
    cm2.off("cursorActivity", onCursorActivity);
    CodeMirror2.off(cm2.getInputField(), "paste", getOnPasteFn(cm2));
    cm2.state.vim = null;
    if (highlightTimeout) clearTimeout(highlightTimeout);
  }
  function getOnPasteFn(cm2) {
    var vim2 = cm2.state.vim;
    if (!vim2.onPasteFn) {
      vim2.onPasteFn = function() {
        if (!vim2.insertMode) {
          cm2.setCursor(offsetCursor(cm2.getCursor(), 0, 1));
          actions.enterInsertMode(cm2, {}, vim2);
        }
      };
    }
    return vim2.onPasteFn;
  }
  var numberRegex = /[\d]/;
  var wordCharTest = [CodeMirror2.isWordChar, function(ch2) {
    return ch2 && !CodeMirror2.isWordChar(ch2) && !/\s/.test(ch2);
  }], bigWordCharTest = [function(ch2) {
    return /\S/.test(ch2);
  }];
  var validMarks = ["<", ">"];
  var validRegisters = ["-", '"', ".", ":", "_", "/", "+"];
  var latinCharRegex = /^\w$/;
  var upperCaseChars;
  try {
    upperCaseChars = new RegExp("^[\\p{Lu}]$", "u");
  } catch (_2) {
    upperCaseChars = /^[A-Z]$/;
  }
  function isLine(cm2, line) {
    return line >= cm2.firstLine() && line <= cm2.lastLine();
  }
  function isLowerCase(k2) {
    return /^[a-z]$/.test(k2);
  }
  function isMatchableSymbol(k2) {
    return "()[]{}".indexOf(k2) != -1;
  }
  function isNumber(k2) {
    return numberRegex.test(k2);
  }
  function isUpperCase(k2) {
    return upperCaseChars.test(k2);
  }
  function isWhiteSpaceString(k2) {
    return /^\s*$/.test(k2);
  }
  function isEndOfSentenceSymbol(k2) {
    return ".?!".indexOf(k2) != -1;
  }
  function inArray(val, arr) {
    for (var i2 = 0; i2 < arr.length; i2++) {
      if (arr[i2] == val) {
        return true;
      }
    }
    return false;
  }
  var options = {};
  function defineOption(name2, defaultValue, type, aliases, callback) {
    if (defaultValue === void 0 && !callback) {
      throw Error("defaultValue is required unless callback is provided");
    }
    if (!type) {
      type = "string";
    }
    options[name2] = {
      type,
      defaultValue,
      callback
    };
    if (aliases) {
      for (var i2 = 0; i2 < aliases.length; i2++) {
        options[aliases[i2]] = options[name2];
      }
    }
    if (defaultValue) {
      setOption(name2, defaultValue);
    }
  }
  function setOption(name2, value, cm2, cfg) {
    var option = options[name2];
    cfg = cfg || {};
    var scope = cfg.scope;
    if (!option) {
      return new Error("Unknown option: " + name2);
    }
    if (option.type == "boolean") {
      if (value && value !== true) {
        return new Error("Invalid argument: " + name2 + "=" + value);
      } else if (value !== false) {
        value = true;
      }
    }
    if (option.callback) {
      if (scope !== "local") {
        option.callback(value, void 0);
      }
      if (scope !== "global" && cm2) {
        option.callback(value, cm2);
      }
    } else {
      if (scope !== "local") {
        option.value = option.type == "boolean" ? !!value : value;
      }
      if (scope !== "global" && cm2) {
        cm2.state.vim.options[name2] = { value };
      }
    }
  }
  function getOption(name2, cm2, cfg) {
    var option = options[name2];
    cfg = cfg || {};
    var scope = cfg.scope;
    if (!option) {
      return new Error("Unknown option: " + name2);
    }
    if (option.callback) {
      let local = cm2 && option.callback(void 0, cm2);
      if (scope !== "global" && local !== void 0) {
        return local;
      }
      if (scope !== "local") {
        return option.callback();
      }
      return;
    } else {
      let local = scope !== "global" && (cm2 && cm2.state.vim.options[name2]);
      return (local || scope !== "local" && option || {}).value;
    }
  }
  defineOption("filetype", void 0, "string", ["ft"], function(name2, cm2) {
    if (cm2 === void 0) {
      return;
    }
    if (name2 === void 0) {
      let mode = cm2.getOption("mode");
      return mode == "null" ? "" : mode;
    } else {
      let mode = name2 == "" ? "null" : name2;
      cm2.setOption("mode", mode);
    }
  });
  defineOption("textwidth", 80, "number", ["tw"], function(width, cm2) {
    if (cm2 === void 0) {
      return;
    }
    if (width === void 0) {
      var value = cm2.getOption("textwidth");
      return value;
    } else {
      var column = Math.round(
        /**@type {any}*/
        width
      );
      if (column > 1) {
        cm2.setOption("textwidth", column);
      }
    }
  });
  var createCircularJumpList = function() {
    var size = 100;
    var pointer = -1;
    var head = 0;
    var tail = 0;
    var buffer = new Array(size);
    function add2(cm2, oldCur, newCur) {
      var current = pointer % size;
      var curMark = buffer[current];
      function useNextSlot(cursor) {
        var next = ++pointer % size;
        var trashMark = buffer[next];
        if (trashMark) {
          trashMark.clear();
        }
        buffer[next] = cm2.setBookmark(cursor);
      }
      if (curMark) {
        var markPos = curMark.find();
        if (markPos && !cursorEqual(markPos, oldCur)) {
          useNextSlot(oldCur);
        }
      } else {
        useNextSlot(oldCur);
      }
      useNextSlot(newCur);
      head = pointer;
      tail = pointer - size + 1;
      if (tail < 0) {
        tail = 0;
      }
    }
    function move(cm2, offset) {
      pointer += offset;
      if (pointer > head) {
        pointer = head;
      } else if (pointer < tail) {
        pointer = tail;
      }
      var mark = buffer[(size + pointer) % size];
      if (mark && !mark.find()) {
        var inc = offset > 0 ? 1 : -1;
        var newCur;
        var oldCur = cm2.getCursor();
        do {
          pointer += inc;
          mark = buffer[(size + pointer) % size];
          if (mark && (newCur = mark.find()) && !cursorEqual(oldCur, newCur)) {
            break;
          }
        } while (pointer < head && pointer > tail);
      }
      return mark;
    }
    function find2(cm2, offset) {
      var oldPointer = pointer;
      var mark = move(cm2, offset);
      pointer = oldPointer;
      return mark && mark.find();
    }
    return {
      cachedCursor: void 0,
      //used for # and * jumps
      add: add2,
      find: find2,
      move
    };
  };
  var createInsertModeChanges = function(c2) {
    if (c2) {
      return {
        changes: c2.changes,
        expectCursorActivityForChange: c2.expectCursorActivityForChange
      };
    }
    return {
      // Change list
      changes: [],
      // Set to true on change, false on cursorActivity.
      expectCursorActivityForChange: false
    };
  };
  class MacroModeState {
    constructor() {
      this.latestRegister = void 0;
      this.isPlaying = false;
      this.isRecording = false;
      this.replaySearchQueries = [];
      this.onRecordingDone = void 0;
      this.lastInsertModeChanges = createInsertModeChanges();
    }
    exitMacroRecordMode() {
      var macroModeState = vimGlobalState.macroModeState;
      if (macroModeState.onRecordingDone) {
        macroModeState.onRecordingDone();
      }
      macroModeState.onRecordingDone = void 0;
      macroModeState.isRecording = false;
    }
    enterMacroRecordMode(cm2, registerName) {
      var register = vimGlobalState.registerController.getRegister(registerName);
      if (register) {
        register.clear();
        this.latestRegister = registerName;
        if (cm2.openDialog) {
          var template = dom("span", { class: "cm-vim-message" }, "recording @" + registerName);
          this.onRecordingDone = cm2.openDialog(template, null, { bottom: true });
        }
        this.isRecording = true;
      }
    }
  }
  function maybeInitVimState(cm2) {
    if (!cm2.state.vim) {
      cm2.state.vim = {
        inputState: new InputState2(),
        // Vim's input state that triggered the last edit, used to repeat
        // motions and operators with '.'.
        lastEditInputState: void 0,
        // Vim's action command before the last edit, used to repeat actions
        // with '.' and insert mode repeat.
        lastEditActionCommand: void 0,
        // When using jk for navigation, if you move from a longer line to a
        // shorter line, the cursor may clip to the end of the shorter line.
        // If j is pressed again and cursor goes to the next line, the
        // cursor should go back to its horizontal position on the longer
        // line if it can. This is to keep track of the horizontal position.
        lastHPos: -1,
        // Doing the same with screen-position for gj/gk
        lastHSPos: -1,
        // The last motion command run. Cleared if a non-motion command gets
        // executed in between.
        lastMotion: null,
        marks: {},
        insertMode: false,
        insertModeReturn: false,
        // Repeat count for changes made in insert mode, triggered by key
        // sequences like 3,i. Only exists when insertMode is true.
        insertModeRepeat: void 0,
        visualMode: false,
        // If we are in visual line mode. No effect if visualMode is false.
        visualLine: false,
        visualBlock: false,
        lastSelection: null,
        lastPastedText: null,
        sel: {},
        // Buffer-local/window-local values of vim options.
        options: {},
        // Whether the next character should be interpreted literally
        // Necassary for correct implementation of f<character>, r<character> etc.
        // in terms of langmaps.
        expectLiteralNext: false
      };
    }
    return cm2.state.vim;
  }
  var vimGlobalState;
  function resetVimGlobalState() {
    vimGlobalState = {
      // The current search query.
      searchQuery: null,
      // Whether we are searching backwards.
      searchIsReversed: false,
      // Replace part of the last substituted pattern
      lastSubstituteReplacePart: void 0,
      jumpList: createCircularJumpList(),
      macroModeState: new MacroModeState(),
      // Recording latest f, t, F or T motion command.
      lastCharacterSearch: { increment: 0, forward: true, selectedCharacter: "" },
      registerController: new RegisterController({}),
      // search history buffer
      searchHistoryController: new HistoryController(),
      // ex Command history buffer
      exCommandHistoryController: new HistoryController()
    };
    for (var optionName in options) {
      var option = options[optionName];
      option.value = option.defaultValue;
    }
  }
  var lastInsertModeKeyTimer;
  var vimApi = {
    enterVimMode,
    leaveVimMode,
    buildKeyMap: function() {
    },
    // Testing hook, though it might be useful to expose the register
    // controller anyway.
    getRegisterController: function() {
      return vimGlobalState.registerController;
    },
    // Testing hook.
    resetVimGlobalState_: resetVimGlobalState,
    // Testing hook.
    getVimGlobalState_: function() {
      return vimGlobalState;
    },
    // Testing hook.
    maybeInitVimState_: maybeInitVimState,
    suppressErrorLogging: false,
    InsertModeKey,
    /**@type {(lhs: string, rhs: string, ctx: string) => void} */
    map: function(lhs, rhs, ctx) {
      exCommandDispatcher.map(lhs, rhs, ctx);
    },
    /**@type {(lhs: string, ctx: string) => any} */
    unmap: function(lhs, ctx) {
      return exCommandDispatcher.unmap(lhs, ctx);
    },
    // Non-recursive map function.
    // NOTE: This will not create mappings to key maps that aren't present
    // in the default key map. See TODO at bottom of function.
    /**@type {(lhs: string, rhs: string, ctx: string) => void} */
    noremap: function(lhs, rhs, ctx) {
      exCommandDispatcher.map(lhs, rhs, ctx, true);
    },
    // Remove all user-defined mappings for the provided context.
    /**@arg {string} [ctx]} */
    mapclear: function(ctx) {
      var actualLength = defaultKeymap2.length, origLength = defaultKeymapLength;
      var userKeymap = defaultKeymap2.slice(0, actualLength - origLength);
      defaultKeymap2 = defaultKeymap2.slice(actualLength - origLength);
      if (ctx) {
        for (var i2 = userKeymap.length - 1; i2 >= 0; i2--) {
          var mapping = userKeymap[i2];
          if (ctx !== mapping.context) {
            if (mapping.context) {
              this._mapCommand(mapping);
            } else {
              var contexts = ["normal", "insert", "visual"];
              for (var j2 in contexts) {
                if (contexts[j2] !== ctx) {
                  var newMapping = Object.assign({}, mapping);
                  newMapping.context = contexts[j2];
                  this._mapCommand(newMapping);
                }
              }
            }
          }
        }
      }
    },
    langmap: updateLangmap,
    vimKeyFromEvent,
    // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace
    // them, or somehow make them work with the existing CodeMirror setOption/getOption API.
    setOption,
    getOption,
    defineOption,
    /**@type {(name: string, prefix: string|undefined, func: ExFn) => void} */
    defineEx: function(name2, prefix, func) {
      if (!prefix) {
        prefix = name2;
      } else if (name2.indexOf(prefix) !== 0) {
        throw new Error('(Vim.defineEx) "' + prefix + '" is not a prefix of "' + name2 + '", command not registered');
      }
      exCommands[name2] = func;
      exCommandDispatcher.commandMap_[prefix] = { name: name2, shortName: prefix, type: "api" };
    },
    /**@type {(cm: CodeMirror, key: string, origin: string) => undefined | boolean} */
    handleKey: function(cm2, key, origin) {
      var command2 = this.findKey(cm2, key, origin);
      if (typeof command2 === "function") {
        return command2();
      }
    },
    multiSelectHandleKey,
    /**
     * This is the outermost function called by CodeMirror, after keys have
     * been mapped to their Vim equivalents.
     *
     * Finds a command based on the key (and cached keys if there is a
     * multi-key sequence). Returns `undefined` if no key is matched, a noop
     * function if a partial match is found (multi-key), and a function to
     * execute the bound command if a a key is matched. The function always
     * returns true.
     */
    /**@type {(cm_: CodeMirror, key: string, origin?: string| undefined) => (() => boolean) | undefined} */
    findKey: function(cm_, key, origin) {
      var vim2 = maybeInitVimState(cm_);
      var cm2 = (
        /**@type {CodeMirrorV}*/
        cm_
      );
      function handleMacroRecording() {
        var macroModeState = vimGlobalState.macroModeState;
        if (macroModeState.isRecording) {
          if (key == "q") {
            macroModeState.exitMacroRecordMode();
            clearInputState(cm2);
            return true;
          }
          if (origin != "mapping") {
            logKey(macroModeState, key);
          }
        }
      }
      function handleEsc() {
        if (key == "<Esc>") {
          if (vim2.visualMode) {
            exitVisualMode(cm2);
          } else if (vim2.insertMode) {
            exitInsertMode(cm2);
          } else {
            return;
          }
          clearInputState(cm2);
          return true;
        }
      }
      function handleKeyInsertMode() {
        if (handleEsc()) {
          return true;
        }
        vim2.inputState.keyBuffer.push(key);
        var keys3 = vim2.inputState.keyBuffer.join("");
        var keysAreChars = key.length == 1;
        var match = commandDispatcher.matchCommand(keys3, defaultKeymap2, vim2.inputState, "insert");
        var changeQueue = vim2.inputState.changeQueue;
        if (match.type == "none") {
          clearInputState(cm2);
          return false;
        } else if (match.type == "partial") {
          if (match.expectLiteralNext) vim2.expectLiteralNext = true;
          if (lastInsertModeKeyTimer) {
            window.clearTimeout(lastInsertModeKeyTimer);
          }
          lastInsertModeKeyTimer = keysAreChars && window.setTimeout(
            function() {
              if (vim2.insertMode && vim2.inputState.keyBuffer.length) {
                clearInputState(cm2);
              }
            },
            getOption("insertModeEscKeysTimeout")
          );
          if (keysAreChars) {
            var selections = cm2.listSelections();
            if (!changeQueue || changeQueue.removed.length != selections.length)
              changeQueue = vim2.inputState.changeQueue = new ChangeQueue();
            changeQueue.inserted += key;
            for (var i2 = 0; i2 < selections.length; i2++) {
              var from = cursorMin(selections[i2].anchor, selections[i2].head);
              var to2 = cursorMax(selections[i2].anchor, selections[i2].head);
              var text = cm2.getRange(from, cm2.state.overwrite ? offsetCursor(to2, 0, 1) : to2);
              changeQueue.removed[i2] = (changeQueue.removed[i2] || "") + text;
            }
          }
          return !keysAreChars;
        }
        vim2.expectLiteralNext = false;
        if (lastInsertModeKeyTimer) {
          window.clearTimeout(lastInsertModeKeyTimer);
        }
        if (match.command && changeQueue) {
          var selections = cm2.listSelections();
          for (var i2 = 0; i2 < selections.length; i2++) {
            var here = selections[i2].head;
            cm2.replaceRange(
              changeQueue.removed[i2] || "",
              offsetCursor(here, 0, -changeQueue.inserted.length),
              here,
              "+input"
            );
          }
          vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop();
        }
        if (!match.command) clearInputState(cm2);
        return match.command;
      }
      function handleKeyNonInsertMode() {
        if (handleMacroRecording() || handleEsc()) {
          return true;
        }
        vim2.inputState.keyBuffer.push(key);
        var keys3 = vim2.inputState.keyBuffer.join("");
        if (/^[1-9]\d*$/.test(keys3)) {
          return true;
        }
        var keysMatcher = /^(\d*)(.*)$/.exec(keys3);
        if (!keysMatcher) {
          clearInputState(cm2);
          return false;
        }
        var context = vim2.visualMode ? "visual" : "normal";
        var mainKey = keysMatcher[2] || keysMatcher[1];
        if (vim2.inputState.operatorShortcut && vim2.inputState.operatorShortcut.slice(-1) == mainKey) {
          mainKey = vim2.inputState.operatorShortcut;
        }
        var match = commandDispatcher.matchCommand(mainKey, defaultKeymap2, vim2.inputState, context);
        if (match.type == "none") {
          clearInputState(cm2);
          return false;
        } else if (match.type == "partial") {
          if (match.expectLiteralNext) vim2.expectLiteralNext = true;
          return true;
        } else if (match.type == "clear") {
          clearInputState(cm2);
          return true;
        }
        vim2.expectLiteralNext = false;
        vim2.inputState.keyBuffer.length = 0;
        keysMatcher = /^(\d*)(.*)$/.exec(keys3);
        if (keysMatcher && keysMatcher[1] && keysMatcher[1] != "0") {
          vim2.inputState.pushRepeatDigit(keysMatcher[1]);
        }
        return match.command;
      }
      var command2;
      if (vim2.insertMode) {
        command2 = handleKeyInsertMode();
      } else {
        command2 = handleKeyNonInsertMode();
      }
      if (command2 === false) {
        return !vim2.insertMode && key.length === 1 ? function() {
          return true;
        } : void 0;
      } else if (command2 === true) {
        return function() {
          return true;
        };
      } else {
        return function() {
          return cm2.operation(function() {
            cm2.curOp.isVimOp = true;
            try {
              if (command2.type == "keyToKey") {
                doKeyToKey(cm2, command2.toKeys, command2);
              } else {
                commandDispatcher.processCommand(cm2, vim2, command2);
              }
            } catch (e25) {
              cm2.state.vim = void 0;
              maybeInitVimState(cm2);
              if (!vimApi.suppressErrorLogging) {
                console["log"](e25);
              }
              throw e25;
            }
            return true;
          });
        };
      }
    },
    handleEx: function(cm2, input) {
      exCommandDispatcher.processCommand(cm2, input);
    },
    defineMotion,
    defineAction,
    defineOperator,
    mapCommand,
    _mapCommand,
    defineRegister,
    exitVisualMode,
    exitInsertMode
  };
  var keyToKeyStack = [];
  var noremap = false;
  var virtualPrompt;
  function sendKeyToPrompt(key) {
    if (key[0] == "<") {
      var lowerKey = key.toLowerCase().slice(1, -1);
      var parts = lowerKey.split("-");
      lowerKey = parts.pop() || "";
      if (lowerKey == "lt") key = "<";
      else if (lowerKey == "space") key = " ";
      else if (lowerKey == "cr") key = "\n";
      else if (vimToCmKeyMap[lowerKey]) {
        var value = virtualPrompt.value;
        var event = {
          key: vimToCmKeyMap[lowerKey],
          target: {
            value,
            selectionEnd: value.length,
            selectionStart: value.length
          }
        };
        if (virtualPrompt.onKeyDown) {
          virtualPrompt.onKeyDown(event, virtualPrompt.value, close);
        }
        if (virtualPrompt && virtualPrompt.onKeyUp) {
          virtualPrompt.onKeyUp(event, virtualPrompt.value, close);
        }
        return;
      }
    }
    if (key == "\n") {
      var prompt2 = virtualPrompt;
      virtualPrompt = null;
      prompt2.onClose && prompt2.onClose(prompt2.value);
    } else {
      virtualPrompt.value = (virtualPrompt.value || "") + key;
    }
    function close(value2) {
      if (typeof value2 == "string") {
        virtualPrompt.value = value2;
      } else {
        virtualPrompt = null;
      }
    }
  }
  function doKeyToKey(cm2, keys3, fromKey) {
    var noremapBefore = noremap;
    if (fromKey) {
      if (keyToKeyStack.indexOf(fromKey) != -1) return;
      keyToKeyStack.push(fromKey);
      noremap = fromKey.noremap != false;
    }
    try {
      var vim2 = maybeInitVimState(cm2);
      var keyRe = /<(?:[CSMA]-)*\w+>|./gi;
      var match;
      while (match = keyRe.exec(keys3)) {
        var key = match[0];
        var wasInsert = vim2.insertMode;
        if (virtualPrompt) {
          sendKeyToPrompt(key);
          continue;
        }
        var result = vimApi.handleKey(cm2, key, "mapping");
        if (!result && wasInsert && vim2.insertMode) {
          if (key[0] == "<") {
            var lowerKey = key.toLowerCase().slice(1, -1);
            var parts = lowerKey.split("-");
            lowerKey = parts.pop() || "";
            if (lowerKey == "lt") key = "<";
            else if (lowerKey == "space") key = " ";
            else if (lowerKey == "cr") key = "\n";
            else if (vimToCmKeyMap.hasOwnProperty(lowerKey)) {
              key = vimToCmKeyMap[lowerKey];
              sendCmKey(cm2, key);
              continue;
            } else {
              key = key[0];
              keyRe.lastIndex = match.index + 1;
            }
          }
          cm2.replaceSelection(key);
        }
      }
    } finally {
      keyToKeyStack.pop();
      noremap = keyToKeyStack.length ? noremapBefore : false;
      if (!keyToKeyStack.length && virtualPrompt) {
        var promptOptions = virtualPrompt;
        virtualPrompt = null;
        showPrompt(cm2, promptOptions);
      }
    }
  }
  var specialKey = {
    Return: "CR",
    Backspace: "BS",
    "Delete": "Del",
    Escape: "Esc",
    Insert: "Ins",
    ArrowLeft: "Left",
    ArrowRight: "Right",
    ArrowUp: "Up",
    ArrowDown: "Down",
    Enter: "CR",
    " ": "Space"
  };
  var ignoredKeys = {
    Shift: 1,
    Alt: 1,
    Command: 1,
    Control: 1,
    CapsLock: 1,
    AltGraph: 1,
    Dead: 1,
    Unidentified: 1
  };
  var vimToCmKeyMap = {};
  "Left|Right|Up|Down|End|Home".split("|").concat(Object.keys(specialKey)).forEach(function(x2) {
    vimToCmKeyMap[(specialKey[x2] || "").toLowerCase()] = vimToCmKeyMap[x2.toLowerCase()] = x2;
  });
  function vimKeyFromEvent(e25, vim2) {
    var key = e25.key;
    if (ignoredKeys[key]) return;
    if (key.length > 1 && key[0] == "n") {
      key = key.replace("Numpad", "");
    }
    key = specialKey[key] || key;
    var name2 = "";
    if (e25.ctrlKey) {
      name2 += "C-";
    }
    if (e25.altKey) {
      name2 += "A-";
    }
    if (e25.metaKey) {
      name2 += "M-";
    }
    if (CodeMirror2.isMac && e25.altKey && !e25.metaKey && !e25.ctrlKey) {
      name2 = name2.slice(2);
    }
    if ((name2 || key.length > 1) && e25.shiftKey) {
      name2 += "S-";
    }
    if (vim2 && !vim2.expectLiteralNext && key.length == 1) {
      if (langmap.keymap && key in langmap.keymap) {
        if (langmap.remapCtrl != false || !name2)
          key = langmap.keymap[key];
      } else if (key.charCodeAt(0) > 255) {
        var code = e25.code?.slice(-1) || "";
        if (!e25.shiftKey) code = code.toLowerCase();
        if (code) key = code;
      }
    }
    name2 += key;
    if (name2.length > 1) {
      name2 = "<" + name2 + ">";
    }
    return name2;
  }
  function updateLangmap(langmapString, remapCtrl) {
    if (langmap.string !== langmapString) {
      langmap = parseLangmap(langmapString);
    }
    langmap.remapCtrl = remapCtrl;
  }
  function parseLangmap(langmapString) {
    let keymap2 = {};
    if (!langmapString) return { keymap: keymap2, string: "" };
    function getEscaped(list) {
      return list.split(/\\?(.)/).filter(Boolean);
    }
    langmapString.split(/((?:[^\\,]|\\.)+),/).map((part) => {
      if (!part) return;
      const semicolon2 = part.split(/((?:[^\\;]|\\.)+);/);
      if (semicolon2.length == 3) {
        const from = getEscaped(semicolon2[1]);
        const to2 = getEscaped(semicolon2[2]);
        if (from.length !== to2.length) return;
        for (let i2 = 0; i2 < from.length; ++i2) keymap2[from[i2]] = to2[i2];
      } else if (semicolon2.length == 1) {
        const pairs = getEscaped(part);
        if (pairs.length % 2 !== 0) return;
        for (let i2 = 0; i2 < pairs.length; i2 += 2) keymap2[pairs[i2]] = pairs[i2 + 1];
      }
    });
    return { keymap: keymap2, string: langmapString };
  }
  defineOption("langmap", void 0, "string", ["lmap"], function(name2, cm2) {
    if (name2 === void 0) {
      return langmap.string;
    } else {
      updateLangmap(name2);
    }
  });
  class InputState2 {
    constructor() {
      this.prefixRepeat = [];
      this.motionRepeat = [];
      this.operator = null;
      this.operatorArgs = null;
      this.motion = null;
      this.motionArgs = null;
      this.keyBuffer = [];
      this.registerName = null;
      this.changeQueue = null;
    }
    pushRepeatDigit(n2) {
      if (!this.operator) {
        this.prefixRepeat = this.prefixRepeat.concat(n2);
      } else {
        this.motionRepeat = this.motionRepeat.concat(n2);
      }
    }
    getRepeat() {
      var repeat = 0;
      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {
        repeat = 1;
        if (this.prefixRepeat.length > 0) {
          repeat *= parseInt(this.prefixRepeat.join(""), 10);
        }
        if (this.motionRepeat.length > 0) {
          repeat *= parseInt(this.motionRepeat.join(""), 10);
        }
      }
      return repeat;
    }
  }
  function clearInputState(cm2, reason) {
    cm2.state.vim.inputState = new InputState2();
    cm2.state.vim.expectLiteralNext = false;
    CodeMirror2.signal(cm2, "vim-command-done", reason);
  }
  function ChangeQueue() {
    this.removed = [];
    this.inserted = "";
  }
  class Register {
    constructor(text, linewise, blockwise) {
      this.clear();
      this.keyBuffer = [text || ""];
      this.insertModeChanges = [];
      this.searchQueries = [];
      this.linewise = !!linewise;
      this.blockwise = !!blockwise;
    }
    setText(text, linewise, blockwise) {
      this.keyBuffer = [text || ""];
      this.linewise = !!linewise;
      this.blockwise = !!blockwise;
    }
    pushText(text, linewise) {
      if (linewise) {
        if (!this.linewise) {
          this.keyBuffer.push("\n");
        }
        this.linewise = true;
      }
      this.keyBuffer.push(text);
    }
    pushInsertModeChanges(changes) {
      this.insertModeChanges.push(createInsertModeChanges(changes));
    }
    pushSearchQuery(query) {
      this.searchQueries.push(query);
    }
    clear() {
      this.keyBuffer = [];
      this.insertModeChanges = [];
      this.searchQueries = [];
      this.linewise = false;
    }
    toString() {
      return this.keyBuffer.join("");
    }
  }
  function defineRegister(name2, register) {
    var registers = vimGlobalState.registerController.registers;
    if (!name2 || name2.length != 1) {
      throw Error("Register name must be 1 character");
    }
    if (registers[name2]) {
      throw Error("Register already defined " + name2);
    }
    registers[name2] = register;
    validRegisters.push(name2);
  }
  class RegisterController {
    /** @arg {Object<string, Register>} registers */
    constructor(registers) {
      this.registers = registers;
      this.unnamedRegister = registers['"'] = new Register();
      registers["."] = new Register();
      registers[":"] = new Register();
      registers["/"] = new Register();
      registers["+"] = new Register();
    }
    pushText(registerName, operator2, text, linewise, blockwise) {
      if (registerName === "_") return;
      if (linewise && text.charAt(text.length - 1) !== "\n") {
        text += "\n";
      }
      var register = this.isValidRegister(registerName) ? this.getRegister(registerName) : null;
      if (!register) {
        switch (operator2) {
          case "yank":
            this.registers["0"] = new Register(text, linewise, blockwise);
            break;
          case "delete":
          case "change":
            if (text.indexOf("\n") == -1) {
              this.registers["-"] = new Register(text, linewise);
            } else {
              this.shiftNumericRegisters_();
              this.registers["1"] = new Register(text, linewise);
            }
            break;
        }
        this.unnamedRegister.setText(text, linewise, blockwise);
        return;
      }
      var append = isUpperCase(registerName);
      if (append) {
        register.pushText(text, linewise);
      } else {
        register.setText(text, linewise, blockwise);
      }
      if (registerName === "+") {
        navigator.clipboard.writeText(text);
      }
      this.unnamedRegister.setText(register.toString(), linewise);
    }
    /**
     * Gets the register named @name.  If one of @name doesn't already exist,
     * create it.  If @name is invalid, return the unnamedRegister.
     * @arg {string} [name]
     */
    getRegister(name2) {
      if (!this.isValidRegister(name2)) {
        return this.unnamedRegister;
      }
      name2 = name2.toLowerCase();
      if (!this.registers[name2]) {
        this.registers[name2] = new Register();
      }
      return this.registers[name2];
    }
    /**@type {{(name: any): name is string}} */
    isValidRegister(name2) {
      return name2 && (inArray(name2, validRegisters) || latinCharRegex.test(name2));
    }
    shiftNumericRegisters_() {
      for (var i2 = 9; i2 >= 2; i2--) {
        this.registers[i2] = this.getRegister("" + (i2 - 1));
      }
    }
  }
  class HistoryController {
    constructor() {
      this.historyBuffer = [];
      this.iterator = 0;
      this.initialPrefix = null;
    }
    // the input argument here acts a user entered prefix for a small time
    // until we start autocompletion in which case it is the autocompleted.
    nextMatch(input, up2) {
      var historyBuffer = this.historyBuffer;
      var dir = up2 ? -1 : 1;
      if (this.initialPrefix === null) this.initialPrefix = input;
      for (var i2 = this.iterator + dir; up2 ? i2 >= 0 : i2 < historyBuffer.length; i2 += dir) {
        var element = historyBuffer[i2];
        for (var j2 = 0; j2 <= element.length; j2++) {
          if (this.initialPrefix == element.substring(0, j2)) {
            this.iterator = i2;
            return element;
          }
        }
      }
      if (i2 >= historyBuffer.length) {
        this.iterator = historyBuffer.length;
        return this.initialPrefix;
      }
      if (i2 < 0) return input;
    }
    pushInput(input) {
      var index = this.historyBuffer.indexOf(input);
      if (index > -1) this.historyBuffer.splice(index, 1);
      if (input.length) this.historyBuffer.push(input);
    }
    reset() {
      this.initialPrefix = null;
      this.iterator = this.historyBuffer.length;
    }
  }
  var commandDispatcher = {
    matchCommand: function(keys3, keyMap, inputState, context) {
      var matches = commandMatches(keys3, keyMap, context, inputState);
      if (!matches.full && !matches.partial) {
        return { type: "none" };
      } else if (!matches.full && matches.partial) {
        return {
          type: "partial",
          expectLiteralNext: matches.partial.length == 1 && matches.partial[0].keys.slice(-11) == "<character>"
          // langmap literal logic
        };
      }
      var bestMatch;
      for (var i2 = 0; i2 < matches.full.length; i2++) {
        var match = matches.full[i2];
        if (!bestMatch) {
          bestMatch = match;
        }
      }
      if (bestMatch.keys.slice(-11) == "<character>" || bestMatch.keys.slice(-10) == "<register>") {
        var character = lastChar(keys3);
        if (!character || character.length > 1) return { type: "clear" };
        inputState.selectedCharacter = character;
      }
      return { type: "full", command: bestMatch };
    },
    /**
     * @arg {CodeMirrorV} cm
     * @arg {vimState} vim
     * @arg {vimKey} command
     */
    processCommand: function(cm2, vim2, command2) {
      vim2.inputState.repeatOverride = command2.repeatOverride;
      switch (command2.type) {
        case "motion":
          this.processMotion(cm2, vim2, command2);
          break;
        case "operator":
          this.processOperator(cm2, vim2, command2);
          break;
        case "operatorMotion":
          this.processOperatorMotion(cm2, vim2, command2);
          break;
        case "action":
          this.processAction(cm2, vim2, command2);
          break;
        case "search":
          this.processSearch(cm2, vim2, command2);
          break;
        case "ex":
        case "keyToEx":
          this.processEx(cm2, vim2, command2);
          break;
      }
    },
    /**
     * @arg {CodeMirrorV} cm
     * @arg {vimState} vim
     * @arg {import("./types").motionCommand|import("./types").operatorMotionCommand} command
     */
    processMotion: function(cm2, vim2, command2) {
      vim2.inputState.motion = command2.motion;
      vim2.inputState.motionArgs = /**@type {MotionArgs}*/
      copyArgs(command2.motionArgs);
      this.evalInput(cm2, vim2);
    },
    /**
     * @arg {CodeMirrorV} cm
     * @arg {vimState} vim
     * @arg {import("./types").operatorCommand|import("./types").operatorMotionCommand} command
     */
    processOperator: function(cm2, vim2, command2) {
      var inputState = vim2.inputState;
      if (inputState.operator) {
        if (inputState.operator == command2.operator) {
          inputState.motion = "expandToLine";
          inputState.motionArgs = { linewise: true, repeat: 1 };
          this.evalInput(cm2, vim2);
          return;
        } else {
          clearInputState(cm2);
        }
      }
      inputState.operator = command2.operator;
      inputState.operatorArgs = copyArgs(command2.operatorArgs);
      if (command2.keys.length > 1) {
        inputState.operatorShortcut = command2.keys;
      }
      if (command2.exitVisualBlock) {
        vim2.visualBlock = false;
        updateCmSelection(cm2);
      }
      if (vim2.visualMode) {
        this.evalInput(cm2, vim2);
      }
    },
    /**
     * @arg {CodeMirrorV} cm
     * @arg {vimState} vim
     * @arg {import("./types").operatorMotionCommand} command
     */
    processOperatorMotion: function(cm2, vim2, command2) {
      var visualMode = vim2.visualMode;
      var operatorMotionArgs = copyArgs(command2.operatorMotionArgs);
      if (operatorMotionArgs) {
        if (visualMode && operatorMotionArgs.visualLine) {
          vim2.visualLine = true;
        }
      }
      this.processOperator(cm2, vim2, command2);
      if (!visualMode) {
        this.processMotion(cm2, vim2, command2);
      }
    },
    /**
     * @arg {CodeMirrorV} cm
     * @arg {vimState} vim
     * @arg {import("./types").actionCommand} command
     */
    processAction: function(cm2, vim2, command2) {
      var inputState = vim2.inputState;
      var repeat = inputState.getRepeat();
      var repeatIsExplicit = !!repeat;
      var actionArgs = (
        /**@type {ActionArgs}*/
        copyArgs(command2.actionArgs) || { repeat: 1 }
      );
      if (inputState.selectedCharacter) {
        actionArgs.selectedCharacter = inputState.selectedCharacter;
      }
      if (command2.operator) {
        this.processOperator(cm2, vim2, command2);
      }
      if (command2.motion) {
        this.processMotion(cm2, vim2, command2);
      }
      if (command2.motion || command2.operator) {
        this.evalInput(cm2, vim2);
      }
      actionArgs.repeat = repeat || 1;
      actionArgs.repeatIsExplicit = repeatIsExplicit;
      actionArgs.registerName = inputState.registerName;
      clearInputState(cm2);
      vim2.lastMotion = null;
      if (command2.isEdit) {
        this.recordLastEdit(vim2, inputState, command2);
      }
      actions[command2.action](cm2, actionArgs, vim2);
    },
    /** @arg {CodeMirrorV} cm @arg {vimState} vim @arg {import("./types").searchCommand} command*/
    processSearch: function(cm2, vim2, command2) {
      if (!cm2.getSearchCursor) {
        return;
      }
      var forward = command2.searchArgs.forward;
      var wholeWordOnly = command2.searchArgs.wholeWordOnly;
      getSearchState(cm2).setReversed(!forward);
      var promptPrefix = forward ? "/" : "?";
      var originalQuery = getSearchState(cm2).getQuery();
      var originalScrollPos = cm2.getScrollInfo();
      function handleQuery(query, ignoreCase, smartCase) {
        vimGlobalState.searchHistoryController.pushInput(query);
        vimGlobalState.searchHistoryController.reset();
        try {
          updateSearchQuery(cm2, query, ignoreCase, smartCase);
        } catch (e25) {
          showConfirm(cm2, "Invalid regex: " + query);
          clearInputState(cm2);
          return;
        }
        commandDispatcher.processMotion(cm2, vim2, {
          keys: "",
          type: "motion",
          motion: "findNext",
          motionArgs: { forward: true, toJumplist: command2.searchArgs.toJumplist }
        });
      }
      function onPromptClose(query) {
        cm2.scrollTo(originalScrollPos.left, originalScrollPos.top);
        handleQuery(
          query,
          true,
          true
          /** smartCase */
        );
        var macroModeState2 = vimGlobalState.macroModeState;
        if (macroModeState2.isRecording) {
          logSearchQuery(macroModeState2, query);
        }
      }
      function onPromptKeyUp(e25, query, close) {
        var keyName2 = vimKeyFromEvent(e25), up2, offset;
        if (keyName2 == "<Up>" || keyName2 == "<Down>") {
          up2 = keyName2 == "<Up>" ? true : false;
          offset = e25.target ? e25.target.selectionEnd : 0;
          query = vimGlobalState.searchHistoryController.nextMatch(query, up2) || "";
          close(query);
          if (offset && e25.target) e25.target.selectionEnd = e25.target.selectionStart = Math.min(offset, e25.target.value.length);
        } else if (keyName2 && keyName2 != "<Left>" && keyName2 != "<Right>") {
          vimGlobalState.searchHistoryController.reset();
        }
        var parsedQuery;
        try {
          parsedQuery = updateSearchQuery(
            cm2,
            query,
            true,
            true
            /** smartCase */
          );
        } catch (e26) {
        }
        if (parsedQuery) {
          cm2.scrollIntoView(findNext2(cm2, !forward, parsedQuery), 30);
        } else {
          clearSearchHighlight(cm2);
          cm2.scrollTo(originalScrollPos.left, originalScrollPos.top);
        }
      }
      function onPromptKeyDown(e25, query, close) {
        var keyName2 = vimKeyFromEvent(e25);
        if (keyName2 == "<Esc>" || keyName2 == "<C-c>" || keyName2 == "<C-[>" || keyName2 == "<BS>" && query == "") {
          vimGlobalState.searchHistoryController.pushInput(query);
          vimGlobalState.searchHistoryController.reset();
          updateSearchQuery(cm2, originalQuery);
          clearSearchHighlight(cm2);
          cm2.scrollTo(originalScrollPos.left, originalScrollPos.top);
          CodeMirror2.e_stop(e25);
          clearInputState(cm2);
          close();
          cm2.focus();
        } else if (keyName2 == "<Up>" || keyName2 == "<Down>") {
          CodeMirror2.e_stop(e25);
        } else if (keyName2 == "<C-u>") {
          CodeMirror2.e_stop(e25);
          close("");
        }
      }
      switch (command2.searchArgs.querySrc) {
        case "prompt":
          var macroModeState = vimGlobalState.macroModeState;
          if (macroModeState.isPlaying) {
            let query2 = macroModeState.replaySearchQueries.shift();
            handleQuery(
              query2,
              true,
              false
              /** smartCase */
            );
          } else {
            showPrompt(cm2, {
              onClose: onPromptClose,
              prefix: promptPrefix,
              desc: "(JavaScript regexp)",
              onKeyUp: onPromptKeyUp,
              onKeyDown: onPromptKeyDown
            });
          }
          break;
        case "wordUnderCursor":
          var word = expandWordUnderCursor(cm2, { noSymbol: true });
          var isKeyword = true;
          if (!word) {
            word = expandWordUnderCursor(cm2, { noSymbol: false });
            isKeyword = false;
          }
          if (!word) {
            showConfirm(cm2, "No word under cursor");
            clearInputState(cm2);
            return;
          }
          let query = cm2.getLine(word.start.line).substring(
            word.start.ch,
            word.end.ch
          );
          if (isKeyword && wholeWordOnly) {
            query = "\\b" + query + "\\b";
          } else {
            query = escapeRegex(query);
          }
          vimGlobalState.jumpList.cachedCursor = cm2.getCursor();
          cm2.setCursor(word.start);
          handleQuery(
            query,
            true,
            false
            /** smartCase */
          );
          break;
      }
    },
    /**
     * @arg {CodeMirrorV} cm
     * @arg {vimState} vim
     * @arg {import("./types").exCommand | import("./types").keyToExCommand} command
     */
    processEx: function(cm2, vim2, command2) {
      function onPromptClose(input) {
        vimGlobalState.exCommandHistoryController.pushInput(input);
        vimGlobalState.exCommandHistoryController.reset();
        exCommandDispatcher.processCommand(cm2, input);
        if (cm2.state.vim) clearInputState(cm2);
      }
      function onPromptKeyDown(e25, input, close) {
        var keyName2 = vimKeyFromEvent(e25), up2, offset;
        if (keyName2 == "<Esc>" || keyName2 == "<C-c>" || keyName2 == "<C-[>" || keyName2 == "<BS>" && input == "") {
          vimGlobalState.exCommandHistoryController.pushInput(input);
          vimGlobalState.exCommandHistoryController.reset();
          CodeMirror2.e_stop(e25);
          clearInputState(cm2);
          close();
          cm2.focus();
        }
        if (keyName2 == "<Up>" || keyName2 == "<Down>") {
          CodeMirror2.e_stop(e25);
          up2 = keyName2 == "<Up>" ? true : false;
          offset = e25.target ? e25.target.selectionEnd : 0;
          input = vimGlobalState.exCommandHistoryController.nextMatch(input, up2) || "";
          close(input);
          if (offset && e25.target) e25.target.selectionEnd = e25.target.selectionStart = Math.min(offset, e25.target.value.length);
        } else if (keyName2 == "<C-u>") {
          CodeMirror2.e_stop(e25);
          close("");
        } else if (keyName2 && keyName2 != "<Left>" && keyName2 != "<Right>") {
          vimGlobalState.exCommandHistoryController.reset();
        }
      }
      if (command2.type == "keyToEx") {
        exCommandDispatcher.processCommand(cm2, command2.exArgs.input);
      } else {
        if (vim2.visualMode) {
          showPrompt(cm2, {
            onClose: onPromptClose,
            prefix: ":",
            value: "'<,'>",
            onKeyDown: onPromptKeyDown,
            selectValueOnOpen: false
          });
        } else {
          showPrompt(cm2, {
            onClose: onPromptClose,
            prefix: ":",
            onKeyDown: onPromptKeyDown
          });
        }
      }
    },
    /**@arg {CodeMirrorV} cm   @arg {vimState} vim */
    evalInput: function(cm2, vim2) {
      var inputState = vim2.inputState;
      var motion = inputState.motion;
      var motionArgs = inputState.motionArgs || { repeat: 1 };
      var operator2 = inputState.operator;
      var operatorArgs = inputState.operatorArgs || {};
      var registerName = inputState.registerName;
      var sel = vim2.sel;
      var origHead = copyCursor(vim2.visualMode ? clipCursorToContent(cm2, sel.head) : cm2.getCursor("head"));
      var origAnchor = copyCursor(vim2.visualMode ? clipCursorToContent(cm2, sel.anchor) : cm2.getCursor("anchor"));
      var oldHead = copyCursor(origHead);
      var oldAnchor = copyCursor(origAnchor);
      var newHead, newAnchor;
      var repeat;
      if (operator2) {
        this.recordLastEdit(vim2, inputState);
      }
      if (inputState.repeatOverride !== void 0) {
        repeat = inputState.repeatOverride;
      } else {
        repeat = inputState.getRepeat();
      }
      if (repeat > 0 && motionArgs.explicitRepeat) {
        motionArgs.repeatIsExplicit = true;
      } else if (motionArgs.noRepeat || !motionArgs.explicitRepeat && repeat === 0) {
        repeat = 1;
        motionArgs.repeatIsExplicit = false;
      }
      if (inputState.selectedCharacter) {
        motionArgs.selectedCharacter = operatorArgs.selectedCharacter = inputState.selectedCharacter;
      }
      motionArgs.repeat = repeat;
      clearInputState(cm2);
      if (motion) {
        var motionResult = motions[motion](cm2, origHead, motionArgs, vim2, inputState);
        vim2.lastMotion = motions[motion];
        if (!motionResult) {
          return;
        }
        if (motionArgs.toJumplist) {
          var jumpList = vimGlobalState.jumpList;
          var cachedCursor = jumpList.cachedCursor;
          if (cachedCursor) {
            recordJumpPosition(cm2, cachedCursor, motionResult);
            delete jumpList.cachedCursor;
          } else {
            recordJumpPosition(cm2, origHead, motionResult);
          }
        }
        if (motionResult instanceof Array) {
          newAnchor = motionResult[0];
          newHead = motionResult[1];
        } else {
          newHead = motionResult;
        }
        if (!newHead) {
          newHead = copyCursor(origHead);
        }
        if (vim2.visualMode) {
          if (!(vim2.visualBlock && newHead.ch === Infinity)) {
            newHead = clipCursorToContent(cm2, newHead, oldHead);
          }
          if (newAnchor) {
            newAnchor = clipCursorToContent(cm2, newAnchor);
          }
          newAnchor = newAnchor || oldAnchor;
          sel.anchor = newAnchor;
          sel.head = newHead;
          updateCmSelection(cm2);
          updateMark(
            cm2,
            vim2,
            "<",
            cursorIsBefore(newAnchor, newHead) ? newAnchor : newHead
          );
          updateMark(
            cm2,
            vim2,
            ">",
            cursorIsBefore(newAnchor, newHead) ? newHead : newAnchor
          );
        } else if (!operator2) {
          newHead = clipCursorToContent(cm2, newHead, oldHead);
          cm2.setCursor(newHead.line, newHead.ch);
        }
      }
      if (operator2) {
        if (operatorArgs.lastSel) {
          newAnchor = oldAnchor;
          var lastSel = operatorArgs.lastSel;
          var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line);
          var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch);
          if (lastSel.visualLine) {
            newHead = new Pos2(oldAnchor.line + lineOffset, oldAnchor.ch);
          } else if (lastSel.visualBlock) {
            newHead = new Pos2(oldAnchor.line + lineOffset, oldAnchor.ch + chOffset);
          } else if (lastSel.head.line == lastSel.anchor.line) {
            newHead = new Pos2(oldAnchor.line, oldAnchor.ch + chOffset);
          } else {
            newHead = new Pos2(oldAnchor.line + lineOffset, oldAnchor.ch);
          }
          vim2.visualMode = true;
          vim2.visualLine = lastSel.visualLine;
          vim2.visualBlock = lastSel.visualBlock;
          sel = vim2.sel = {
            anchor: newAnchor,
            head: newHead
          };
          updateCmSelection(cm2);
        } else if (vim2.visualMode) {
          operatorArgs.lastSel = {
            anchor: copyCursor(sel.anchor),
            head: copyCursor(sel.head),
            visualBlock: vim2.visualBlock,
            visualLine: vim2.visualLine
          };
        }
        var curStart, curEnd, linewise;
        var mode;
        var cmSel;
        if (vim2.visualMode) {
          curStart = cursorMin(sel.head, sel.anchor);
          curEnd = cursorMax(sel.head, sel.anchor);
          linewise = vim2.visualLine || operatorArgs.linewise;
          mode = vim2.visualBlock ? "block" : linewise ? "line" : "char";
          var newPositions = updateSelectionForSurrogateCharacters(cm2, curStart, curEnd);
          cmSel = makeCmSelection(cm2, {
            anchor: newPositions.start,
            head: newPositions.end
          }, mode);
          if (linewise) {
            var ranges = cmSel.ranges;
            if (mode == "block") {
              for (var i2 = 0; i2 < ranges.length; i2++) {
                ranges[i2].head.ch = lineLength(cm2, ranges[i2].head.line);
              }
            } else if (mode == "line") {
              ranges[0].head = new Pos2(ranges[0].head.line + 1, 0);
            }
          }
        } else {
          curStart = copyCursor(newAnchor || oldAnchor);
          curEnd = copyCursor(newHead || oldHead);
          if (cursorIsBefore(curEnd, curStart)) {
            var tmp = curStart;
            curStart = curEnd;
            curEnd = tmp;
          }
          linewise = motionArgs.linewise || operatorArgs.linewise;
          if (linewise) {
            expandSelectionToLine(cm2, curStart, curEnd);
          } else if (motionArgs.forward) {
            clipToLine(cm2, curStart, curEnd);
          }
          mode = "char";
          var exclusive = !motionArgs.inclusive || linewise;
          var newPositions = updateSelectionForSurrogateCharacters(cm2, curStart, curEnd);
          cmSel = makeCmSelection(cm2, {
            anchor: newPositions.start,
            head: newPositions.end
          }, mode, exclusive);
        }
        cm2.setSelections(cmSel.ranges, cmSel.primary);
        vim2.lastMotion = null;
        operatorArgs.repeat = repeat;
        operatorArgs.registerName = registerName;
        operatorArgs.linewise = linewise;
        var operatorMoveTo = operators[operator2](
          cm2,
          operatorArgs,
          cmSel.ranges,
          oldAnchor,
          newHead
        );
        if (vim2.visualMode) {
          exitVisualMode(cm2, operatorMoveTo != null);
        }
        if (operatorMoveTo) {
          cm2.setCursor(operatorMoveTo);
        }
      }
    },
    /**@arg {vimState} vim  @arg {InputStateInterface} inputState, @arg {import("./types").actionCommand} [actionCommand] */
    recordLastEdit: function(vim2, inputState, actionCommand) {
      var macroModeState = vimGlobalState.macroModeState;
      if (macroModeState.isPlaying) {
        return;
      }
      vim2.lastEditInputState = inputState;
      vim2.lastEditActionCommand = actionCommand;
      macroModeState.lastInsertModeChanges.changes = [];
      macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false;
      macroModeState.lastInsertModeChanges.visualBlock = vim2.visualBlock ? vim2.sel.head.line - vim2.sel.anchor.line : 0;
    }
  };
  var motions = {
    moveToTopLine: function(cm2, _head, motionArgs) {
      var line = getUserVisibleLines(cm2).top + motionArgs.repeat - 1;
      return new Pos2(line, findFirstNonWhiteSpaceCharacter(cm2.getLine(line)));
    },
    moveToMiddleLine: function(cm2) {
      var range = getUserVisibleLines(cm2);
      var line = Math.floor((range.top + range.bottom) * 0.5);
      return new Pos2(line, findFirstNonWhiteSpaceCharacter(cm2.getLine(line)));
    },
    moveToBottomLine: function(cm2, _head, motionArgs) {
      var line = getUserVisibleLines(cm2).bottom - motionArgs.repeat + 1;
      return new Pos2(line, findFirstNonWhiteSpaceCharacter(cm2.getLine(line)));
    },
    expandToLine: function(_cm, head, motionArgs) {
      var cur2 = head;
      return new Pos2(cur2.line + motionArgs.repeat - 1, Infinity);
    },
    findNext: function(cm2, _head, motionArgs) {
      var state = getSearchState(cm2);
      var query = state.getQuery();
      if (!query) {
        return;
      }
      var prev = !motionArgs.forward;
      prev = state.isReversed() ? !prev : prev;
      highlightSearchMatches(cm2, query);
      return findNext2(cm2, prev, query, motionArgs.repeat);
    },
    /**
     * Find and select the next occurrence of the search query. If the cursor is currently
     * within a match, then find and select the current match. Otherwise, find the next occurrence in the
     * appropriate direction.
     *
     * This differs from `findNext` in the following ways:
     *
     * 1. Instead of only returning the "from", this returns a "from", "to" range.
     * 2. If the cursor is currently inside a search match, this selects the current match
     *    instead of the next match.
     * 3. If there is no associated operator, this will turn on visual mode.
     */
    findAndSelectNextInclusive: function(cm2, _head, motionArgs, vim2, prevInputState) {
      var state = getSearchState(cm2);
      var query = state.getQuery();
      if (!query) {
        return;
      }
      var prev = !motionArgs.forward;
      prev = state.isReversed() ? !prev : prev;
      var next = findNextFromAndToInclusive(cm2, prev, query, motionArgs.repeat, vim2);
      if (!next) {
        return;
      }
      if (prevInputState.operator) {
        return next;
      }
      var from = next[0];
      var to2 = new Pos2(next[1].line, next[1].ch - 1);
      if (vim2.visualMode) {
        if (vim2.visualLine || vim2.visualBlock) {
          vim2.visualLine = false;
          vim2.visualBlock = false;
          CodeMirror2.signal(cm2, "vim-mode-change", { mode: "visual", subMode: "" });
        }
        var anchor = vim2.sel.anchor;
        if (anchor) {
          if (state.isReversed()) {
            if (motionArgs.forward) {
              return [anchor, from];
            }
            return [anchor, to2];
          } else {
            if (motionArgs.forward) {
              return [anchor, to2];
            }
            return [anchor, from];
          }
        }
      } else {
        vim2.visualMode = true;
        vim2.visualLine = false;
        vim2.visualBlock = false;
        CodeMirror2.signal(cm2, "vim-mode-change", { mode: "visual", subMode: "" });
      }
      return prev ? [to2, from] : [from, to2];
    },
    goToMark: function(cm2, _head, motionArgs, vim2) {
      var pos = getMarkPos(cm2, vim2, motionArgs.selectedCharacter || "");
      if (pos) {
        return motionArgs.linewise ? { line: pos.line, ch: findFirstNonWhiteSpaceCharacter(cm2.getLine(pos.line)) } : pos;
      }
      return null;
    },
    moveToOtherHighlightedEnd: function(cm2, _head, motionArgs, vim2) {
      if (vim2.visualBlock && motionArgs.sameLine) {
        var sel = vim2.sel;
        return [
          clipCursorToContent(cm2, new Pos2(sel.anchor.line, sel.head.ch)),
          clipCursorToContent(cm2, new Pos2(sel.head.line, sel.anchor.ch))
        ];
      } else {
        return [vim2.sel.head, vim2.sel.anchor];
      }
    },
    jumpToMark: function(cm2, head, motionArgs, vim2) {
      var best = head;
      for (var i2 = 0; i2 < motionArgs.repeat; i2++) {
        var cursor = best;
        for (var key in vim2.marks) {
          if (!isLowerCase(key)) {
            continue;
          }
          var mark = vim2.marks[key].find();
          var isWrongDirection = motionArgs.forward ? (
            // @ts-ignore
            cursorIsBefore(mark, cursor)
          ) : cursorIsBefore(cursor, mark);
          if (isWrongDirection) {
            continue;
          }
          if (motionArgs.linewise && mark.line == cursor.line) {
            continue;
          }
          var equal = cursorEqual(cursor, best);
          var between = motionArgs.forward ? (
            // @ts-ignore
            cursorIsBetween(cursor, mark, best)
          ) : (
            // @ts-ignore
            cursorIsBetween(best, mark, cursor)
          );
          if (equal || between) {
            best = mark;
          }
        }
      }
      if (motionArgs.linewise) {
        best = new Pos2(best.line, findFirstNonWhiteSpaceCharacter(cm2.getLine(best.line)));
      }
      return best;
    },
    moveByCharacters: function(_cm, head, motionArgs) {
      var cur2 = head;
      var repeat = motionArgs.repeat;
      var ch2 = motionArgs.forward ? cur2.ch + repeat : cur2.ch - repeat;
      return new Pos2(cur2.line, ch2);
    },
    moveByLines: function(cm2, head, motionArgs, vim2) {
      var cur2 = head;
      var endCh = cur2.ch;
      switch (vim2.lastMotion) {
        case this.moveByLines:
        case this.moveByDisplayLines:
        case this.moveByScroll:
        case this.moveToColumn:
        case this.moveToEol:
          endCh = vim2.lastHPos;
          break;
        default:
          vim2.lastHPos = endCh;
      }
      var repeat = motionArgs.repeat + (motionArgs.repeatOffset || 0);
      var line = motionArgs.forward ? cur2.line + repeat : cur2.line - repeat;
      var first = cm2.firstLine();
      var last = cm2.lastLine();
      var posV = cm2.findPosV(cur2, motionArgs.forward ? repeat : -repeat, "line", vim2.lastHSPos);
      var hasMarkedText = motionArgs.forward ? posV.line > line : posV.line < line;
      if (hasMarkedText) {
        line = posV.line;
        endCh = posV.ch;
      }
      if (line < first && cur2.line == first) {
        return this.moveToStartOfLine(cm2, head, motionArgs, vim2);
      } else if (line > last && cur2.line == last) {
        return moveToEol(cm2, head, motionArgs, vim2, true);
      }
      if (motionArgs.toFirstChar) {
        endCh = findFirstNonWhiteSpaceCharacter(cm2.getLine(line));
        vim2.lastHPos = endCh;
      }
      vim2.lastHSPos = cm2.charCoords(new Pos2(line, endCh), "div").left;
      return new Pos2(line, endCh);
    },
    moveByDisplayLines: function(cm2, head, motionArgs, vim2) {
      var cur2 = head;
      switch (vim2.lastMotion) {
        case this.moveByDisplayLines:
        case this.moveByScroll:
        case this.moveByLines:
        case this.moveToColumn:
        case this.moveToEol:
          break;
        default:
          vim2.lastHSPos = cm2.charCoords(cur2, "div").left;
      }
      var repeat = motionArgs.repeat;
      var res = cm2.findPosV(cur2, motionArgs.forward ? repeat : -repeat, "line", vim2.lastHSPos);
      if (res.hitSide) {
        if (motionArgs.forward) {
          var lastCharCoords = cm2.charCoords(res, "div");
          var goalCoords = { top: lastCharCoords.top + 8, left: vim2.lastHSPos };
          res = cm2.coordsChar(goalCoords, "div");
        } else {
          var resCoords = cm2.charCoords(new Pos2(cm2.firstLine(), 0), "div");
          resCoords.left = vim2.lastHSPos;
          res = cm2.coordsChar(resCoords, "div");
        }
      }
      vim2.lastHPos = res.ch;
      return res;
    },
    moveByPage: function(cm2, head, motionArgs) {
      var curStart = head;
      var repeat = motionArgs.repeat;
      return cm2.findPosV(curStart, motionArgs.forward ? repeat : -repeat, "page");
    },
    moveByParagraph: function(cm2, head, motionArgs) {
      var dir = motionArgs.forward ? 1 : -1;
      return findParagraph(cm2, head, motionArgs.repeat, dir).start;
    },
    moveBySentence: function(cm2, head, motionArgs) {
      var dir = motionArgs.forward ? 1 : -1;
      return findSentence(cm2, head, motionArgs.repeat, dir);
    },
    moveByScroll: function(cm2, head, motionArgs, vim2) {
      var scrollbox = cm2.getScrollInfo();
      var curEnd = null;
      var repeat = motionArgs.repeat;
      if (!repeat) {
        repeat = scrollbox.clientHeight / (2 * cm2.defaultTextHeight());
      }
      var orig = cm2.charCoords(head, "local");
      motionArgs.repeat = repeat;
      curEnd = motions.moveByDisplayLines(cm2, head, motionArgs, vim2);
      if (!curEnd) {
        return null;
      }
      var dest = cm2.charCoords(curEnd, "local");
      cm2.scrollTo(null, scrollbox.top + dest.top - orig.top);
      return curEnd;
    },
    moveByWords: function(cm2, head, motionArgs) {
      return moveToWord(
        cm2,
        head,
        motionArgs.repeat,
        !!motionArgs.forward,
        !!motionArgs.wordEnd,
        !!motionArgs.bigWord
      );
    },
    moveTillCharacter: function(cm2, head, motionArgs) {
      var repeat = motionArgs.repeat;
      var curEnd = moveToCharacter(
        cm2,
        repeat,
        motionArgs.forward,
        motionArgs.selectedCharacter,
        head
      );
      var increment = motionArgs.forward ? -1 : 1;
      recordLastCharacterSearch(increment, motionArgs);
      if (!curEnd) return null;
      curEnd.ch += increment;
      return curEnd;
    },
    moveToCharacter: function(cm2, head, motionArgs) {
      var repeat = motionArgs.repeat;
      recordLastCharacterSearch(0, motionArgs);
      return moveToCharacter(
        cm2,
        repeat,
        motionArgs.forward,
        motionArgs.selectedCharacter,
        head
      ) || head;
    },
    moveToSymbol: function(cm2, head, motionArgs) {
      var repeat = motionArgs.repeat;
      return motionArgs.selectedCharacter && findSymbol(
        cm2,
        repeat,
        motionArgs.forward,
        motionArgs.selectedCharacter
      ) || head;
    },
    moveToColumn: function(cm2, head, motionArgs, vim2) {
      var repeat = motionArgs.repeat;
      vim2.lastHPos = repeat - 1;
      vim2.lastHSPos = cm2.charCoords(head, "div").left;
      return moveToColumn(cm2, repeat);
    },
    moveToEol: function(cm2, head, motionArgs, vim2) {
      return moveToEol(cm2, head, motionArgs, vim2, false);
    },
    moveToFirstNonWhiteSpaceCharacter: function(cm2, head) {
      var cursor = head;
      return new Pos2(
        cursor.line,
        findFirstNonWhiteSpaceCharacter(cm2.getLine(cursor.line))
      );
    },
    moveToMatchedSymbol: function(cm2, head) {
      var cursor = head;
      var line = cursor.line;
      var ch2 = cursor.ch;
      var lineText = cm2.getLine(line);
      var symbol;
      for (; ch2 < lineText.length; ch2++) {
        symbol = lineText.charAt(ch2);
        if (symbol && isMatchableSymbol(symbol)) {
          var style = cm2.getTokenTypeAt(new Pos2(line, ch2 + 1));
          if (style !== "string" && style !== "comment") {
            break;
          }
        }
      }
      if (ch2 < lineText.length) {
        var re2 = symbol === "<" || symbol === ">" ? /[(){}[\]<>]/ : /[(){}[\]]/;
        var matched = cm2.findMatchingBracket(new Pos2(line, ch2), { bracketRegex: re2 });
        return matched.to;
      } else {
        return cursor;
      }
    },
    moveToStartOfLine: function(_cm, head) {
      return new Pos2(head.line, 0);
    },
    moveToLineOrEdgeOfDocument: function(cm2, _head, motionArgs) {
      var lineNum = motionArgs.forward ? cm2.lastLine() : cm2.firstLine();
      if (motionArgs.repeatIsExplicit) {
        lineNum = motionArgs.repeat - cm2.getOption("firstLineNumber");
      }
      return new Pos2(
        lineNum,
        findFirstNonWhiteSpaceCharacter(cm2.getLine(lineNum))
      );
    },
    moveToStartOfDisplayLine: function(cm2) {
      cm2.execCommand("goLineLeft");
      return cm2.getCursor();
    },
    moveToEndOfDisplayLine: function(cm2) {
      cm2.execCommand("goLineRight");
      var head = cm2.getCursor();
      if (head.sticky == "before") head.ch--;
      return head;
    },
    textObjectManipulation: function(cm2, head, motionArgs, vim2) {
      var mirroredPairs = {
        "(": ")",
        ")": "(",
        "{": "}",
        "}": "{",
        "[": "]",
        "]": "[",
        "<": ">",
        ">": "<"
      };
      var selfPaired = { "'": true, '"': true, "`": true };
      var character = motionArgs.selectedCharacter || "";
      if (character == "b") {
        character = "(";
      } else if (character == "B") {
        character = "{";
      }
      var inclusive = !motionArgs.textObjectInner;
      var tmp, move;
      if (mirroredPairs[character]) {
        move = true;
        tmp = selectCompanionObject(cm2, head, character, inclusive);
        if (!tmp) {
          var sc2 = cm2.getSearchCursor(new RegExp("\\" + character, "g"), head);
          if (sc2.find()) {
            tmp = selectCompanionObject(cm2, sc2.from(), character, inclusive);
          }
        }
      } else if (selfPaired[character]) {
        move = true;
        tmp = findBeginningAndEnd(cm2, head, character, inclusive);
      } else if (character === "W" || character === "w") {
        var repeat = motionArgs.repeat || 1;
        while (repeat-- > 0) {
          var repeated = expandWordUnderCursor(cm2, {
            inclusive,
            innerWord: !inclusive,
            bigWord: character === "W",
            noSymbol: character === "W",
            multiline: true
          }, tmp && tmp.end);
          if (repeated) {
            if (!tmp) tmp = repeated;
            tmp.end = repeated.end;
          }
        }
      } else if (character === "p") {
        tmp = findParagraph(cm2, head, motionArgs.repeat, 0, inclusive);
        motionArgs.linewise = true;
        if (vim2.visualMode) {
          if (!vim2.visualLine) {
            vim2.visualLine = true;
          }
        } else {
          var operatorArgs = vim2.inputState.operatorArgs;
          if (operatorArgs) {
            operatorArgs.linewise = true;
          }
          tmp.end.line--;
        }
      } else if (character === "t") {
        tmp = expandTagUnderCursor(cm2, head, inclusive);
      } else if (character === "s") {
        var content2 = cm2.getLine(head.line);
        if (head.ch > 0 && isEndOfSentenceSymbol(content2[head.ch])) {
          head.ch -= 1;
        }
        var end = getSentence(cm2, head, motionArgs.repeat, 1, inclusive);
        var start = getSentence(cm2, head, motionArgs.repeat, -1, inclusive);
        if (isWhiteSpaceString(cm2.getLine(start.line)[start.ch]) && isWhiteSpaceString(cm2.getLine(end.line)[end.ch - 1])) {
          start = { line: start.line, ch: start.ch + 1 };
        }
        tmp = { start, end };
      }
      if (!tmp) {
        return null;
      }
      if (!cm2.state.vim.visualMode) {
        return [tmp.start, tmp.end];
      } else {
        return expandSelection(cm2, tmp.start, tmp.end, move);
      }
    },
    repeatLastCharacterSearch: function(cm2, head, motionArgs) {
      var lastSearch = vimGlobalState.lastCharacterSearch;
      var repeat = motionArgs.repeat;
      var forward = motionArgs.forward === lastSearch.forward;
      var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1);
      cm2.moveH(-increment, "char");
      motionArgs.inclusive = forward ? true : false;
      var curEnd = moveToCharacter(cm2, repeat, forward, lastSearch.selectedCharacter);
      if (!curEnd) {
        cm2.moveH(increment, "char");
        return head;
      }
      curEnd.ch += increment;
      return curEnd;
    }
  };
  function defineMotion(name2, fn2) {
    motions[name2] = fn2;
  }
  function fillArray(val, times) {
    var arr = [];
    for (var i2 = 0; i2 < times; i2++) {
      arr.push(val);
    }
    return arr;
  }
  var operators = {
    change: function(cm2, args, ranges) {
      var finalHead, text;
      var vim2 = cm2.state.vim;
      var anchor = ranges[0].anchor, head = ranges[0].head;
      if (!vim2.visualMode) {
        text = cm2.getRange(anchor, head);
        var lastState = vim2.lastEditInputState;
        if (lastState?.motion == "moveByWords" && !isWhiteSpaceString(text)) {
          var match = /\s+$/.exec(text);
          if (match && lastState.motionArgs && lastState.motionArgs.forward) {
            head = offsetCursor(head, 0, -match[0].length);
            text = text.slice(0, -match[0].length);
          }
        }
        if (args.linewise) {
          anchor = new Pos2(anchor.line, findFirstNonWhiteSpaceCharacter(cm2.getLine(anchor.line)));
          if (head.line > anchor.line) {
            head = new Pos2(head.line - 1, Number.MAX_VALUE);
          }
        }
        cm2.replaceRange("", anchor, head);
        finalHead = anchor;
      } else if (args.fullLine) {
        head.ch = Number.MAX_VALUE;
        head.line--;
        cm2.setSelection(anchor, head);
        text = cm2.getSelection();
        cm2.replaceSelection("");
        finalHead = anchor;
      } else {
        text = cm2.getSelection();
        var replacement = fillArray("", ranges.length);
        cm2.replaceSelections(replacement);
        finalHead = cursorMin(ranges[0].head, ranges[0].anchor);
      }
      vimGlobalState.registerController.pushText(
        args.registerName,
        "change",
        text,
        args.linewise,
        ranges.length > 1
      );
      actions.enterInsertMode(cm2, { head: finalHead }, cm2.state.vim);
    },
    delete: function(cm2, args, ranges) {
      var finalHead, text;
      var vim2 = cm2.state.vim;
      if (!vim2.visualBlock) {
        var anchor = ranges[0].anchor, head = ranges[0].head;
        if (args.linewise && head.line != cm2.firstLine() && anchor.line == cm2.lastLine() && anchor.line == head.line - 1) {
          if (anchor.line == cm2.firstLine()) {
            anchor.ch = 0;
          } else {
            anchor = new Pos2(anchor.line - 1, lineLength(cm2, anchor.line - 1));
          }
        }
        text = cm2.getRange(anchor, head);
        cm2.replaceRange("", anchor, head);
        finalHead = anchor;
        if (args.linewise) {
          finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm2, anchor);
        }
      } else {
        text = cm2.getSelection();
        var replacement = fillArray("", ranges.length);
        cm2.replaceSelections(replacement);
        finalHead = cursorMin(ranges[0].head, ranges[0].anchor);
      }
      vimGlobalState.registerController.pushText(
        args.registerName,
        "delete",
        text,
        args.linewise,
        vim2.visualBlock
      );
      return clipCursorToContent(cm2, finalHead);
    },
    indent: function(cm2, args, ranges) {
      var vim2 = cm2.state.vim;
      var repeat = vim2.visualMode ? args.repeat || 0 : 1;
      if (cm2.indentMore) {
        for (var j2 = 0; j2 < repeat; j2++) {
          if (args.indentRight) cm2.indentMore();
          else cm2.indentLess();
        }
      } else {
        var startLine = ranges[0].anchor.line;
        var endLine = vim2.visualBlock ? ranges[ranges.length - 1].anchor.line : ranges[0].head.line;
        if (args.linewise) {
          endLine--;
        }
        for (var i2 = startLine; i2 <= endLine; i2++) {
          for (var j2 = 0; j2 < repeat; j2++) {
            cm2.indentLine(i2, args.indentRight);
          }
        }
      }
      return motions.moveToFirstNonWhiteSpaceCharacter(cm2, ranges[0].anchor);
    },
    indentAuto: function(cm2, _args, ranges) {
      cm2.execCommand("indentAuto");
      return motions.moveToFirstNonWhiteSpaceCharacter(cm2, ranges[0].anchor);
    },
    hardWrap: function(cm2, operatorArgs, ranges, oldAnchor) {
      if (!cm2.hardWrap) return;
      var from = ranges[0].anchor.line;
      var to2 = ranges[0].head.line;
      if (operatorArgs.linewise) to2--;
      var endRow = cm2.hardWrap({ from, to: to2 });
      if (endRow > from && operatorArgs.linewise) endRow--;
      return operatorArgs.keepCursor ? oldAnchor : new Pos2(endRow, 0);
    },
    changeCase: function(cm2, args, ranges, oldAnchor, newHead) {
      var selections = cm2.getSelections();
      var swapped = [];
      var toLower = args.toLower;
      for (var j2 = 0; j2 < selections.length; j2++) {
        var toSwap = selections[j2];
        var text = "";
        if (toLower === true) {
          text = toSwap.toLowerCase();
        } else if (toLower === false) {
          text = toSwap.toUpperCase();
        } else {
          for (var i2 = 0; i2 < toSwap.length; i2++) {
            var character = toSwap.charAt(i2);
            text += isUpperCase(character) ? character.toLowerCase() : character.toUpperCase();
          }
        }
        swapped.push(text);
      }
      cm2.replaceSelections(swapped);
      if (args.shouldMoveCursor) {
        return newHead;
      } else if (!cm2.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {
        return motions.moveToFirstNonWhiteSpaceCharacter(cm2, oldAnchor);
      } else if (args.linewise) {
        return oldAnchor;
      } else {
        return cursorMin(ranges[0].anchor, ranges[0].head);
      }
    },
    yank: function(cm2, args, ranges, oldAnchor) {
      var vim2 = cm2.state.vim;
      var text = cm2.getSelection();
      var endPos = vim2.visualMode ? cursorMin(vim2.sel.anchor, vim2.sel.head, ranges[0].head, ranges[0].anchor) : oldAnchor;
      vimGlobalState.registerController.pushText(
        args.registerName,
        "yank",
        text,
        args.linewise,
        vim2.visualBlock
      );
      return endPos;
    }
  };
  function defineOperator(name2, fn2) {
    operators[name2] = fn2;
  }
  var actions = {
    jumpListWalk: function(cm2, actionArgs, vim2) {
      if (vim2.visualMode) {
        return;
      }
      var repeat = actionArgs.repeat || 1;
      var forward = actionArgs.forward;
      var jumpList = vimGlobalState.jumpList;
      var mark = jumpList.move(cm2, forward ? repeat : -repeat);
      var markPos = mark ? mark.find() : void 0;
      markPos = markPos ? markPos : cm2.getCursor();
      cm2.setCursor(markPos);
    },
    scroll: function(cm2, actionArgs, vim2) {
      if (vim2.visualMode) {
        return;
      }
      var repeat = actionArgs.repeat || 1;
      var lineHeight = cm2.defaultTextHeight();
      var top2 = cm2.getScrollInfo().top;
      var delta = lineHeight * repeat;
      var newPos = actionArgs.forward ? top2 + delta : top2 - delta;
      var cursor = copyCursor(cm2.getCursor());
      var cursorCoords = cm2.charCoords(cursor, "local");
      if (actionArgs.forward) {
        if (newPos > cursorCoords.top) {
          cursor.line += (newPos - cursorCoords.top) / lineHeight;
          cursor.line = Math.ceil(cursor.line);
          cm2.setCursor(cursor);
          cursorCoords = cm2.charCoords(cursor, "local");
          cm2.scrollTo(null, cursorCoords.top);
        } else {
          cm2.scrollTo(null, newPos);
        }
      } else {
        var newBottom = newPos + cm2.getScrollInfo().clientHeight;
        if (newBottom < cursorCoords.bottom) {
          cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight;
          cursor.line = Math.floor(cursor.line);
          cm2.setCursor(cursor);
          cursorCoords = cm2.charCoords(cursor, "local");
          cm2.scrollTo(
            null,
            cursorCoords.bottom - cm2.getScrollInfo().clientHeight
          );
        } else {
          cm2.scrollTo(null, newPos);
        }
      }
    },
    scrollToCursor: function(cm2, actionArgs) {
      var lineNum = cm2.getCursor().line;
      var charCoords = cm2.charCoords(new Pos2(lineNum, 0), "local");
      var height = cm2.getScrollInfo().clientHeight;
      var y2 = charCoords.top;
      switch (actionArgs.position) {
        case "center":
          y2 = charCoords.bottom - height / 2;
          break;
        case "bottom":
          var lineLastCharPos = new Pos2(lineNum, cm2.getLine(lineNum).length - 1);
          var lineLastCharCoords = cm2.charCoords(lineLastCharPos, "local");
          var lineHeight = lineLastCharCoords.bottom - y2;
          y2 = y2 - height + lineHeight;
          break;
      }
      cm2.scrollTo(null, y2);
    },
    replayMacro: function(cm2, actionArgs, vim2) {
      var registerName = actionArgs.selectedCharacter || "";
      var repeat = actionArgs.repeat || 1;
      var macroModeState = vimGlobalState.macroModeState;
      if (registerName == "@") {
        registerName = macroModeState.latestRegister;
      } else {
        macroModeState.latestRegister = registerName;
      }
      while (repeat--) {
        executeMacroRegister(cm2, vim2, macroModeState, registerName);
      }
    },
    enterMacroRecordMode: function(cm2, actionArgs) {
      var macroModeState = vimGlobalState.macroModeState;
      var registerName = actionArgs.selectedCharacter;
      if (vimGlobalState.registerController.isValidRegister(registerName)) {
        macroModeState.enterMacroRecordMode(cm2, registerName);
      }
    },
    toggleOverwrite: function(cm2) {
      if (!cm2.state.overwrite) {
        cm2.toggleOverwrite(true);
        cm2.setOption("keyMap", "vim-replace");
        CodeMirror2.signal(cm2, "vim-mode-change", { mode: "replace" });
      } else {
        cm2.toggleOverwrite(false);
        cm2.setOption("keyMap", "vim-insert");
        CodeMirror2.signal(cm2, "vim-mode-change", { mode: "insert" });
      }
    },
    enterInsertMode: function(cm2, actionArgs, vim2) {
      if (cm2.getOption("readOnly")) {
        return;
      }
      vim2.insertMode = true;
      vim2.insertModeRepeat = actionArgs && actionArgs.repeat || 1;
      var insertAt = actionArgs ? actionArgs.insertAt : null;
      var sel = vim2.sel;
      var head = actionArgs.head || cm2.getCursor("head");
      var height = cm2.listSelections().length;
      if (insertAt == "eol") {
        head = new Pos2(head.line, lineLength(cm2, head.line));
      } else if (insertAt == "bol") {
        head = new Pos2(head.line, 0);
      } else if (insertAt == "charAfter") {
        var newPosition = updateSelectionForSurrogateCharacters(cm2, head, offsetCursor(head, 0, 1));
        head = newPosition.end;
      } else if (insertAt == "firstNonBlank") {
        var newPosition = updateSelectionForSurrogateCharacters(cm2, head, motions.moveToFirstNonWhiteSpaceCharacter(cm2, head));
        head = newPosition.end;
      } else if (insertAt == "startOfSelectedArea") {
        if (!vim2.visualMode)
          return;
        if (!vim2.visualBlock) {
          if (sel.head.line < sel.anchor.line) {
            head = sel.head;
          } else {
            head = new Pos2(sel.anchor.line, 0);
          }
        } else {
          head = new Pos2(
            Math.min(sel.head.line, sel.anchor.line),
            Math.min(sel.head.ch, sel.anchor.ch)
          );
          height = Math.abs(sel.head.line - sel.anchor.line) + 1;
        }
      } else if (insertAt == "endOfSelectedArea") {
        if (!vim2.visualMode)
          return;
        if (!vim2.visualBlock) {
          if (sel.head.line >= sel.anchor.line) {
            head = offsetCursor(sel.head, 0, 1);
          } else {
            head = new Pos2(sel.anchor.line, 0);
          }
        } else {
          head = new Pos2(
            Math.min(sel.head.line, sel.anchor.line),
            Math.max(sel.head.ch, sel.anchor.ch) + 1
          );
          height = Math.abs(sel.head.line - sel.anchor.line) + 1;
        }
      } else if (insertAt == "inplace") {
        if (vim2.visualMode) {
          return;
        }
      } else if (insertAt == "lastEdit") {
        head = getLastEditPos(cm2) || head;
      }
      cm2.setOption("disableInput", false);
      if (actionArgs && actionArgs.replace) {
        cm2.toggleOverwrite(true);
        cm2.setOption("keyMap", "vim-replace");
        CodeMirror2.signal(cm2, "vim-mode-change", { mode: "replace" });
      } else {
        cm2.toggleOverwrite(false);
        cm2.setOption("keyMap", "vim-insert");
        CodeMirror2.signal(cm2, "vim-mode-change", { mode: "insert" });
      }
      if (!vimGlobalState.macroModeState.isPlaying) {
        cm2.on("change", onChange);
        if (vim2.insertEnd) vim2.insertEnd.clear();
        vim2.insertEnd = cm2.setBookmark(head, { insertLeft: true });
        CodeMirror2.on(cm2.getInputField(), "keydown", onKeyEventTargetKeyDown);
      }
      if (vim2.visualMode) {
        exitVisualMode(cm2);
      }
      selectForInsert(cm2, head, height);
    },
    toggleVisualMode: function(cm2, actionArgs, vim2) {
      var repeat = actionArgs.repeat;
      var anchor = cm2.getCursor();
      var head;
      if (!vim2.visualMode) {
        vim2.visualMode = true;
        vim2.visualLine = !!actionArgs.linewise;
        vim2.visualBlock = !!actionArgs.blockwise;
        head = clipCursorToContent(
          cm2,
          new Pos2(anchor.line, anchor.ch + repeat - 1)
        );
        var newPosition = updateSelectionForSurrogateCharacters(cm2, anchor, head);
        vim2.sel = {
          anchor: newPosition.start,
          head: newPosition.end
        };
        CodeMirror2.signal(cm2, "vim-mode-change", { mode: "visual", subMode: vim2.visualLine ? "linewise" : vim2.visualBlock ? "blockwise" : "" });
        updateCmSelection(cm2);
        updateMark(cm2, vim2, "<", cursorMin(anchor, head));
        updateMark(cm2, vim2, ">", cursorMax(anchor, head));
      } else if (vim2.visualLine != !!actionArgs.linewise || vim2.visualBlock != !!actionArgs.blockwise) {
        vim2.visualLine = !!actionArgs.linewise;
        vim2.visualBlock = !!actionArgs.blockwise;
        CodeMirror2.signal(cm2, "vim-mode-change", { mode: "visual", subMode: vim2.visualLine ? "linewise" : vim2.visualBlock ? "blockwise" : "" });
        updateCmSelection(cm2);
      } else {
        exitVisualMode(cm2);
      }
    },
    reselectLastSelection: function(cm2, _actionArgs, vim2) {
      var lastSelection = vim2.lastSelection;
      if (vim2.visualMode) {
        updateLastSelection(cm2, vim2);
      }
      if (lastSelection) {
        var anchor = lastSelection.anchorMark.find();
        var head = lastSelection.headMark.find();
        if (!anchor || !head) {
          return;
        }
        vim2.sel = {
          anchor,
          head
        };
        vim2.visualMode = true;
        vim2.visualLine = lastSelection.visualLine;
        vim2.visualBlock = lastSelection.visualBlock;
        updateCmSelection(cm2);
        updateMark(cm2, vim2, "<", cursorMin(anchor, head));
        updateMark(cm2, vim2, ">", cursorMax(anchor, head));
        CodeMirror2.signal(cm2, "vim-mode-change", {
          mode: "visual",
          subMode: vim2.visualLine ? "linewise" : vim2.visualBlock ? "blockwise" : ""
        });
      }
    },
    joinLines: function(cm2, actionArgs, vim2) {
      var curStart, curEnd;
      if (vim2.visualMode) {
        curStart = cm2.getCursor("anchor");
        curEnd = cm2.getCursor("head");
        if (cursorIsBefore(curEnd, curStart)) {
          var tmp = curEnd;
          curEnd = curStart;
          curStart = tmp;
        }
        curEnd.ch = lineLength(cm2, curEnd.line) - 1;
      } else {
        var repeat = Math.max(actionArgs.repeat, 2);
        curStart = cm2.getCursor();
        curEnd = clipCursorToContent(cm2, new Pos2(
          curStart.line + repeat - 1,
          Infinity
        ));
      }
      var finalCh = 0;
      for (var i2 = curStart.line; i2 < curEnd.line; i2++) {
        finalCh = lineLength(cm2, curStart.line);
        var text = "";
        var nextStartCh = 0;
        if (!actionArgs.keepSpaces) {
          var nextLine = cm2.getLine(curStart.line + 1);
          nextStartCh = nextLine.search(/\S/);
          if (nextStartCh == -1) {
            nextStartCh = nextLine.length;
          } else {
            text = " ";
          }
        }
        cm2.replaceRange(
          text,
          new Pos2(curStart.line, finalCh),
          new Pos2(curStart.line + 1, nextStartCh)
        );
      }
      var curFinalPos = clipCursorToContent(cm2, new Pos2(curStart.line, finalCh));
      if (vim2.visualMode) {
        exitVisualMode(cm2, false);
      }
      cm2.setCursor(curFinalPos);
    },
    newLineAndEnterInsertMode: function(cm2, actionArgs, vim2) {
      vim2.insertMode = true;
      var insertAt = copyCursor(cm2.getCursor());
      if (insertAt.line === cm2.firstLine() && !actionArgs.after) {
        cm2.replaceRange("\n", new Pos2(cm2.firstLine(), 0));
        cm2.setCursor(cm2.firstLine(), 0);
      } else {
        insertAt.line = actionArgs.after ? insertAt.line : insertAt.line - 1;
        insertAt.ch = lineLength(cm2, insertAt.line);
        cm2.setCursor(insertAt);
        var newlineFn = CodeMirror2.commands.newlineAndIndentContinueComment || CodeMirror2.commands.newlineAndIndent;
        newlineFn(cm2);
      }
      this.enterInsertMode(cm2, { repeat: actionArgs.repeat }, vim2);
    },
    paste: function(cm2, actionArgs, vim2) {
      var register = vimGlobalState.registerController.getRegister(
        actionArgs.registerName
      );
      if (actionArgs.registerName === "+") {
        navigator.clipboard.readText().then((value) => {
          this.continuePaste(cm2, actionArgs, vim2, value, register);
        });
      } else {
        var text = register.toString();
        this.continuePaste(cm2, actionArgs, vim2, text, register);
      }
    },
    continuePaste: function(cm2, actionArgs, vim2, text, register) {
      var cur2 = copyCursor(cm2.getCursor());
      if (!text) {
        return;
      }
      if (actionArgs.matchIndent) {
        var tabSize = cm2.getOption("tabSize");
        var whitespaceLength = function(str) {
          var tabs = str.split("	").length - 1;
          var spaces2 = str.split(" ").length - 1;
          return tabs * tabSize + spaces2 * 1;
        };
        var currentLine = cm2.getLine(cm2.getCursor().line);
        var indent = whitespaceLength(currentLine.match(/^\s*/)[0]);
        var chompedText = text.replace(/\n$/, "");
        var wasChomped = text !== chompedText;
        var firstIndent = whitespaceLength(text.match(/^\s*/)[0]);
        var text = chompedText.replace(/^\s*/gm, function(wspace) {
          var newIndent = indent + (whitespaceLength(wspace) - firstIndent);
          if (newIndent < 0) {
            return "";
          } else if (cm2.getOption("indentWithTabs")) {
            var quotient = Math.floor(newIndent / tabSize);
            return Array(quotient + 1).join("	");
          } else {
            return Array(newIndent + 1).join(" ");
          }
        });
        text += wasChomped ? "\n" : "";
      }
      if (actionArgs.repeat > 1) {
        var text = Array(actionArgs.repeat + 1).join(text);
      }
      var linewise = register.linewise;
      var blockwise = register.blockwise;
      if (blockwise) {
        text = text.split("\n");
        if (linewise) {
          text.pop();
        }
        for (var i2 = 0; i2 < text.length; i2++) {
          text[i2] = text[i2] == "" ? " " : text[i2];
        }
        cur2.ch += actionArgs.after ? 1 : 0;
        cur2.ch = Math.min(lineLength(cm2, cur2.line), cur2.ch);
      } else if (linewise) {
        if (vim2.visualMode) {
          text = vim2.visualLine ? text.slice(0, -1) : "\n" + text.slice(0, text.length - 1) + "\n";
        } else if (actionArgs.after) {
          text = "\n" + text.slice(0, text.length - 1);
          cur2.ch = lineLength(cm2, cur2.line);
        } else {
          cur2.ch = 0;
        }
      } else {
        cur2.ch += actionArgs.after ? 1 : 0;
      }
      var curPosFinal;
      if (vim2.visualMode) {
        vim2.lastPastedText = text;
        var lastSelectionCurEnd;
        var selectedArea = getSelectedAreaRange(cm2, vim2);
        var selectionStart = selectedArea[0];
        var selectionEnd = selectedArea[1];
        var selectedText = cm2.getSelection();
        var selections = cm2.listSelections();
        var emptyStrings = new Array(selections.length).join("1").split("1");
        if (vim2.lastSelection) {
          lastSelectionCurEnd = vim2.lastSelection.headMark.find();
        }
        vimGlobalState.registerController.unnamedRegister.setText(selectedText);
        if (blockwise) {
          cm2.replaceSelections(emptyStrings);
          selectionEnd = new Pos2(selectionStart.line + text.length - 1, selectionStart.ch);
          cm2.setCursor(selectionStart);
          selectBlock(cm2, selectionEnd);
          cm2.replaceSelections(text);
          curPosFinal = selectionStart;
        } else if (vim2.visualBlock) {
          cm2.replaceSelections(emptyStrings);
          cm2.setCursor(selectionStart);
          cm2.replaceRange(text, selectionStart, selectionStart);
          curPosFinal = selectionStart;
        } else {
          cm2.replaceRange(text, selectionStart, selectionEnd);
          curPosFinal = cm2.posFromIndex(cm2.indexFromPos(selectionStart) + text.length - 1);
        }
        if (lastSelectionCurEnd) {
          vim2.lastSelection.headMark = cm2.setBookmark(lastSelectionCurEnd);
        }
        if (linewise) {
          curPosFinal.ch = 0;
        }
      } else {
        if (blockwise) {
          cm2.setCursor(cur2);
          for (var i2 = 0; i2 < text.length; i2++) {
            var line = cur2.line + i2;
            if (line > cm2.lastLine()) {
              cm2.replaceRange("\n", new Pos2(line, 0));
            }
            var lastCh = lineLength(cm2, line);
            if (lastCh < cur2.ch) {
              extendLineToColumn(cm2, line, cur2.ch);
            }
          }
          cm2.setCursor(cur2);
          selectBlock(cm2, new Pos2(cur2.line + text.length - 1, cur2.ch));
          cm2.replaceSelections(text);
          curPosFinal = cur2;
        } else {
          cm2.replaceRange(text, cur2);
          if (linewise) {
            var line = actionArgs.after ? cur2.line + 1 : cur2.line;
            curPosFinal = new Pos2(line, findFirstNonWhiteSpaceCharacter(cm2.getLine(line)));
          } else {
            curPosFinal = copyCursor(cur2);
            if (!/\n/.test(text)) {
              curPosFinal.ch += text.length - (actionArgs.after ? 1 : 0);
            }
          }
        }
      }
      if (vim2.visualMode) {
        exitVisualMode(cm2, false);
      }
      cm2.setCursor(curPosFinal);
    },
    undo: function(cm2, actionArgs) {
      cm2.operation(function() {
        repeatFn(cm2, CodeMirror2.commands.undo, actionArgs.repeat)();
        cm2.setCursor(clipCursorToContent(cm2, cm2.getCursor("start")));
      });
    },
    redo: function(cm2, actionArgs) {
      repeatFn(cm2, CodeMirror2.commands.redo, actionArgs.repeat)();
    },
    setRegister: function(_cm, actionArgs, vim2) {
      vim2.inputState.registerName = actionArgs.selectedCharacter;
    },
    insertRegister: function(cm2, actionArgs, vim2) {
      var registerName = actionArgs.selectedCharacter;
      var register = vimGlobalState.registerController.getRegister(registerName);
      var text = register && register.toString();
      if (text) {
        cm2.replaceSelection(text);
      }
    },
    oneNormalCommand: function(cm2, actionArgs, vim2) {
      exitInsertMode(cm2, true);
      vim2.insertModeReturn = true;
      CodeMirror2.on(cm2, "vim-command-done", function handler() {
        if (vim2.visualMode) return;
        if (vim2.insertModeReturn) {
          vim2.insertModeReturn = false;
          if (!vim2.insertMode) {
            actions.enterInsertMode(cm2, {}, vim2);
          }
        }
        CodeMirror2.off(cm2, "vim-command-done", handler);
      });
    },
    setMark: function(cm2, actionArgs, vim2) {
      var markName = actionArgs.selectedCharacter;
      if (markName) updateMark(cm2, vim2, markName, cm2.getCursor());
    },
    replace: function(cm2, actionArgs, vim2) {
      var replaceWith = actionArgs.selectedCharacter || "";
      var curStart = cm2.getCursor();
      var replaceTo;
      var curEnd;
      var selections = cm2.listSelections();
      if (vim2.visualMode) {
        curStart = cm2.getCursor("start");
        curEnd = cm2.getCursor("end");
      } else {
        var line = cm2.getLine(curStart.line);
        replaceTo = curStart.ch + actionArgs.repeat;
        if (replaceTo > line.length) {
          replaceTo = line.length;
        }
        curEnd = new Pos2(curStart.line, replaceTo);
      }
      var newPositions = updateSelectionForSurrogateCharacters(cm2, curStart, curEnd);
      curStart = newPositions.start;
      curEnd = newPositions.end;
      if (replaceWith == "\n") {
        if (!vim2.visualMode) cm2.replaceRange("", curStart, curEnd);
        (CodeMirror2.commands.newlineAndIndentContinueComment || CodeMirror2.commands.newlineAndIndent)(cm2);
      } else {
        var replaceWithStr = cm2.getRange(curStart, curEnd);
        replaceWithStr = replaceWithStr.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, replaceWith);
        replaceWithStr = replaceWithStr.replace(/[^\n]/g, replaceWith);
        if (vim2.visualBlock) {
          var spaces2 = new Array(cm2.getOption("tabSize") + 1).join(" ");
          replaceWithStr = cm2.getSelection();
          replaceWithStr = replaceWithStr.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, replaceWith);
          var replaceWithStrings = replaceWithStr.replace(/\t/g, spaces2).replace(/[^\n]/g, replaceWith).split("\n");
          cm2.replaceSelections(replaceWithStrings);
        } else {
          cm2.replaceRange(replaceWithStr, curStart, curEnd);
        }
        if (vim2.visualMode) {
          curStart = cursorIsBefore(selections[0].anchor, selections[0].head) ? selections[0].anchor : selections[0].head;
          cm2.setCursor(curStart);
          exitVisualMode(cm2, false);
        } else {
          cm2.setCursor(offsetCursor(curEnd, 0, -1));
        }
      }
    },
    incrementNumberToken: function(cm2, actionArgs) {
      var cur2 = cm2.getCursor();
      var lineStr = cm2.getLine(cur2.line);
      var re2 = /(-?)(?:(0x)([\da-f]+)|(0b|0|)(\d+))/gi;
      var match;
      var start;
      var end;
      var numberStr;
      while ((match = re2.exec(lineStr)) !== null) {
        start = match.index;
        end = start + match[0].length;
        if (cur2.ch < end) break;
      }
      if (!actionArgs.backtrack && end <= cur2.ch) return;
      if (match) {
        var baseStr = match[2] || match[4];
        var digits = match[3] || match[5];
        var increment = actionArgs.increase ? 1 : -1;
        var base2 = { "0b": 2, "0": 8, "": 10, "0x": 16 }[baseStr.toLowerCase()];
        var number2 = parseInt(match[1] + digits, base2) + increment * actionArgs.repeat;
        numberStr = number2.toString(base2);
        var zeroPadding = baseStr ? new Array(digits.length - numberStr.length + 1 + match[1].length).join("0") : "";
        if (numberStr.charAt(0) === "-") {
          numberStr = "-" + baseStr + zeroPadding + numberStr.substr(1);
        } else {
          numberStr = baseStr + zeroPadding + numberStr;
        }
        var from = new Pos2(cur2.line, start);
        var to2 = new Pos2(cur2.line, end);
        cm2.replaceRange(numberStr, from, to2);
      } else {
        return;
      }
      cm2.setCursor(new Pos2(cur2.line, start + numberStr.length - 1));
    },
    repeatLastEdit: function(cm2, actionArgs, vim2) {
      var lastEditInputState = vim2.lastEditInputState;
      if (!lastEditInputState) {
        return;
      }
      var repeat = actionArgs.repeat;
      if (repeat && actionArgs.repeatIsExplicit) {
        lastEditInputState.repeatOverride = repeat;
      } else {
        repeat = lastEditInputState.repeatOverride || repeat;
      }
      repeatLastEdit(
        cm2,
        vim2,
        repeat,
        false
        /** repeatForInsert */
      );
    },
    indent: function(cm2, actionArgs) {
      cm2.indentLine(cm2.getCursor().line, actionArgs.indentRight);
    },
    exitInsertMode: function(cm2, actionArgs) {
      exitInsertMode(cm2);
    }
  };
  function defineAction(name2, fn2) {
    actions[name2] = fn2;
  }
  function clipCursorToContent(cm2, cur2, oldCur) {
    var vim2 = cm2.state.vim;
    var includeLineBreak = vim2.insertMode || vim2.visualMode;
    var line = Math.min(Math.max(cm2.firstLine(), cur2.line), cm2.lastLine());
    var text = cm2.getLine(line);
    var maxCh = text.length - 1 + Number(!!includeLineBreak);
    var ch2 = Math.min(Math.max(0, cur2.ch), maxCh);
    var charCode = text.charCodeAt(ch2);
    if (56320 <= charCode && charCode <= 57343) {
      var direction = 1;
      if (oldCur && oldCur.line == line && oldCur.ch > ch2) {
        direction = -1;
      }
      ch2 += direction;
      if (ch2 > maxCh) ch2 -= 2;
    }
    return new Pos2(line, ch2);
  }
  function copyArgs(args) {
    var ret = {};
    for (var prop in args) {
      if (args.hasOwnProperty(prop)) {
        ret[prop] = args[prop];
      }
    }
    return ret;
  }
  function offsetCursor(cur2, offsetLine, offsetCh) {
    if (typeof offsetLine === "object") {
      offsetCh = offsetLine.ch;
      offsetLine = offsetLine.line;
    }
    return new Pos2(cur2.line + offsetLine, cur2.ch + offsetCh);
  }
  function commandMatches(keys3, keyMap, context, inputState) {
    if (inputState.operator) context = "operatorPending";
    var match, partial = [], full = [];
    var startIndex = noremap ? keyMap.length - defaultKeymapLength : 0;
    for (var i2 = startIndex; i2 < keyMap.length; i2++) {
      var command2 = keyMap[i2];
      if (context == "insert" && command2.context != "insert" || command2.context && command2.context != context || inputState.operator && command2.type == "action" || !(match = commandMatch(keys3, command2.keys))) {
        continue;
      }
      if (match == "partial") {
        partial.push(command2);
      }
      if (match == "full") {
        full.push(command2);
      }
    }
    return {
      partial: partial.length && partial,
      full: full.length && full
    };
  }
  function commandMatch(pressed, mapped) {
    const isLastCharacter = mapped.slice(-11) == "<character>";
    const isLastRegister = mapped.slice(-10) == "<register>";
    if (isLastCharacter || isLastRegister) {
      var prefixLen = mapped.length - (isLastCharacter ? 11 : 10);
      var pressedPrefix = pressed.slice(0, prefixLen);
      var mappedPrefix = mapped.slice(0, prefixLen);
      return pressedPrefix == mappedPrefix && pressed.length > prefixLen ? "full" : mappedPrefix.indexOf(pressedPrefix) == 0 ? "partial" : false;
    } else {
      return pressed == mapped ? "full" : mapped.indexOf(pressed) == 0 ? "partial" : false;
    }
  }
  function lastChar(keys3) {
    var match = /^.*(<[^>]+>)$/.exec(keys3);
    var selectedCharacter = match ? match[1] : keys3.slice(-1);
    if (selectedCharacter.length > 1) {
      switch (selectedCharacter) {
        case "<CR>":
        case "<S-CR>":
          selectedCharacter = "\n";
          break;
        case "<Space>":
        case "<S-Space>":
          selectedCharacter = " ";
          break;
        default:
          selectedCharacter = "";
          break;
      }
    }
    return selectedCharacter;
  }
  function repeatFn(cm2, fn2, repeat) {
    return function() {
      for (var i2 = 0; i2 < repeat; i2++) {
        fn2(cm2);
      }
    };
  }
  function copyCursor(cur2) {
    return new Pos2(cur2.line, cur2.ch);
  }
  function cursorEqual(cur1, cur2) {
    return cur1.ch == cur2.ch && cur1.line == cur2.line;
  }
  function cursorIsBefore(cur1, cur2) {
    if (cur1.line < cur2.line) {
      return true;
    }
    if (cur1.line == cur2.line && cur1.ch < cur2.ch) {
      return true;
    }
    return false;
  }
  function cursorMin(cur1, cur2) {
    if (arguments.length > 2) {
      cur2 = cursorMin.apply(void 0, Array.prototype.slice.call(arguments, 1));
    }
    return cursorIsBefore(cur1, cur2) ? cur1 : cur2;
  }
  function cursorMax(cur1, cur2) {
    if (arguments.length > 2) {
      cur2 = cursorMax.apply(void 0, Array.prototype.slice.call(arguments, 1));
    }
    return cursorIsBefore(cur1, cur2) ? cur2 : cur1;
  }
  function cursorIsBetween(cur1, cur2, cur3) {
    var cur1before2 = cursorIsBefore(cur1, cur2);
    var cur2before3 = cursorIsBefore(cur2, cur3);
    return cur1before2 && cur2before3;
  }
  function lineLength(cm2, lineNum) {
    return cm2.getLine(lineNum).length;
  }
  function trim(s2) {
    if (s2.trim) {
      return s2.trim();
    }
    return s2.replace(/^\s+|\s+$/g, "");
  }
  function escapeRegex(s2) {
    return s2.replace(/([.?*+$\[\]\/\\(){}|\-])/g, "\\$1");
  }
  function extendLineToColumn(cm2, lineNum, column) {
    var endCh = lineLength(cm2, lineNum);
    var spaces2 = new Array(column - endCh + 1).join(" ");
    cm2.setCursor(new Pos2(lineNum, endCh));
    cm2.replaceRange(spaces2, cm2.getCursor());
  }
  function selectBlock(cm2, selectionEnd) {
    var selections = [], ranges = cm2.listSelections();
    var head = copyCursor(cm2.clipPos(selectionEnd));
    var isClipped = !cursorEqual(selectionEnd, head);
    var curHead = cm2.getCursor("head");
    var primIndex = getIndex(ranges, curHead);
    var wasClipped = cursorEqual(ranges[primIndex].head, ranges[primIndex].anchor);
    var max = ranges.length - 1;
    var index = max - primIndex > primIndex ? max : 0;
    var base2 = ranges[index].anchor;
    var firstLine = Math.min(base2.line, head.line);
    var lastLine = Math.max(base2.line, head.line);
    var baseCh = base2.ch, headCh = head.ch;
    var dir = ranges[index].head.ch - baseCh;
    var newDir = headCh - baseCh;
    if (dir > 0 && newDir <= 0) {
      baseCh++;
      if (!isClipped) {
        headCh--;
      }
    } else if (dir < 0 && newDir >= 0) {
      baseCh--;
      if (!wasClipped) {
        headCh++;
      }
    } else if (dir < 0 && newDir == -1) {
      baseCh--;
      headCh++;
    }
    for (var line = firstLine; line <= lastLine; line++) {
      var range = { anchor: new Pos2(line, baseCh), head: new Pos2(line, headCh) };
      selections.push(range);
    }
    cm2.setSelections(selections);
    selectionEnd.ch = headCh;
    base2.ch = baseCh;
    return base2;
  }
  function selectForInsert(cm2, head, height) {
    var sel = [];
    for (var i2 = 0; i2 < height; i2++) {
      var lineHead = offsetCursor(head, i2, 0);
      sel.push({ anchor: lineHead, head: lineHead });
    }
    cm2.setSelections(sel, 0);
  }
  function getIndex(ranges, cursor, end) {
    for (var i2 = 0; i2 < ranges.length; i2++) {
      var atAnchor = end != "head" && cursorEqual(ranges[i2].anchor, cursor);
      var atHead = end != "anchor" && cursorEqual(ranges[i2].head, cursor);
      if (atAnchor || atHead) {
        return i2;
      }
    }
    return -1;
  }
  function getSelectedAreaRange(cm2, vim2) {
    var lastSelection = vim2.lastSelection;
    var getCurrentSelectedAreaRange = function() {
      var selections = cm2.listSelections();
      var start = selections[0];
      var end = selections[selections.length - 1];
      var selectionStart = cursorIsBefore(start.anchor, start.head) ? start.anchor : start.head;
      var selectionEnd = cursorIsBefore(end.anchor, end.head) ? end.head : end.anchor;
      return [selectionStart, selectionEnd];
    };
    var getLastSelectedAreaRange = function() {
      var selectionStart = cm2.getCursor();
      var selectionEnd = cm2.getCursor();
      var block = lastSelection.visualBlock;
      if (block) {
        var width = block.width;
        var height = block.height;
        selectionEnd = new Pos2(selectionStart.line + height, selectionStart.ch + width);
        var selections = [];
        for (var i2 = selectionStart.line; i2 < selectionEnd.line; i2++) {
          var anchor = new Pos2(i2, selectionStart.ch);
          var head = new Pos2(i2, selectionEnd.ch);
          var range = { anchor, head };
          selections.push(range);
        }
        cm2.setSelections(selections);
      } else {
        var start = lastSelection.anchorMark.find();
        var end = lastSelection.headMark.find();
        var line = end.line - start.line;
        var ch2 = end.ch - start.ch;
        selectionEnd = { line: selectionEnd.line + line, ch: line ? selectionEnd.ch : ch2 + selectionEnd.ch };
        if (lastSelection.visualLine) {
          selectionStart = new Pos2(selectionStart.line, 0);
          selectionEnd = new Pos2(selectionEnd.line, lineLength(cm2, selectionEnd.line));
        }
        cm2.setSelection(selectionStart, selectionEnd);
      }
      return [selectionStart, selectionEnd];
    };
    if (!vim2.visualMode) {
      return getLastSelectedAreaRange();
    } else {
      return getCurrentSelectedAreaRange();
    }
  }
  function updateLastSelection(cm2, vim2) {
    var anchor = vim2.sel.anchor;
    var head = vim2.sel.head;
    if (vim2.lastPastedText) {
      head = cm2.posFromIndex(cm2.indexFromPos(anchor) + vim2.lastPastedText.length);
      vim2.lastPastedText = null;
    }
    vim2.lastSelection = {
      "anchorMark": cm2.setBookmark(anchor),
      "headMark": cm2.setBookmark(head),
      "anchor": copyCursor(anchor),
      "head": copyCursor(head),
      "visualMode": vim2.visualMode,
      "visualLine": vim2.visualLine,
      "visualBlock": vim2.visualBlock
    };
  }
  function expandSelection(cm2, start, end, move) {
    var sel = cm2.state.vim.sel;
    var head = move ? start : sel.head;
    var anchor = move ? start : sel.anchor;
    var tmp;
    if (cursorIsBefore(end, start)) {
      tmp = end;
      end = start;
      start = tmp;
    }
    if (cursorIsBefore(head, anchor)) {
      head = cursorMin(start, head);
      anchor = cursorMax(anchor, end);
    } else {
      anchor = cursorMin(start, anchor);
      head = cursorMax(head, end);
      head = offsetCursor(head, 0, -1);
      if (head.ch == -1 && head.line != cm2.firstLine()) {
        head = new Pos2(head.line - 1, lineLength(cm2, head.line - 1));
      }
    }
    return [anchor, head];
  }
  function updateCmSelection(cm2, sel, mode) {
    var vim2 = cm2.state.vim;
    sel = sel || vim2.sel;
    if (!mode) {
      mode = vim2.visualLine ? "line" : vim2.visualBlock ? "block" : "char";
    }
    var cmSel = makeCmSelection(cm2, sel, mode);
    cm2.setSelections(cmSel.ranges, cmSel.primary);
  }
  function makeCmSelection(cm2, sel, mode, exclusive) {
    var head = copyCursor(sel.head);
    var anchor = copyCursor(sel.anchor);
    if (mode == "char") {
      var headOffset = !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;
      var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;
      head = offsetCursor(sel.head, 0, headOffset);
      anchor = offsetCursor(sel.anchor, 0, anchorOffset);
      return {
        ranges: [{ anchor, head }],
        primary: 0
      };
    } else if (mode == "line") {
      if (!cursorIsBefore(sel.head, sel.anchor)) {
        anchor.ch = 0;
        var lastLine = cm2.lastLine();
        if (head.line > lastLine) {
          head.line = lastLine;
        }
        head.ch = lineLength(cm2, head.line);
      } else {
        head.ch = 0;
        anchor.ch = lineLength(cm2, anchor.line);
      }
      return {
        ranges: [{ anchor, head }],
        primary: 0
      };
    } else if (mode == "block") {
      var top2 = Math.min(anchor.line, head.line), fromCh = anchor.ch, bottom = Math.max(anchor.line, head.line), toCh = head.ch;
      if (fromCh < toCh) {
        toCh += 1;
      } else {
        fromCh += 1;
      }
      var height = bottom - top2 + 1;
      var primary = head.line == top2 ? 0 : height - 1;
      var ranges = [];
      for (var i2 = 0; i2 < height; i2++) {
        ranges.push({
          anchor: new Pos2(top2 + i2, fromCh),
          head: new Pos2(top2 + i2, toCh)
        });
      }
      return {
        ranges,
        primary
      };
    }
    throw "never happens";
  }
  function getHead(cm2) {
    var cur2 = cm2.getCursor("head");
    if (cm2.getSelection().length == 1) {
      cur2 = cursorMin(cur2, cm2.getCursor("anchor"));
    }
    return cur2;
  }
  function exitVisualMode(cm2, moveHead) {
    var vim2 = cm2.state.vim;
    if (moveHead !== false) {
      cm2.setCursor(clipCursorToContent(cm2, vim2.sel.head));
    }
    updateLastSelection(cm2, vim2);
    vim2.visualMode = false;
    vim2.visualLine = false;
    vim2.visualBlock = false;
    if (!vim2.insertMode) CodeMirror2.signal(cm2, "vim-mode-change", { mode: "normal" });
  }
  function clipToLine(cm2, curStart, curEnd) {
    var selection = cm2.getRange(curStart, curEnd);
    if (/\n\s*$/.test(selection)) {
      var lines = selection.split("\n");
      lines.pop();
      for (var line = lines.pop(); lines.length > 0 && line && isWhiteSpaceString(line); line = lines.pop()) {
        curEnd.line--;
        curEnd.ch = 0;
      }
      if (line) {
        curEnd.line--;
        curEnd.ch = lineLength(cm2, curEnd.line);
      } else {
        curEnd.ch = 0;
      }
    }
  }
  function expandSelectionToLine(_cm, curStart, curEnd) {
    curStart.ch = 0;
    curEnd.ch = 0;
    curEnd.line++;
  }
  function findFirstNonWhiteSpaceCharacter(text) {
    if (!text) {
      return 0;
    }
    var firstNonWS = text.search(/\S/);
    return firstNonWS == -1 ? text.length : firstNonWS;
  }
  function expandWordUnderCursor(cm2, { inclusive, innerWord, bigWord, noSymbol, multiline }, cursor) {
    var cur2 = cursor || getHead(cm2);
    var line = cm2.getLine(cur2.line);
    var endLine = line;
    var startLineNumber = cur2.line;
    var endLineNumber = startLineNumber;
    var idx = cur2.ch;
    var wordOnNextLine;
    var test = noSymbol ? wordCharTest[0] : bigWordCharTest[0];
    if (innerWord && /\s/.test(line.charAt(idx))) {
      test = function(ch2) {
        return /\s/.test(ch2);
      };
    } else {
      while (!test(line.charAt(idx))) {
        idx++;
        if (idx >= line.length) {
          if (!multiline) return null;
          idx--;
          wordOnNextLine = findWord(cm2, cur2, true, bigWord, true);
          break;
        }
      }
      if (bigWord) {
        test = bigWordCharTest[0];
      } else {
        test = wordCharTest[0];
        if (!test(line.charAt(idx))) {
          test = wordCharTest[1];
        }
      }
    }
    var end = idx, start = idx;
    while (test(line.charAt(start)) && start >= 0) {
      start--;
    }
    start++;
    if (wordOnNextLine) {
      end = wordOnNextLine.to;
      endLineNumber = wordOnNextLine.line;
      endLine = cm2.getLine(endLineNumber);
      if (!endLine && end == 0) end++;
    } else {
      while (test(line.charAt(end)) && end < line.length) {
        end++;
      }
    }
    if (inclusive) {
      var wordEnd = end;
      var startsWithSpace = cur2.ch <= start && /\s/.test(line.charAt(cur2.ch));
      if (!startsWithSpace) {
        while (/\s/.test(endLine.charAt(end)) && end < endLine.length) {
          end++;
        }
      }
      if (wordEnd == end || startsWithSpace) {
        var wordStart = start;
        while (/\s/.test(line.charAt(start - 1)) && start > 0) {
          start--;
        }
        if (!start && !startsWithSpace) {
          start = wordStart;
        }
      }
    }
    return { start: new Pos2(startLineNumber, start), end: new Pos2(endLineNumber, end) };
  }
  function expandTagUnderCursor(cm2, head, inclusive) {
    var cur2 = head;
    if (!CodeMirror2.findMatchingTag || !CodeMirror2.findEnclosingTag) {
      return { start: cur2, end: cur2 };
    }
    var tags3 = CodeMirror2.findMatchingTag(cm2, head) || CodeMirror2.findEnclosingTag(cm2, head);
    if (!tags3 || !tags3.open || !tags3.close) {
      return { start: cur2, end: cur2 };
    }
    if (inclusive) {
      return { start: tags3.open.from, end: tags3.close.to };
    }
    return { start: tags3.open.to, end: tags3.close.from };
  }
  function recordJumpPosition(cm2, oldCur, newCur) {
    if (!cursorEqual(oldCur, newCur)) {
      vimGlobalState.jumpList.add(cm2, oldCur, newCur);
    }
  }
  function recordLastCharacterSearch(increment, args) {
    vimGlobalState.lastCharacterSearch.increment = increment;
    vimGlobalState.lastCharacterSearch.forward = args.forward;
    vimGlobalState.lastCharacterSearch.selectedCharacter = args.selectedCharacter;
  }
  var symbolToMode = {
    "(": "bracket",
    ")": "bracket",
    "{": "bracket",
    "}": "bracket",
    "[": "section",
    "]": "section",
    "*": "comment",
    "/": "comment",
    "m": "method",
    "M": "method",
    "#": "preprocess"
  };
  var findSymbolModes = {
    bracket: {
      isComplete: function(state) {
        if (state.nextCh === state.symb) {
          state.depth++;
          if (state.depth >= 1) return true;
        } else if (state.nextCh === state.reverseSymb) {
          state.depth--;
        }
        return false;
      }
    },
    section: {
      init: function(state) {
        state.curMoveThrough = true;
        state.symb = (state.forward ? "]" : "[") === state.symb ? "{" : "}";
      },
      isComplete: function(state) {
        return state.index === 0 && state.nextCh === state.symb;
      }
    },
    comment: {
      isComplete: function(state) {
        var found = state.lastCh === "*" && state.nextCh === "/";
        state.lastCh = state.nextCh;
        return found;
      }
    },
    // TODO: The original Vim implementation only operates on level 1 and 2.
    // The current implementation doesn't check for code block level and
    // therefore it operates on any levels.
    method: {
      init: function(state) {
        state.symb = state.symb === "m" ? "{" : "}";
        state.reverseSymb = state.symb === "{" ? "}" : "{";
      },
      isComplete: function(state) {
        if (state.nextCh === state.symb) return true;
        return false;
      }
    },
    preprocess: {
      init: function(state) {
        state.index = 0;
      },
      isComplete: function(state) {
        if (state.nextCh === "#") {
          var token = state.lineText.match(/^#(\w+)/)[1];
          if (token === "endif") {
            if (state.forward && state.depth === 0) {
              return true;
            }
            state.depth++;
          } else if (token === "if") {
            if (!state.forward && state.depth === 0) {
              return true;
            }
            state.depth--;
          }
          if (token === "else" && state.depth === 0) return true;
        }
        return false;
      }
    }
  };
  function findSymbol(cm2, repeat, forward, symb) {
    var cur2 = copyCursor(cm2.getCursor());
    var increment = forward ? 1 : -1;
    var endLine = forward ? cm2.lineCount() : -1;
    var curCh = cur2.ch;
    var line = cur2.line;
    var lineText = cm2.getLine(line);
    var state = {
      lineText,
      nextCh: lineText.charAt(curCh),
      lastCh: null,
      index: curCh,
      symb,
      reverseSymb: (forward ? { ")": "(", "}": "{" } : { "(": ")", "{": "}" })[symb],
      forward,
      depth: 0,
      curMoveThrough: false
    };
    var mode = symbolToMode[symb];
    if (!mode) return cur2;
    var init = findSymbolModes[mode].init;
    var isComplete = findSymbolModes[mode].isComplete;
    if (init) {
      init(state);
    }
    while (line !== endLine && repeat) {
      state.index += increment;
      state.nextCh = state.lineText.charAt(state.index);
      if (!state.nextCh) {
        line += increment;
        state.lineText = cm2.getLine(line) || "";
        if (increment > 0) {
          state.index = 0;
        } else {
          var lineLen = state.lineText.length;
          state.index = lineLen > 0 ? lineLen - 1 : 0;
        }
        state.nextCh = state.lineText.charAt(state.index);
      }
      if (isComplete(state)) {
        cur2.line = line;
        cur2.ch = state.index;
        repeat--;
      }
    }
    if (state.nextCh || state.curMoveThrough) {
      return new Pos2(line, state.index);
    }
    return cur2;
  }
  function findWord(cm2, cur2, forward, bigWord, emptyLineIsWord) {
    var lineNum = cur2.line;
    var pos = cur2.ch;
    var line = cm2.getLine(lineNum);
    var dir = forward ? 1 : -1;
    var charTests = bigWord ? bigWordCharTest : wordCharTest;
    if (emptyLineIsWord && line == "") {
      lineNum += dir;
      line = cm2.getLine(lineNum);
      if (!isLine(cm2, lineNum)) {
        return null;
      }
      pos = forward ? 0 : line.length;
    }
    while (true) {
      if (emptyLineIsWord && line == "") {
        return { from: 0, to: 0, line: lineNum };
      }
      var stop = dir > 0 ? line.length : -1;
      var wordStart = stop, wordEnd = stop;
      while (pos != stop) {
        var foundWord = false;
        for (var i2 = 0; i2 < charTests.length && !foundWord; ++i2) {
          if (charTests[i2](line.charAt(pos))) {
            wordStart = pos;
            while (pos != stop && charTests[i2](line.charAt(pos))) {
              pos += dir;
            }
            wordEnd = pos;
            foundWord = wordStart != wordEnd;
            if (wordStart == cur2.ch && lineNum == cur2.line && wordEnd == wordStart + dir) {
              continue;
            } else {
              return {
                from: Math.min(wordStart, wordEnd + 1),
                to: Math.max(wordStart, wordEnd),
                line: lineNum
              };
            }
          }
        }
        if (!foundWord) {
          pos += dir;
        }
      }
      lineNum += dir;
      if (!isLine(cm2, lineNum)) {
        return null;
      }
      line = cm2.getLine(lineNum);
      pos = dir > 0 ? 0 : line.length;
    }
  }
  function moveToWord(cm2, cur2, repeat, forward, wordEnd, bigWord) {
    var curStart = copyCursor(cur2);
    var words = [];
    if (forward && !wordEnd || !forward && wordEnd) {
      repeat++;
    }
    var emptyLineIsWord = !(forward && wordEnd);
    for (var i2 = 0; i2 < repeat; i2++) {
      var word = findWord(cm2, cur2, forward, bigWord, emptyLineIsWord);
      if (!word) {
        var eodCh = lineLength(cm2, cm2.lastLine());
        words.push(forward ? { line: cm2.lastLine(), from: eodCh, to: eodCh } : { line: 0, from: 0, to: 0 });
        break;
      }
      words.push(word);
      cur2 = new Pos2(word.line, forward ? word.to - 1 : word.from);
    }
    var shortCircuit = words.length != repeat;
    var firstWord = words[0];
    var lastWord = words.pop();
    if (forward && !wordEnd) {
      if (!shortCircuit && (firstWord.from != curStart.ch || firstWord.line != curStart.line)) {
        lastWord = words.pop();
      }
      return lastWord && new Pos2(lastWord.line, lastWord.from);
    } else if (forward && wordEnd) {
      return lastWord && new Pos2(lastWord.line, lastWord.to - 1);
    } else if (!forward && wordEnd) {
      if (!shortCircuit && (firstWord.to != curStart.ch || firstWord.line != curStart.line)) {
        lastWord = words.pop();
      }
      return lastWord && new Pos2(lastWord.line, lastWord.to);
    } else {
      return lastWord && new Pos2(lastWord.line, lastWord.from);
    }
  }
  function moveToEol(cm2, head, motionArgs, vim2, keepHPos) {
    var cur2 = head;
    var retval = new Pos2(cur2.line + motionArgs.repeat - 1, Infinity);
    var end = cm2.clipPos(retval);
    end.ch--;
    if (!keepHPos) {
      vim2.lastHPos = Infinity;
      vim2.lastHSPos = cm2.charCoords(end, "div").left;
    }
    return retval;
  }
  function moveToCharacter(cm2, repeat, forward, character, head) {
    if (!character) return;
    var cur2 = head || cm2.getCursor();
    var start = cur2.ch;
    var idx;
    for (var i2 = 0; i2 < repeat; i2++) {
      var line = cm2.getLine(cur2.line);
      idx = charIdxInLine(start, line, character, forward, true);
      if (idx == -1) {
        return void 0;
      }
      start = idx;
    }
    if (idx != void 0)
      return new Pos2(cm2.getCursor().line, idx);
  }
  function moveToColumn(cm2, repeat) {
    var line = cm2.getCursor().line;
    return clipCursorToContent(cm2, new Pos2(line, repeat - 1));
  }
  function updateMark(cm2, vim2, markName, pos) {
    if (!inArray(markName, validMarks) && !latinCharRegex.test(markName)) {
      return;
    }
    if (vim2.marks[markName]) {
      vim2.marks[markName].clear();
    }
    vim2.marks[markName] = cm2.setBookmark(pos);
  }
  function charIdxInLine(start, line, character, forward, includeChar) {
    var idx;
    if (forward) {
      idx = line.indexOf(character, start + 1);
      if (idx != -1 && !includeChar) {
        idx -= 1;
      }
    } else {
      idx = line.lastIndexOf(character, start - 1);
      if (idx != -1 && !includeChar) {
        idx += 1;
      }
    }
    return idx;
  }
  function findParagraph(cm2, head, repeat, dir, inclusive) {
    var line = head.line;
    var min = cm2.firstLine();
    var max = cm2.lastLine();
    var start, end, i2 = line;
    function isEmpty(i3) {
      return !cm2.getLine(i3);
    }
    function isBoundary(i3, dir2, any) {
      if (any) {
        return isEmpty(i3) != isEmpty(i3 + dir2);
      }
      return !isEmpty(i3) && isEmpty(i3 + dir2);
    }
    if (dir) {
      while (min <= i2 && i2 <= max && repeat > 0) {
        if (isBoundary(i2, dir)) {
          repeat--;
        }
        i2 += dir;
      }
      return { start: new Pos2(i2, 0), end: head };
    }
    var vim2 = cm2.state.vim;
    if (vim2.visualLine && isBoundary(line, 1, true)) {
      var anchor = vim2.sel.anchor;
      if (isBoundary(anchor.line, -1, true)) {
        if (!inclusive || anchor.line != line) {
          line += 1;
        }
      }
    }
    var startState = isEmpty(line);
    for (i2 = line; i2 <= max && repeat; i2++) {
      if (isBoundary(i2, 1, true)) {
        if (!inclusive || isEmpty(i2) != startState) {
          repeat--;
        }
      }
    }
    end = new Pos2(i2, 0);
    if (i2 > max && !startState) {
      startState = true;
    } else {
      inclusive = false;
    }
    for (i2 = line; i2 > min; i2--) {
      if (!inclusive || isEmpty(i2) == startState || i2 == line) {
        if (isBoundary(i2, -1, true)) {
          break;
        }
      }
    }
    start = new Pos2(i2, 0);
    return { start, end };
  }
  function getSentence(cm2, cur2, repeat, dir, inclusive) {
    function nextChar2(curr) {
      if (curr.pos + curr.dir < 0 || curr.pos + curr.dir >= curr.line.length) {
        curr.line = null;
      } else {
        curr.pos += curr.dir;
      }
    }
    function forward(cm3, ln2, pos, dir2) {
      var line = cm3.getLine(ln2);
      var curr = {
        line,
        ln: ln2,
        pos,
        dir: dir2
      };
      if (curr.line === "") {
        return { ln: curr.ln, pos: curr.pos };
      }
      var lastSentencePos = curr.pos;
      nextChar2(curr);
      while (curr.line !== null) {
        lastSentencePos = curr.pos;
        if (isEndOfSentenceSymbol(curr.line[curr.pos])) {
          if (!inclusive) {
            return { ln: curr.ln, pos: curr.pos + 1 };
          } else {
            nextChar2(curr);
            while (curr.line !== null) {
              if (isWhiteSpaceString(curr.line[curr.pos])) {
                lastSentencePos = curr.pos;
                nextChar2(curr);
              } else {
                break;
              }
            }
            return { ln: curr.ln, pos: lastSentencePos + 1 };
          }
        }
        nextChar2(curr);
      }
      return { ln: curr.ln, pos: lastSentencePos + 1 };
    }
    function reverse(cm3, ln2, pos, dir2) {
      var line = cm3.getLine(ln2);
      var curr = {
        line,
        ln: ln2,
        pos,
        dir: dir2
      };
      if (curr.line === "") {
        return { ln: curr.ln, pos: curr.pos };
      }
      var lastSentencePos = curr.pos;
      nextChar2(curr);
      while (curr.line !== null) {
        if (!isWhiteSpaceString(curr.line[curr.pos]) && !isEndOfSentenceSymbol(curr.line[curr.pos])) {
          lastSentencePos = curr.pos;
        } else if (isEndOfSentenceSymbol(curr.line[curr.pos])) {
          if (!inclusive) {
            return { ln: curr.ln, pos: lastSentencePos };
          } else {
            if (isWhiteSpaceString(curr.line[curr.pos + 1])) {
              return { ln: curr.ln, pos: curr.pos + 1 };
            } else {
              return { ln: curr.ln, pos: lastSentencePos };
            }
          }
        }
        nextChar2(curr);
      }
      curr.line = line;
      if (inclusive && isWhiteSpaceString(curr.line[curr.pos])) {
        return { ln: curr.ln, pos: curr.pos };
      } else {
        return { ln: curr.ln, pos: lastSentencePos };
      }
    }
    var curr_index = {
      ln: cur2.line,
      pos: cur2.ch
    };
    while (repeat > 0) {
      if (dir < 0) {
        curr_index = reverse(cm2, curr_index.ln, curr_index.pos, dir);
      } else {
        curr_index = forward(cm2, curr_index.ln, curr_index.pos, dir);
      }
      repeat--;
    }
    return new Pos2(curr_index.ln, curr_index.pos);
  }
  function findSentence(cm2, cur2, repeat, dir) {
    function nextChar2(cm3, idx) {
      if (idx.pos + idx.dir < 0 || idx.pos + idx.dir >= idx.line.length) {
        idx.ln += idx.dir;
        if (!isLine(cm3, idx.ln)) {
          idx.line = null;
          idx.ln = null;
          idx.pos = null;
          return;
        }
        idx.line = cm3.getLine(idx.ln);
        idx.pos = idx.dir > 0 ? 0 : idx.line.length - 1;
      } else {
        idx.pos += idx.dir;
      }
    }
    function forward(cm3, ln2, pos, dir2) {
      var line = cm3.getLine(ln2);
      var stop = line === "";
      var curr = {
        line,
        ln: ln2,
        pos,
        dir: dir2
      };
      var last_valid = {
        ln: curr.ln,
        pos: curr.pos
      };
      var skip_empty_lines = curr.line === "";
      nextChar2(cm3, curr);
      while (curr.line !== null) {
        last_valid.ln = curr.ln;
        last_valid.pos = curr.pos;
        if (curr.line === "" && !skip_empty_lines) {
          return { ln: curr.ln, pos: curr.pos };
        } else if (stop && curr.line !== "" && !isWhiteSpaceString(curr.line[curr.pos])) {
          return { ln: curr.ln, pos: curr.pos };
        } else if (isEndOfSentenceSymbol(curr.line[curr.pos]) && !stop && (curr.pos === curr.line.length - 1 || isWhiteSpaceString(curr.line[curr.pos + 1]))) {
          stop = true;
        }
        nextChar2(cm3, curr);
      }
      var line = cm3.getLine(last_valid.ln);
      last_valid.pos = 0;
      for (var i2 = line.length - 1; i2 >= 0; --i2) {
        if (!isWhiteSpaceString(line[i2])) {
          last_valid.pos = i2;
          break;
        }
      }
      return last_valid;
    }
    function reverse(cm3, ln2, pos, dir2) {
      var line = cm3.getLine(ln2);
      var curr = {
        line,
        ln: ln2,
        pos,
        dir: dir2
      };
      var last_valid = {
        ln: curr.ln,
        pos: null
      };
      var skip_empty_lines = curr.line === "";
      nextChar2(cm3, curr);
      while (curr.line !== null) {
        if (curr.line === "" && !skip_empty_lines) {
          if (last_valid.pos !== null) {
            return last_valid;
          } else {
            return { ln: curr.ln, pos: curr.pos };
          }
        } else if (isEndOfSentenceSymbol(curr.line[curr.pos]) && last_valid.pos !== null && !(curr.ln === last_valid.ln && curr.pos + 1 === last_valid.pos)) {
          return last_valid;
        } else if (curr.line !== "" && !isWhiteSpaceString(curr.line[curr.pos])) {
          skip_empty_lines = false;
          last_valid = { ln: curr.ln, pos: curr.pos };
        }
        nextChar2(cm3, curr);
      }
      var line = cm3.getLine(last_valid.ln);
      last_valid.pos = 0;
      for (var i2 = 0; i2 < line.length; ++i2) {
        if (!isWhiteSpaceString(line[i2])) {
          last_valid.pos = i2;
          break;
        }
      }
      return last_valid;
    }
    var curr_index = {
      ln: cur2.line,
      pos: cur2.ch
    };
    while (repeat > 0) {
      if (dir < 0) {
        curr_index = reverse(cm2, curr_index.ln, curr_index.pos, dir);
      } else {
        curr_index = forward(cm2, curr_index.ln, curr_index.pos, dir);
      }
      repeat--;
    }
    return new Pos2(curr_index.ln, curr_index.pos);
  }
  function selectCompanionObject(cm2, head, symb, inclusive) {
    var cur2 = head;
    var bracketRegexp = {
      "(": /[()]/,
      ")": /[()]/,
      "[": /[[\]]/,
      "]": /[[\]]/,
      "{": /[{}]/,
      "}": /[{}]/,
      "<": /[<>]/,
      ">": /[<>]/
    }[symb];
    var openSym = {
      "(": "(",
      ")": "(",
      "[": "[",
      "]": "[",
      "{": "{",
      "}": "{",
      "<": "<",
      ">": "<"
    }[symb];
    var curChar = cm2.getLine(cur2.line).charAt(cur2.ch);
    var offset = curChar === openSym ? 1 : 0;
    var startBracket = cm2.scanForBracket(new Pos2(cur2.line, cur2.ch + offset), -1, void 0, { "bracketRegex": bracketRegexp });
    var endBracket = cm2.scanForBracket(new Pos2(cur2.line, cur2.ch + offset), 1, void 0, { "bracketRegex": bracketRegexp });
    if (!startBracket || !endBracket) return null;
    var start = startBracket.pos;
    var end = endBracket.pos;
    if (start.line == end.line && start.ch > end.ch || start.line > end.line) {
      var tmp = start;
      start = end;
      end = tmp;
    }
    if (inclusive) {
      end.ch += 1;
    } else {
      start.ch += 1;
    }
    return { start, end };
  }
  function findBeginningAndEnd(cm2, head, symb, inclusive) {
    var cur2 = copyCursor(head);
    var line = cm2.getLine(cur2.line);
    var chars = line.split("");
    var start, end, i2, len;
    var firstIndex = chars.indexOf(symb);
    if (cur2.ch < firstIndex) {
      cur2.ch = firstIndex;
    } else if (firstIndex < cur2.ch && chars[cur2.ch] == symb) {
      var stringAfter = /string/.test(cm2.getTokenTypeAt(offsetCursor(head, 0, 1)));
      var stringBefore = /string/.test(cm2.getTokenTypeAt(head));
      var isStringStart = stringAfter && !stringBefore;
      if (!isStringStart) {
        end = cur2.ch;
        --cur2.ch;
      }
    }
    if (chars[cur2.ch] == symb && !end) {
      start = cur2.ch + 1;
    } else {
      for (i2 = cur2.ch; i2 > -1 && !start; i2--) {
        if (chars[i2] == symb) {
          start = i2 + 1;
        }
      }
    }
    if (start && !end) {
      for (i2 = start, len = chars.length; i2 < len && !end; i2++) {
        if (chars[i2] == symb) {
          end = i2;
        }
      }
    }
    if (!start || !end) {
      return { start: cur2, end: cur2 };
    }
    if (inclusive) {
      --start;
      ++end;
    }
    return {
      start: new Pos2(cur2.line, start),
      end: new Pos2(cur2.line, end)
    };
  }
  defineOption("pcre", true, "boolean");
  class SearchState2 {
    getQuery() {
      return vimGlobalState.query;
    }
    setQuery(query) {
      vimGlobalState.query = query;
    }
    getOverlay() {
      return this.searchOverlay;
    }
    setOverlay(overlay) {
      this.searchOverlay = overlay;
    }
    isReversed() {
      return vimGlobalState.isReversed;
    }
    setReversed(reversed) {
      vimGlobalState.isReversed = reversed;
    }
    getScrollbarAnnotate() {
      return this.annotate;
    }
    setScrollbarAnnotate(annotate) {
      this.annotate = annotate;
    }
  }
  function getSearchState(cm2) {
    var vim2 = cm2.state.vim;
    return vim2.searchState_ || (vim2.searchState_ = new SearchState2());
  }
  function splitBySlash(argString) {
    return splitBySeparator(argString, "/");
  }
  function findUnescapedSlashes(argString) {
    return findUnescapedSeparators(argString, "/");
  }
  function splitBySeparator(argString, separator) {
    var slashes = findUnescapedSeparators(argString, separator) || [];
    if (!slashes.length) return [];
    var tokens = [];
    if (slashes[0] !== 0) return;
    for (var i2 = 0; i2 < slashes.length; i2++) {
      if (typeof slashes[i2] == "number")
        tokens.push(argString.substring(slashes[i2] + 1, slashes[i2 + 1]));
    }
    return tokens;
  }
  function findUnescapedSeparators(str, separator) {
    if (!separator)
      separator = "/";
    var escapeNextChar = false;
    var slashes = [];
    for (var i2 = 0; i2 < str.length; i2++) {
      var c2 = str.charAt(i2);
      if (!escapeNextChar && c2 == separator) {
        slashes.push(i2);
      }
      escapeNextChar = !escapeNextChar && c2 == "\\";
    }
    return slashes;
  }
  function translateRegex(str) {
    var specials = "|(){";
    var unescape2 = "}";
    var escapeNextChar = false;
    var out = [];
    for (var i2 = -1; i2 < str.length; i2++) {
      var c2 = str.charAt(i2) || "";
      var n2 = str.charAt(i2 + 1) || "";
      var specialComesNext = n2 && specials.indexOf(n2) != -1;
      if (escapeNextChar) {
        if (c2 !== "\\" || !specialComesNext) {
          out.push(c2);
        }
        escapeNextChar = false;
      } else {
        if (c2 === "\\") {
          escapeNextChar = true;
          if (n2 && unescape2.indexOf(n2) != -1) {
            specialComesNext = true;
          }
          if (!specialComesNext || n2 === "\\") {
            out.push(c2);
          }
        } else {
          out.push(c2);
          if (specialComesNext && n2 !== "\\") {
            out.push("\\");
          }
        }
      }
    }
    return out.join("");
  }
  var charUnescapes = { "\\n": "\n", "\\r": "\r", "\\t": "	" };
  function translateRegexReplace(str) {
    var escapeNextChar = false;
    var out = [];
    for (var i2 = -1; i2 < str.length; i2++) {
      var c2 = str.charAt(i2) || "";
      var n2 = str.charAt(i2 + 1) || "";
      if (charUnescapes[c2 + n2]) {
        out.push(charUnescapes[c2 + n2]);
        i2++;
      } else if (escapeNextChar) {
        out.push(c2);
        escapeNextChar = false;
      } else {
        if (c2 === "\\") {
          escapeNextChar = true;
          if (isNumber(n2) || n2 === "$") {
            out.push("$");
          } else if (n2 !== "/" && n2 !== "\\") {
            out.push("\\");
          }
        } else {
          if (c2 === "$") {
            out.push("$");
          }
          out.push(c2);
          if (n2 === "/") {
            out.push("\\");
          }
        }
      }
    }
    return out.join("");
  }
  var unescapes = { "\\/": "/", "\\\\": "\\", "\\n": "\n", "\\r": "\r", "\\t": "	", "\\&": "&" };
  function unescapeRegexReplace(str) {
    var stream = new CodeMirror2.StringStream(str);
    var output = [];
    while (!stream.eol()) {
      while (stream.peek() && stream.peek() != "\\") {
        output.push(stream.next());
      }
      var matched = false;
      for (var matcher in unescapes) {
        if (stream.match(matcher, true)) {
          matched = true;
          output.push(unescapes[matcher]);
          break;
        }
      }
      if (!matched) {
        output.push(stream.next());
      }
    }
    return output.join("");
  }
  function parseQuery(query, ignoreCase, smartCase) {
    var lastSearchRegister = vimGlobalState.registerController.getRegister("/");
    lastSearchRegister.setText(query);
    if (query instanceof RegExp) {
      return query;
    }
    var slashes = findUnescapedSlashes(query);
    var regexPart;
    var forceIgnoreCase;
    if (!slashes.length) {
      regexPart = query;
    } else {
      regexPart = query.substring(0, slashes[0]);
      var flagsPart = query.substring(slashes[0]);
      forceIgnoreCase = flagsPart.indexOf("i") != -1;
    }
    if (!regexPart) {
      return null;
    }
    if (!getOption("pcre")) {
      regexPart = translateRegex(regexPart);
    }
    if (smartCase) {
      ignoreCase = /^[^A-Z]*$/.test(regexPart);
    }
    var regexp = new RegExp(
      regexPart,
      ignoreCase || forceIgnoreCase ? "im" : "m"
    );
    return regexp;
  }
  function dom(n2) {
    if (typeof n2 === "string") n2 = document.createElement(n2);
    for (var a2, i2 = 1; i2 < arguments.length; i2++) {
      if (!(a2 = arguments[i2])) continue;
      if (typeof a2 !== "object") a2 = document.createTextNode(a2);
      if (a2.nodeType) n2.appendChild(a2);
      else for (var key in a2) {
        if (!Object.prototype.hasOwnProperty.call(a2, key)) continue;
        if (key[0] === "$") n2.style[key.slice(1)] = a2[key];
        else n2.setAttribute(key, a2[key]);
      }
    }
    return n2;
  }
  function showConfirm(cm2, template) {
    var pre = dom("div", { $color: "red", $whiteSpace: "pre", class: "cm-vim-message" }, template);
    if (cm2.openNotification) {
      cm2.openNotification(pre, { bottom: true, duration: 5e3 });
    } else {
      alert(pre.innerText);
    }
  }
  function makePrompt(prefix, desc) {
    return dom(
      "div",
      { $display: "flex" },
      dom(
        "span",
        { $fontFamily: "monospace", $whiteSpace: "pre", $flex: 1 },
        prefix,
        dom("input", {
          type: "text",
          autocorrect: "off",
          autocapitalize: "off",
          spellcheck: "false",
          $width: "100%"
        })
      ),
      desc && dom("span", { $color: "#888" }, desc)
    );
  }
  function showPrompt(cm2, options2) {
    if (keyToKeyStack.length) {
      if (!options2.value) options2.value = "";
      virtualPrompt = options2;
      return;
    }
    var template = makePrompt(options2.prefix, options2.desc);
    if (cm2.openDialog) {
      cm2.openDialog(template, options2.onClose, {
        onKeyDown: options2.onKeyDown,
        onKeyUp: options2.onKeyUp,
        bottom: true,
        selectValueOnOpen: false,
        value: options2.value
      });
    } else {
      var shortText = "";
      if (typeof options2.prefix != "string" && options2.prefix) shortText += options2.prefix.textContent;
      if (options2.desc) shortText += " " + options2.desc;
      options2.onClose(prompt(shortText, ""));
    }
  }
  function regexEqual(r1, r2) {
    if (r1 instanceof RegExp && r2 instanceof RegExp) {
      var props = ["global", "multiline", "ignoreCase", "source"];
      for (var i2 = 0; i2 < props.length; i2++) {
        var prop = props[i2];
        if (r1[prop] !== r2[prop]) {
          return false;
        }
      }
      return true;
    }
    return false;
  }
  function updateSearchQuery(cm2, rawQuery, ignoreCase, smartCase) {
    if (!rawQuery) {
      return;
    }
    var state = getSearchState(cm2);
    var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase);
    if (!query) {
      return;
    }
    highlightSearchMatches(cm2, query);
    if (regexEqual(query, state.getQuery())) {
      return query;
    }
    state.setQuery(query);
    return query;
  }
  function searchOverlay(query) {
    if (query.source.charAt(0) == "^") {
      var matchSol = true;
    }
    return {
      token: function(stream) {
        if (matchSol && !stream.sol()) {
          stream.skipToEnd();
          return;
        }
        var match = stream.match(query, false);
        if (match) {
          if (match[0].length == 0) {
            stream.next();
            return "searching";
          }
          if (!stream.sol()) {
            stream.backUp(1);
            if (!query.exec(stream.next() + match[0])) {
              stream.next();
              return null;
            }
          }
          stream.match(query);
          return "searching";
        }
        while (!stream.eol()) {
          stream.next();
          if (stream.match(query, false)) break;
        }
      },
      query
    };
  }
  var highlightTimeout = 0;
  function highlightSearchMatches(cm2, query) {
    clearTimeout(highlightTimeout);
    var searchState2 = getSearchState(cm2);
    searchState2.highlightTimeout = highlightTimeout;
    highlightTimeout = setTimeout(function() {
      if (!cm2.state.vim) return;
      var searchState3 = getSearchState(cm2);
      searchState3.highlightTimeout = null;
      var overlay = searchState3.getOverlay();
      if (!overlay || query != overlay.query) {
        if (overlay) {
          cm2.removeOverlay(overlay);
        }
        overlay = searchOverlay(query);
        cm2.addOverlay(overlay);
        if (cm2.showMatchesOnScrollbar) {
          if (searchState3.getScrollbarAnnotate()) {
            searchState3.getScrollbarAnnotate().clear();
          }
          searchState3.setScrollbarAnnotate(cm2.showMatchesOnScrollbar(query));
        }
        searchState3.setOverlay(overlay);
      }
    }, 50);
  }
  function findNext2(cm2, prev, query, repeat) {
    return cm2.operation(function() {
      if (repeat === void 0) {
        repeat = 1;
      }
      var pos = cm2.getCursor();
      var cursor = cm2.getSearchCursor(query, pos);
      for (var i2 = 0; i2 < repeat; i2++) {
        var found = cursor.find(prev);
        if (i2 == 0 && found && cursorEqual(cursor.from(), pos)) {
          var lastEndPos = prev ? cursor.from() : cursor.to();
          found = cursor.find(prev);
          if (found && !found[0] && cursorEqual(cursor.from(), lastEndPos)) {
            if (cm2.getLine(lastEndPos.line).length == lastEndPos.ch)
              found = cursor.find(prev);
          }
        }
        if (!found) {
          cursor = cm2.getSearchCursor(
            query,
            // @ts-ignore
            prev ? new Pos2(cm2.lastLine()) : new Pos2(cm2.firstLine(), 0)
          );
          if (!cursor.find(prev)) {
            return;
          }
        }
      }
      return cursor.from();
    });
  }
  function findNextFromAndToInclusive(cm2, prev, query, repeat, vim2) {
    return cm2.operation(function() {
      if (repeat === void 0) {
        repeat = 1;
      }
      var pos = cm2.getCursor();
      var cursor = cm2.getSearchCursor(query, pos);
      var found = cursor.find(!prev);
      if (!vim2.visualMode && found && cursorEqual(cursor.from(), pos)) {
        cursor.find(!prev);
      }
      for (var i2 = 0; i2 < repeat; i2++) {
        found = cursor.find(prev);
        if (!found) {
          cursor = cm2.getSearchCursor(
            query,
            // @ts-ignore
            prev ? new Pos2(cm2.lastLine()) : new Pos2(cm2.firstLine(), 0)
          );
          if (!cursor.find(prev)) {
            return;
          }
        }
      }
      return [cursor.from(), cursor.to()];
    });
  }
  function clearSearchHighlight(cm2) {
    var state = getSearchState(cm2);
    if (state.highlightTimeout) {
      clearTimeout(state.highlightTimeout);
      state.highlightTimeout = null;
    }
    cm2.removeOverlay(getSearchState(cm2).getOverlay());
    state.setOverlay(null);
    if (state.getScrollbarAnnotate()) {
      state.getScrollbarAnnotate().clear();
      state.setScrollbarAnnotate(null);
    }
  }
  function isInRange(pos, start, end) {
    if (typeof pos != "number") {
      pos = pos.line;
    }
    if (start instanceof Array) {
      return inArray(pos, start);
    } else {
      if (typeof end == "number") {
        return pos >= start && pos <= end;
      } else {
        return pos == start;
      }
    }
  }
  function getUserVisibleLines(cm2) {
    var scrollInfo = cm2.getScrollInfo();
    var occludeToleranceTop = 6;
    var occludeToleranceBottom = 10;
    var from = cm2.coordsChar({ left: 0, top: occludeToleranceTop + scrollInfo.top }, "local");
    var bottomY = scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top;
    var to2 = cm2.coordsChar({ left: 0, top: bottomY }, "local");
    return { top: from.line, bottom: to2.line };
  }
  function getMarkPos(cm2, vim2, markName) {
    if (markName == "'" || markName == "`") {
      return vimGlobalState.jumpList.find(cm2, -1) || new Pos2(0, 0);
    } else if (markName == ".") {
      return getLastEditPos(cm2);
    }
    var mark = vim2.marks[markName];
    return mark && mark.find();
  }
  function getLastEditPos(cm2) {
    if (cm2.getLastEditEnd) {
      return cm2.getLastEditEnd();
    }
    var done = (
      /**@type{any}*/
      cm2.doc.history.done
    );
    for (var i2 = done.length; i2--; ) {
      if (done[i2].changes) {
        return copyCursor(done[i2].changes[0].to);
      }
    }
  }
  class ExCommandDispatcher {
    constructor() {
      this.commandMap_;
      this.buildCommandMap_();
    }
    processCommand(cm2, input, opt_params) {
      var that = this;
      cm2.operation(function() {
        cm2.curOp.isVimOp = true;
        that._processCommand(cm2, input, opt_params);
      });
    }
    _processCommand(cm2, input, opt_params) {
      var vim2 = cm2.state.vim;
      var commandHistoryRegister = vimGlobalState.registerController.getRegister(":");
      var previousCommand = commandHistoryRegister.toString();
      var inputStream = new CodeMirror2.StringStream(input);
      commandHistoryRegister.setText(input);
      var params = opt_params || {};
      params.input = input;
      try {
        this.parseInput_(cm2, inputStream, params);
      } catch (e25) {
        showConfirm(cm2, e25 + "");
        throw e25;
      }
      if (vim2.visualMode) {
        exitVisualMode(cm2);
      }
      var command2;
      var commandName;
      if (!params.commandName) {
        if (params.line !== void 0) {
          commandName = "move";
        }
      } else {
        command2 = this.matchCommand_(params.commandName);
        if (command2) {
          commandName = command2.name;
          if (command2.excludeFromCommandHistory) {
            commandHistoryRegister.setText(previousCommand);
          }
          this.parseCommandArgs_(inputStream, params, command2);
          if (command2.type == "exToKey") {
            doKeyToKey(cm2, command2.toKeys, command2);
            return;
          } else if (command2.type == "exToEx") {
            this.processCommand(cm2, command2.toInput);
            return;
          }
        }
      }
      if (!commandName) {
        showConfirm(cm2, 'Not an editor command ":' + input + '"');
        return;
      }
      try {
        exCommands[commandName](cm2, params);
        if ((!command2 || !command2.possiblyAsync) && params.callback) {
          params.callback();
        }
      } catch (e25) {
        showConfirm(cm2, e25 + "");
        throw e25;
      }
    }
    parseInput_(cm2, inputStream, result) {
      inputStream.eatWhile(":");
      if (inputStream.eat("%")) {
        result.line = cm2.firstLine();
        result.lineEnd = cm2.lastLine();
      } else {
        result.line = this.parseLineSpec_(cm2, inputStream);
        if (result.line !== void 0 && inputStream.eat(",")) {
          result.lineEnd = this.parseLineSpec_(cm2, inputStream);
        }
      }
      if (result.line == void 0) {
        if (cm2.state.vim.visualMode) {
          result.selectionLine = getMarkPos(cm2, cm2.state.vim, "<")?.line;
          result.selectionLineEnd = getMarkPos(cm2, cm2.state.vim, ">")?.line;
        } else {
          result.selectionLine = cm2.getCursor().line;
        }
      } else {
        result.selectionLine = result.line;
        result.selectionLineEnd = result.lineEnd;
      }
      var commandMatch2 = inputStream.match(/^(\w+|!!|@@|[!#&*<=>@~])/);
      if (commandMatch2) {
        result.commandName = commandMatch2[1];
      } else {
        result.commandName = inputStream.match(/.*/)[0];
      }
      return result;
    }
    parseLineSpec_(cm2, inputStream) {
      var numberMatch = inputStream.match(/^(\d+)/);
      if (numberMatch) {
        return parseInt(numberMatch[1], 10) - 1;
      }
      switch (inputStream.next()) {
        case ".":
          return this.parseLineSpecOffset_(inputStream, cm2.getCursor().line);
        case "$":
          return this.parseLineSpecOffset_(inputStream, cm2.lastLine());
        case "'":
          var markName = inputStream.next();
          var markPos = getMarkPos(cm2, cm2.state.vim, markName);
          if (!markPos) throw new Error("Mark not set");
          return this.parseLineSpecOffset_(inputStream, markPos.line);
        case "-":
        case "+":
          inputStream.backUp(1);
          return this.parseLineSpecOffset_(inputStream, cm2.getCursor().line);
        default:
          inputStream.backUp(1);
          return void 0;
      }
    }
    parseLineSpecOffset_(inputStream, line) {
      var offsetMatch = inputStream.match(/^([+-])?(\d+)/);
      if (offsetMatch) {
        var offset = parseInt(offsetMatch[2], 10);
        if (offsetMatch[1] == "-") {
          line -= offset;
        } else {
          line += offset;
        }
      }
      return line;
    }
    parseCommandArgs_(inputStream, params, command2) {
      if (inputStream.eol()) {
        return;
      }
      params.argString = inputStream.match(/.*/)[0];
      var delim = command2.argDelimiter || /\s+/;
      var args = trim(params.argString).split(delim);
      if (args.length && args[0]) {
        params.args = args;
      }
    }
    matchCommand_(commandName) {
      for (var i2 = commandName.length; i2 > 0; i2--) {
        var prefix = commandName.substring(0, i2);
        if (this.commandMap_[prefix]) {
          var command2 = this.commandMap_[prefix];
          if (command2.name.indexOf(commandName) === 0) {
            return command2;
          }
        }
      }
      return null;
    }
    buildCommandMap_() {
      this.commandMap_ = {};
      for (var i2 = 0; i2 < defaultExCommandMap.length; i2++) {
        var command2 = defaultExCommandMap[i2];
        var key = command2.shortName || command2.name;
        this.commandMap_[key] = command2;
      }
    }
    /**@type {(lhs: string, rhs: string, ctx: string, noremap?: boolean) => void} */
    map(lhs, rhs, ctx, noremap2) {
      if (lhs != ":" && lhs.charAt(0) == ":") {
        if (ctx) {
          throw Error("Mode not supported for ex mappings");
        }
        var commandName = lhs.substring(1);
        if (rhs != ":" && rhs.charAt(0) == ":") {
          this.commandMap_[commandName] = {
            name: commandName,
            type: "exToEx",
            toInput: rhs.substring(1),
            user: true
          };
        } else {
          this.commandMap_[commandName] = {
            name: commandName,
            type: "exToKey",
            toKeys: rhs,
            user: true
          };
        }
      } else {
        var mapping = {
          keys: lhs,
          type: "keyToKey",
          toKeys: rhs,
          noremap: !!noremap2
        };
        if (ctx) {
          mapping.context = ctx;
        }
        defaultKeymap2.unshift(mapping);
      }
    }
    /**@type {(lhs: string, ctx: string) => boolean|void} */
    unmap(lhs, ctx) {
      if (lhs != ":" && lhs.charAt(0) == ":") {
        if (ctx) {
          throw Error("Mode not supported for ex mappings");
        }
        var commandName = lhs.substring(1);
        if (this.commandMap_[commandName] && this.commandMap_[commandName].user) {
          delete this.commandMap_[commandName];
          return true;
        }
      } else {
        var keys3 = lhs;
        for (var i2 = 0; i2 < defaultKeymap2.length; i2++) {
          if (keys3 == defaultKeymap2[i2].keys && defaultKeymap2[i2].context === ctx) {
            defaultKeymap2.splice(i2, 1);
            return true;
          }
        }
      }
    }
  }
  var exCommands = {
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    colorscheme: function(cm2, params) {
      if (!params.args || params.args.length < 1) {
        showConfirm(cm2, cm2.getOption("theme"));
        return;
      }
      cm2.setOption("theme", params.args[0]);
    },
    map: function(cm2, params, ctx, defaultOnly) {
      var mapArgs = params.args;
      if (!mapArgs || mapArgs.length < 2) {
        if (cm2) {
          showConfirm(cm2, "Invalid mapping: " + params.input);
        }
        return;
      }
      exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx, defaultOnly);
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    imap: function(cm2, params) {
      this.map(cm2, params, "insert");
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    nmap: function(cm2, params) {
      this.map(cm2, params, "normal");
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    vmap: function(cm2, params) {
      this.map(cm2, params, "visual");
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    omap: function(cm2, params) {
      this.map(cm2, params, "operatorPending");
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    noremap: function(cm2, params) {
      this.map(cm2, params, void 0, true);
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    inoremap: function(cm2, params) {
      this.map(cm2, params, "insert", true);
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    nnoremap: function(cm2, params) {
      this.map(cm2, params, "normal", true);
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    vnoremap: function(cm2, params) {
      this.map(cm2, params, "visual", true);
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    onoremap: function(cm2, params) {
      this.map(cm2, params, "operatorPending", true);
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params @arg {string} ctx*/
    unmap: function(cm2, params, ctx) {
      var mapArgs = params.args;
      if (!mapArgs || mapArgs.length < 1 || !exCommandDispatcher.unmap(mapArgs[0], ctx)) {
        if (cm2) {
          showConfirm(cm2, "No such mapping: " + params.input);
        }
      }
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    mapclear: function(cm2, params) {
      vimApi.mapclear();
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    imapclear: function(cm2, params) {
      vimApi.mapclear("insert");
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    nmapclear: function(cm2, params) {
      vimApi.mapclear("normal");
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    vmapclear: function(cm2, params) {
      vimApi.mapclear("visual");
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    omapclear: function(cm2, params) {
      vimApi.mapclear("operatorPending");
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    move: function(cm2, params) {
      commandDispatcher.processCommand(cm2, cm2.state.vim, {
        keys: "",
        type: "motion",
        motion: "moveToLineOrEdgeOfDocument",
        motionArgs: { forward: false, explicitRepeat: true, linewise: true },
        repeatOverride: params.line + 1
      });
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    set: function(cm2, params) {
      var setArgs = params.args;
      var setCfg = params.setCfg || {};
      if (!setArgs || setArgs.length < 1) {
        if (cm2) {
          showConfirm(cm2, "Invalid mapping: " + params.input);
        }
        return;
      }
      var expr = setArgs[0].split("=");
      var optionName = expr.shift() || "";
      var value = expr.length > 0 ? expr.join("=") : void 0;
      var forceGet = false;
      var forceToggle = false;
      if (optionName.charAt(optionName.length - 1) == "?") {
        if (value) {
          throw Error("Trailing characters: " + params.argString);
        }
        optionName = optionName.substring(0, optionName.length - 1);
        forceGet = true;
      } else if (optionName.charAt(optionName.length - 1) == "!") {
        optionName = optionName.substring(0, optionName.length - 1);
        forceToggle = true;
      }
      if (value === void 0 && optionName.substring(0, 2) == "no") {
        optionName = optionName.substring(2);
        value = false;
      }
      var optionIsBoolean = options[optionName] && options[optionName].type == "boolean";
      if (optionIsBoolean) {
        if (forceToggle) {
          value = !getOption(optionName, cm2, setCfg);
        } else if (value == void 0) {
          value = true;
        }
      }
      if (!optionIsBoolean && value === void 0 || forceGet) {
        var oldValue = getOption(optionName, cm2, setCfg);
        if (oldValue instanceof Error) {
          showConfirm(cm2, oldValue.message);
        } else if (oldValue === true || oldValue === false) {
          showConfirm(cm2, " " + (oldValue ? "" : "no") + optionName);
        } else {
          showConfirm(cm2, "  " + optionName + "=" + oldValue);
        }
      } else {
        var setOptionReturn = setOption(optionName, value, cm2, setCfg);
        if (setOptionReturn instanceof Error) {
          showConfirm(cm2, setOptionReturn.message);
        }
      }
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    setlocal: function(cm2, params) {
      params.setCfg = { scope: "local" };
      this.set(cm2, params);
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    setglobal: function(cm2, params) {
      params.setCfg = { scope: "global" };
      this.set(cm2, params);
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    registers: function(cm2, params) {
      var regArgs = params.args;
      var registers = vimGlobalState.registerController.registers;
      var regInfo = "----------Registers----------\n\n";
      if (!regArgs) {
        for (var registerName in registers) {
          var text = registers[registerName].toString();
          if (text.length) {
            regInfo += '"' + registerName + "    " + text + "\n";
          }
        }
      } else {
        var registerNames = regArgs.join("");
        for (var i2 = 0; i2 < registerNames.length; i2++) {
          var registerName = registerNames.charAt(i2);
          if (!vimGlobalState.registerController.isValidRegister(registerName)) {
            continue;
          }
          var register = registers[registerName] || new Register();
          regInfo += '"' + registerName + "    " + register.toString() + "\n";
        }
      }
      showConfirm(cm2, regInfo);
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    sort: function(cm2, params) {
      var reverse, ignoreCase, unique, number2, pattern;
      function parseArgs() {
        if (params.argString) {
          var args = new CodeMirror2.StringStream(params.argString);
          if (args.eat("!")) {
            reverse = true;
          }
          if (args.eol()) {
            return;
          }
          if (!args.eatSpace()) {
            return "Invalid arguments";
          }
          var opts = args.match(/([dinuox]+)?\s*(\/.+\/)?\s*/);
          if (!opts || !args.eol()) {
            return "Invalid arguments";
          }
          if (opts[1]) {
            ignoreCase = opts[1].indexOf("i") != -1;
            unique = opts[1].indexOf("u") != -1;
            var decimal = opts[1].indexOf("d") != -1 || opts[1].indexOf("n") != -1;
            var hex = opts[1].indexOf("x") != -1;
            var octal = opts[1].indexOf("o") != -1;
            if (Number(decimal) + Number(hex) + Number(octal) > 1) {
              return "Invalid arguments";
            }
            number2 = decimal && "decimal" || hex && "hex" || octal && "octal";
          }
          if (opts[2]) {
            pattern = new RegExp(opts[2].substr(1, opts[2].length - 2), ignoreCase ? "i" : "");
          }
        }
      }
      var err = parseArgs();
      if (err) {
        showConfirm(cm2, err + ": " + params.argString);
        return;
      }
      var lineStart = params.line || cm2.firstLine();
      var lineEnd2 = params.lineEnd || params.line || cm2.lastLine();
      if (lineStart == lineEnd2) {
        return;
      }
      var curStart = new Pos2(lineStart, 0);
      var curEnd = new Pos2(lineEnd2, lineLength(cm2, lineEnd2));
      var text = cm2.getRange(curStart, curEnd).split("\n");
      var numberRegex2 = number2 == "decimal" ? /(-?)([\d]+)/ : number2 == "hex" ? /(-?)(?:0x)?([0-9a-f]+)/i : number2 == "octal" ? /([0-7]+)/ : null;
      var radix = number2 == "decimal" ? 10 : number2 == "hex" ? 16 : number2 == "octal" ? 8 : void 0;
      var numPart = [], textPart = [];
      if (number2 || pattern) {
        for (var i2 = 0; i2 < text.length; i2++) {
          var matchPart = pattern ? text[i2].match(pattern) : null;
          if (matchPart && matchPart[0] != "") {
            numPart.push(matchPart);
          } else if (numberRegex2 && numberRegex2.exec(text[i2])) {
            numPart.push(text[i2]);
          } else {
            textPart.push(text[i2]);
          }
        }
      } else {
        textPart = text;
      }
      function compareFn(a2, b2) {
        if (reverse) {
          var tmp;
          tmp = a2;
          a2 = b2;
          b2 = tmp;
        }
        if (ignoreCase) {
          a2 = a2.toLowerCase();
          b2 = b2.toLowerCase();
        }
        var amatch = numberRegex2 && numberRegex2.exec(a2);
        var bmatch = numberRegex2 && numberRegex2.exec(b2);
        if (!amatch || !bmatch) {
          return a2 < b2 ? -1 : 1;
        }
        var anum = parseInt((amatch[1] + amatch[2]).toLowerCase(), radix);
        var bnum = parseInt((bmatch[1] + bmatch[2]).toLowerCase(), radix);
        return anum - bnum;
      }
      function comparePatternFn(a2, b2) {
        if (reverse) {
          var tmp;
          tmp = a2;
          a2 = b2;
          b2 = tmp;
        }
        if (ignoreCase) {
          a2[0] = a2[0].toLowerCase();
          b2[0] = b2[0].toLowerCase();
        }
        return a2[0] < b2[0] ? -1 : 1;
      }
      numPart.sort(pattern ? comparePatternFn : compareFn);
      if (pattern) {
        for (var i2 = 0; i2 < numPart.length; i2++) {
          numPart[i2] = numPart[i2].input;
        }
      } else if (!number2) {
        textPart.sort(compareFn);
      }
      text = !reverse ? textPart.concat(numPart) : numPart.concat(textPart);
      if (unique) {
        var textOld = text;
        var lastLine;
        text = [];
        for (var i2 = 0; i2 < textOld.length; i2++) {
          if (textOld[i2] != lastLine) {
            text.push(textOld[i2]);
          }
          lastLine = textOld[i2];
        }
      }
      cm2.replaceRange(text.join("\n"), curStart, curEnd);
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    vglobal: function(cm2, params) {
      this.global(cm2, params);
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    normal: function(cm2, params) {
      var argString = params.argString;
      if (argString && argString[0] == "!") {
        argString = argString.slice(1);
        noremap = true;
      }
      argString = argString.trimStart();
      if (!argString) {
        showConfirm(cm2, "Argument is required.");
        return;
      }
      var line = params.line;
      if (typeof line == "number") {
        var lineEnd2 = isNaN(params.lineEnd) ? line : params.lineEnd;
        for (var i2 = line; i2 <= lineEnd2; i2++) {
          cm2.setCursor(i2, 0);
          doKeyToKey(cm2, params.argString.trimStart());
          if (cm2.state.vim.insertMode) {
            exitInsertMode(cm2, true);
          }
        }
      } else {
        doKeyToKey(cm2, params.argString.trimStart());
        if (cm2.state.vim.insertMode) {
          exitInsertMode(cm2, true);
        }
      }
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    global: function(cm2, params) {
      var argString = params.argString;
      if (!argString) {
        showConfirm(cm2, "Regular Expression missing from global");
        return;
      }
      var inverted = params.commandName[0] === "v";
      if (argString[0] === "!" && params.commandName[0] === "g") {
        inverted = true;
        argString = argString.slice(1);
      }
      var lineStart = params.line !== void 0 ? params.line : cm2.firstLine();
      var lineEnd2 = params.lineEnd || params.line || cm2.lastLine();
      var tokens = splitBySlash(argString);
      var regexPart = argString, cmd2 = "";
      if (tokens && tokens.length) {
        regexPart = tokens[0];
        cmd2 = tokens.slice(1, tokens.length).join("/");
      }
      if (regexPart) {
        try {
          updateSearchQuery(
            cm2,
            regexPart,
            true,
            true
            /** smartCase */
          );
        } catch (e25) {
          showConfirm(cm2, "Invalid regex: " + regexPart);
          return;
        }
      }
      var query = getSearchState(cm2).getQuery();
      var matchedLines = [];
      for (var i2 = lineStart; i2 <= lineEnd2; i2++) {
        var line = cm2.getLine(i2);
        var matched = query.test(line);
        if (matched !== inverted) {
          matchedLines.push(cmd2 ? cm2.getLineHandle(i2) : line);
        }
      }
      if (!cmd2) {
        showConfirm(cm2, matchedLines.join("\n"));
        return;
      }
      var index = 0;
      var nextCommand = function() {
        if (index < matchedLines.length) {
          var lineHandle = matchedLines[index++];
          var lineNum = cm2.getLineNumber(lineHandle);
          if (lineNum == null) {
            nextCommand();
            return;
          }
          var command2 = lineNum + 1 + cmd2;
          exCommandDispatcher.processCommand(cm2, command2, {
            callback: nextCommand
          });
        } else if (cm2.releaseLineHandles) {
          cm2.releaseLineHandles();
        }
      };
      nextCommand();
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    substitute: function(cm2, params) {
      if (!cm2.getSearchCursor) {
        throw new Error("Search feature not available. Requires searchcursor.js or any other getSearchCursor implementation.");
      }
      var argString = params.argString;
      var tokens = argString ? splitBySeparator(argString, argString[0]) : [];
      var regexPart = "", replacePart = "", trailing, flagsPart, count2;
      var confirm = false;
      var global2 = false;
      if (tokens && tokens.length) {
        regexPart = tokens[0];
        if (getOption("pcre") && regexPart !== "") {
          regexPart = new RegExp(regexPart).source;
        }
        replacePart = tokens[1];
        if (replacePart !== void 0) {
          if (getOption("pcre")) {
            replacePart = unescapeRegexReplace(replacePart.replace(/([^\\])&/g, "$1$$&"));
          } else {
            replacePart = translateRegexReplace(replacePart);
          }
          vimGlobalState.lastSubstituteReplacePart = replacePart;
        }
        trailing = tokens[2] ? tokens[2].split(" ") : [];
      } else {
        if (argString && argString.length) {
          showConfirm(cm2, "Substitutions should be of the form :s/pattern/replace/");
          return;
        }
      }
      if (trailing) {
        flagsPart = trailing[0];
        count2 = parseInt(trailing[1]);
        if (flagsPart) {
          if (flagsPart.indexOf("c") != -1) {
            confirm = true;
          }
          if (flagsPart.indexOf("g") != -1) {
            global2 = true;
          }
          if (getOption("pcre")) {
            regexPart = regexPart + "/" + flagsPart;
          } else {
            regexPart = regexPart.replace(/\//g, "\\/") + "/" + flagsPart;
          }
        }
      }
      if (regexPart) {
        try {
          updateSearchQuery(
            cm2,
            regexPart,
            true,
            true
            /** smartCase */
          );
        } catch (e25) {
          showConfirm(cm2, "Invalid regex: " + regexPart);
          return;
        }
      }
      replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart;
      if (replacePart === void 0) {
        showConfirm(cm2, "No previous substitute regular expression");
        return;
      }
      var state = getSearchState(cm2);
      var query = state.getQuery();
      var lineStart = params.line !== void 0 ? params.line : cm2.getCursor().line;
      var lineEnd2 = params.lineEnd || lineStart;
      if (lineStart == cm2.firstLine() && lineEnd2 == cm2.lastLine()) {
        lineEnd2 = Infinity;
      }
      if (count2) {
        lineStart = lineEnd2;
        lineEnd2 = lineStart + count2 - 1;
      }
      var startPos = clipCursorToContent(cm2, new Pos2(lineStart, 0));
      var cursor = cm2.getSearchCursor(query, startPos);
      doReplace(cm2, confirm, global2, lineStart, lineEnd2, cursor, query, replacePart, params.callback);
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    startinsert: function(cm2, params) {
      doKeyToKey(cm2, params.argString == "!" ? "A" : "i", {});
    },
    redo: CodeMirror2.commands.redo,
    undo: CodeMirror2.commands.undo,
    /** @arg {CodeMirrorV} cm */
    write: function(cm2) {
      if (CodeMirror2.commands.save) {
        CodeMirror2.commands.save(cm2);
      } else if (cm2.save) {
        cm2.save();
      }
    },
    /** @arg {CodeMirrorV} cm */
    nohlsearch: function(cm2) {
      clearSearchHighlight(cm2);
    },
    /** @arg {CodeMirrorV} cm */
    yank: function(cm2) {
      var cur2 = copyCursor(cm2.getCursor());
      var line = cur2.line;
      var lineText = cm2.getLine(line);
      vimGlobalState.registerController.pushText(
        "0",
        "yank",
        lineText,
        true,
        true
      );
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    delete: function(cm2, params) {
      var line = params.selectionLine;
      var lineEnd2 = isNaN(params.selectionLineEnd) ? line : params.selectionLineEnd;
      operators.delete(cm2, { linewise: true }, [
        {
          anchor: new Pos2(line, 0),
          head: new Pos2(lineEnd2 + 1, 0)
        }
      ]);
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    join: function(cm2, params) {
      var line = params.selectionLine;
      var lineEnd2 = isNaN(params.selectionLineEnd) ? line : params.selectionLineEnd;
      cm2.setCursor(new Pos2(line, 0));
      actions.joinLines(cm2, { repeat: lineEnd2 - line }, cm2.state.vim);
    },
    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/
    delmarks: function(cm2, params) {
      if (!params.argString || !trim(params.argString)) {
        showConfirm(cm2, "Argument required");
        return;
      }
      var state = cm2.state.vim;
      var stream = new CodeMirror2.StringStream(trim(params.argString));
      while (!stream.eol()) {
        stream.eatSpace();
        var count2 = stream.pos;
        if (!stream.match(/[a-zA-Z]/, false)) {
          showConfirm(cm2, "Invalid argument: " + params.argString.substring(count2));
          return;
        }
        var sym = stream.next();
        if (stream.match("-", true)) {
          if (!stream.match(/[a-zA-Z]/, false)) {
            showConfirm(cm2, "Invalid argument: " + params.argString.substring(count2));
            return;
          }
          var startMark = sym;
          var finishMark = stream.next();
          if (startMark && finishMark && isLowerCase(startMark) == isLowerCase(finishMark)) {
            var start = startMark.charCodeAt(0);
            var finish = finishMark.charCodeAt(0);
            if (start >= finish) {
              showConfirm(cm2, "Invalid argument: " + params.argString.substring(count2));
              return;
            }
            for (var j2 = 0; j2 <= finish - start; j2++) {
              var mark = String.fromCharCode(start + j2);
              delete state.marks[mark];
            }
          } else {
            showConfirm(cm2, "Invalid argument: " + startMark + "-");
            return;
          }
        } else if (sym) {
          delete state.marks[sym];
        }
      }
    }
  };
  var exCommandDispatcher = new ExCommandDispatcher();
  function doReplace(cm2, confirm, global2, lineStart, lineEnd2, searchCursor, query, replaceWith, callback) {
    cm2.state.vim.exMode = true;
    var done = false;
    var lastPos;
    var modifiedLineNumber;
    var joined;
    function replaceAll2() {
      cm2.operation(function() {
        while (!done) {
          replace2();
          next();
        }
        stop();
      });
    }
    function replace2() {
      var text = cm2.getRange(searchCursor.from(), searchCursor.to());
      var newText = text.replace(query, replaceWith);
      var unmodifiedLineNumber = searchCursor.to().line;
      searchCursor.replace(newText);
      modifiedLineNumber = searchCursor.to().line;
      lineEnd2 += modifiedLineNumber - unmodifiedLineNumber;
      joined = modifiedLineNumber < unmodifiedLineNumber;
    }
    function findNextValidMatch() {
      var lastMatchTo = lastPos && copyCursor(searchCursor.to());
      var match = searchCursor.findNext();
      if (match && !match[0] && lastMatchTo && cursorEqual(searchCursor.from(), lastMatchTo)) {
        match = searchCursor.findNext();
      }
      return match;
    }
    function next() {
      while (findNextValidMatch() && isInRange(searchCursor.from(), lineStart, lineEnd2)) {
        if (!global2 && searchCursor.from().line == modifiedLineNumber && !joined) {
          continue;
        }
        cm2.scrollIntoView(searchCursor.from(), 30);
        cm2.setSelection(searchCursor.from(), searchCursor.to());
        lastPos = searchCursor.from();
        done = false;
        return;
      }
      done = true;
    }
    function stop(close) {
      if (close) {
        close();
      }
      cm2.focus();
      if (lastPos) {
        cm2.setCursor(lastPos);
        var vim2 = cm2.state.vim;
        vim2.exMode = false;
        vim2.lastHPos = vim2.lastHSPos = lastPos.ch;
      }
      if (callback) {
        callback();
      }
    }
    function onPromptKeyDown(e25, _value, close) {
      CodeMirror2.e_stop(e25);
      var keyName2 = vimKeyFromEvent(e25);
      switch (keyName2) {
        case "y":
          replace2();
          next();
          break;
        case "n":
          next();
          break;
        case "a":
          var savedCallback = callback;
          callback = void 0;
          cm2.operation(replaceAll2);
          callback = savedCallback;
          break;
        case "l":
          replace2();
        // fall through and exit.
        case "q":
        case "<Esc>":
        case "<C-c>":
        case "<C-[>":
          stop(close);
          break;
      }
      if (done) {
        stop(close);
      }
      return true;
    }
    next();
    if (done) {
      showConfirm(cm2, "No matches for " + query.source);
      return;
    }
    if (!confirm) {
      replaceAll2();
      if (callback) {
        callback();
      }
      return;
    }
    showPrompt(cm2, {
      prefix: dom("span", "replace with ", dom("strong", replaceWith), " (y/n/a/q/l)"),
      onKeyDown: onPromptKeyDown
    });
  }
  function exitInsertMode(cm2, keepCursor) {
    var vim2 = cm2.state.vim;
    var macroModeState = vimGlobalState.macroModeState;
    var insertModeChangeRegister = vimGlobalState.registerController.getRegister(".");
    var isPlaying = macroModeState.isPlaying;
    var lastChange = macroModeState.lastInsertModeChanges;
    if (!isPlaying) {
      cm2.off("change", onChange);
      if (vim2.insertEnd) vim2.insertEnd.clear();
      vim2.insertEnd = void 0;
      CodeMirror2.off(cm2.getInputField(), "keydown", onKeyEventTargetKeyDown);
    }
    if (!isPlaying && vim2.insertModeRepeat > 1) {
      repeatLastEdit(
        cm2,
        vim2,
        vim2.insertModeRepeat - 1,
        true
        /** repeatForInsert */
      );
      vim2.lastEditInputState.repeatOverride = vim2.insertModeRepeat;
    }
    delete vim2.insertModeRepeat;
    vim2.insertMode = false;
    if (!keepCursor) {
      cm2.setCursor(cm2.getCursor().line, cm2.getCursor().ch - 1);
    }
    cm2.setOption("keyMap", "vim");
    cm2.setOption("disableInput", true);
    cm2.toggleOverwrite(false);
    insertModeChangeRegister.setText(lastChange.changes.join(""));
    CodeMirror2.signal(cm2, "vim-mode-change", { mode: "normal" });
    if (macroModeState.isRecording) {
      logInsertModeChange(macroModeState);
    }
  }
  function _mapCommand(command2) {
    defaultKeymap2.unshift(command2);
  }
  function mapCommand(keys3, type, name2, args, extra) {
    var command2 = { keys: keys3, type };
    command2[type] = name2;
    command2[type + "Args"] = args;
    for (var key in extra)
      command2[key] = extra[key];
    _mapCommand(command2);
  }
  defineOption("insertModeEscKeysTimeout", 200, "number");
  function executeMacroRegister(cm2, vim2, macroModeState, registerName) {
    var register = vimGlobalState.registerController.getRegister(registerName);
    if (registerName == ":") {
      if (register.keyBuffer[0]) {
        exCommandDispatcher.processCommand(cm2, register.keyBuffer[0]);
      }
      macroModeState.isPlaying = false;
      return;
    }
    var keyBuffer = register.keyBuffer;
    var imc = 0;
    macroModeState.isPlaying = true;
    macroModeState.replaySearchQueries = register.searchQueries.slice(0);
    for (var i2 = 0; i2 < keyBuffer.length; i2++) {
      var text = keyBuffer[i2];
      var match, key;
      var keyRe = /<(?:[CSMA]-)*\w+>|./gi;
      while (match = keyRe.exec(text)) {
        key = match[0];
        vimApi.handleKey(cm2, key, "macro");
        if (vim2.insertMode) {
          var changes = register.insertModeChanges[imc++].changes;
          vimGlobalState.macroModeState.lastInsertModeChanges.changes = changes;
          repeatInsertModeChanges(cm2, changes, 1);
          exitInsertMode(cm2);
        }
      }
    }
    macroModeState.isPlaying = false;
  }
  function logKey(macroModeState, key) {
    if (macroModeState.isPlaying) {
      return;
    }
    var registerName = macroModeState.latestRegister;
    var register = vimGlobalState.registerController.getRegister(registerName);
    if (register) {
      register.pushText(key);
    }
  }
  function logInsertModeChange(macroModeState) {
    if (macroModeState.isPlaying) {
      return;
    }
    var registerName = macroModeState.latestRegister;
    var register = vimGlobalState.registerController.getRegister(registerName);
    if (register && register.pushInsertModeChanges) {
      register.pushInsertModeChanges(macroModeState.lastInsertModeChanges);
    }
  }
  function logSearchQuery(macroModeState, query) {
    if (macroModeState.isPlaying) {
      return;
    }
    var registerName = macroModeState.latestRegister;
    var register = vimGlobalState.registerController.getRegister(registerName);
    if (register && register.pushSearchQuery) {
      register.pushSearchQuery(query);
    }
  }
  function onChange(cm2, changeObj) {
    var macroModeState = vimGlobalState.macroModeState;
    var lastChange = macroModeState.lastInsertModeChanges;
    if (!macroModeState.isPlaying) {
      var vim2 = cm2.state.vim;
      while (changeObj) {
        lastChange.expectCursorActivityForChange = true;
        if (lastChange.ignoreCount > 1) {
          lastChange.ignoreCount--;
        } else if (changeObj.origin == "+input" || changeObj.origin == "paste" || changeObj.origin === void 0) {
          var selectionCount = cm2.listSelections().length;
          if (selectionCount > 1)
            lastChange.ignoreCount = selectionCount;
          var text = changeObj.text.join("\n");
          if (lastChange.maybeReset) {
            lastChange.changes = [];
            lastChange.maybeReset = false;
          }
          if (text) {
            if (cm2.state.overwrite && !/\n/.test(text)) {
              lastChange.changes.push([text]);
            } else {
              if (text.length > 1) {
                var insertEnd = vim2 && vim2.insertEnd && vim2.insertEnd.find();
                var cursor = cm2.getCursor();
                if (insertEnd && insertEnd.line == cursor.line) {
                  var offset = insertEnd.ch - cursor.ch;
                  if (offset > 0 && offset < text.length) {
                    lastChange.changes.push([text, offset]);
                    text = "";
                  }
                }
              }
              if (text) lastChange.changes.push(text);
            }
          }
        }
        changeObj = changeObj.next;
      }
    }
  }
  function onCursorActivity(cm2) {
    var vim2 = cm2.state.vim;
    if (vim2.insertMode) {
      var macroModeState = vimGlobalState.macroModeState;
      if (macroModeState.isPlaying) {
        return;
      }
      var lastChange = macroModeState.lastInsertModeChanges;
      if (lastChange.expectCursorActivityForChange) {
        lastChange.expectCursorActivityForChange = false;
      } else {
        lastChange.maybeReset = true;
        if (vim2.insertEnd) vim2.insertEnd.clear();
        vim2.insertEnd = cm2.setBookmark(cm2.getCursor(), { insertLeft: true });
      }
    } else if (!cm2.curOp?.isVimOp) {
      handleExternalSelection(cm2, vim2);
    }
  }
  function handleExternalSelection(cm2, vim2) {
    var anchor = cm2.getCursor("anchor");
    var head = cm2.getCursor("head");
    if (vim2.visualMode && !cm2.somethingSelected()) {
      exitVisualMode(cm2, false);
    } else if (!vim2.visualMode && !vim2.insertMode && cm2.somethingSelected()) {
      vim2.visualMode = true;
      vim2.visualLine = false;
      CodeMirror2.signal(cm2, "vim-mode-change", { mode: "visual" });
    }
    if (vim2.visualMode) {
      var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;
      var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;
      head = offsetCursor(head, 0, headOffset);
      anchor = offsetCursor(anchor, 0, anchorOffset);
      vim2.sel = {
        anchor,
        head
      };
      updateMark(cm2, vim2, "<", cursorMin(head, anchor));
      updateMark(cm2, vim2, ">", cursorMax(head, anchor));
    } else if (!vim2.insertMode) {
      vim2.lastHPos = cm2.getCursor().ch;
    }
  }
  function InsertModeKey(keyName2, e25) {
    this.keyName = keyName2;
    this.key = e25.key;
    this.ctrlKey = e25.ctrlKey;
    this.altKey = e25.altKey;
    this.metaKey = e25.metaKey;
    this.shiftKey = e25.shiftKey;
  }
  function onKeyEventTargetKeyDown(e25) {
    var macroModeState = vimGlobalState.macroModeState;
    var lastChange = macroModeState.lastInsertModeChanges;
    var keyName2 = CodeMirror2.keyName ? CodeMirror2.keyName(e25) : e25.key;
    if (!keyName2) {
      return;
    }
    if (keyName2.indexOf("Delete") != -1 || keyName2.indexOf("Backspace") != -1) {
      if (lastChange.maybeReset) {
        lastChange.changes = [];
        lastChange.maybeReset = false;
      }
      lastChange.changes.push(new InsertModeKey(keyName2, e25));
    }
  }
  function repeatLastEdit(cm2, vim2, repeat, repeatForInsert) {
    var macroModeState = vimGlobalState.macroModeState;
    macroModeState.isPlaying = true;
    var lastAction = vim2.lastEditActionCommand;
    var cachedInputState = vim2.inputState;
    function repeatCommand() {
      if (lastAction) {
        commandDispatcher.processAction(cm2, vim2, lastAction);
      } else {
        commandDispatcher.evalInput(cm2, vim2);
      }
    }
    function repeatInsert(repeat2) {
      if (macroModeState.lastInsertModeChanges.changes.length > 0) {
        repeat2 = !vim2.lastEditActionCommand ? 1 : repeat2;
        var changeObject = macroModeState.lastInsertModeChanges;
        repeatInsertModeChanges(cm2, changeObject.changes, repeat2);
      }
    }
    vim2.inputState = vim2.lastEditInputState;
    if (lastAction && lastAction.interlaceInsertRepeat) {
      for (var i2 = 0; i2 < repeat; i2++) {
        repeatCommand();
        repeatInsert(1);
      }
    } else {
      if (!repeatForInsert) {
        repeatCommand();
      }
      repeatInsert(repeat);
    }
    vim2.inputState = cachedInputState;
    if (vim2.insertMode && !repeatForInsert) {
      exitInsertMode(cm2);
    }
    macroModeState.isPlaying = false;
  }
  function sendCmKey(cm2, key) {
    CodeMirror2.lookupKey(key, "vim-insert", function keyHandler(binding) {
      if (typeof binding == "string") {
        CodeMirror2.commands[binding](cm2);
      } else {
        binding(cm2);
      }
      return true;
    });
  }
  function repeatInsertModeChanges(cm2, changes, repeat) {
    var head = cm2.getCursor("head");
    var visualBlock = vimGlobalState.macroModeState.lastInsertModeChanges.visualBlock;
    if (visualBlock) {
      selectForInsert(cm2, head, visualBlock + 1);
      repeat = cm2.listSelections().length;
      cm2.setCursor(head);
    }
    for (var i2 = 0; i2 < repeat; i2++) {
      if (visualBlock) {
        cm2.setCursor(offsetCursor(head, i2, 0));
      }
      for (var j2 = 0; j2 < changes.length; j2++) {
        var change = changes[j2];
        if (change instanceof InsertModeKey) {
          sendCmKey(cm2, change.keyName);
        } else if (typeof change == "string") {
          cm2.replaceSelection(change);
        } else {
          var start = cm2.getCursor();
          var end = offsetCursor(start, 0, change[0].length - (change[1] || 0));
          cm2.replaceRange(change[0], start, change[1] ? start : end);
          cm2.setCursor(end);
        }
      }
    }
    if (visualBlock) {
      cm2.setCursor(offsetCursor(head, 0, 1));
    }
  }
  function cloneVimState(state) {
    var n2 = new state.constructor();
    Object.keys(state).forEach(function(key) {
      if (key == "insertEnd") return;
      var o2 = state[key];
      if (Array.isArray(o2))
        o2 = o2.slice();
      else if (o2 && typeof o2 == "object" && o2.constructor != Object)
        o2 = cloneVimState(o2);
      n2[key] = o2;
    });
    if (state.sel) {
      n2.sel = {
        head: state.sel.head && copyCursor(state.sel.head),
        anchor: state.sel.anchor && copyCursor(state.sel.anchor)
      };
    }
    return n2;
  }
  function multiSelectHandleKey(cm_, key, origin) {
    var vim2 = maybeInitVimState(cm_);
    var cm2 = (
      /**@type {CodeMirrorV}*/
      cm_
    );
    var isHandled = false;
    var vim2 = vimApi.maybeInitVimState_(cm2);
    var visualBlock = vim2.visualBlock || vim2.wasInVisualBlock;
    var wasMultiselect = cm2.isInMultiSelectMode();
    if (vim2.wasInVisualBlock && !wasMultiselect) {
      vim2.wasInVisualBlock = false;
    } else if (wasMultiselect && vim2.visualBlock) {
      vim2.wasInVisualBlock = true;
    }
    if (key == "<Esc>" && !vim2.insertMode && !vim2.visualMode && wasMultiselect && vim2.status == "<Esc>") {
      clearInputState(cm2);
    } else if (visualBlock || !wasMultiselect || cm2.inVirtualSelectionMode) {
      isHandled = vimApi.handleKey(cm2, key, origin);
    } else {
      var old = cloneVimState(vim2);
      var changeQueueList = vim2.inputState.changeQueueList || [];
      cm2.operation(function() {
        if (cm2.curOp)
          cm2.curOp.isVimOp = true;
        var index = 0;
        cm2.forEachSelection(function() {
          cm2.state.vim.inputState.changeQueue = changeQueueList[index];
          var head = cm2.getCursor("head");
          var anchor = cm2.getCursor("anchor");
          var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;
          var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;
          head = offsetCursor(head, 0, headOffset);
          anchor = offsetCursor(anchor, 0, anchorOffset);
          cm2.state.vim.sel.head = head;
          cm2.state.vim.sel.anchor = anchor;
          isHandled = vimApi.handleKey(cm2, key, origin);
          if (cm2.virtualSelection) {
            changeQueueList[index] = cm2.state.vim.inputState.changeQueue;
            cm2.state.vim = cloneVimState(old);
          }
          index++;
        });
        if (cm2.curOp?.cursorActivity && !isHandled)
          cm2.curOp.cursorActivity = false;
        cm2.state.vim = vim2;
        vim2.inputState.changeQueueList = changeQueueList;
        vim2.inputState.changeQueue = null;
      }, true);
    }
    if (isHandled && !vim2.visualMode && !vim2.insert && vim2.visualMode != cm2.somethingSelected()) {
      handleExternalSelection(cm2, vim2);
    }
    return isHandled;
  }
  resetVimGlobalState();
  return vimApi;
}
function indexFromPos(doc2, pos) {
  var ch2 = pos.ch;
  var lineNumber = pos.line + 1;
  if (lineNumber < 1) {
    lineNumber = 1;
    ch2 = 0;
  }
  if (lineNumber > doc2.lines) {
    lineNumber = doc2.lines;
    ch2 = Number.MAX_VALUE;
  }
  var line = doc2.line(lineNumber);
  return Math.min(line.from + Math.max(0, ch2), line.to);
}
function posFromIndex(doc2, offset) {
  let line = doc2.lineAt(offset);
  return { line: line.number - 1, ch: offset - line.from };
}
var Pos = class {
  constructor(line, ch2) {
    this.line = line;
    this.ch = ch2;
  }
};
function on(emitter, type, f2) {
  if (emitter.addEventListener) {
    emitter.addEventListener(type, f2, false);
  } else {
    var map = emitter._handlers || (emitter._handlers = {});
    map[type] = (map[type] || []).concat(f2);
  }
}
function off(emitter, type, f2) {
  if (emitter.removeEventListener) {
    emitter.removeEventListener(type, f2, false);
  } else {
    var map = emitter._handlers, arr = map && map[type];
    if (arr) {
      var index = arr.indexOf(f2);
      if (index > -1) {
        map[type] = arr.slice(0, index).concat(arr.slice(index + 1));
      }
    }
  }
}
function signal(emitter, type, ...args) {
  var _a3;
  var handlers2 = (_a3 = emitter._handlers) === null || _a3 === void 0 ? void 0 : _a3[type];
  if (!handlers2)
    return;
  for (var i2 = 0; i2 < handlers2.length; ++i2) {
    handlers2[i2](...args);
  }
}
function signalTo(handlers2, ...args) {
  if (!handlers2)
    return;
  for (var i2 = 0; i2 < handlers2.length; ++i2) {
    handlers2[i2](...args);
  }
}
var wordChar2;
try {
  wordChar2 = /* @__PURE__ */ new RegExp("[\\w\\p{Alphabetic}\\p{Number}_]", "u");
} catch (_2) {
  wordChar2 = /[\w]/;
}
function dispatchChange(cm2, transaction) {
  var view = cm2.cm6;
  if (view.state.readOnly)
    return;
  var type = "input.type.compose";
  if (cm2.curOp) {
    if (!cm2.curOp.lastChange)
      type = "input.type.compose.start";
  }
  if (transaction.annotations) {
    try {
      transaction.annotations.some(function(note) {
        if (note.value == "input")
          note.value = type;
      });
    } catch (e25) {
      console.error(e25);
    }
  } else {
    transaction.userEvent = type;
  }
  return view.dispatch(transaction);
}
function runHistoryCommand(cm2, revert) {
  var _a3;
  if (cm2.curOp) {
    cm2.curOp.$changeStart = void 0;
  }
  (revert ? undo : redo)(cm2.cm6);
  let changeStartIndex = (_a3 = cm2.curOp) === null || _a3 === void 0 ? void 0 : _a3.$changeStart;
  if (changeStartIndex != null) {
    cm2.cm6.dispatch({ selection: { anchor: changeStartIndex } });
  }
}
var keys2 = {};
var CodeMirror = class _CodeMirror {
  constructor(cm6) {
    this.state = {};
    this.marks = /* @__PURE__ */ Object.create(null);
    this.$mid = 0;
    this.options = {};
    this._handlers = {};
    this.$lastChangeEndOffset = 0;
    this.virtualSelection = null;
    this.cm6 = cm6;
    this.onChange = this.onChange.bind(this);
    this.onSelectionChange = this.onSelectionChange.bind(this);
  }
  // --------------------------
  openDialog(template, callback, options) {
    return openDialog(this, template, callback, options);
  }
  openNotification(template, options) {
    return openNotification(this, template, options);
  }
  on(type, f2) {
    on(this, type, f2);
  }
  off(type, f2) {
    off(this, type, f2);
  }
  signal(type, e25, handlers2) {
    signal(this, type, e25, handlers2);
  }
  indexFromPos(pos) {
    return indexFromPos(this.cm6.state.doc, pos);
  }
  posFromIndex(offset) {
    return posFromIndex(this.cm6.state.doc, offset);
  }
  foldCode(pos) {
    let view = this.cm6;
    let ranges = view.state.selection.ranges;
    let doc2 = this.cm6.state.doc;
    let index = indexFromPos(doc2, pos);
    let tmpRanges = EditorSelection.create([EditorSelection.range(index, index)], 0).ranges;
    view.state.selection.ranges = tmpRanges;
    foldCode(view);
    view.state.selection.ranges = ranges;
  }
  firstLine() {
    return 0;
  }
  lastLine() {
    return this.cm6.state.doc.lines - 1;
  }
  lineCount() {
    return this.cm6.state.doc.lines;
  }
  setCursor(line, ch2) {
    if (typeof line === "object") {
      ch2 = line.ch;
      line = line.line;
    }
    var offset = indexFromPos(this.cm6.state.doc, { line, ch: ch2 || 0 });
    this.cm6.dispatch({ selection: { anchor: offset } }, { scrollIntoView: !this.curOp });
    if (this.curOp && !this.curOp.isVimOp)
      this.onBeforeEndOperation();
  }
  getCursor(p2) {
    var sel = this.cm6.state.selection.main;
    var offset = p2 == "head" || !p2 ? sel.head : p2 == "anchor" ? sel.anchor : p2 == "start" ? sel.from : p2 == "end" ? sel.to : null;
    if (offset == null)
      throw new Error("Invalid cursor type");
    return this.posFromIndex(offset);
  }
  listSelections() {
    var doc2 = this.cm6.state.doc;
    return this.cm6.state.selection.ranges.map((r2) => {
      return {
        anchor: posFromIndex(doc2, r2.anchor),
        head: posFromIndex(doc2, r2.head)
      };
    });
  }
  setSelections(p2, primIndex) {
    var doc2 = this.cm6.state.doc;
    var ranges = p2.map((x2) => {
      var head = indexFromPos(doc2, x2.head);
      var anchor = indexFromPos(doc2, x2.anchor);
      if (head == anchor)
        return EditorSelection.cursor(head, 1);
      return EditorSelection.range(anchor, head);
    });
    this.cm6.dispatch({
      selection: EditorSelection.create(ranges, primIndex)
    });
  }
  setSelection(anchor, head, options) {
    this.setSelections([{ anchor, head }], 0);
    if (options && options.origin == "*mouse") {
      this.onBeforeEndOperation();
    }
  }
  getLine(row) {
    var doc2 = this.cm6.state.doc;
    if (row < 0 || row >= doc2.lines)
      return "";
    return this.cm6.state.doc.line(row + 1).text;
  }
  getLineHandle(row) {
    if (!this.$lineHandleChanges)
      this.$lineHandleChanges = [];
    return { row, index: this.indexFromPos(new Pos(row, 0)) };
  }
  getLineNumber(handle) {
    var updates = this.$lineHandleChanges;
    if (!updates)
      return null;
    var offset = handle.index;
    for (var i2 = 0; i2 < updates.length; i2++) {
      offset = updates[i2].changes.mapPos(offset, 1, MapMode.TrackAfter);
      if (offset == null)
        return null;
    }
    var pos = this.posFromIndex(offset);
    return pos.ch == 0 ? pos.line : null;
  }
  releaseLineHandles() {
    this.$lineHandleChanges = void 0;
  }
  getRange(s2, e25) {
    var doc2 = this.cm6.state.doc;
    return this.cm6.state.sliceDoc(indexFromPos(doc2, s2), indexFromPos(doc2, e25));
  }
  replaceRange(text, s2, e25, source) {
    if (!e25)
      e25 = s2;
    var doc2 = this.cm6.state.doc;
    var from = indexFromPos(doc2, s2);
    var to2 = indexFromPos(doc2, e25);
    dispatchChange(this, { changes: { from, to: to2, insert: text } });
  }
  replaceSelection(text) {
    dispatchChange(this, this.cm6.state.replaceSelection(text));
  }
  replaceSelections(replacements) {
    var ranges = this.cm6.state.selection.ranges;
    var changes = ranges.map((r2, i2) => {
      return { from: r2.from, to: r2.to, insert: replacements[i2] || "" };
    });
    dispatchChange(this, { changes });
  }
  getSelection() {
    return this.getSelections().join("\n");
  }
  getSelections() {
    var cm2 = this.cm6;
    return cm2.state.selection.ranges.map((r2) => cm2.state.sliceDoc(r2.from, r2.to));
  }
  somethingSelected() {
    return this.cm6.state.selection.ranges.some((r2) => !r2.empty);
  }
  getInputField() {
    return this.cm6.contentDOM;
  }
  clipPos(p2) {
    var doc2 = this.cm6.state.doc;
    var ch2 = p2.ch;
    var lineNumber = p2.line + 1;
    if (lineNumber < 1) {
      lineNumber = 1;
      ch2 = 0;
    }
    if (lineNumber > doc2.lines) {
      lineNumber = doc2.lines;
      ch2 = Number.MAX_VALUE;
    }
    var line = doc2.line(lineNumber);
    ch2 = Math.min(Math.max(0, ch2), line.to - line.from);
    return new Pos(lineNumber - 1, ch2);
  }
  getValue() {
    return this.cm6.state.doc.toString();
  }
  setValue(text) {
    var cm2 = this.cm6;
    return cm2.dispatch({
      changes: { from: 0, to: cm2.state.doc.length, insert: text },
      selection: EditorSelection.range(0, 0)
    });
  }
  focus() {
    return this.cm6.focus();
  }
  blur() {
    return this.cm6.contentDOM.blur();
  }
  defaultTextHeight() {
    return this.cm6.defaultLineHeight;
  }
  findMatchingBracket(pos, _options) {
    var state = this.cm6.state;
    var offset = indexFromPos(state.doc, pos);
    var m2 = matchBrackets(state, offset + 1, -1);
    if (m2 && m2.end) {
      return { to: posFromIndex(state.doc, m2.end.from) };
    }
    m2 = matchBrackets(state, offset, 1);
    if (m2 && m2.end) {
      return { to: posFromIndex(state.doc, m2.end.from) };
    }
    return { to: void 0 };
  }
  scanForBracket(pos, dir, style, config2) {
    return scanForBracket(this, pos, dir, style, config2);
  }
  indentLine(line, more) {
    if (more)
      this.indentMore();
    else
      this.indentLess();
  }
  indentMore() {
    indentMore(this.cm6);
  }
  indentLess() {
    indentLess(this.cm6);
  }
  execCommand(name2) {
    if (name2 == "indentAuto")
      _CodeMirror.commands.indentAuto(this);
    else if (name2 == "goLineLeft")
      cursorLineBoundaryBackward(this.cm6);
    else if (name2 == "goLineRight") {
      cursorLineBoundaryForward(this.cm6);
      let state = this.cm6.state;
      let cur2 = state.selection.main.head;
      if (cur2 < state.doc.length && state.sliceDoc(cur2, cur2 + 1) !== "\n") {
        cursorCharBackward(this.cm6);
      }
    } else
      console.log(name2 + " is not implemented");
  }
  setBookmark(cursor, options) {
    var assoc = (options === null || options === void 0 ? void 0 : options.insertLeft) ? 1 : -1;
    var offset = this.indexFromPos(cursor);
    var bm2 = new Marker(this, offset, assoc);
    return bm2;
  }
  addOverlay({ query }) {
    let cm6Query = new SearchQuery({
      regexp: true,
      search: query.source,
      caseSensitive: !/i/.test(query.flags)
    });
    if (cm6Query.valid) {
      cm6Query.forVim = true;
      this.cm6Query = cm6Query;
      let effect = setSearchQuery.of(cm6Query);
      this.cm6.dispatch({ effects: effect });
      return cm6Query;
    }
  }
  removeOverlay(overlay) {
    if (!this.cm6Query)
      return;
    this.cm6Query.forVim = false;
    let effect = setSearchQuery.of(this.cm6Query);
    this.cm6.dispatch({ effects: effect });
  }
  getSearchCursor(query, pos) {
    var cm2 = this;
    var last = null;
    var lastCM5Result = null;
    if (pos.ch == void 0)
      pos.ch = Number.MAX_VALUE;
    var firstOffset = indexFromPos(cm2.cm6.state.doc, pos);
    var source = query.source.replace(/(\\.|{(?:\d+(?:,\d*)?|,\d+)})|[{}]/g, function(a2, b2) {
      if (!b2)
        return "\\" + a2;
      return b2;
    });
    function rCursor(doc2, from = 0, to2 = doc2.length) {
      return new RegExpCursor(doc2, source, { ignoreCase: query.ignoreCase }, from, to2);
    }
    function nextMatch(from) {
      var doc2 = cm2.cm6.state.doc;
      if (from > doc2.length)
        return null;
      let res = rCursor(doc2, from).next();
      return res.done ? null : res.value;
    }
    var ChunkSize = 1e4;
    function prevMatchInRange(from, to2) {
      var doc2 = cm2.cm6.state.doc;
      for (let size = 1; ; size++) {
        let start = Math.max(from, to2 - size * ChunkSize);
        let cursor = rCursor(doc2, start, to2), range = null;
        while (!cursor.next().done)
          range = cursor.value;
        if (range && (start == from || range.from > start + 10))
          return range;
        if (start == from)
          return null;
      }
    }
    return {
      findNext: function() {
        return this.find(false);
      },
      findPrevious: function() {
        return this.find(true);
      },
      find: function(back) {
        var doc2 = cm2.cm6.state.doc;
        if (back) {
          let endAt = last ? last.from == last.to ? last.to - 1 : last.from : firstOffset;
          last = prevMatchInRange(0, endAt);
        } else {
          let startFrom = last ? last.from == last.to ? last.to + 1 : last.to : firstOffset;
          last = nextMatch(startFrom);
        }
        lastCM5Result = last && {
          from: posFromIndex(doc2, last.from),
          to: posFromIndex(doc2, last.to),
          match: last.match
        };
        return last && last.match;
      },
      from: function() {
        return lastCM5Result === null || lastCM5Result === void 0 ? void 0 : lastCM5Result.from;
      },
      to: function() {
        return lastCM5Result === null || lastCM5Result === void 0 ? void 0 : lastCM5Result.to;
      },
      replace: function(text) {
        if (last) {
          dispatchChange(cm2, {
            changes: { from: last.from, to: last.to, insert: text }
          });
          last.to = last.from + text.length;
          if (lastCM5Result) {
            lastCM5Result.to = posFromIndex(cm2.cm6.state.doc, last.to);
          }
        }
      }
    };
  }
  findPosV(start, amount, unit, goalColumn) {
    let { cm6 } = this;
    const doc2 = cm6.state.doc;
    let pixels = unit == "page" ? cm6.dom.clientHeight : 0;
    const startOffset = indexFromPos(doc2, start);
    let range = EditorSelection.cursor(startOffset, 1, void 0, goalColumn);
    let count2 = Math.round(Math.abs(amount));
    for (let i2 = 0; i2 < count2; i2++) {
      if (unit == "page") {
        range = cm6.moveVertically(range, amount > 0, pixels);
      } else if (unit == "line") {
        range = cm6.moveVertically(range, amount > 0);
      }
    }
    let pos = posFromIndex(doc2, range.head);
    if (amount < 0 && range.head == 0 && goalColumn != 0 && start.line == 0 && start.ch != 0 || amount > 0 && range.head == doc2.length && pos.ch != goalColumn && start.line == pos.line) {
      pos.hitSide = true;
    }
    return pos;
  }
  charCoords(pos, mode) {
    var rect = this.cm6.contentDOM.getBoundingClientRect();
    var offset = indexFromPos(this.cm6.state.doc, pos);
    var coords = this.cm6.coordsAtPos(offset);
    var d2 = -rect.top;
    return { left: ((coords === null || coords === void 0 ? void 0 : coords.left) || 0) - rect.left, top: ((coords === null || coords === void 0 ? void 0 : coords.top) || 0) + d2, bottom: ((coords === null || coords === void 0 ? void 0 : coords.bottom) || 0) + d2 };
  }
  coordsChar(coords, mode) {
    var rect = this.cm6.contentDOM.getBoundingClientRect();
    var offset = this.cm6.posAtCoords({ x: coords.left + rect.left, y: coords.top + rect.top }) || 0;
    return posFromIndex(this.cm6.state.doc, offset);
  }
  getScrollInfo() {
    var scroller = this.cm6.scrollDOM;
    return {
      left: scroller.scrollLeft,
      top: scroller.scrollTop,
      height: scroller.scrollHeight,
      width: scroller.scrollWidth,
      clientHeight: scroller.clientHeight,
      clientWidth: scroller.clientWidth
    };
  }
  scrollTo(x2, y2) {
    if (x2 != null)
      this.cm6.scrollDOM.scrollLeft = x2;
    if (y2 != null)
      this.cm6.scrollDOM.scrollTop = y2;
  }
  scrollIntoView(pos, margin) {
    if (pos) {
      var offset = this.indexFromPos(pos);
      this.cm6.dispatch({
        effects: EditorView.scrollIntoView(offset)
      });
    } else {
      this.cm6.dispatch({ scrollIntoView: true, userEvent: "scroll" });
    }
  }
  getWrapperElement() {
    return this.cm6.dom;
  }
  // for tests
  getMode() {
    return { name: this.getOption("mode") };
  }
  setSize(w2, h2) {
    this.cm6.dom.style.width = w2 + 4 + "px";
    this.cm6.dom.style.height = h2 + "px";
    this.refresh();
  }
  refresh() {
    this.cm6.measure();
  }
  // event listeners
  destroy() {
    this.removeOverlay();
  }
  getLastEditEnd() {
    return this.posFromIndex(this.$lastChangeEndOffset);
  }
  onChange(update) {
    if (this.$lineHandleChanges) {
      this.$lineHandleChanges.push(update);
    }
    for (let i2 in this.marks) {
      let m2 = this.marks[i2];
      m2.update(update.changes);
    }
    if (this.virtualSelection) {
      this.virtualSelection.ranges = this.virtualSelection.ranges.map((range) => range.map(update.changes));
    }
    var curOp = this.curOp = this.curOp || {};
    update.changes.iterChanges((fromA, toA, fromB, toB, text) => {
      if (curOp.$changeStart == null || curOp.$changeStart > fromB)
        curOp.$changeStart = fromB;
      this.$lastChangeEndOffset = toB;
      var change = { text: text.toJSON() };
      if (!curOp.lastChange) {
        curOp.lastChange = curOp.change = change;
      } else {
        curOp.lastChange.next = curOp.lastChange = change;
      }
    }, true);
    if (!curOp.changeHandlers)
      curOp.changeHandlers = this._handlers["change"] && this._handlers["change"].slice();
  }
  onSelectionChange() {
    var curOp = this.curOp = this.curOp || {};
    if (!curOp.cursorActivityHandlers)
      curOp.cursorActivityHandlers = this._handlers["cursorActivity"] && this._handlers["cursorActivity"].slice();
    this.curOp.cursorActivity = true;
  }
  operation(fn2, force) {
    if (!this.curOp)
      this.curOp = { $d: 0 };
    this.curOp.$d++;
    try {
      var result = fn2();
    } finally {
      if (this.curOp) {
        this.curOp.$d--;
        if (!this.curOp.$d)
          this.onBeforeEndOperation();
      }
    }
    return result;
  }
  onBeforeEndOperation() {
    var op2 = this.curOp;
    var scrollIntoView3 = false;
    if (op2) {
      if (op2.change) {
        signalTo(op2.changeHandlers, this, op2.change);
      }
      if (op2 && op2.cursorActivity) {
        signalTo(op2.cursorActivityHandlers, this, null);
        if (op2.isVimOp)
          scrollIntoView3 = true;
      }
      this.curOp = null;
    }
    if (scrollIntoView3)
      this.scrollIntoView();
  }
  moveH(increment, unit) {
    if (unit == "char") {
      var cur2 = this.getCursor();
      this.setCursor(cur2.line, cur2.ch + increment);
    }
  }
  setOption(name2, val) {
    switch (name2) {
      case "keyMap":
        this.state.keyMap = val;
        break;
      case "textwidth":
        this.state.textwidth = val;
        break;
    }
  }
  getOption(name2) {
    switch (name2) {
      case "firstLineNumber":
        return 1;
      case "tabSize":
        return this.cm6.state.tabSize || 4;
      case "readOnly":
        return this.cm6.state.readOnly;
      case "indentWithTabs":
        return this.cm6.state.facet(indentUnit) == "	";
      // TODO
      case "indentUnit":
        return this.cm6.state.facet(indentUnit).length || 2;
      case "textwidth":
        return this.state.textwidth;
      // for tests
      case "keyMap":
        return this.state.keyMap || "vim";
    }
  }
  toggleOverwrite(on3) {
    this.state.overwrite = on3;
  }
  getTokenTypeAt(pos) {
    var _a3;
    var offset = this.indexFromPos(pos);
    var tree = ensureSyntaxTree(this.cm6.state, offset);
    var node = tree === null || tree === void 0 ? void 0 : tree.resolve(offset);
    var type = ((_a3 = node === null || node === void 0 ? void 0 : node.type) === null || _a3 === void 0 ? void 0 : _a3.name) || "";
    if (/comment/i.test(type))
      return "comment";
    if (/string/i.test(type))
      return "string";
    return "";
  }
  overWriteSelection(text) {
    var doc2 = this.cm6.state.doc;
    var sel = this.cm6.state.selection;
    var ranges = sel.ranges.map((x2) => {
      if (x2.empty) {
        var ch2 = x2.to < doc2.length ? doc2.sliceString(x2.from, x2.to + 1) : "";
        if (ch2 && !/\n/.test(ch2))
          return EditorSelection.range(x2.from, x2.to + 1);
      }
      return x2;
    });
    this.cm6.dispatch({
      selection: EditorSelection.create(ranges, sel.mainIndex)
    });
    this.replaceSelection(text);
  }
  /*** multiselect ****/
  isInMultiSelectMode() {
    return this.cm6.state.selection.ranges.length > 1;
  }
  virtualSelectionMode() {
    return !!this.virtualSelection;
  }
  forEachSelection(command2) {
    var selection = this.cm6.state.selection;
    this.virtualSelection = EditorSelection.create(selection.ranges, selection.mainIndex);
    for (var i2 = 0; i2 < this.virtualSelection.ranges.length; i2++) {
      var range = this.virtualSelection.ranges[i2];
      if (!range)
        continue;
      this.cm6.dispatch({ selection: EditorSelection.create([range]) });
      command2();
      this.virtualSelection.ranges[i2] = this.cm6.state.selection.ranges[0];
    }
    this.cm6.dispatch({ selection: this.virtualSelection });
    this.virtualSelection = null;
  }
  hardWrap(options) {
    return hardWrap(this, options);
  }
};
CodeMirror.isMac = typeof navigator != "undefined" && /* @__PURE__ */ /Mac/.test(navigator.platform);
CodeMirror.Pos = Pos;
CodeMirror.StringStream = StringStream;
CodeMirror.commands = {
  cursorCharLeft: function(cm2) {
    cursorCharLeft(cm2.cm6);
  },
  redo: function(cm2) {
    runHistoryCommand(cm2, false);
  },
  undo: function(cm2) {
    runHistoryCommand(cm2, true);
  },
  newlineAndIndent: function(cm2) {
    insertNewlineAndIndent({
      state: cm2.cm6.state,
      dispatch: (tr2) => {
        return dispatchChange(cm2, tr2);
      }
    });
  },
  indentAuto: function(cm2) {
    indentSelection(cm2.cm6);
  },
  newlineAndIndentContinueComment: void 0,
  save: void 0
};
CodeMirror.isWordChar = function(ch2) {
  return wordChar2.test(ch2);
};
CodeMirror.keys = keys2;
CodeMirror.addClass = function(el2, str) {
};
CodeMirror.rmClass = function(el2, str) {
};
CodeMirror.e_preventDefault = function(e25) {
  e25.preventDefault();
};
CodeMirror.e_stop = function(e25) {
  var _a3, _b2;
  (_a3 = e25 === null || e25 === void 0 ? void 0 : e25.stopPropagation) === null || _a3 === void 0 ? void 0 : _a3.call(e25);
  (_b2 = e25 === null || e25 === void 0 ? void 0 : e25.preventDefault) === null || _b2 === void 0 ? void 0 : _b2.call(e25);
};
CodeMirror.lookupKey = function lookupKey(key, map, handle) {
  var result = CodeMirror.keys[key];
  if (result)
    handle(result);
};
CodeMirror.on = on;
CodeMirror.off = off;
CodeMirror.signal = signal;
CodeMirror.findMatchingTag = findMatchingTag;
CodeMirror.findEnclosingTag = findEnclosingTag;
CodeMirror.keyName = void 0;
function dialogDiv(cm2, template, bottom) {
  var dialog = document.createElement("div");
  dialog.appendChild(template);
  return dialog;
}
function closeNotification(cm2, newVal) {
  if (cm2.state.currentNotificationClose)
    cm2.state.currentNotificationClose();
  cm2.state.currentNotificationClose = newVal;
}
function openNotification(cm2, template, options) {
  closeNotification(cm2, close);
  var dialog = dialogDiv(cm2, template, options && options.bottom);
  var closed = false;
  var doneTimer;
  var duration = options && typeof options.duration !== "undefined" ? options.duration : 5e3;
  function close() {
    if (closed)
      return;
    closed = true;
    clearTimeout(doneTimer);
    dialog.remove();
    hideDialog(cm2, dialog);
  }
  dialog.onclick = function(e25) {
    e25.preventDefault();
    close();
  };
  showDialog(cm2, dialog);
  if (duration)
    doneTimer = setTimeout(close, duration);
  return close;
}
function showDialog(cm2, dialog) {
  var oldDialog = cm2.state.dialog;
  cm2.state.dialog = dialog;
  if (dialog && oldDialog !== dialog) {
    if (oldDialog && oldDialog.contains(document.activeElement))
      cm2.focus();
    if (oldDialog && oldDialog.parentElement) {
      oldDialog.parentElement.replaceChild(dialog, oldDialog);
    } else if (oldDialog) {
      oldDialog.remove();
    }
    CodeMirror.signal(cm2, "dialog");
  }
}
function hideDialog(cm2, dialog) {
  if (cm2.state.dialog == dialog) {
    cm2.state.dialog = null;
    CodeMirror.signal(cm2, "dialog");
  }
}
function openDialog(me2, template, callback, options) {
  if (!options)
    options = {};
  closeNotification(me2, void 0);
  var dialog = dialogDiv(me2, template, options.bottom);
  var closed = false;
  showDialog(me2, dialog);
  function close(newVal) {
    if (typeof newVal == "string") {
      inp.value = newVal;
    } else {
      if (closed)
        return;
      closed = true;
      hideDialog(me2, dialog);
      if (!me2.state.dialog)
        me2.focus();
      if (options.onClose)
        options.onClose(dialog);
    }
  }
  var inp = dialog.getElementsByTagName("input")[0];
  if (inp) {
    if (options.value) {
      inp.value = options.value;
      if (options.selectValueOnOpen !== false)
        inp.select();
    }
    if (options.onInput)
      CodeMirror.on(inp, "input", function(e25) {
        options.onInput(e25, inp.value, close);
      });
    if (options.onKeyUp)
      CodeMirror.on(inp, "keyup", function(e25) {
        options.onKeyUp(e25, inp.value, close);
      });
    CodeMirror.on(inp, "keydown", function(e25) {
      if (options && options.onKeyDown && options.onKeyDown(e25, inp.value, close)) {
        return;
      }
      if (e25.keyCode == 13)
        callback(inp.value);
      if (e25.keyCode == 27 || options.closeOnEnter !== false && e25.keyCode == 13) {
        inp.blur();
        CodeMirror.e_stop(e25);
        close();
      }
    });
    if (options.closeOnBlur !== false)
      CodeMirror.on(inp, "blur", function() {
        setTimeout(function() {
          if (document.activeElement === inp)
            return;
          close();
        });
      });
    inp.focus();
  }
  return close;
}
var matching = { "(": ")>", ")": "(<", "[": "]>", "]": "[<", "{": "}>", "}": "{<", "<": ">>", ">": "<<" };
function bracketRegex(config2) {
  return config2 && config2.bracketRegex || /[(){}[\]]/;
}
function scanForBracket(cm2, where, dir, style, config2) {
  var maxScanLen = config2 && config2.maxScanLineLength || 1e4;
  var maxScanLines = config2 && config2.maxScanLines || 1e3;
  var stack = [];
  var re2 = bracketRegex(config2);
  var lineEnd2 = dir > 0 ? Math.min(where.line + maxScanLines, cm2.lastLine() + 1) : Math.max(cm2.firstLine() - 1, where.line - maxScanLines);
  for (var lineNo = where.line; lineNo != lineEnd2; lineNo += dir) {
    var line = cm2.getLine(lineNo);
    if (!line)
      continue;
    var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;
    if (line.length > maxScanLen)
      continue;
    if (lineNo == where.line)
      pos = where.ch - (dir < 0 ? 1 : 0);
    for (; pos != end; pos += dir) {
      var ch2 = line.charAt(pos);
      if (re2.test(ch2)) {
        var match = matching[ch2];
        if (match && match.charAt(1) == ">" == dir > 0)
          stack.push(ch2);
        else if (!stack.length)
          return { pos: new Pos(lineNo, pos), ch: ch2 };
        else
          stack.pop();
      }
    }
  }
  return lineNo - dir == (dir > 0 ? cm2.lastLine() : cm2.firstLine()) ? false : null;
}
function findMatchingTag(cm2, pos) {
}
function findEnclosingTag(cm2, pos) {
  var _a3, _b2;
  var state = cm2.cm6.state;
  var offset = cm2.indexFromPos(pos);
  if (offset < state.doc.length) {
    var text = state.sliceDoc(offset, offset + 1);
    if (text == "<")
      offset++;
  }
  var tree = ensureSyntaxTree(state, offset);
  var node = (tree === null || tree === void 0 ? void 0 : tree.resolve(offset)) || null;
  while (node) {
    if (((_a3 = node.firstChild) === null || _a3 === void 0 ? void 0 : _a3.type.name) == "OpenTag" && ((_b2 = node.lastChild) === null || _b2 === void 0 ? void 0 : _b2.type.name) == "CloseTag") {
      return {
        open: convertRange(state.doc, node.firstChild),
        close: convertRange(state.doc, node.lastChild)
      };
    }
    node = node.parent;
  }
}
function convertRange(doc2, cm6Range) {
  return {
    from: posFromIndex(doc2, cm6Range.from),
    to: posFromIndex(doc2, cm6Range.to)
  };
}
var Marker = class {
  constructor(cm2, offset, assoc) {
    this.cm = cm2;
    this.id = cm2.$mid++;
    this.offset = offset;
    this.assoc = assoc;
    cm2.marks[this.id] = this;
  }
  clear() {
    delete this.cm.marks[this.id];
  }
  find() {
    if (this.offset == null)
      return null;
    return this.cm.posFromIndex(this.offset);
  }
  update(change) {
    if (this.offset != null)
      this.offset = change.mapPos(this.offset, this.assoc, MapMode.TrackDel);
  }
};
function hardWrap(cm2, options) {
  var _a3;
  var max = options.column || cm2.getOption("textwidth") || 80;
  var allowMerge = options.allowMerge != false;
  var row = Math.min(options.from, options.to);
  var endRow = Math.max(options.from, options.to);
  while (row <= endRow) {
    var line = cm2.getLine(row);
    if (line.length > max) {
      var space4 = findSpace(line, max, 5);
      if (space4) {
        var indentation = (_a3 = /^\s*/.exec(line)) === null || _a3 === void 0 ? void 0 : _a3[0];
        cm2.replaceRange("\n" + indentation, new Pos(row, space4.start), new Pos(row, space4.end));
      }
      endRow++;
    } else if (allowMerge && /\S/.test(line) && row != endRow) {
      var nextLine = cm2.getLine(row + 1);
      if (nextLine && /\S/.test(nextLine)) {
        var trimmedLine = line.replace(/\s+$/, "");
        var trimmedNextLine = nextLine.replace(/^\s+/, "");
        var mergedLine = trimmedLine + " " + trimmedNextLine;
        var space4 = findSpace(mergedLine, max, 5);
        if (space4 && space4.start > trimmedLine.length || mergedLine.length < max) {
          cm2.replaceRange(" ", new Pos(row, trimmedLine.length), new Pos(row + 1, nextLine.length - trimmedNextLine.length));
          row--;
          endRow--;
        } else if (trimmedLine.length < line.length) {
          cm2.replaceRange("", new Pos(row, trimmedLine.length), new Pos(row, line.length));
        }
      }
    }
    row++;
  }
  return row;
  function findSpace(line2, max2, min) {
    if (line2.length < max2)
      return;
    var before = line2.slice(0, max2);
    var after = line2.slice(max2);
    var spaceAfter = /^(?:(\s+)|(\S+)(\s+))/.exec(after);
    var spaceBefore = /(?:(\s+)|(\s+)(\S+))$/.exec(before);
    var start = 0;
    var end = 0;
    if (spaceBefore && !spaceBefore[2]) {
      start = max2 - spaceBefore[1].length;
      end = max2;
    }
    if (spaceAfter && !spaceAfter[2]) {
      if (!start)
        start = max2;
      end = max2 + spaceAfter[1].length;
    }
    if (start) {
      return {
        start,
        end
      };
    }
    if (spaceBefore && spaceBefore[2] && spaceBefore.index > min) {
      return {
        start: spaceBefore.index,
        end: spaceBefore.index + spaceBefore[2].length
      };
    }
    if (spaceAfter && spaceAfter[2]) {
      start = max2 + spaceAfter[2].length;
      return {
        start,
        end: start + spaceAfter[3].length
      };
    }
  }
}
var getDrawSelectionConfig2 = getDrawSelectionConfig || /* @__PURE__ */ function() {
  let defaultConfig2 = { cursorBlinkRate: 1200 };
  return function() {
    return defaultConfig2;
  };
}();
var Piece = class {
  constructor(left, top2, height, fontFamily, fontSize, fontWeight, color, className, letter, partial) {
    this.left = left;
    this.top = top2;
    this.height = height;
    this.fontFamily = fontFamily;
    this.fontSize = fontSize;
    this.fontWeight = fontWeight;
    this.color = color;
    this.className = className;
    this.letter = letter;
    this.partial = partial;
  }
  draw() {
    let elt2 = document.createElement("div");
    elt2.className = this.className;
    this.adjust(elt2);
    return elt2;
  }
  adjust(elt2) {
    elt2.style.left = this.left + "px";
    elt2.style.top = this.top + "px";
    elt2.style.height = this.height + "px";
    elt2.style.lineHeight = this.height + "px";
    elt2.style.fontFamily = this.fontFamily;
    elt2.style.fontSize = this.fontSize;
    elt2.style.fontWeight = this.fontWeight;
    elt2.style.color = this.partial ? "transparent" : this.color;
    elt2.className = this.className;
    elt2.textContent = this.letter;
  }
  eq(p2) {
    return this.left == p2.left && this.top == p2.top && this.height == p2.height && this.fontFamily == p2.fontFamily && this.fontSize == p2.fontSize && this.fontWeight == p2.fontWeight && this.color == p2.color && this.className == p2.className && this.letter == p2.letter;
  }
};
var BlockCursorPlugin = class {
  constructor(view, cm2) {
    this.view = view;
    this.rangePieces = [];
    this.cursors = [];
    this.cm = cm2;
    this.measureReq = { read: this.readPos.bind(this), write: this.drawSel.bind(this) };
    this.cursorLayer = view.scrollDOM.appendChild(document.createElement("div"));
    this.cursorLayer.className = "cm-cursorLayer cm-vimCursorLayer";
    this.cursorLayer.setAttribute("aria-hidden", "true");
    view.requestMeasure(this.measureReq);
    this.setBlinkRate();
  }
  setBlinkRate() {
    let config2 = getDrawSelectionConfig2(this.cm.cm6.state);
    let blinkRate = config2.cursorBlinkRate;
    this.cursorLayer.style.animationDuration = blinkRate + "ms";
  }
  update(update) {
    if (update.selectionSet || update.geometryChanged || update.viewportChanged) {
      this.view.requestMeasure(this.measureReq);
      this.cursorLayer.style.animationName = this.cursorLayer.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";

      let { scaleX, scaleY } = this.view;
      if (scaleX != this.scaleX || scaleY != this.scaleY) {
      console.log("updating")
        this.scaleX = scaleX;
        this.scaleY = scaleY;
        this.dom.style.transform = `scale(${1 / scaleX}, ${1 / scaleY})`;
      }
    }
    if (configChanged2(update))
      this.setBlinkRate();
  }
  scheduleRedraw() {
    this.view.requestMeasure(this.measureReq);
  }
  readPos() {
    let { state } = this.view;
    let cursors = [];
    for (let r2 of state.selection.ranges) {
      let prim = r2 == state.selection.main;
      let piece = measureCursor(this.cm, this.view, r2, prim);
      if (piece)
        cursors.push(piece);
    }
    return { cursors };
  }
  drawSel({ cursors }) {
    if (cursors.length != this.cursors.length || cursors.some((c2, i2) => !c2.eq(this.cursors[i2]))) {
      let oldCursors = this.cursorLayer.children;
      if (oldCursors.length !== cursors.length) {
        this.cursorLayer.textContent = "";
        for (const c2 of cursors)
          this.cursorLayer.appendChild(c2.draw());
      } else {
        cursors.forEach((c2, idx) => c2.adjust(oldCursors[idx]));
      }
      this.cursors = cursors;
    }
  }
  destroy() {
    this.cursorLayer.remove();
  }
};
function configChanged2(update) {
  return getDrawSelectionConfig2(update.startState) != getDrawSelectionConfig2(update.state);
}
var themeSpec2 = {
  ".cm-vimMode .cm-line": {
    "& ::selection": { backgroundColor: "transparent !important" },
    "&::selection": { backgroundColor: "transparent !important" },
    caretColor: "transparent !important"
  },
  ".cm-fat-cursor": {
    position: "absolute",
    background: "#ff9696",
    border: "none",
    whiteSpace: "pre"
  },
  "&:not(.cm-focused) .cm-fat-cursor": {
    background: "none",
    outline: "solid 1px #ff9696",
    color: "transparent !important"
  }
};
var hideNativeSelection2 = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ EditorView.theme(themeSpec2));
function getBase2(view) {
  let rect = view.scrollDOM.getBoundingClientRect();
  let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;
  return { left: left - view.scrollDOM.scrollLeft, top: rect.top - view.scrollDOM.scrollTop };
}
function measureCursor(cm2, view, cursor, primary) {
  var _a3, _b2;
  let head = cursor.head;
  let fatCursor = false;
  let hCoeff = 1;
  let vim2 = cm2.state.vim;
  if (vim2 && (!vim2.insertMode || cm2.state.overwrite)) {
    fatCursor = true;
    if (vim2.visualBlock && !primary)
      return null;
    if (cursor.anchor < cursor.head)
      head--;
    if (cm2.state.overwrite)
      hCoeff = 0.2;
    else if (vim2.status)
      hCoeff = 0.5;
  }
  if (fatCursor) {
    let letter = head < view.state.doc.length && view.state.sliceDoc(head, head + 1);
    if (letter && (/[\uDC00-\uDFFF]/.test(letter) && head > 1)) {
      head--;
      letter = view.state.sliceDoc(head, head + 1);
    }
    let pos = view.coordsAtPos(head, 1);
    if (!pos)
      return null;
    let base2 = getBase2(view);
    let domAtPos = view.domAtPos(head);
    let node = domAtPos ? domAtPos.node : view.contentDOM;
    while (domAtPos && domAtPos.node instanceof HTMLElement) {
      node = domAtPos.node;
      domAtPos = { node: domAtPos.node.childNodes[domAtPos.offset], offset: 0 };
    }
    if (!(node instanceof HTMLElement)) {
      if (!node.parentNode)
        return null;
      node = node.parentNode;
    }
    let style = getComputedStyle(node);
    let left = pos.left;
    let charCoords = (_b2 = (_a3 = view).coordsForChar) === null || _b2 === void 0 ? void 0 : _b2.call(_a3, head);
    if (charCoords) {
      left = charCoords.left;
    }
    if (!letter || letter == "\n" || letter == "\r") {
      letter = "\xA0";
    } else if (letter == "	") {
      letter = "\xA0";
      var nextPos = view.coordsAtPos(head + 1, -1);
      if (nextPos) {
        left = nextPos.left - (nextPos.left - pos.left) / parseInt(style.tabSize);
      }
    } else if (/[\uD800-\uDBFF]/.test(letter) && head < view.state.doc.length - 1) {
      letter += view.state.sliceDoc(head + 1, head + 2);
    }
    let h2 = pos.bottom - pos.top;
    return new Piece(left - base2.left, pos.top - base2.top + h2 * (1 - hCoeff), h2 * hCoeff, style.fontFamily, style.fontSize, style.fontWeight, style.color, primary ? "cm-fat-cursor cm-cursor-primary" : "cm-fat-cursor cm-cursor-secondary", letter, hCoeff != 1);
  } else {
    return null;
  }
}
var FIREFOX_LINUX = typeof navigator != "undefined" && /* @__PURE__ */ /linux/i.test(navigator.platform) && /* @__PURE__ */ / Gecko\/\d+/.exec(navigator.userAgent);
var Vim = /* @__PURE__ */ initVim(CodeMirror);
var HighlightMargin = 250;
var vimStyle = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-vimMode .cm-cursorLayer:not(.cm-vimCursorLayer)": {
    display: "none"
  },
  ".cm-vim-panel": {
    padding: "0px 10px",
    fontFamily: "monospace",
    minHeight: "1.3em"
  },
  ".cm-vim-panel input": {
    border: "none",
    outline: "none",
    backgroundColor: "inherit"
  },
  "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
  "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" }
});
var vimPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.status = "";
    this.query = null;
    this.decorations = Decoration.none;
    this.waitForCopy = false;
    this.lastKeydown = "";
    this.useNextTextInput = false;
    this.compositionText = "";
    this.view = view;
    const cm2 = this.cm = new CodeMirror(view);
    Vim.enterVimMode(this.cm);
    this.view.cm = this.cm;
    this.cm.state.vimPlugin = this;
    this.blockCursor = new BlockCursorPlugin(view, cm2);
    this.updateClass();
    this.cm.on("vim-command-done", () => {
      if (cm2.state.vim)
        cm2.state.vim.status = "";
      this.blockCursor.scheduleRedraw();
      this.updateStatus();
    });
    this.cm.on("vim-mode-change", (e25) => {
      if (!cm2.state.vim)
        return;
      cm2.state.vim.mode = e25.mode;
      if (e25.subMode) {
        cm2.state.vim.mode += " block";
      }
      cm2.state.vim.status = "";
      this.blockCursor.scheduleRedraw();
      this.updateClass();
      this.updateStatus();
    });
    this.cm.on("dialog", () => {
      if (this.cm.state.statusbar) {
        this.updateStatus();
      } else {
        view.dispatch({
          effects: showVimPanel.of(!!this.cm.state.dialog)
        });
      }
    });
    this.dom = document.createElement("span");
    this.dom.style.cssText = "position: absolute; right: 10px; top: 1px";
    this.statusButton = document.createElement("span");
    this.statusButton.onclick = (e25) => {
      Vim.handleKey(this.cm, "<Esc>", "user");
      this.cm.focus();
    };
    this.statusButton.style.cssText = "cursor: pointer";
  }
  update(update) {
    var _a3;
    if ((update.viewportChanged || update.docChanged) && this.query) {
      this.highlight(this.query);
    }
    if (update.docChanged) {
      this.cm.onChange(update);
    }
    if (update.selectionSet) {
      this.cm.onSelectionChange();
    }
    if (update.viewportChanged) ;
    if (this.cm.curOp && !this.cm.curOp.isVimOp) {
      this.cm.onBeforeEndOperation();
    }
    if (update.transactions) {
      for (let tr2 of update.transactions)
        for (let effect of tr2.effects) {
          if (effect.is(setSearchQuery)) {
            let forVim = (_a3 = effect.value) === null || _a3 === void 0 ? void 0 : _a3.forVim;
            if (!forVim) {
              this.highlight(null);
            } else {
              let query = effect.value.create();
              this.highlight(query);
            }
          }
        }
    }
    this.blockCursor.update(update);
  }
  updateClass() {
    const state = this.cm.state;
    if (!state.vim || state.vim.insertMode && !state.overwrite)
      this.view.scrollDOM.classList.remove("cm-vimMode");
    else
      this.view.scrollDOM.classList.add("cm-vimMode");
  }
  updateStatus() {
    let dom = this.cm.state.statusbar;
    let vim2 = this.cm.state.vim;
    if (!dom || !vim2)
      return;
    let dialog = this.cm.state.dialog;
    if (dialog) {
      if (dialog.parentElement != dom) {
        dom.textContent = "";
        dom.appendChild(dialog);
      }
    } else {
      dom.textContent = "";
      var status = (vim2.mode || "normal").toUpperCase();
      if (vim2.insertModeReturn)
        status += "(C-O)";
      this.statusButton.textContent = `--${status}--`;
      dom.appendChild(this.statusButton);
    }
    this.dom.textContent = vim2.status;
    dom.appendChild(this.dom);
  }
  destroy() {
    Vim.leaveVimMode(this.cm);
    this.updateClass();
    this.blockCursor.destroy();
    delete this.view.cm;
  }
  highlight(query) {
    this.query = query;
    if (!query)
      return this.decorations = Decoration.none;
    let { view } = this;
    let builder = new RangeSetBuilder();
    for (let i2 = 0, ranges = view.visibleRanges, l2 = ranges.length; i2 < l2; i2++) {
      let { from, to: to2 } = ranges[i2];
      while (i2 < l2 - 1 && to2 > ranges[i2 + 1].from - 2 * HighlightMargin)
        to2 = ranges[++i2].to;
      query.highlight(view.state, from, to2, (from2, to3) => {
        builder.add(from2, to3, matchMark2);
      });
    }
    return this.decorations = builder.finish();
  }
  handleKey(e25, view) {
    const cm2 = this.cm;
    let vim2 = cm2.state.vim;
    if (!vim2)
      return;
    const key = Vim.vimKeyFromEvent(e25, vim2);
    CodeMirror.signal(this.cm, "inputEvent", { type: "handleKey", key });
    if (!key)
      return;
    if (key == "<Esc>" && !vim2.insertMode && !vim2.visualMode && this.query) {
      const searchState2 = vim2.searchState_;
      if (searchState2) {
        cm2.removeOverlay(searchState2.getOverlay());
        searchState2.setOverlay(null);
      }
    }
    let isCopy = key === "<C-c>" && !CodeMirror.isMac;
    if (isCopy && cm2.somethingSelected()) {
      this.waitForCopy = true;
      return true;
    }
    vim2.status = (vim2.status || "") + key;
    let result = Vim.multiSelectHandleKey(cm2, key, "user");
    vim2 = Vim.maybeInitVimState_(cm2);
    if (!result && vim2.insertMode && cm2.state.overwrite) {
      if (e25.key && e25.key.length == 1 && !/\n/.test(e25.key)) {
        result = true;
        cm2.overWriteSelection(e25.key);
      } else if (e25.key == "Backspace") {
        result = true;
        CodeMirror.commands.cursorCharLeft(cm2);
      }
    }
    if (result) {
      CodeMirror.signal(this.cm, "vim-keypress", key);
      e25.preventDefault();
      e25.stopPropagation();
      this.blockCursor.scheduleRedraw();
    }
    this.updateStatus();
    return !!result;
  }
}, {
  eventHandlers: {
    copy: function(e25, view) {
      if (!this.waitForCopy)
        return;
      this.waitForCopy = false;
      Promise.resolve().then(() => {
        var cm2 = this.cm;
        var vim2 = cm2.state.vim;
        if (!vim2)
          return;
        if (vim2.insertMode) {
          cm2.setSelection(cm2.getCursor(), cm2.getCursor());
        } else {
          cm2.operation(() => {
            if (cm2.curOp)
              cm2.curOp.isVimOp = true;
            Vim.handleKey(cm2, "<Esc>", "user");
          });
        }
      });
    },
    compositionstart: function(e25, view) {
      this.useNextTextInput = true;
      CodeMirror.signal(this.cm, "inputEvent", e25);
    },
    compositionupdate: function(e25, view) {
      CodeMirror.signal(this.cm, "inputEvent", e25);
    },
    compositionend: function(e25, view) {
      CodeMirror.signal(this.cm, "inputEvent", e25);
    },
    keypress: function(e25, view) {
      CodeMirror.signal(this.cm, "inputEvent", e25);
      if (this.lastKeydown == "Dead")
        this.handleKey(e25, view);
    },
    keydown: function(e25, view) {
      CodeMirror.signal(this.cm, "inputEvent", e25);
      this.lastKeydown = e25.key;
      if (this.lastKeydown == "Unidentified" || this.lastKeydown == "Process" || this.lastKeydown == "Dead") {
        this.useNextTextInput = true;
      } else {
        this.useNextTextInput = false;
        this.handleKey(e25, view);
      }
    }
  },
  provide: () => {
    return [
      EditorView.inputHandler.of((view, from, to2, text) => {
        var _a3, _b2;
        var cm2 = getCM(view);
        if (!cm2)
          return false;
        var vim2 = (_a3 = cm2.state) === null || _a3 === void 0 ? void 0 : _a3.vim;
        var vimPlugin2 = cm2.state.vimPlugin;
        if (vim2 && !vim2.insertMode && !((_b2 = cm2.curOp) === null || _b2 === void 0 ? void 0 : _b2.isVimOp)) {
          if (text === "\0\0") {
            return true;
          }
          CodeMirror.signal(cm2, "inputEvent", {
            type: "text",
            text,
            from,
            to: to2
          });
          if (text.length == 1 && vimPlugin2.useNextTextInput) {
            if (vim2.expectLiteralNext && view.composing) {
              vimPlugin2.compositionText = text;
              return false;
            }
            if (vimPlugin2.compositionText) {
              var toRemove = vimPlugin2.compositionText;
              vimPlugin2.compositionText = "";
              var head = view.state.selection.main.head;
              var textInDoc = view.state.sliceDoc(head - toRemove.length, head);
              if (toRemove === textInDoc) {
                var pos = cm2.getCursor();
                cm2.replaceRange("", cm2.posFromIndex(head - toRemove.length), pos);
              }
            }
            vimPlugin2.handleKey({
              key: text,
              preventDefault: () => {
              },
              stopPropagation: () => {
              }
            });
            forceEndComposition(view);
            return true;
          }
        }
        return false;
      })
    ];
  },
  decorations: (v2) => v2.decorations
});
function forceEndComposition(view) {
  var parent = view.scrollDOM.parentElement;
  if (!parent)
    return;
  if (FIREFOX_LINUX) {
    view.contentDOM.textContent = "\0\0";
    view.contentDOM.dispatchEvent(new CustomEvent("compositionend"));
    return;
  }
  var sibling = view.scrollDOM.nextSibling;
  var selection = window.getSelection();
  var savedSelection = selection && {
    anchorNode: selection.anchorNode,
    anchorOffset: selection.anchorOffset,
    focusNode: selection.focusNode,
    focusOffset: selection.focusOffset
  };
  view.scrollDOM.remove();
  parent.insertBefore(view.scrollDOM, sibling);
  try {
    if (savedSelection && selection) {
      selection.setPosition(savedSelection.anchorNode, savedSelection.anchorOffset);
      if (savedSelection.focusNode) {
        selection.extend(savedSelection.focusNode, savedSelection.focusOffset);
      }
    }
  } catch (e25) {
    console.error(e25);
  }
  view.focus();
  view.contentDOM.dispatchEvent(new CustomEvent("compositionend"));
}
var matchMark2 = /* @__PURE__ */ Decoration.mark({ class: "cm-searchMatch" });
var showVimPanel = /* @__PURE__ */ StateEffect.define();
var vimPanelState = /* @__PURE__ */ StateField.define({
  create: () => false,
  update(value, tr2) {
    for (let e25 of tr2.effects)
      if (e25.is(showVimPanel))
        value = e25.value;
    return value;
  },
  provide: (f2) => {
    return showPanel.from(f2, (on3) => on3 ? createVimPanel : null);
  }
});
function createVimPanel(view) {
  let dom = document.createElement("div");
  dom.className = "cm-vim-panel";
  let cm2 = view.cm;
  if (cm2.state.dialog) {
    dom.appendChild(cm2.state.dialog);
  }
  return { top: false, dom };
}
function statusPanel(view) {
  let dom = document.createElement("div");
  dom.className = "cm-vim-panel";
  let cm2 = view.cm;
  cm2.state.statusbar = dom;
  cm2.state.vimPlugin.updateStatus();
  return { dom };
}
function vim(options = {}) {
  return [
    vimStyle,
    vimPlugin,
    hideNativeSelection2,
    options.status ? showPanel.of(statusPanel) : vimPanelState
  ];
}
function getCM(view) {
  return view.cm || null;
}

// node_modules/@lezer/markdown/dist/index.js
var CompositeBlock = class _CompositeBlock {
  static create(type, value, from, parentHash, end) {
    let hash2 = parentHash + (parentHash << 8) + type + (value << 4) | 0;
    return new _CompositeBlock(type, value, from, hash2, end, [], []);
  }
  constructor(type, value, from, hash2, end, children, positions) {
    this.type = type;
    this.value = value;
    this.from = from;
    this.hash = hash2;
    this.end = end;
    this.children = children;
    this.positions = positions;
    this.hashProp = [[NodeProp.contextHash, hash2]];
  }
  addChild(child, pos) {
    if (child.prop(NodeProp.contextHash) != this.hash)
      child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);
    this.children.push(child);
    this.positions.push(pos);
  }
  toTree(nodeSet, end = this.end) {
    let last = this.children.length - 1;
    if (last >= 0)
      end = Math.max(end, this.positions[last] + this.children[last].length + this.from);
    return new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({
      makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)
    });
  }
};
var Type;
(function(Type2) {
  Type2[Type2["Document"] = 1] = "Document";
  Type2[Type2["CodeBlock"] = 2] = "CodeBlock";
  Type2[Type2["FencedCode"] = 3] = "FencedCode";
  Type2[Type2["Blockquote"] = 4] = "Blockquote";
  Type2[Type2["HorizontalRule"] = 5] = "HorizontalRule";
  Type2[Type2["BulletList"] = 6] = "BulletList";
  Type2[Type2["OrderedList"] = 7] = "OrderedList";
  Type2[Type2["ListItem"] = 8] = "ListItem";
  Type2[Type2["ATXHeading1"] = 9] = "ATXHeading1";
  Type2[Type2["ATXHeading2"] = 10] = "ATXHeading2";
  Type2[Type2["ATXHeading3"] = 11] = "ATXHeading3";
  Type2[Type2["ATXHeading4"] = 12] = "ATXHeading4";
  Type2[Type2["ATXHeading5"] = 13] = "ATXHeading5";
  Type2[Type2["ATXHeading6"] = 14] = "ATXHeading6";
  Type2[Type2["SetextHeading1"] = 15] = "SetextHeading1";
  Type2[Type2["SetextHeading2"] = 16] = "SetextHeading2";
  Type2[Type2["HTMLBlock"] = 17] = "HTMLBlock";
  Type2[Type2["LinkReference"] = 18] = "LinkReference";
  Type2[Type2["Paragraph"] = 19] = "Paragraph";
  Type2[Type2["CommentBlock"] = 20] = "CommentBlock";
  Type2[Type2["ProcessingInstructionBlock"] = 21] = "ProcessingInstructionBlock";
  Type2[Type2["Escape"] = 22] = "Escape";
  Type2[Type2["Entity"] = 23] = "Entity";
  Type2[Type2["HardBreak"] = 24] = "HardBreak";
  Type2[Type2["Emphasis"] = 25] = "Emphasis";
  Type2[Type2["StrongEmphasis"] = 26] = "StrongEmphasis";
  Type2[Type2["Link"] = 27] = "Link";
  Type2[Type2["Image"] = 28] = "Image";
  Type2[Type2["InlineCode"] = 29] = "InlineCode";
  Type2[Type2["HTMLTag"] = 30] = "HTMLTag";
  Type2[Type2["Comment"] = 31] = "Comment";
  Type2[Type2["ProcessingInstruction"] = 32] = "ProcessingInstruction";
  Type2[Type2["Autolink"] = 33] = "Autolink";
  Type2[Type2["HeaderMark"] = 34] = "HeaderMark";
  Type2[Type2["QuoteMark"] = 35] = "QuoteMark";
  Type2[Type2["ListMark"] = 36] = "ListMark";
  Type2[Type2["LinkMark"] = 37] = "LinkMark";
  Type2[Type2["EmphasisMark"] = 38] = "EmphasisMark";
  Type2[Type2["CodeMark"] = 39] = "CodeMark";
  Type2[Type2["CodeText"] = 40] = "CodeText";
  Type2[Type2["CodeInfo"] = 41] = "CodeInfo";
  Type2[Type2["LinkTitle"] = 42] = "LinkTitle";
  Type2[Type2["LinkLabel"] = 43] = "LinkLabel";
  Type2[Type2["URL"] = 44] = "URL";
})(Type || (Type = {}));
var LeafBlock = class {
  /// @internal
  constructor(start, content2) {
    this.start = start;
    this.content = content2;
    this.marks = [];
    this.parsers = [];
  }
};
var Line2 = class {
  constructor() {
    this.text = "";
    this.baseIndent = 0;
    this.basePos = 0;
    this.depth = 0;
    this.markers = [];
    this.pos = 0;
    this.indent = 0;
    this.next = -1;
  }
  /// @internal
  forward() {
    if (this.basePos > this.pos)
      this.forwardInner();
  }
  /// @internal
  forwardInner() {
    let newPos = this.skipSpace(this.basePos);
    this.indent = this.countIndent(newPos, this.pos, this.indent);
    this.pos = newPos;
    this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);
  }
  /// Skip whitespace after the given position, return the position of
  /// the next non-space character or the end of the line if there's
  /// only space after `from`.
  skipSpace(from) {
    return skipSpace(this.text, from);
  }
  /// @internal
  reset(text) {
    this.text = text;
    this.baseIndent = this.basePos = this.pos = this.indent = 0;
    this.forwardInner();
    this.depth = 1;
    while (this.markers.length)
      this.markers.pop();
  }
  /// Move the line's base position forward to the given position.
  /// This should only be called by composite [block
  /// parsers](#BlockParser.parse) or [markup skipping
  /// functions](#NodeSpec.composite).
  moveBase(to2) {
    this.basePos = to2;
    this.baseIndent = this.countIndent(to2, this.pos, this.indent);
  }
  /// Move the line's base position forward to the given _column_.
  moveBaseColumn(indent) {
    this.baseIndent = indent;
    this.basePos = this.findColumn(indent);
  }
  /// Store a composite-block-level marker. Should be called from
  /// [markup skipping functions](#NodeSpec.composite) when they
  /// consume any non-whitespace characters.
  addMarker(elt2) {
    this.markers.push(elt2);
  }
  /// Find the column position at `to`, optionally starting at a given
  /// position and column.
  countIndent(to2, from = 0, indent = 0) {
    for (let i2 = from; i2 < to2; i2++)
      indent += this.text.charCodeAt(i2) == 9 ? 4 - indent % 4 : 1;
    return indent;
  }
  /// Find the position corresponding to the given column.
  findColumn(goal) {
    let i2 = 0;
    for (let indent = 0; i2 < this.text.length && indent < goal; i2++)
      indent += this.text.charCodeAt(i2) == 9 ? 4 - indent % 4 : 1;
    return i2;
  }
  /// @internal
  scrub() {
    if (!this.baseIndent)
      return this.text;
    let result = "";
    for (let i2 = 0; i2 < this.basePos; i2++)
      result += " ";
    return result + this.text.slice(this.basePos);
  }
};
function skipForList(bl2, cx2, line) {
  if (line.pos == line.text.length || bl2 != cx2.block && line.indent >= cx2.stack[line.depth + 1].value + line.baseIndent)
    return true;
  if (line.indent >= line.baseIndent + 4)
    return false;
  let size = (bl2.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx2, false);
  return size > 0 && (bl2.type != Type.BulletList || isHorizontalRule(line, cx2, false) < 0) && line.text.charCodeAt(line.pos + size - 1) == bl2.value;
}
var DefaultSkipMarkup = {
  [Type.Blockquote](bl2, cx2, line) {
    if (line.next != 62)
      return false;
    line.markers.push(elt(Type.QuoteMark, cx2.lineStart + line.pos, cx2.lineStart + line.pos + 1));
    line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));
    bl2.end = cx2.lineStart + line.text.length;
    return true;
  },
  [Type.ListItem](bl2, _cx, line) {
    if (line.indent < line.baseIndent + bl2.value && line.next > -1)
      return false;
    line.moveBaseColumn(line.baseIndent + bl2.value);
    return true;
  },
  [Type.OrderedList]: skipForList,
  [Type.BulletList]: skipForList,
  [Type.Document]() {
    return true;
  }
};
function space(ch2) {
  return ch2 == 32 || ch2 == 9 || ch2 == 10 || ch2 == 13;
}
function skipSpace(line, i2 = 0) {
  while (i2 < line.length && space(line.charCodeAt(i2)))
    i2++;
  return i2;
}
function skipSpaceBack(line, i2, to2) {
  while (i2 > to2 && space(line.charCodeAt(i2 - 1)))
    i2--;
  return i2;
}
function isFencedCode(line) {
  if (line.next != 96 && line.next != 126)
    return -1;
  let pos = line.pos + 1;
  while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
    pos++;
  if (pos < line.pos + 3)
    return -1;
  if (line.next == 96) {
    for (let i2 = pos; i2 < line.text.length; i2++)
      if (line.text.charCodeAt(i2) == 96)
        return -1;
  }
  return pos;
}
function isBlockquote(line) {
  return line.next != 62 ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;
}
function isHorizontalRule(line, cx2, breaking) {
  if (line.next != 42 && line.next != 45 && line.next != 95)
    return -1;
  let count2 = 1;
  for (let pos = line.pos + 1; pos < line.text.length; pos++) {
    let ch2 = line.text.charCodeAt(pos);
    if (ch2 == line.next)
      count2++;
    else if (!space(ch2))
      return -1;
  }
  if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx2.stack.length)
    return -1;
  return count2 < 3 ? -1 : 1;
}
function inList(cx2, type) {
  for (let i2 = cx2.stack.length - 1; i2 >= 0; i2--)
    if (cx2.stack[i2].type == type)
      return true;
  return false;
}
function isBulletList(line, cx2, breaking) {
  return (line.next == 45 || line.next == 43 || line.next == 42) && (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) && (!breaking || inList(cx2, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;
}
function isOrderedList(line, cx2, breaking) {
  let pos = line.pos, next = line.next;
  for (; ; ) {
    if (next >= 48 && next <= 57)
      pos++;
    else
      break;
    if (pos == line.text.length)
      return -1;
    next = line.text.charCodeAt(pos);
  }
  if (pos == line.pos || pos > line.pos + 9 || next != 46 && next != 41 || pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1)) || breaking && !inList(cx2, Type.OrderedList) && (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49))
    return -1;
  return pos + 1 - line.pos;
}
function isAtxHeading(line) {
  if (line.next != 35)
    return -1;
  let pos = line.pos + 1;
  while (pos < line.text.length && line.text.charCodeAt(pos) == 35)
    pos++;
  if (pos < line.text.length && line.text.charCodeAt(pos) != 32)
    return -1;
  let size = pos - line.pos;
  return size > 6 ? -1 : size;
}
function isSetextUnderline(line) {
  if (line.next != 45 && line.next != 61 || line.indent >= line.baseIndent + 4)
    return -1;
  let pos = line.pos + 1;
  while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
    pos++;
  let end = pos;
  while (pos < line.text.length && space(line.text.charCodeAt(pos)))
    pos++;
  return pos == line.text.length ? end : -1;
}
var EmptyLine = /^[ \t]*$/;
var CommentEnd = /-->/;
var ProcessingEnd = /\?>/;
var HTMLBlockStyle = [
  [/^<(?:script|pre|style)(?:\s|>|$)/i, /<\/(?:script|pre|style)>/i],
  [/^\s*<!--/, CommentEnd],
  [/^\s*<\?/, ProcessingEnd],
  [/^\s*<![A-Z]/, />/],
  [/^\s*<!\[CDATA\[/, /\]\]>/],
  [/^\s*<\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|\/?>|$)/i, EmptyLine],
  [/^\s*(?:<\/[a-z][\w-]*\s*>|<[a-z][\w-]*(\s+[a-z:_][\w-.]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*>)\s*$/i, EmptyLine]
];
function isHTMLBlock(line, _cx, breaking) {
  if (line.next != 60)
    return -1;
  let rest = line.text.slice(line.pos);
  for (let i2 = 0, e25 = HTMLBlockStyle.length - (breaking ? 1 : 0); i2 < e25; i2++)
    if (HTMLBlockStyle[i2][0].test(rest))
      return i2;
  return -1;
}
function getListIndent(line, pos) {
  let indentAfter = line.countIndent(pos, line.pos, line.indent);
  let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);
  return indented >= indentAfter + 5 ? indentAfter + 1 : indented;
}
function addCodeText(marks2, from, to2) {
  let last = marks2.length - 1;
  if (last >= 0 && marks2[last].to == from && marks2[last].type == Type.CodeText)
    marks2[last].to = to2;
  else
    marks2.push(elt(Type.CodeText, from, to2));
}
var DefaultBlockParsers = {
  LinkReference: void 0,
  IndentedCode(cx2, line) {
    let base2 = line.baseIndent + 4;
    if (line.indent < base2)
      return false;
    let start = line.findColumn(base2);
    let from = cx2.lineStart + start, to2 = cx2.lineStart + line.text.length;
    let marks2 = [], pendingMarks = [];
    addCodeText(marks2, from, to2);
    while (cx2.nextLine() && line.depth >= cx2.stack.length) {
      if (line.pos == line.text.length) {
        addCodeText(pendingMarks, cx2.lineStart - 1, cx2.lineStart);
        for (let m2 of line.markers)
          pendingMarks.push(m2);
      } else if (line.indent < base2) {
        break;
      } else {
        if (pendingMarks.length) {
          for (let m2 of pendingMarks) {
            if (m2.type == Type.CodeText)
              addCodeText(marks2, m2.from, m2.to);
            else
              marks2.push(m2);
          }
          pendingMarks = [];
        }
        addCodeText(marks2, cx2.lineStart - 1, cx2.lineStart);
        for (let m2 of line.markers)
          marks2.push(m2);
        to2 = cx2.lineStart + line.text.length;
        let codeStart = cx2.lineStart + line.findColumn(line.baseIndent + 4);
        if (codeStart < to2)
          addCodeText(marks2, codeStart, to2);
      }
    }
    if (pendingMarks.length) {
      pendingMarks = pendingMarks.filter((m2) => m2.type != Type.CodeText);
      if (pendingMarks.length)
        line.markers = pendingMarks.concat(line.markers);
    }
    cx2.addNode(cx2.buffer.writeElements(marks2, -from).finish(Type.CodeBlock, to2 - from), from);
    return true;
  },
  FencedCode(cx2, line) {
    let fenceEnd = isFencedCode(line);
    if (fenceEnd < 0)
      return false;
    let from = cx2.lineStart + line.pos, ch2 = line.next, len = fenceEnd - line.pos;
    let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);
    let marks2 = [elt(Type.CodeMark, from, from + len)];
    if (infoFrom < infoTo)
      marks2.push(elt(Type.CodeInfo, cx2.lineStart + infoFrom, cx2.lineStart + infoTo));
    for (let first = true; cx2.nextLine() && line.depth >= cx2.stack.length; first = false) {
      let i2 = line.pos;
      if (line.indent - line.baseIndent < 4)
        while (i2 < line.text.length && line.text.charCodeAt(i2) == ch2)
          i2++;
      if (i2 - line.pos >= len && line.skipSpace(i2) == line.text.length) {
        for (let m2 of line.markers)
          marks2.push(m2);
        marks2.push(elt(Type.CodeMark, cx2.lineStart + line.pos, cx2.lineStart + i2));
        cx2.nextLine();
        break;
      } else {
        if (!first)
          addCodeText(marks2, cx2.lineStart - 1, cx2.lineStart);
        for (let m2 of line.markers)
          marks2.push(m2);
        let textStart = cx2.lineStart + line.basePos, textEnd = cx2.lineStart + line.text.length;
        if (textStart < textEnd)
          addCodeText(marks2, textStart, textEnd);
      }
    }
    cx2.addNode(cx2.buffer.writeElements(marks2, -from).finish(Type.FencedCode, cx2.prevLineEnd() - from), from);
    return true;
  },
  Blockquote(cx2, line) {
    let size = isBlockquote(line);
    if (size < 0)
      return false;
    cx2.startContext(Type.Blockquote, line.pos);
    cx2.addNode(Type.QuoteMark, cx2.lineStart + line.pos, cx2.lineStart + line.pos + 1);
    line.moveBase(line.pos + size);
    return null;
  },
  HorizontalRule(cx2, line) {
    if (isHorizontalRule(line, cx2, false) < 0)
      return false;
    let from = cx2.lineStart + line.pos;
    cx2.nextLine();
    cx2.addNode(Type.HorizontalRule, from);
    return true;
  },
  BulletList(cx2, line) {
    let size = isBulletList(line, cx2, false);
    if (size < 0)
      return false;
    if (cx2.block.type != Type.BulletList)
      cx2.startContext(Type.BulletList, line.basePos, line.next);
    let newBase = getListIndent(line, line.pos + 1);
    cx2.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
    cx2.addNode(Type.ListMark, cx2.lineStart + line.pos, cx2.lineStart + line.pos + size);
    line.moveBaseColumn(newBase);
    return null;
  },
  OrderedList(cx2, line) {
    let size = isOrderedList(line, cx2, false);
    if (size < 0)
      return false;
    if (cx2.block.type != Type.OrderedList)
      cx2.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));
    let newBase = getListIndent(line, line.pos + size);
    cx2.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
    cx2.addNode(Type.ListMark, cx2.lineStart + line.pos, cx2.lineStart + line.pos + size);
    line.moveBaseColumn(newBase);
    return null;
  },
  ATXHeading(cx2, line) {
    let size = isAtxHeading(line);
    if (size < 0)
      return false;
    let off2 = line.pos, from = cx2.lineStart + off2;
    let endOfSpace = skipSpaceBack(line.text, line.text.length, off2), after = endOfSpace;
    while (after > off2 && line.text.charCodeAt(after - 1) == line.next)
      after--;
    if (after == endOfSpace || after == off2 || !space(line.text.charCodeAt(after - 1)))
      after = line.text.length;
    let buf = cx2.buffer.write(Type.HeaderMark, 0, size).writeElements(cx2.parser.parseInline(line.text.slice(off2 + size + 1, after), from + size + 1), -from);
    if (after < line.text.length)
      buf.write(Type.HeaderMark, after - off2, endOfSpace - off2);
    let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off2);
    cx2.nextLine();
    cx2.addNode(node, from);
    return true;
  },
  HTMLBlock(cx2, line) {
    let type = isHTMLBlock(line, cx2, false);
    if (type < 0)
      return false;
    let from = cx2.lineStart + line.pos, end = HTMLBlockStyle[type][1];
    let marks2 = [], trailing = end != EmptyLine;
    while (!end.test(line.text) && cx2.nextLine()) {
      if (line.depth < cx2.stack.length) {
        trailing = false;
        break;
      }
      for (let m2 of line.markers)
        marks2.push(m2);
    }
    if (trailing)
      cx2.nextLine();
    let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;
    let to2 = cx2.prevLineEnd();
    cx2.addNode(cx2.buffer.writeElements(marks2, -from).finish(nodeType, to2 - from), from);
    return true;
  },
  SetextHeading: void 0
  // Specifies relative precedence for block-continue function
};
var LinkReferenceParser = class {
  constructor(leaf) {
    this.stage = 0;
    this.elts = [];
    this.pos = 0;
    this.start = leaf.start;
    this.advance(leaf.content);
  }
  nextLine(cx2, line, leaf) {
    if (this.stage == -1)
      return false;
    let content2 = leaf.content + "\n" + line.scrub();
    let finish = this.advance(content2);
    if (finish > -1 && finish < content2.length)
      return this.complete(cx2, leaf, finish);
    return false;
  }
  finish(cx2, leaf) {
    if ((this.stage == 2 || this.stage == 3) && skipSpace(leaf.content, this.pos) == leaf.content.length)
      return this.complete(cx2, leaf, leaf.content.length);
    return false;
  }
  complete(cx2, leaf, len) {
    cx2.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));
    return true;
  }
  nextStage(elt2) {
    if (elt2) {
      this.pos = elt2.to - this.start;
      this.elts.push(elt2);
      this.stage++;
      return true;
    }
    if (elt2 === false)
      this.stage = -1;
    return false;
  }
  advance(content2) {
    for (; ; ) {
      if (this.stage == -1) {
        return -1;
      } else if (this.stage == 0) {
        if (!this.nextStage(parseLinkLabel(content2, this.pos, this.start, true)))
          return -1;
        if (content2.charCodeAt(this.pos) != 58)
          return this.stage = -1;
        this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));
        this.pos++;
      } else if (this.stage == 1) {
        if (!this.nextStage(parseURL(content2, skipSpace(content2, this.pos), this.start)))
          return -1;
      } else if (this.stage == 2) {
        let skip = skipSpace(content2, this.pos), end = 0;
        if (skip > this.pos) {
          let title = parseLinkTitle(content2, skip, this.start);
          if (title) {
            let titleEnd = lineEnd(content2, title.to - this.start);
            if (titleEnd > 0) {
              this.nextStage(title);
              end = titleEnd;
            }
          }
        }
        if (!end)
          end = lineEnd(content2, this.pos);
        return end > 0 && end < content2.length ? end : -1;
      } else {
        return lineEnd(content2, this.pos);
      }
    }
  }
};
function lineEnd(text, pos) {
  for (; pos < text.length; pos++) {
    let next = text.charCodeAt(pos);
    if (next == 10)
      break;
    if (!space(next))
      return -1;
  }
  return pos;
}
var SetextHeadingParser = class {
  nextLine(cx2, line, leaf) {
    let underline2 = line.depth < cx2.stack.length ? -1 : isSetextUnderline(line);
    let next = line.next;
    if (underline2 < 0)
      return false;
    let underlineMark = elt(Type.HeaderMark, cx2.lineStart + line.pos, cx2.lineStart + underline2);
    cx2.nextLine();
    cx2.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx2.prevLineEnd(), [
      ...cx2.parser.parseInline(leaf.content, leaf.start),
      underlineMark
    ]));
    return true;
  }
  finish() {
    return false;
  }
};
var DefaultLeafBlocks = {
  LinkReference(_2, leaf) {
    return leaf.content.charCodeAt(0) == 91 ? new LinkReferenceParser(leaf) : null;
  },
  SetextHeading() {
    return new SetextHeadingParser();
  }
};
var DefaultEndLeaf = [
  (_2, line) => isAtxHeading(line) >= 0,
  (_2, line) => isFencedCode(line) >= 0,
  (_2, line) => isBlockquote(line) >= 0,
  (p2, line) => isBulletList(line, p2, true) >= 0,
  (p2, line) => isOrderedList(line, p2, true) >= 0,
  (p2, line) => isHorizontalRule(line, p2, true) >= 0,
  (p2, line) => isHTMLBlock(line, p2, true) >= 0
];
var scanLineResult = { text: "", end: 0 };
var BlockContext = class {
  /// @internal
  constructor(parser5, input, fragments, ranges) {
    this.parser = parser5;
    this.input = input;
    this.ranges = ranges;
    this.line = new Line2();
    this.atEnd = false;
    this.reusePlaceholders = /* @__PURE__ */ new Map();
    this.stoppedAt = null;
    this.rangeI = 0;
    this.to = ranges[ranges.length - 1].to;
    this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;
    this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);
    this.stack = [this.block];
    this.fragments = fragments.length ? new FragmentCursor2(fragments, input) : null;
    this.readLine();
  }
  get parsedPos() {
    return this.absoluteLineStart;
  }
  advance() {
    if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)
      return this.finish();
    let { line } = this;
    for (; ; ) {
      for (let markI = 0; ; ) {
        let next = line.depth < this.stack.length ? this.stack[this.stack.length - 1] : null;
        while (markI < line.markers.length && (!next || line.markers[markI].from < next.end)) {
          let mark = line.markers[markI++];
          this.addNode(mark.type, mark.from, mark.to);
        }
        if (!next)
          break;
        this.finishContext();
      }
      if (line.pos < line.text.length)
        break;
      if (!this.nextLine())
        return this.finish();
    }
    if (this.fragments && this.reuseFragment(line.basePos))
      return null;
    start: for (; ; ) {
      for (let type of this.parser.blockParsers)
        if (type) {
          let result = type(this, line);
          if (result != false) {
            if (result == true)
              return null;
            line.forward();
            continue start;
          }
        }
      break;
    }
    let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));
    for (let parse of this.parser.leafBlockParsers)
      if (parse) {
        let parser5 = parse(this, leaf);
        if (parser5)
          leaf.parsers.push(parser5);
      }
    lines: while (this.nextLine()) {
      if (line.pos == line.text.length)
        break;
      if (line.indent < line.baseIndent + 4) {
        for (let stop of this.parser.endLeafBlock)
          if (stop(this, line, leaf))
            break lines;
      }
      for (let parser5 of leaf.parsers)
        if (parser5.nextLine(this, line, leaf))
          return null;
      leaf.content += "\n" + line.scrub();
      for (let m2 of line.markers)
        leaf.marks.push(m2);
    }
    this.finishLeaf(leaf);
    return null;
  }
  stopAt(pos) {
    if (this.stoppedAt != null && this.stoppedAt < pos)
      throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = pos;
  }
  reuseFragment(start) {
    if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) || !this.fragments.matches(this.block.hash))
      return false;
    let taken = this.fragments.takeNodes(this);
    if (!taken)
      return false;
    this.absoluteLineStart += taken;
    this.lineStart = toRelative(this.absoluteLineStart, this.ranges);
    this.moveRangeI();
    if (this.absoluteLineStart < this.to) {
      this.lineStart++;
      this.absoluteLineStart++;
      this.readLine();
    } else {
      this.atEnd = true;
      this.readLine();
    }
    return true;
  }
  /// The number of parent blocks surrounding the current block.
  get depth() {
    return this.stack.length;
  }
  /// Get the type of the parent block at the given depth. When no
  /// depth is passed, return the type of the innermost parent.
  parentType(depth = this.depth - 1) {
    return this.parser.nodeSet.types[this.stack[depth].type];
  }
  /// Move to the next input line. This should only be called by
  /// (non-composite) [block parsers](#BlockParser.parse) that consume
  /// the line directly, or leaf block parser
  /// [`nextLine`](#LeafBlockParser.nextLine) methods when they
  /// consume the current line (and return true).
  nextLine() {
    this.lineStart += this.line.text.length;
    if (this.absoluteLineEnd >= this.to) {
      this.absoluteLineStart = this.absoluteLineEnd;
      this.atEnd = true;
      this.readLine();
      return false;
    } else {
      this.lineStart++;
      this.absoluteLineStart = this.absoluteLineEnd + 1;
      this.moveRangeI();
      this.readLine();
      return true;
    }
  }
  moveRangeI() {
    while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {
      this.rangeI++;
      this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);
    }
  }
  /// @internal
  scanLine(start) {
    let r2 = scanLineResult;
    r2.end = start;
    if (start >= this.to) {
      r2.text = "";
    } else {
      r2.text = this.lineChunkAt(start);
      r2.end += r2.text.length;
      if (this.ranges.length > 1) {
        let textOffset = this.absoluteLineStart, rangeI = this.rangeI;
        while (this.ranges[rangeI].to < r2.end) {
          rangeI++;
          let nextFrom = this.ranges[rangeI].from;
          let after = this.lineChunkAt(nextFrom);
          r2.end = nextFrom + after.length;
          r2.text = r2.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;
          textOffset = r2.end - r2.text.length;
        }
      }
    }
    return r2;
  }
  /// @internal
  readLine() {
    let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);
    this.absoluteLineEnd = end;
    line.reset(text);
    for (; line.depth < this.stack.length; line.depth++) {
      let cx2 = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx2.type];
      if (!handler)
        throw new Error("Unhandled block context " + Type[cx2.type]);
      if (!handler(cx2, this, line))
        break;
      line.forward();
    }
  }
  lineChunkAt(pos) {
    let next = this.input.chunk(pos), text;
    if (!this.input.lineChunks) {
      let eol = next.indexOf("\n");
      text = eol < 0 ? next : next.slice(0, eol);
    } else {
      text = next == "\n" ? "" : next;
    }
    return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;
  }
  /// The end position of the previous line.
  prevLineEnd() {
    return this.atEnd ? this.lineStart : this.lineStart - 1;
  }
  /// @internal
  startContext(type, start, value = 0) {
    this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);
    this.stack.push(this.block);
  }
  /// Start a composite block. Should only be called from [block
  /// parser functions](#BlockParser.parse) that return null.
  startComposite(type, start, value = 0) {
    this.startContext(this.parser.getNodeType(type), start, value);
  }
  /// @internal
  addNode(block, from, to2) {
    if (typeof block == "number")
      block = new Tree(this.parser.nodeSet.types[block], none4, none4, (to2 !== null && to2 !== void 0 ? to2 : this.prevLineEnd()) - from);
    this.block.addChild(block, from - this.block.from);
  }
  /// Add a block element. Can be called by [block
  /// parsers](#BlockParser.parse).
  addElement(elt2) {
    this.block.addChild(elt2.toTree(this.parser.nodeSet), elt2.from - this.block.from);
  }
  /// Add a block element from a [leaf parser](#LeafBlockParser). This
  /// makes sure any extra composite block markup (such as blockquote
  /// markers) inside the block are also added to the syntax tree.
  addLeafElement(leaf, elt2) {
    this.addNode(this.buffer.writeElements(injectMarks(elt2.children, leaf.marks), -elt2.from).finish(elt2.type, elt2.to - elt2.from), elt2.from);
  }
  /// @internal
  finishContext() {
    let cx2 = this.stack.pop();
    let top2 = this.stack[this.stack.length - 1];
    top2.addChild(cx2.toTree(this.parser.nodeSet), cx2.from - top2.from);
    this.block = top2;
  }
  finish() {
    while (this.stack.length > 1)
      this.finishContext();
    return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));
  }
  addGaps(tree) {
    return this.ranges.length > 1 ? injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.reusePlaceholders) : tree;
  }
  /// @internal
  finishLeaf(leaf) {
    for (let parser5 of leaf.parsers)
      if (parser5.finish(this, leaf))
        return;
    let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);
    this.addNode(this.buffer.writeElements(inline, -leaf.start).finish(Type.Paragraph, leaf.content.length), leaf.start);
  }
  elt(type, from, to2, children) {
    if (typeof type == "string")
      return elt(this.parser.getNodeType(type), from, to2, children);
    return new TreeElement(type, from);
  }
  /// @internal
  get buffer() {
    return new Buffer2(this.parser.nodeSet);
  }
};
function injectGaps(ranges, rangeI, tree, offset, dummies) {
  let rangeEnd2 = ranges[rangeI].to;
  let children = [], positions = [], start = tree.from + offset;
  function movePastNext(upto, inclusive) {
    while (inclusive ? upto >= rangeEnd2 : upto > rangeEnd2) {
      let size = ranges[rangeI + 1].from - rangeEnd2;
      offset += size;
      upto += size;
      rangeI++;
      rangeEnd2 = ranges[rangeI].to;
    }
  }
  for (let ch2 = tree.firstChild; ch2; ch2 = ch2.nextSibling) {
    movePastNext(ch2.from + offset, true);
    let from = ch2.from + offset, node, reuse = dummies.get(ch2.tree);
    if (reuse) {
      node = reuse;
    } else if (ch2.to + offset > rangeEnd2) {
      node = injectGaps(ranges, rangeI, ch2, offset, dummies);
      movePastNext(ch2.to + offset, false);
    } else {
      node = ch2.toTree();
    }
    children.push(node);
    positions.push(from - start);
  }
  movePastNext(tree.to + offset, false);
  return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : void 0);
}
var MarkdownParser = class _MarkdownParser extends Parser {
  /// @internal
  constructor(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers) {
    super();
    this.nodeSet = nodeSet;
    this.blockParsers = blockParsers;
    this.leafBlockParsers = leafBlockParsers;
    this.blockNames = blockNames;
    this.endLeafBlock = endLeafBlock;
    this.skipContextMarkup = skipContextMarkup;
    this.inlineParsers = inlineParsers;
    this.inlineNames = inlineNames;
    this.wrappers = wrappers;
    this.nodeTypes = /* @__PURE__ */ Object.create(null);
    for (let t3 of nodeSet.types)
      this.nodeTypes[t3.name] = t3.id;
  }
  createParse(input, fragments, ranges) {
    let parse = new BlockContext(this, input, fragments, ranges);
    for (let w2 of this.wrappers)
      parse = w2(parse, input, fragments, ranges);
    return parse;
  }
  /// Reconfigure the parser.
  configure(spec) {
    let config2 = resolveConfig(spec);
    if (!config2)
      return this;
    let { nodeSet, skipContextMarkup } = this;
    let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;
    if (nonEmpty(config2.defineNodes)) {
      skipContextMarkup = Object.assign({}, skipContextMarkup);
      let nodeTypes2 = nodeSet.types.slice(), styles;
      for (let s2 of config2.defineNodes) {
        let { name: name2, block, composite, style } = typeof s2 == "string" ? { name: s2 } : s2;
        if (nodeTypes2.some((t3) => t3.name == name2))
          continue;
        if (composite)
          skipContextMarkup[nodeTypes2.length] = (bl2, cx2, line) => composite(cx2, line, bl2.value);
        let id3 = nodeTypes2.length;
        let group = composite ? ["Block", "BlockContext"] : !block ? void 0 : id3 >= Type.ATXHeading1 && id3 <= Type.SetextHeading2 ? ["Block", "LeafBlock", "Heading"] : ["Block", "LeafBlock"];
        nodeTypes2.push(NodeType.define({
          id: id3,
          name: name2,
          props: group && [[NodeProp.group, group]]
        }));
        if (style) {
          if (!styles)
            styles = {};
          if (Array.isArray(style) || style instanceof Tag)
            styles[name2] = style;
          else
            Object.assign(styles, style);
        }
      }
      nodeSet = new NodeSet(nodeTypes2);
      if (styles)
        nodeSet = nodeSet.extend(styleTags(styles));
    }
    if (nonEmpty(config2.props))
      nodeSet = nodeSet.extend(...config2.props);
    if (nonEmpty(config2.remove)) {
      for (let rm3 of config2.remove) {
        let block = this.blockNames.indexOf(rm3), inline = this.inlineNames.indexOf(rm3);
        if (block > -1)
          blockParsers[block] = leafBlockParsers[block] = void 0;
        if (inline > -1)
          inlineParsers[inline] = void 0;
      }
    }
    if (nonEmpty(config2.parseBlock)) {
      for (let spec2 of config2.parseBlock) {
        let found = blockNames.indexOf(spec2.name);
        if (found > -1) {
          blockParsers[found] = spec2.parse;
          leafBlockParsers[found] = spec2.leaf;
        } else {
          let pos = spec2.before ? findName(blockNames, spec2.before) : spec2.after ? findName(blockNames, spec2.after) + 1 : blockNames.length - 1;
          blockParsers.splice(pos, 0, spec2.parse);
          leafBlockParsers.splice(pos, 0, spec2.leaf);
          blockNames.splice(pos, 0, spec2.name);
        }
        if (spec2.endLeaf)
          endLeafBlock.push(spec2.endLeaf);
      }
    }
    if (nonEmpty(config2.parseInline)) {
      for (let spec2 of config2.parseInline) {
        let found = inlineNames.indexOf(spec2.name);
        if (found > -1) {
          inlineParsers[found] = spec2.parse;
        } else {
          let pos = spec2.before ? findName(inlineNames, spec2.before) : spec2.after ? findName(inlineNames, spec2.after) + 1 : inlineNames.length - 1;
          inlineParsers.splice(pos, 0, spec2.parse);
          inlineNames.splice(pos, 0, spec2.name);
        }
      }
    }
    if (config2.wrap)
      wrappers = wrappers.concat(config2.wrap);
    return new _MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);
  }
  /// @internal
  getNodeType(name2) {
    let found = this.nodeTypes[name2];
    if (found == null)
      throw new RangeError(`Unknown node type '${name2}'`);
    return found;
  }
  /// Parse the given piece of inline text at the given offset,
  /// returning an array of [`Element`](#Element) objects representing
  /// the inline content.
  parseInline(text, offset) {
    let cx2 = new InlineContext(this, text, offset);
    outer: for (let pos = offset; pos < cx2.end; ) {
      let next = cx2.char(pos);
      for (let token of this.inlineParsers)
        if (token) {
          let result = token(cx2, next, pos);
          if (result >= 0) {
            pos = result;
            continue outer;
          }
        }
      pos++;
    }
    return cx2.resolveMarkers(0);
  }
};
function nonEmpty(a2) {
  return a2 != null && a2.length > 0;
}
function resolveConfig(spec) {
  if (!Array.isArray(spec))
    return spec;
  if (spec.length == 0)
    return null;
  let conf = resolveConfig(spec[0]);
  if (spec.length == 1)
    return conf;
  let rest = resolveConfig(spec.slice(1));
  if (!rest || !conf)
    return conf || rest;
  let conc2 = (a2, b2) => (a2 || none4).concat(b2 || none4);
  let wrapA = conf.wrap, wrapB = rest.wrap;
  return {
    props: conc2(conf.props, rest.props),
    defineNodes: conc2(conf.defineNodes, rest.defineNodes),
    parseBlock: conc2(conf.parseBlock, rest.parseBlock),
    parseInline: conc2(conf.parseInline, rest.parseInline),
    remove: conc2(conf.remove, rest.remove),
    wrap: !wrapA ? wrapB : !wrapB ? wrapA : (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)
  };
}
function findName(names, name2) {
  let found = names.indexOf(name2);
  if (found < 0)
    throw new RangeError(`Position specified relative to unknown parser ${name2}`);
  return found;
}
var nodeTypes = [NodeType.none];
for (let i2 = 1, name2; name2 = Type[i2]; i2++) {
  nodeTypes[i2] = NodeType.define({
    id: i2,
    name: name2,
    props: i2 >= Type.Escape ? [] : [[NodeProp.group, i2 in DefaultSkipMarkup ? ["Block", "BlockContext"] : ["Block", "LeafBlock"]]],
    top: name2 == "Document"
  });
}
var none4 = [];
var Buffer2 = class {
  constructor(nodeSet) {
    this.nodeSet = nodeSet;
    this.content = [];
    this.nodes = [];
  }
  write(type, from, to2, children = 0) {
    this.content.push(type, from, to2, 4 + children * 4);
    return this;
  }
  writeElements(elts, offset = 0) {
    for (let e25 of elts)
      e25.writeTo(this, offset);
    return this;
  }
  finish(type, length) {
    return Tree.build({
      buffer: this.content,
      nodeSet: this.nodeSet,
      reused: this.nodes,
      topID: type,
      length
    });
  }
};
var Element = class {
  /// @internal
  constructor(type, from, to2, children = none4) {
    this.type = type;
    this.from = from;
    this.to = to2;
    this.children = children;
  }
  /// @internal
  writeTo(buf, offset) {
    let startOff = buf.content.length;
    buf.writeElements(this.children, offset);
    buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);
  }
  /// @internal
  toTree(nodeSet) {
    return new Buffer2(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);
  }
};
var TreeElement = class {
  constructor(tree, from) {
    this.tree = tree;
    this.from = from;
  }
  get to() {
    return this.from + this.tree.length;
  }
  get type() {
    return this.tree.type.id;
  }
  get children() {
    return none4;
  }
  writeTo(buf, offset) {
    buf.nodes.push(this.tree);
    buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);
  }
  toTree() {
    return this.tree;
  }
};
function elt(type, from, to2, children) {
  return new Element(type, from, to2, children);
}
var EmphasisUnderscore = { resolve: "Emphasis", mark: "EmphasisMark" };
var EmphasisAsterisk = { resolve: "Emphasis", mark: "EmphasisMark" };
var LinkStart = {};
var ImageStart = {};
var InlineDelimiter = class {
  constructor(type, from, to2, side) {
    this.type = type;
    this.from = from;
    this.to = to2;
    this.side = side;
  }
};
var Escapable = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
var Punctuation = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~\xA1\u2010-\u2027]/;
try {
  Punctuation = new RegExp("[\\p{Pc}|\\p{Pd}|\\p{Pe}|\\p{Pf}|\\p{Pi}|\\p{Po}|\\p{Ps}]", "u");
} catch (_2) {
}
var DefaultInline = {
  Escape(cx2, next, start) {
    if (next != 92 || start == cx2.end - 1)
      return -1;
    let escaped = cx2.char(start + 1);
    for (let i2 = 0; i2 < Escapable.length; i2++)
      if (Escapable.charCodeAt(i2) == escaped)
        return cx2.append(elt(Type.Escape, start, start + 2));
    return -1;
  },
  Entity(cx2, next, start) {
    if (next != 38)
      return -1;
    let m2 = /^(?:#\d+|#x[a-f\d]+|\w+);/i.exec(cx2.slice(start + 1, start + 31));
    return m2 ? cx2.append(elt(Type.Entity, start, start + 1 + m2[0].length)) : -1;
  },
  InlineCode(cx2, next, start) {
    if (next != 96 || start && cx2.char(start - 1) == 96)
      return -1;
    let pos = start + 1;
    while (pos < cx2.end && cx2.char(pos) == 96)
      pos++;
    let size = pos - start, curSize = 0;
    for (; pos < cx2.end; pos++) {
      if (cx2.char(pos) == 96) {
        curSize++;
        if (curSize == size && cx2.char(pos + 1) != 96)
          return cx2.append(elt(Type.InlineCode, start, pos + 1, [
            elt(Type.CodeMark, start, start + size),
            elt(Type.CodeMark, pos + 1 - size, pos + 1)
          ]));
      } else {
        curSize = 0;
      }
    }
    return -1;
  },
  HTMLTag(cx2, next, start) {
    if (next != 60 || start == cx2.end - 1)
      return -1;
    let after = cx2.slice(start + 1, cx2.end);
    let url = /^(?:[a-z][-\w+.]+:[^\s>]+|[a-z\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?(?:\.[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?)*)>/i.exec(after);
    if (url) {
      return cx2.append(elt(Type.Autolink, start, start + 1 + url[0].length, [
        elt(Type.LinkMark, start, start + 1),
        // url[0] includes the closing bracket, so exclude it from this slice
        elt(Type.URL, start + 1, start + url[0].length),
        elt(Type.LinkMark, start + url[0].length, start + 1 + url[0].length)
      ]));
    }
    let comment2 = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);
    if (comment2)
      return cx2.append(elt(Type.Comment, start, start + 1 + comment2[0].length));
    let procInst = /^\?[^]*?\?>/.exec(after);
    if (procInst)
      return cx2.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));
    let m2 = /^(?:![A-Z][^]*?>|!\[CDATA\[[^]*?\]\]>|\/\s*[a-zA-Z][\w-]*\s*>|\s*[a-zA-Z][\w-]*(\s+[a-zA-Z:_][\w-.:]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*(\/\s*)?>)/.exec(after);
    if (!m2)
      return -1;
    return cx2.append(elt(Type.HTMLTag, start, start + 1 + m2[0].length));
  },
  Emphasis(cx2, next, start) {
    if (next != 95 && next != 42)
      return -1;
    let pos = start + 1;
    while (cx2.char(pos) == next)
      pos++;
    let before = cx2.slice(start - 1, start), after = cx2.slice(pos, pos + 1);
    let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);
    let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
    let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);
    let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);
    let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);
    let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);
    return cx2.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 : 0) | (canClose ? 2 : 0)));
  },
  HardBreak(cx2, next, start) {
    if (next == 92 && cx2.char(start + 1) == 10)
      return cx2.append(elt(Type.HardBreak, start, start + 2));
    if (next == 32) {
      let pos = start + 1;
      while (cx2.char(pos) == 32)
        pos++;
      if (cx2.char(pos) == 10 && pos >= start + 2)
        return cx2.append(elt(Type.HardBreak, start, pos + 1));
    }
    return -1;
  },
  Link(cx2, next, start) {
    return next == 91 ? cx2.append(new InlineDelimiter(
      LinkStart,
      start,
      start + 1,
      1
      /* Mark.Open */
    )) : -1;
  },
  Image(cx2, next, start) {
    return next == 33 && cx2.char(start + 1) == 91 ? cx2.append(new InlineDelimiter(
      ImageStart,
      start,
      start + 2,
      1
      /* Mark.Open */
    )) : -1;
  },
  LinkEnd(cx2, next, start) {
    if (next != 93)
      return -1;
    for (let i2 = cx2.parts.length - 1; i2 >= 0; i2--) {
      let part = cx2.parts[i2];
      if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {
        if (!part.side || cx2.skipSpace(part.to) == start && !/[(\[]/.test(cx2.slice(start + 1, start + 2))) {
          cx2.parts[i2] = null;
          return -1;
        }
        let content2 = cx2.takeContent(i2);
        let link = cx2.parts[i2] = finishLink(cx2, content2, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);
        if (part.type == LinkStart)
          for (let j2 = 0; j2 < i2; j2++) {
            let p2 = cx2.parts[j2];
            if (p2 instanceof InlineDelimiter && p2.type == LinkStart)
              p2.side = 0;
          }
        return link.to;
      }
    }
    return -1;
  }
};
function finishLink(cx2, content2, type, start, startPos) {
  let { text } = cx2, next = cx2.char(startPos), endPos = startPos;
  content2.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));
  content2.push(elt(Type.LinkMark, startPos - 1, startPos));
  if (next == 40) {
    let pos = cx2.skipSpace(startPos + 1);
    let dest = parseURL(text, pos - cx2.offset, cx2.offset), title;
    if (dest) {
      pos = cx2.skipSpace(dest.to);
      if (pos != dest.to) {
        title = parseLinkTitle(text, pos - cx2.offset, cx2.offset);
        if (title)
          pos = cx2.skipSpace(title.to);
      }
    }
    if (cx2.char(pos) == 41) {
      content2.push(elt(Type.LinkMark, startPos, startPos + 1));
      endPos = pos + 1;
      if (dest)
        content2.push(dest);
      if (title)
        content2.push(title);
      content2.push(elt(Type.LinkMark, pos, endPos));
    }
  } else if (next == 91) {
    let label = parseLinkLabel(text, startPos - cx2.offset, cx2.offset, false);
    if (label) {
      content2.push(label);
      endPos = label.to;
    }
  }
  return elt(type, start, endPos, content2);
}
function parseURL(text, start, offset) {
  let next = text.charCodeAt(start);
  if (next == 60) {
    for (let pos = start + 1; pos < text.length; pos++) {
      let ch2 = text.charCodeAt(pos);
      if (ch2 == 62)
        return elt(Type.URL, start + offset, pos + 1 + offset);
      if (ch2 == 60 || ch2 == 10)
        return false;
    }
    return null;
  } else {
    let depth = 0, pos = start;
    for (let escaped = false; pos < text.length; pos++) {
      let ch2 = text.charCodeAt(pos);
      if (space(ch2)) {
        break;
      } else if (escaped) {
        escaped = false;
      } else if (ch2 == 40) {
        depth++;
      } else if (ch2 == 41) {
        if (!depth)
          break;
        depth--;
      } else if (ch2 == 92) {
        escaped = true;
      }
    }
    return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;
  }
}
function parseLinkTitle(text, start, offset) {
  let next = text.charCodeAt(start);
  if (next != 39 && next != 34 && next != 40)
    return false;
  let end = next == 40 ? 41 : next;
  for (let pos = start + 1, escaped = false; pos < text.length; pos++) {
    let ch2 = text.charCodeAt(pos);
    if (escaped)
      escaped = false;
    else if (ch2 == end)
      return elt(Type.LinkTitle, start + offset, pos + 1 + offset);
    else if (ch2 == 92)
      escaped = true;
  }
  return null;
}
function parseLinkLabel(text, start, offset, requireNonWS) {
  for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {
    let ch2 = text.charCodeAt(pos);
    if (escaped)
      escaped = false;
    else if (ch2 == 93)
      return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);
    else {
      if (requireNonWS && !space(ch2))
        requireNonWS = false;
      if (ch2 == 91)
        return false;
      else if (ch2 == 92)
        escaped = true;
    }
  }
  return null;
}
var InlineContext = class {
  /// @internal
  constructor(parser5, text, offset) {
    this.parser = parser5;
    this.text = text;
    this.offset = offset;
    this.parts = [];
  }
  /// Get the character code at the given (document-relative)
  /// position.
  char(pos) {
    return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset);
  }
  /// The position of the end of this inline section.
  get end() {
    return this.offset + this.text.length;
  }
  /// Get a substring of this inline section. Again uses
  /// document-relative positions.
  slice(from, to2) {
    return this.text.slice(from - this.offset, to2 - this.offset);
  }
  /// @internal
  append(elt2) {
    this.parts.push(elt2);
    return elt2.to;
  }
  /// Add a [delimiter](#DelimiterType) at this given position. `open`
  /// and `close` indicate whether this delimiter is opening, closing,
  /// or both. Returns the end of the delimiter, for convenient
  /// returning from [parse functions](#InlineParser.parse).
  addDelimiter(type, from, to2, open, close) {
    return this.append(new InlineDelimiter(type, from, to2, (open ? 1 : 0) | (close ? 2 : 0)));
  }
  /// Returns true when there is an unmatched link or image opening
  /// token before the current position.
  get hasOpenLink() {
    for (let i2 = this.parts.length - 1; i2 >= 0; i2--) {
      let part = this.parts[i2];
      if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart))
        return true;
    }
    return false;
  }
  /// Add an inline element. Returns the end of the element.
  addElement(elt2) {
    return this.append(elt2);
  }
  /// Resolve markers between this.parts.length and from, wrapping matched markers in the
  /// appropriate node and updating the content of this.parts. @internal
  resolveMarkers(from) {
    for (let i2 = from; i2 < this.parts.length; i2++) {
      let close = this.parts[i2];
      if (!(close instanceof InlineDelimiter && close.type.resolve && close.side & 2))
        continue;
      let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;
      let closeSize = close.to - close.from;
      let open, j2 = i2 - 1;
      for (; j2 >= from; j2--) {
        let part = this.parts[j2];
        if (part instanceof InlineDelimiter && part.side & 1 && part.type == close.type && // Ignore emphasis delimiters where the character count doesn't match
        !(emp && (close.side & 1 || part.side & 2) && (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {
          open = part;
          break;
        }
      }
      if (!open)
        continue;
      let type = close.type.resolve, content2 = [];
      let start = open.from, end = close.to;
      if (emp) {
        let size = Math.min(2, open.to - open.from, closeSize);
        start = open.to - size;
        end = close.from + size;
        type = size == 1 ? "Emphasis" : "StrongEmphasis";
      }
      if (open.type.mark)
        content2.push(this.elt(open.type.mark, start, open.to));
      for (let k2 = j2 + 1; k2 < i2; k2++) {
        if (this.parts[k2] instanceof Element)
          content2.push(this.parts[k2]);
        this.parts[k2] = null;
      }
      if (close.type.mark)
        content2.push(this.elt(close.type.mark, close.from, end));
      let element = this.elt(type, start, end, content2);
      this.parts[j2] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;
      let keep = this.parts[i2] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;
      if (keep)
        this.parts.splice(i2, 0, element);
      else
        this.parts[i2] = element;
    }
    let result = [];
    for (let i2 = from; i2 < this.parts.length; i2++) {
      let part = this.parts[i2];
      if (part instanceof Element)
        result.push(part);
    }
    return result;
  }
  /// Find an opening delimiter of the given type. Returns `null` if
  /// no delimiter is found, or an index that can be passed to
  /// [`takeContent`](#InlineContext.takeContent) otherwise.
  findOpeningDelimiter(type) {
    for (let i2 = this.parts.length - 1; i2 >= 0; i2--) {
      let part = this.parts[i2];
      if (part instanceof InlineDelimiter && part.type == type)
        return i2;
    }
    return null;
  }
  /// Remove all inline elements and delimiters starting from the
  /// given index (which you should get from
  /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),
  /// resolve delimiters inside of them, and return them as an array
  /// of elements.
  takeContent(startIndex) {
    let content2 = this.resolveMarkers(startIndex);
    this.parts.length = startIndex;
    return content2;
  }
  /// Skip space after the given (document) position, returning either
  /// the position of the next non-space character or the end of the
  /// section.
  skipSpace(from) {
    return skipSpace(this.text, from - this.offset) + this.offset;
  }
  elt(type, from, to2, children) {
    if (typeof type == "string")
      return elt(this.parser.getNodeType(type), from, to2, children);
    return new TreeElement(type, from);
  }
};
function injectMarks(elements, marks2) {
  if (!marks2.length)
    return elements;
  if (!elements.length)
    return marks2;
  let elts = elements.slice(), eI2 = 0;
  for (let mark of marks2) {
    while (eI2 < elts.length && elts[eI2].to < mark.to)
      eI2++;
    if (eI2 < elts.length && elts[eI2].from < mark.from) {
      let e25 = elts[eI2];
      if (e25 instanceof Element)
        elts[eI2] = new Element(e25.type, e25.from, e25.to, injectMarks(e25.children, [mark]));
    } else {
      elts.splice(eI2++, 0, mark);
    }
  }
  return elts;
}
var NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];
var FragmentCursor2 = class {
  constructor(fragments, input) {
    this.fragments = fragments;
    this.input = input;
    this.i = 0;
    this.fragment = null;
    this.fragmentEnd = -1;
    this.cursor = null;
    if (fragments.length)
      this.fragment = fragments[this.i++];
  }
  nextFragment() {
    this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;
    this.cursor = null;
    this.fragmentEnd = -1;
  }
  moveTo(pos, lineStart) {
    while (this.fragment && this.fragment.to <= pos)
      this.nextFragment();
    if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))
      return false;
    if (this.fragmentEnd < 0) {
      let end = this.fragment.to;
      while (end > 0 && this.input.read(end - 1, end) != "\n")
        end--;
      this.fragmentEnd = end ? end - 1 : 0;
    }
    let c2 = this.cursor;
    if (!c2) {
      c2 = this.cursor = this.fragment.tree.cursor();
      c2.firstChild();
    }
    let rPos = pos + this.fragment.offset;
    while (c2.to <= rPos)
      if (!c2.parent())
        return false;
    for (; ; ) {
      if (c2.from >= rPos)
        return this.fragment.from <= lineStart;
      if (!c2.childAfter(rPos))
        return false;
    }
  }
  matches(hash2) {
    let tree = this.cursor.tree;
    return tree && tree.prop(NodeProp.contextHash) == hash2;
  }
  takeNodes(cx2) {
    let cur2 = this.cursor, off2 = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);
    let start = cx2.absoluteLineStart, end = start, blockI = cx2.block.children.length;
    let prevEnd = end, prevI = blockI;
    for (; ; ) {
      if (cur2.to - off2 > fragEnd) {
        if (cur2.type.isAnonymous && cur2.firstChild())
          continue;
        break;
      }
      let pos = toRelative(cur2.from - off2, cx2.ranges);
      if (cur2.to - off2 <= cx2.ranges[cx2.rangeI].to) {
        cx2.addNode(cur2.tree, pos);
      } else {
        let dummy = new Tree(cx2.parser.nodeSet.types[Type.Paragraph], [], [], 0, cx2.block.hashProp);
        cx2.reusePlaceholders.set(dummy, cur2.tree);
        cx2.addNode(dummy, pos);
      }
      if (cur2.type.is("Block")) {
        if (NotLast.indexOf(cur2.type.id) < 0) {
          end = cur2.to - off2;
          blockI = cx2.block.children.length;
        } else {
          end = prevEnd;
          blockI = prevI;
          prevEnd = cur2.to - off2;
          prevI = cx2.block.children.length;
        }
      }
      if (!cur2.nextSibling())
        break;
    }
    while (cx2.block.children.length > blockI) {
      cx2.block.children.pop();
      cx2.block.positions.pop();
    }
    return end - start;
  }
};
function toRelative(abs, ranges) {
  let pos = abs;
  for (let i2 = 1; i2 < ranges.length; i2++) {
    let gapFrom = ranges[i2 - 1].to, gapTo = ranges[i2].from;
    if (gapFrom < abs)
      pos -= gapTo - gapFrom;
  }
  return pos;
}
var markdownHighlighting = styleTags({
  "Blockquote/...": tags.quote,
  HorizontalRule: tags.contentSeparator,
  "ATXHeading1/... SetextHeading1/...": tags.heading1,
  "ATXHeading2/... SetextHeading2/...": tags.heading2,
  "ATXHeading3/...": tags.heading3,
  "ATXHeading4/...": tags.heading4,
  "ATXHeading5/...": tags.heading5,
  "ATXHeading6/...": tags.heading6,
  "Comment CommentBlock": tags.comment,
  Escape: tags.escape,
  Entity: tags.character,
  "Emphasis/...": tags.emphasis,
  "StrongEmphasis/...": tags.strong,
  "Link/... Image/...": tags.link,
  "OrderedList/... BulletList/...": tags.list,
  "BlockQuote/...": tags.quote,
  "InlineCode CodeText": tags.monospace,
  "URL Autolink": tags.url,
  "HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark": tags.processingInstruction,
  "CodeInfo LinkLabel": tags.labelName,
  LinkTitle: tags.string,
  Paragraph: tags.content
});
var parser = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map((n2) => DefaultBlockParsers[n2]), Object.keys(DefaultBlockParsers).map((n2) => DefaultLeafBlocks[n2]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map((n2) => DefaultInline[n2]), Object.keys(DefaultInline), []);
function leftOverSpace(node, from, to2) {
  let ranges = [];
  for (let n2 = node.firstChild, pos = from; ; n2 = n2.nextSibling) {
    let nextPos = n2 ? n2.from : to2;
    if (nextPos > pos)
      ranges.push({ from: pos, to: nextPos });
    if (!n2)
      break;
    pos = n2.to;
  }
  return ranges;
}
function parseCode(config2) {
  let { codeParser, htmlParser } = config2;
  let wrap = parseMixed((node, input) => {
    let id3 = node.type.id;
    if (codeParser && (id3 == Type.CodeBlock || id3 == Type.FencedCode)) {
      let info = "";
      if (id3 == Type.FencedCode) {
        let infoNode = node.node.getChild(Type.CodeInfo);
        if (infoNode)
          info = input.read(infoNode.from, infoNode.to);
      }
      let parser5 = codeParser(info);
      if (parser5)
        return { parser: parser5, overlay: (node2) => node2.type.id == Type.CodeText };
    } else if (htmlParser && (id3 == Type.HTMLBlock || id3 == Type.HTMLTag)) {
      return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };
    }
    return null;
  });
  return { wrap };
}
var StrikethroughDelim = { resolve: "Strikethrough", mark: "StrikethroughMark" };
var Strikethrough = {
  defineNodes: [{
    name: "Strikethrough",
    style: { "Strikethrough/...": tags.strikethrough }
  }, {
    name: "StrikethroughMark",
    style: tags.processingInstruction
  }],
  parseInline: [{
    name: "Strikethrough",
    parse(cx2, next, pos) {
      if (next != 126 || cx2.char(pos + 1) != 126 || cx2.char(pos + 2) == 126)
        return -1;
      let before = cx2.slice(pos - 1, pos), after = cx2.slice(pos + 2, pos + 3);
      let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
      let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);
      return cx2.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));
    },
    after: "Emphasis"
  }]
};
function parseRow(cx2, line, startI = 0, elts, offset = 0) {
  let count2 = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;
  let parseCell = () => {
    elts.push(cx2.elt("TableCell", offset + cellStart, offset + cellEnd, cx2.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));
  };
  for (let i2 = startI; i2 < line.length; i2++) {
    let next = line.charCodeAt(i2);
    if (next == 124 && !esc) {
      if (!first || cellStart > -1)
        count2++;
      first = false;
      if (elts) {
        if (cellStart > -1)
          parseCell();
        elts.push(cx2.elt("TableDelimiter", i2 + offset, i2 + offset + 1));
      }
      cellStart = cellEnd = -1;
    } else if (esc || next != 32 && next != 9) {
      if (cellStart < 0)
        cellStart = i2;
      cellEnd = i2 + 1;
    }
    esc = !esc && next == 92;
  }
  if (cellStart > -1) {
    count2++;
    if (elts)
      parseCell();
  }
  return count2;
}
function hasPipe(str, start) {
  for (let i2 = start; i2 < str.length; i2++) {
    let next = str.charCodeAt(i2);
    if (next == 124)
      return true;
    if (next == 92)
      i2++;
  }
  return false;
}
var delimiterLine = /^\|?(\s*:?-+:?\s*\|)+(\s*:?-+:?\s*)?$/;
var TableParser = class {
  constructor() {
    this.rows = null;
  }
  nextLine(cx2, line, leaf) {
    if (this.rows == null) {
      this.rows = false;
      let lineText;
      if ((line.next == 45 || line.next == 58 || line.next == 124) && delimiterLine.test(lineText = line.text.slice(line.pos))) {
        let firstRow = [], firstCount = parseRow(cx2, leaf.content, 0, firstRow, leaf.start);
        if (firstCount == parseRow(cx2, lineText, line.pos))
          this.rows = [
            cx2.elt("TableHeader", leaf.start, leaf.start + leaf.content.length, firstRow),
            cx2.elt("TableDelimiter", cx2.lineStart + line.pos, cx2.lineStart + line.text.length)
          ];
      }
    } else if (this.rows) {
      let content2 = [];
      parseRow(cx2, line.text, line.pos, content2, cx2.lineStart);
      this.rows.push(cx2.elt("TableRow", cx2.lineStart + line.pos, cx2.lineStart + line.text.length, content2));
    }
    return false;
  }
  finish(cx2, leaf) {
    if (!this.rows)
      return false;
    cx2.addLeafElement(leaf, cx2.elt("Table", leaf.start, leaf.start + leaf.content.length, this.rows));
    return true;
  }
};
var Table = {
  defineNodes: [
    { name: "Table", block: true },
    { name: "TableHeader", style: { "TableHeader/...": tags.heading } },
    "TableRow",
    { name: "TableCell", style: tags.content },
    { name: "TableDelimiter", style: tags.processingInstruction }
  ],
  parseBlock: [{
    name: "Table",
    leaf(_2, leaf) {
      return hasPipe(leaf.content, 0) ? new TableParser() : null;
    },
    endLeaf(cx2, line, leaf) {
      if (leaf.parsers.some((p2) => p2 instanceof TableParser) || !hasPipe(line.text, line.basePos))
        return false;
      let next = cx2.scanLine(cx2.absoluteLineEnd + 1).text;
      return delimiterLine.test(next) && parseRow(cx2, line.text, line.basePos) == parseRow(cx2, next, line.basePos);
    },
    before: "SetextHeading"
  }]
};
var TaskParser = class {
  nextLine() {
    return false;
  }
  finish(cx2, leaf) {
    cx2.addLeafElement(leaf, cx2.elt("Task", leaf.start, leaf.start + leaf.content.length, [
      cx2.elt("TaskMarker", leaf.start, leaf.start + 3),
      ...cx2.parser.parseInline(leaf.content.slice(3), leaf.start + 3)
    ]));
    return true;
  }
};
var TaskList = {
  defineNodes: [
    { name: "Task", block: true, style: tags.list },
    { name: "TaskMarker", style: tags.atom }
  ],
  parseBlock: [{
    name: "TaskList",
    leaf(cx2, leaf) {
      return /^\[[ xX]\][ \t]/.test(leaf.content) && cx2.parentType().name == "ListItem" ? new TaskParser() : null;
    },
    after: "SetextHeading"
  }]
};
var autolinkRE = /(www\.)|(https?:\/\/)|([\w.+-]+@)|(mailto:|xmpp:)/gy;
var urlRE = /[\w-]+(\.[\w-]+)+(\/[^\s<]*)?/gy;
var lastTwoDomainWords = /[\w-]+\.[\w-]+($|\/)/;
var emailRE = /[\w.+-]+@[\w-]+(\.[\w.-]+)+/gy;
var xmppResourceRE = /\/[a-zA-Z\d@.]+/gy;
function count(str, from, to2, ch2) {
  let result = 0;
  for (let i2 = from; i2 < to2; i2++)
    if (str[i2] == ch2)
      result++;
  return result;
}
function autolinkURLEnd(text, from) {
  urlRE.lastIndex = from;
  let m2 = urlRE.exec(text);
  if (!m2 || lastTwoDomainWords.exec(m2[0])[0].indexOf("_") > -1)
    return -1;
  let end = from + m2[0].length;
  for (; ; ) {
    let last = text[end - 1], m3;
    if (/[?!.,:*_~]/.test(last) || last == ")" && count(text, from, end, ")") > count(text, from, end, "("))
      end--;
    else if (last == ";" && (m3 = /&(?:#\d+|#x[a-f\d]+|\w+);$/.exec(text.slice(from, end))))
      end = from + m3.index;
    else
      break;
  }
  return end;
}
function autolinkEmailEnd(text, from) {
  emailRE.lastIndex = from;
  let m2 = emailRE.exec(text);
  if (!m2)
    return -1;
  let last = m2[0][m2[0].length - 1];
  return last == "_" || last == "-" ? -1 : from + m2[0].length - (last == "." ? 1 : 0);
}
var Autolink = {
  parseInline: [{
    name: "Autolink",
    parse(cx2, next, absPos) {
      let pos = absPos - cx2.offset;
      autolinkRE.lastIndex = pos;
      let m2 = autolinkRE.exec(cx2.text), end = -1;
      if (!m2)
        return -1;
      if (m2[1] || m2[2]) {
        end = autolinkURLEnd(cx2.text, pos + m2[0].length);
        if (end > -1 && cx2.hasOpenLink) {
          let noBracket = /([^\[\]]|\[[^\]]*\])*/.exec(cx2.text.slice(pos, end));
          end = pos + noBracket[0].length;
        }
      } else if (m2[3]) {
        end = autolinkEmailEnd(cx2.text, pos);
      } else {
        end = autolinkEmailEnd(cx2.text, pos + m2[0].length);
        if (end > -1 && m2[0] == "xmpp:") {
          xmppResourceRE.lastIndex = end;
          m2 = xmppResourceRE.exec(cx2.text);
          if (m2)
            end = m2.index + m2[0].length;
        }
      }
      if (end < 0)
        return -1;
      cx2.addElement(cx2.elt("URL", absPos, end + cx2.offset));
      return end + cx2.offset;
    }
  }]
};
var GFM = [Table, TaskList, Strikethrough, Autolink];
function parseSubSuper(ch2, node, mark) {
  return (cx2, next, pos) => {
    if (next != ch2 || cx2.char(pos + 1) == ch2)
      return -1;
    let elts = [cx2.elt(mark, pos, pos + 1)];
    for (let i2 = pos + 1; i2 < cx2.end; i2++) {
      let next2 = cx2.char(i2);
      if (next2 == ch2)
        return cx2.addElement(cx2.elt(node, pos, i2 + 1, elts.concat(cx2.elt(mark, i2, i2 + 1))));
      if (next2 == 92)
        elts.push(cx2.elt("Escape", i2, i2++ + 2));
      if (space(next2))
        break;
    }
    return -1;
  };
}
var Superscript = {
  defineNodes: [
    { name: "Superscript", style: tags.special(tags.content) },
    { name: "SuperscriptMark", style: tags.processingInstruction }
  ],
  parseInline: [{
    name: "Superscript",
    parse: parseSubSuper(94, "Superscript", "SuperscriptMark")
  }]
};
var Subscript = {
  defineNodes: [
    { name: "Subscript", style: tags.special(tags.content) },
    { name: "SubscriptMark", style: tags.processingInstruction }
  ],
  parseInline: [{
    name: "Subscript",
    parse: parseSubSuper(126, "Subscript", "SubscriptMark")
  }]
};
var Emoji = {
  defineNodes: [{ name: "Emoji", style: tags.character }],
  parseInline: [{
    name: "Emoji",
    parse(cx2, next, pos) {
      let match;
      if (next != 58 || !(match = /^[a-zA-Z_0-9]+:/.exec(cx2.slice(pos + 1, cx2.end))))
        return -1;
      return cx2.addElement(cx2.elt("Emoji", pos, pos + 1 + match[0].length));
    }
  }]
};

// node_modules/@lezer/lr/dist/index.js
var Stack = class _Stack {
  /**
  @internal
  */
  constructor(p2, stack, state, reducePos, pos, score2, buffer, bufferBase, curContext, lookAhead = 0, parent) {
    this.p = p2;
    this.stack = stack;
    this.state = state;
    this.reducePos = reducePos;
    this.pos = pos;
    this.score = score2;
    this.buffer = buffer;
    this.bufferBase = bufferBase;
    this.curContext = curContext;
    this.lookAhead = lookAhead;
    this.parent = parent;
  }
  /**
  @internal
  */
  toString() {
    return `[${this.stack.filter((_2, i2) => i2 % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
  }
  // Start an empty stack
  /**
  @internal
  */
  static start(p2, state, pos = 0) {
    let cx2 = p2.parser.context;
    return new _Stack(p2, [], state, pos, pos, 0, [], 0, cx2 ? new StackContext(cx2, cx2.start) : null, 0, null);
  }
  /**
  The stack's current [context](#lr.ContextTracker) value, if
  any. Its type will depend on the context tracker's type
  parameter, or it will be `null` if there is no context
  tracker.
  */
  get context() {
    return this.curContext ? this.curContext.context : null;
  }
  // Push a state onto the stack, tracking its start position as well
  // as the buffer base at that point.
  /**
  @internal
  */
  pushState(state, start) {
    this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
    this.state = state;
  }
  // Apply a reduce action
  /**
  @internal
  */
  reduce(action) {
    var _a3;
    let depth = action >> 19, type = action & 65535;
    let { parser: parser5 } = this.p;
    let lookaheadRecord = this.reducePos < this.pos - 25;
    if (lookaheadRecord)
      this.setLookAhead(this.pos);
    let dPrec = parser5.dynamicPrecedence(type);
    if (dPrec)
      this.score += dPrec;
    if (depth == 0) {
      this.pushState(parser5.getGoto(this.state, type, true), this.reducePos);
      if (type < parser5.minRepeatTerm)
        this.storeNode(type, this.reducePos, this.reducePos, lookaheadRecord ? 8 : 4, true);
      this.reduceContext(type, this.reducePos);
      return;
    }
    let base2 = this.stack.length - (depth - 1) * 3 - (action & 262144 ? 6 : 0);
    let start = base2 ? this.stack[base2 - 2] : this.p.ranges[0].from, size = this.reducePos - start;
    if (size >= 2e3 && !((_a3 = this.p.parser.nodeSet.types[type]) === null || _a3 === void 0 ? void 0 : _a3.isAnonymous)) {
      if (start == this.p.lastBigReductionStart) {
        this.p.bigReductionCount++;
        this.p.lastBigReductionSize = size;
      } else if (this.p.lastBigReductionSize < size) {
        this.p.bigReductionCount = 1;
        this.p.lastBigReductionStart = start;
        this.p.lastBigReductionSize = size;
      }
    }
    let bufferBase = base2 ? this.stack[base2 - 1] : 0, count2 = this.bufferBase + this.buffer.length - bufferBase;
    if (type < parser5.minRepeatTerm || action & 131072) {
      let pos = parser5.stateFlag(
        this.state,
        1
        /* StateFlag.Skipped */
      ) ? this.pos : this.reducePos;
      this.storeNode(type, start, pos, count2 + 4, true);
    }
    if (action & 262144) {
      this.state = this.stack[base2];
    } else {
      let baseStateID = this.stack[base2 - 3];
      this.state = parser5.getGoto(baseStateID, type, true);
    }
    while (this.stack.length > base2)
      this.stack.pop();
    this.reduceContext(type, start);
  }
  // Shift a value into the buffer
  /**
  @internal
  */
  storeNode(term, start, end, size = 4, mustSink = false) {
    if (term == 0 && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
      let cur2 = this, top2 = this.buffer.length;
      if (top2 == 0 && cur2.parent) {
        top2 = cur2.bufferBase - cur2.parent.bufferBase;
        cur2 = cur2.parent;
      }
      if (top2 > 0 && cur2.buffer[top2 - 4] == 0 && cur2.buffer[top2 - 1] > -1) {
        if (start == end)
          return;
        if (cur2.buffer[top2 - 2] >= start) {
          cur2.buffer[top2 - 2] = end;
          return;
        }
      }
    }
    if (!mustSink || this.pos == end) {
      this.buffer.push(term, start, end, size);
    } else {
      let index = this.buffer.length;
      if (index > 0 && this.buffer[index - 4] != 0) {
        let mustMove = false;
        for (let scan = index; scan > 0 && this.buffer[scan - 2] > end; scan -= 4) {
          if (this.buffer[scan - 1] >= 0) {
            mustMove = true;
            break;
          }
        }
        if (mustMove)
          while (index > 0 && this.buffer[index - 2] > end) {
            this.buffer[index] = this.buffer[index - 4];
            this.buffer[index + 1] = this.buffer[index - 3];
            this.buffer[index + 2] = this.buffer[index - 2];
            this.buffer[index + 3] = this.buffer[index - 1];
            index -= 4;
            if (size > 4)
              size -= 4;
          }
      }
      this.buffer[index] = term;
      this.buffer[index + 1] = start;
      this.buffer[index + 2] = end;
      this.buffer[index + 3] = size;
    }
  }
  // Apply a shift action
  /**
  @internal
  */
  shift(action, type, start, end) {
    if (action & 131072) {
      this.pushState(action & 65535, this.pos);
    } else if ((action & 262144) == 0) {
      let nextState = action, { parser: parser5 } = this.p;
      if (end > this.pos || type <= parser5.maxNode) {
        this.pos = end;
        if (!parser5.stateFlag(
          nextState,
          1
          /* StateFlag.Skipped */
        ))
          this.reducePos = end;
      }
      this.pushState(nextState, start);
      this.shiftContext(type, start);
      if (type <= parser5.maxNode)
        this.buffer.push(type, start, end, 4);
    } else {
      this.pos = end;
      this.shiftContext(type, start);
      if (type <= this.p.parser.maxNode)
        this.buffer.push(type, start, end, 4);
    }
  }
  // Apply an action
  /**
  @internal
  */
  apply(action, next, nextStart, nextEnd) {
    if (action & 65536)
      this.reduce(action);
    else
      this.shift(action, next, nextStart, nextEnd);
  }
  // Add a prebuilt (reused) node into the buffer.
  /**
  @internal
  */
  useNode(value, next) {
    let index = this.p.reused.length - 1;
    if (index < 0 || this.p.reused[index] != value) {
      this.p.reused.push(value);
      index++;
    }
    let start = this.pos;
    this.reducePos = this.pos = start + value.length;
    this.pushState(next, start);
    this.buffer.push(
      index,
      start,
      this.reducePos,
      -1
      /* size == -1 means this is a reused value */
    );
    if (this.curContext)
      this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
  }
  // Split the stack. Due to the buffer sharing and the fact
  // that `this.stack` tends to stay quite shallow, this isn't very
  // expensive.
  /**
  @internal
  */
  split() {
    let parent = this;
    let off2 = parent.buffer.length;
    while (off2 > 0 && parent.buffer[off2 - 2] > parent.reducePos)
      off2 -= 4;
    let buffer = parent.buffer.slice(off2), base2 = parent.bufferBase + off2;
    while (parent && base2 == parent.bufferBase)
      parent = parent.parent;
    return new _Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base2, this.curContext, this.lookAhead, parent);
  }
  // Try to recover from an error by 'deleting' (ignoring) one token.
  /**
  @internal
  */
  recoverByDelete(next, nextEnd) {
    let isNode = next <= this.p.parser.maxNode;
    if (isNode)
      this.storeNode(next, this.pos, nextEnd, 4);
    this.storeNode(0, this.pos, nextEnd, isNode ? 8 : 4);
    this.pos = this.reducePos = nextEnd;
    this.score -= 190;
  }
  /**
  Check if the given term would be able to be shifted (optionally
  after some reductions) on this stack. This can be useful for
  external tokenizers that want to make sure they only provide a
  given token when it applies.
  */
  canShift(term) {
    for (let sim = new SimulatedStack(this); ; ) {
      let action = this.p.parser.stateSlot(
        sim.state,
        4
        /* ParseState.DefaultReduce */
      ) || this.p.parser.hasAction(sim.state, term);
      if (action == 0)
        return false;
      if ((action & 65536) == 0)
        return true;
      sim.reduce(action);
    }
  }
  // Apply up to Recover.MaxNext recovery actions that conceptually
  // inserts some missing token or rule.
  /**
  @internal
  */
  recoverByInsert(next) {
    if (this.stack.length >= 300)
      return [];
    let nextStates = this.p.parser.nextStates(this.state);
    if (nextStates.length > 4 << 1 || this.stack.length >= 120) {
      let best = [];
      for (let i2 = 0, s2; i2 < nextStates.length; i2 += 2) {
        if ((s2 = nextStates[i2 + 1]) != this.state && this.p.parser.hasAction(s2, next))
          best.push(nextStates[i2], s2);
      }
      if (this.stack.length < 120)
        for (let i2 = 0; best.length < 4 << 1 && i2 < nextStates.length; i2 += 2) {
          let s2 = nextStates[i2 + 1];
          if (!best.some((v2, i3) => i3 & 1 && v2 == s2))
            best.push(nextStates[i2], s2);
        }
      nextStates = best;
    }
    let result = [];
    for (let i2 = 0; i2 < nextStates.length && result.length < 4; i2 += 2) {
      let s2 = nextStates[i2 + 1];
      if (s2 == this.state)
        continue;
      let stack = this.split();
      stack.pushState(s2, this.pos);
      stack.storeNode(0, stack.pos, stack.pos, 4, true);
      stack.shiftContext(nextStates[i2], this.pos);
      stack.reducePos = this.pos;
      stack.score -= 200;
      result.push(stack);
    }
    return result;
  }
  // Force a reduce, if possible. Return false if that can't
  // be done.
  /**
  @internal
  */
  forceReduce() {
    let { parser: parser5 } = this.p;
    let reduce = parser5.stateSlot(
      this.state,
      5
      /* ParseState.ForcedReduce */
    );
    if ((reduce & 65536) == 0)
      return false;
    if (!parser5.validAction(this.state, reduce)) {
      let depth = reduce >> 19, term = reduce & 65535;
      let target = this.stack.length - depth * 3;
      if (target < 0 || parser5.getGoto(this.stack[target], term, false) < 0) {
        let backup = this.findForcedReduction();
        if (backup == null)
          return false;
        reduce = backup;
      }
      this.storeNode(0, this.pos, this.pos, 4, true);
      this.score -= 100;
    }
    this.reducePos = this.pos;
    this.reduce(reduce);
    return true;
  }
  /**
  Try to scan through the automaton to find some kind of reduction
  that can be applied. Used when the regular ForcedReduce field
  isn't a valid action. @internal
  */
  findForcedReduction() {
    let { parser: parser5 } = this.p, seen = [];
    let explore = (state, depth) => {
      if (seen.includes(state))
        return;
      seen.push(state);
      return parser5.allActions(state, (action) => {
        if (action & (262144 | 131072)) ;
        else if (action & 65536) {
          let rDepth = (action >> 19) - depth;
          if (rDepth > 1) {
            let term = action & 65535, target = this.stack.length - rDepth * 3;
            if (target >= 0 && parser5.getGoto(this.stack[target], term, false) >= 0)
              return rDepth << 19 | 65536 | term;
          }
        } else {
          let found = explore(action, depth + 1);
          if (found != null)
            return found;
        }
      });
    };
    return explore(this.state, 0);
  }
  /**
  @internal
  */
  forceAll() {
    while (!this.p.parser.stateFlag(
      this.state,
      2
      /* StateFlag.Accepting */
    )) {
      if (!this.forceReduce()) {
        this.storeNode(0, this.pos, this.pos, 4, true);
        break;
      }
    }
    return this;
  }
  /**
  Check whether this state has no further actions (assumed to be a direct descendant of the
  top state, since any other states must be able to continue
  somehow). @internal
  */
  get deadEnd() {
    if (this.stack.length != 3)
      return false;
    let { parser: parser5 } = this.p;
    return parser5.data[parser5.stateSlot(
      this.state,
      1
      /* ParseState.Actions */
    )] == 65535 && !parser5.stateSlot(
      this.state,
      4
      /* ParseState.DefaultReduce */
    );
  }
  /**
  Restart the stack (put it back in its start state). Only safe
  when this.stack.length == 3 (state is directly below the top
  state). @internal
  */
  restart() {
    this.storeNode(0, this.pos, this.pos, 4, true);
    this.state = this.stack[0];
    this.stack.length = 0;
  }
  /**
  @internal
  */
  sameState(other) {
    if (this.state != other.state || this.stack.length != other.stack.length)
      return false;
    for (let i2 = 0; i2 < this.stack.length; i2 += 3)
      if (this.stack[i2] != other.stack[i2])
        return false;
    return true;
  }
  /**
  Get the parser used by this stack.
  */
  get parser() {
    return this.p.parser;
  }
  /**
  Test whether a given dialect (by numeric ID, as exported from
  the terms file) is enabled.
  */
  dialectEnabled(dialectID) {
    return this.p.parser.dialect.flags[dialectID];
  }
  shiftContext(term, start) {
    if (this.curContext)
      this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
  }
  reduceContext(term, start) {
    if (this.curContext)
      this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
  }
  /**
  @internal
  */
  emitContext() {
    let last = this.buffer.length - 1;
    if (last < 0 || this.buffer[last] != -3)
      this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
  }
  /**
  @internal
  */
  emitLookAhead() {
    let last = this.buffer.length - 1;
    if (last < 0 || this.buffer[last] != -4)
      this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
  }
  updateContext(context) {
    if (context != this.curContext.context) {
      let newCx = new StackContext(this.curContext.tracker, context);
      if (newCx.hash != this.curContext.hash)
        this.emitContext();
      this.curContext = newCx;
    }
  }
  /**
  @internal
  */
  setLookAhead(lookAhead) {
    if (lookAhead > this.lookAhead) {
      this.emitLookAhead();
      this.lookAhead = lookAhead;
    }
  }
  /**
  @internal
  */
  close() {
    if (this.curContext && this.curContext.tracker.strict)
      this.emitContext();
    if (this.lookAhead > 0)
      this.emitLookAhead();
  }
};
var StackContext = class {
  constructor(tracker, context) {
    this.tracker = tracker;
    this.context = context;
    this.hash = tracker.strict ? tracker.hash(context) : 0;
  }
};
var SimulatedStack = class {
  constructor(start) {
    this.start = start;
    this.state = start.state;
    this.stack = start.stack;
    this.base = this.stack.length;
  }
  reduce(action) {
    let term = action & 65535, depth = action >> 19;
    if (depth == 0) {
      if (this.stack == this.start.stack)
        this.stack = this.stack.slice();
      this.stack.push(this.state, 0, 0);
      this.base += 3;
    } else {
      this.base -= (depth - 1) * 3;
    }
    let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
    this.state = goto;
  }
};
var StackBufferCursor = class _StackBufferCursor {
  constructor(stack, pos, index) {
    this.stack = stack;
    this.pos = pos;
    this.index = index;
    this.buffer = stack.buffer;
    if (this.index == 0)
      this.maybeNext();
  }
  static create(stack, pos = stack.bufferBase + stack.buffer.length) {
    return new _StackBufferCursor(stack, pos, pos - stack.bufferBase);
  }
  maybeNext() {
    let next = this.stack.parent;
    if (next != null) {
      this.index = this.stack.bufferBase - next.bufferBase;
      this.stack = next;
      this.buffer = next.buffer;
    }
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  next() {
    this.index -= 4;
    this.pos -= 4;
    if (this.index == 0)
      this.maybeNext();
  }
  fork() {
    return new _StackBufferCursor(this.stack, this.pos, this.index);
  }
};
function decodeArray(input, Type2 = Uint16Array) {
  if (typeof input != "string")
    return input;
  let array = null;
  for (let pos = 0, out = 0; pos < input.length; ) {
    let value = 0;
    for (; ; ) {
      let next = input.charCodeAt(pos++), stop = false;
      if (next == 126) {
        value = 65535;
        break;
      }
      if (next >= 92)
        next--;
      if (next >= 34)
        next--;
      let digit = next - 32;
      if (digit >= 46) {
        digit -= 46;
        stop = true;
      }
      value += digit;
      if (stop)
        break;
      value *= 46;
    }
    if (array)
      array[out++] = value;
    else
      array = new Type2(value);
  }
  return array;
}
var CachedToken = class {
  constructor() {
    this.start = -1;
    this.value = -1;
    this.end = -1;
    this.extended = -1;
    this.lookAhead = 0;
    this.mask = 0;
    this.context = 0;
  }
};
var nullToken = new CachedToken();
var InputStream = class {
  /**
  @internal
  */
  constructor(input, ranges) {
    this.input = input;
    this.ranges = ranges;
    this.chunk = "";
    this.chunkOff = 0;
    this.chunk2 = "";
    this.chunk2Pos = 0;
    this.next = -1;
    this.token = nullToken;
    this.rangeIndex = 0;
    this.pos = this.chunkPos = ranges[0].from;
    this.range = ranges[0];
    this.end = ranges[ranges.length - 1].to;
    this.readNext();
  }
  /**
  @internal
  */
  resolveOffset(offset, assoc) {
    let range = this.range, index = this.rangeIndex;
    let pos = this.pos + offset;
    while (pos < range.from) {
      if (!index)
        return null;
      let next = this.ranges[--index];
      pos -= range.from - next.to;
      range = next;
    }
    while (assoc < 0 ? pos > range.to : pos >= range.to) {
      if (index == this.ranges.length - 1)
        return null;
      let next = this.ranges[++index];
      pos += next.from - range.to;
      range = next;
    }
    return pos;
  }
  /**
  @internal
  */
  clipPos(pos) {
    if (pos >= this.range.from && pos < this.range.to)
      return pos;
    for (let range of this.ranges)
      if (range.to > pos)
        return Math.max(pos, range.from);
    return this.end;
  }
  /**
  Look at a code unit near the stream position. `.peek(0)` equals
  `.next`, `.peek(-1)` gives you the previous character, and so
  on.
  
  Note that looking around during tokenizing creates dependencies
  on potentially far-away content, which may reduce the
  effectiveness incremental parsing—when looking forward—or even
  cause invalid reparses when looking backward more than 25 code
  units, since the library does not track lookbehind.
  */
  peek(offset) {
    let idx = this.chunkOff + offset, pos, result;
    if (idx >= 0 && idx < this.chunk.length) {
      pos = this.pos + offset;
      result = this.chunk.charCodeAt(idx);
    } else {
      let resolved = this.resolveOffset(offset, 1);
      if (resolved == null)
        return -1;
      pos = resolved;
      if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
        result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
      } else {
        let i2 = this.rangeIndex, range = this.range;
        while (range.to <= pos)
          range = this.ranges[++i2];
        this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
        if (pos + this.chunk2.length > range.to)
          this.chunk2 = this.chunk2.slice(0, range.to - pos);
        result = this.chunk2.charCodeAt(0);
      }
    }
    if (pos >= this.token.lookAhead)
      this.token.lookAhead = pos + 1;
    return result;
  }
  /**
  Accept a token. By default, the end of the token is set to the
  current stream position, but you can pass an offset (relative to
  the stream position) to change that.
  */
  acceptToken(token, endOffset = 0) {
    let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
    if (end == null || end < this.token.start)
      throw new RangeError("Token end out of bounds");
    this.token.value = token;
    this.token.end = end;
  }
  /**
  Accept a token ending at a specific given position.
  */
  acceptTokenTo(token, endPos) {
    this.token.value = token;
    this.token.end = endPos;
  }
  getChunk() {
    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
      let { chunk, chunkPos } = this;
      this.chunk = this.chunk2;
      this.chunkPos = this.chunk2Pos;
      this.chunk2 = chunk;
      this.chunk2Pos = chunkPos;
      this.chunkOff = this.pos - this.chunkPos;
    } else {
      this.chunk2 = this.chunk;
      this.chunk2Pos = this.chunkPos;
      let nextChunk = this.input.chunk(this.pos);
      let end = this.pos + nextChunk.length;
      this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
      this.chunkPos = this.pos;
      this.chunkOff = 0;
    }
  }
  readNext() {
    if (this.chunkOff >= this.chunk.length) {
      this.getChunk();
      if (this.chunkOff == this.chunk.length)
        return this.next = -1;
    }
    return this.next = this.chunk.charCodeAt(this.chunkOff);
  }
  /**
  Move the stream forward N (defaults to 1) code units. Returns
  the new value of [`next`](#lr.InputStream.next).
  */
  advance(n2 = 1) {
    this.chunkOff += n2;
    while (this.pos + n2 >= this.range.to) {
      if (this.rangeIndex == this.ranges.length - 1)
        return this.setDone();
      n2 -= this.range.to - this.pos;
      this.range = this.ranges[++this.rangeIndex];
      this.pos = this.range.from;
    }
    this.pos += n2;
    if (this.pos >= this.token.lookAhead)
      this.token.lookAhead = this.pos + 1;
    return this.readNext();
  }
  setDone() {
    this.pos = this.chunkPos = this.end;
    this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
    this.chunk = "";
    return this.next = -1;
  }
  /**
  @internal
  */
  reset(pos, token) {
    if (token) {
      this.token = token;
      token.start = pos;
      token.lookAhead = pos + 1;
      token.value = token.extended = -1;
    } else {
      this.token = nullToken;
    }
    if (this.pos != pos) {
      this.pos = pos;
      if (pos == this.end) {
        this.setDone();
        return this;
      }
      while (pos < this.range.from)
        this.range = this.ranges[--this.rangeIndex];
      while (pos >= this.range.to)
        this.range = this.ranges[++this.rangeIndex];
      if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
        this.chunkOff = pos - this.chunkPos;
      } else {
        this.chunk = "";
        this.chunkOff = 0;
      }
      this.readNext();
    }
    return this;
  }
  /**
  @internal
  */
  read(from, to2) {
    if (from >= this.chunkPos && to2 <= this.chunkPos + this.chunk.length)
      return this.chunk.slice(from - this.chunkPos, to2 - this.chunkPos);
    if (from >= this.chunk2Pos && to2 <= this.chunk2Pos + this.chunk2.length)
      return this.chunk2.slice(from - this.chunk2Pos, to2 - this.chunk2Pos);
    if (from >= this.range.from && to2 <= this.range.to)
      return this.input.read(from, to2);
    let result = "";
    for (let r2 of this.ranges) {
      if (r2.from >= to2)
        break;
      if (r2.to > from)
        result += this.input.read(Math.max(r2.from, from), Math.min(r2.to, to2));
    }
    return result;
  }
};
var TokenGroup = class {
  constructor(data2, id3) {
    this.data = data2;
    this.id = id3;
  }
  token(input, stack) {
    let { parser: parser5 } = stack.p;
    readToken(this.data, input, stack, this.id, parser5.data, parser5.tokenPrecTable);
  }
};
TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
var LocalTokenGroup = class {
  constructor(data2, precTable, elseToken) {
    this.precTable = precTable;
    this.elseToken = elseToken;
    this.data = typeof data2 == "string" ? decodeArray(data2) : data2;
  }
  token(input, stack) {
    let start = input.pos, skipped = 0;
    for (; ; ) {
      let atEof = input.next < 0, nextPos = input.resolveOffset(1, 1);
      readToken(this.data, input, stack, 0, this.data, this.precTable);
      if (input.token.value > -1)
        break;
      if (this.elseToken == null)
        return;
      if (!atEof)
        skipped++;
      if (nextPos == null)
        break;
      input.reset(nextPos, input.token);
    }
    if (skipped) {
      input.reset(start, input.token);
      input.acceptToken(this.elseToken, skipped);
    }
  }
};
LocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
var ExternalTokenizer = class {
  /**
  Create a tokenizer. The first argument is the function that,
  given an input stream, scans for the types of tokens it
  recognizes at the stream's position, and calls
  [`acceptToken`](#lr.InputStream.acceptToken) when it finds
  one.
  */
  constructor(token, options = {}) {
    this.token = token;
    this.contextual = !!options.contextual;
    this.fallback = !!options.fallback;
    this.extend = !!options.extend;
  }
};
function readToken(data2, input, stack, group, precTable, precOffset) {
  let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;
  scan: for (; ; ) {
    if ((groupMask & data2[state]) == 0)
      break;
    let accEnd = data2[state + 1];
    for (let i2 = state + 3; i2 < accEnd; i2 += 2)
      if ((data2[i2 + 1] & groupMask) > 0) {
        let term = data2[i2];
        if (dialect.allows(term) && (input.token.value == -1 || input.token.value == term || overrides(term, input.token.value, precTable, precOffset))) {
          input.acceptToken(term);
          break;
        }
      }
    let next = input.next, low = 0, high = data2[state + 2];
    if (input.next < 0 && high > low && data2[accEnd + high * 3 - 3] == 65535) {
      state = data2[accEnd + high * 3 - 1];
      continue scan;
    }
    for (; low < high; ) {
      let mid = low + high >> 1;
      let index = accEnd + mid + (mid << 1);
      let from = data2[index], to2 = data2[index + 1] || 65536;
      if (next < from)
        high = mid;
      else if (next >= to2)
        low = mid + 1;
      else {
        state = data2[index + 2];
        input.advance();
        continue scan;
      }
    }
    break;
  }
}
function findOffset(data2, start, term) {
  for (let i2 = start, next; (next = data2[i2]) != 65535; i2++)
    if (next == term)
      return i2 - start;
  return -1;
}
function overrides(token, prev, tableData, tableOffset) {
  let iPrev = findOffset(tableData, tableOffset, prev);
  return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;
}
var verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
var stackIDs = null;
function cutAt(tree, pos, side) {
  let cursor = tree.cursor(IterMode.IncludeAnonymous);
  cursor.moveTo(pos);
  for (; ; ) {
    if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
      for (; ; ) {
        if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
          return side < 0 ? Math.max(0, Math.min(
            cursor.to - 1,
            pos - 25
            /* Lookahead.Margin */
          )) : Math.min(tree.length, Math.max(
            cursor.from + 1,
            pos + 25
            /* Lookahead.Margin */
          ));
        if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
          break;
        if (!cursor.parent())
          return side < 0 ? 0 : tree.length;
      }
  }
}
var FragmentCursor3 = class {
  constructor(fragments, nodeSet) {
    this.fragments = fragments;
    this.nodeSet = nodeSet;
    this.i = 0;
    this.fragment = null;
    this.safeFrom = -1;
    this.safeTo = -1;
    this.trees = [];
    this.start = [];
    this.index = [];
    this.nextFragment();
  }
  nextFragment() {
    let fr2 = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
    if (fr2) {
      this.safeFrom = fr2.openStart ? cutAt(fr2.tree, fr2.from + fr2.offset, 1) - fr2.offset : fr2.from;
      this.safeTo = fr2.openEnd ? cutAt(fr2.tree, fr2.to + fr2.offset, -1) - fr2.offset : fr2.to;
      while (this.trees.length) {
        this.trees.pop();
        this.start.pop();
        this.index.pop();
      }
      this.trees.push(fr2.tree);
      this.start.push(-fr2.offset);
      this.index.push(0);
      this.nextStart = this.safeFrom;
    } else {
      this.nextStart = 1e9;
    }
  }
  // `pos` must be >= any previously given `pos` for this cursor
  nodeAt(pos) {
    if (pos < this.nextStart)
      return null;
    while (this.fragment && this.safeTo <= pos)
      this.nextFragment();
    if (!this.fragment)
      return null;
    for (; ; ) {
      let last = this.trees.length - 1;
      if (last < 0) {
        this.nextFragment();
        return null;
      }
      let top2 = this.trees[last], index = this.index[last];
      if (index == top2.children.length) {
        this.trees.pop();
        this.start.pop();
        this.index.pop();
        continue;
      }
      let next = top2.children[index];
      let start = this.start[last] + top2.positions[index];
      if (start > pos) {
        this.nextStart = start;
        return null;
      }
      if (next instanceof Tree) {
        if (start == pos) {
          if (start < this.safeFrom)
            return null;
          let end = start + next.length;
          if (end <= this.safeTo) {
            let lookAhead = next.prop(NodeProp.lookAhead);
            if (!lookAhead || end + lookAhead < this.fragment.to)
              return next;
          }
        }
        this.index[last]++;
        if (start + next.length >= Math.max(this.safeFrom, pos)) {
          this.trees.push(next);
          this.start.push(start);
          this.index.push(0);
        }
      } else {
        this.index[last]++;
        this.nextStart = start + next.length;
      }
    }
  }
};
var TokenCache = class {
  constructor(parser5, stream) {
    this.stream = stream;
    this.tokens = [];
    this.mainToken = null;
    this.actions = [];
    this.tokens = parser5.tokenizers.map((_2) => new CachedToken());
  }
  getActions(stack) {
    let actionIndex = 0;
    let main = null;
    let { parser: parser5 } = stack.p, { tokenizers } = parser5;
    let mask = parser5.stateSlot(
      stack.state,
      3
      /* ParseState.TokenizerMask */
    );
    let context = stack.curContext ? stack.curContext.hash : 0;
    let lookAhead = 0;
    for (let i2 = 0; i2 < tokenizers.length; i2++) {
      if ((1 << i2 & mask) == 0)
        continue;
      let tokenizer = tokenizers[i2], token = this.tokens[i2];
      if (main && !tokenizer.fallback)
        continue;
      if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
        this.updateCachedToken(token, tokenizer, stack);
        token.mask = mask;
        token.context = context;
      }
      if (token.lookAhead > token.end + 25)
        lookAhead = Math.max(token.lookAhead, lookAhead);
      if (token.value != 0) {
        let startIndex = actionIndex;
        if (token.extended > -1)
          actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
        actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
        if (!tokenizer.extend) {
          main = token;
          if (actionIndex > startIndex)
            break;
        }
      }
    }
    while (this.actions.length > actionIndex)
      this.actions.pop();
    if (lookAhead)
      stack.setLookAhead(lookAhead);
    if (!main && stack.pos == this.stream.end) {
      main = new CachedToken();
      main.value = stack.p.parser.eofTerm;
      main.start = main.end = stack.pos;
      actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
    }
    this.mainToken = main;
    return this.actions;
  }
  getMainToken(stack) {
    if (this.mainToken)
      return this.mainToken;
    let main = new CachedToken(), { pos, p: p2 } = stack;
    main.start = pos;
    main.end = Math.min(pos + 1, p2.stream.end);
    main.value = pos == p2.stream.end ? p2.parser.eofTerm : 0;
    return main;
  }
  updateCachedToken(token, tokenizer, stack) {
    let start = this.stream.clipPos(stack.pos);
    tokenizer.token(this.stream.reset(start, token), stack);
    if (token.value > -1) {
      let { parser: parser5 } = stack.p;
      for (let i2 = 0; i2 < parser5.specialized.length; i2++)
        if (parser5.specialized[i2] == token.value) {
          let result = parser5.specializers[i2](this.stream.read(token.start, token.end), stack);
          if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
            if ((result & 1) == 0)
              token.value = result >> 1;
            else
              token.extended = result >> 1;
            break;
          }
        }
    } else {
      token.value = 0;
      token.end = this.stream.clipPos(start + 1);
    }
  }
  putAction(action, token, end, index) {
    for (let i2 = 0; i2 < index; i2 += 3)
      if (this.actions[i2] == action)
        return index;
    this.actions[index++] = action;
    this.actions[index++] = token;
    this.actions[index++] = end;
    return index;
  }
  addActions(stack, token, end, index) {
    let { state } = stack, { parser: parser5 } = stack.p, { data: data2 } = parser5;
    for (let set = 0; set < 2; set++) {
      for (let i2 = parser5.stateSlot(
        state,
        set ? 2 : 1
        /* ParseState.Actions */
      ); ; i2 += 3) {
        if (data2[i2] == 65535) {
          if (data2[i2 + 1] == 1) {
            i2 = pair(data2, i2 + 2);
          } else {
            if (index == 0 && data2[i2 + 1] == 2)
              index = this.putAction(pair(data2, i2 + 2), token, end, index);
            break;
          }
        }
        if (data2[i2] == token)
          index = this.putAction(pair(data2, i2 + 1), token, end, index);
      }
    }
    return index;
  }
};
var Parse = class {
  constructor(parser5, input, fragments, ranges) {
    this.parser = parser5;
    this.input = input;
    this.ranges = ranges;
    this.recovering = 0;
    this.nextStackID = 9812;
    this.minStackPos = 0;
    this.reused = [];
    this.stoppedAt = null;
    this.lastBigReductionStart = -1;
    this.lastBigReductionSize = 0;
    this.bigReductionCount = 0;
    this.stream = new InputStream(input, ranges);
    this.tokens = new TokenCache(parser5, this.stream);
    this.topTerm = parser5.top[1];
    let { from } = ranges[0];
    this.stacks = [Stack.start(this, parser5.top[0], from)];
    this.fragments = fragments.length && this.stream.end - from > parser5.bufferLength * 4 ? new FragmentCursor3(fragments, parser5.nodeSet) : null;
  }
  get parsedPos() {
    return this.minStackPos;
  }
  // Move the parser forward. This will process all parse stacks at
  // `this.pos` and try to advance them to a further position. If no
  // stack for such a position is found, it'll start error-recovery.
  //
  // When the parse is finished, this will return a syntax tree. When
  // not, it returns `null`.
  advance() {
    let stacks = this.stacks, pos = this.minStackPos;
    let newStacks = this.stacks = [];
    let stopped, stoppedTokens;
    if (this.bigReductionCount > 300 && stacks.length == 1) {
      let [s2] = stacks;
      while (s2.forceReduce() && s2.stack.length && s2.stack[s2.stack.length - 2] >= this.lastBigReductionStart) {
      }
      this.bigReductionCount = this.lastBigReductionSize = 0;
    }
    for (let i2 = 0; i2 < stacks.length; i2++) {
      let stack = stacks[i2];
      for (; ; ) {
        this.tokens.mainToken = null;
        if (stack.pos > pos) {
          newStacks.push(stack);
        } else if (this.advanceStack(stack, newStacks, stacks)) {
          continue;
        } else {
          if (!stopped) {
            stopped = [];
            stoppedTokens = [];
          }
          stopped.push(stack);
          let tok = this.tokens.getMainToken(stack);
          stoppedTokens.push(tok.value, tok.end);
        }
        break;
      }
    }
    if (!newStacks.length) {
      let finished = stopped && findFinished(stopped);
      if (finished) {
        if (verbose)
          console.log("Finish with " + this.stackID(finished));
        return this.stackToTree(finished);
      }
      if (this.parser.strict) {
        if (verbose && stopped)
          console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
        throw new SyntaxError("No parse at " + pos);
      }
      if (!this.recovering)
        this.recovering = 5;
    }
    if (this.recovering && stopped) {
      let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0] : this.runRecovery(stopped, stoppedTokens, newStacks);
      if (finished) {
        if (verbose)
          console.log("Force-finish " + this.stackID(finished));
        return this.stackToTree(finished.forceAll());
      }
    }
    if (this.recovering) {
      let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3;
      if (newStacks.length > maxRemaining) {
        newStacks.sort((a2, b2) => b2.score - a2.score);
        while (newStacks.length > maxRemaining)
          newStacks.pop();
      }
      if (newStacks.some((s2) => s2.reducePos > pos))
        this.recovering--;
    } else if (newStacks.length > 1) {
      outer: for (let i2 = 0; i2 < newStacks.length - 1; i2++) {
        let stack = newStacks[i2];
        for (let j2 = i2 + 1; j2 < newStacks.length; j2++) {
          let other = newStacks[j2];
          if (stack.sameState(other) || stack.buffer.length > 500 && other.buffer.length > 500) {
            if ((stack.score - other.score || stack.buffer.length - other.buffer.length) > 0) {
              newStacks.splice(j2--, 1);
            } else {
              newStacks.splice(i2--, 1);
              continue outer;
            }
          }
        }
      }
      if (newStacks.length > 12)
        newStacks.splice(
          12,
          newStacks.length - 12
          /* Rec.MaxStackCount */
        );
    }
    this.minStackPos = newStacks[0].pos;
    for (let i2 = 1; i2 < newStacks.length; i2++)
      if (newStacks[i2].pos < this.minStackPos)
        this.minStackPos = newStacks[i2].pos;
    return null;
  }
  stopAt(pos) {
    if (this.stoppedAt != null && this.stoppedAt < pos)
      throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = pos;
  }
  // Returns an updated version of the given stack, or null if the
  // stack can't advance normally. When `split` and `stacks` are
  // given, stacks split off by ambiguous operations will be pushed to
  // `split`, or added to `stacks` if they move `pos` forward.
  advanceStack(stack, stacks, split) {
    let start = stack.pos, { parser: parser5 } = this;
    let base2 = verbose ? this.stackID(stack) + " -> " : "";
    if (this.stoppedAt != null && start > this.stoppedAt)
      return stack.forceReduce() ? stack : null;
    if (this.fragments) {
      let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
      for (let cached = this.fragments.nodeAt(start); cached; ) {
        let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser5.getGoto(stack.state, cached.type.id) : -1;
        if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
          stack.useNode(cached, match);
          if (verbose)
            console.log(base2 + this.stackID(stack) + ` (via reuse of ${parser5.getName(cached.type.id)})`);
          return true;
        }
        if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
          break;
        let inner = cached.children[0];
        if (inner instanceof Tree && cached.positions[0] == 0)
          cached = inner;
        else
          break;
      }
    }
    let defaultReduce = parser5.stateSlot(
      stack.state,
      4
      /* ParseState.DefaultReduce */
    );
    if (defaultReduce > 0) {
      stack.reduce(defaultReduce);
      if (verbose)
        console.log(base2 + this.stackID(stack) + ` (via always-reduce ${parser5.getName(
          defaultReduce & 65535
          /* Action.ValueMask */
        )})`);
      return true;
    }
    if (stack.stack.length >= 8400) {
      while (stack.stack.length > 6e3 && stack.forceReduce()) {
      }
    }
    let actions = this.tokens.getActions(stack);
    for (let i2 = 0; i2 < actions.length; ) {
      let action = actions[i2++], term = actions[i2++], end = actions[i2++];
      let last = i2 == actions.length || !split;
      let localStack = last ? stack : stack.split();
      let main = this.tokens.mainToken;
      localStack.apply(action, term, main ? main.start : localStack.pos, end);
      if (verbose)
        console.log(base2 + this.stackID(localStack) + ` (via ${(action & 65536) == 0 ? "shift" : `reduce of ${parser5.getName(
          action & 65535
          /* Action.ValueMask */
        )}`} for ${parser5.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
      if (last)
        return true;
      else if (localStack.pos > start)
        stacks.push(localStack);
      else
        split.push(localStack);
    }
    return false;
  }
  // Advance a given stack forward as far as it will go. Returns the
  // (possibly updated) stack if it got stuck, or null if it moved
  // forward and was given to `pushStackDedup`.
  advanceFully(stack, newStacks) {
    let pos = stack.pos;
    for (; ; ) {
      if (!this.advanceStack(stack, null, null))
        return false;
      if (stack.pos > pos) {
        pushStackDedup(stack, newStacks);
        return true;
      }
    }
  }
  runRecovery(stacks, tokens, newStacks) {
    let finished = null, restarted = false;
    for (let i2 = 0; i2 < stacks.length; i2++) {
      let stack = stacks[i2], token = tokens[i2 << 1], tokenEnd = tokens[(i2 << 1) + 1];
      let base2 = verbose ? this.stackID(stack) + " -> " : "";
      if (stack.deadEnd) {
        if (restarted)
          continue;
        restarted = true;
        stack.restart();
        if (verbose)
          console.log(base2 + this.stackID(stack) + " (restarted)");
        let done = this.advanceFully(stack, newStacks);
        if (done)
          continue;
      }
      let force = stack.split(), forceBase = base2;
      for (let j2 = 0; force.forceReduce() && j2 < 10; j2++) {
        if (verbose)
          console.log(forceBase + this.stackID(force) + " (via force-reduce)");
        let done = this.advanceFully(force, newStacks);
        if (done)
          break;
        if (verbose)
          forceBase = this.stackID(force) + " -> ";
      }
      for (let insert2 of stack.recoverByInsert(token)) {
        if (verbose)
          console.log(base2 + this.stackID(insert2) + " (via recover-insert)");
        this.advanceFully(insert2, newStacks);
      }
      if (this.stream.end > stack.pos) {
        if (tokenEnd == stack.pos) {
          tokenEnd++;
          token = 0;
        }
        stack.recoverByDelete(token, tokenEnd);
        if (verbose)
          console.log(base2 + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
        pushStackDedup(stack, newStacks);
      } else if (!finished || finished.score < stack.score) {
        finished = stack;
      }
    }
    return finished;
  }
  // Convert the stack's buffer to a syntax tree.
  stackToTree(stack) {
    stack.close();
    return Tree.build({
      buffer: StackBufferCursor.create(stack),
      nodeSet: this.parser.nodeSet,
      topID: this.topTerm,
      maxBufferLength: this.parser.bufferLength,
      reused: this.reused,
      start: this.ranges[0].from,
      length: stack.pos - this.ranges[0].from,
      minRepeatType: this.parser.minRepeatTerm
    });
  }
  stackID(stack) {
    let id3 = (stackIDs || (stackIDs = /* @__PURE__ */ new WeakMap())).get(stack);
    if (!id3)
      stackIDs.set(stack, id3 = String.fromCodePoint(this.nextStackID++));
    return id3 + stack;
  }
};
function pushStackDedup(stack, newStacks) {
  for (let i2 = 0; i2 < newStacks.length; i2++) {
    let other = newStacks[i2];
    if (other.pos == stack.pos && other.sameState(stack)) {
      if (newStacks[i2].score < stack.score)
        newStacks[i2] = stack;
      return;
    }
  }
  newStacks.push(stack);
}
var Dialect = class {
  constructor(source, flags, disabled) {
    this.source = source;
    this.flags = flags;
    this.disabled = disabled;
  }
  allows(term) {
    return !this.disabled || this.disabled[term] == 0;
  }
};
var id = (x2) => x2;
var ContextTracker = class {
  /**
  Define a context tracker.
  */
  constructor(spec) {
    this.start = spec.start;
    this.shift = spec.shift || id;
    this.reduce = spec.reduce || id;
    this.reuse = spec.reuse || id;
    this.hash = spec.hash || (() => 0);
    this.strict = spec.strict !== false;
  }
};
var LRParser = class _LRParser extends Parser {
  /**
  @internal
  */
  constructor(spec) {
    super();
    this.wrappers = [];
    if (spec.version != 14)
      throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14})`);
    let nodeNames = spec.nodeNames.split(" ");
    this.minRepeatTerm = nodeNames.length;
    for (let i2 = 0; i2 < spec.repeatNodeCount; i2++)
      nodeNames.push("");
    let topTerms = Object.keys(spec.topRules).map((r2) => spec.topRules[r2][1]);
    let nodeProps = [];
    for (let i2 = 0; i2 < nodeNames.length; i2++)
      nodeProps.push([]);
    function setProp(nodeID, prop, value) {
      nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
    }
    if (spec.nodeProps)
      for (let propSpec of spec.nodeProps) {
        let prop = propSpec[0];
        if (typeof prop == "string")
          prop = NodeProp[prop];
        for (let i2 = 1; i2 < propSpec.length; ) {
          let next = propSpec[i2++];
          if (next >= 0) {
            setProp(next, prop, propSpec[i2++]);
          } else {
            let value = propSpec[i2 + -next];
            for (let j2 = -next; j2 > 0; j2--)
              setProp(propSpec[i2++], prop, value);
            i2++;
          }
        }
      }
    this.nodeSet = new NodeSet(nodeNames.map((name2, i2) => NodeType.define({
      name: i2 >= this.minRepeatTerm ? void 0 : name2,
      id: i2,
      props: nodeProps[i2],
      top: topTerms.indexOf(i2) > -1,
      error: i2 == 0,
      skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i2) > -1
    })));
    if (spec.propSources)
      this.nodeSet = this.nodeSet.extend(...spec.propSources);
    this.strict = false;
    this.bufferLength = DefaultBufferLength;
    let tokenArray = decodeArray(spec.tokenData);
    this.context = spec.context;
    this.specializerSpecs = spec.specialized || [];
    this.specialized = new Uint16Array(this.specializerSpecs.length);
    for (let i2 = 0; i2 < this.specializerSpecs.length; i2++)
      this.specialized[i2] = this.specializerSpecs[i2].term;
    this.specializers = this.specializerSpecs.map(getSpecializer);
    this.states = decodeArray(spec.states, Uint32Array);
    this.data = decodeArray(spec.stateData);
    this.goto = decodeArray(spec.goto);
    this.maxTerm = spec.maxTerm;
    this.tokenizers = spec.tokenizers.map((value) => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
    this.topRules = spec.topRules;
    this.dialects = spec.dialects || {};
    this.dynamicPrecedences = spec.dynamicPrecedences || null;
    this.tokenPrecTable = spec.tokenPrec;
    this.termNames = spec.termNames || null;
    this.maxNode = this.nodeSet.types.length - 1;
    this.dialect = this.parseDialect();
    this.top = this.topRules[Object.keys(this.topRules)[0]];
  }
  createParse(input, fragments, ranges) {
    let parse = new Parse(this, input, fragments, ranges);
    for (let w2 of this.wrappers)
      parse = w2(parse, input, fragments, ranges);
    return parse;
  }
  /**
  Get a goto table entry @internal
  */
  getGoto(state, term, loose = false) {
    let table = this.goto;
    if (term >= table[0])
      return -1;
    for (let pos = table[term + 1]; ; ) {
      let groupTag = table[pos++], last = groupTag & 1;
      let target = table[pos++];
      if (last && loose)
        return target;
      for (let end = pos + (groupTag >> 1); pos < end; pos++)
        if (table[pos] == state)
          return target;
      if (last)
        return -1;
    }
  }
  /**
  Check if this state has an action for a given terminal @internal
  */
  hasAction(state, terminal) {
    let data2 = this.data;
    for (let set = 0; set < 2; set++) {
      for (let i2 = this.stateSlot(
        state,
        set ? 2 : 1
        /* ParseState.Actions */
      ), next; ; i2 += 3) {
        if ((next = data2[i2]) == 65535) {
          if (data2[i2 + 1] == 1)
            next = data2[i2 = pair(data2, i2 + 2)];
          else if (data2[i2 + 1] == 2)
            return pair(data2, i2 + 2);
          else
            break;
        }
        if (next == terminal || next == 0)
          return pair(data2, i2 + 1);
      }
    }
    return 0;
  }
  /**
  @internal
  */
  stateSlot(state, slot) {
    return this.states[state * 6 + slot];
  }
  /**
  @internal
  */
  stateFlag(state, flag) {
    return (this.stateSlot(
      state,
      0
      /* ParseState.Flags */
    ) & flag) > 0;
  }
  /**
  @internal
  */
  validAction(state, action) {
    return !!this.allActions(state, (a2) => a2 == action ? true : null);
  }
  /**
  @internal
  */
  allActions(state, action) {
    let deflt = this.stateSlot(
      state,
      4
      /* ParseState.DefaultReduce */
    );
    let result = deflt ? action(deflt) : void 0;
    for (let i2 = this.stateSlot(
      state,
      1
      /* ParseState.Actions */
    ); result == null; i2 += 3) {
      if (this.data[i2] == 65535) {
        if (this.data[i2 + 1] == 1)
          i2 = pair(this.data, i2 + 2);
        else
          break;
      }
      result = action(pair(this.data, i2 + 1));
    }
    return result;
  }
  /**
  Get the states that can follow this one through shift actions or
  goto jumps. @internal
  */
  nextStates(state) {
    let result = [];
    for (let i2 = this.stateSlot(
      state,
      1
      /* ParseState.Actions */
    ); ; i2 += 3) {
      if (this.data[i2] == 65535) {
        if (this.data[i2 + 1] == 1)
          i2 = pair(this.data, i2 + 2);
        else
          break;
      }
      if ((this.data[i2 + 2] & 65536 >> 16) == 0) {
        let value = this.data[i2 + 1];
        if (!result.some((v2, i3) => i3 & 1 && v2 == value))
          result.push(this.data[i2], value);
      }
    }
    return result;
  }
  /**
  Configure the parser. Returns a new parser instance that has the
  given settings modified. Settings not provided in `config` are
  kept from the original parser.
  */
  configure(config2) {
    let copy = Object.assign(Object.create(_LRParser.prototype), this);
    if (config2.props)
      copy.nodeSet = this.nodeSet.extend(...config2.props);
    if (config2.top) {
      let info = this.topRules[config2.top];
      if (!info)
        throw new RangeError(`Invalid top rule name ${config2.top}`);
      copy.top = info;
    }
    if (config2.tokenizers)
      copy.tokenizers = this.tokenizers.map((t3) => {
        let found = config2.tokenizers.find((r2) => r2.from == t3);
        return found ? found.to : t3;
      });
    if (config2.specializers) {
      copy.specializers = this.specializers.slice();
      copy.specializerSpecs = this.specializerSpecs.map((s2, i2) => {
        let found = config2.specializers.find((r2) => r2.from == s2.external);
        if (!found)
          return s2;
        let spec = Object.assign(Object.assign({}, s2), { external: found.to });
        copy.specializers[i2] = getSpecializer(spec);
        return spec;
      });
    }
    if (config2.contextTracker)
      copy.context = config2.contextTracker;
    if (config2.dialect)
      copy.dialect = this.parseDialect(config2.dialect);
    if (config2.strict != null)
      copy.strict = config2.strict;
    if (config2.wrap)
      copy.wrappers = copy.wrappers.concat(config2.wrap);
    if (config2.bufferLength != null)
      copy.bufferLength = config2.bufferLength;
    return copy;
  }
  /**
  Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
  are registered for this parser.
  */
  hasWrappers() {
    return this.wrappers.length > 0;
  }
  /**
  Returns the name associated with a given term. This will only
  work for all terms when the parser was generated with the
  `--names` option. By default, only the names of tagged terms are
  stored.
  */
  getName(term) {
    return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
  }
  /**
  The eof term id is always allocated directly after the node
  types. @internal
  */
  get eofTerm() {
    return this.maxNode + 1;
  }
  /**
  The type of top node produced by the parser.
  */
  get topNode() {
    return this.nodeSet.types[this.top[1]];
  }
  /**
  @internal
  */
  dynamicPrecedence(term) {
    let prec2 = this.dynamicPrecedences;
    return prec2 == null ? 0 : prec2[term] || 0;
  }
  /**
  @internal
  */
  parseDialect(dialect) {
    let values2 = Object.keys(this.dialects), flags = values2.map(() => false);
    if (dialect)
      for (let part of dialect.split(" ")) {
        let id3 = values2.indexOf(part);
        if (id3 >= 0)
          flags[id3] = true;
      }
    let disabled = null;
    for (let i2 = 0; i2 < values2.length; i2++)
      if (!flags[i2]) {
        for (let j2 = this.dialects[values2[i2]], id3; (id3 = this.data[j2++]) != 65535; )
          (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id3] = 1;
      }
    return new Dialect(dialect, flags, disabled);
  }
  /**
  Used by the output of the parser generator. Not available to
  user code. @hide
  */
  static deserialize(spec) {
    return new _LRParser(spec);
  }
};
function pair(data2, off2) {
  return data2[off2] | data2[off2 + 1] << 16;
}
function findFinished(stacks) {
  let best = null;
  for (let stack of stacks) {
    let stopped = stack.p.stoppedAt;
    if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) && stack.p.parser.stateFlag(
      stack.state,
      2
      /* StateFlag.Accepting */
    ) && (!best || best.score < stack.score))
      best = stack;
  }
  return best;
}
function getSpecializer(spec) {
  if (spec.external) {
    let mask = spec.extend ? 1 : 0;
    return (value, stack) => spec.external(value, stack) << 1 | mask;
  }
  return spec.get;
}

// node_modules/@lezer/html/dist/index.js
var scriptText = 54;
var StartCloseScriptTag = 1;
var styleText = 55;
var StartCloseStyleTag = 2;
var textareaText = 56;
var StartCloseTextareaTag = 3;
var EndTag = 4;
var SelfClosingEndTag = 5;
var StartTag = 6;
var StartScriptTag = 7;
var StartStyleTag = 8;
var StartTextareaTag = 9;
var StartSelfClosingTag = 10;
var StartCloseTag = 11;
var NoMatchStartCloseTag = 12;
var MismatchedStartCloseTag = 13;
var missingCloseTag = 57;
var IncompleteCloseTag = 14;
var commentContent$1 = 58;
var Element2 = 20;
var TagName = 22;
var Attribute = 23;
var AttributeName = 24;
var AttributeValue = 26;
var UnquotedAttributeValue = 27;
var ScriptText = 28;
var StyleText = 31;
var TextareaText = 34;
var OpenTag = 36;
var CloseTag = 37;
var Dialect_noMatch = 0;
var Dialect_selfClosing = 1;
var selfClosers = {
  area: true,
  base: true,
  br: true,
  col: true,
  command: true,
  embed: true,
  frame: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true,
  menuitem: true
};
var implicitlyClosed = {
  dd: true,
  li: true,
  optgroup: true,
  option: true,
  p: true,
  rp: true,
  rt: true,
  tbody: true,
  td: true,
  tfoot: true,
  th: true,
  tr: true
};
var closeOnOpen = {
  dd: { dd: true, dt: true },
  dt: { dd: true, dt: true },
  li: { li: true },
  option: { option: true, optgroup: true },
  optgroup: { optgroup: true },
  p: {
    address: true,
    article: true,
    aside: true,
    blockquote: true,
    dir: true,
    div: true,
    dl: true,
    fieldset: true,
    footer: true,
    form: true,
    h1: true,
    h2: true,
    h3: true,
    h4: true,
    h5: true,
    h6: true,
    header: true,
    hgroup: true,
    hr: true,
    menu: true,
    nav: true,
    ol: true,
    p: true,
    pre: true,
    section: true,
    table: true,
    ul: true
  },
  rp: { rp: true, rt: true },
  rt: { rp: true, rt: true },
  tbody: { tbody: true, tfoot: true },
  td: { td: true, th: true },
  tfoot: { tbody: true },
  th: { td: true, th: true },
  thead: { tbody: true, tfoot: true },
  tr: { tr: true }
};
function nameChar(ch2) {
  return ch2 == 45 || ch2 == 46 || ch2 == 58 || ch2 >= 65 && ch2 <= 90 || ch2 == 95 || ch2 >= 97 && ch2 <= 122 || ch2 >= 161;
}
function isSpace(ch2) {
  return ch2 == 9 || ch2 == 10 || ch2 == 13 || ch2 == 32;
}
var cachedName = null;
var cachedInput = null;
var cachedPos = 0;
function tagNameAfter(input, offset) {
  let pos = input.pos + offset;
  if (cachedPos == pos && cachedInput == input) return cachedName;
  let next = input.peek(offset);
  while (isSpace(next)) next = input.peek(++offset);
  let name2 = "";
  for (; ; ) {
    if (!nameChar(next)) break;
    name2 += String.fromCharCode(next);
    next = input.peek(++offset);
  }
  cachedInput = input;
  cachedPos = pos;
  return cachedName = name2 ? name2.toLowerCase() : next == question || next == bang ? void 0 : null;
}
var lessThan = 60;
var greaterThan = 62;
var slash = 47;
var question = 63;
var bang = 33;
var dash = 45;
function ElementContext(name2, parent) {
  this.name = name2;
  this.parent = parent;
}
var startTagTerms = [StartTag, StartSelfClosingTag, StartScriptTag, StartStyleTag, StartTextareaTag];
var elementContext = new ContextTracker({
  start: null,
  shift(context, term, stack, input) {
    return startTagTerms.indexOf(term) > -1 ? new ElementContext(tagNameAfter(input, 1) || "", context) : context;
  },
  reduce(context, term) {
    return term == Element2 && context ? context.parent : context;
  },
  reuse(context, node, stack, input) {
    let type = node.type.id;
    return type == StartTag || type == OpenTag ? new ElementContext(tagNameAfter(input, 1) || "", context) : context;
  },
  strict: false
});
var tagStart = new ExternalTokenizer((input, stack) => {
  if (input.next != lessThan) {
    if (input.next < 0 && stack.context) input.acceptToken(missingCloseTag);
    return;
  }
  input.advance();
  let close = input.next == slash;
  if (close) input.advance();
  let name2 = tagNameAfter(input, 0);
  if (name2 === void 0) return;
  if (!name2) return input.acceptToken(close ? IncompleteCloseTag : StartTag);
  let parent = stack.context ? stack.context.name : null;
  if (close) {
    if (name2 == parent) return input.acceptToken(StartCloseTag);
    if (parent && implicitlyClosed[parent]) return input.acceptToken(missingCloseTag, -2);
    if (stack.dialectEnabled(Dialect_noMatch)) return input.acceptToken(NoMatchStartCloseTag);
    for (let cx2 = stack.context; cx2; cx2 = cx2.parent) if (cx2.name == name2) return;
    input.acceptToken(MismatchedStartCloseTag);
  } else {
    if (name2 == "script") return input.acceptToken(StartScriptTag);
    if (name2 == "style") return input.acceptToken(StartStyleTag);
    if (name2 == "textarea") return input.acceptToken(StartTextareaTag);
    if (selfClosers.hasOwnProperty(name2)) return input.acceptToken(StartSelfClosingTag);
    if (parent && closeOnOpen[parent] && closeOnOpen[parent][name2]) input.acceptToken(missingCloseTag, -1);
    else input.acceptToken(StartTag);
  }
}, { contextual: true });
var commentContent = new ExternalTokenizer((input) => {
  for (let dashes = 0, i2 = 0; ; i2++) {
    if (input.next < 0) {
      if (i2) input.acceptToken(commentContent$1);
      break;
    }
    if (input.next == dash) {
      dashes++;
    } else if (input.next == greaterThan && dashes >= 2) {
      if (i2 >= 3) input.acceptToken(commentContent$1, -2);
      break;
    } else {
      dashes = 0;
    }
    input.advance();
  }
});
function inForeignElement(context) {
  for (; context; context = context.parent)
    if (context.name == "svg" || context.name == "math") return true;
  return false;
}
var endTag = new ExternalTokenizer((input, stack) => {
  if (input.next == slash && input.peek(1) == greaterThan) {
    let selfClosing = stack.dialectEnabled(Dialect_selfClosing) || inForeignElement(stack.context);
    input.acceptToken(selfClosing ? SelfClosingEndTag : EndTag, 2);
  } else if (input.next == greaterThan) {
    input.acceptToken(EndTag, 1);
  }
});
function contentTokenizer(tag, textToken, endToken) {
  let lastState = 2 + tag.length;
  return new ExternalTokenizer((input) => {
    for (let state = 0, matchedLen = 0, i2 = 0; ; i2++) {
      if (input.next < 0) {
        if (i2) input.acceptToken(textToken);
        break;
      }
      if (state == 0 && input.next == lessThan || state == 1 && input.next == slash || state >= 2 && state < lastState && input.next == tag.charCodeAt(state - 2)) {
        state++;
        matchedLen++;
      } else if ((state == 2 || state == lastState) && isSpace(input.next)) {
        matchedLen++;
      } else if (state == lastState && input.next == greaterThan) {
        if (i2 > matchedLen)
          input.acceptToken(textToken, -matchedLen);
        else
          input.acceptToken(endToken, -(matchedLen - 2));
        break;
      } else if ((input.next == 10 || input.next == 13) && i2) {
        input.acceptToken(textToken, 1);
        break;
      } else {
        state = matchedLen = 0;
      }
      input.advance();
    }
  });
}
var scriptTokens = contentTokenizer("script", scriptText, StartCloseScriptTag);
var styleTokens = contentTokenizer("style", styleText, StartCloseStyleTag);
var textareaTokens = contentTokenizer("textarea", textareaText, StartCloseTextareaTag);
var htmlHighlighting = styleTags({
  "Text RawText": tags.content,
  "StartTag StartCloseTag SelfClosingEndTag EndTag": tags.angleBracket,
  TagName: tags.tagName,
  "MismatchedCloseTag/TagName": [tags.tagName, tags.invalid],
  AttributeName: tags.attributeName,
  "AttributeValue UnquotedAttributeValue": tags.attributeValue,
  Is: tags.definitionOperator,
  "EntityReference CharacterReference": tags.character,
  Comment: tags.blockComment,
  ProcessingInst: tags.processingInstruction,
  DoctypeDecl: tags.documentMeta
});
var parser2 = LRParser.deserialize({
  version: 14,
  states: ",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%ZQ&rO,59fO%fQ&rO,59iO%qQ&rO,59lO%|Q&rO,59nOOOa'#D^'#D^O&XOaO'#CxO&dOaO,59[OOOb'#D_'#D_O&lObO'#C{O&wObO,59[OOOd'#D`'#D`O'POdO'#DOO'[OdO,59[OOO`'#Da'#DaO'dO!rO,59[O'kQ#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'pO$fO,59oOOO`,59o,59oO'xQ#|O,59qO'}Q#|O,59rOOO`-E7W-E7WO(SQ&rO'#CsOOQW'#DZ'#DZO(bQ&rO1G.wOOOa1G.w1G.wOOO`1G/Y1G/YO(mQ&rO1G/QOOOb1G/Q1G/QO(xQ&rO1G/TOOOd1G/T1G/TO)TQ&rO1G/WOOO`1G/W1G/WO)`Q&rO1G/YOOOa-E7[-E7[O)kQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)pQ#tO'#C|OOOd-E7^-E7^O)uQ#tO'#DPOOO`-E7_-E7_O)zQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O*PQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOO`7+$t7+$tOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rO*[Q#|O,59eO*aQ#|O,59hO*fQ#|O,59kOOO`1G/X1G/XO*kO7[O'#CvO*|OMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O+_O7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+pOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z",
  stateData: ",]~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OT}OhyO~OS!POT}OhyO~OS!ROT}OhyO~OS!TOT}OhyO~OS}OT}OhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXTgXhgX~OS!fOT!gOhyO~OS!hOT!gOhyO~OS!iOT!gOhyO~OS!jOT!gOhyO~OS!gOT!gOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~",
  goto: "%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{!O!Q!S!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ!ObQ!QcQ!SdQ!UeZ!e{!O!Q!S!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp",
  nodeNames: "\u26A0 StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",
  maxTerm: 67,
  context: elementContext,
  nodeProps: [
    ["closedBy", -10, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, "EndTag", 6, "EndTag SelfClosingEndTag", -4, 21, 30, 33, 36, "CloseTag"],
    ["openedBy", 4, "StartTag StartCloseTag", 5, "StartTag", -4, 29, 32, 35, 37, "OpenTag"],
    ["group", -9, 14, 17, 18, 19, 20, 39, 40, 41, 42, "Entity", 16, "Entity TextContent", -3, 28, 31, 34, "TextContent Entity"],
    ["isolate", -11, 21, 29, 30, 32, 33, 35, 36, 37, 38, 41, 42, "ltr", -3, 26, 27, 39, ""]
  ],
  propSources: [htmlHighlighting],
  skippedNodes: [0],
  repeatNodeCount: 9,
  tokenData: "!<p!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs3_sv-_vw3}wxHYx}-_}!OH{!O!P-_!P!Q$q!Q![-_![!]Mz!]!^-_!^!_!$S!_!`!;x!`!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4U-_4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/ebhSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0rXhSqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0mS1bP;=`<%l0m[1hP;=`<%l/^!V1vchS`P!a`!cpOq&Xqr1krs&}sv1kvw0mwx(tx!P1k!P!Q&X!Q!^1k!^!_*V!_!a&X!a#s1k#s$f&X$f;'S1k;'S;=`3R<%l?Ah1k?Ah?BY&X?BY?Mn1k?MnO&X!V3UP;=`<%l1k!_3[P;=`<%l-_!Z3hV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_4WihSkWc!ROX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst>]tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^/^!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!Z5zbkWOX5uXZ7SZ[5u[^7S^p5uqr5urs7Sst+Ptw5uwx7Sx!]5u!]!^7w!^!a7S!a#S5u#S#T7S#T;'S5u;'S;=`8n<%lO5u!R7VVOp7Sqs7St!]7S!]!^7l!^;'S7S;'S;=`7q<%lO7S!R7qOa!R!R7tP;=`<%l7S!Z8OYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z8qP;=`<%l5u!_8{ihSkWOX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst/^tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^:j!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!_:sbhSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V<QchSOp7Sqr;{rs7Sst0mtw;{wx7Sx!P;{!P!Q7S!Q!];{!]!^=]!^!a7S!a#s;{#s$f7S$f;'S;{;'S;=`>P<%l?Ah;{?Ah?BY7S?BY?Mn;{?MnO7S!V=dXhSa!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!V>SP;=`<%l;{!_>YP;=`<%l8t!_>dhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^/^!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!Z@TakWOX@OXZAYZ[@O[^AY^p@Oqr@OrsAYsw@OwxAYx!]@O!]!^Az!^!aAY!a#S@O#S#TAY#T;'S@O;'S;=`Bq<%lO@O!RA]UOpAYq!]AY!]!^Ao!^;'SAY;'S;=`At<%lOAY!RAtOb!R!RAwP;=`<%lAY!ZBRYkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZBtP;=`<%l@O!_COhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^Dj!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!_DsbhSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VFQbhSOpAYqrE{rsAYswE{wxAYx!PE{!P!QAY!Q!]E{!]!^GY!^!aAY!a#sE{#s$fAY$f;'SE{;'S;=`G|<%l?AhE{?Ah?BYAY?BY?MnE{?MnOAY!VGaXhSb!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!VHPP;=`<%lE{!_HVP;=`<%lBw!ZHcW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aIYlhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OKQ!O!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aK_khS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!`&X!`!aMS!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!TM_X`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!aNZ!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMz!O!PMz!P!Q$q!Q![Mz![!]Mz!]!^-_!^!_*V!_!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f$}-_$}%OMz%O%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4UMz4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Je-_$Je$JgMz$Jg$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!a!$PP;=`<%lMz!R!$ZY!a`!cpOq*Vqr!$yrs(Vsv*Vwx)ex!a*V!a!b!4t!b;'S*V;'S;=`*s<%lO*V!R!%Q]!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!%y!O!f*V!f!g!']!g#W*V#W#X!0`#X;'S*V;'S;=`*s<%lO*V!R!&QX!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!&m!O;'S*V;'S;=`*s<%lO*V!R!&vV!a`!cp!dPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!'dX!a`!cpOr*Vrs(Vsv*Vwx)ex!q*V!q!r!(P!r;'S*V;'S;=`*s<%lO*V!R!(WX!a`!cpOr*Vrs(Vsv*Vwx)ex!e*V!e!f!(s!f;'S*V;'S;=`*s<%lO*V!R!(zX!a`!cpOr*Vrs(Vsv*Vwx)ex!v*V!v!w!)g!w;'S*V;'S;=`*s<%lO*V!R!)nX!a`!cpOr*Vrs(Vsv*Vwx)ex!{*V!{!|!*Z!|;'S*V;'S;=`*s<%lO*V!R!*bX!a`!cpOr*Vrs(Vsv*Vwx)ex!r*V!r!s!*}!s;'S*V;'S;=`*s<%lO*V!R!+UX!a`!cpOr*Vrs(Vsv*Vwx)ex!g*V!g!h!+q!h;'S*V;'S;=`*s<%lO*V!R!+xY!a`!cpOr!+qrs!,hsv!+qvw!-Swx!.[x!`!+q!`!a!/j!a;'S!+q;'S;=`!0Y<%lO!+qq!,mV!cpOv!,hvx!-Sx!`!,h!`!a!-q!a;'S!,h;'S;=`!.U<%lO!,hP!-VTO!`!-S!`!a!-f!a;'S!-S;'S;=`!-k<%lO!-SP!-kO{PP!-nP;=`<%l!-Sq!-xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!.XP;=`<%l!,ha!.aX!a`Or!.[rs!-Ssv!.[vw!-Sw!`!.[!`!a!.|!a;'S!.[;'S;=`!/d<%lO!.[a!/TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!/gP;=`<%l!.[!R!/sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!0]P;=`<%l!+q!R!0gX!a`!cpOr*Vrs(Vsv*Vwx)ex#c*V#c#d!1S#d;'S*V;'S;=`*s<%lO*V!R!1ZX!a`!cpOr*Vrs(Vsv*Vwx)ex#V*V#V#W!1v#W;'S*V;'S;=`*s<%lO*V!R!1}X!a`!cpOr*Vrs(Vsv*Vwx)ex#h*V#h#i!2j#i;'S*V;'S;=`*s<%lO*V!R!2qX!a`!cpOr*Vrs(Vsv*Vwx)ex#m*V#m#n!3^#n;'S*V;'S;=`*s<%lO*V!R!3eX!a`!cpOr*Vrs(Vsv*Vwx)ex#d*V#d#e!4Q#e;'S*V;'S;=`*s<%lO*V!R!4XX!a`!cpOr*Vrs(Vsv*Vwx)ex#X*V#X#Y!+q#Y;'S*V;'S;=`*s<%lO*V!R!4{Y!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!a!4t!a!b!:]!b;'S!4t;'S;=`!;r<%lO!4tq!5pV!cpOv!5kvx!6Vx!a!5k!a!b!7W!b;'S!5k;'S;=`!8V<%lO!5kP!6YTO!a!6V!a!b!6i!b;'S!6V;'S;=`!7Q<%lO!6VP!6lTO!`!6V!`!a!6{!a;'S!6V;'S;=`!7Q<%lO!6VP!7QOxPP!7TP;=`<%l!6Vq!7]V!cpOv!5kvx!6Vx!`!5k!`!a!7r!a;'S!5k;'S;=`!8V<%lO!5kq!7yS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!8YP;=`<%l!5ka!8bX!a`Or!8]rs!6Vsv!8]vw!6Vw!a!8]!a!b!8}!b;'S!8];'S;=`!:V<%lO!8]a!9SX!a`Or!8]rs!6Vsv!8]vw!6Vw!`!8]!`!a!9o!a;'S!8];'S;=`!:V<%lO!8]a!9vT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!:YP;=`<%l!8]!R!:dY!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!`!4t!`!a!;S!a;'S!4t;'S;=`!;r<%lO!4t!R!;]V!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;uP;=`<%l!4t!V!<TXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X",
  tokenizers: [scriptTokens, styleTokens, textareaTokens, endTag, tagStart, commentContent, 0, 1, 2, 3, 4, 5],
  topRules: { "Document": [0, 15] },
  dialects: { noMatch: 0, selfClosing: 509 },
  tokenPrec: 511
});
function getAttrs2(openTag, input) {
  let attrs = /* @__PURE__ */ Object.create(null);
  for (let att of openTag.getChildren(Attribute)) {
    let name2 = att.getChild(AttributeName), value = att.getChild(AttributeValue) || att.getChild(UnquotedAttributeValue);
    if (name2) attrs[input.read(name2.from, name2.to)] = !value ? "" : value.type.id == AttributeValue ? input.read(value.from + 1, value.to - 1) : input.read(value.from, value.to);
  }
  return attrs;
}
function findTagName(openTag, input) {
  let tagNameNode = openTag.getChild(TagName);
  return tagNameNode ? input.read(tagNameNode.from, tagNameNode.to) : " ";
}
function maybeNest(node, input, tags3) {
  let attrs;
  for (let tag of tags3) {
    if (!tag.attrs || tag.attrs(attrs || (attrs = getAttrs2(node.node.parent.firstChild, input))))
      return { parser: tag.parser };
  }
  return null;
}
function configureNesting(tags3 = [], attributes = []) {
  let script = [], style = [], textarea = [], other = [];
  for (let tag of tags3) {
    let array = tag.tag == "script" ? script : tag.tag == "style" ? style : tag.tag == "textarea" ? textarea : other;
    array.push(tag);
  }
  let attrs = attributes.length ? /* @__PURE__ */ Object.create(null) : null;
  for (let attr of attributes) (attrs[attr.name] || (attrs[attr.name] = [])).push(attr);
  return parseMixed((node, input) => {
    let id3 = node.type.id;
    if (id3 == ScriptText) return maybeNest(node, input, script);
    if (id3 == StyleText) return maybeNest(node, input, style);
    if (id3 == TextareaText) return maybeNest(node, input, textarea);
    if (id3 == Element2 && other.length) {
      let n2 = node.node, open = n2.firstChild, tagName = open && findTagName(open, input), attrs2;
      if (tagName) for (let tag of other) {
        if (tag.tag == tagName && (!tag.attrs || tag.attrs(attrs2 || (attrs2 = getAttrs2(open, input))))) {
          let close = n2.lastChild;
          let to2 = close.type.id == CloseTag ? close.from : n2.to;
          if (to2 > open.to)
            return { parser: tag.parser, overlay: [{ from: open.to, to: to2 }] };
        }
      }
    }
    if (attrs && id3 == Attribute) {
      let n2 = node.node, nameNode;
      if (nameNode = n2.firstChild) {
        let matches = attrs[input.read(nameNode.from, nameNode.to)];
        if (matches) for (let attr of matches) {
          if (attr.tagName && attr.tagName != findTagName(n2.parent, input)) continue;
          let value = n2.lastChild;
          if (value.type.id == AttributeValue) {
            let from = value.from + 1;
            let last = value.lastChild, to2 = value.to - (last && last.isError ? 0 : 1);
            if (to2 > from) return { parser: attr.parser, overlay: [{ from, to: to2 }] };
          } else if (value.type.id == UnquotedAttributeValue) {
            return { parser: attr.parser, overlay: [{ from: value.from, to: value.to }] };
          }
        }
      }
    }
    return null;
  });
}

// node_modules/@lezer/css/dist/index.js
var descendantOp = 99;
var Unit = 1;
var callee = 100;
var identifier = 101;
var VariableName = 2;
var space2 = [
  9,
  10,
  11,
  12,
  13,
  32,
  133,
  160,
  5760,
  8192,
  8193,
  8194,
  8195,
  8196,
  8197,
  8198,
  8199,
  8200,
  8201,
  8202,
  8232,
  8233,
  8239,
  8287,
  12288
];
var colon = 58;
var parenL = 40;
var underscore = 95;
var bracketL = 91;
var dash2 = 45;
var period = 46;
var hash = 35;
var percent = 37;
var ampersand = 38;
var backslash = 92;
var newline = 10;
function isAlpha(ch2) {
  return ch2 >= 65 && ch2 <= 90 || ch2 >= 97 && ch2 <= 122 || ch2 >= 161;
}
function isDigit(ch2) {
  return ch2 >= 48 && ch2 <= 57;
}
var identifiers = new ExternalTokenizer((input, stack) => {
  for (let inside2 = false, dashes = 0, i2 = 0; ; i2++) {
    let { next } = input;
    if (isAlpha(next) || next == dash2 || next == underscore || inside2 && isDigit(next)) {
      if (!inside2 && (next != dash2 || i2 > 0)) inside2 = true;
      if (dashes === i2 && next == dash2) dashes++;
      input.advance();
    } else if (next == backslash && input.peek(1) != newline) {
      input.advance();
      if (input.next > -1) input.advance();
      inside2 = true;
    } else {
      if (inside2)
        input.acceptToken(next == parenL ? callee : dashes == 2 && stack.canShift(VariableName) ? VariableName : identifier);
      break;
    }
  }
});
var descendant = new ExternalTokenizer((input) => {
  if (space2.includes(input.peek(-1))) {
    let { next } = input;
    if (isAlpha(next) || next == underscore || next == hash || next == period || next == bracketL || next == colon && isAlpha(input.peek(1)) || next == dash2 || next == ampersand)
      input.acceptToken(descendantOp);
  }
});
var unitToken = new ExternalTokenizer((input) => {
  if (!space2.includes(input.peek(-1))) {
    let { next } = input;
    if (next == percent) {
      input.advance();
      input.acceptToken(Unit);
    }
    if (isAlpha(next)) {
      do {
        input.advance();
      } while (isAlpha(input.next) || isDigit(input.next));
      input.acceptToken(Unit);
    }
  }
});
var cssHighlighting = styleTags({
  "AtKeyword import charset namespace keyframes media supports": tags.definitionKeyword,
  "from to selector": tags.keyword,
  NamespaceName: tags.namespace,
  KeyframeName: tags.labelName,
  KeyframeRangeName: tags.operatorKeyword,
  TagName: tags.tagName,
  ClassName: tags.className,
  PseudoClassName: tags.constant(tags.className),
  IdName: tags.labelName,
  "FeatureName PropertyName": tags.propertyName,
  AttributeName: tags.attributeName,
  NumberLiteral: tags.number,
  KeywordQuery: tags.keyword,
  UnaryQueryOp: tags.operatorKeyword,
  "CallTag ValueName": tags.atom,
  VariableName: tags.variableName,
  Callee: tags.operatorKeyword,
  Unit: tags.unit,
  "UniversalSelector NestingSelector": tags.definitionOperator,
  MatchOp: tags.compareOperator,
  "ChildOp SiblingOp, LogicOp": tags.logicOperator,
  BinOp: tags.arithmeticOperator,
  Important: tags.modifier,
  Comment: tags.blockComment,
  ColorLiteral: tags.color,
  "ParenthesizedContent StringLiteral": tags.string,
  ":": tags.punctuation,
  "PseudoOp #": tags.derefOperator,
  "; ,": tags.separator,
  "( )": tags.paren,
  "[ ]": tags.squareBracket,
  "{ }": tags.brace
});
var spec_callee = { __proto__: null, lang: 32, "nth-child": 32, "nth-last-child": 32, "nth-of-type": 32, "nth-last-of-type": 32, dir: 32, "host-context": 32, url: 60, "url-prefix": 60, domain: 60, regexp: 60, selector: 138 };
var spec_AtKeyword = { __proto__: null, "@import": 118, "@media": 142, "@charset": 146, "@namespace": 150, "@keyframes": 156, "@supports": 168 };
var spec_identifier = { __proto__: null, not: 132, only: 132 };
var parser3 = LRParser.deserialize({
  version: 14,
  states: ":^QYQ[OOO#_Q[OOP#fOWOOOOQP'#Cd'#CdOOQP'#Cc'#CcO#kQ[O'#CfO$_QXO'#CaO$fQ[O'#ChO$qQ[O'#DTO$vQ[O'#DWOOQP'#Em'#EmO${QdO'#DgO%jQ[O'#DtO${QdO'#DvO%{Q[O'#DxO&WQ[O'#D{O&`Q[O'#ERO&nQ[O'#ETOOQS'#El'#ElOOQS'#EW'#EWQYQ[OOO&uQXO'#CdO'jQWO'#DcO'oQWO'#EsO'zQ[O'#EsQOQWOOP(UO#tO'#C_POOO)C@[)C@[OOQP'#Cg'#CgOOQP,59Q,59QO#kQ[O,59QO(aQ[O'#E[O({QWO,58{O)TQ[O,59SO$qQ[O,59oO$vQ[O,59rO(aQ[O,59uO(aQ[O,59wO(aQ[O,59xO)`Q[O'#DbOOQS,58{,58{OOQP'#Ck'#CkOOQO'#DR'#DROOQP,59S,59SO)gQWO,59SO)lQWO,59SOOQP'#DV'#DVOOQP,59o,59oOOQO'#DX'#DXO)qQ`O,59rOOQS'#Cp'#CpO${QdO'#CqO)yQvO'#CsO+ZQtO,5:ROOQO'#Cx'#CxO)lQWO'#CwO+oQWO'#CyO+tQ[O'#DOOOQS'#Ep'#EpOOQO'#Dj'#DjO+|Q[O'#DqO,[QWO'#EtO&`Q[O'#DoO,jQWO'#DrOOQO'#Eu'#EuO)OQWO,5:`O,oQpO,5:bOOQS'#Dz'#DzO,wQWO,5:dO,|Q[O,5:dOOQO'#D}'#D}O-UQWO,5:gO-ZQWO,5:mO-cQWO,5:oOOQS-E8U-E8UO${QdO,59}O-kQ[O'#E^O-xQWO,5;_O-xQWO,5;_POOO'#EV'#EVP.TO#tO,58yPOOO,58y,58yOOQP1G.l1G.lO.zQXO,5:vOOQO-E8Y-E8YOOQS1G.g1G.gOOQP1G.n1G.nO)gQWO1G.nO)lQWO1G.nOOQP1G/Z1G/ZO/XQ`O1G/^O/rQXO1G/aO0YQXO1G/cO0pQXO1G/dO1WQWO,59|O1]Q[O'#DSO1dQdO'#CoOOQP1G/^1G/^O${QdO1G/^O1kQpO,59]OOQS,59_,59_O${QdO,59aO1sQWO1G/mOOQS,59c,59cO1xQ!bO,59eOOQS'#DP'#DPOOQS'#EY'#EYO2QQ[O,59jOOQS,59j,59jO2YQWO'#DjO2eQWO,5:VO2jQWO,5:]O&`Q[O,5:XO&`Q[O'#E_O2rQWO,5;`O2}QWO,5:ZO(aQ[O,5:^OOQS1G/z1G/zOOQS1G/|1G/|OOQS1G0O1G0OO3`QWO1G0OO3eQdO'#EOOOQS1G0R1G0ROOQS1G0X1G0XOOQS1G0Z1G0ZO3pQtO1G/iOOQO,5:x,5:xO4WQ[O,5:xOOQO-E8[-E8[O4eQWO1G0yPOOO-E8T-E8TPOOO1G.e1G.eOOQP7+$Y7+$YOOQP7+$x7+$xO${QdO7+$xOOQS1G/h1G/hO4pQXO'#ErO4wQWO,59nO4|QtO'#EXO5tQdO'#EoO6OQWO,59ZO6TQpO7+$xOOQS1G.w1G.wOOQS1G.{1G.{OOQS7+%X7+%XO6]QWO1G/POOQS-E8W-E8WOOQS1G/U1G/UO${QdO1G/qOOQO1G/w1G/wOOQO1G/s1G/sO6bQWO,5:yOOQO-E8]-E8]O6pQXO1G/xOOQS7+%j7+%jO6wQYO'#CsOOQO'#EQ'#EQO7SQ`O'#EPOOQO'#EP'#EPO7_QWO'#E`O7gQdO,5:jOOQS,5:j,5:jO7rQtO'#E]O${QdO'#E]O8sQdO7+%TOOQO7+%T7+%TOOQO1G0d1G0dO9WQpO<<HdO9`QWO,5;^OOQP1G/Y1G/YOOQS-E8V-E8VO${QdO'#EZO9hQWO,5;ZOOQT1G.u1G.uOOQP<<Hd<<HdOOQS7+$k7+$kO9pQdO7+%]OOQO7+%d7+%dOOQO,5:k,5:kO3hQdO'#EaO7_QWO,5:zOOQS,5:z,5:zOOQS-E8^-E8^OOQS1G0U1G0UO9wQtO,5:wOOQS-E8Z-E8ZOOQO<<Ho<<HoOOQPAN>OAN>OO:xQdO,5:uOOQO-E8X-E8XOOQO<<Hw<<HwOOQO,5:{,5:{OOQO-E8_-E8_OOQS1G0f1G0f",
  stateData: ";[~O#ZOS#[QQ~OUYOXYO]VO^VOqXOxWO![aO!]ZO!i[O!k]O!m^O!p_O!v`O#XRO#bTO~OQfOUYOXYO]VO^VOqXOxWO![aO!]ZO!i[O!k]O!m^O!p_O!v`O#XeO#bTO~O#U#gP~P!ZO#[jO~O#XlO~O]qO^qOqsOtoOxrO!OtO!RvO#VuO#bnO~O!TwO~P#pO`}O#WzO#XyO~O#X!OO~O#X!QO~OQ![Ob!TOf![Oh![On!YOq!ZO#W!WO#X!SO#e!UO~Ob!^O!d!`O!g!aO#X!]O!T#hP~Oh!fOn!YO#X!eO~Oh!hO#X!hO~Ob!^O!d!`O!g!aO#X!]O~O!Y#hP~P%jO]WX]!WX^WXqWXtWXxWX!OWX!RWX!TWX#VWX#bWX~O]!mO~O!Y!nO#U#gX!S#gX~O#U#gX!S#gX~P!ZO#]!qO#^!qO#_!sO~OUYOXYO]VO^VOqXOxWO#XRO#bTO~OtoO!TwO~O`!zO#WzO#XyO~O!S#gP~P!ZOb#RO~Ob#SO~Op#TO|#UO~OP#WObgXjgX!YgX!dgX!ggX#XgXagXQgXfgXhgXngXqgXtgX!XgX#UgX#WgX#egXpgX!SgX~Ob!^Oj#XO!d!`O!g!aO#X!]O!Y#hP~Ob#[O~Op#`O#X#]O~Ob!^O!d!`O!g!aO#X#aO~Ot#eO!b#dO!T#hX!Y#hX~Ob#hO~Oj#XO!Y#jO~O!Y#kO~Oh#lOn!YO~O!T#mO~O!TwO!b#dO~O!TwO!Y#pO~O!Y#QX#U#QX!S#QX~P!ZO!Y!nO#U#ga!S#ga~O#]!qO#^!qO#_#wO~O]qO^qOqsOxrO!OtO!RvO#VuO#bnO~Ot#Oa!T#Oaa#Oa~P.`Op#yO|#zO~O]qO^qOqsOxrO#bnO~Ot}i!O}i!R}i!T}i#V}ia}i~P/aOt!Pi!O!Pi!R!Pi!T!Pi#V!Pia!Pi~P/aOt!Qi!O!Qi!R!Qi!T!Qi#V!Qia!Qi~P/aO!S#{O~Oa#fP~P(aOa#cP~P${Oa$SOj#XO~O!Y$UO~Oh$VOo$VO~Op$XO#X#]O~O]!`Xa!^X!b!^X~O]$YO~Oa$ZO!b#dO~Ot#eO!T#ha!Y#ha~O!b#dOt!ca!T!ca!Y!caa!ca~O!Y$`O~O!S$gO#X$bO#e$aO~Oj#XOt$iO!X$kO!Y!Vi#U!Vi!S!Vi~P${O!Y#Qa#U#Qa!S#Qa~P!ZO!Y!nO#U#gi!S#gi~Oa#fX~P#pOa$oO~Oj#XOQ!{Xa!{Xb!{Xf!{Xh!{Xn!{Xq!{Xt!{X#W!{X#X!{X#e!{X~Ot$qOa#cX~P${Oa$sO~Oj#XOp$tO~Oa$uO~O!b#dOt#Ra!T#Ra!Y#Ra~Oa$wO~P.`OP#WOtgX!TgX~O#e$aOt!sX!T!sX~Ot$yO!TwO~O!S$}O#X$bO#e$aO~Oj#XOQ#PXb#PXf#PXh#PXn#PXq#PXt#PX!X#PX!Y#PX#U#PX#W#PX#X#PX#e#PX!S#PX~Ot$iO!X%QO!Y!Vq#U!Vq!S!Vq~P${Oj#XOp%RO~OtoOa#fa~Ot$qOa#ca~Oa%UO~P${Oj#XOQ#Pab#Paf#Pah#Pan#Paq#Pat#Pa!X#Pa!Y#Pa#U#Pa#W#Pa#X#Pa#e#Pa!S#Pa~Oa!}at!}a~P${O#Zo#[#ej!R#e~",
  goto: "-g#jPPP#kP#nP#w$WP#w$g#wPP$mPPP$s$|$|P%`P$|P$|%z&^PPPP$|&vP&z'Q#wP'W#w'^P#wP#w#wPPP'd'y(WPP#nPP(_(_(i(_P(_P(_(_P#nP#nP#nP(l#nP(o(r(u(|#nP#nP)R)X)h)v)|*S*^*d*n*t*zPPPPPPPPPP+Q+ZP+v+yP,o,r,x-RRkQ_bOPdhw!n#skYOPdhotuvw!n#R#h#skSOPdhotuvw!n#R#h#sQmTR!tnQ{VR!xqQ!x}Q#Z!XR#x!zq![Z]!T!m#S#U#X#q#z$P$Y$i$j$q$v%Sp![Z]!T!m#S#U#X#q#z$P$Y$i$j$q$v%SU$d#m$f$yR$x$cq!XZ]!T!m#S#U#X#q#z$P$Y$i$j$q$v%Sp![Z]!T!m#S#U#X#q#z$P$Y$i$j$q$v%SQ!f^R#l!gT#^!Z#_Q|VR!yqQ!x|R#x!yQ!PWR!{rQ!RXR!|sQxUQ!wpQ#i!cQ#o!jQ#p!kQ${$eR%X$zSgPwQ!phQ#r!nR$l#sZfPhw!n#sa!b[`a!V!^!`#d#eR#b!^R!g^R!i_R#n!iS$e#m$fR%V$yV$c#m$f$yQ!rjR#v!rQdOShPwU!ldh#sR#s!nQ$P#SU$p$P$v%SQ$v$YR%S$qQ#_!ZR$W#_Q$r$PR%T$rQpUS!vp$nR$n#|Q$j#qR%P$jQ!ogS#t!o#uR#u!pQ#f!_R$^#fQ$f#mR$|$fQ$z$eR%W$z_cOPdhw!n#s^UOPdhw!n#sQ!uoQ!}tQ#OuQ#PvQ#|#RR$_#hR$Q#SQ!VZQ!d]Q#V!TQ#q!m[$O#S$P$Y$q$v%SQ$R#UQ$T#XS$h#q$jQ$m#zR%O$iR#}#RQiPR#QwQ!c[Q!kaR#Y!VU!_[a!VQ!j`Q#c!^Q#g!`Q$[#dR$]#e",
  nodeNames: "\u26A0 Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent ] [ LineNames LineName , PseudoClassName ArgList IdSelector # IdName AttributeSelector AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList KeyframeSelector KeyframeRangeName SupportsStatement supports AtRule Styles",
  maxTerm: 117,
  nodeProps: [
    ["isolate", -2, 3, 24, ""],
    ["openedBy", 17, "(", 32, "[", 50, "{"],
    ["closedBy", 18, ")", 33, "]", 51, "}"]
  ],
  propSources: [cssHighlighting],
  skippedNodes: [0, 3, 87],
  repeatNodeCount: 11,
  tokenData: "J^~R!^OX$}X^%u^p$}pq%uqr)Xrs.Rst/utu6duv$}vw7^wx7oxy9^yz9oz{9t{|:_|}?Q}!O?c!O!P@Q!P!Q@i!Q![Ab![!]B]!]!^CX!^!_$}!_!`Cj!`!aC{!a!b$}!b!cDw!c!}$}!}#OFa#O#P$}#P#QFr#Q#R6d#R#T$}#T#UGT#U#c$}#c#dHf#d#o$}#o#pH{#p#q6d#q#rI^#r#sIo#s#y$}#y#z%u#z$f$}$f$g%u$g#BY$}#BY#BZ%u#BZ$IS$}$IS$I_%u$I_$I|$}$I|$JO%u$JO$JT$}$JT$JU%u$JU$KV$}$KV$KW%u$KW&FU$}&FU&FV%u&FV;'S$};'S;=`JW<%lO$}`%QSOy%^z;'S%^;'S;=`%o<%lO%^`%cSo`Oy%^z;'S%^;'S;=`%o<%lO%^`%rP;=`<%l%^~%zh#Z~OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^~'mh#Z~o`OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^l)[UOy%^z#]%^#]#^)n#^;'S%^;'S;=`%o<%lO%^l)sUo`Oy%^z#a%^#a#b*V#b;'S%^;'S;=`%o<%lO%^l*[Uo`Oy%^z#d%^#d#e*n#e;'S%^;'S;=`%o<%lO%^l*sUo`Oy%^z#c%^#c#d+V#d;'S%^;'S;=`%o<%lO%^l+[Uo`Oy%^z#f%^#f#g+n#g;'S%^;'S;=`%o<%lO%^l+sUo`Oy%^z#h%^#h#i,V#i;'S%^;'S;=`%o<%lO%^l,[Uo`Oy%^z#T%^#T#U,n#U;'S%^;'S;=`%o<%lO%^l,sUo`Oy%^z#b%^#b#c-V#c;'S%^;'S;=`%o<%lO%^l-[Uo`Oy%^z#h%^#h#i-n#i;'S%^;'S;=`%o<%lO%^l-uS!X[o`Oy%^z;'S%^;'S;=`%o<%lO%^~.UWOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o<%lO.R~.sOh~~.vRO;'S.R;'S;=`/P;=`O.R~/SXOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o;=`<%l.R<%lO.R~/rP;=`<%l.Rn/zYxQOy%^z!Q%^!Q![0j![!c%^!c!i0j!i#T%^#T#Z0j#Z;'S%^;'S;=`%o<%lO%^l0oYo`Oy%^z!Q%^!Q![1_![!c%^!c!i1_!i#T%^#T#Z1_#Z;'S%^;'S;=`%o<%lO%^l1dYo`Oy%^z!Q%^!Q![2S![!c%^!c!i2S!i#T%^#T#Z2S#Z;'S%^;'S;=`%o<%lO%^l2ZYf[o`Oy%^z!Q%^!Q![2y![!c%^!c!i2y!i#T%^#T#Z2y#Z;'S%^;'S;=`%o<%lO%^l3QYf[o`Oy%^z!Q%^!Q![3p![!c%^!c!i3p!i#T%^#T#Z3p#Z;'S%^;'S;=`%o<%lO%^l3uYo`Oy%^z!Q%^!Q![4e![!c%^!c!i4e!i#T%^#T#Z4e#Z;'S%^;'S;=`%o<%lO%^l4lYf[o`Oy%^z!Q%^!Q![5[![!c%^!c!i5[!i#T%^#T#Z5[#Z;'S%^;'S;=`%o<%lO%^l5aYo`Oy%^z!Q%^!Q![6P![!c%^!c!i6P!i#T%^#T#Z6P#Z;'S%^;'S;=`%o<%lO%^l6WSf[o`Oy%^z;'S%^;'S;=`%o<%lO%^d6gUOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^d7QS|So`Oy%^z;'S%^;'S;=`%o<%lO%^b7cSXQOy%^z;'S%^;'S;=`%o<%lO%^~7rWOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W<%lO7o~8_RO;'S7o;'S;=`8h;=`O7o~8kXOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W;=`<%l7o<%lO7o~9ZP;=`<%l7on9cSb^Oy%^z;'S%^;'S;=`%o<%lO%^~9tOa~n9{UUQjWOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^n:fWjW!RQOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^l;TUo`Oy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^l;nYo`#e[Oy%^z!Q%^!Q![;g![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^l<cYo`Oy%^z{%^{|=R|}%^}!O=R!O!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=WUo`Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=qUo`#e[Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l>[[o`#e[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^n?VSt^Oy%^z;'S%^;'S;=`%o<%lO%^l?hWjWOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^n@VU#bQOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^~@nTjWOy%^z{@}{;'S%^;'S;=`%o<%lO%^~AUSo`#[~Oy%^z;'S%^;'S;=`%o<%lO%^lAg[#e[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^bBbU]QOy%^z![%^![!]Bt!];'S%^;'S;=`%o<%lO%^bB{S^Qo`Oy%^z;'S%^;'S;=`%o<%lO%^nC^S!Y^Oy%^z;'S%^;'S;=`%o<%lO%^dCoS|SOy%^z;'S%^;'S;=`%o<%lO%^bDQU!OQOy%^z!`%^!`!aDd!a;'S%^;'S;=`%o<%lO%^bDkS!OQo`Oy%^z;'S%^;'S;=`%o<%lO%^bDzWOy%^z!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^bEk[![Qo`Oy%^z}%^}!OEd!O!Q%^!Q![Ed![!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^nFfSq^Oy%^z;'S%^;'S;=`%o<%lO%^nFwSp^Oy%^z;'S%^;'S;=`%o<%lO%^bGWUOy%^z#b%^#b#cGj#c;'S%^;'S;=`%o<%lO%^bGoUo`Oy%^z#W%^#W#XHR#X;'S%^;'S;=`%o<%lO%^bHYS!bQo`Oy%^z;'S%^;'S;=`%o<%lO%^bHiUOy%^z#f%^#f#gHR#g;'S%^;'S;=`%o<%lO%^fIQS!TUOy%^z;'S%^;'S;=`%o<%lO%^nIcS!S^Oy%^z;'S%^;'S;=`%o<%lO%^fItU!RQOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^`JZP;=`<%l$}",
  tokenizers: [descendant, unitToken, identifiers, 1, 2, 3, 4, new LocalTokenGroup("m~RRYZ[z{a~~g~aO#^~~dP!P!Qg~lO#_~~", 28, 105)],
  topRules: { "StyleSheet": [0, 4], "Styles": [1, 86] },
  specialized: [{ term: 100, get: (value) => spec_callee[value] || -1 }, { term: 58, get: (value) => spec_AtKeyword[value] || -1 }, { term: 101, get: (value) => spec_identifier[value] || -1 }],
  tokenPrec: 1200
});

// node_modules/@codemirror/lang-css/dist/index.js
var _properties = null;
function properties() {
  if (!_properties && typeof document == "object" && document.body) {
    let { style } = document.body, names = [], seen = /* @__PURE__ */ new Set();
    for (let prop in style)
      if (prop != "cssText" && prop != "cssFloat") {
        if (typeof style[prop] == "string") {
          if (/[A-Z]/.test(prop))
            prop = prop.replace(/[A-Z]/g, (ch2) => "-" + ch2.toLowerCase());
          if (!seen.has(prop)) {
            names.push(prop);
            seen.add(prop);
          }
        }
      }
    _properties = names.sort().map((name2) => ({ type: "property", label: name2 }));
  }
  return _properties || [];
}
var pseudoClasses = /* @__PURE__ */ [
  "active",
  "after",
  "any-link",
  "autofill",
  "backdrop",
  "before",
  "checked",
  "cue",
  "default",
  "defined",
  "disabled",
  "empty",
  "enabled",
  "file-selector-button",
  "first",
  "first-child",
  "first-letter",
  "first-line",
  "first-of-type",
  "focus",
  "focus-visible",
  "focus-within",
  "fullscreen",
  "has",
  "host",
  "host-context",
  "hover",
  "in-range",
  "indeterminate",
  "invalid",
  "is",
  "lang",
  "last-child",
  "last-of-type",
  "left",
  "link",
  "marker",
  "modal",
  "not",
  "nth-child",
  "nth-last-child",
  "nth-last-of-type",
  "nth-of-type",
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "part",
  "placeholder",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "selection",
  "slotted",
  "target",
  "target-text",
  "valid",
  "visited",
  "where"
].map((name2) => ({ type: "class", label: name2 }));
var values = /* @__PURE__ */ [
  "above",
  "absolute",
  "activeborder",
  "additive",
  "activecaption",
  "after-white-space",
  "ahead",
  "alias",
  "all",
  "all-scroll",
  "alphabetic",
  "alternate",
  "always",
  "antialiased",
  "appworkspace",
  "asterisks",
  "attr",
  "auto",
  "auto-flow",
  "avoid",
  "avoid-column",
  "avoid-page",
  "avoid-region",
  "axis-pan",
  "background",
  "backwards",
  "baseline",
  "below",
  "bidi-override",
  "blink",
  "block",
  "block-axis",
  "bold",
  "bolder",
  "border",
  "border-box",
  "both",
  "bottom",
  "break",
  "break-all",
  "break-word",
  "bullets",
  "button",
  "button-bevel",
  "buttonface",
  "buttonhighlight",
  "buttonshadow",
  "buttontext",
  "calc",
  "capitalize",
  "caps-lock-indicator",
  "caption",
  "captiontext",
  "caret",
  "cell",
  "center",
  "checkbox",
  "circle",
  "cjk-decimal",
  "clear",
  "clip",
  "close-quote",
  "col-resize",
  "collapse",
  "color",
  "color-burn",
  "color-dodge",
  "column",
  "column-reverse",
  "compact",
  "condensed",
  "contain",
  "content",
  "contents",
  "content-box",
  "context-menu",
  "continuous",
  "copy",
  "counter",
  "counters",
  "cover",
  "crop",
  "cross",
  "crosshair",
  "currentcolor",
  "cursive",
  "cyclic",
  "darken",
  "dashed",
  "decimal",
  "decimal-leading-zero",
  "default",
  "default-button",
  "dense",
  "destination-atop",
  "destination-in",
  "destination-out",
  "destination-over",
  "difference",
  "disc",
  "discard",
  "disclosure-closed",
  "disclosure-open",
  "document",
  "dot-dash",
  "dot-dot-dash",
  "dotted",
  "double",
  "down",
  "e-resize",
  "ease",
  "ease-in",
  "ease-in-out",
  "ease-out",
  "element",
  "ellipse",
  "ellipsis",
  "embed",
  "end",
  "ethiopic-abegede-gez",
  "ethiopic-halehame-aa-er",
  "ethiopic-halehame-gez",
  "ew-resize",
  "exclusion",
  "expanded",
  "extends",
  "extra-condensed",
  "extra-expanded",
  "fantasy",
  "fast",
  "fill",
  "fill-box",
  "fixed",
  "flat",
  "flex",
  "flex-end",
  "flex-start",
  "footnotes",
  "forwards",
  "from",
  "geometricPrecision",
  "graytext",
  "grid",
  "groove",
  "hand",
  "hard-light",
  "help",
  "hidden",
  "hide",
  "higher",
  "highlight",
  "highlighttext",
  "horizontal",
  "hsl",
  "hsla",
  "hue",
  "icon",
  "ignore",
  "inactiveborder",
  "inactivecaption",
  "inactivecaptiontext",
  "infinite",
  "infobackground",
  "infotext",
  "inherit",
  "initial",
  "inline",
  "inline-axis",
  "inline-block",
  "inline-flex",
  "inline-grid",
  "inline-table",
  "inset",
  "inside",
  "intrinsic",
  "invert",
  "italic",
  "justify",
  "keep-all",
  "landscape",
  "large",
  "larger",
  "left",
  "level",
  "lighter",
  "lighten",
  "line-through",
  "linear",
  "linear-gradient",
  "lines",
  "list-item",
  "listbox",
  "listitem",
  "local",
  "logical",
  "loud",
  "lower",
  "lower-hexadecimal",
  "lower-latin",
  "lower-norwegian",
  "lowercase",
  "ltr",
  "luminosity",
  "manipulation",
  "match",
  "matrix",
  "matrix3d",
  "medium",
  "menu",
  "menutext",
  "message-box",
  "middle",
  "min-intrinsic",
  "mix",
  "monospace",
  "move",
  "multiple",
  "multiple_mask_images",
  "multiply",
  "n-resize",
  "narrower",
  "ne-resize",
  "nesw-resize",
  "no-close-quote",
  "no-drop",
  "no-open-quote",
  "no-repeat",
  "none",
  "normal",
  "not-allowed",
  "nowrap",
  "ns-resize",
  "numbers",
  "numeric",
  "nw-resize",
  "nwse-resize",
  "oblique",
  "opacity",
  "open-quote",
  "optimizeLegibility",
  "optimizeSpeed",
  "outset",
  "outside",
  "outside-shape",
  "overlay",
  "overline",
  "padding",
  "padding-box",
  "painted",
  "page",
  "paused",
  "perspective",
  "pinch-zoom",
  "plus-darker",
  "plus-lighter",
  "pointer",
  "polygon",
  "portrait",
  "pre",
  "pre-line",
  "pre-wrap",
  "preserve-3d",
  "progress",
  "push-button",
  "radial-gradient",
  "radio",
  "read-only",
  "read-write",
  "read-write-plaintext-only",
  "rectangle",
  "region",
  "relative",
  "repeat",
  "repeating-linear-gradient",
  "repeating-radial-gradient",
  "repeat-x",
  "repeat-y",
  "reset",
  "reverse",
  "rgb",
  "rgba",
  "ridge",
  "right",
  "rotate",
  "rotate3d",
  "rotateX",
  "rotateY",
  "rotateZ",
  "round",
  "row",
  "row-resize",
  "row-reverse",
  "rtl",
  "run-in",
  "running",
  "s-resize",
  "sans-serif",
  "saturation",
  "scale",
  "scale3d",
  "scaleX",
  "scaleY",
  "scaleZ",
  "screen",
  "scroll",
  "scrollbar",
  "scroll-position",
  "se-resize",
  "self-start",
  "self-end",
  "semi-condensed",
  "semi-expanded",
  "separate",
  "serif",
  "show",
  "single",
  "skew",
  "skewX",
  "skewY",
  "skip-white-space",
  "slide",
  "slider-horizontal",
  "slider-vertical",
  "sliderthumb-horizontal",
  "sliderthumb-vertical",
  "slow",
  "small",
  "small-caps",
  "small-caption",
  "smaller",
  "soft-light",
  "solid",
  "source-atop",
  "source-in",
  "source-out",
  "source-over",
  "space",
  "space-around",
  "space-between",
  "space-evenly",
  "spell-out",
  "square",
  "start",
  "static",
  "status-bar",
  "stretch",
  "stroke",
  "stroke-box",
  "sub",
  "subpixel-antialiased",
  "svg_masks",
  "super",
  "sw-resize",
  "symbolic",
  "symbols",
  "system-ui",
  "table",
  "table-caption",
  "table-cell",
  "table-column",
  "table-column-group",
  "table-footer-group",
  "table-header-group",
  "table-row",
  "table-row-group",
  "text",
  "text-bottom",
  "text-top",
  "textarea",
  "textfield",
  "thick",
  "thin",
  "threeddarkshadow",
  "threedface",
  "threedhighlight",
  "threedlightshadow",
  "threedshadow",
  "to",
  "top",
  "transform",
  "translate",
  "translate3d",
  "translateX",
  "translateY",
  "translateZ",
  "transparent",
  "ultra-condensed",
  "ultra-expanded",
  "underline",
  "unidirectional-pan",
  "unset",
  "up",
  "upper-latin",
  "uppercase",
  "url",
  "var",
  "vertical",
  "vertical-text",
  "view-box",
  "visible",
  "visibleFill",
  "visiblePainted",
  "visibleStroke",
  "visual",
  "w-resize",
  "wait",
  "wave",
  "wider",
  "window",
  "windowframe",
  "windowtext",
  "words",
  "wrap",
  "wrap-reverse",
  "x-large",
  "x-small",
  "xor",
  "xx-large",
  "xx-small"
].map((name2) => ({ type: "keyword", label: name2 })).concat(/* @__PURE__ */ [
  "aliceblue",
  "antiquewhite",
  "aqua",
  "aquamarine",
  "azure",
  "beige",
  "bisque",
  "black",
  "blanchedalmond",
  "blue",
  "blueviolet",
  "brown",
  "burlywood",
  "cadetblue",
  "chartreuse",
  "chocolate",
  "coral",
  "cornflowerblue",
  "cornsilk",
  "crimson",
  "cyan",
  "darkblue",
  "darkcyan",
  "darkgoldenrod",
  "darkgray",
  "darkgreen",
  "darkkhaki",
  "darkmagenta",
  "darkolivegreen",
  "darkorange",
  "darkorchid",
  "darkred",
  "darksalmon",
  "darkseagreen",
  "darkslateblue",
  "darkslategray",
  "darkturquoise",
  "darkviolet",
  "deeppink",
  "deepskyblue",
  "dimgray",
  "dodgerblue",
  "firebrick",
  "floralwhite",
  "forestgreen",
  "fuchsia",
  "gainsboro",
  "ghostwhite",
  "gold",
  "goldenrod",
  "gray",
  "grey",
  "green",
  "greenyellow",
  "honeydew",
  "hotpink",
  "indianred",
  "indigo",
  "ivory",
  "khaki",
  "lavender",
  "lavenderblush",
  "lawngreen",
  "lemonchiffon",
  "lightblue",
  "lightcoral",
  "lightcyan",
  "lightgoldenrodyellow",
  "lightgray",
  "lightgreen",
  "lightpink",
  "lightsalmon",
  "lightseagreen",
  "lightskyblue",
  "lightslategray",
  "lightsteelblue",
  "lightyellow",
  "lime",
  "limegreen",
  "linen",
  "magenta",
  "maroon",
  "mediumaquamarine",
  "mediumblue",
  "mediumorchid",
  "mediumpurple",
  "mediumseagreen",
  "mediumslateblue",
  "mediumspringgreen",
  "mediumturquoise",
  "mediumvioletred",
  "midnightblue",
  "mintcream",
  "mistyrose",
  "moccasin",
  "navajowhite",
  "navy",
  "oldlace",
  "olive",
  "olivedrab",
  "orange",
  "orangered",
  "orchid",
  "palegoldenrod",
  "palegreen",
  "paleturquoise",
  "palevioletred",
  "papayawhip",
  "peachpuff",
  "peru",
  "pink",
  "plum",
  "powderblue",
  "purple",
  "rebeccapurple",
  "red",
  "rosybrown",
  "royalblue",
  "saddlebrown",
  "salmon",
  "sandybrown",
  "seagreen",
  "seashell",
  "sienna",
  "silver",
  "skyblue",
  "slateblue",
  "slategray",
  "snow",
  "springgreen",
  "steelblue",
  "tan",
  "teal",
  "thistle",
  "tomato",
  "turquoise",
  "violet",
  "wheat",
  "white",
  "whitesmoke",
  "yellow",
  "yellowgreen"
].map((name2) => ({ type: "constant", label: name2 })));
var tags2 = /* @__PURE__ */ [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "b",
  "bdi",
  "bdo",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "figcaption",
  "figure",
  "footer",
  "form",
  "header",
  "hgroup",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "meter",
  "nav",
  "ol",
  "output",
  "p",
  "pre",
  "ruby",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "template",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "tr",
  "u",
  "ul"
].map((name2) => ({ type: "type", label: name2 }));
var identifier2 = /^(\w[\w-]*|-\w[\w-]*|)$/;
var variable = /^-(-[\w-]*)?$/;
function isVarArg(node, doc2) {
  var _a3;
  if (node.name == "(" || node.type.isError)
    node = node.parent || node;
  if (node.name != "ArgList")
    return false;
  let callee2 = (_a3 = node.parent) === null || _a3 === void 0 ? void 0 : _a3.firstChild;
  if ((callee2 === null || callee2 === void 0 ? void 0 : callee2.name) != "Callee")
    return false;
  return doc2.sliceString(callee2.from, callee2.to) == "var";
}
var VariablesByNode = /* @__PURE__ */ new NodeWeakMap();
var declSelector = ["Declaration"];
function astTop(node) {
  for (let cur2 = node; ; ) {
    if (cur2.type.isTop)
      return cur2;
    if (!(cur2 = cur2.parent))
      return node;
  }
}
function variableNames(doc2, node, isVariable) {
  if (node.to - node.from > 4096) {
    let known = VariablesByNode.get(node);
    if (known)
      return known;
    let result = [], seen = /* @__PURE__ */ new Set(), cursor = node.cursor(IterMode.IncludeAnonymous);
    if (cursor.firstChild())
      do {
        for (let option of variableNames(doc2, cursor.node, isVariable))
          if (!seen.has(option.label)) {
            seen.add(option.label);
            result.push(option);
          }
      } while (cursor.nextSibling());
    VariablesByNode.set(node, result);
    return result;
  } else {
    let result = [], seen = /* @__PURE__ */ new Set();
    node.cursor().iterate((node2) => {
      var _a3;
      if (isVariable(node2) && node2.matchContext(declSelector) && ((_a3 = node2.node.nextSibling) === null || _a3 === void 0 ? void 0 : _a3.name) == ":") {
        let name2 = doc2.sliceString(node2.from, node2.to);
        if (!seen.has(name2)) {
          seen.add(name2);
          result.push({ label: name2, type: "variable" });
        }
      }
    });
    return result;
  }
}
var defineCSSCompletionSource = (isVariable) => (context) => {
  let { state, pos } = context, node = syntaxTree(state).resolveInner(pos, -1);
  let isDash = node.type.isError && node.from == node.to - 1 && state.doc.sliceString(node.from, node.to) == "-";
  if (node.name == "PropertyName" || (isDash || node.name == "TagName") && /^(Block|Styles)$/.test(node.resolve(node.to).name))
    return { from: node.from, options: properties(), validFor: identifier2 };
  if (node.name == "ValueName")
    return { from: node.from, options: values, validFor: identifier2 };
  if (node.name == "PseudoClassName")
    return { from: node.from, options: pseudoClasses, validFor: identifier2 };
  if (isVariable(node) || (context.explicit || isDash) && isVarArg(node, state.doc))
    return {
      from: isVariable(node) || isDash ? node.from : pos,
      options: variableNames(state.doc, astTop(node), isVariable),
      validFor: variable
    };
  if (node.name == "TagName") {
    for (let { parent } = node; parent; parent = parent.parent)
      if (parent.name == "Block")
        return { from: node.from, options: properties(), validFor: identifier2 };
    return { from: node.from, options: tags2, validFor: identifier2 };
  }
  if (!context.explicit)
    return null;
  let above = node.resolve(pos), before = above.childBefore(pos);
  if (before && before.name == ":" && above.name == "PseudoClassSelector")
    return { from: pos, options: pseudoClasses, validFor: identifier2 };
  if (before && before.name == ":" && above.name == "Declaration" || above.name == "ArgList")
    return { from: pos, options: values, validFor: identifier2 };
  if (above.name == "Block" || above.name == "Styles")
    return { from: pos, options: properties(), validFor: identifier2 };
  return null;
};
var cssCompletionSource = /* @__PURE__ */ defineCSSCompletionSource((n2) => n2.name == "VariableName");
var cssLanguage = /* @__PURE__ */ LRLanguage.define({
  name: "css",
  parser: /* @__PURE__ */ parser3.configure({
    props: [
      /* @__PURE__ */ indentNodeProp.add({
        Declaration: /* @__PURE__ */ continuedIndent()
      }),
      /* @__PURE__ */ foldNodeProp.add({
        "Block KeyframeList": foldInside
      })
    ]
  }),
  languageData: {
    commentTokens: { block: { open: "/*", close: "*/" } },
    indentOnInput: /^\s*\}$/,
    wordChars: "-"
  }
});
function css() {
  return new LanguageSupport(cssLanguage, cssLanguage.data.of({ autocomplete: cssCompletionSource }));
}

// node_modules/@lezer/javascript/dist/index.js
var noSemi = 312;
var incdec = 1;
var incdecPrefix = 2;
var questionDot = 3;
var JSXStartTag = 4;
var insertSemi = 313;
var spaces = 315;
var newline2 = 316;
var LineComment = 5;
var BlockComment = 6;
var Dialect_jsx = 0;
var space3 = [
  9,
  10,
  11,
  12,
  13,
  32,
  133,
  160,
  5760,
  8192,
  8193,
  8194,
  8195,
  8196,
  8197,
  8198,
  8199,
  8200,
  8201,
  8202,
  8232,
  8233,
  8239,
  8287,
  12288
];
var braceR = 125;
var semicolon = 59;
var slash2 = 47;
var star = 42;
var plus = 43;
var minus = 45;
var lt = 60;
var comma = 44;
var question2 = 63;
var dot = 46;
var trackNewline = new ContextTracker({
  start: false,
  shift(context, term) {
    return term == LineComment || term == BlockComment || term == spaces ? context : term == newline2;
  },
  strict: false
});
var insertSemicolon = new ExternalTokenizer((input, stack) => {
  let { next } = input;
  if (next == braceR || next == -1 || stack.context)
    input.acceptToken(insertSemi);
}, { contextual: true, fallback: true });
var noSemicolon = new ExternalTokenizer((input, stack) => {
  let { next } = input, after;
  if (space3.indexOf(next) > -1) return;
  if (next == slash2 && ((after = input.peek(1)) == slash2 || after == star)) return;
  if (next != braceR && next != semicolon && next != -1 && !stack.context)
    input.acceptToken(noSemi);
}, { contextual: true });
var operatorToken = new ExternalTokenizer((input, stack) => {
  let { next } = input;
  if (next == plus || next == minus) {
    input.advance();
    if (next == input.next) {
      input.advance();
      let mayPostfix = !stack.context && stack.canShift(incdec);
      input.acceptToken(mayPostfix ? incdec : incdecPrefix);
    }
  } else if (next == question2 && input.peek(1) == dot) {
    input.advance();
    input.advance();
    if (input.next < 48 || input.next > 57)
      input.acceptToken(questionDot);
  }
}, { contextual: true });
function identifierChar(ch2, start) {
  return ch2 >= 65 && ch2 <= 90 || ch2 >= 97 && ch2 <= 122 || ch2 == 95 || ch2 >= 192 || !start && ch2 >= 48 && ch2 <= 57;
}
var jsx = new ExternalTokenizer((input, stack) => {
  if (input.next != lt || !stack.dialectEnabled(Dialect_jsx)) return;
  input.advance();
  if (input.next == slash2) return;
  let back = 0;
  while (space3.indexOf(input.next) > -1) {
    input.advance();
    back++;
  }
  if (identifierChar(input.next, true)) {
    input.advance();
    back++;
    while (identifierChar(input.next, false)) {
      input.advance();
      back++;
    }
    while (space3.indexOf(input.next) > -1) {
      input.advance();
      back++;
    }
    if (input.next == comma) return;
    for (let i2 = 0; ; i2++) {
      if (i2 == 7) {
        if (!identifierChar(input.next, true)) return;
        break;
      }
      if (input.next != "extends".charCodeAt(i2)) break;
      input.advance();
      back++;
    }
  }
  input.acceptToken(JSXStartTag, -back);
});
var jsHighlight = styleTags({
  "get set async static": tags.modifier,
  "for while do if else switch try catch finally return throw break continue default case": tags.controlKeyword,
  "in of await yield void typeof delete instanceof": tags.operatorKeyword,
  "let var const using function class extends": tags.definitionKeyword,
  "import export from": tags.moduleKeyword,
  "with debugger as new": tags.keyword,
  TemplateString: tags.special(tags.string),
  super: tags.atom,
  BooleanLiteral: tags.bool,
  this: tags.self,
  null: tags.null,
  Star: tags.modifier,
  VariableName: tags.variableName,
  "CallExpression/VariableName TaggedTemplateExpression/VariableName": tags.function(tags.variableName),
  VariableDefinition: tags.definition(tags.variableName),
  Label: tags.labelName,
  PropertyName: tags.propertyName,
  PrivatePropertyName: tags.special(tags.propertyName),
  "CallExpression/MemberExpression/PropertyName": tags.function(tags.propertyName),
  "FunctionDeclaration/VariableDefinition": tags.function(tags.definition(tags.variableName)),
  "ClassDeclaration/VariableDefinition": tags.definition(tags.className),
  PropertyDefinition: tags.definition(tags.propertyName),
  PrivatePropertyDefinition: tags.definition(tags.special(tags.propertyName)),
  UpdateOp: tags.updateOperator,
  "LineComment Hashbang": tags.lineComment,
  BlockComment: tags.blockComment,
  Number: tags.number,
  String: tags.string,
  Escape: tags.escape,
  ArithOp: tags.arithmeticOperator,
  LogicOp: tags.logicOperator,
  BitOp: tags.bitwiseOperator,
  CompareOp: tags.compareOperator,
  RegExp: tags.regexp,
  Equals: tags.definitionOperator,
  Arrow: tags.function(tags.punctuation),
  ": Spread": tags.punctuation,
  "( )": tags.paren,
  "[ ]": tags.squareBracket,
  "{ }": tags.brace,
  "InterpolationStart InterpolationEnd": tags.special(tags.brace),
  ".": tags.derefOperator,
  ", ;": tags.separator,
  "@": tags.meta,
  TypeName: tags.typeName,
  TypeDefinition: tags.definition(tags.typeName),
  "type enum interface implements namespace module declare": tags.definitionKeyword,
  "abstract global Privacy readonly override": tags.modifier,
  "is keyof unique infer": tags.operatorKeyword,
  JSXAttributeValue: tags.attributeValue,
  JSXText: tags.content,
  "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": tags.angleBracket,
  "JSXIdentifier JSXNameSpacedName": tags.tagName,
  "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": tags.attributeName,
  "JSXBuiltin/JSXIdentifier": tags.standard(tags.tagName)
});
var spec_identifier2 = { __proto__: null, export: 20, as: 25, from: 33, default: 36, async: 41, function: 42, extends: 54, this: 58, true: 66, false: 66, null: 78, void: 82, typeof: 86, super: 102, new: 136, delete: 148, yield: 157, await: 161, class: 166, public: 229, private: 229, protected: 229, readonly: 231, instanceof: 250, satisfies: 253, in: 254, const: 256, import: 290, keyof: 345, unique: 349, infer: 355, is: 391, abstract: 411, implements: 413, type: 415, let: 418, var: 420, using: 423, interface: 429, enum: 433, namespace: 439, module: 441, declare: 445, global: 449, for: 468, of: 477, while: 480, with: 484, do: 488, if: 492, else: 494, switch: 498, case: 504, try: 510, catch: 514, finally: 518, return: 522, throw: 526, break: 530, continue: 534, debugger: 538 };
var spec_word = { __proto__: null, async: 123, get: 125, set: 127, declare: 189, public: 191, private: 191, protected: 191, static: 193, abstract: 195, override: 197, readonly: 203, accessor: 205, new: 395 };
var spec_LessThan = { __proto__: null, "<": 187 };
var parser4 = LRParser.deserialize({
  version: 14,
  states: "$@QO%TQ^OOO%[Q^OOO'_Q`OOP(lOWOOO*zQ?NdO'#CiO+RO!bO'#CjO+aO#tO'#CjO+oO!0LbO'#D^O.QQ^O'#DdO.bQ^O'#DoO%[Q^O'#DwO0fQ^O'#EPOOQ?Mr'#EX'#EXO1PQWO'#EUOOQO'#Em'#EmOOQO'#Ih'#IhO1XQWO'#GpO1dQWO'#ElO1iQWO'#ElO3hQ?NdO'#JmO6[Q?NdO'#JnO6uQWO'#F[O6zQ&jO'#FsOOQ?Mr'#Fe'#FeO7VO,YO'#FeO7eQ7[O'#FzO9RQWO'#FyOOQ?Mr'#Jn'#JnOOQ?Mp'#Jm'#JmO9WQWO'#GtOOQU'#KZ'#KZO9cQWO'#IUO9hQ?MxO'#IVOOQU'#JZ'#JZOOQU'#IZ'#IZQ`Q^OOO`Q^OOO9pQMnO'#DsO9wQ^O'#D{O:OQ^O'#D}O9^QWO'#GpO:VQ7[O'#CoO:eQWO'#EkO:pQWO'#EvO:uQ7[O'#FdO;dQWO'#GpOOQO'#K['#K[O;iQWO'#K[O;wQWO'#GxO;wQWO'#GyO;wQWO'#G{O9^QWO'#HOO<nQWO'#HRO>VQWO'#CeO>gQWO'#H_O>oQWO'#HeO>oQWO'#HgO`Q^O'#HiO>oQWO'#HkO>oQWO'#HnO>tQWO'#HtO>yQ?MyO'#HzO%[Q^O'#H|O?UQ?MyO'#IOO?aQ?MyO'#IQO9hQ?MxO'#ISO?lQ?NdO'#CiO@nQ`O'#DiQOQWOOO%[Q^O'#D}OAUQWO'#EQO:VQ7[O'#EkOAaQWO'#EkOAlQpO'#FdOOQU'#Cg'#CgOOQ?Mp'#Dn'#DnOOQ?Mp'#Jq'#JqO%[Q^O'#JqOOQO'#Jt'#JtOOQO'#Id'#IdOBlQ`O'#EdOOQ?Mp'#Ec'#EcOOQ?Mp'#Jx'#JxOChQ?NQO'#EdOCrQ`O'#ETOOQO'#Js'#JsODWQ`O'#JtOEeQ`O'#ETOCrQ`O'#EdPErO#@ItO'#CbPOOO)CDx)CDxOOOO'#I['#I[OE}O!bO,59UOOQ?Mr,59U,59UOOOO'#I]'#I]OF]O#tO,59UO%[Q^O'#D`OOOO'#I_'#I_OFkO!0LbO,59xOOQ?Mr,59x,59xOFyQ^O'#I`OG^QWO'#JoOI]QrO'#JoO+}Q^O'#JoOIdQWO,5:OOIzQWO'#EmOJXQWO'#KOOJdQWO'#J}OJdQWO'#J}OJlQWO,5;ZOJqQWO'#J|OOQ?Mv,5:Z,5:ZOJxQ^O,5:ZOLvQ?NdO,5:cOMgQWO,5:kONQQ?MxO'#J{ONXQWO'#JzO9WQWO'#JzONmQWO'#JzONuQWO,5;YONzQWO'#JzO!#PQrO'#JnOOQ?Mr'#Ci'#CiO%[Q^O'#EPO!#oQrO,5:pOOQQ'#Ju'#JuOOQO-E<f-E<fO9^QWO,5=[O!$VQWO,5=[O!$[Q^O,5;WO!&_Q7[O'#EhO!'xQWO,5;WO!'}Q^O'#DvO!(XQ`O,5;aO!(aQ`O,5;aO%[Q^O,5;aOOQU'#FS'#FSOOQU'#FU'#FUO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bOOQU'#FY'#FYO!(oQ^O,5;sOOQ?Mr,5;x,5;xOOQ?Mr,5;y,5;yOOQ?Mr,5;{,5;{O%[Q^O'#IlO!*rQ?MxO,5<gO%[Q^O,5;bO!&_Q7[O,5;bO!+aQ7[O,5;bO!-RQ7[O'#EZO%[Q^O,5;vOOQ?Mr,5;z,5;zO!-YQ&jO'#FiO!.VQ&jO'#KSO!-qQ&jO'#KSO!.^Q&jO'#KSOOQO'#KS'#KSO!.rQ&jO,5<ROOOS,5<_,5<_O!/TQ^O'#FuOOOS'#Ik'#IkO7VO,YO,5<PO!/[Q&jO'#FwOOQ?Mr,5<P,5<PO!/{Q!LQO'#CvOOQ?Mr'#Cz'#CzO!0`O!0LbO'#DOO!0|Q7[O,5<dO!1TQWO,5<fO!2pQ$ISO'#GVO!2}QWO'#GWO!3SQWO'#GWO!4rQ$ISO'#G[O!5nQ`O'#G`OOQO'#Gk'#GkO!+hQ7[O'#GjOOQO'#Gm'#GmO!+hQ7[O'#GlO!6aQ!LQO'#JgOOQ?Mr'#Jg'#JgO!6kQWO'#JfO!6yQWO'#JeO!7RQWO'#CuOOQ?Mr'#Cx'#CxO!7ZQWO'#CzOOQ?Mr'#DS'#DSOOQ?Mr'#DU'#DUO1SQWO'#DWO!+hQ7[O'#F}O!+hQ7[O'#GPO!7`QWO'#GRO!7eQWO'#GSO!3SQWO'#GYO!+hQ7[O'#G_O!7jQWO'#EnO!8XQWO,5<eOOQ?Mp'#Cr'#CrO!8aQWO'#EoO!9ZQ`O'#EpOOQ?Mp'#J|'#J|O!9bQ?MxO'#K]O9hQ?MxO,5=`O`Q^O,5>pOOQU'#Jc'#JcOOQU,5>q,5>qOOQU-E<X-E<XO!;aQ?NdO,5:_O!9UQ`O,5:]O!=zQ?NdO,5:gO%[Q^O,5:gO!@bQ?NdO,5:iOOQO,5@v,5@vO!ARQ7[O,5=[O!AaQ?MxO'#JdO9RQWO'#JdO!ArQ?MxO,59ZO!A}Q`O,59ZO!BVQ7[O,59ZO:VQ7[O,59ZO!BbQWO,5;WO!BjQWO'#H^O!COQWO'#K`O%[Q^O,5;|O!9UQ`O,5<OO!CWQWO,5=wO!C]QWO,5=wO!CbQWO,5=wO9hQ?MxO,5=wO;wQWO,5=gOOQO'#Cv'#CvO!CpQ`O,5=dO!CxQ7[O,5=eO!DTQWO,5=gO!DYQpO,5=jO!DbQWO'#K[O>tQWO'#HTO9^QWO'#HVO!DgQWO'#HVO:VQ7[O'#HXO!DlQWO'#HXOOQU,5=m,5=mO!DqQWO'#HYO!ESQWO'#CoO!EXQWO,59PO!EcQWO,59PO!GhQ^O,59POOQU,59P,59PO!GxQ?MxO,59PO%[Q^O,59PO!JTQ^O'#HaOOQU'#Hb'#HbOOQU'#Hc'#HcO`Q^O,5=yO!JkQWO,5=yO`Q^O,5>PO`Q^O,5>RO!JpQWO,5>TO`Q^O,5>VO!JuQWO,5>YO!JzQ^O,5>`OOQU,5>f,5>fO%[Q^O,5>fO9hQ?MxO,5>hOOQU,5>j,5>jO# UQWO,5>jOOQU,5>l,5>lO# UQWO,5>lOOQU,5>n,5>nO# rQ`O'#D[O%[Q^O'#JqO# |Q`O'#JqO#!kQ`O'#DjO#!|Q`O'#DjO#%_Q^O'#DjO#%fQWO'#JpO#%nQWO,5:TO#%sQWO'#EqO#&RQWO'#KPO#&ZQWO,5;[O#&`Q`O'#DjO#&mQ`O'#ESOOQ?Mr,5:l,5:lO%[Q^O,5:lO#&tQWO,5:lO>tQWO,5;VO!A}Q`O,5;VO!BVQ7[O,5;VO:VQ7[O,5;VO#&|QWO,5@]O#'RQ(CYO,5:pOOQO-E<b-E<bO#(XQ?NQO,5;OOCrQ`O,5:oO#(cQ`O,5:oOCrQ`O,5;OO!ArQ?MxO,5:oOOQ?Mp'#Eg'#EgOOQO,5;O,5;OO%[Q^O,5;OO#(pQ?MxO,5;OO#({Q?MxO,5;OO!A}Q`O,5:oOOQO,5;U,5;UO#)ZQ?MxO,5;OPOOO'#IY'#IYP#)oO#@ItO,58|POOO,58|,58|OOOO-E<Y-E<YOOQ?Mr1G.p1G.pOOOO-E<Z-E<ZO#)zQpO,59zOOOO-E<]-E<]OOQ?Mr1G/d1G/dO#*PQrO,5>zO+}Q^O,5>zOOQO,5?Q,5?QO#*ZQ^O'#I`OOQO-E<^-E<^O#*hQWO,5@ZO#*pQrO,5@ZO#*wQWO,5@iOOQ?Mr1G/j1G/jO%[Q^O,5@jO#+PQWO'#IfOOQO-E<d-E<dO#*wQWO,5@iOOQ?Mp1G0u1G0uOOQ?Mv1G/u1G/uOOQ?Mv1G0V1G0VO%[Q^O,5@gO#+eQ?MxO,5@gO#+vQ?MxO,5@gO#+}QWO,5@fO9WQWO,5@fO#,VQWO,5@fO#,eQWO'#IiO#+}QWO,5@fOOQ?Mp1G0t1G0tO!(XQ`O,5:rO!(dQ`O,5:rOOQQ,5:t,5:tO#-VQYO,5:tO#-_Q7[O1G2vO9^QWO1G2vOOQ?Mr1G0r1G0rO#-mQ?NdO1G0rO#.rQ?NbO,5;SOOQ?Mr'#GU'#GUO#/`Q?NdO'#JgO!$[Q^O1G0rO#1hQrO'#JrO%[Q^O'#JrO#1rQWO,5:bOOQ?Mr'#D['#D[OOQ?Mr1G0{1G0{O%[Q^O1G0{OOQ?Mr1G1e1G1eO#1wQWO1G0{O#4]Q?NdO1G0|O#4dQ?NdO1G0|O#6zQ?NdO1G0|O#7RQ?NdO1G0|O#9iQ?NdO1G0|O#<PQ?NdO1G0|O#<WQ?NdO1G0|O#<_Q?NdO1G0|O#>uQ?NdO1G0|O#>|Q?NdO1G0|O#AZQ07bO'#CiO#CUQ07bO1G1_O#C]Q07bO'#JnO#CpQ?NdO,5?WOOQ?Mp-E<j-E<jO#E}Q?NdO1G0|O#FzQ?NdO1G0|OOQ?Mr1G0|1G0|O#GzQ7[O'#JwO#HUQWO,5:uO#HZQ?NdO1G1bO#H}Q&jO,5<VO#IVQ&jO,5<WO#I_Q&jO'#FnO#IvQWO'#FmOOQO'#KT'#KTOOQO'#Ij'#IjO#I{Q&jO1G1mOOQ?Mr1G1m1G1mOOOS1G1x1G1xO#J^Q07bO'#JmO#JhQWO,5<aO!(oQ^O,5<aOOOS-E<i-E<iOOQ?Mr1G1k1G1kO#JmQ`O'#KSOOQ?Mr,5<c,5<cO#JuQ`O,5<cO!&_Q7[O'#DQOOOO'#I^'#I^O#JzO!0LbO,59jOOQ?Mr,59j,59jO%[Q^O1G2OO!7eQWO'#InO#KVQ7[O,5<xOOQ?Mr,5<u,5<uO!+hQ7[O'#IqO#KuQ7[O,5=UO!+hQ7[O'#IsO#LhQ7[O,5=WO!&_Q7[O,5=YOOQO1G2Q1G2QO#LrQpO'#CrO#MVQ$ISO'#EoO#NUQ`O'#G`O#NrQpO,5<qO#NyQWO'#KWO9WQWO'#KWO$ XQWO,5<sO!+hQ7[O,5<rO$ ^QWO'#GXO$ oQWO,5<rO$ tQpO'#GUO$!RQpO'#KXO$!]QWO'#KXO!&_Q7[O'#KXO$!bQWO,5<vO$!gQ`O'#GaO!5iQ`O'#GaO$!xQWO'#GcO$!}QWO'#GeO!3SQWO'#GhO$#SQ?MxO'#IpO$#_Q`O,5<zOOQ?Mv,5<z,5<zO$#fQ`O'#GaO$#tQ`O'#GbO$#|Q`O'#GbO$$RQ7[O,5=UO$$cQ7[O,5=WOOQ?Mr,5=Z,5=ZO!+hQ7[O,5@QO!+hQ7[O,5@QO$$sQWO'#IuO$%OQWO,5@PO$%WQWO,59aOOQ?Mr,59f,59fO$%zQ!LSO,59rOOQ?Mr'#Jk'#JkO$&mQ7[O,5<iO$'`Q7[O,5<kO@fQWO,5<mOOQ?Mr,5<n,5<nO$'jQWO,5<tO$'oQ7[O,5<yO$(PQWO'#JzO!$[Q^O1G2PO$(UQWO1G2PO9WQWO'#J}O9WQWO'#EqO%[Q^O'#EqO9WQWO'#IwO$(ZQ?MxO,5@wOOQU1G2z1G2zOOQU1G4[1G4[OOQ?Mr1G/y1G/yOOQ?Mr1G/w1G/wO$*]Q?NdO1G0ROOQU1G2v1G2vO!&_Q7[O1G2vO%[Q^O1G2vO#-bQWO1G2vO$,aQ7[O'#EhOOQ?Mp,5@O,5@OO$,kQ?MxO,5@OOOQU1G.u1G.uO!ArQ?MxO1G.uO!A}Q`O1G.uO!BVQ7[O1G.uO$,|QWO1G0rO$-RQWO'#CiO$-^QWO'#KaO$-fQWO,5=xO$-kQWO'#KaO$-pQWO'#KaO$.OQWO'#I}O$.^QWO,5@zO$.fQrO1G1hOOQ?Mr1G1j1G1jO9^QWO1G3cO@fQWO1G3cO$.mQWO1G3cO$.rQWO1G3cOOQU1G3c1G3cO!DTQWO1G3RO!&_Q7[O1G3OO$.wQWO1G3OOOQU1G3P1G3PO!&_Q7[O1G3PO$.|QWO1G3PO$/UQ`O'#G}OOQU1G3R1G3RO!5iQ`O'#IyO!DYQpO1G3UOOQU1G3U1G3UOOQU,5=o,5=oO$/^Q7[O,5=qO9^QWO,5=qO$!}QWO,5=sO9RQWO,5=sO!A}Q`O,5=sO!BVQ7[O,5=sO:VQ7[O,5=sO$/lQWO'#K_O$/wQWO,5=tOOQU1G.k1G.kO$/|Q?MxO1G.kO@fQWO1G.kO$0XQWO1G.kO9hQ?MxO1G.kO$2aQrO,5@|O$2nQWO,5@|O9WQWO,5@|O$2yQ^O,5={O$3QQWO,5={OOQU1G3e1G3eO`Q^O1G3eOOQU1G3k1G3kOOQU1G3m1G3mO>oQWO1G3oO$3VQ^O1G3qO$7ZQ^O'#HpOOQU1G3t1G3tO$7hQWO'#HvO>tQWO'#HxOOQU1G3z1G3zO$7pQ^O1G3zO9hQ?MxO1G4QOOQU1G4S1G4SOOQ?Mp'#G]'#G]O9hQ?MxO1G4UO9hQ?MxO1G4WO$;wQWO,5@]O!(oQ^O,5;]O9WQWO,5;]O>tQWO,5:UO!(oQ^O,5:UO!A}Q`O,5:UO$;|Q07bO,5:UOOQO,5;],5;]O$<WQ`O'#IaO$<nQWO,5@[OOQ?Mr1G/o1G/oO$<vQ`O'#IgO$=QQWO,5@kOOQ?Mp1G0v1G0vO#!|Q`O,5:UOOQO'#Ic'#IcO$=YQ`O,5:nOOQ?Mv,5:n,5:nO#&wQWO1G0WOOQ?Mr1G0W1G0WO%[Q^O1G0WOOQ?Mr1G0q1G0qO>tQWO1G0qO!A}Q`O1G0qO!BVQ7[O1G0qOOQ?Mp1G5w1G5wO!ArQ?MxO1G0ZOOQO1G0j1G0jO%[Q^O1G0jO$=aQ?MxO1G0jO$=lQ?MxO1G0jO!A}Q`O1G0ZOCrQ`O1G0ZO$=zQ?MxO1G0jOOQO1G0Z1G0ZO$>`Q?NdO1G0jPOOO-E<W-E<WPOOO1G.h1G.hOOOO1G/f1G/fO$>jQpO,5<gO$>rQrO1G4fOOQO1G4l1G4lO%[Q^O,5>zO$>|QWO1G5uO$?UQWO1G6TO$?^QrO1G6UO9WQWO,5?QO$?hQ?NdO1G6RO%[Q^O1G6RO$?xQ?MxO1G6RO$@ZQWO1G6QO$@ZQWO1G6QO9WQWO1G6QO$@cQWO,5?TO9WQWO,5?TOOQO,5?T,5?TO$@wQWO,5?TO$(PQWO,5?TOOQO-E<g-E<gOOQQ1G0^1G0^OOQQ1G0`1G0`O#-YQWO1G0`OOQU7+(b7+(bO!&_Q7[O7+(bO%[Q^O7+(bO$AVQWO7+(bO$AbQ7[O7+(bO$ApQ?NdO,5=UO$CxQ?NdO,5=WO$FQQ?NdO,5=UO$H`Q?NdO,5=WO$JnQ?NdO,59rO$LsQ?NdO,5<iO$N{Q?NdO,5<kO%#TQ?NdO,5<yOOQ?Mr7+&^7+&^O%%cQ?NdO7+&^O%&VQ^O'#IbO%&dQWO,5@^O%&lQrO,5@^OOQ?Mr1G/|1G/|O%&vQWO7+&gOOQ?Mr7+&g7+&gO%&{Q07bO,5:cO%[Q^O7+&yO%'VQ07bO,5:_O%'dQ07bO,5:gO%'nQ07bO,5:iO%'xQ7[O'#IeO%(SQWO,5@cOOQ?Mr1G0a1G0aOOQO1G1q1G1qOOQO1G1r1G1rO%([QtO,5<YO!(oQ^O,5<XOOQO-E<h-E<hOOQ?Mr7+'X7+'XOOOS7+'d7+'dOOOS1G1{1G1{O%(gQWO1G1{OOQ?Mr1G1}1G1}O%(lQpO,59lOOOO-E<[-E<[OOQ?Mr1G/U1G/UO%(sQ?NdO7+'jOOQ?Mr,5?Y,5?YO%)gQpO,5?YOOQ?Mr1G2d1G2dP!&_Q7[O'#InPOQ?Mr-E<l-E<lO%*VQ7[O,5?]OOQ?Mr-E<o-E<oO%*xQ7[O,5?_OOQ?Mr-E<q-E<qO%+SQpO1G2tO%+ZQpO'#CrO%+qQ7[O'#J}O%+xQ^O'#EqOOQ?Mr1G2]1G2]O%,SQWO'#ImO%,hQWO,5@rO%,hQWO,5@rO%,pQWO,5@rO%,{QWO,5@rOOQO1G2_1G2_O%-ZQ7[O1G2^O!+hQ7[O1G2^O%-kQ$ISO'#IoO%-xQWO,5@sO!&_Q7[O,5@sO%.QQpO,5@sOOQ?Mr1G2b1G2bOOQ?Mp,5<{,5<{OOQ?Mp,5<|,5<|O$(PQWO,5<|OCcQWO,5<|O!A}Q`O,5<{OOQO'#Gd'#GdO%.[QWO,5<}OOQ?Mp,5=P,5=PO$(PQWO,5=SOOQO,5?[,5?[OOQO-E<n-E<nOOQ?Mv1G2f1G2fO!5iQ`O,5<{O%.dQWO,5<|O$!xQWO,5<}O%.oQ`O,5<|O!+hQ7[O'#IqO%/`Q7[O1G2pO!+hQ7[O'#IsO%0RQ7[O1G2rO%0]Q7[O1G5lO%0gQ7[O1G5lOOQO,5?a,5?aOOQO-E<s-E<sOOQO1G.{1G.{O!9UQ`O,59tO%[Q^O,59tOOQ?Mr,5<h,5<hO%0tQWO1G2XO!+hQ7[O1G2`O%0yQ?NdO7+'kOOQ?Mr7+'k7+'kO!$[Q^O7+'kO%1mQWO,5;]OOQ?Mp,5?c,5?cOOQ?Mp-E<u-E<uO%1rQpO'#KYO#&wQWO7+(bO4UQrO7+(bO$AYQWO7+(bO%1|Q?NbO'#CiO%2aQ?NbO,5=QO%3RQWO,5=QOOQ?Mp1G5j1G5jOOQU7+$a7+$aO!ArQ?MxO7+$aO!A}Q`O7+$aO!$[Q^O7+&^O%3WQWO'#I|O%3oQWO,5@{OOQO1G3d1G3dO9^QWO,5@{O%3oQWO,5@{O%3wQWO,5@{OOQO,5?i,5?iOOQO-E<{-E<{OOQ?Mr7+'S7+'SO%3|QWO7+(}O9hQ?MxO7+(}O9^QWO7+(}O@fQWO7+(}OOQU7+(m7+(mO%4RQ?NbO7+(jO!&_Q7[O7+(jO%4]QpO7+(kOOQU7+(k7+(kO!&_Q7[O7+(kO%4dQWO'#K^O%4oQWO,5=iOOQO,5?e,5?eOOQO-E<w-E<wOOQU7+(p7+(pO%6RQ`O'#HWOOQU1G3]1G3]O!&_Q7[O1G3]O%[Q^O1G3]O%6YQWO1G3]O%6eQ7[O1G3]O9hQ?MxO1G3_O$!}QWO1G3_O9RQWO1G3_O!A}Q`O1G3_O!BVQ7[O1G3_O%6sQWO'#I{O%7XQWO,5@yO%7aQ`O,5@yOOQ?Mp1G3`1G3`OOQU7+$V7+$VO@fQWO7+$VO9hQ?MxO7+$VO%7lQWO7+$VO%[Q^O1G6hO%[Q^O1G6iO%7qQ?MxO1G6hO%7{Q^O1G3gO%8SQWO1G3gO%8XQ^O1G3gOOQU7+)P7+)PO9hQ?MxO7+)ZO`Q^O7+)]OOQU'#Kd'#KdOOQU'#JO'#JOO%8`Q^O,5>[OOQU,5>[,5>[O%[Q^O'#HqO%8mQWO'#HsOOQU,5>b,5>bO9WQWO,5>bOOQU,5>d,5>dOOQU7+)f7+)fOOQU7+)l7+)lOOQU7+)p7+)pOOQU7+)r7+)rO%8rQ`O1G5wO%9WQ07bO1G0wO%9bQWO1G0wOOQO1G/p1G/pO%9mQ07bO1G/pO>tQWO1G/pO!(oQ^O'#DjOOQO,5>{,5>{OOQO-E<_-E<_OOQO,5?R,5?ROOQO-E<e-E<eO!A}Q`O1G/pOOQO-E<a-E<aOOQ?Mv1G0Y1G0YOOQ?Mr7+%r7+%rO#&wQWO7+%rOOQ?Mr7+&]7+&]O>tQWO7+&]O!A}Q`O7+&]OOQO7+%u7+%uO$>`Q?NdO7+&UOOQO7+&U7+&UO%[Q^O7+&UO%9wQ?MxO7+&UO!ArQ?MxO7+%uO!A}Q`O7+%uO%:SQ?MxO7+&UO%:bQ?NdO7++mO%[Q^O7++mO%:rQWO7++lO%:rQWO7++lOOQO1G4o1G4oO9WQWO1G4oO%:zQWO1G4oOOQQ7+%z7+%zO#&wQWO<<K|O4UQrO<<K|O%;YQWO<<K|OOQU<<K|<<K|O!&_Q7[O<<K|O%[Q^O<<K|O%;bQWO<<K|O%;mQ?NdO,5?]O%=uQ?NdO,5?_O%?}Q?NdO1G2^O%B]Q?NdO1G2pO%DeQ?NdO1G2rO%FmQrO,5>|O%[Q^O,5>|OOQO-E<`-E<`O%FwQWO1G5xOOQ?Mr<<JR<<JRO%GPQ07bO1G0rO%IWQ07bO1G0|O%I_Q07bO1G0|O%K`Q07bO1G0|O%KgQ07bO1G0|O%MhQ07bO1G0|O& iQ07bO1G0|O& pQ07bO1G0|O& wQ07bO1G0|O&#xQ07bO1G0|O&$PQ07bO1G0|O&$WQ?NdO<<JeO&&OQ07bO1G0|O&&{Q07bO1G0|O&'{Q07bO'#JgO&*OQ07bO1G1bO&*]Q07bO1G0RO&*gQ7[O,5?POOQO-E<c-E<cO!(oQ^O'#FpOOQO'#KU'#KUOOQO1G1t1G1tO&*qQWO1G1sO&*vQ07bO,5?WOOOS7+'g7+'gOOOO1G/W1G/WOOQ?Mr1G4t1G4tO!+hQ7[O7+(`O&-WQrO'#CiO&-bQWO,5?XO9WQWO,5?XOOQO-E<k-E<kO&-pQWO1G6^O&-pQWO1G6^O&-xQWO1G6^O&.TQ7[O7+'xO&.eQpO,5?ZO&.oQWO,5?ZO!&_Q7[O,5?ZOOQO-E<m-E<mO&.tQpO1G6_O&/OQWO1G6_OOQ?Mp1G2h1G2hO$(PQWO1G2hOOQ?Mp1G2g1G2gO&/WQWO1G2iO!&_Q7[O1G2iOOQ?Mp1G2n1G2nO!A}Q`O1G2gOCcQWO1G2hO&/]QWO1G2iO&/eQWO1G2hO$!xQWO1G2iO&0XQ7[O,5?]OOQ?Mr-E<p-E<pO&0zQ7[O,5?_OOQ?Mr-E<r-E<rO!+hQ7[O7++WOOQ?Mr1G/`1G/`O&1UQWO1G/`OOQ?Mr7+'s7+'sO&1ZQ7[O7+'zO&1kQ?NdO<<KVOOQ?Mr<<KV<<KVO&2_QWO1G0wO!&_Q7[O'#IvO&2dQWO,5@tO&4fQrO<<K|O!&_Q7[O1G2lOOQU<<G{<<G{O!ArQ?MxO<<G{O&4mQ?NdO<<IxOOQ?Mr<<Ix<<IxOOQO,5?h,5?hO&5aQWO,5?hO&5fQWO,5?hOOQO-E<z-E<zO&5tQWO1G6gO&5tQWO1G6gO9^QWO1G6gO@fQWO<<LiOOQU<<Li<<LiO&5|QWO<<LiO9hQ?MxO<<LiOOQU<<LU<<LUO%4RQ?NbO<<LUOOQU<<LV<<LVO%4]QpO<<LVO&6RQ`O'#IxO&6^QWO,5@xO!(oQ^O,5@xOOQU1G3T1G3TO%+xQ^O'#JqOOQO'#Iz'#IzO9hQ?MxO'#IzO&6fQ`O,5=rOOQU,5=r,5=rO&6mQ`O'#EdO&7RQ`O'#GcO&7WQWO7+(wO&7]QWO7+(wOOQU7+(w7+(wO!&_Q7[O7+(wO%[Q^O7+(wO&7eQWO7+(wOOQU7+(y7+(yO9hQ?MxO7+(yO$!}QWO7+(yO9RQWO7+(yO!A}Q`O7+(yO&7pQWO,5?gOOQO-E<y-E<yOOQO'#HZ'#HZO&7{QWO1G6eO9hQ?MxO<<GqOOQU<<Gq<<GqO@fQWO<<GqO&8TQWO7+,SO&8YQWO7+,TO%[Q^O7+,SO%[Q^O7+,TOOQU7+)R7+)RO&8_QWO7+)RO&8dQ^O7+)RO&8kQWO7+)ROOQU<<Lu<<LuOOQU<<Lw<<LwOOQU-E<|-E<|OOQU1G3v1G3vO&8pQWO,5>]OOQU,5>_,5>_O&8uQWO1G3|O9WQWO7+&cO!(oQ^O7+&cOOQO7+%[7+%[O&8zQ07bO1G6UO>tQWO7+%[OOQ?Mr<<I^<<I^OOQ?Mr<<Iw<<IwO>tQWO<<IwOOQO<<Ip<<IpO$>`Q?NdO<<IpO%[Q^O<<IpOOQO<<Ia<<IaO!ArQ?MxO<<IaO&9UQ?MxO<<IpO&9aQ?NdO<= XO&9qQWO<= WOOQO7+*Z7+*ZO9WQWO7+*ZOOQUANAhANAhO&9yQrOANAhO!&_Q7[OANAhO#&wQWOANAhO4UQrOANAhO&:QQWOANAhO%[Q^OANAhO&:YQ?NdO7+'xO&<hQ?NdO,5?]O&>pQ?NdO,5?_O&@xQ?NdO7+'zO&CWQrO1G4hO&CbQ07bO7+&^O&EcQ07bO,5=UO&GgQ07bO,5=WO&GwQ07bO,5=UO&HXQ07bO,5=WO&HiQ07bO,59rO&JlQ07bO,5<iO&LlQ07bO,5<kO&N}Q07bO,5<yO'!pQ07bO7+'jO'!}Q07bO7+'kO'#[QWO,5<[OOQO7+'_7+'_O'#aQ7[O<<KzOOQO1G4s1G4sO'#hQWO1G4sO'#sQWO1G4sO'$RQWO7++xO'$RQWO7++xO!&_Q7[O1G4uO'$ZQpO1G4uO'$eQWO7++yOOQ?Mp7+(S7+(SO'$mQWO7+(TO'$xQpO7+(TOOQ?Mp7+(R7+(RO$(PQWO7+(SO'%PQWO7+(TO!&_Q7[O7+(TOCcQWO7+(SO'%UQWO7+(TO'%^Q7[O<<NrOOQ?Mr7+$z7+$zO'%hQpO,5?bOOQO-E<t-E<tO'%rQ?NbO7+(WOOQUAN=gAN=gO9^QWO1G5SOOQO1G5S1G5SO'&SQWO1G5SO'&XQWO7+,RO'&XQWO7+,RO9hQ?MxOANBTO@fQWOANBTOOQUANBTANBTOOQUANApANApOOQUANAqANAqO'&aQWO,5?dOOQO-E<v-E<vO'&lQ07bO1G6dOOQO,5?f,5?fOOQO-E<x-E<xOOQU1G3^1G3^O%+xQ^O,5<}O'&vQWO,5<}OOQU<<Lc<<LcO!&_Q7[O<<LcO&7WQWO<<LcO'&{QWO<<LcO%[Q^O<<LcOOQU<<Le<<LeO9hQ?MxO<<LeO$!}QWO<<LeO9RQWO<<LeO''TQ`O1G5RO''`QWO7+,POOQUAN=]AN=]O9hQ?MxOAN=]OOQU<= n<= nOOQU<= o<= oO''hQWO<= nO''mQWO<= oOOQU<<Lm<<LmO''rQWO<<LmO''wQ^O<<LmOOQU1G3w1G3wO>tQWO7+)hO'(OQWO<<I}O'(ZQ07bO<<I}OOQO<<Hv<<HvOOQ?MrAN?cAN?cOOQOAN?[AN?[O$>`Q?NdOAN?[OOQOAN>{AN>{O%[Q^OAN?[OOQO<<Mu<<MuOOQUG27SG27SO!&_Q7[OG27SO#&wQWOG27SO'(eQrOG27SO4UQrOG27SO'(lQWOG27SO'(tQ07bO<<JeO')RQ07bO1G2^O'*tQ07bO,5?]O',tQ07bO,5?_O'.tQ07bO1G2pO'0tQ07bO1G2rO'2tQ07bO<<KVO'3RQ07bO<<IxOOQO1G1v1G1vO!+hQ7[OANAfOOQO7+*_7+*_O'3`QWO7+*_O'3kQWO<= dO'3sQpO7+*aOOQ?Mp<<Ko<<KoO$(PQWO<<KoOCcQWO<<KoO'3}QWO<<KoOOQ?Mp<<Kn<<KnO'4YQpO<<KoO$(PQWO<<KnO'4aQWO<<KoO!&_Q7[O<<KoOOQO7+*n7+*nO9^QWO7+*nO'4fQWO<= mOOQUG27oG27oO9hQ?MxOG27oO!(oQ^O1G5OO'4nQWO7+,OO&7WQWOANA}OOQUANA}ANA}O!&_Q7[OANA}O'4vQWOANA}OOQUANBPANBPO9hQ?MxOANBPO$!}QWOANBPOOQO'#H['#H[OOQO7+*m7+*mOOQUG22wG22wOOQUANEYANEYOOQUANEZANEZOOQUANBXANBXO'5OQWOANBXOOQU<<MS<<MSO!(oQ^OAN?iOOQOG24vG24vO$>`Q?NdOG24vO#&wQWOLD,nOOQULD,nLD,nO!&_Q7[OLD,nO'5TQrOLD,nO'5[Q07bO7+'xO'6}Q07bO,5?]O'8}Q07bO,5?_O':}Q07bO7+'zO'<pQ7[OG27QOOQO<<My<<MyOOQ?MpANAZANAZO$(PQWOANAZOCcQWOANAZO'=QQWOANAZOOQ?MpANAYANAYO'=]QpOANAZOOQO<<NY<<NYOOQULD-ZLD-ZO'=dQ07bO7+*jOOQUG27iG27iO&7WQWOG27iO!&_Q7[OG27iOOQUG27kG27kO9hQ?MxOG27kOOQUG27sG27sO'=nQ07bOG25TOOQOLD*bLD*bOOQU!$(!Y!$(!YO#&wQWO!$(!YO!&_Q7[O!$(!YO'=xQ?NdOG27QOOQ?MpG26uG26uO$(PQWOG26uOCcQWOG26uO'@WQWOG26uOOQULD-TLD-TO&7WQWOLD-TOOQULD-VLD-VOOQU!)9Et!)9EtO#&wQWO!)9EtOOQ?MpLD,aLD,aO$(PQWOLD,aOCcQWOLD,aOOQU!$(!o!$(!oOOQU!.K;`!.K;`O'@cQ07bOG27QOOQ?Mp!$( {!$( {O$(PQWO!$( {OOQ?Mp!)9Eg!)9EgO!(oQ^O'#DwO1PQWO'#EUO'BUQrO'#JmO'B]QMnO'#DsO'BdQ^O'#D{O'BkQrO'#CiO'ERQrO'#CiO!(oQ^O'#D}O'EcQ^O,5;WO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O'#IlO'GfQWO,5<gO!(oQ^O,5;bO'GnQ7[O,5;bO'IXQ7[O,5;bO!(oQ^O,5;vO!&_Q7[O'#GjO'GnQ7[O'#GjO!&_Q7[O'#GlO'GnQ7[O'#GlO1SQWO'#DWO1SQWO'#DWO!&_Q7[O'#F}O'GnQ7[O'#F}O!&_Q7[O'#GPO'GnQ7[O'#GPO!&_Q7[O'#G_O'GnQ7[O'#G_O!(oQ^O,5:gO'I`Q`O'#D[O!(oQ^O,5@jO'EcQ^O1G0rO'IjQ07bO'#CiO!(oQ^O1G2OO!&_Q7[O'#IqO'GnQ7[O'#IqO!&_Q7[O'#IsO'GnQ7[O'#IsO'ItQpO'#CrO!&_Q7[O,5<rO'GnQ7[O,5<rO'EcQ^O1G2PO!(oQ^O7+&yO!&_Q7[O1G2^O'GnQ7[O1G2^O!&_Q7[O'#IqO'GnQ7[O'#IqO!&_Q7[O'#IsO'GnQ7[O'#IsO!&_Q7[O1G2`O'GnQ7[O1G2`O'EcQ^O7+'kO'EcQ^O7+&^O!&_Q7[OANAfO'GnQ7[OANAfO'JXQWO'#ElO'J^QWO'#ElO'JfQWO'#F[O'JkQWO'#EvO'JpQWO'#KOO'J{QWO'#J|O'KWQWO,5;WO'K]Q7[O,5<dO'KdQWO'#GWO'KiQWO'#GWO'KnQWO,5<eO'KvQWO,5;WO'LOQ07bO1G1_O'LVQWO,5<rO'L[QWO,5<rO'LaQWO,5<tO'LfQWO,5<tO'LkQWO1G2PO'LpQWO1G0rO'LuQ7[O<<KzO'L|Q7[O<<KzO7eQ7[O'#FzO9RQWO'#FyOAaQWO'#EkO!(oQ^O,5;sO!3SQWO'#GWO!3SQWO'#GWO!3SQWO'#GYO!3SQWO'#GYO!+hQ7[O7+(`O!+hQ7[O7+(`O%+SQpO1G2tO%+SQpO1G2tO!&_Q7[O,5=YO!&_Q7[O,5=Y",
  stateData: "'NQ~O'wOS'xOSTOS'yRQ~OPYOQYOSfOY!VOaqOdzOeyOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![XO!fuO!iZO!lYO!mYO!nYO!pvO!rwO!uxO!y]O#t!PO$V|O%e}O%g!QO%i!OO%j!OO%k!OO%n!RO%p!SO%s!TO%t!TO%v!UO&S!WO&Y!XO&[!YO&^!ZO&`![O&c!]O&i!^O&o!_O&q!`O&s!aO&u!bO&w!cO(OSO(QTO(TUO([VO(j[O(yiO~OWtO~P`OPYOQYOSfOd!jOe!iOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![!eO!fuO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$V!kO(O!dO(QTO(TUO([VO(j[O(yiO~Oa!wOp!nO!P!oO!_!yO!`!vO!a!vO!y;QO#Q!pO#R!pO#S!xO#T!pO#U!pO#X!zO#Y!zO(P!lO(QTO(TUO(`!mO(j!sO~O'y!{O~OP]XR]X[]Xa]Xo]X}]X!P]X!Y]X!i]X!m]X#O]X#P]X#]]X#hfX#k]X#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#u]X#w]X#y]X#z]X$P]X'u]X([]X(m]X(t]X(u]X~O!d%PX~P(qO_!}O(Q#PO(R!}O(S#PO~O_#QO(S#PO(T#PO(U#QO~Ou#SO!R#TO(]#TO(^#VO~OPYOQYOSfOd!jOe!iOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![!eO!fuO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$V!kO(O;UO(QTO(TUO([VO(j[O(yiO~O!X#ZO!Y#WO!V(cP!V(qP~P+}O!Z#cO~P`OPYOQYOSfOd!jOe!iOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![!eO!fuO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$V!kO(QTO(TUO([VO(j[O(yiO~Om#mO!X#iO!y]O#f#lO#g#iO(O;VO!h(nP~P.iO!i#oO(O#nO~O!u#sO!y]O%e#tO~O#h#uO~O!d#vO#h#uO~OP$[OR#zO[$cOo$aO}#yO!P#{O!Y$_O!i#xO!m$[O#O$RO#k$OO#l$PO#m$PO#n$PO#o$QO#p$RO#q$RO#r$bO#s$RO#u$SO#w$UO#y$WO#z$XO([VO(m$YO(t#|O(u#}O~Oa(aX'u(aX's(aX!h(aX!V(aX![(aX%f(aX!d(aX~P1qO#P$dO#]$eO$P$eOP(bXR(bX[(bXo(bX}(bX!P(bX!Y(bX!i(bX!m(bX#O(bX#k(bX#l(bX#m(bX#n(bX#o(bX#p(bX#q(bX#r(bX#s(bX#u(bX#w(bX#y(bX#z(bX([(bX(m(bX(t(bX(u(bX![(bX%f(bX~Oa(bX'u(bX's(bX!V(bX!h(bXs(bX!d(bX~P4UO#]$eO~O$[$hO$^$gO$e$mO~OSfO![$nO$h$oO$j$qO~Oh%VOm%WOo%XOp$tOq$tOw%YOy%ZO{%[O!P${O![$|O!f%aO!i$xO#g%bO$V%_O$r%]O$t%^O$w%`O(O$sO(QTO(TUO([$uO(t$}O(u%POg(XP~O!i%cO~O!P%fO![%gO(O%eO~O!d%kO~Oa%lO'u%lO~O}%pO~P%[O(P!lO~P%[O%k%tO~P%[Oh%VO!i%cO(O%eO(P!lO~Oe%{O!i%cO(O%eO~O#s$RO~O}&QO![%}O!i&PO%g&TO(O%eO(P!lO(QTO(TUO`)SP~O!u#sO~O%p&VO!P)OX![)OX(O)OX~O(O&WO~O!r&]O#t!PO%g!QO%i!OO%j!OO%k!OO%n!RO%p!SO%s!TO%t!TO~Od&bOe&aO!u&_O%e&`O%x&^O~P;|Od&eOeyO![&dO!r&]O!uxO!y]O#t!PO%e}O%i!OO%j!OO%k!OO%n!RO%p!SO%s!TO%t!TO%v!UO~Ob&hO#]&kO%g&fO(P!lO~P=RO!i&lO!r&pO~O!i#oO~O![XO~Oa%lO't&xO'u%lO~Oa%lO't&{O'u%lO~Oa%lO't&}O'u%lO~O's]X!V]Xs]X!h]X&W]X![]X%f]X!d]X~P(qO!_'[O!`'TO!a'TO(P!lO(QTO(TUO~Op'RO!P'QO!X'UO(`'PO!Z(dP!Z(sP~P@YOk'_O![']O(O%eO~Oe'dO!i%cO(O%eO~O}&QO!i&PO~Op!nO!P!oO!y;QO#Q!pO#R!pO#T!pO#U!pO(P!lO(QTO(TUO(`!mO(j!sO~O!_'jO!`'iO!a'iO#S!pO#X'kO#Y'kO~PAtOa%lOh%VO!d#vO!i%cO'u%lO(m'mO~O!m'qO#]'oO~PCSOp!nO!P!oO(QTO(TUO(`!mO(j!sO~O![XOp(hX!P(hX!_(hX!`(hX!a(hX!y(hX#Q(hX#R(hX#S(hX#T(hX#U(hX#X(hX#Y(hX(P(hX(Q(hX(T(hX(`(hX(j(hX~O!`'iO!a'iO(P!lO~PCrO'z'uO'{'uO'|'wO~O_!}O(Q'yO(R!}O(S'yO~O_#QO(S'yO(T'yO(U#QO~Ou#SO!R#TO(]#TO(^'}O~O!X(PO!V'SX!V'YX!Y'SX!Y'YX~P+}O!Y(RO!V(cX~OP$[OR#zO[$cOo$aO}#yO!P#{O!Y(RO!i#xO!m$[O#O$RO#k$OO#l$PO#m$PO#n$PO#o$QO#p$RO#q$RO#r$bO#s$RO#u$SO#w$UO#y$WO#z$XO([VO(m$YO(t#|O(u#}O~O!V(cX~PGfO!V(WO~O!V(pX!Y(pX!d(pX!h(pX(m(pX~O#](pX#h#aX!Z(pX~PIiO#](XO!V(rX!Y(rX~O!Y(YO!V(qX~O!V(]O~O#]$eO~PIiO!Z(^O~P`OR#zO}#yO!P#{O!i#xO([VOP!ka[!kao!ka!Y!ka!m!ka#O!ka#k!ka#l!ka#m!ka#n!ka#o!ka#p!ka#q!ka#r!ka#s!ka#u!ka#w!ka#y!ka#z!ka(m!ka(t!ka(u!ka~Oa!ka'u!ka's!ka!V!ka!h!kas!ka![!ka%f!ka!d!ka~PKPO!h(_O~O!d#vO#](`O(m'mO!Y(oXa(oX'u(oX~O!h(oX~PMlO!P%fO![%gO!y]O#f(eO#g(dO(O%eO~O!Y(fO!h(nX~O!h(hO~O!P%fO![%gO#g(dO(O%eO~OP(bXR(bX[(bXo(bX}(bX!P(bX!Y(bX!i(bX!m(bX#O(bX#k(bX#l(bX#m(bX#n(bX#o(bX#p(bX#q(bX#r(bX#s(bX#u(bX#w(bX#y(bX#z(bX([(bX(m(bX(t(bX(u(bX~O!d#vO!h(bX~P! YOR(jO}(iO!i#xO#P$dO!y!xa!P!xa~O!u!xa%e!xa![!xa#f!xa#g!xa(O!xa~P!#ZO!u(nO~OPYOQYOSfOd!jOe!iOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![XO!fuO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$V!kO(O!dO(QTO(TUO([VO(j[O(yiO~Oh%VOm%WOo%XOp$tOq$tOw%YOy%ZO{;nO!P${O![$|O!f=OO!i$xO#g;tO$V%_O$r;pO$t;rO$w%`O(O(rO(QTO(TUO([$uO(t$}O(u%PO~O#h(tO~O!X(vO!h(fP~P%[O(`(xO(j[O~O!P(zO!i#xO(`(xO(j[O~OP;POQ;POSfOd<zOe!iOmkOo;POpkOqkOwkOy;PO{;PO!PWO!TkO!UkO![!eO!f;SO!iZO!l;PO!m;PO!n;PO!p;TO!r;WO!u!hO$V!kO(O)XO(QTO(TUO([VO(j[O(y<xO~O!Y$_Oa$oa'u$oa's$oa!h$oa!V$oa![$oa%f$oa!d$oa~O#t)`O~P!&_Oh%VOm%WOo%XOp$tOq$tOw%YOy%ZO{%[O!P${O![$|O!f%aO!i$xO#g%bO$V%_O$r%]O$t%^O$w%`O(O(rO(QTO(TUO([$uO(t$}O(u%PO~Og(kP~P!+hO})eO!d)dO![$]X$Y$]X$[$]X$^$]X$e$]X~O!d)dO![(vX$Y(vX$[(vX$^(vX$e(vX~O})eO~P!-qO})eO![(vX$Y(vX$[(vX$^(vX$e(vX~O![)gO$Y)kO$[)fO$^)fO$e)lO~O!X)oO~P!(oO$[$hO$^$gO$e)sO~Ok$xX}$xX!P$xX#P$xX(t$xX(u$xX~OgjXg$xXkjX!YjX#]jX~P!/gOu)uO(])vO(^)xO~Ok*RO})zO!P){O(t$}O(u%PO~Og)yO~P!0kOg*SO~Oh%VOm%WOo%XOp$tOq$tOw%YOy%ZO{;nO!P*UO![*VO!f=OO!i$xO#g;tO$V%_O$r;pO$t;rO$w%`O(QTO(TUO([$uO(t$}O(u%PO~O!X*YO(O*TO!h(zP~P!1YO#h*[O~O!i*]O~Oh%VOm%WOo%XOp$tOq$tOw%YOy%ZO{;nO!P${O![$|O!f=OO!i$xO#g;tO$V%_O$r;pO$t;rO$w%`O(O*_O(QTO(TUO([$uO(t$}O(u%PO~O!X*bO!V({P~P!3XOo*nO!P*fO!_*lO!`*eO!a*eO!i*]O#X*mO%]*hO(P!lO(`!mO~O!Z*kO~P!4|O#P$dOk(ZX}(ZX!P(ZX(t(ZX(u(ZX!Y(ZX#](ZX~Og(ZX#}(ZX~P!5uOk*sO#]*rOg(YX!Y(YX~O!Y*tOg(XX~O(O&WOg(XP~Op*wO~O!i*|O~O(O(rO~Om+QO!P%fO!X#iO![%gO!y]O#f#lO#g#iO(O%eO!h(nP~O!d#vO#h+RO~O!P%fO!X+TO!Y(YO![%gO(O%eO!V(qP~Op'XO!P+VO!X+UO(QTO(TUO(`(xO~O!Z(sP~P!8uO!Y+WOa)PX'u)PX~OP$[OR#zO[$cOo$aO}#yO!P#{O!i#xO!m$[O#O$RO#k$OO#l$PO#m$PO#n$PO#o$QO#p$RO#q$RO#r$bO#s$RO#u$SO#w$UO#y$WO#z$XO([VO(m$YO(t#|O(u#}O~Oa!ga!Y!ga'u!ga's!ga!V!ga!h!gas!ga![!ga%f!ga!d!ga~P!9mOR#zO}#yO!P#{O!i#xO([VOP!oa[!oao!oa!Y!oa!m!oa#O!oa#k!oa#l!oa#m!oa#n!oa#o!oa#p!oa#q!oa#r!oa#s!oa#u!oa#w!oa#y!oa#z!oa(m!oa(t!oa(u!oa~Oa!oa'u!oa's!oa!V!oa!h!oas!oa![!oa%f!oa!d!oa~P!<TOR#zO}#yO!P#{O!i#xO([VOP!qa[!qao!qa!Y!qa!m!qa#O!qa#k!qa#l!qa#m!qa#n!qa#o!qa#p!qa#q!qa#r!qa#s!qa#u!qa#w!qa#y!qa#z!qa(m!qa(t!qa(u!qa~Oa!qa'u!qa's!qa!V!qa!h!qas!qa![!qa%f!qa!d!qa~P!>kOh%VOk+aO![']O%f+`O~O!d+cOa(WX![(WX'u(WX!Y(WX~Oa%lO![XO'u%lO~Oh%VO!i%cO~Oh%VO!i%cO(O%eO~O!d#vO#h(tO~Ob+nO%g+oO(O+kO(QTO(TUO!Z)TP~O!Y+pO`)SX~O[+tO~O`+uO~O![%}O(O%eO(P!lO`)SP~Oh%VO#]+zO~Oh%VOk+}O![$|O~O![,PO~O},RO![XO~O%k%tO~O!u,WO~Oe,]O~Ob,^O(O#nO(QTO(TUO!Z)RP~Oe%{O~O%g!QO(O&WO~P=RO[,cO`,bO~OPYOQYOSfOdzOeyOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO!fuO!iZO!lYO!mYO!nYO!pvO!uxO!y]O%e}O(QTO(TUO([VO(j[O(yiO~O![!eO!r!gO$V!kO(O!dO~P!EkO`,bOa%lO'u%lO~OPYOQYOSfOd!jOe!iOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![!eO!fuO!iZO!lYO!mYO!nYO!pvO!u!hO$V!kO(O!dO(QTO(TUO([VO(j[O(yiO~Oa,hO!rwO#t!OO%i!OO%j!OO%k!OO~P!HTO!i&lO~O&Y,nO~O![,pO~O&k,rO&m,sOP&haQ&haS&haY&haa&had&hae&ham&hao&hap&haq&haw&hay&ha{&ha!P&ha!T&ha!U&ha![&ha!f&ha!i&ha!l&ha!m&ha!n&ha!p&ha!r&ha!u&ha!y&ha#t&ha$V&ha%e&ha%g&ha%i&ha%j&ha%k&ha%n&ha%p&ha%s&ha%t&ha%v&ha&S&ha&Y&ha&[&ha&^&ha&`&ha&c&ha&i&ha&o&ha&q&ha&s&ha&u&ha&w&ha's&ha(O&ha(Q&ha(T&ha([&ha(j&ha(y&ha!Z&ha&a&hab&ha&f&ha~O(O,xO~Oh!bX!Y!OX!Z!OX!d!OX!d!bX!i!bX#]!OX~O!Y!bX!Z!bX~P# ZO!d,}O#],|Oh(eX!Y#eX!Y(eX!Z#eX!Z(eX!d(eX!i(eX~Oh%VO!d-PO!i%cO!Y!^X!Z!^X~Op!nO!P!oO(QTO(TUO(`!mO~OP;POQ;POSfOd<zOe!iOmkOo;POpkOqkOwkOy;PO{;PO!PWO!TkO!UkO![!eO!f;SO!iZO!l;PO!m;PO!n;PO!p;TO!r;WO!u!hO$V!kO(QTO(TUO([VO(j[O(y<xO~O(O;zO~P##_O!Y-TO!Z(dX~O!Z-VO~O!d,}O#],|O!Y#eX!Z#eX~O!Y-WO!Z(sX~O!Z-YO~O!`-ZO!a-ZO(P!lO~P#!|O!Z-^O~P'_Ok-aO![']O~O!V-fO~Op!xa!_!xa!`!xa!a!xa#Q!xa#R!xa#S!xa#T!xa#U!xa#X!xa#Y!xa(P!xa(Q!xa(T!xa(`!xa(j!xa~P!#ZO!m-kO#]-iO~PCSO!`-mO!a-mO(P!lO~PCrOa%lO#]-iO'u%lO~Oa%lO!d#vO#]-iO'u%lO~Oa%lO!d#vO!m-kO#]-iO'u%lO(m'mO~O'z'uO'{'uO'|-rO~Os-sO~O!V'Sa!Y'Sa~P!9mO!X-wO!V'SX!Y'SX~P%[O!Y(RO!V(ca~O!V(ca~PGfO!Y(YO!V(qa~O!P%fO!X-{O![%gO(O%eO!V'YX!Y'YX~O#]-}O!Y(oa!h(oaa(oa'u(oa~O!d#vO~P#+eO!Y(fO!h(na~O!P%fO![%gO#g.RO(O%eO~Om.WO!P%fO!X.TO![%gO!y]O#f.VO#g.TO(O%eO!Y']X!h']X~OR.[O!i#xO~Oh%VOk._O![']O%f.^O~Oa#`i!Y#`i'u#`i's#`i!V#`i!h#`is#`i![#`i%f#`i!d#`i~P!9mOk=UO})zO!P){O(t$}O(u%PO~O#h#[aa#[a#]#[a'u#[a!Y#[a!h#[a![#[a!V#[a~P#.aO#h(ZXP(ZXR(ZX[(ZXa(ZXo(ZX!i(ZX!m(ZX#O(ZX#k(ZX#l(ZX#m(ZX#n(ZX#o(ZX#p(ZX#q(ZX#r(ZX#s(ZX#u(ZX#w(ZX#y(ZX#z(ZX'u(ZX([(ZX(m(ZX!h(ZX!V(ZX's(ZXs(ZX![(ZX%f(ZX!d(ZX~P!5uO!Y.lO!h(fX~P!9mO!h.oO~O!V.qO~OP$[OR#zO}#yO!P#{O!i#xO!m$[O([VO[#jia#jio#ji!Y#ji#O#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji'u#ji(m#ji(t#ji(u#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~O#k#ji~P#1|O#k$OO~P#1|OP$[OR#zOo$aO}#yO!P#{O!i#xO!m$[O#k$OO#l$PO#m$PO#n$PO([VO[#jia#ji!Y#ji#O#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji'u#ji(m#ji(t#ji(u#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~O#o#ji~P#4kO#o$QO~P#4kOP$[OR#zO[$cOo$aO}#yO!P#{O!i#xO!m$[O#O$RO#k$OO#l$PO#m$PO#n$PO#o$QO#p$RO#q$RO#r$bO#s$RO([VOa#ji!Y#ji#w#ji#y#ji#z#ji'u#ji(m#ji(t#ji(u#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~O#u#ji~P#7YOP$[OR#zO[$cOo$aO}#yO!P#{O!i#xO!m$[O#O$RO#k$OO#l$PO#m$PO#n$PO#o$QO#p$RO#q$RO#r$bO#s$RO#u$SO([VO(u#}Oa#ji!Y#ji#y#ji#z#ji'u#ji(m#ji(t#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~O#w$UO~P#9pO#w#ji~P#9pO#u$SO~P#7YOP$[OR#zO[$cOo$aO}#yO!P#{O!i#xO!m$[O#O$RO#k$OO#l$PO#m$PO#n$PO#o$QO#p$RO#q$RO#r$bO#s$RO#u$SO#w$UO([VO(t#|O(u#}Oa#ji!Y#ji#z#ji'u#ji(m#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~O#y#ji~P#<fO#y$WO~P#<fOP]XR]X[]Xo]X}]X!P]X!i]X!m]X#O]X#P]X#]]X#hfX#k]X#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#u]X#w]X#y]X#z]X$P]X([]X(m]X(t]X(u]X!Y]X!Z]X~O#}]X~P#?TOP$[OR#zO[;hOo;fO}#yO!P#{O!i#xO!m$[O#O;]O#k;YO#l;ZO#m;ZO#n;ZO#o;[O#p;]O#q;]O#r;gO#s;]O#u;^O#w;`O#y;bO#z;cO([VO(m$YO(t#|O(u#}O~O#}.sO~P#AbO#P$dO#];iO$P;iO#}(bX!Z(bX~P! YOa'`a!Y'`a'u'`a's'`a!h'`a!V'`as'`a!['`a%f'`a!d'`a~P!9mO[#jia#jio#ji!Y#ji#O#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji'u#ji(m#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~OP$[OR#zO}#yO!P#{O!i#xO!m$[O#k$OO#l$PO#m$PO#n$PO([VO(t#ji(u#ji~P#DdOk=UO})zO!P){O(t$}O(u%POP#jiR#ji!i#ji!m#ji#k#ji#l#ji#m#ji#n#ji([#ji~P#DdO!Y.wOg(kX~P!0kOg.yO~Oa$Oi!Y$Oi'u$Oi's$Oi!V$Oi!h$Ois$Oi![$Oi%f$Oi!d$Oi~P!9mO$[.zO$^.zO~O$[.{O$^.{O~O!d)dO#].|O![$bX$Y$bX$[$bX$^$bX$e$bX~O!X.}O~O![)gO$Y/PO$[)fO$^)fO$e/QO~O!Y;dO!Z(aX~P#AbO!Z/RO~O!d)dO$e(vX~O$e/TO~Ou)uO(])vO(^/WO~O!V/[O~P!&_O(t$}Ok%^a}%^a!P%^a(u%^a!Y%^a#]%^a~Og%^a#}%^a~P#K^O(u%POk%`a}%`a!P%`a(t%`a!Y%`a#]%`a~Og%`a#}%`a~P#LPO!YfX!dfX!hfX!h$xX(mfX~P!/gO!X/eO!Y(YO(O/dO!V(qP!V({P~P!1YOo*nO!_*lO!`*eO!a*eO!i*]O#X*mO%]*hO(P!lO~Op'XO!P/fO!X+UO!Z*kO(QTO(TUO(`;wO!Z(sP~P#MjO!h/gO~P#.aO!Y/hO!d#vO(m'mO!h(zX~O!h/mO~O!P%fO!X*YO![%gO(O%eO!h(zP~O#h/oO~O!V$xX!Y$xX!d%PX~P!/gO!Y/pO!V({X~P#.aO!d/rO~O!V/tO~Oh%VOo/xO!d#vO!i%cO(m'mO~O(O/zO~O!d+cO~Oa%lO!Y0OO'u%lO~O!Z0QO~P!4|O!`0RO!a0RO(P!lO(`!mO~O!P0TO(`!mO~O#X0UO~Og%^a!Y%^a#]%^a#}%^a~P!0kOg%`a!Y%`a#]%`a#}%`a~P!0kO(O&WOg'iX!Y'iX~O!Y*tOg(Xa~Og0_O~OR0`O}0`O!P0aO#P$dOkza(tza(uza!Yza#]za~Ogza#}za~P$%]O})zO!P){Ok$qa(t$qa(u$qa!Y$qa#]$qa~Og$qa#}$qa~P$&UO})zO!P){Ok$sa(t$sa(u$sa!Y$sa#]$sa~Og$sa#}$sa~P$&wO#h0dO~Og%Ra!Y%Ra#]%Ra#}%Ra~P!0kO!d#vO~O#h0gO~O!Y+WOa)Pa'u)Pa~OR#zO}#yO!P#{O!i#xO([VOP!oi[!oio!oi!Y!oi!m!oi#O!oi#k!oi#l!oi#m!oi#n!oi#o!oi#p!oi#q!oi#r!oi#s!oi#u!oi#w!oi#y!oi#z!oi(m!oi(t!oi(u!oi~Oa!oi'u!oi's!oi!V!oi!h!ois!oi![!oi%f!oi!d!oi~P$(fOh%VOo%XOp$tOq$tOw%YOy%ZO{;nO!P${O![$|O!f=OO!i$xO#g;tO$V%_O$r;pO$t;rO$w%`O(QTO(TUO([$uO(t$}O(u%PO~Om0pO(O0oO~P$*|O!d+cOa(Wa![(Wa'u(Wa!Y(Wa~O#h0vO~O[]X!YfX!ZfX~O!Y0wO!Z)TX~O!Z0yO~O[0zO~Ob0|O(O+kO(QTO(TUO~O![%}O(O%eO`'qX!Y'qX~O!Y+pO`)Sa~O!h1PO~P!9mO[1SO~O`1TO~O#]1WO~Ok1ZO![$|O~O(`(xO!Z)QP~Oh%VOk1dO![1aO%f1cO~O[1nO!Y1lO!Z)RX~O!Z1oO~O`1qOa%lO'u%lO~O(O#nO(QTO(TUO~O#P$dO#]$eO$P$eOP(bXR(bX[(bXo(bX}(bX!P(bX!Y(bX!i(bX!m(bX#O(bX#k(bX#l(bX#m(bX#n(bX#o(bX#p(bX#q(bX#r(bX#u(bX#w(bX#y(bX#z(bX([(bX(m(bX(t(bX(u(bX~O#s1tO&W1uOa(bX~P$0dO#]$eO#s1tO&W1uO~Oa1wO~P%[Oa1yO~O&a1|OP&_iQ&_iS&_iY&_ia&_id&_ie&_im&_io&_ip&_iq&_iw&_iy&_i{&_i!P&_i!T&_i!U&_i![&_i!f&_i!i&_i!l&_i!m&_i!n&_i!p&_i!r&_i!u&_i!y&_i#t&_i$V&_i%e&_i%g&_i%i&_i%j&_i%k&_i%n&_i%p&_i%s&_i%t&_i%v&_i&S&_i&Y&_i&[&_i&^&_i&`&_i&c&_i&i&_i&o&_i&q&_i&s&_i&u&_i&w&_i's&_i(O&_i(Q&_i(T&_i([&_i(j&_i(y&_i!Z&_ib&_i&f&_i~Ob2SO!Z2QO&f2RO~P`O![XO!i2UO~O&m,sOP&hiQ&hiS&hiY&hia&hid&hie&him&hio&hip&hiq&hiw&hiy&hi{&hi!P&hi!T&hi!U&hi![&hi!f&hi!i&hi!l&hi!m&hi!n&hi!p&hi!r&hi!u&hi!y&hi#t&hi$V&hi%e&hi%g&hi%i&hi%j&hi%k&hi%n&hi%p&hi%s&hi%t&hi%v&hi&S&hi&Y&hi&[&hi&^&hi&`&hi&c&hi&i&hi&o&hi&q&hi&s&hi&u&hi&w&hi's&hi(O&hi(Q&hi(T&hi([&hi(j&hi(y&hi!Z&hi&a&hib&hi&f&hi~O!V2[O~O!Y!^a!Z!^a~P#AbOp!nO!P!oO!X2bO(`!mO!Y'TX!Z'TX~P@YO!Y-TO!Z(da~O!Y'ZX!Z'ZX~P!8uO!Y-WO!Z(sa~O!Z2iO~P'_Oa%lO#]2rO'u%lO~Oa%lO!d#vO#]2rO'u%lO~Oa%lO!d#vO!m2vO#]2rO'u%lO(m'mO~Oa%lO'u%lO~P!9mO!Y$_Os$oa~O!V'Si!Y'Si~P!9mO!Y(RO!V(ci~O!Y(YO!V(qi~O!V(ri!Y(ri~P!9mO!Y(oi!h(oia(oi'u(oi~P!9mO#]2xO!Y(oi!h(oia(oi'u(oi~O!Y(fO!h(ni~O!P%fO![%gO!y]O#f2}O#g2|O(O%eO~O!P%fO![%gO#g2|O(O%eO~Ok3UO![']O%f3TO~Oh%VOk3UO![']O%f3TO~O#h%^aP%^aR%^a[%^aa%^ao%^a!i%^a!m%^a#O%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a'u%^a([%^a(m%^a!h%^a!V%^a's%^as%^a![%^a%f%^a!d%^a~P#K^O#h%`aP%`aR%`a[%`aa%`ao%`a!i%`a!m%`a#O%`a#k%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#u%`a#w%`a#y%`a#z%`a'u%`a([%`a(m%`a!h%`a!V%`a's%`as%`a![%`a%f%`a!d%`a~P#LPO#h%^aP%^aR%^a[%^aa%^ao%^a!Y%^a!i%^a!m%^a#O%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a'u%^a([%^a(m%^a!h%^a!V%^a's%^a#]%^as%^a![%^a%f%^a!d%^a~P#.aO#h%`aP%`aR%`a[%`aa%`ao%`a!Y%`a!i%`a!m%`a#O%`a#k%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#u%`a#w%`a#y%`a#z%`a'u%`a([%`a(m%`a!h%`a!V%`a's%`a#]%`as%`a![%`a%f%`a!d%`a~P#.aO#hzaPza[zaazaoza!iza!mza#Oza#kza#lza#mza#nza#oza#pza#qza#rza#sza#uza#wza#yza#zza'uza([za(mza!hza!Vza'szasza![za%fza!dza~P$%]O#h$qaP$qaR$qa[$qaa$qao$qa!i$qa!m$qa#O$qa#k$qa#l$qa#m$qa#n$qa#o$qa#p$qa#q$qa#r$qa#s$qa#u$qa#w$qa#y$qa#z$qa'u$qa([$qa(m$qa!h$qa!V$qa's$qas$qa![$qa%f$qa!d$qa~P$&UO#h$saP$saR$sa[$saa$sao$sa!i$sa!m$sa#O$sa#k$sa#l$sa#m$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#u$sa#w$sa#y$sa#z$sa'u$sa([$sa(m$sa!h$sa!V$sa's$sas$sa![$sa%f$sa!d$sa~P$&wO#h%RaP%RaR%Ra[%Raa%Rao%Ra!Y%Ra!i%Ra!m%Ra#O%Ra#k%Ra#l%Ra#m%Ra#n%Ra#o%Ra#p%Ra#q%Ra#r%Ra#s%Ra#u%Ra#w%Ra#y%Ra#z%Ra'u%Ra([%Ra(m%Ra!h%Ra!V%Ra's%Ra#]%Ras%Ra![%Ra%f%Ra!d%Ra~P#.aOa#`q!Y#`q'u#`q's#`q!V#`q!h#`qs#`q![#`q%f#`q!d#`q~P!9mO!X3^O!Y'UX!h'UX~P%[O!Y.lO!h(fa~O!Y.lO!h(fa~P!9mO!V3aO~O#}!ka!Z!ka~PKPO#}!ga!Y!ga!Z!ga~P#AbO#}!oa!Z!oa~P!<TO#}!qa!Z!qa~P!>kOg'XX!Y'XX~P!+hO!Y.wOg(ka~OSfO![3uO$c3vO~O!Z3zO~Os3{O~P#.aOa$lq!Y$lq'u$lq's$lq!V$lq!h$lqs$lq![$lq%f$lq!d$lq~P!9mO!V3|O~P#.aO})zO!P){O(u%POk'ea(t'ea!Y'ea#]'ea~Og'ea#}'ea~P%)nO})zO!P){Ok'ga(t'ga(u'ga!Y'ga#]'ga~Og'ga#}'ga~P%*aO(m$YO~P#.aO!VfX!V$xX!YfX!Y$xX!d%PX#]fX~P!/gO(O<QO~P!1YOmkO(O4OO~P.iO!P%fO!X4QO![%gO(O%eO!Y'aX!h'aX~O!Y/hO!h(za~O!Y/hO!d#vO!h(za~O!Y/hO!d#vO(m'mO!h(za~Og$zi!Y$zi#]$zi#}$zi~P!0kO!X4YO!V'cX!Y'cX~P!3XO!Y/pO!V({a~O!Y/pO!V({a~P#.aO!d#vO#s4bO~Oo4eO!d#vO(m'mO~O!P4hO(`!mO~O(t$}Ok%^i}%^i!P%^i(u%^i!Y%^i#]%^i~Og%^i#}%^i~P%.wO(u%POk%`i}%`i!P%`i(t%`i!Y%`i#]%`i~Og%`i#}%`i~P%/jOg(Yi!Y(Yi~P!0kO#]4mOg(Yi!Y(Yi~P!0kO!h4pO~Oa$mq!Y$mq'u$mq's$mq!V$mq!h$mqs$mq![$mq%f$mq!d$mq~P!9mO!V4tO~O!Y4uO![(|X~P#.aOa$xX![$xX%Z]X'u$xX!Y$xX~P!/gO%Z4xOalXklX}lX!PlX![lX'ulX(tlX(ulX!YlX~O%Z4xO~Ob5OO%g5PO(O+kO(QTO(TUO!Y'pX!Z'pX~O!Y0wO!Z)Ta~O[5TO~O`5UO~Oa%lO'u%lO~P#.aO![$|O~P#.aO!Y5^O#]5`O!Z)QX~O!Z5aO~Oo5hOp!nO!P5bO!_!yO!`!vO!a!vO!y;QO#Q!pO#R!pO#S!pO#T!pO#U!pO#X5gO#Y!zO(P!lO(QTO(TUO(`!mO(j!sO~O!Z5fO~P%4tOk5mO![1aO%f5lO~Oh%VOk5mO![1aO%f5lO~Ob5tO(O#nO(QTO(TUO!Y'oX!Z'oX~O!Y1lO!Z)Ra~O(QTO(TUO(`5vO~O`5zO~O#s5}O&W6OO~PMlO!h6PO~P%[Oa6RO~Oa6RO~P%[Ob2SO!Z6WO&f2RO~P`O!d6YO~O!d6[Oh(ei!Y(ei!Z(ei!d(ei!i(ei~O!Y#ei!Z#ei~P#AbO#]6]O!Y#ei!Z#ei~O!Y!^i!Z!^i~P#AbOa%lO#]6fO'u%lO~Oa%lO!d#vO#]6fO'u%lO~O!Y(oq!h(oqa(oq'u(oq~P!9mO!Y(fO!h(nq~O!P%fO![%gO#g6mO(O%eO~O![']O%f6pO~Ok6tO![']O%f6pO~O#h'eaP'eaR'ea['eaa'eao'ea!i'ea!m'ea#O'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#s'ea#u'ea#w'ea#y'ea#z'ea'u'ea(['ea(m'ea!h'ea!V'ea's'eas'ea!['ea%f'ea!d'ea~P%)nO#h'gaP'gaR'ga['gaa'gao'ga!i'ga!m'ga#O'ga#k'ga#l'ga#m'ga#n'ga#o'ga#p'ga#q'ga#r'ga#s'ga#u'ga#w'ga#y'ga#z'ga'u'ga(['ga(m'ga!h'ga!V'ga's'gas'ga!['ga%f'ga!d'ga~P%*aO#h$ziP$ziR$zi[$zia$zio$zi!Y$zi!i$zi!m$zi#O$zi#k$zi#l$zi#m$zi#n$zi#o$zi#p$zi#q$zi#r$zi#s$zi#u$zi#w$zi#y$zi#z$zi'u$zi([$zi(m$zi!h$zi!V$zi's$zi#]$zis$zi![$zi%f$zi!d$zi~P#.aO#h%^iP%^iR%^i[%^ia%^io%^i!i%^i!m%^i#O%^i#k%^i#l%^i#m%^i#n%^i#o%^i#p%^i#q%^i#r%^i#s%^i#u%^i#w%^i#y%^i#z%^i'u%^i([%^i(m%^i!h%^i!V%^i's%^is%^i![%^i%f%^i!d%^i~P%.wO#h%`iP%`iR%`i[%`ia%`io%`i!i%`i!m%`i#O%`i#k%`i#l%`i#m%`i#n%`i#o%`i#p%`i#q%`i#r%`i#s%`i#u%`i#w%`i#y%`i#z%`i'u%`i([%`i(m%`i!h%`i!V%`i's%`is%`i![%`i%f%`i!d%`i~P%/jO!Y'Ua!h'Ua~P!9mO!Y.lO!h(fi~O#}#`i!Y#`i!Z#`i~P#AbOP$[OR#zO}#yO!P#{O!i#xO!m$[O([VO[#jio#ji#O#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(m#ji(t#ji(u#ji!Y#ji!Z#ji~O#k#ji~P%G^O#k;YO~P%G^OP$[OR#zOo;fO}#yO!P#{O!i#xO!m$[O#k;YO#l;ZO#m;ZO#n;ZO([VO[#ji#O#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(m#ji(t#ji(u#ji!Y#ji!Z#ji~O#o#ji~P%IfO#o;[O~P%IfOP$[OR#zO[;hOo;fO}#yO!P#{O!i#xO!m$[O#O;]O#k;YO#l;ZO#m;ZO#n;ZO#o;[O#p;]O#q;]O#r;gO#s;]O([VO#w#ji#y#ji#z#ji#}#ji(m#ji(t#ji(u#ji!Y#ji!Z#ji~O#u#ji~P%KnOP$[OR#zO[;hOo;fO}#yO!P#{O!i#xO!m$[O#O;]O#k;YO#l;ZO#m;ZO#n;ZO#o;[O#p;]O#q;]O#r;gO#s;]O#u;^O([VO(u#}O#y#ji#z#ji#}#ji(m#ji(t#ji!Y#ji!Z#ji~O#w;`O~P%MoO#w#ji~P%MoO#u;^O~P%KnOP$[OR#zO[;hOo;fO}#yO!P#{O!i#xO!m$[O#O;]O#k;YO#l;ZO#m;ZO#n;ZO#o;[O#p;]O#q;]O#r;gO#s;]O#u;^O#w;`O([VO(t#|O(u#}O#z#ji#}#ji(m#ji!Y#ji!Z#ji~O#y#ji~P&!OO#y;bO~P&!OOa#{y!Y#{y'u#{y's#{y!V#{y!h#{ys#{y![#{y%f#{y!d#{y~P!9mO[#jio#ji#O#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(m#ji!Y#ji!Z#ji~OP$[OR#zO}#yO!P#{O!i#xO!m$[O#k;YO#l;ZO#m;ZO#n;ZO([VO(t#ji(u#ji~P&$zOk=VO})zO!P){O(t$}O(u%POP#jiR#ji!i#ji!m#ji#k#ji#l#ji#m#ji#n#ji([#ji~P&$zO#P$dOP(ZXR(ZX[(ZXk(ZXo(ZX}(ZX!P(ZX!i(ZX!m(ZX#O(ZX#k(ZX#l(ZX#m(ZX#n(ZX#o(ZX#p(ZX#q(ZX#r(ZX#s(ZX#u(ZX#w(ZX#y(ZX#z(ZX#}(ZX([(ZX(m(ZX(t(ZX(u(ZX!Y(ZX!Z(ZX~O#}$Oi!Y$Oi!Z$Oi~P#AbO#}!oi!Z!oi~P$(fOg'Xa!Y'Xa~P!0kO!Z7WO~O!Y'`a!Z'`a~P#AbOP]XR]X[]Xo]X}]X!P]X!V]X!Y]X!i]X!m]X#O]X#P]X#]]X#hfX#k]X#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#u]X#w]X#y]X#z]X$P]X([]X(m]X(t]X(u]X~O!d%WX#s%WX~P&+QO!d#vO(m'mO!Y'aa!h'aa~O!Y/hO!h(zi~O!Y/hO!d#vO!h(zi~Og$zq!Y$zq#]$zq#}$zq~P!0kO!V'ca!Y'ca~P#.aO!d7_O~O!Y/pO!V({i~P#.aO!Y/pO!V({i~O!V7cO~O!d#vO#s7hO~Oo7iO!d#vO(m'mO~O})zO!P){O(u%POk'fa(t'fa!Y'fa#]'fa~Og'fa#}'fa~P&/pO})zO!P){Ok'ha(t'ha(u'ha!Y'ha#]'ha~Og'ha#}'ha~P&0cO!V7lO~Og$|q!Y$|q#]$|q#}$|q~P!0kOa$my!Y$my'u$my's$my!V$my!h$mys$my![$my%f$my!d$my~P!9mO!d6[O~O!Y4uO![(|a~O![']OP$SaR$Sa[$Sao$Sa}$Sa!P$Sa!Y$Sa!i$Sa!m$Sa#O$Sa#k$Sa#l$Sa#m$Sa#n$Sa#o$Sa#p$Sa#q$Sa#r$Sa#s$Sa#u$Sa#w$Sa#y$Sa#z$Sa([$Sa(m$Sa(t$Sa(u$Sa~O%f6pO~P&2lOa#`y!Y#`y'u#`y's#`y!V#`y!h#`ys#`y![#`y%f#`y!d#`y~P!9mO[7qO~Ob7sO(O+kO(QTO(TUO~O!Y0wO!Z)Ti~O`7wO~O(`(xO!Y'lX!Z'lX~O!Y5^O!Z)Qa~O!Z8QO~P%4tOp!nO!P8RO(QTO(TUO(`!mO(j!sO~O#X8SO~O![1aO~O![1aO%f8UO~Ok8XO![1aO%f8UO~O[8^O!Y'oa!Z'oa~O!Y1lO!Z)Ri~O!h8bO~O!h8cO~O!h8fO~O!h8fO~P%[Oa8hO~O!d8iO~O!h8jO~O!Y(ri!Z(ri~P#AbOa%lO#]8rO'u%lO~O!Y(oy!h(oya(oy'u(oy~P!9mO!Y(fO!h(ny~O%f8uO~P&2lO![']O%f8uO~O#h$zqP$zqR$zq[$zqa$zqo$zq!Y$zq!i$zq!m$zq#O$zq#k$zq#l$zq#m$zq#n$zq#o$zq#p$zq#q$zq#r$zq#s$zq#u$zq#w$zq#y$zq#z$zq'u$zq([$zq(m$zq!h$zq!V$zq's$zq#]$zqs$zq![$zq%f$zq!d$zq~P#.aO#h'faP'faR'fa['faa'fao'fa!i'fa!m'fa#O'fa#k'fa#l'fa#m'fa#n'fa#o'fa#p'fa#q'fa#r'fa#s'fa#u'fa#w'fa#y'fa#z'fa'u'fa(['fa(m'fa!h'fa!V'fa's'fas'fa!['fa%f'fa!d'fa~P&/pO#h'haP'haR'ha['haa'hao'ha!i'ha!m'ha#O'ha#k'ha#l'ha#m'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#u'ha#w'ha#y'ha#z'ha'u'ha(['ha(m'ha!h'ha!V'ha's'has'ha!['ha%f'ha!d'ha~P&0cO#h$|qP$|qR$|q[$|qa$|qo$|q!Y$|q!i$|q!m$|q#O$|q#k$|q#l$|q#m$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#u$|q#w$|q#y$|q#z$|q'u$|q([$|q(m$|q!h$|q!V$|q's$|q#]$|qs$|q![$|q%f$|q!d$|q~P#.aO!Y'Ui!h'Ui~P!9mO#}#`q!Y#`q!Z#`q~P#AbO(t$}OP%^aR%^a[%^ao%^a!i%^a!m%^a#O%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a#}%^a([%^a(m%^a!Y%^a!Z%^a~Ok%^a}%^a!P%^a(u%^a~P&CoO(u%POP%`aR%`a[%`ao%`a!i%`a!m%`a#O%`a#k%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#u%`a#w%`a#y%`a#z%`a#}%`a([%`a(m%`a!Y%`a!Z%`a~Ok%`a}%`a!P%`a(t%`a~P&EsOk=VO})zO!P){O(u%PO~P&CoOk=VO})zO!P){O(t$}O~P&EsOR0`O}0`O!P0aO#P$dOPza[zakzaoza!iza!mza#Oza#kza#lza#mza#nza#oza#pza#qza#rza#sza#uza#wza#yza#zza#}za([za(mza(tza(uza!Yza!Zza~O})zO!P){OP$qaR$qa[$qak$qao$qa!i$qa!m$qa#O$qa#k$qa#l$qa#m$qa#n$qa#o$qa#p$qa#q$qa#r$qa#s$qa#u$qa#w$qa#y$qa#z$qa#}$qa([$qa(m$qa(t$qa(u$qa!Y$qa!Z$qa~O})zO!P){OP$saR$sa[$sak$sao$sa!i$sa!m$sa#O$sa#k$sa#l$sa#m$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#u$sa#w$sa#y$sa#z$sa#}$sa([$sa(m$sa(t$sa(u$sa!Y$sa!Z$sa~Ok=VO})zO!P){O(t$}O(u%PO~OP%RaR%Ra[%Rao%Ra!i%Ra!m%Ra#O%Ra#k%Ra#l%Ra#m%Ra#n%Ra#o%Ra#p%Ra#q%Ra#r%Ra#s%Ra#u%Ra#w%Ra#y%Ra#z%Ra#}%Ra([%Ra(m%Ra!Y%Ra!Z%Ra~P&NlO#}$lq!Y$lq!Z$lq~P#AbO#}$mq!Y$mq!Z$mq~P#AbO!Z9SO~O#}9TO~P!0kO!d#vO!Y'ai!h'ai~O!d#vO(m'mO!Y'ai!h'ai~O!Y/hO!h(zq~O!V'ci!Y'ci~P#.aO!Y/pO!V({q~Oo9[O!d#vO(m'mO~O!V9]O~P#.aO!V9]O~O!d#vO#s9bO~Og(Yy!Y(Yy~P!0kO!Y'ja!['ja~P#.aOa%Yq![%Yq'u%Yq!Y%Yq~P#.aO[9dO~O!Y0wO!Z)Tq~O#]9hO!Y'la!Z'la~O!Y5^O!Z)Qi~P#AbO!P4hO~O![1aO%f9lO~O(QTO(TUO(`9qO~O!Y1lO!Z)Rq~O!h9tO~O!h9uO~O!h9vO~O!h9vO~P%[O#]9yO!Y#ey!Z#ey~O!Y#ey!Z#ey~P#AbO%f:OO~P&2lO![']O%f:OO~O#}#{y!Y#{y!Z#{y~P#AbOP$ziR$zi[$zio$zi!i$zi!m$zi#O$zi#k$zi#l$zi#m$zi#n$zi#o$zi#p$zi#q$zi#r$zi#s$zi#u$zi#w$zi#y$zi#z$zi#}$zi([$zi(m$zi!Y$zi!Z$zi~P&NlO})zO!P){O(u%POP'eaR'ea['eak'eao'ea!i'ea!m'ea#O'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#s'ea#u'ea#w'ea#y'ea#z'ea#}'ea(['ea(m'ea(t'ea!Y'ea!Z'ea~O})zO!P){OP'gaR'ga['gak'gao'ga!i'ga!m'ga#O'ga#k'ga#l'ga#m'ga#n'ga#o'ga#p'ga#q'ga#r'ga#s'ga#u'ga#w'ga#y'ga#z'ga#}'ga(['ga(m'ga(t'ga(u'ga!Y'ga!Z'ga~O(t$}OP%^iR%^i[%^ik%^io%^i}%^i!P%^i!i%^i!m%^i#O%^i#k%^i#l%^i#m%^i#n%^i#o%^i#p%^i#q%^i#r%^i#s%^i#u%^i#w%^i#y%^i#z%^i#}%^i([%^i(m%^i(u%^i!Y%^i!Z%^i~O(u%POP%`iR%`i[%`ik%`io%`i}%`i!P%`i!i%`i!m%`i#O%`i#k%`i#l%`i#m%`i#n%`i#o%`i#p%`i#q%`i#r%`i#s%`i#u%`i#w%`i#y%`i#z%`i#}%`i([%`i(m%`i(t%`i!Y%`i!Z%`i~O#}$my!Y$my!Z$my~P#AbO#}#`y!Y#`y!Z#`y~P#AbO!d#vO!Y'aq!h'aq~O!Y/hO!h(zy~O!V'cq!Y'cq~P#.aOo:YO!d#vO(m'mO~O!V:ZO~P#.aO!V:ZO~O!Y0wO!Z)Ty~O!Y5^O!Z)Qq~O![1aO%f:cO~O!h:fO~O%f:kO~P&2lOP$zqR$zq[$zqo$zq!i$zq!m$zq#O$zq#k$zq#l$zq#m$zq#n$zq#o$zq#p$zq#q$zq#r$zq#s$zq#u$zq#w$zq#y$zq#z$zq#}$zq([$zq(m$zq!Y$zq!Z$zq~P&NlO})zO!P){O(u%POP'faR'fa['fak'fao'fa!i'fa!m'fa#O'fa#k'fa#l'fa#m'fa#n'fa#o'fa#p'fa#q'fa#r'fa#s'fa#u'fa#w'fa#y'fa#z'fa#}'fa(['fa(m'fa(t'fa!Y'fa!Z'fa~O})zO!P){OP'haR'ha['hak'hao'ha!i'ha!m'ha#O'ha#k'ha#l'ha#m'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#u'ha#w'ha#y'ha#z'ha#}'ha(['ha(m'ha(t'ha(u'ha!Y'ha!Z'ha~OP$|qR$|q[$|qo$|q!i$|q!m$|q#O$|q#k$|q#l$|q#m$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#u$|q#w$|q#y$|q#z$|q#}$|q([$|q(m$|q!Y$|q!Z$|q~P&NlOg%b!Z!Y%b!Z#]%b!Z#}%b!Z~P!0kOo:oO!d#vO(m'mO~O!V:pO~P#.aO!Y'lq!Z'lq~P#AbO!Y#e!Z!Z#e!Z~P#AbO#h%b!ZP%b!ZR%b!Z[%b!Za%b!Zo%b!Z!Y%b!Z!i%b!Z!m%b!Z#O%b!Z#k%b!Z#l%b!Z#m%b!Z#n%b!Z#o%b!Z#p%b!Z#q%b!Z#r%b!Z#s%b!Z#u%b!Z#w%b!Z#y%b!Z#z%b!Z'u%b!Z([%b!Z(m%b!Z!h%b!Z!V%b!Z's%b!Z#]%b!Zs%b!Z![%b!Z%f%b!Z!d%b!Z~P#.aOo:xO!d#vO(m'mO~OP%b!ZR%b!Z[%b!Zo%b!Z!i%b!Z!m%b!Z#O%b!Z#k%b!Z#l%b!Z#m%b!Z#n%b!Z#o%b!Z#p%b!Z#q%b!Z#r%b!Z#s%b!Z#u%b!Z#w%b!Z#y%b!Z#z%b!Z#}%b!Z([%b!Z(m%b!Z!Y%b!Z!Z%b!Z~P&NlOs(aX~P1qO}%pO~P!(oO(P!lO~P!(oO!VfX!YfX#]fX~P&+QOP]XR]X[]Xo]X}]X!P]X!Y]X!YfX!i]X!m]X#O]X#P]X#]]X#]fX#hfX#k]X#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#u]X#w]X#y]X#z]X$P]X([]X(m]X(t]X(u]X~O!dfX!h]X!hfX(mfX~P'BxOP;POQ;POSfOd<zOe!iOmkOo;POpkOqkOwkOy;PO{;PO!PWO!TkO!UkO![XO!f;SO!iZO!l;PO!m;PO!n;PO!p;TO!r;WO!u!hO$V!kO(O)XO(QTO(TUO([VO(j[O(y<xO~O!Y;dO!Z$oa~Oh%VOm%WOo%XOp$tOq$tOw%YOy%ZO{;oO!P${O![$|O!f=PO!i$xO#g;uO$V%_O$r;qO$t;sO$w%`O(O(rO(QTO(TUO([$uO(t$}O(u%PO~O#t)`O~P'GnOo!bX(m!bX~P# ZO!Z]X!ZfX~P'BxO!VfX!V$xX!YfX!Y$xX#]fX~P!/gO#h;XO~O!d#vO#h;XO~O#];iO~O#s;]O~O#];xO!Y(rX!Z(rX~O#];iO!Y(pX!Z(pX~O#h;yO~Og;{O~P!0kO#h<RO~O#h<SO~O!d#vO#h<TO~O!d#vO#h;yO~O#}<UO~P#AbO#h<VO~O#h<WO~O#h<]O~O#h<^O~O#h<_O~O#h<`O~O#}<aO~P!0kO#}<bO~P!0kO#P#Q#R#T#U#X#f#g#r(y$r$t$w%Z%e%f%g%n%p%s%t%v%x~'yT#l!U'w(P#mp#k#no}'x$['x(O$^(`~",
  goto: "$4Q)XPPPPPP)YPP)]P)nP+O/PPPPP5xPP6`PP<V?mP@QP@QPPP@QPBRP@QP@QP@QPBVPB[PByPGrPPPGvPPPPGvJxPPPKOKzPGvPGvPPNYGvPPPGvPGvP!!aGvP!%v!&{!'UP!'x!'|!'x!+YPPPPPPP!+y!&{PP!,Z!-gP!0jGvGv!0o!3z!8b!8b!<`PPP!<hGvPPPPPPPPPPP!?vP!ATPPGv!BfPGvPGvGvGvGvGvPGv!CxP!GRP!JWP!J[!Jf!Jj!JjP!GOP!Jn!JnP!MsP!MwGvGv!M}##RBV@QP@QP@Q@QP#$_@Q@Q#&j@Q#)Z@Q#+`@Q@Q#,O#.]#.]#.b#.k#.]#.wP#.]P@Q#/a@Q#3S@Q@Q5xPPP#6{PPP#7f#7fP#7fP#7|#7fPP#8SP#7yP#7y#8g#7y#9R#9X5u)]#9[)]P#9c#9c#9cP)]P)]P)]P)]PP)]P#9i#9lP#9l)]P#9pP#9sP)]P)]P)]P)]P)]P)])]PP#9y#:P#:[#:b#:h#:n#:t#;S#;Y#;d#;j#;t#;z#<[#<b#=S#=f#=l#=r#>Q#>g#@V#@e#@l#BR#Ba#C|#D[#Db#Dh#Dn#Dx#EO#EU#E`#Er#ExPPPPPPPPPP#FOPPPPPPP#Fs#Iz#KZ#Kb#KjPPP$!sP$!|$%t$,^$,a$,d$-P$-S$-Z$-cP$-i$-lP$.Y$.^$/U$0d$0i$1PPP$1U$1[$1`P$1c$1g$1k$2a$2x$3a$3e$3h$3k$3q$3t$3x$3|R!|RoqOXst!Z#d%k&o&q&r&t,k,p1|2PY!vQ']-]1a5eQ%rvQ%zyQ&R|Q&g!VS'T!e-TQ'c!iS'i!r!yU*e$|*V*jQ+i%{Q+v&TQ,[&aQ-Z'[Q-e'dQ-m'jQ0R*lQ1k,]R;v;T%QdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)y+R+V,h,k,p-a-i-w-}.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3^5b5m5}6O6R6f8R8X8h8rS#q];Q!r)Z$Z$n'U)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{U*y%[;n;oQ+n%}Q,^&dQ,e&lQ0m+aQ0q+cQ0|+oQ1s,cQ3Q._Q5O0wQ5t1lQ6r3UQ7s5PR8x6t'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{t!nQ!r!v!y!z'T'[']'i'j'k-T-Z-]-m1a5e5g$|$ti#v$b$c$d$x${%O%Q%]%^%b)u){)}*P*R*U*[*b*r*s+`+c+z+}.^.w/]/e/o/p/r0V0X0d1W1Z1c3T3}4Y4b4m4u4x5l6p7_7h8U8u9T9b9l:O:c:k;g;h;j;k;l;m;p;q;r;s;t;u;|;}<O<P<R<S<V<W<X<Y<Z<[<]<^<a<b<x=Q=R=U=VQ&U|Q'R!eU'X%g*V-WQ+n%}Q,^&dQ0c*|Q0|+oQ1R+uQ1r,bQ1s,cQ5O0wQ5X1TQ5t1lQ5w1nQ5x1qQ7s5PQ7v5UQ8a5zQ9g7wR9r8^rnOXst!V!Z#d%k&f&o&q&r&t,k,p1|2PR,`&h&x^OPXYstuvwz!Z!`!g!j!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<z<{[#]WZ#W#Z'U(P!b%hm#h#i#l$x%c%f(Y(d(e(f*U*Y*]+T+U+W,g,}-{.R.S.T.V/e/h2U2|2}4Q6[6mQ%uxQ%yyS&O|&TQ&[!TQ'`!hQ'b!iQ(m#sS+h%z%{Q+l%}Q,V&_Q,Z&aS-d'c'dQ.a(nQ0u+iQ0{+oQ0}+pQ1Q+tQ1f,WS1j,[,]Q2n-eQ4}0wQ5R0zQ5W1SQ5s1kQ7r5PQ7u5TQ9c7qR:^9d!O$zi$d%O%Q%]%^%b)}*P*[*r*s.w/o0V0X0d3}4m9T<x=Q=R!S%wy!i!u%y%z%{'S'b'c'd'h'r*d+h+i-Q-d-e-l/y0u2g2n2u4dQ+b%uQ+{&XQ,O&YQ,Y&aQ.`(mQ1e,VU1i,Z,[,]Q3V.aQ5n1fS5r1j1kQ8]5s#^<|#v$b$c$x${)u){*R*U*b+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4u4x5l6p7_7h8U8u9b9l:O:c:k;j;l;p;r;t;|<O<R<V<X<Z<]<a=U=Vo<};g;h;k;m;q;s;u;}<P<S<W<Y<[<^<bW%Ti%V*t<xS&X!Q&fQ&Y!RQ&Z!SR+y&V$}%Si#v$b$c$d$x${%O%Q%]%^%b)u){)}*P*R*U*[*b*r*s+`+c+z+}.^.w/]/e/o/p/r0V0X0d1W1Z1c3T3}4Y4b4m4u4x5l6p7_7h8U8u9T9b9l:O:c:k;g;h;j;k;l;m;p;q;r;s;t;u;|;}<O<P<R<S<V<W<X<Y<Z<[<]<^<a<b<x=Q=R=U=VT)v$u)wV*y%[;n;oW'X!e%g*V-WS(y#y#zQ+]%pQ+s&QS.Y(i(jQ1[,PQ4n0`R7{5^'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{$i$^c#Y#e%o%q%s(O(U(p(u(})O)P)Q)R)S)T)U)V)W)Y)[)^)c)m+^+r-R-p-u-z-|.k.n.r.t.u.v/X0e2]2`2p2w3]3b3c3d3e3f3g3h3i3j3k3l3m3n3q3r3y4r4{6_6e6j6y6z7T7U7}8l8p8z9Q9R9{:`:g;R<oT#TV#U'PkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{Q'V!eR2c-Tv!nQ!e!r!v!y!z'T'[']'i'j'k-T-Z-]-m1a5e5gU*d$|*V*jS/y*e*lQ0S*mQ1^,RQ4d0RR4g0UnqOXst!Z#d%k&o&q&r&t,k,p1|2PQ&v!^Q's!xS(o#u;XQ+f%xQ,T&[Q,U&^Q-b'aQ-o'lS.j(t;yS0f+R<TQ0s+gQ1`,SQ2T,rQ2V,sQ2_-OQ2l-cQ2o-gS4s0g<_Q4y0tS4|0v<`Q6^2aQ6b2mQ6g2tQ7p4zQ8m6`Q8n6cQ8q6hR9x8j$d$]c#Y#e%q%s(O(U(p(u(})O)P)Q)R)S)T)U)V)W)Y)[)^)c)m+^+r-R-p-u-z-|.k.n.r.u.v/X0e2]2`2p2w3]3b3c3d3e3f3g3h3i3j3k3l3m3n3q3r3y4r4{6_6e6j6y6z7T7U7}8l8p8z9Q9R9{:`:g;R<oS(k#p'fQ({#zS+[%o.tS.Z(j(lR3O.['OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{S#q];QQ&q!XQ&r!YQ&t![Q&u!]R1{,nQ'^!hQ+_%uQ-`'`S.](m+bQ2j-_W3S.`.a0l0nQ6a2kW6n3P3R3V4wU8t6o6q6sU9}8v8w8yS:i9|:PQ:t:jR:z:uU!wQ']-]T5c1a5e!Q_OXZ`st!V!Z#d#h%c%k&f&h&o&q&r&t(f,k,p.S1|2P]!pQ!r']-]1a5eT#q];Q%[{OPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)y+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5b5m5}6O6R6f6t8R8X8h8rS(y#y#zS.Y(i(j!s<f$Z$n'U)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{U$fd)Z,eS(l#p'fU*q%R(s3pU0b*x.f7PQ4w0mQ6o3QQ8w6rR:P8xm!tQ!r!v!y!z']'i'j'k-]-m1a5e5gQ'q!uS(b#g1vS-k'h'tQ/k*XQ/w*dQ2v-nQ4U/lS4_/x0SQ7Z4PS7f4e4gQ9V7[Q9Z7cQ9`7iS:X9[9]S:n:Y:ZS:w:o:pR:}:xQ#wbQ'p!uS(a#g1vS(c#m+QQ+S%dQ+d%vQ+j%|U-j'h'q'tQ.O(bQ/j*XQ/v*dQ/|*gQ0r+eQ1g,XS2s-k-nQ2{.WS4T/k/lS4^/w0SQ4a/{Q4c/}Q5p1hQ6i2vQ7Y4PQ7^4US7b4_4gQ7g4fQ8Z5qS9U7Z7[Q9Y7cQ9^7fQ9a7jQ9o8[Q:V9VS:W9Z9]Q:[9`Q:e9pS:m:X:ZS:v:n:pQ:|:wQ;O:}Q<i<dQ<t<mR<u<nV!wQ']-]%[aOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)y+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5b5m5}6O6R6f6t8R8X8h8rS#wz!j!r<c$Z$n'U)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{R<i<z%[bOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)y+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5b5m5}6O6R6f6t8R8X8h8rQ%dj!S%vy!i!u%y%z%{'S'b'c'd'h'r*d+h+i-Q-d-e-l/y0u2g2n2u4dS%|z!jQ+e%wQ,X&aW1h,Y,Z,[,]U5q1i1j1kS8[5r5sQ9p8]!r<d$Z$n'U)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{Q<m<yR<n<z%OeOPXYstuvw!Z!`!g!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&o&q&r&t&x'Q'_'o(R(X(`(t(v(z)y+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5b5m5}6O6R6f6t8R8X8h8rY#bWZ#W#Z(P!b%hm#h#i#l$x%c%f(Y(d(e(f*U*Y*]+T+U+W,g,}-{.R.S.T.V/e/h2U2|2}4Q6[6mQ,f&l!p<e$Z$n)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{R<h'UU'Y!e%g*VR2e-W%QdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)y+R+V,h,k,p-a-i-w-}.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3^5b5m5}6O6R6f8R8X8h8r!r)Z$Z$n'U)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{Q,e&lQ0m+aQ3Q._Q6r3UR8x6t!b$Tc#Y%o(O(U(p(u)V)W)[)c+r-p-u-z-|.k.n/X0e2p2w3]3m4r4{6e6j6y8p9{;R!P;_)Y)m-R.t2]2`3b3k3l3q3y6_6z7T7U7}8l8z9Q9R:`:g<o!f$Vc#Y%o(O(U(p(u)S)T)V)W)[)c+r-p-u-z-|.k.n/X0e2p2w3]3m4r4{6e6j6y8p9{;R!T;a)Y)m-R.t2]2`3b3h3i3k3l3q3y6_6z7T7U7}8l8z9Q9R:`:g<o!^$Zc#Y%o(O(U(p(u)[)c+r-p-u-z-|.k.n/X0e2p2w3]3m4r4{6e6j6y8p9{;RQ3}/cz<{)Y)m-R.t2]2`3b3q3y6_6z7T7U7}8l8z9Q9R:`:g<oQ=Q=SR=R=T'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{S$oh$pR3v.|'VgOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.|.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{T$kf$qQ$ifS)f$l)jR)r$qT$jf$qT)h$l)j'VhOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)y+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.|.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5`5b5m5}6O6R6]6f6t8R8X8h8r9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{T$oh$pQ$rhR)q$p%[jOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)y+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5b5m5}6O6R6f6t8R8X8h8r!s<y$Z$n'U)o,|-P.}2b3u5`6]9h9y;P;S;T;W;X;Y;Z;[;];^;_;`;a;b;c;d;f;i;v;x;y;{<T<U<_<`<{#elOPXZst!Z!`!o#S#d#o#{$n%k&h&k&l&o&q&r&t&x'Q'_(z)o+V+a,h,k,p-a._.}/f0a1d1t1u1w1y1|2P2R3U3u5b5m5}6O6R6t8R8X8h!O%Ri$d%O%Q%]%^%b)}*P*[*r*s.w/o0V0X0d3}4m9T<x=Q=R#^(s#v$b$c$x${)u){*R*U*b+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4u4x5l6p7_7h8U8u9b9l:O:c:k;j;l;p;r;t;|<O<R<V<X<Z<]<a=U=VQ*}%`Q/Y)zo3p;g;h;k;m;q;s;u;}<P<S<W<Y<[<^<b!O$yi$d%O%Q%]%^%b)}*P*[*r*s.w/o0V0X0d3}4m9T<x=Q=RQ*^$zU*g$|*V*jQ+O%aQ/}*h#^<k#v$b$c$x${)u){*R*U*b+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4u4x5l6p7_7h8U8u9b9l:O:c:k;j;l;p;r;t;|<O<R<V<X<Z<]<a=U=Vn<l;g;h;k;m;q;s;u;}<P<S<W<Y<[<^<bQ<p<|Q<q<}Q<r=OR<s=P!O%Ri$d%O%Q%]%^%b)}*P*[*r*s.w/o0V0X0d3}4m9T<x=Q=R#^(s#v$b$c$x${)u){*R*U*b+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4u4x5l6p7_7h8U8u9b9l:O:c:k;j;l;p;r;t;|<O<R<V<X<Z<]<a=U=Vo3p;g;h;k;m;q;s;u;}<P<S<W<Y<[<^<bnoOXst!Z#d%k&o&q&r&t,k,p1|2PS*a${*UQ,y&{Q,z&}R4X/p$|%Si#v$b$c$d$x${%O%Q%]%^%b)u){)}*P*R*U*[*b*r*s+`+c+z+}.^.w/]/e/o/p/r0V0X0d1W1Z1c3T3}4Y4b4m4u4x5l6p7_7h8U8u9T9b9l:O:c:k;g;h;j;k;l;m;p;q;r;s;t;u;|;}<O<P<R<S<V<W<X<Y<Z<[<]<^<a<b<x=Q=R=U=VQ+|&YQ1Y,OQ5[1XR7z5]V*i$|*V*jU*i$|*V*jT5d1a5eU/{*f/f5bS4f0T8RR7j4hQ+d%vQ/|*gQ0r+eQ1g,XQ5p1hQ8Z5qQ9o8[R:e9p!O%Oi$d%O%Q%]%^%b)}*P*[*r*s.w/o0V0X0d3}4m9T<x=Q=Rr)}$v)a*O*p+P/n0Z0[3s4V4q7X7k:U<j<v<wS0V*o0W#^;j#v$b$c$x${)u){*R*U*b+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4u4x5l6p7_7h8U8u9b9l:O:c:k;j;l;p;r;t;|<O<R<V<X<Z<]<a=U=Vn;k;g;h;k;m;q;s;u;}<P<S<W<Y<[<^<b!`;|(q)_*W*`.b.e.i/U/Z/c/s0k1V1X3Y4W4[5Z5]6u6x7`7d7m7o9X9_:]:l=S=T`;}3o6{7O7S8{:Q:T:{S<X.d3ZT<Y6}9O!O%Qi$d%O%Q%]%^%b)}*P*[*r*s.w/o0V0X0d3}4m9T<x=Q=Rv*P$v)a*Q*o+P/_/n0Z0[3s4V4i4q7X7k:U<j<v<wS0X*p0Y#^;l#v$b$c$x${)u){*R*U*b+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4u4x5l6p7_7h8U8u9b9l:O:c:k;j;l;p;r;t;|<O<R<V<X<Z<]<a=U=Vn;m;g;h;k;m;q;s;u;}<P<S<W<Y<[<^<b!d<O(q)_*W*`.c.d.i/U/Z/c/s0k1V1X3W3Y4W4[5Z5]6u6v6x7`7d7m7o9X9_:]:l=S=Td<P3o6|6}7S8{8|:Q:R:T:{S<Z.e3[T<[7O9PrnOXst!V!Z#d%k&f&o&q&r&t,k,p1|2PQ&c!UR,h&lrnOXst!V!Z#d%k&f&o&q&r&t,k,p1|2PR&c!UQ,Q&ZR1U+ysnOXst!V!Z#d%k&f&o&q&r&t,k,p1|2PQ1b,VS5k1e1fU8T5i5j5nS9k8V8WS:a9j9mQ:q:bR:y:rQ&j!VR,a&fR5w1nS&O|&TR0}+pQ&o!WR,k&pR,q&uT1},p2PR,u&vQ,t&vR2W,uQ'v!{R-q'vSsOtQ#dXT%ns#dQ#OTR'x#OQ#RUR'z#RQ)w$uR/V)wQ#UVR'|#UQ#XWU(S#X(T-xQ(T#YR-x(UQ-U'VR2d-UQ.m(uS3_.m3`R3`.nQ-]']R2h-]Y!rQ']-]1a5eR'g!rQ.x)aR3t.xU#_W%f*UU(Z#_([-yQ([#`R-y(VQ-X'YR2f-Xt`OXst!V!Z#d%k&f&h&o&q&r&t,k,p1|2PS#hZ%cU#r`#h.SR.S(fQ(g#jQ.P(cW.X(g.P2y6kQ2y.QR6k2zQ)j$lR/O)jQ$phR)p$pQ$`cU)]$`-t;eQ-t;RR;e)mQ/i*XW4R/i4S7]9WU4S/j/k/lS7]4T4UR9W7^$Z)|$v(q)_)a*W*`*o*p*z*{+P.d.e.g.h.i/U/Z/_/a/c/n/s0Z0[0k1V1X3W3X3Y3o3s4V4W4[4i4k4q5Z5]6u6v6w6x6}7O7Q7R7S7X7`7d7k7m7o8{8|8}9X9_:Q:R:S:T:U:]:l:{<j<v<w=S=TQ/q*`U4Z/q4]7aQ4]/sR7a4[S*j$|*VR0P*jr*O$v)a*o*p+P/n0Z0[3s4V4q7X7k:U<j<v<w!`.b(q)_*W*`.d.e.i/U/Z/c/s0k1V1X3Y4W4[5Z5]6u6x7`7d7m7o9X9_:]:l=S=TU/`*O.b6{a6{3o6}7O7S8{:Q:T:{Q0W*oQ3Z.dU4j0W3Z9OR9O6}v*Q$v)a*o*p+P/_/n0Z0[3s4V4i4q7X7k:U<j<v<w!d.c(q)_*W*`.d.e.i/U/Z/c/s0k1V1X3W3Y4W4[5Z5]6u6v6x7`7d7m7o9X9_:]:l=S=TU/b*Q.c6|e6|3o6}7O7S8{8|:Q:R:T:{Q0Y*pQ3[.eU4l0Y3[9PR9P7OQ*u%UR0^*uQ4v0kR7n4vQ+X%iR0j+XQ5_1[S7|5_9iR9i7}Q,S&[R1_,SQ5e1aR8P5eQ1m,^S5u1m8_R8_5wQ0x+lW5Q0x5S7t9eQ5S0{Q7t5RR9e7uQ+q&OR1O+qQ2P,pR6V2PYrOXst#dQ&s!ZQ+Z%kQ,j&oQ,l&qQ,m&rQ,o&tQ1z,kS1},p2PR6U1|Q%mpQ&w!_Q&z!aQ&|!bQ'O!cQ'n!uQ+Y%jQ+f%xQ+x&UQ,`&jQ,w&yW-h'h'p'q'tQ-o'lQ0O*iQ0s+gS1p,a,dQ2X,vQ2Y,yQ2Z,zQ2o-gW2q-j-k-n-pQ4y0tQ5V1RQ5Y1VQ5o1gQ5y1rQ6T1{U6d2p2s2vQ6g2tQ7p4zQ7x5XQ7y5ZQ8O5dQ8Y5pQ8`5xS8o6e6iQ8q6hQ9f7vQ9n8ZQ9s8aQ9z8pQ:_9gQ:d9oQ:h9{R:s:eQ%xyQ'a!iQ'l!uU+g%y%z%{Q-O'SU-c'b'c'dS-g'h'rQ/u*dS0t+h+iQ2a-QS2m-d-eQ2t-lQ4`/yQ4z0uQ6`2gQ6c2nQ6h2uR7e4dS$wi<xR*v%VU%Ui%V<xR0]*tQ$viS(q#v+cS)_$b$cQ)a$dQ*W$xS*`${*UQ*o%OQ*p%QQ*z%]Q*{%^Q+P%bQ.d;jQ.e;lQ.g;pQ.h;rQ.i;tQ/U)uS/Z){/]Q/_)}Q/a*PQ/c*RQ/n*[S/s*b/eQ0Z*rQ0[*sh0k+`.^1c3T5l6p8U8u9l:O:c:kQ1V+zQ1X+}Q3W;|Q3X<OQ3Y<RS3o;g;hQ3s.wQ4V/oQ4W/pQ4[/rQ4i0VQ4k0XQ4q0dQ5Z1WQ5]1ZQ6u<VQ6v<XQ6w<ZQ6x<]Q6};kQ7O;mQ7Q;qQ7R;sQ7S;uQ7X3}Q7`4YQ7d4bQ7k4mQ7m4uQ7o4xQ8{<SQ8|;}Q8}<PQ9X7_Q9_7hQ:Q<WQ:R<YQ:S<[Q:T<^Q:U9TQ:]9bQ:l<aQ:{<bQ<j<xQ<v=QQ<w=RQ=S=UR=T=VQ*x%[Q.f;nR7P;onpOXst!Z#d%k&o&q&r&t,k,p1|2PQ!fPS#fZ#oQ&y!`U'e!o5b8RQ'{#SQ(|#{Q)n$nS,d&h&kQ,i&lQ,v&xQ,{'QQ-_'_Q.p(zQ/S)oS0h+V/fQ0n+aQ1x,hQ2k-aQ3R._Q3x.}Q4o0aQ5j1dQ5{1tQ5|1uQ6Q1wQ6S1yQ6X2RQ6s3UQ7V3uQ8W5mQ8d5}Q8e6OQ8g6RQ8y6tQ9m8XR9w8h#YcOPXZst!Z!`!o#d#o#{%k&h&k&l&o&q&r&t&x'Q'_(z+V+a,h,k,p-a._/f0a1d1t1u1w1y1|2P2R3U5b5m5}6O6R6t8R8X8hQ#YWQ#eYQ%ouQ%qvS%sw!gS(O#W(RQ(U#ZQ(p#uQ(u#xQ(}$OQ)O$PQ)P$QQ)Q$RQ)R$SQ)S$TQ)T$UQ)U$VQ)V$WQ)W$XQ)Y$ZQ)[$_Q)^$aQ)c$eW)m$n)o.}3uQ+^%rQ+r&PS-R'U2bQ-p'oS-u(P-wQ-z(XQ-|(`Q.k(tQ.n(vQ.r;PQ.t;SQ.u;TQ.v;WQ/X)yQ0e+RQ2],|Q2`-PQ2p-iQ2w-}Q3].lQ3b;XQ3c;YQ3d;ZQ3e;[Q3f;]Q3g;^Q3h;_Q3i;`Q3j;aQ3k;bQ3l;cQ3m.sQ3n;fQ3q;iQ3r;vQ3y;dQ4r0gQ4{0vQ6_;xQ6e2rQ6j2xQ6y3^Q6z;yQ7T;{Q7U<TQ7}5`Q8l6]Q8p6fQ8z<UQ9Q<_Q9R<`Q9{8rQ:`9hQ:g9yQ;R#SR<o<{R#[WR'W!el!tQ!r!v!y!z']'i'j'k-]-m1a5e5gS'S!e-TS-Q'T'[R2g-ZR(w#xQ!fQT-[']-]]!qQ!r']-]1a5eQ#p]R'f;QR)b$dY!uQ']-]1a5eQ'h!rS'r!v!yS't!z5gS-l'i'jQ-n'kR2u-mT#kZ%cS#jZ%cS%im,gU(c#h#i#lS.Q(d(eQ.U(fQ0i+WQ2z.RU2{.S.T.VS6l2|2}R8s6md#^W#W#Z%f(P(Y*U+T-{/er#gZm#h#i#l%c(d(e(f+W.R.S.T.V2|2}6mS*X$x*]Q/l*YQ1v,gQ2^,}Q4P/hQ6Z2UQ7[4QQ8k6[T<g'U+UV#aW%f*UU#`W%f*US(Q#W(YU(V#Z+T/eS-S'U+UT-v(P-{V'Z!e%g*VQ$lfR)t$qT)i$l)jR3w.|T*Z$x*]T*c${*UQ0l+`Q3P.^Q5i1cQ6q3TQ8V5lQ8v6pQ9j8UQ9|8uQ:b9lQ:j:OQ:r:cR:u:knqOXst!Z#d%k&o&q&r&t,k,p1|2PQ&i!VR,`&ftmOXst!U!V!Z#d%k&f&o&q&r&t,k,p1|2PR,g&lT%jm,gR1],PR,_&dQ&S|R+w&TR+m%}T&m!W&pT&n!W&pT2O,p2P",
  nodeNames: "\u26A0 ArithOp ArithOp ?. JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewTarget new NewExpression ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression TypeArgList CompareOp < declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression InstantiationExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression InstantiationExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",
  maxTerm: 376,
  context: trackNewline,
  nodeProps: [
    ["isolate", -8, 5, 6, 14, 34, 36, 48, 50, 52, ""],
    ["group", -26, 9, 17, 19, 65, 204, 208, 212, 213, 215, 218, 221, 231, 233, 239, 241, 243, 245, 248, 254, 260, 262, 264, 266, 268, 270, 271, "Statement", -34, 13, 14, 29, 32, 33, 39, 48, 51, 52, 54, 59, 67, 69, 73, 77, 79, 81, 82, 107, 108, 117, 118, 135, 138, 140, 141, 142, 143, 144, 146, 147, 166, 167, 169, "Expression", -23, 28, 30, 34, 38, 40, 42, 171, 173, 175, 176, 178, 179, 180, 182, 183, 184, 186, 187, 188, 198, 200, 202, 203, "Type", -3, 85, 100, 106, "ClassItem"],
    ["openedBy", 23, "<", 35, "InterpolationStart", 53, "[", 57, "{", 70, "(", 159, "JSXStartCloseTag"],
    ["closedBy", 24, ">", 37, "InterpolationEnd", 47, "]", 58, "}", 71, ")", 164, "JSXEndTag"]
  ],
  propSources: [jsHighlight],
  skippedNodes: [0, 5, 6, 274],
  repeatNodeCount: 37,
  tokenData: "$Fq07[R!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#:O!R![#<_![!]#I_!]!^#Jk!^!_#Ku!_!`$![!`!a$$v!a!b$*T!b!c$,r!c!}Er!}#O$-|#O#P$/W#P#Q$4o#Q#R$5y#R#SEr#S#T$7W#T#o$8b#o#p$<r#p#q$=h#q#r$>x#r#s$@U#s$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$I|Er$I|$I}$Dk$I}$JO$Dk$JO$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr(n%d_$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$h&j(U!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(U!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$h&j(RpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(RpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z07[+rq$h&j(Rp(U!b'w0/lOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z07[.ST(S#S$h&j'x0/lO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c07[.n_$h&j(Rp(U!b'x0/lOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)3p/x`$h&j!m),Q(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW1V`#u(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW2d_#u(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At3l_(Q':f$h&j(U!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$h&j(U!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$h&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$c`$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$c``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$c`$h&j(U!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(U!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$c`(U!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k%9[:hh$h&j(Rp(U!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__WS$h&j(Rp(U!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]WS$h&j(U!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXWS$h&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSWSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWWS(U!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]WS$h&j(RpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWWS(RpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYWS(Rp(U!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S%9[C}i$h&j(j%1l(Rp(U!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr%9[EoP;=`<%lCr07[FRk$h&j(Rp(U!b$[#t(O,2j(`$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$h&j(Rp(U!b$[#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv07[JPP;=`<%lEr(KWJ_`$h&j(Rp(U!b#m(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWKl_$h&j$P(Ch(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,#xLva(u+JY$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWNW`$h&j#y(Ch(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At! c_(T';W$h&j(RpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$h&j(RpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$h&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$c`$h&j(RpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(RpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$c`(RpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b/5|!'t_!i/.^$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&U!)O_!h!Lf$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n!*[b$h&j(Rp(U!b(P%&f#n(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW!+o`$h&j(Rp(U!b#k(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;x!,|`$h&j(Rp(U!bo+4YOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,$U!.Z_!Y+Jf$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!/ec$h&j(Rp(U!b}.2^OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!0ya$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!2Z_!X!L^$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!3eg$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!5Vg$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!6wc$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!8_c$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!9uf$h&j(Rp(U!b#l(ChOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcxz!;Zz{#-}{!P!;Z!P!Q#/d!Q!^!;Z!^!_#(i!_!`#7S!`!a#8i!a!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z?O!;fb$h&j(Rp(U!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z>^!<w`$h&j(U!b!U7`OY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eq!Q!^!<n!^!_!Gr!_!}!<n!}#O!KS#O#P!Dy#P#o!<n#o#p!Gr#p;'S!<n;'S;=`!L]<%lO!<n<z!>Q^$h&j!U7`OY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@c!_!}!=y!}#O!CW#O#P!Dy#P#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!?Td$h&j!U7`O!^&c!_#W&c#W#X!>|#X#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#k!>|#k#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&c7`!@hX!U7`OY!@cZ!P!@c!P!Q!AT!Q!}!@c!}#O!Ar#O#P!Bq#P;'S!@c;'S;=`!CQ<%lO!@c7`!AYW!U7`#W#X!AT#Z#[!AT#]#^!AT#a#b!AT#g#h!AT#i#j!AT#j#k!AT#m#n!AT7`!AuVOY!ArZ#O!Ar#O#P!B[#P#Q!@c#Q;'S!Ar;'S;=`!Bk<%lO!Ar7`!B_SOY!ArZ;'S!Ar;'S;=`!Bk<%lO!Ar7`!BnP;=`<%l!Ar7`!BtSOY!@cZ;'S!@c;'S;=`!CQ<%lO!@c7`!CTP;=`<%l!@c<z!C][$h&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#O!CW#O#P!DR#P#Q!=y#Q#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DWX$h&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DvP;=`<%l!CW<z!EOX$h&jOY!=yYZ&cZ!^!=y!^!_!@c!_#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!EnP;=`<%l!=y>^!Ezl$h&j(U!b!U7`OY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#W&}#W#X!Eq#X#Z&}#Z#[!Eq#[#]&}#]#^!Eq#^#a&}#a#b!Eq#b#g&}#g#h!Eq#h#i&}#i#j!Eq#j#k!Eq#k#m&}#m#n!Eq#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}8r!GyZ(U!b!U7`OY!GrZw!Grwx!@cx!P!Gr!P!Q!Hl!Q!}!Gr!}#O!JU#O#P!Bq#P;'S!Gr;'S;=`!J|<%lO!Gr8r!Hse(U!b!U7`OY'}Zw'}x#O'}#P#W'}#W#X!Hl#X#Z'}#Z#[!Hl#[#]'}#]#^!Hl#^#a'}#a#b!Hl#b#g'}#g#h!Hl#h#i'}#i#j!Hl#j#k!Hl#k#m'}#m#n!Hl#n;'S'};'S;=`(f<%lO'}8r!JZX(U!bOY!JUZw!JUwx!Arx#O!JU#O#P!B[#P#Q!Gr#Q;'S!JU;'S;=`!Jv<%lO!JU8r!JyP;=`<%l!JU8r!KPP;=`<%l!Gr>^!KZ^$h&j(U!bOY!KSYZ&cZw!KSwx!CWx!^!KS!^!_!JU!_#O!KS#O#P!DR#P#Q!<n#Q#o!KS#o#p!JU#p;'S!KS;'S;=`!LV<%lO!KS>^!LYP;=`<%l!KS>^!L`P;=`<%l!<n=l!Ll`$h&j(Rp!U7`OY!LcYZ&cZr!Lcrs!=ys!P!Lc!P!Q!Mn!Q!^!Lc!^!_# o!_!}!Lc!}#O#%P#O#P!Dy#P#o!Lc#o#p# o#p;'S!Lc;'S;=`#&Y<%lO!Lc=l!Mwl$h&j(Rp!U7`OY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#W(r#W#X!Mn#X#Z(r#Z#[!Mn#[#](r#]#^!Mn#^#a(r#a#b!Mn#b#g(r#g#h!Mn#h#i(r#i#j!Mn#j#k!Mn#k#m(r#m#n!Mn#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r8Q# vZ(Rp!U7`OY# oZr# ors!@cs!P# o!P!Q#!i!Q!}# o!}#O#$R#O#P!Bq#P;'S# o;'S;=`#$y<%lO# o8Q#!pe(Rp!U7`OY)rZr)rs#O)r#P#W)r#W#X#!i#X#Z)r#Z#[#!i#[#])r#]#^#!i#^#a)r#a#b#!i#b#g)r#g#h#!i#h#i)r#i#j#!i#j#k#!i#k#m)r#m#n#!i#n;'S)r;'S;=`*Z<%lO)r8Q#$WX(RpOY#$RZr#$Rrs!Ars#O#$R#O#P!B[#P#Q# o#Q;'S#$R;'S;=`#$s<%lO#$R8Q#$vP;=`<%l#$R8Q#$|P;=`<%l# o=l#%W^$h&j(RpOY#%PYZ&cZr#%Prs!CWs!^#%P!^!_#$R!_#O#%P#O#P!DR#P#Q!Lc#Q#o#%P#o#p#$R#p;'S#%P;'S;=`#&S<%lO#%P=l#&VP;=`<%l#%P=l#&]P;=`<%l!Lc?O#&kn$h&j(Rp(U!b!U7`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#W%Z#W#X#&`#X#Z%Z#Z#[#&`#[#]%Z#]#^#&`#^#a%Z#a#b#&`#b#g%Z#g#h#&`#h#i%Z#i#j#&`#j#k#&`#k#m%Z#m#n#&`#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z9d#(r](Rp(U!b!U7`OY#(iZr#(irs!Grsw#(iwx# ox!P#(i!P!Q#)k!Q!}#(i!}#O#+`#O#P!Bq#P;'S#(i;'S;=`#,`<%lO#(i9d#)th(Rp(U!b!U7`OY*gZr*grs'}sw*gwx)rx#O*g#P#W*g#W#X#)k#X#Z*g#Z#[#)k#[#]*g#]#^#)k#^#a*g#a#b#)k#b#g*g#g#h#)k#h#i*g#i#j#)k#j#k#)k#k#m*g#m#n#)k#n;'S*g;'S;=`+Z<%lO*g9d#+gZ(Rp(U!bOY#+`Zr#+`rs!JUsw#+`wx#$Rx#O#+`#O#P!B[#P#Q#(i#Q;'S#+`;'S;=`#,Y<%lO#+`9d#,]P;=`<%l#+`9d#,cP;=`<%l#(i?O#,o`$h&j(Rp(U!bOY#,fYZ&cZr#,frs!KSsw#,fwx#%Px!^#,f!^!_#+`!_#O#,f#O#P!DR#P#Q!;Z#Q#o#,f#o#p#+`#p;'S#,f;'S;=`#-q<%lO#,f?O#-tP;=`<%l#,f?O#-zP;=`<%l!;Z07[#.[b$h&j(Rp(U!b'y0/l!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z07[#/o_$h&j(Rp(U!bT0/lOY#/dYZ&cZr#/drs#0nsw#/dwx#4Ox!^#/d!^!_#5}!_#O#/d#O#P#1p#P#o#/d#o#p#5}#p;'S#/d;'S;=`#6|<%lO#/d06j#0w]$h&j(U!bT0/lOY#0nYZ&cZw#0nwx#1px!^#0n!^!_#3R!_#O#0n#O#P#1p#P#o#0n#o#p#3R#p;'S#0n;'S;=`#3x<%lO#0n05W#1wX$h&jT0/lOY#1pYZ&cZ!^#1p!^!_#2d!_#o#1p#o#p#2d#p;'S#1p;'S;=`#2{<%lO#1p0/l#2iST0/lOY#2dZ;'S#2d;'S;=`#2u<%lO#2d0/l#2xP;=`<%l#2d05W#3OP;=`<%l#1p01O#3YW(U!bT0/lOY#3RZw#3Rwx#2dx#O#3R#O#P#2d#P;'S#3R;'S;=`#3r<%lO#3R01O#3uP;=`<%l#3R06j#3{P;=`<%l#0n05x#4X]$h&j(RpT0/lOY#4OYZ&cZr#4Ors#1ps!^#4O!^!_#5Q!_#O#4O#O#P#1p#P#o#4O#o#p#5Q#p;'S#4O;'S;=`#5w<%lO#4O00^#5XW(RpT0/lOY#5QZr#5Qrs#2ds#O#5Q#O#P#2d#P;'S#5Q;'S;=`#5q<%lO#5Q00^#5tP;=`<%l#5Q05x#5zP;=`<%l#4O01p#6WY(Rp(U!bT0/lOY#5}Zr#5}rs#3Rsw#5}wx#5Qx#O#5}#O#P#2d#P;'S#5};'S;=`#6v<%lO#5}01p#6yP;=`<%l#5}07[#7PP;=`<%l#/d)3h#7ab$h&j$P(Ch(Rp(U!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;ZAt#8vb$Y#t$h&j(Rp(U!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z'Ad#:Zp$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#U%Z#U#V#?i#V#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#d#Bq#d#l%Z#l#m#Es#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#<jk$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#>j_$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#?rd$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#A]f$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Bzc$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Dbe$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#E|g$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Gpi$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x#Il_!d$b$h&j#})Lv(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Jv_al$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f#LS^h#)`#O-<U(Rp(U!b(y7`OY*gZr*grs'}sw*gwx)rx!P*g!P!Q#MO!Q!^*g!^!_#Mt!_!`$ f!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#MXX$j&j(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El#M}Z#o(Ch(Rp(U!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Np!`#O*g#P;'S*g;'S;=`+Z<%lO*g(El#NyX$P(Ch(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El$ oX#p(Ch(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g*)x$!ga#]*!Y$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$#l!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(K[$#w_#h(Cl$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x$%Vag!*r#p(Ch$e#|$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$&[!`!a$'f!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$&g_#p(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$'qa#o(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$(v!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$)R`#o(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(Kd$*`a(m(Ct$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!a%Z!a!b$+e!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$+p`$h&j#z(Ch(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`$,}_!y$Ip$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f$.X_!P0,v$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/]Z$h&jO!^$0O!^!_$0f!_#i$0O#i#j$0k#j#l$0O#l#m$2^#m#o$0O#o#p$0f#p;'S$0O;'S;=`$4i<%lO$0O(n$0VT_#S$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0kO_#S(n$0p[$h&jO!Q&c!Q![$1f![!^&c!_!c&c!c!i$1f!i#T&c#T#Z$1f#Z#o&c#o#p$3|#p;'S&c;'S;=`&w<%lO&c(n$1kZ$h&jO!Q&c!Q![$2^![!^&c!_!c&c!c!i$2^!i#T&c#T#Z$2^#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2cZ$h&jO!Q&c!Q![$3U![!^&c!_!c&c!c!i$3U!i#T&c#T#Z$3U#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3ZZ$h&jO!Q&c!Q![$0O![!^&c!_!c&c!c!i$0O!i#T&c#T#Z$0O#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$4PR!Q![$4Y!c!i$4Y#T#Z$4Y#S$4]S!Q![$4Y!c!i$4Y#T#Z$4Y#q#r$0f(n$4lP;=`<%l$0O#1[$4z_!V#)l$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$6U`#w(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;p$7c_$h&j(Rp(U!b([+4QOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$8qk$h&j(Rp(U!b(O,2j$^#t(`$I[OY%ZYZ&cZr%Zrs&}st%Ztu$8buw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$8b![!^%Z!^!_*g!_!c%Z!c!}$8b!}#O%Z#O#P&c#P#R%Z#R#S$8b#S#T%Z#T#o$8b#o#p*g#p$g%Z$g;'S$8b;'S;=`$<l<%lO$8b+d$:qk$h&j(Rp(U!b$^#tOY%ZYZ&cZr%Zrs&}st%Ztu$:fuw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$:f![!^%Z!^!_*g!_!c%Z!c!}$:f!}#O%Z#O#P&c#P#R%Z#R#S$:f#S#T%Z#T#o$:f#o#p*g#p$g%Z$g;'S$:f;'S;=`$<f<%lO$:f+d$<iP;=`<%l$:f07[$<oP;=`<%l$8b#Jf$<{X![#Hb(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g,#x$=sa(t+JY$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+e#q;'S%Z;'S;=`+a<%lO%Z(Kd$?V_!Z(Cds`$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z?O$@a_!n7`$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$Aq|$h&j(Rp(U!b'w0/l$[#t(O,2j(`$I[OX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr07[$D|k$h&j(Rp(U!b'x0/l$[#t(O,2j(`$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr",
  tokenizers: [noSemicolon, operatorToken, jsx, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, insertSemicolon, new LocalTokenGroup("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOu~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!R~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(^~~", 141, 335), new LocalTokenGroup("j~RQYZXz{^~^O'{~~aP!P!Qd~iO'|~~", 25, 318)],
  topRules: { "Script": [0, 7], "SingleExpression": [1, 272], "SingleClassItem": [2, 273] },
  dialects: { jsx: 0, ts: 14725 },
  dynamicPrecedences: { "77": 1, "79": 1, "91": 1, "167": 1, "196": 1 },
  specialized: [{ term: 322, get: (value) => spec_identifier2[value] || -1 }, { term: 338, get: (value) => spec_word[value] || -1 }, { term: 92, get: (value) => spec_LessThan[value] || -1 }],
  tokenPrec: 14749
});

// node_modules/@codemirror/lang-javascript/dist/index.js
var snippets = [
  /* @__PURE__ */ snippetCompletion("function ${name}(${params}) {\n	${}\n}", {
    label: "function",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n	${}\n}", {
    label: "for",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("for (let ${name} of ${collection}) {\n	${}\n}", {
    label: "for",
    detail: "of loop",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("do {\n	${}\n} while (${})", {
    label: "do",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("while (${}) {\n	${}\n}", {
    label: "while",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("try {\n	${}\n} catch (${error}) {\n	${}\n}", {
    label: "try",
    detail: "/ catch block",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("if (${}) {\n	${}\n}", {
    label: "if",
    detail: "block",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("if (${}) {\n	${}\n} else {\n	${}\n}", {
    label: "if",
    detail: "/ else block",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("class ${name} {\n	constructor(${params}) {\n		${}\n	}\n}", {
    label: "class",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion('import {${names}} from "${module}"\n${}', {
    label: "import",
    detail: "named",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion('import ${name} from "${module}"\n${}', {
    label: "import",
    detail: "default",
    type: "keyword"
  })
];
var typescriptSnippets = /* @__PURE__ */ snippets.concat([
  /* @__PURE__ */ snippetCompletion("interface ${name} {\n	${}\n}", {
    label: "interface",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("type ${name} = ${type}", {
    label: "type",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("enum ${name} {\n	${}\n}", {
    label: "enum",
    detail: "definition",
    type: "keyword"
  })
]);
var cache = /* @__PURE__ */ new NodeWeakMap();
var ScopeNodes = /* @__PURE__ */ new Set([
  "Script",
  "Block",
  "FunctionExpression",
  "FunctionDeclaration",
  "ArrowFunction",
  "MethodDeclaration",
  "ForStatement"
]);
function defID(type) {
  return (node, def) => {
    let id3 = node.node.getChild("VariableDefinition");
    if (id3)
      def(id3, type);
    return true;
  };
}
var functionContext = ["FunctionDeclaration"];
var gatherCompletions = {
  FunctionDeclaration: /* @__PURE__ */ defID("function"),
  ClassDeclaration: /* @__PURE__ */ defID("class"),
  ClassExpression: () => true,
  EnumDeclaration: /* @__PURE__ */ defID("constant"),
  TypeAliasDeclaration: /* @__PURE__ */ defID("type"),
  NamespaceDeclaration: /* @__PURE__ */ defID("namespace"),
  VariableDefinition(node, def) {
    if (!node.matchContext(functionContext))
      def(node, "variable");
  },
  TypeDefinition(node, def) {
    def(node, "type");
  },
  __proto__: null
};
function getScope(doc2, node) {
  let cached = cache.get(node);
  if (cached)
    return cached;
  let completions = [], top2 = true;
  function def(node2, type) {
    let name2 = doc2.sliceString(node2.from, node2.to);
    completions.push({ label: name2, type });
  }
  node.cursor(IterMode.IncludeAnonymous).iterate((node2) => {
    if (top2) {
      top2 = false;
    } else if (node2.name) {
      let gather = gatherCompletions[node2.name];
      if (gather && gather(node2, def) || ScopeNodes.has(node2.name))
        return false;
    } else if (node2.to - node2.from > 8192) {
      for (let c2 of getScope(doc2, node2.node))
        completions.push(c2);
      return false;
    }
  });
  cache.set(node, completions);
  return completions;
}
var Identifier = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/;
var dontComplete = [
  "TemplateString",
  "String",
  "RegExp",
  "LineComment",
  "BlockComment",
  "VariableDefinition",
  "TypeDefinition",
  "Label",
  "PropertyDefinition",
  "PropertyName",
  "PrivatePropertyDefinition",
  "PrivatePropertyName",
  ".",
  "?."
];
function localCompletionSource(context) {
  let inner = syntaxTree(context.state).resolveInner(context.pos, -1);
  if (dontComplete.indexOf(inner.name) > -1)
    return null;
  let isWord = inner.name == "VariableName" || inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));
  if (!isWord && !context.explicit)
    return null;
  let options = [];
  for (let pos = inner; pos; pos = pos.parent) {
    if (ScopeNodes.has(pos.name))
      options = options.concat(getScope(context.state.doc, pos));
  }
  return {
    options,
    from: isWord ? inner.from : context.pos,
    validFor: Identifier
  };
}
var javascriptLanguage = /* @__PURE__ */ LRLanguage.define({
  name: "javascript",
  parser: /* @__PURE__ */ parser4.configure({
    props: [
      /* @__PURE__ */ indentNodeProp.add({
        IfStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|else\b)/ }),
        TryStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|catch\b|finally\b)/ }),
        LabeledStatement: flatIndent,
        SwitchBody: (context) => {
          let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
          return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
        },
        Block: /* @__PURE__ */ delimitedIndent({ closing: "}" }),
        ArrowFunction: (cx2) => cx2.baseIndent + cx2.unit,
        "TemplateString BlockComment": () => null,
        "Statement Property": /* @__PURE__ */ continuedIndent({ except: /^{/ }),
        JSXElement(context) {
          let closed = /^\s*<\//.test(context.textAfter);
          return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
        },
        JSXEscape(context) {
          let closed = /\s*\}/.test(context.textAfter);
          return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
        },
        "JSXOpenTag JSXSelfClosingTag"(context) {
          return context.column(context.node.from) + context.unit;
        }
      }),
      /* @__PURE__ */ foldNodeProp.add({
        "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType": foldInside,
        BlockComment(tree) {
          return { from: tree.from + 2, to: tree.to - 2 };
        }
      })
    ]
  }),
  languageData: {
    closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
    commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
    indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
    wordChars: "$"
  }
});
var jsxSublanguage = {
  test: (node) => /^JSX/.test(node.name),
  facet: /* @__PURE__ */ defineLanguageFacet({ commentTokens: { block: { open: "{/*", close: "*/}" } } })
};
var typescriptLanguage = /* @__PURE__ */ javascriptLanguage.configure({ dialect: "ts" }, "typescript");
var jsxLanguage = /* @__PURE__ */ javascriptLanguage.configure({
  dialect: "jsx",
  props: [/* @__PURE__ */ sublanguageProp.add((n2) => n2.isTop ? [jsxSublanguage] : void 0)]
});
var tsxLanguage = /* @__PURE__ */ javascriptLanguage.configure({
  dialect: "jsx ts",
  props: [/* @__PURE__ */ sublanguageProp.add((n2) => n2.isTop ? [jsxSublanguage] : void 0)]
}, "typescript");
var kwCompletion = (name2) => ({ label: name2, type: "keyword" });
var keywords = /* @__PURE__ */ "break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(kwCompletion);
var typescriptKeywords = /* @__PURE__ */ keywords.concat(/* @__PURE__ */ ["declare", "implements", "private", "protected", "public"].map(kwCompletion));
function javascript(config2 = {}) {
  let lang = config2.jsx ? config2.typescript ? tsxLanguage : jsxLanguage : config2.typescript ? typescriptLanguage : javascriptLanguage;
  let completions = config2.typescript ? typescriptSnippets.concat(typescriptKeywords) : snippets.concat(keywords);
  return new LanguageSupport(lang, [
    javascriptLanguage.data.of({
      autocomplete: ifNotIn(dontComplete, completeFromList(completions))
    }),
    javascriptLanguage.data.of({
      autocomplete: localCompletionSource
    }),
    config2.jsx ? autoCloseTags : []
  ]);
}
function findOpenTag(node) {
  for (; ; ) {
    if (node.name == "JSXOpenTag" || node.name == "JSXSelfClosingTag" || node.name == "JSXFragmentTag")
      return node;
    if (node.name == "JSXEscape" || !node.parent)
      return null;
    node = node.parent;
  }
}
function elementName(doc2, tree, max = doc2.length) {
  for (let ch2 = tree === null || tree === void 0 ? void 0 : tree.firstChild; ch2; ch2 = ch2.nextSibling) {
    if (ch2.name == "JSXIdentifier" || ch2.name == "JSXBuiltin" || ch2.name == "JSXNamespacedName" || ch2.name == "JSXMemberExpression")
      return doc2.sliceString(ch2.from, Math.min(ch2.to, max));
  }
  return "";
}
var android2 = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent);
var autoCloseTags = /* @__PURE__ */ EditorView.inputHandler.of((view, from, to2, text, defaultInsert) => {
  if ((android2 ? view.composing : view.compositionStarted) || view.state.readOnly || from != to2 || text != ">" && text != "/" || !javascriptLanguage.isActiveAt(view.state, from, -1))
    return false;
  let base2 = defaultInsert(), { state } = base2;
  let closeTags = state.changeByRange((range) => {
    var _a3;
    let { head } = range, around = syntaxTree(state).resolveInner(head - 1, -1), name2;
    if (around.name == "JSXStartTag")
      around = around.parent;
    if (state.doc.sliceString(head - 1, head) != text || around.name == "JSXAttributeValue" && around.to > head) ;
    else if (text == ">" && around.name == "JSXFragmentTag") {
      return { range, changes: { from: head, insert: `</>` } };
    } else if (text == "/" && around.name == "JSXStartCloseTag") {
      let empty2 = around.parent, base3 = empty2.parent;
      if (base3 && empty2.from == head - 2 && ((name2 = elementName(state.doc, base3.firstChild, head)) || ((_a3 = base3.firstChild) === null || _a3 === void 0 ? void 0 : _a3.name) == "JSXFragmentTag")) {
        let insert2 = `${name2}>`;
        return { range: EditorSelection.cursor(head + insert2.length, -1), changes: { from: head, insert: insert2 } };
      }
    } else if (text == ">") {
      let openTag = findOpenTag(around);
      if (openTag && openTag.name == "JSXOpenTag" && !/^\/?>|^<\//.test(state.doc.sliceString(head, head + 2)) && (name2 = elementName(state.doc, openTag, head)))
        return { range, changes: { from: head, insert: `</${name2}>` } };
    }
    return { range };
  });
  if (closeTags.changes.empty)
    return false;
  view.dispatch([
    base2,
    state.update(closeTags, { userEvent: "input.complete", scrollIntoView: true })
  ]);
  return true;
});
function esLint(eslint, config2) {
  if (!config2) {
    config2 = {
      parserOptions: { ecmaVersion: 2019, sourceType: "module" },
      env: { browser: true, node: true, es6: true, es2015: true, es2017: true, es2020: true },
      rules: {}
    };
    eslint.getRules().forEach((desc, name2) => {
      if (desc.meta.docs.recommended)
        config2.rules[name2] = 2;
    });
  }
  return (view) => {
    let { state } = view, found = [];
    for (let { from, to: to2 } of javascriptLanguage.findRegions(state)) {
      let fromLine = state.doc.lineAt(from), offset = { line: fromLine.number - 1, col: from - fromLine.from, pos: from };
      for (let d2 of eslint.verify(state.sliceDoc(from, to2), config2))
        found.push(translateDiagnostic(d2, state.doc, offset));
    }
    return found;
  };
}
function mapPos(line, col, doc2, offset) {
  return doc2.line(line + offset.line).from + col + (line == 1 ? offset.col - 1 : -1);
}
function translateDiagnostic(input, doc2, offset) {
  let start = mapPos(input.line, input.column, doc2, offset);
  let result = {
    from: start,
    to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc2, offset) : start,
    message: input.message,
    source: input.ruleId ? "eslint:" + input.ruleId : "eslint",
    severity: input.severity == 1 ? "warning" : "error"
  };
  if (input.fix) {
    let { range, text } = input.fix, from = range[0] + offset.pos - start, to2 = range[1] + offset.pos - start;
    result.actions = [{
      name: "fix",
      apply(view, start2) {
        view.dispatch({ changes: { from: start2 + from, to: start2 + to2, insert: text }, scrollIntoView: true });
      }
    }];
  }
  return result;
}

// node_modules/@codemirror/lang-html/dist/index.js
var Targets = ["_blank", "_self", "_top", "_parent"];
var Charsets = ["ascii", "utf-8", "utf-16", "latin1", "latin1"];
var Methods = ["get", "post", "put", "delete"];
var Encs = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"];
var Bool = ["true", "false"];
var S = {};
var Tags = {
  a: {
    attrs: {
      href: null,
      ping: null,
      type: null,
      media: null,
      target: Targets,
      hreflang: null
    }
  },
  abbr: S,
  address: S,
  area: {
    attrs: {
      alt: null,
      coords: null,
      href: null,
      target: null,
      ping: null,
      media: null,
      hreflang: null,
      type: null,
      shape: ["default", "rect", "circle", "poly"]
    }
  },
  article: S,
  aside: S,
  audio: {
    attrs: {
      src: null,
      mediagroup: null,
      crossorigin: ["anonymous", "use-credentials"],
      preload: ["none", "metadata", "auto"],
      autoplay: ["autoplay"],
      loop: ["loop"],
      controls: ["controls"]
    }
  },
  b: S,
  base: { attrs: { href: null, target: Targets } },
  bdi: S,
  bdo: S,
  blockquote: { attrs: { cite: null } },
  body: S,
  br: S,
  button: {
    attrs: {
      form: null,
      formaction: null,
      name: null,
      value: null,
      autofocus: ["autofocus"],
      disabled: ["autofocus"],
      formenctype: Encs,
      formmethod: Methods,
      formnovalidate: ["novalidate"],
      formtarget: Targets,
      type: ["submit", "reset", "button"]
    }
  },
  canvas: { attrs: { width: null, height: null } },
  caption: S,
  center: S,
  cite: S,
  code: S,
  col: { attrs: { span: null } },
  colgroup: { attrs: { span: null } },
  command: {
    attrs: {
      type: ["command", "checkbox", "radio"],
      label: null,
      icon: null,
      radiogroup: null,
      command: null,
      title: null,
      disabled: ["disabled"],
      checked: ["checked"]
    }
  },
  data: { attrs: { value: null } },
  datagrid: { attrs: { disabled: ["disabled"], multiple: ["multiple"] } },
  datalist: { attrs: { data: null } },
  dd: S,
  del: { attrs: { cite: null, datetime: null } },
  details: { attrs: { open: ["open"] } },
  dfn: S,
  div: S,
  dl: S,
  dt: S,
  em: S,
  embed: { attrs: { src: null, type: null, width: null, height: null } },
  eventsource: { attrs: { src: null } },
  fieldset: { attrs: { disabled: ["disabled"], form: null, name: null } },
  figcaption: S,
  figure: S,
  footer: S,
  form: {
    attrs: {
      action: null,
      name: null,
      "accept-charset": Charsets,
      autocomplete: ["on", "off"],
      enctype: Encs,
      method: Methods,
      novalidate: ["novalidate"],
      target: Targets
    }
  },
  h1: S,
  h2: S,
  h3: S,
  h4: S,
  h5: S,
  h6: S,
  head: {
    children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
  },
  header: S,
  hgroup: S,
  hr: S,
  html: {
    attrs: { manifest: null }
  },
  i: S,
  iframe: {
    attrs: {
      src: null,
      srcdoc: null,
      name: null,
      width: null,
      height: null,
      sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
      seamless: ["seamless"]
    }
  },
  img: {
    attrs: {
      alt: null,
      src: null,
      ismap: null,
      usemap: null,
      width: null,
      height: null,
      crossorigin: ["anonymous", "use-credentials"]
    }
  },
  input: {
    attrs: {
      alt: null,
      dirname: null,
      form: null,
      formaction: null,
      height: null,
      list: null,
      max: null,
      maxlength: null,
      min: null,
      name: null,
      pattern: null,
      placeholder: null,
      size: null,
      src: null,
      step: null,
      value: null,
      width: null,
      accept: ["audio/*", "video/*", "image/*"],
      autocomplete: ["on", "off"],
      autofocus: ["autofocus"],
      checked: ["checked"],
      disabled: ["disabled"],
      formenctype: Encs,
      formmethod: Methods,
      formnovalidate: ["novalidate"],
      formtarget: Targets,
      multiple: ["multiple"],
      readonly: ["readonly"],
      required: ["required"],
      type: [
        "hidden",
        "text",
        "search",
        "tel",
        "url",
        "email",
        "password",
        "datetime",
        "date",
        "month",
        "week",
        "time",
        "datetime-local",
        "number",
        "range",
        "color",
        "checkbox",
        "radio",
        "file",
        "submit",
        "image",
        "reset",
        "button"
      ]
    }
  },
  ins: { attrs: { cite: null, datetime: null } },
  kbd: S,
  keygen: {
    attrs: {
      challenge: null,
      form: null,
      name: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      keytype: ["RSA"]
    }
  },
  label: { attrs: { for: null, form: null } },
  legend: S,
  li: { attrs: { value: null } },
  link: {
    attrs: {
      href: null,
      type: null,
      hreflang: null,
      media: null,
      sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
    }
  },
  map: { attrs: { name: null } },
  mark: S,
  menu: { attrs: { label: null, type: ["list", "context", "toolbar"] } },
  meta: {
    attrs: {
      content: null,
      charset: Charsets,
      name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
      "http-equiv": ["content-language", "content-type", "default-style", "refresh"]
    }
  },
  meter: { attrs: { value: null, min: null, low: null, high: null, max: null, optimum: null } },
  nav: S,
  noscript: S,
  object: {
    attrs: {
      data: null,
      type: null,
      name: null,
      usemap: null,
      form: null,
      width: null,
      height: null,
      typemustmatch: ["typemustmatch"]
    }
  },
  ol: {
    attrs: { reversed: ["reversed"], start: null, type: ["1", "a", "A", "i", "I"] },
    children: ["li", "script", "template", "ul", "ol"]
  },
  optgroup: { attrs: { disabled: ["disabled"], label: null } },
  option: { attrs: { disabled: ["disabled"], label: null, selected: ["selected"], value: null } },
  output: { attrs: { for: null, form: null, name: null } },
  p: S,
  param: { attrs: { name: null, value: null } },
  pre: S,
  progress: { attrs: { value: null, max: null } },
  q: { attrs: { cite: null } },
  rp: S,
  rt: S,
  ruby: S,
  samp: S,
  script: {
    attrs: {
      type: ["text/javascript"],
      src: null,
      async: ["async"],
      defer: ["defer"],
      charset: Charsets
    }
  },
  section: S,
  select: {
    attrs: {
      form: null,
      name: null,
      size: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      multiple: ["multiple"]
    }
  },
  slot: { attrs: { name: null } },
  small: S,
  source: { attrs: { src: null, type: null, media: null } },
  span: S,
  strong: S,
  style: {
    attrs: {
      type: ["text/css"],
      media: null,
      scoped: null
    }
  },
  sub: S,
  summary: S,
  sup: S,
  table: S,
  tbody: S,
  td: { attrs: { colspan: null, rowspan: null, headers: null } },
  template: S,
  textarea: {
    attrs: {
      dirname: null,
      form: null,
      maxlength: null,
      name: null,
      placeholder: null,
      rows: null,
      cols: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      readonly: ["readonly"],
      required: ["required"],
      wrap: ["soft", "hard"]
    }
  },
  tfoot: S,
  th: { attrs: { colspan: null, rowspan: null, headers: null, scope: ["row", "col", "rowgroup", "colgroup"] } },
  thead: S,
  time: { attrs: { datetime: null } },
  title: S,
  tr: S,
  track: {
    attrs: {
      src: null,
      label: null,
      default: null,
      kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
      srclang: null
    }
  },
  ul: { children: ["li", "script", "template", "ul", "ol"] },
  var: S,
  video: {
    attrs: {
      src: null,
      poster: null,
      width: null,
      height: null,
      crossorigin: ["anonymous", "use-credentials"],
      preload: ["auto", "metadata", "none"],
      autoplay: ["autoplay"],
      mediagroup: ["movie"],
      muted: ["muted"],
      controls: ["controls"]
    }
  },
  wbr: S
};
var GlobalAttrs = {
  accesskey: null,
  class: null,
  contenteditable: Bool,
  contextmenu: null,
  dir: ["ltr", "rtl", "auto"],
  draggable: ["true", "false", "auto"],
  dropzone: ["copy", "move", "link", "string:", "file:"],
  hidden: ["hidden"],
  id: null,
  inert: ["inert"],
  itemid: null,
  itemprop: null,
  itemref: null,
  itemscope: ["itemscope"],
  itemtype: null,
  lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
  spellcheck: Bool,
  autocorrect: Bool,
  autocapitalize: Bool,
  style: null,
  tabindex: null,
  title: null,
  translate: ["yes", "no"],
  rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
  role: /* @__PURE__ */ "alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
  "aria-activedescendant": null,
  "aria-atomic": Bool,
  "aria-autocomplete": ["inline", "list", "both", "none"],
  "aria-busy": Bool,
  "aria-checked": ["true", "false", "mixed", "undefined"],
  "aria-controls": null,
  "aria-describedby": null,
  "aria-disabled": Bool,
  "aria-dropeffect": null,
  "aria-expanded": ["true", "false", "undefined"],
  "aria-flowto": null,
  "aria-grabbed": ["true", "false", "undefined"],
  "aria-haspopup": Bool,
  "aria-hidden": Bool,
  "aria-invalid": ["true", "false", "grammar", "spelling"],
  "aria-label": null,
  "aria-labelledby": null,
  "aria-level": null,
  "aria-live": ["off", "polite", "assertive"],
  "aria-multiline": Bool,
  "aria-multiselectable": Bool,
  "aria-owns": null,
  "aria-posinset": null,
  "aria-pressed": ["true", "false", "mixed", "undefined"],
  "aria-readonly": Bool,
  "aria-relevant": null,
  "aria-required": Bool,
  "aria-selected": ["true", "false", "undefined"],
  "aria-setsize": null,
  "aria-sort": ["ascending", "descending", "none", "other"],
  "aria-valuemax": null,
  "aria-valuemin": null,
  "aria-valuenow": null,
  "aria-valuetext": null
};
var eventAttributes = /* @__PURE__ */ "beforeunload copy cut dragstart dragover dragleave dragenter dragend drag paste focus blur change click load mousedown mouseenter mouseleave mouseup keydown keyup resize scroll unload".split(" ").map((n2) => "on" + n2);
for (let a2 of eventAttributes)
  GlobalAttrs[a2] = null;
var Schema = class {
  constructor(extraTags, extraAttrs) {
    this.tags = Object.assign(Object.assign({}, Tags), extraTags);
    this.globalAttrs = Object.assign(Object.assign({}, GlobalAttrs), extraAttrs);
    this.allTags = Object.keys(this.tags);
    this.globalAttrNames = Object.keys(this.globalAttrs);
  }
};
Schema.default = /* @__PURE__ */ new Schema();
function elementName2(doc2, tree, max = doc2.length) {
  if (!tree)
    return "";
  let tag = tree.firstChild;
  let name2 = tag && tag.getChild("TagName");
  return name2 ? doc2.sliceString(name2.from, Math.min(name2.to, max)) : "";
}
function findParentElement(tree, skip = false) {
  for (; tree; tree = tree.parent)
    if (tree.name == "Element") {
      if (skip)
        skip = false;
      else
        return tree;
    }
  return null;
}
function allowedChildren(doc2, tree, schema) {
  let parentInfo = schema.tags[elementName2(doc2, findParentElement(tree))];
  return (parentInfo === null || parentInfo === void 0 ? void 0 : parentInfo.children) || schema.allTags;
}
function openTags(doc2, tree) {
  let open = [];
  for (let parent = findParentElement(tree); parent && !parent.type.isTop; parent = findParentElement(parent.parent)) {
    let tagName = elementName2(doc2, parent);
    if (tagName && parent.lastChild.name == "CloseTag")
      break;
    if (tagName && open.indexOf(tagName) < 0 && (tree.name == "EndTag" || tree.from >= parent.firstChild.to))
      open.push(tagName);
  }
  return open;
}
var identifier3 = /^[:\-\.\w\u00b7-\uffff]*$/;
function completeTag(state, schema, tree, from, to2) {
  let end = /\s*>/.test(state.sliceDoc(to2, to2 + 5)) ? "" : ">";
  let parent = findParentElement(tree, true);
  return {
    from,
    to: to2,
    options: allowedChildren(state.doc, parent, schema).map((tagName) => ({ label: tagName, type: "type" })).concat(openTags(state.doc, tree).map((tag, i2) => ({
      label: "/" + tag,
      apply: "/" + tag + end,
      type: "type",
      boost: 99 - i2
    }))),
    validFor: /^\/?[:\-\.\w\u00b7-\uffff]*$/
  };
}
function completeCloseTag(state, tree, from, to2) {
  let end = /\s*>/.test(state.sliceDoc(to2, to2 + 5)) ? "" : ">";
  return {
    from,
    to: to2,
    options: openTags(state.doc, tree).map((tag, i2) => ({ label: tag, apply: tag + end, type: "type", boost: 99 - i2 })),
    validFor: identifier3
  };
}
function completeStartTag(state, schema, tree, pos) {
  let options = [], level = 0;
  for (let tagName of allowedChildren(state.doc, tree, schema))
    options.push({ label: "<" + tagName, type: "type" });
  for (let open of openTags(state.doc, tree))
    options.push({ label: "</" + open + ">", type: "type", boost: 99 - level++ });
  return { from: pos, to: pos, options, validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/ };
}
function completeAttrName(state, schema, tree, from, to2) {
  let elt2 = findParentElement(tree), info = elt2 ? schema.tags[elementName2(state.doc, elt2)] : null;
  let localAttrs = info && info.attrs ? Object.keys(info.attrs) : [];
  let names = info && info.globalAttrs === false ? localAttrs : localAttrs.length ? localAttrs.concat(schema.globalAttrNames) : schema.globalAttrNames;
  return {
    from,
    to: to2,
    options: names.map((attrName) => ({ label: attrName, type: "property" })),
    validFor: identifier3
  };
}
function completeAttrValue(state, schema, tree, from, to2) {
  var _a3;
  let nameNode = (_a3 = tree.parent) === null || _a3 === void 0 ? void 0 : _a3.getChild("AttributeName");
  let options = [], token = void 0;
  if (nameNode) {
    let attrName = state.sliceDoc(nameNode.from, nameNode.to);
    let attrs = schema.globalAttrs[attrName];
    if (!attrs) {
      let elt2 = findParentElement(tree), info = elt2 ? schema.tags[elementName2(state.doc, elt2)] : null;
      attrs = (info === null || info === void 0 ? void 0 : info.attrs) && info.attrs[attrName];
    }
    if (attrs) {
      let base2 = state.sliceDoc(from, to2).toLowerCase(), quoteStart = '"', quoteEnd = '"';
      if (/^['"]/.test(base2)) {
        token = base2[0] == '"' ? /^[^"]*$/ : /^[^']*$/;
        quoteStart = "";
        quoteEnd = state.sliceDoc(to2, to2 + 1) == base2[0] ? "" : base2[0];
        base2 = base2.slice(1);
        from++;
      } else {
        token = /^[^\s<>='"]*$/;
      }
      for (let value of attrs)
        options.push({ label: value, apply: quoteStart + value + quoteEnd, type: "constant" });
    }
  }
  return { from, to: to2, options, validFor: token };
}
function htmlCompletionFor(schema, context) {
  let { state, pos } = context, tree = syntaxTree(state).resolveInner(pos, -1), around = tree.resolve(pos);
  for (let scan = pos, before; around == tree && (before = tree.childBefore(scan)); ) {
    let last = before.lastChild;
    if (!last || !last.type.isError || last.from < last.to)
      break;
    around = tree = before;
    scan = last.from;
  }
  if (tree.name == "TagName") {
    return tree.parent && /CloseTag$/.test(tree.parent.name) ? completeCloseTag(state, tree, tree.from, pos) : completeTag(state, schema, tree, tree.from, pos);
  } else if (tree.name == "StartTag") {
    return completeTag(state, schema, tree, pos, pos);
  } else if (tree.name == "StartCloseTag" || tree.name == "IncompleteCloseTag") {
    return completeCloseTag(state, tree, pos, pos);
  } else if (tree.name == "OpenTag" || tree.name == "SelfClosingTag" || tree.name == "AttributeName") {
    return completeAttrName(state, schema, tree, tree.name == "AttributeName" ? tree.from : pos, pos);
  } else if (tree.name == "Is" || tree.name == "AttributeValue" || tree.name == "UnquotedAttributeValue") {
    return completeAttrValue(state, schema, tree, tree.name == "Is" ? pos : tree.from, pos);
  } else if (context.explicit && (around.name == "Element" || around.name == "Text" || around.name == "Document")) {
    return completeStartTag(state, schema, tree, pos);
  } else {
    return null;
  }
}
function htmlCompletionSource(context) {
  return htmlCompletionFor(Schema.default, context);
}
function htmlCompletionSourceWith(config2) {
  let { extraTags, extraGlobalAttributes: extraAttrs } = config2;
  let schema = extraAttrs || extraTags ? new Schema(extraTags, extraAttrs) : Schema.default;
  return (context) => htmlCompletionFor(schema, context);
}
var jsonParser = /* @__PURE__ */ javascriptLanguage.parser.configure({ top: "SingleExpression" });
var defaultNesting = [
  {
    tag: "script",
    attrs: (attrs) => attrs.type == "text/typescript" || attrs.lang == "ts",
    parser: typescriptLanguage.parser
  },
  {
    tag: "script",
    attrs: (attrs) => attrs.type == "text/babel" || attrs.type == "text/jsx",
    parser: jsxLanguage.parser
  },
  {
    tag: "script",
    attrs: (attrs) => attrs.type == "text/typescript-jsx",
    parser: tsxLanguage.parser
  },
  {
    tag: "script",
    attrs(attrs) {
      return /^(importmap|speculationrules|application\/(.+\+)?json)$/i.test(attrs.type);
    },
    parser: jsonParser
  },
  {
    tag: "script",
    attrs(attrs) {
      return !attrs.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(attrs.type);
    },
    parser: javascriptLanguage.parser
  },
  {
    tag: "style",
    attrs(attrs) {
      return (!attrs.lang || attrs.lang == "css") && (!attrs.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(attrs.type));
    },
    parser: cssLanguage.parser
  }
];
var defaultAttrs = /* @__PURE__ */ [
  {
    name: "style",
    parser: /* @__PURE__ */ cssLanguage.parser.configure({ top: "Styles" })
  }
].concat(/* @__PURE__ */ eventAttributes.map((name2) => ({ name: name2, parser: javascriptLanguage.parser })));
var htmlPlain = /* @__PURE__ */ LRLanguage.define({
  name: "html",
  parser: /* @__PURE__ */ parser2.configure({
    props: [
      /* @__PURE__ */ indentNodeProp.add({
        Element(context) {
          let after = /^(\s*)(<\/)?/.exec(context.textAfter);
          if (context.node.to <= context.pos + after[0].length)
            return context.continue();
          return context.lineIndent(context.node.from) + (after[2] ? 0 : context.unit);
        },
        "OpenTag CloseTag SelfClosingTag"(context) {
          return context.column(context.node.from) + context.unit;
        },
        Document(context) {
          if (context.pos + /\s*/.exec(context.textAfter)[0].length < context.node.to)
            return context.continue();
          let endElt = null, close;
          for (let cur2 = context.node; ; ) {
            let last = cur2.lastChild;
            if (!last || last.name != "Element" || last.to != cur2.to)
              break;
            endElt = cur2 = last;
          }
          if (endElt && !((close = endElt.lastChild) && (close.name == "CloseTag" || close.name == "SelfClosingTag")))
            return context.lineIndent(endElt.from) + context.unit;
          return null;
        }
      }),
      /* @__PURE__ */ foldNodeProp.add({
        Element(node) {
          let first = node.firstChild, last = node.lastChild;
          if (!first || first.name != "OpenTag")
            return null;
          return { from: first.to, to: last.name == "CloseTag" ? last.from : node.to };
        }
      }),
      /* @__PURE__ */ bracketMatchingHandle.add({
        "OpenTag CloseTag": (node) => node.getChild("TagName")
      })
    ]
  }),
  languageData: {
    commentTokens: { block: { open: "<!--", close: "-->" } },
    indentOnInput: /^\s*<\/\w+\W$/,
    wordChars: "-._"
  }
});
var htmlLanguage = /* @__PURE__ */ htmlPlain.configure({
  wrap: /* @__PURE__ */ configureNesting(defaultNesting, defaultAttrs)
});
function html(config2 = {}) {
  let dialect = "", wrap;
  if (config2.matchClosingTags === false)
    dialect = "noMatch";
  if (config2.selfClosingTags === true)
    dialect = (dialect ? dialect + " " : "") + "selfClosing";
  if (config2.nestedLanguages && config2.nestedLanguages.length || config2.nestedAttributes && config2.nestedAttributes.length)
    wrap = configureNesting((config2.nestedLanguages || []).concat(defaultNesting), (config2.nestedAttributes || []).concat(defaultAttrs));
  let lang = wrap ? htmlPlain.configure({ wrap, dialect }) : dialect ? htmlLanguage.configure({ dialect }) : htmlLanguage;
  return new LanguageSupport(lang, [
    htmlLanguage.data.of({ autocomplete: htmlCompletionSourceWith(config2) }),
    config2.autoCloseTags !== false ? autoCloseTags2 : [],
    javascript().support,
    css().support
  ]);
}
var selfClosers2 = /* @__PURE__ */ new Set(/* @__PURE__ */ "area base br col command embed frame hr img input keygen link meta param source track wbr menuitem".split(" "));
var autoCloseTags2 = /* @__PURE__ */ EditorView.inputHandler.of((view, from, to2, text, insertTransaction) => {
  if (view.composing || view.state.readOnly || from != to2 || text != ">" && text != "/" || !htmlLanguage.isActiveAt(view.state, from, -1))
    return false;
  let base2 = insertTransaction(), { state } = base2;
  let closeTags = state.changeByRange((range) => {
    var _a3, _b2, _c2;
    let didType = state.doc.sliceString(range.from - 1, range.to) == text;
    let { head } = range, after = syntaxTree(state).resolveInner(head, -1), name2;
    if (didType && text == ">" && after.name == "EndTag") {
      let tag = after.parent;
      if (((_b2 = (_a3 = tag.parent) === null || _a3 === void 0 ? void 0 : _a3.lastChild) === null || _b2 === void 0 ? void 0 : _b2.name) != "CloseTag" && (name2 = elementName2(state.doc, tag.parent, head)) && !selfClosers2.has(name2)) {
        let to3 = head + (state.doc.sliceString(head, head + 1) === ">" ? 1 : 0);
        let insert2 = `</${name2}>`;
        return { range, changes: { from: head, to: to3, insert: insert2 } };
      }
    } else if (didType && text == "/" && after.name == "IncompleteCloseTag") {
      let tag = after.parent;
      if (after.from == head - 2 && ((_c2 = tag.lastChild) === null || _c2 === void 0 ? void 0 : _c2.name) != "CloseTag" && (name2 = elementName2(state.doc, tag, head)) && !selfClosers2.has(name2)) {
        let to3 = head + (state.doc.sliceString(head, head + 1) === ">" ? 1 : 0);
        let insert2 = `${name2}>`;
        return {
          range: EditorSelection.cursor(head + insert2.length, -1),
          changes: { from: head, to: to3, insert: insert2 }
        };
      }
    }
    return { range };
  });
  if (closeTags.changes.empty)
    return false;
  view.dispatch([
    base2,
    state.update(closeTags, {
      userEvent: "input.complete",
      scrollIntoView: true
    })
  ]);
  return true;
});

// node_modules/@codemirror/lang-markdown/dist/index.js
var data = /* @__PURE__ */ defineLanguageFacet({ commentTokens: { block: { open: "<!--", close: "-->" } } });
var headingProp = /* @__PURE__ */ new NodeProp();
var commonmark = /* @__PURE__ */ parser.configure({
  props: [
    /* @__PURE__ */ foldNodeProp.add((type) => {
      return !type.is("Block") || type.is("Document") || isHeading(type) != null || isList(type) ? void 0 : (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });
    }),
    /* @__PURE__ */ headingProp.add(isHeading),
    /* @__PURE__ */ indentNodeProp.add({
      Document: () => null
    }),
    /* @__PURE__ */ languageDataProp.add({
      Document: data
    })
  ]
});
function isHeading(type) {
  let match = /^(?:ATX|Setext)Heading(\d)$/.exec(type.name);
  return match ? +match[1] : void 0;
}
function isList(type) {
  return type.name == "OrderedList" || type.name == "BulletList";
}
function findSectionEnd(headerNode, level) {
  let last = headerNode;
  for (; ; ) {
    let next = last.nextSibling, heading2;
    if (!next || (heading2 = isHeading(next.type)) != null && heading2 <= level)
      break;
    last = next;
  }
  return last.to;
}
var headerIndent = /* @__PURE__ */ foldService.of((state, start, end) => {
  for (let node = syntaxTree(state).resolveInner(end, -1); node; node = node.parent) {
    if (node.from < start)
      break;
    let heading2 = node.type.prop(headingProp);
    if (heading2 == null)
      continue;
    let upto = findSectionEnd(node, heading2);
    if (upto > end)
      return { from: end, to: upto };
  }
  return null;
});
function mkLang(parser5) {
  return new Language(data, parser5, [headerIndent], "markdown");
}
var commonmarkLanguage = /* @__PURE__ */ mkLang(commonmark);
var extended = /* @__PURE__ */ commonmark.configure([GFM, Subscript, Superscript, Emoji, {
  props: [
    /* @__PURE__ */ foldNodeProp.add({
      Table: (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to })
    })
  ]
}]);
var markdownLanguage = /* @__PURE__ */ mkLang(extended);
function getCodeParser(languages, defaultLanguage) {
  return (info) => {
    if (info && languages) {
      let found = null;
      info = /\S*/.exec(info)[0];
      if (typeof languages == "function")
        found = languages(info);
      else
        found = LanguageDescription.matchLanguageName(languages, info, true);
      if (found instanceof LanguageDescription)
        return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());
      else if (found)
        return found.parser;
    }
    return defaultLanguage ? defaultLanguage.parser : null;
  };
}
var Context = class {
  constructor(node, from, to2, spaceBefore, spaceAfter, type, item) {
    this.node = node;
    this.from = from;
    this.to = to2;
    this.spaceBefore = spaceBefore;
    this.spaceAfter = spaceAfter;
    this.type = type;
    this.item = item;
  }
  blank(maxWidth, trailing = true) {
    let result = this.spaceBefore + (this.node.name == "Blockquote" ? ">" : "");
    if (maxWidth != null) {
      while (result.length < maxWidth)
        result += " ";
      return result;
    } else {
      for (let i2 = this.to - this.from - result.length - this.spaceAfter.length; i2 > 0; i2--)
        result += " ";
      return result + (trailing ? this.spaceAfter : "");
    }
  }
  marker(doc2, add2) {
    let number2 = this.node.name == "OrderedList" ? String(+itemNumber(this.item, doc2)[2] + add2) : "";
    return this.spaceBefore + number2 + this.type + this.spaceAfter;
  }
};
function getContext(node, doc2) {
  let nodes = [];
  for (let cur2 = node; cur2 && cur2.name != "Document"; cur2 = cur2.parent) {
    if (cur2.name == "ListItem" || cur2.name == "Blockquote" || cur2.name == "FencedCode")
      nodes.push(cur2);
  }
  let context = [];
  for (let i2 = nodes.length - 1; i2 >= 0; i2--) {
    let node2 = nodes[i2], match;
    let line = doc2.lineAt(node2.from), startPos = node2.from - line.from;
    if (node2.name == "FencedCode") {
      context.push(new Context(node2, startPos, startPos, "", "", "", null));
    } else if (node2.name == "Blockquote" && (match = /^ *>( ?)/.exec(line.text.slice(startPos)))) {
      context.push(new Context(node2, startPos, startPos + match[0].length, "", match[1], ">", null));
    } else if (node2.name == "ListItem" && node2.parent.name == "OrderedList" && (match = /^( *)\d+([.)])( *)/.exec(line.text.slice(startPos)))) {
      let after = match[3], len = match[0].length;
      if (after.length >= 4) {
        after = after.slice(0, after.length - 4);
        len -= 4;
      }
      context.push(new Context(node2.parent, startPos, startPos + len, match[1], after, match[2], node2));
    } else if (node2.name == "ListItem" && node2.parent.name == "BulletList" && (match = /^( *)([-+*])( {1,4}\[[ xX]\])?( +)/.exec(line.text.slice(startPos)))) {
      let after = match[4], len = match[0].length;
      if (after.length > 4) {
        after = after.slice(0, after.length - 4);
        len -= 4;
      }
      let type = match[2];
      if (match[3])
        type += match[3].replace(/[xX]/, " ");
      context.push(new Context(node2.parent, startPos, startPos + len, match[1], after, type, node2));
    }
  }
  return context;
}
function itemNumber(item, doc2) {
  return /^(\s*)(\d+)(?=[.)])/.exec(doc2.sliceString(item.from, item.from + 10));
}
function renumberList(after, doc2, changes, offset = 0) {
  for (let prev = -1, node = after; ; ) {
    if (node.name == "ListItem") {
      let m2 = itemNumber(node, doc2);
      let number2 = +m2[2];
      if (prev >= 0) {
        if (number2 != prev + 1)
          return;
        changes.push({ from: node.from + m2[1].length, to: node.from + m2[0].length, insert: String(prev + 2 + offset) });
      }
      prev = number2;
    }
    let next = node.nextSibling;
    if (!next)
      break;
    node = next;
  }
}
function normalizeIndent(content2, state) {
  let blank = /^[ \t]*/.exec(content2)[0].length;
  if (!blank || state.facet(indentUnit) != "	")
    return content2;
  let col = countColumn(content2, 4, blank);
  let space4 = "";
  for (let i2 = col; i2 > 0; ) {
    if (i2 >= 4) {
      space4 += "	";
      i2 -= 4;
    } else {
      space4 += " ";
      i2--;
    }
  }
  return space4 + content2.slice(blank);
}
var insertNewlineContinueMarkup = ({ state, dispatch }) => {
  let tree = syntaxTree(state), { doc: doc2 } = state;
  let dont = null, changes = state.changeByRange((range) => {
    if (!range.empty || !markdownLanguage.isActiveAt(state, range.from))
      return dont = { range };
    let pos = range.from, line = doc2.lineAt(pos);
    let context = getContext(tree.resolveInner(pos, -1), doc2);
    while (context.length && context[context.length - 1].from > pos - line.from)
      context.pop();
    if (!context.length)
      return dont = { range };
    let inner = context[context.length - 1];
    if (inner.to - inner.spaceAfter.length > pos - line.from)
      return dont = { range };
    let emptyLine = pos >= inner.to - inner.spaceAfter.length && !/\S/.test(line.text.slice(inner.to));
    if (inner.item && emptyLine) {
      let first = inner.node.firstChild, second = inner.node.getChild("ListItem", "ListItem");
      if (first.to >= pos || second && second.to < pos || line.from > 0 && !/[^\s>]/.test(doc2.lineAt(line.from - 1).text)) {
        let next = context.length > 1 ? context[context.length - 2] : null;
        let delTo, insert3 = "";
        if (next && next.item) {
          delTo = line.from + next.from;
          insert3 = next.marker(doc2, 1);
        } else {
          delTo = line.from + (next ? next.to : 0);
        }
        let changes3 = [{ from: delTo, to: pos, insert: insert3 }];
        if (inner.node.name == "OrderedList")
          renumberList(inner.item, doc2, changes3, -2);
        if (next && next.node.name == "OrderedList")
          renumberList(next.item, doc2, changes3);
        return { range: EditorSelection.cursor(delTo + insert3.length), changes: changes3 };
      } else {
        let insert3 = blankLine(context, state, line);
        return {
          range: EditorSelection.cursor(pos + insert3.length + 1),
          changes: { from: line.from, insert: insert3 + state.lineBreak }
        };
      }
    }
    if (inner.node.name == "Blockquote" && emptyLine && line.from) {
      let prevLine = doc2.lineAt(line.from - 1), quoted = />\s*$/.exec(prevLine.text);
      if (quoted && quoted.index == inner.from) {
        let changes3 = state.changes([
          { from: prevLine.from + quoted.index, to: prevLine.to },
          { from: line.from + inner.from, to: line.to }
        ]);
        return { range: range.map(changes3), changes: changes3 };
      }
    }
    let changes2 = [];
    if (inner.node.name == "OrderedList")
      renumberList(inner.item, doc2, changes2);
    let continued = inner.item && inner.item.from < line.from;
    let insert2 = "";
    if (!continued || /^[\s\d.)\-+*>]*/.exec(line.text)[0].length >= inner.to) {
      for (let i2 = 0, e25 = context.length - 1; i2 <= e25; i2++) {
        insert2 += i2 == e25 && !continued ? context[i2].marker(doc2, 1) : context[i2].blank(i2 < e25 ? countColumn(line.text, 4, context[i2 + 1].from) - insert2.length : null);
      }
    }
    let from = pos;
    while (from > line.from && /\s/.test(line.text.charAt(from - line.from - 1)))
      from--;
    insert2 = normalizeIndent(insert2, state);
    if (nonTightList(inner.node, state.doc))
      insert2 = blankLine(context, state, line) + state.lineBreak + insert2;
    changes2.push({ from, to: pos, insert: state.lineBreak + insert2 });
    return { range: EditorSelection.cursor(from + insert2.length + 1), changes: changes2 };
  });
  if (dont)
    return false;
  dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
  return true;
};
function isMark(node) {
  return node.name == "QuoteMark" || node.name == "ListMark";
}
function nonTightList(node, doc2) {
  if (node.name != "OrderedList" && node.name != "BulletList")
    return false;
  let first = node.firstChild, second = node.getChild("ListItem", "ListItem");
  if (!second)
    return false;
  let line1 = doc2.lineAt(first.to), line2 = doc2.lineAt(second.from);
  let empty2 = /^[\s>]*$/.test(line1.text);
  return line1.number + (empty2 ? 0 : 1) < line2.number;
}
function blankLine(context, state, line) {
  let insert2 = "";
  for (let i2 = 0, e25 = context.length - 2; i2 <= e25; i2++) {
    insert2 += context[i2].blank(i2 < e25 ? countColumn(line.text, 4, context[i2 + 1].from) - insert2.length : null, i2 < e25);
  }
  return normalizeIndent(insert2, state);
}
function contextNodeForDelete(tree, pos) {
  let node = tree.resolveInner(pos, -1), scan = pos;
  if (isMark(node)) {
    scan = node.from;
    node = node.parent;
  }
  for (let prev; prev = node.childBefore(scan); ) {
    if (isMark(prev)) {
      scan = prev.from;
    } else if (prev.name == "OrderedList" || prev.name == "BulletList") {
      node = prev.lastChild;
      scan = node.to;
    } else {
      break;
    }
  }
  return node;
}
var deleteMarkupBackward = ({ state, dispatch }) => {
  let tree = syntaxTree(state);
  let dont = null, changes = state.changeByRange((range) => {
    let pos = range.from, { doc: doc2 } = state;
    if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {
      let line = doc2.lineAt(pos);
      let context = getContext(contextNodeForDelete(tree, pos), doc2);
      if (context.length) {
        let inner = context[context.length - 1];
        let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);
        if (pos - line.from > spaceEnd && !/\S/.test(line.text.slice(spaceEnd, pos - line.from)))
          return {
            range: EditorSelection.cursor(line.from + spaceEnd),
            changes: { from: line.from + spaceEnd, to: pos }
          };
        if (pos - line.from == spaceEnd && // Only apply this if we're on the line that has the
        // construct's syntax, or there's only indentation in the
        // target range
        (!inner.item || line.from <= inner.item.from || !/\S/.test(line.text.slice(0, inner.to)))) {
          let start = line.from + inner.from;
          if (inner.item && inner.node.from < inner.item.from && /\S/.test(line.text.slice(inner.from, inner.to))) {
            let insert2 = inner.blank(countColumn(line.text, 4, inner.to) - countColumn(line.text, 4, inner.from));
            if (start == line.from)
              insert2 = normalizeIndent(insert2, state);
            return {
              range: EditorSelection.cursor(start + insert2.length),
              changes: { from: start, to: line.from + inner.to, insert: insert2 }
            };
          }
          if (start < pos)
            return { range: EditorSelection.cursor(start), changes: { from: start, to: pos } };
        }
      }
    }
    return dont = { range };
  });
  if (dont)
    return false;
  dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete" }));
  return true;
};
var markdownKeymap = [
  { key: "Enter", run: insertNewlineContinueMarkup },
  { key: "Backspace", run: deleteMarkupBackward }
];
var htmlNoMatch = /* @__PURE__ */ html({ matchClosingTags: false });
function markdown(config2 = {}) {
  let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser: parser5 } = commonmarkLanguage, completeHTMLTags = true } = config2;
  if (!(parser5 instanceof MarkdownParser))
    throw new RangeError("Base parser provided to `markdown` should be a Markdown parser");
  let extensions = config2.extensions ? [config2.extensions] : [];
  let support = [htmlNoMatch.support], defaultCode;
  if (defaultCodeLanguage instanceof LanguageSupport) {
    support.push(defaultCodeLanguage.support);
    defaultCode = defaultCodeLanguage.language;
  } else if (defaultCodeLanguage) {
    defaultCode = defaultCodeLanguage;
  }
  let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : void 0;
  extensions.push(parseCode({ codeParser, htmlParser: htmlNoMatch.language.parser }));
  if (addKeymap)
    support.push(Prec.high(keymap.of(markdownKeymap)));
  let lang = mkLang(parser5.configure(extensions));
  if (completeHTMLTags)
    support.push(lang.data.of({ autocomplete: htmlTagCompletion }));
  return new LanguageSupport(lang, support);
}
function htmlTagCompletion(context) {
  let { state, pos } = context, m2 = /<[:\-\.\w\u00b7-\uffff]*$/.exec(state.sliceDoc(pos - 25, pos));
  if (!m2)
    return null;
  let tree = syntaxTree(state).resolveInner(pos, -1);
  while (tree && !tree.type.isTop) {
    if (tree.name == "CodeBlock" || tree.name == "FencedCode" || tree.name == "ProcessingInstructionBlock" || tree.name == "CommentBlock" || tree.name == "Link" || tree.name == "Image")
      return null;
    tree = tree.parent;
  }
  return {
    from: pos - m2[0].length,
    to: pos,
    options: htmlTagCompletions(),
    validFor: /^<[:\-\.\w\u00b7-\uffff]*$/
  };
}
var _tagCompletions = null;
function htmlTagCompletions() {
  if (_tagCompletions)
    return _tagCompletions;
  let result = htmlCompletionSource(new CompletionContext(EditorState.create({ extensions: htmlNoMatch }), 0, true));
  return _tagCompletions = result ? result.options : [];
}

// node_modules/eslint4b-prebuilt/dist/eslint4b.es.js
var e = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};
function t2(e25) {
  return e25 && e25.__esModule && Object.prototype.hasOwnProperty.call(e25, "default") ? e25.default : e25;
}
function r(e25, t3) {
  return e25(t3 = { exports: {} }, t3.exports), t3.exports;
}
function n(e25) {
  return e25 && e25.default || e25;
}
function i(e25) {
  return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e26) {
    return typeof e26;
  } : function(e26) {
    return e26 && "function" == typeof Symbol && e26.constructor === Symbol && e26 !== Symbol.prototype ? "symbol" : typeof e26;
  })(e25);
}
function a(e25, t3) {
  if (!(e25 instanceof t3)) throw new TypeError("Cannot call a class as a function");
}
function o(e25, t3) {
  for (var r2 = 0; r2 < t3.length; r2++) {
    var n2 = t3[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e25, n2.key, n2);
  }
}
function s(e25, t3, r2) {
  return t3 && o(e25.prototype, t3), r2 && o(e25, r2), e25;
}
function u(e25, t3, r2) {
  return t3 in e25 ? Object.defineProperty(e25, t3, { value: r2, enumerable: true, configurable: true, writable: true }) : e25[t3] = r2, e25;
}
function c(e25, t3) {
  var r2 = Object.keys(e25);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e25);
    t3 && (n2 = n2.filter(function(t4) {
      return Object.getOwnPropertyDescriptor(e25, t4).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function p(e25) {
  for (var t3 = 1; t3 < arguments.length; t3++) {
    var r2 = null != arguments[t3] ? arguments[t3] : {};
    t3 % 2 ? c(Object(r2), true).forEach(function(t4) {
      u(e25, t4, r2[t4]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e25, Object.getOwnPropertyDescriptors(r2)) : c(Object(r2)).forEach(function(t4) {
      Object.defineProperty(e25, t4, Object.getOwnPropertyDescriptor(r2, t4));
    });
  }
  return e25;
}
function f(e25, t3) {
  if ("function" != typeof t3 && null !== t3) throw new TypeError("Super expression must either be null or a function");
  e25.prototype = Object.create(t3 && t3.prototype, { constructor: { value: e25, writable: true, configurable: true } }), t3 && d(e25, t3);
}
function h(e25) {
  return (h = Object.setPrototypeOf ? Object.getPrototypeOf : function(e26) {
    return e26.__proto__ || Object.getPrototypeOf(e26);
  })(e25);
}
function d(e25, t3) {
  return (d = Object.setPrototypeOf || function(e26, t4) {
    return e26.__proto__ = t4, e26;
  })(e25, t3);
}
function m(e25, t3, r2) {
  return (m = function() {
    if ("undefined" == typeof Reflect || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if ("function" == typeof Proxy) return true;
    try {
      return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      })), true;
    } catch (e26) {
      return false;
    }
  }() ? Reflect.construct : function(e26, t4, r3) {
    var n2 = [null];
    n2.push.apply(n2, t4);
    var i2 = new (Function.bind.apply(e26, n2))();
    return r3 && d(i2, r3.prototype), i2;
  }).apply(null, arguments);
}
function g(e25) {
  var t3 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
  return (g = function(e26) {
    if (null === e26 || (r2 = e26, -1 === Function.toString.call(r2).indexOf("[native code]"))) return e26;
    var r2;
    if ("function" != typeof e26) throw new TypeError("Super expression must either be null or a function");
    if (void 0 !== t3) {
      if (t3.has(e26)) return t3.get(e26);
      t3.set(e26, n2);
    }
    function n2() {
      return m(e26, arguments, h(this).constructor);
    }
    return n2.prototype = Object.create(e26.prototype, { constructor: { value: n2, enumerable: false, writable: true, configurable: true } }), d(n2, e26);
  })(e25);
}
function y(e25) {
  if (void 0 === e25) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e25;
}
function v(e25, t3) {
  return !t3 || "object" != typeof t3 && "function" != typeof t3 ? y(e25) : t3;
}
function x(e25, t3, r2) {
  return (x = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(e26, t4, r3) {
    var n2 = function(e27, t5) {
      for (; !Object.prototype.hasOwnProperty.call(e27, t5) && null !== (e27 = h(e27)); ) ;
      return e27;
    }(e26, t4);
    if (n2) {
      var i2 = Object.getOwnPropertyDescriptor(n2, t4);
      return i2.get ? i2.get.call(r3) : i2.value;
    }
  })(e25, t3, r2 || e25);
}
function b(e25, t3) {
  return C2(e25) || function(e26, t4) {
    if (!(Symbol.iterator in Object(e26) || "[object Arguments]" === Object.prototype.toString.call(e26))) return;
    var r2 = [], n2 = true, i2 = false, a2 = void 0;
    try {
      for (var o2, s2 = e26[Symbol.iterator](); !(n2 = (o2 = s2.next()).done) && (r2.push(o2.value), !t4 || r2.length !== t4); n2 = true) ;
    } catch (e27) {
      i2 = true, a2 = e27;
    } finally {
      try {
        n2 || null == s2.return || s2.return();
      } finally {
        if (i2) throw a2;
      }
    }
    return r2;
  }(e25, t3) || k();
}
function E(e25) {
  return function(e26) {
    if (Array.isArray(e26)) {
      for (var t3 = 0, r2 = new Array(e26.length); t3 < e26.length; t3++) r2[t3] = e26[t3];
      return r2;
    }
  }(e25) || S2(e25) || function() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }();
}
function C2(e25) {
  if (Array.isArray(e25)) return e25;
}
function S2(e25) {
  if (Symbol.iterator in Object(e25) || "[object Arguments]" === Object.prototype.toString.call(e25)) return Array.from(e25);
}
function k() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}
var D = r(function(e25) {
  var t3 = e25.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
  "number" == typeof __g && (__g = t3);
});
var F = {}.hasOwnProperty;
var A = function(e25, t3) {
  return F.call(e25, t3);
};
var w = function(e25) {
  try {
    return !!e25();
  } catch (e26) {
    return true;
  }
};
var _ = !w(function() {
  return 7 != Object.defineProperty({}, "a", { get: function() {
    return 7;
  } }).a;
});
var T = r(function(e25) {
  var t3 = e25.exports = { version: "2.6.10" };
  "number" == typeof __e && (__e = t3);
});
var P = (T.version, function(e25) {
  return "object" === i(e25) ? null !== e25 : "function" == typeof e25;
});
var I = function(e25) {
  if (!P(e25)) throw TypeError(e25 + " is not an object!");
  return e25;
};
var B = D.document;
var O = P(B) && P(B.createElement);
var L = function(e25) {
  return O ? B.createElement(e25) : {};
};
var N = !_ && !w(function() {
  return 7 != Object.defineProperty(L("div"), "a", { get: function() {
    return 7;
  } }).a;
});
var j = function(e25, t3) {
  if (!P(e25)) return e25;
  var r2, n2;
  if (t3 && "function" == typeof (r2 = e25.toString) && !P(n2 = r2.call(e25))) return n2;
  if ("function" == typeof (r2 = e25.valueOf) && !P(n2 = r2.call(e25))) return n2;
  if (!t3 && "function" == typeof (r2 = e25.toString) && !P(n2 = r2.call(e25))) return n2;
  throw TypeError("Can't convert object to primitive value");
};
var R = Object.defineProperty;
var M = { f: _ ? Object.defineProperty : function(e25, t3, r2) {
  if (I(e25), t3 = j(t3, true), I(r2), N) try {
    return R(e25, t3, r2);
  } catch (e26) {
  }
  if ("get" in r2 || "set" in r2) throw TypeError("Accessors not supported!");
  return "value" in r2 && (e25[t3] = r2.value), e25;
} };
var V = function(e25, t3) {
  return { enumerable: !(1 & e25), configurable: !(2 & e25), writable: !(4 & e25), value: t3 };
};
var U = _ ? function(e25, t3, r2) {
  return M.f(e25, t3, V(1, r2));
} : function(e25, t3, r2) {
  return e25[t3] = r2, e25;
};
var q = 0;
var W = Math.random();
var $ = function(e25) {
  return "Symbol(".concat(void 0 === e25 ? "" : e25, ")_", (++q + W).toString(36));
};
var G = r(function(e25) {
  var t3 = D["__core-js_shared__"] || (D["__core-js_shared__"] = {});
  (e25.exports = function(e26, r2) {
    return t3[e26] || (t3[e26] = void 0 !== r2 ? r2 : {});
  })("versions", []).push({ version: T.version, mode: "global", copyright: "\xA9 2019 Denis Pushkarev (zloirock.ru)" });
});
var z = G("native-function-to-string", Function.toString);
var H = r(function(e25) {
  var t3 = $("src"), r2 = ("" + z).split("toString");
  T.inspectSource = function(e26) {
    return z.call(e26);
  }, (e25.exports = function(e26, n2, i2, a2) {
    var o2 = "function" == typeof i2;
    o2 && (A(i2, "name") || U(i2, "name", n2)), e26[n2] !== i2 && (o2 && (A(i2, t3) || U(i2, t3, e26[n2] ? "" + e26[n2] : r2.join(String(n2)))), e26 === D ? e26[n2] = i2 : a2 ? e26[n2] ? e26[n2] = i2 : U(e26, n2, i2) : (delete e26[n2], U(e26, n2, i2)));
  })(Function.prototype, "toString", function() {
    return "function" == typeof this && this[t3] || z.call(this);
  });
});
var K = function(e25) {
  if ("function" != typeof e25) throw TypeError(e25 + " is not a function!");
  return e25;
};
var J = function(e25, t3, r2) {
  if (K(e25), void 0 === t3) return e25;
  switch (r2) {
    case 1:
      return function(r3) {
        return e25.call(t3, r3);
      };
    case 2:
      return function(r3, n2) {
        return e25.call(t3, r3, n2);
      };
    case 3:
      return function(r3, n2, i2) {
        return e25.call(t3, r3, n2, i2);
      };
  }
  return function() {
    return e25.apply(t3, arguments);
  };
};
var Q = function e2(t3, r2, n2) {
  var i2, a2, o2, s2, u2 = t3 & e2.F, c2 = t3 & e2.G, l2 = t3 & e2.P, p2 = t3 & e2.B, f2 = c2 ? D : t3 & e2.S ? D[r2] || (D[r2] = {}) : (D[r2] || {}).prototype, h2 = c2 ? T : T[r2] || (T[r2] = {}), d2 = h2.prototype || (h2.prototype = {});
  for (i2 in c2 && (n2 = r2), n2) o2 = ((a2 = !u2 && f2 && void 0 !== f2[i2]) ? f2 : n2)[i2], s2 = p2 && a2 ? J(o2, D) : l2 && "function" == typeof o2 ? J(Function.call, o2) : o2, f2 && H(f2, i2, o2, t3 & e2.U), h2[i2] != o2 && U(h2, i2, s2), l2 && d2[i2] != o2 && (d2[i2] = o2);
};
D.core = T, Q.F = 1, Q.G = 2, Q.S = 4, Q.P = 8, Q.B = 16, Q.W = 32, Q.U = 64, Q.R = 128;
var X = Q;
var Y = r(function(e25) {
  var t3 = $("meta"), r2 = M.f, n2 = 0, a2 = Object.isExtensible || function() {
    return true;
  }, o2 = !w(function() {
    return a2(Object.preventExtensions({}));
  }), s2 = function(e26) {
    r2(e26, t3, { value: { i: "O" + ++n2, w: {} } });
  }, u2 = e25.exports = { KEY: t3, NEED: false, fastKey: function(e26, r3) {
    if (!P(e26)) return "symbol" == i(e26) ? e26 : ("string" == typeof e26 ? "S" : "P") + e26;
    if (!A(e26, t3)) {
      if (!a2(e26)) return "F";
      if (!r3) return "E";
      s2(e26);
    }
    return e26[t3].i;
  }, getWeak: function(e26, r3) {
    if (!A(e26, t3)) {
      if (!a2(e26)) return true;
      if (!r3) return false;
      s2(e26);
    }
    return e26[t3].w;
  }, onFreeze: function(e26) {
    return o2 && u2.NEED && a2(e26) && !A(e26, t3) && s2(e26), e26;
  } };
});
var Z = (Y.KEY, Y.NEED, Y.fastKey, Y.getWeak, Y.onFreeze, r(function(e25) {
  var t3 = G("wks"), r2 = D.Symbol, n2 = "function" == typeof r2;
  (e25.exports = function(e26) {
    return t3[e26] || (t3[e26] = n2 && r2[e26] || (n2 ? r2 : $)("Symbol." + e26));
  }).store = t3;
}));
var ee = M.f;
var te = Z("toStringTag");
var re = function(e25, t3, r2) {
  e25 && !A(e25 = r2 ? e25 : e25.prototype, te) && ee(e25, te, { configurable: true, value: t3 });
};
var ne = { f: Z };
var ie3 = M.f;
var ae = function(e25) {
  var t3 = T.Symbol || (T.Symbol = D.Symbol || {});
  "_" == e25.charAt(0) || e25 in t3 || ie3(t3, e25, { value: ne.f(e25) });
};
var oe = {}.toString;
var se = function(e25) {
  return oe.call(e25).slice(8, -1);
};
var ue = Object("z").propertyIsEnumerable(0) ? Object : function(e25) {
  return "String" == se(e25) ? e25.split("") : Object(e25);
};
var ce = function(e25) {
  if (null == e25) throw TypeError("Can't call method on  " + e25);
  return e25;
};
var le = function(e25) {
  return ue(ce(e25));
};
var pe = Math.ceil;
var fe = Math.floor;
var he = function(e25) {
  return isNaN(e25 = +e25) ? 0 : (e25 > 0 ? fe : pe)(e25);
};
var de = Math.min;
var me = function(e25) {
  return e25 > 0 ? de(he(e25), 9007199254740991) : 0;
};
var ge = Math.max;
var ye = Math.min;
var ve = function(e25, t3) {
  return (e25 = he(e25)) < 0 ? ge(e25 + t3, 0) : ye(e25, t3);
};
var xe = function(e25) {
  return function(t3, r2, n2) {
    var i2, a2 = le(t3), o2 = me(a2.length), s2 = ve(n2, o2);
    if (e25 && r2 != r2) {
      for (; o2 > s2; ) if ((i2 = a2[s2++]) != i2) return true;
    } else for (; o2 > s2; s2++) if ((e25 || s2 in a2) && a2[s2] === r2) return e25 || s2 || 0;
    return !e25 && -1;
  };
};
var be = G("keys");
var Ee = function(e25) {
  return be[e25] || (be[e25] = $(e25));
};
var Ce = xe(false);
var Se = Ee("IE_PROTO");
var ke = function(e25, t3) {
  var r2, n2 = le(e25), i2 = 0, a2 = [];
  for (r2 in n2) r2 != Se && A(n2, r2) && a2.push(r2);
  for (; t3.length > i2; ) A(n2, r2 = t3[i2++]) && (~Ce(a2, r2) || a2.push(r2));
  return a2;
};
var De = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
var Fe = Object.keys || function(e25) {
  return ke(e25, De);
};
var Ae = { f: Object.getOwnPropertySymbols };
var we = { f: {}.propertyIsEnumerable };
var _e = Array.isArray || function(e25) {
  return "Array" == se(e25);
};
var Te = function(e25) {
  return Object(ce(e25));
};
var Pe = _ ? Object.defineProperties : function(e25, t3) {
  I(e25);
  for (var r2, n2 = Fe(t3), i2 = n2.length, a2 = 0; i2 > a2; ) M.f(e25, r2 = n2[a2++], t3[r2]);
  return e25;
};
var Ie = D.document;
var Be = Ie && Ie.documentElement;
var Oe = Ee("IE_PROTO");
var Le = function() {
};
var Ne = function() {
  var e25, t3 = L("iframe"), r2 = De.length;
  for (t3.style.display = "none", Be.appendChild(t3), t3.src = "javascript:", (e25 = t3.contentWindow.document).open(), e25.write("<script>document.F=Object<\/script>"), e25.close(), Ne = e25.F; r2--; ) delete Ne.prototype[De[r2]];
  return Ne();
};
var je = Object.create || function(e25, t3) {
  var r2;
  return null !== e25 ? (Le.prototype = I(e25), r2 = new Le(), Le.prototype = null, r2[Oe] = e25) : r2 = Ne(), void 0 === t3 ? r2 : Pe(r2, t3);
};
var Re = De.concat("length", "prototype");
var Me = { f: Object.getOwnPropertyNames || function(e25) {
  return ke(e25, Re);
} };
var Ve = Me.f;
var Ue = {}.toString;
var qe = "object" == ("undefined" == typeof window ? "undefined" : i(window)) && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
var We = { f: function(e25) {
  return qe && "[object Window]" == Ue.call(e25) ? function(e26) {
    try {
      return Ve(e26);
    } catch (e27) {
      return qe.slice();
    }
  }(e25) : Ve(le(e25));
} };
var $e = Object.getOwnPropertyDescriptor;
var Ge = { f: _ ? $e : function(e25, t3) {
  if (e25 = le(e25), t3 = j(t3, true), N) try {
    return $e(e25, t3);
  } catch (e26) {
  }
  if (A(e25, t3)) return V(!we.f.call(e25, t3), e25[t3]);
} };
var ze = Y.KEY;
var He = Ge.f;
var Ke = M.f;
var Je = We.f;
var Qe = D.Symbol;
var Xe = D.JSON;
var Ye = Xe && Xe.stringify;
var Ze = Z("_hidden");
var et = Z("toPrimitive");
var tt = {}.propertyIsEnumerable;
var rt = G("symbol-registry");
var nt = G("symbols");
var it = G("op-symbols");
var at = Object.prototype;
var ot = "function" == typeof Qe && !!Ae.f;
var st = D.QObject;
var ut = !st || !st.prototype || !st.prototype.findChild;
var ct = _ && w(function() {
  return 7 != je(Ke({}, "a", { get: function() {
    return Ke(this, "a", { value: 7 }).a;
  } })).a;
}) ? function(e25, t3, r2) {
  var n2 = He(at, t3);
  n2 && delete at[t3], Ke(e25, t3, r2), n2 && e25 !== at && Ke(at, t3, n2);
} : Ke;
var lt2 = function(e25) {
  var t3 = nt[e25] = je(Qe.prototype);
  return t3._k = e25, t3;
};
var pt = ot && "symbol" == i(Qe.iterator) ? function(e25) {
  return "symbol" == i(e25);
} : function(e25) {
  return e25 instanceof Qe;
};
var ft = function(e25, t3, r2) {
  return e25 === at && ft(it, t3, r2), I(e25), t3 = j(t3, true), I(r2), A(nt, t3) ? (r2.enumerable ? (A(e25, Ze) && e25[Ze][t3] && (e25[Ze][t3] = false), r2 = je(r2, { enumerable: V(0, false) })) : (A(e25, Ze) || Ke(e25, Ze, V(1, {})), e25[Ze][t3] = true), ct(e25, t3, r2)) : Ke(e25, t3, r2);
};
var ht = function(e25, t3) {
  I(e25);
  for (var r2, n2 = function(e26) {
    var t4 = Fe(e26), r3 = Ae.f;
    if (r3) for (var n3, i3 = r3(e26), a3 = we.f, o2 = 0; i3.length > o2; ) a3.call(e26, n3 = i3[o2++]) && t4.push(n3);
    return t4;
  }(t3 = le(t3)), i2 = 0, a2 = n2.length; a2 > i2; ) ft(e25, r2 = n2[i2++], t3[r2]);
  return e25;
};
var dt = function(e25) {
  var t3 = tt.call(this, e25 = j(e25, true));
  return !(this === at && A(nt, e25) && !A(it, e25)) && (!(t3 || !A(this, e25) || !A(nt, e25) || A(this, Ze) && this[Ze][e25]) || t3);
};
var mt = function(e25, t3) {
  if (e25 = le(e25), t3 = j(t3, true), e25 !== at || !A(nt, t3) || A(it, t3)) {
    var r2 = He(e25, t3);
    return !r2 || !A(nt, t3) || A(e25, Ze) && e25[Ze][t3] || (r2.enumerable = true), r2;
  }
};
var gt = function(e25) {
  for (var t3, r2 = Je(le(e25)), n2 = [], i2 = 0; r2.length > i2; ) A(nt, t3 = r2[i2++]) || t3 == Ze || t3 == ze || n2.push(t3);
  return n2;
};
var yt = function(e25) {
  for (var t3, r2 = e25 === at, n2 = Je(r2 ? it : le(e25)), i2 = [], a2 = 0; n2.length > a2; ) !A(nt, t3 = n2[a2++]) || r2 && !A(at, t3) || i2.push(nt[t3]);
  return i2;
};
ot || (H((Qe = function() {
  if (this instanceof Qe) throw TypeError("Symbol is not a constructor!");
  var e25 = $(arguments.length > 0 ? arguments[0] : void 0), t3 = function t4(r2) {
    this === at && t4.call(it, r2), A(this, Ze) && A(this[Ze], e25) && (this[Ze][e25] = false), ct(this, e25, V(1, r2));
  };
  return _ && ut && ct(at, e25, { configurable: true, set: t3 }), lt2(e25);
}).prototype, "toString", function() {
  return this._k;
}), Ge.f = mt, M.f = ft, Me.f = We.f = gt, we.f = dt, Ae.f = yt, _ && H(at, "propertyIsEnumerable", dt, true), ne.f = function(e25) {
  return lt2(Z(e25));
}), X(X.G + X.W + X.F * !ot, { Symbol: Qe });
for (vt = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), xt = 0; vt.length > xt; ) Z(vt[xt++]);
var vt;
var xt;
for (bt = Fe(Z.store), Et = 0; bt.length > Et; ) ae(bt[Et++]);
var bt;
var Et;
X(X.S + X.F * !ot, "Symbol", { for: function(e25) {
  return A(rt, e25 += "") ? rt[e25] : rt[e25] = Qe(e25);
}, keyFor: function(e25) {
  if (!pt(e25)) throw TypeError(e25 + " is not a symbol!");
  for (var t3 in rt) if (rt[t3] === e25) return t3;
}, useSetter: function() {
  ut = true;
}, useSimple: function() {
  ut = false;
} }), X(X.S + X.F * !ot, "Object", { create: function(e25, t3) {
  return void 0 === t3 ? je(e25) : ht(je(e25), t3);
}, defineProperty: ft, defineProperties: ht, getOwnPropertyDescriptor: mt, getOwnPropertyNames: gt, getOwnPropertySymbols: yt });
var Ct = w(function() {
  Ae.f(1);
});
X(X.S + X.F * Ct, "Object", { getOwnPropertySymbols: function(e25) {
  return Ae.f(Te(e25));
} }), Xe && X(X.S + X.F * (!ot || w(function() {
  var e25 = Qe();
  return "[null]" != Ye([e25]) || "{}" != Ye({ a: e25 }) || "{}" != Ye(Object(e25));
})), "JSON", { stringify: function(e25) {
  for (var t3, r2, n2 = [e25], i2 = 1; arguments.length > i2; ) n2.push(arguments[i2++]);
  if (r2 = t3 = n2[1], (P(t3) || void 0 !== e25) && !pt(e25)) return _e(t3) || (t3 = function(e26, t4) {
    if ("function" == typeof r2 && (t4 = r2.call(this, e26, t4)), !pt(t4)) return t4;
  }), n2[1] = t3, Ye.apply(Xe, n2);
} }), Qe.prototype[et] || U(Qe.prototype, et, Qe.prototype.valueOf), re(Qe, "Symbol"), re(Math, "Math", true), re(D.JSON, "JSON", true), X(X.S, "Object", { create: je }), X(X.S + X.F * !_, "Object", { defineProperty: M.f }), X(X.S + X.F * !_, "Object", { defineProperties: Pe });
var St = function(e25, t3) {
  var r2 = (T.Object || {})[e25] || Object[e25], n2 = {};
  n2[e25] = t3(r2), X(X.S + X.F * w(function() {
    r2(1);
  }), "Object", n2);
};
var kt = Ge.f;
St("getOwnPropertyDescriptor", function() {
  return function(e25, t3) {
    return kt(le(e25), t3);
  };
});
var Dt = Ee("IE_PROTO");
var Ft = Object.prototype;
var At = Object.getPrototypeOf || function(e25) {
  return e25 = Te(e25), A(e25, Dt) ? e25[Dt] : "function" == typeof e25.constructor && e25 instanceof e25.constructor ? e25.constructor.prototype : e25 instanceof Object ? Ft : null;
};
St("getPrototypeOf", function() {
  return function(e25) {
    return At(Te(e25));
  };
}), St("keys", function() {
  return function(e25) {
    return Fe(Te(e25));
  };
}), St("getOwnPropertyNames", function() {
  return We.f;
});
var wt = Y.onFreeze;
St("freeze", function(e25) {
  return function(t3) {
    return e25 && P(t3) ? e25(wt(t3)) : t3;
  };
});
var _t = Y.onFreeze;
St("seal", function(e25) {
  return function(t3) {
    return e25 && P(t3) ? e25(_t(t3)) : t3;
  };
});
var Tt = Y.onFreeze;
St("preventExtensions", function(e25) {
  return function(t3) {
    return e25 && P(t3) ? e25(Tt(t3)) : t3;
  };
}), St("isFrozen", function(e25) {
  return function(t3) {
    return !P(t3) || !!e25 && e25(t3);
  };
}), St("isSealed", function(e25) {
  return function(t3) {
    return !P(t3) || !!e25 && e25(t3);
  };
}), St("isExtensible", function(e25) {
  return function(t3) {
    return !!P(t3) && (!e25 || e25(t3));
  };
});
var Pt = Object.assign;
var It = !Pt || w(function() {
  var e25 = {}, t3 = {}, r2 = Symbol(), n2 = "abcdefghijklmnopqrst";
  return e25[r2] = 7, n2.split("").forEach(function(e26) {
    t3[e26] = e26;
  }), 7 != Pt({}, e25)[r2] || Object.keys(Pt({}, t3)).join("") != n2;
}) ? function(e25, t3) {
  for (var r2 = Te(e25), n2 = arguments.length, i2 = 1, a2 = Ae.f, o2 = we.f; n2 > i2; ) for (var s2, u2 = ue(arguments[i2++]), c2 = a2 ? Fe(u2).concat(a2(u2)) : Fe(u2), l2 = c2.length, p2 = 0; l2 > p2; ) s2 = c2[p2++], _ && !o2.call(u2, s2) || (r2[s2] = u2[s2]);
  return r2;
} : Pt;
X(X.S + X.F, "Object", { assign: It });
var Bt = Object.is || function(e25, t3) {
  return e25 === t3 ? 0 !== e25 || 1 / e25 == 1 / t3 : e25 != e25 && t3 != t3;
};
X(X.S, "Object", { is: Bt });
var Ot = function(e25, t3) {
  if (I(e25), !P(t3) && null !== t3) throw TypeError(t3 + ": can't set as prototype!");
};
var Lt = { set: Object.setPrototypeOf || ("__proto__" in {} ? function(e25, t3, r2) {
  try {
    (r2 = J(Function.call, Ge.f(Object.prototype, "__proto__").set, 2))(e25, []), t3 = !(e25 instanceof Array);
  } catch (e26) {
    t3 = true;
  }
  return function(e26, n2) {
    return Ot(e26, n2), t3 ? e26.__proto__ = n2 : r2(e26, n2), e26;
  };
}({}, false) : void 0), check: Ot };
X(X.S, "Object", { setPrototypeOf: Lt.set });
var Nt = Z("toStringTag");
var jt = "Arguments" == se(/* @__PURE__ */ function() {
  return arguments;
}());
var Rt = function(e25) {
  var t3, r2, n2;
  return void 0 === e25 ? "Undefined" : null === e25 ? "Null" : "string" == typeof (r2 = function(e26, t4) {
    try {
      return e26[t4];
    } catch (e27) {
    }
  }(t3 = Object(e25), Nt)) ? r2 : jt ? se(t3) : "Object" == (n2 = se(t3)) && "function" == typeof t3.callee ? "Arguments" : n2;
};
var Mt = {};
Mt[Z("toStringTag")] = "z", Mt + "" != "[object z]" && H(Object.prototype, "toString", function() {
  return "[object " + Rt(this) + "]";
}, true);
var Vt = function(e25, t3, r2) {
  var n2 = void 0 === r2;
  switch (t3.length) {
    case 0:
      return n2 ? e25() : e25.call(r2);
    case 1:
      return n2 ? e25(t3[0]) : e25.call(r2, t3[0]);
    case 2:
      return n2 ? e25(t3[0], t3[1]) : e25.call(r2, t3[0], t3[1]);
    case 3:
      return n2 ? e25(t3[0], t3[1], t3[2]) : e25.call(r2, t3[0], t3[1], t3[2]);
    case 4:
      return n2 ? e25(t3[0], t3[1], t3[2], t3[3]) : e25.call(r2, t3[0], t3[1], t3[2], t3[3]);
  }
  return e25.apply(r2, t3);
};
var Ut = [].slice;
var qt = {};
var Wt = function(e25, t3, r2) {
  if (!(t3 in qt)) {
    for (var n2 = [], i2 = 0; i2 < t3; i2++) n2[i2] = "a[" + i2 + "]";
    qt[t3] = Function("F,a", "return new F(" + n2.join(",") + ")");
  }
  return qt[t3](e25, r2);
};
var $t = Function.bind || function(e25) {
  var t3 = K(this), r2 = Ut.call(arguments, 1), n2 = function n3() {
    var i2 = r2.concat(Ut.call(arguments));
    return this instanceof n3 ? Wt(t3, i2.length, i2) : Vt(t3, i2, e25);
  };
  return P(t3.prototype) && (n2.prototype = t3.prototype), n2;
};
X(X.P, "Function", { bind: $t });
var Gt = M.f;
var zt = Function.prototype;
var Ht = /^\s*function ([^ (]*)/;
"name" in zt || _ && Gt(zt, "name", { configurable: true, get: function() {
  try {
    return ("" + this).match(Ht)[1];
  } catch (e25) {
    return "";
  }
} });
var Kt = Z("hasInstance");
var Jt = Function.prototype;
Kt in Jt || M.f(Jt, Kt, { value: function(e25) {
  if ("function" != typeof this || !P(e25)) return false;
  if (!P(this.prototype)) return e25 instanceof this;
  for (; e25 = At(e25); ) if (this.prototype === e25) return true;
  return false;
} });
var Qt = "	\n\v\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
var Xt = "[" + Qt + "]";
var Yt = RegExp("^" + Xt + Xt + "*");
var Zt = RegExp(Xt + Xt + "*$");
var er = function(e25, t3, r2) {
  var n2 = {}, i2 = w(function() {
    return !!Qt[e25]() || "\u200B\x85" != "\u200B\x85"[e25]();
  }), a2 = n2[e25] = i2 ? t3(tr) : Qt[e25];
  r2 && (n2[r2] = a2), X(X.P + X.F * i2, "String", n2);
};
var tr = er.trim = function(e25, t3) {
  return e25 = String(ce(e25)), 1 & t3 && (e25 = e25.replace(Yt, "")), 2 & t3 && (e25 = e25.replace(Zt, "")), e25;
};
var rr = er;
var nr = D.parseInt;
var ir = rr.trim;
var ar = /^[-+]?0[xX]/;
var or = 8 !== nr(Qt + "08") || 22 !== nr(Qt + "0x16") ? function(e25, t3) {
  var r2 = ir(String(e25), 3);
  return nr(r2, t3 >>> 0 || (ar.test(r2) ? 16 : 10));
} : nr;
X(X.G + X.F * (parseInt != or), { parseInt: or });
var sr = D.parseFloat;
var ur = rr.trim;
var cr = 1 / sr(Qt + "-0") != -1 / 0 ? function(e25) {
  var t3 = ur(String(e25), 3), r2 = sr(t3);
  return 0 === r2 && "-" == t3.charAt(0) ? -0 : r2;
} : sr;
X(X.G + X.F * (parseFloat != cr), { parseFloat: cr });
var lr = Lt.set;
var pr = function(e25, t3, r2) {
  var n2, i2 = t3.constructor;
  return i2 !== r2 && "function" == typeof i2 && (n2 = i2.prototype) !== r2.prototype && P(n2) && lr && lr(e25, n2), e25;
};
var fr = Me.f;
var hr = Ge.f;
var dr = M.f;
var mr = rr.trim;
var gr = D.Number;
var yr = gr;
var vr = gr.prototype;
var xr = "Number" == se(je(vr));
var br = "trim" in String.prototype;
var Er = function(e25) {
  var t3 = j(e25, false);
  if ("string" == typeof t3 && t3.length > 2) {
    var r2, n2, i2, a2 = (t3 = br ? t3.trim() : mr(t3, 3)).charCodeAt(0);
    if (43 === a2 || 45 === a2) {
      if (88 === (r2 = t3.charCodeAt(2)) || 120 === r2) return NaN;
    } else if (48 === a2) {
      switch (t3.charCodeAt(1)) {
        case 66:
        case 98:
          n2 = 2, i2 = 49;
          break;
        case 79:
        case 111:
          n2 = 8, i2 = 55;
          break;
        default:
          return +t3;
      }
      for (var o2, s2 = t3.slice(2), u2 = 0, c2 = s2.length; u2 < c2; u2++) if ((o2 = s2.charCodeAt(u2)) < 48 || o2 > i2) return NaN;
      return parseInt(s2, n2);
    }
  }
  return +t3;
};
if (!gr(" 0o1") || !gr("0b1") || gr("+0x1")) {
  gr = function(e25) {
    var t3 = arguments.length < 1 ? 0 : e25, r2 = this;
    return r2 instanceof gr && (xr ? w(function() {
      vr.valueOf.call(r2);
    }) : "Number" != se(r2)) ? pr(new yr(Er(t3)), r2, gr) : Er(t3);
  };
  for (Sr = _ ? fr(yr) : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","), kr = 0; Sr.length > kr; kr++) A(yr, Cr = Sr[kr]) && !A(gr, Cr) && dr(gr, Cr, hr(yr, Cr));
  gr.prototype = vr, vr.constructor = gr, H(D, "Number", gr);
}
var Cr;
var Sr;
var kr;
var Dr = function(e25, t3) {
  if ("number" != typeof e25 && "Number" != se(e25)) throw TypeError(t3);
  return +e25;
};
var Fr = function(e25) {
  var t3 = String(ce(this)), r2 = "", n2 = he(e25);
  if (n2 < 0 || n2 == 1 / 0) throw RangeError("Count can't be negative");
  for (; n2 > 0; (n2 >>>= 1) && (t3 += t3)) 1 & n2 && (r2 += t3);
  return r2;
};
var Ar = 1 .toFixed;
var wr = Math.floor;
var _r = [0, 0, 0, 0, 0, 0];
var Tr = "Number.toFixed: incorrect invocation!";
var Pr = function(e25, t3) {
  for (var r2 = -1, n2 = t3; ++r2 < 6; ) n2 += e25 * _r[r2], _r[r2] = n2 % 1e7, n2 = wr(n2 / 1e7);
};
var Ir = function(e25) {
  for (var t3 = 6, r2 = 0; --t3 >= 0; ) r2 += _r[t3], _r[t3] = wr(r2 / e25), r2 = r2 % e25 * 1e7;
};
var Br = function() {
  for (var e25 = 6, t3 = ""; --e25 >= 0; ) if ("" !== t3 || 0 === e25 || 0 !== _r[e25]) {
    var r2 = String(_r[e25]);
    t3 = "" === t3 ? r2 : t3 + Fr.call("0", 7 - r2.length) + r2;
  }
  return t3;
};
var Or = function e3(t3, r2, n2) {
  return 0 === r2 ? n2 : r2 % 2 == 1 ? e3(t3, r2 - 1, n2 * t3) : e3(t3 * t3, r2 / 2, n2);
};
X(X.P + X.F * (!!Ar && ("0.000" !== 8e-5.toFixed(3) || "1" !== 0.9.toFixed(0) || "1.25" !== 1.255.toFixed(2) || "1000000000000000128" !== 1000000000000000100 .toFixed(0)) || !w(function() {
  Ar.call({});
})), "Number", { toFixed: function(e25) {
  var t3, r2, n2, i2, a2 = Dr(this, Tr), o2 = he(e25), s2 = "", u2 = "0";
  if (o2 < 0 || o2 > 20) throw RangeError(Tr);
  if (a2 != a2) return "NaN";
  if (a2 <= -1e21 || a2 >= 1e21) return String(a2);
  if (a2 < 0 && (s2 = "-", a2 = -a2), a2 > 1e-21) if (r2 = (t3 = function(e26) {
    for (var t4 = 0, r3 = e26; r3 >= 4096; ) t4 += 12, r3 /= 4096;
    for (; r3 >= 2; ) t4 += 1, r3 /= 2;
    return t4;
  }(a2 * Or(2, 69, 1)) - 69) < 0 ? a2 * Or(2, -t3, 1) : a2 / Or(2, t3, 1), r2 *= 4503599627370496, (t3 = 52 - t3) > 0) {
    for (Pr(0, r2), n2 = o2; n2 >= 7; ) Pr(1e7, 0), n2 -= 7;
    for (Pr(Or(10, n2, 1), 0), n2 = t3 - 1; n2 >= 23; ) Ir(1 << 23), n2 -= 23;
    Ir(1 << n2), Pr(1, 1), Ir(2), u2 = Br();
  } else Pr(0, r2), Pr(1 << -t3, 0), u2 = Br() + Fr.call("0", o2);
  return u2 = o2 > 0 ? s2 + ((i2 = u2.length) <= o2 ? "0." + Fr.call("0", o2 - i2) + u2 : u2.slice(0, i2 - o2) + "." + u2.slice(i2 - o2)) : s2 + u2;
} });
var Lr = 1 .toPrecision;
X(X.P + X.F * (w(function() {
  return "1" !== Lr.call(1, void 0);
}) || !w(function() {
  Lr.call({});
})), "Number", { toPrecision: function(e25) {
  var t3 = Dr(this, "Number#toPrecision: incorrect invocation!");
  return void 0 === e25 ? Lr.call(t3) : Lr.call(t3, e25);
} }), X(X.S, "Number", { EPSILON: Math.pow(2, -52) });
var Nr = D.isFinite;
X(X.S, "Number", { isFinite: function(e25) {
  return "number" == typeof e25 && Nr(e25);
} });
var jr = Math.floor;
var Rr = function(e25) {
  return !P(e25) && isFinite(e25) && jr(e25) === e25;
};
X(X.S, "Number", { isInteger: Rr }), X(X.S, "Number", { isNaN: function(e25) {
  return e25 != e25;
} });
var Mr = Math.abs;
X(X.S, "Number", { isSafeInteger: function(e25) {
  return Rr(e25) && Mr(e25) <= 9007199254740991;
} }), X(X.S, "Number", { MAX_SAFE_INTEGER: 9007199254740991 }), X(X.S, "Number", { MIN_SAFE_INTEGER: -9007199254740991 }), X(X.S + X.F * (Number.parseFloat != cr), "Number", { parseFloat: cr }), X(X.S + X.F * (Number.parseInt != or), "Number", { parseInt: or });
var Vr = Math.log1p || function(e25) {
  return (e25 = +e25) > -1e-8 && e25 < 1e-8 ? e25 - e25 * e25 / 2 : Math.log(1 + e25);
};
var Ur = Math.sqrt;
var qr = Math.acosh;
X(X.S + X.F * !(qr && 710 == Math.floor(qr(Number.MAX_VALUE)) && qr(1 / 0) == 1 / 0), "Math", { acosh: function(e25) {
  return (e25 = +e25) < 1 ? NaN : e25 > 9490626562425156e-8 ? Math.log(e25) + Math.LN2 : Vr(e25 - 1 + Ur(e25 - 1) * Ur(e25 + 1));
} });
var Wr = Math.asinh;
X(X.S + X.F * !(Wr && 1 / Wr(0) > 0), "Math", { asinh: function e4(t3) {
  return isFinite(t3 = +t3) && 0 != t3 ? t3 < 0 ? -e4(-t3) : Math.log(t3 + Math.sqrt(t3 * t3 + 1)) : t3;
} });
var $r = Math.atanh;
X(X.S + X.F * !($r && 1 / $r(-0) < 0), "Math", { atanh: function(e25) {
  return 0 == (e25 = +e25) ? e25 : Math.log((1 + e25) / (1 - e25)) / 2;
} });
var Gr = Math.sign || function(e25) {
  return 0 == (e25 = +e25) || e25 != e25 ? e25 : e25 < 0 ? -1 : 1;
};
X(X.S, "Math", { cbrt: function(e25) {
  return Gr(e25 = +e25) * Math.pow(Math.abs(e25), 1 / 3);
} }), X(X.S, "Math", { clz32: function(e25) {
  return (e25 >>>= 0) ? 31 - Math.floor(Math.log(e25 + 0.5) * Math.LOG2E) : 32;
} });
var zr = Math.exp;
X(X.S, "Math", { cosh: function(e25) {
  return (zr(e25 = +e25) + zr(-e25)) / 2;
} });
var Hr = Math.expm1;
var Kr = !Hr || Hr(10) > 22025.465794806718 || Hr(10) < 22025.465794806718 || -2e-17 != Hr(-2e-17) ? function(e25) {
  return 0 == (e25 = +e25) ? e25 : e25 > -1e-6 && e25 < 1e-6 ? e25 + e25 * e25 / 2 : Math.exp(e25) - 1;
} : Hr;
X(X.S + X.F * (Kr != Math.expm1), "Math", { expm1: Kr });
var Jr = Math.pow;
var Qr = Jr(2, -52);
var Xr = Jr(2, -23);
var Yr = Jr(2, 127) * (2 - Xr);
var Zr = Jr(2, -126);
var en = Math.fround || function(e25) {
  var t3, r2, n2 = Math.abs(e25), i2 = Gr(e25);
  return n2 < Zr ? i2 * (n2 / Zr / Xr + 1 / Qr - 1 / Qr) * Zr * Xr : (r2 = (t3 = (1 + Xr / Qr) * n2) - (t3 - n2)) > Yr || r2 != r2 ? i2 * (1 / 0) : i2 * r2;
};
X(X.S, "Math", { fround: en });
var tn = Math.abs;
X(X.S, "Math", { hypot: function(e25, t3) {
  for (var r2, n2, i2 = 0, a2 = 0, o2 = arguments.length, s2 = 0; a2 < o2; ) s2 < (r2 = tn(arguments[a2++])) ? (i2 = i2 * (n2 = s2 / r2) * n2 + 1, s2 = r2) : i2 += r2 > 0 ? (n2 = r2 / s2) * n2 : r2;
  return s2 === 1 / 0 ? 1 / 0 : s2 * Math.sqrt(i2);
} });
var rn = Math.imul;
X(X.S + X.F * w(function() {
  return -5 != rn(4294967295, 5) || 2 != rn.length;
}), "Math", { imul: function(e25, t3) {
  var r2 = +e25, n2 = +t3, i2 = 65535 & r2, a2 = 65535 & n2;
  return 0 | i2 * a2 + ((65535 & r2 >>> 16) * a2 + i2 * (65535 & n2 >>> 16) << 16 >>> 0);
} }), X(X.S, "Math", { log10: function(e25) {
  return Math.log(e25) * Math.LOG10E;
} }), X(X.S, "Math", { log1p: Vr }), X(X.S, "Math", { log2: function(e25) {
  return Math.log(e25) / Math.LN2;
} }), X(X.S, "Math", { sign: Gr });
var nn = Math.exp;
X(X.S + X.F * w(function() {
  return -2e-17 != !Math.sinh(-2e-17);
}), "Math", { sinh: function(e25) {
  return Math.abs(e25 = +e25) < 1 ? (Kr(e25) - Kr(-e25)) / 2 : (nn(e25 - 1) - nn(-e25 - 1)) * (Math.E / 2);
} });
var an = Math.exp;
X(X.S, "Math", { tanh: function(e25) {
  var t3 = Kr(e25 = +e25), r2 = Kr(-e25);
  return t3 == 1 / 0 ? 1 : r2 == 1 / 0 ? -1 : (t3 - r2) / (an(e25) + an(-e25));
} }), X(X.S, "Math", { trunc: function(e25) {
  return (e25 > 0 ? Math.floor : Math.ceil)(e25);
} });
var on2 = String.fromCharCode;
var sn = String.fromCodePoint;
X(X.S + X.F * (!!sn && 1 != sn.length), "String", { fromCodePoint: function(e25) {
  for (var t3, r2 = [], n2 = arguments.length, i2 = 0; n2 > i2; ) {
    if (t3 = +arguments[i2++], ve(t3, 1114111) !== t3) throw RangeError(t3 + " is not a valid code point");
    r2.push(t3 < 65536 ? on2(t3) : on2(55296 + ((t3 -= 65536) >> 10), t3 % 1024 + 56320));
  }
  return r2.join("");
} }), X(X.S, "String", { raw: function(e25) {
  for (var t3 = le(e25.raw), r2 = me(t3.length), n2 = arguments.length, i2 = [], a2 = 0; r2 > a2; ) i2.push(String(t3[a2++])), a2 < n2 && i2.push(String(arguments[a2]));
  return i2.join("");
} }), rr("trim", function(e25) {
  return function() {
    return e25(this, 3);
  };
});
var un = function(e25) {
  return function(t3, r2) {
    var n2, i2, a2 = String(ce(t3)), o2 = he(r2), s2 = a2.length;
    return o2 < 0 || o2 >= s2 ? e25 ? "" : void 0 : (n2 = a2.charCodeAt(o2)) < 55296 || n2 > 56319 || o2 + 1 === s2 || (i2 = a2.charCodeAt(o2 + 1)) < 56320 || i2 > 57343 ? e25 ? a2.charAt(o2) : n2 : e25 ? a2.slice(o2, o2 + 2) : i2 - 56320 + (n2 - 55296 << 10) + 65536;
  };
};
var cn = {};
var ln = {};
U(ln, Z("iterator"), function() {
  return this;
});
var pn = function(e25, t3, r2) {
  e25.prototype = je(ln, { next: V(1, r2) }), re(e25, t3 + " Iterator");
};
var fn = Z("iterator");
var hn = !([].keys && "next" in [].keys());
var dn = function() {
  return this;
};
var mn = function(e25, t3, r2, n2, i2, a2, o2) {
  pn(r2, t3, n2);
  var s2, u2, c2, l2 = function(e26) {
    if (!hn && e26 in d2) return d2[e26];
    switch (e26) {
      case "keys":
      case "values":
        return function() {
          return new r2(this, e26);
        };
    }
    return function() {
      return new r2(this, e26);
    };
  }, p2 = t3 + " Iterator", f2 = "values" == i2, h2 = false, d2 = e25.prototype, m2 = d2[fn] || d2["@@iterator"] || i2 && d2[i2], g2 = m2 || l2(i2), y2 = i2 ? f2 ? l2("entries") : g2 : void 0, v2 = "Array" == t3 && d2.entries || m2;
  if (v2 && (c2 = At(v2.call(new e25()))) !== Object.prototype && c2.next && (re(c2, p2, true), "function" != typeof c2[fn] && U(c2, fn, dn)), f2 && m2 && "values" !== m2.name && (h2 = true, g2 = function() {
    return m2.call(this);
  }), (hn || h2 || !d2[fn]) && U(d2, fn, g2), cn[t3] = g2, cn[p2] = dn, i2) if (s2 = { values: f2 ? g2 : l2("values"), keys: a2 ? g2 : l2("keys"), entries: y2 }, o2) for (u2 in s2) u2 in d2 || H(d2, u2, s2[u2]);
  else X(X.P + X.F * (hn || h2), t3, s2);
  return s2;
};
var gn = un(true);
mn(String, "String", function(e25) {
  this._t = String(e25), this._i = 0;
}, function() {
  var e25, t3 = this._t, r2 = this._i;
  return r2 >= t3.length ? { value: void 0, done: true } : (e25 = gn(t3, r2), this._i += e25.length, { value: e25, done: false });
});
var yn = un(false);
X(X.P, "String", { codePointAt: function(e25) {
  return yn(this, e25);
} });
var vn = Z("match");
var xn = function(e25) {
  var t3;
  return P(e25) && (void 0 !== (t3 = e25[vn]) ? !!t3 : "RegExp" == se(e25));
};
var bn = function(e25, t3, r2) {
  if (xn(t3)) throw TypeError("String#" + r2 + " doesn't accept regex!");
  return String(ce(e25));
};
var En = Z("match");
var Cn = function(e25) {
  var t3 = /./;
  try {
    "/./"[e25](t3);
  } catch (r2) {
    try {
      return t3[En] = false, !"/./"[e25](t3);
    } catch (e26) {
    }
  }
  return true;
};
var Sn = "".endsWith;
X(X.P + X.F * Cn("endsWith"), "String", { endsWith: function(e25) {
  var t3 = bn(this, e25, "endsWith"), r2 = arguments.length > 1 ? arguments[1] : void 0, n2 = me(t3.length), i2 = void 0 === r2 ? n2 : Math.min(me(r2), n2), a2 = String(e25);
  return Sn ? Sn.call(t3, a2, i2) : t3.slice(i2 - a2.length, i2) === a2;
} });
X(X.P + X.F * Cn("includes"), "String", { includes: function(e25) {
  return !!~bn(this, e25, "includes").indexOf(e25, arguments.length > 1 ? arguments[1] : void 0);
} }), X(X.P, "String", { repeat: Fr });
var kn = "".startsWith;
X(X.P + X.F * Cn("startsWith"), "String", { startsWith: function(e25) {
  var t3 = bn(this, e25, "startsWith"), r2 = me(Math.min(arguments.length > 1 ? arguments[1] : void 0, t3.length)), n2 = String(e25);
  return kn ? kn.call(t3, n2, r2) : t3.slice(r2, r2 + n2.length) === n2;
} });
var Dn = /"/g;
var Fn = function(e25, t3, r2, n2) {
  var i2 = String(ce(e25)), a2 = "<" + t3;
  return "" !== r2 && (a2 += " " + r2 + '="' + String(n2).replace(Dn, "&quot;") + '"'), a2 + ">" + i2 + "</" + t3 + ">";
};
var An = function(e25, t3) {
  var r2 = {};
  r2[e25] = t3(Fn), X(X.P + X.F * w(function() {
    var t4 = ""[e25]('"');
    return t4 !== t4.toLowerCase() || t4.split('"').length > 3;
  }), "String", r2);
};
An("anchor", function(e25) {
  return function(t3) {
    return e25(this, "a", "name", t3);
  };
}), An("big", function(e25) {
  return function() {
    return e25(this, "big", "", "");
  };
}), An("blink", function(e25) {
  return function() {
    return e25(this, "blink", "", "");
  };
}), An("bold", function(e25) {
  return function() {
    return e25(this, "b", "", "");
  };
}), An("fixed", function(e25) {
  return function() {
    return e25(this, "tt", "", "");
  };
}), An("fontcolor", function(e25) {
  return function(t3) {
    return e25(this, "font", "color", t3);
  };
}), An("fontsize", function(e25) {
  return function(t3) {
    return e25(this, "font", "size", t3);
  };
}), An("italics", function(e25) {
  return function() {
    return e25(this, "i", "", "");
  };
}), An("link", function(e25) {
  return function(t3) {
    return e25(this, "a", "href", t3);
  };
}), An("small", function(e25) {
  return function() {
    return e25(this, "small", "", "");
  };
}), An("strike", function(e25) {
  return function() {
    return e25(this, "strike", "", "");
  };
}), An("sub", function(e25) {
  return function() {
    return e25(this, "sub", "", "");
  };
}), An("sup", function(e25) {
  return function() {
    return e25(this, "sup", "", "");
  };
}), X(X.S, "Date", { now: function() {
  return (/* @__PURE__ */ new Date()).getTime();
} }), X(X.P + X.F * w(function() {
  return null !== (/* @__PURE__ */ new Date(NaN)).toJSON() || 1 !== Date.prototype.toJSON.call({ toISOString: function() {
    return 1;
  } });
}), "Date", { toJSON: function(e25) {
  var t3 = Te(this), r2 = j(t3);
  return "number" != typeof r2 || isFinite(r2) ? t3.toISOString() : null;
} });
var wn = Date.prototype.getTime;
var _n = Date.prototype.toISOString;
var Tn = function(e25) {
  return e25 > 9 ? e25 : "0" + e25;
};
var Pn = w(function() {
  return "0385-07-25T07:06:39.999Z" != _n.call(new Date(-5e13 - 1));
}) || !w(function() {
  _n.call(/* @__PURE__ */ new Date(NaN));
}) ? function() {
  if (!isFinite(wn.call(this))) throw RangeError("Invalid time value");
  var e25 = this, t3 = e25.getUTCFullYear(), r2 = e25.getUTCMilliseconds(), n2 = t3 < 0 ? "-" : t3 > 9999 ? "+" : "";
  return n2 + ("00000" + Math.abs(t3)).slice(n2 ? -6 : -4) + "-" + Tn(e25.getUTCMonth() + 1) + "-" + Tn(e25.getUTCDate()) + "T" + Tn(e25.getUTCHours()) + ":" + Tn(e25.getUTCMinutes()) + ":" + Tn(e25.getUTCSeconds()) + "." + (r2 > 99 ? r2 : "0" + Tn(r2)) + "Z";
} : _n;
X(X.P + X.F * (Date.prototype.toISOString !== Pn), "Date", { toISOString: Pn });
var In = Date.prototype;
var Bn = In.toString;
var On = In.getTime;
/* @__PURE__ */ new Date(NaN) + "" != "Invalid Date" && H(In, "toString", function() {
  var e25 = On.call(this);
  return e25 == e25 ? Bn.call(this) : "Invalid Date";
});
var Ln = Z("toPrimitive");
var Nn = Date.prototype;
Ln in Nn || U(Nn, Ln, function(e25) {
  if ("string" !== e25 && "number" !== e25 && "default" !== e25) throw TypeError("Incorrect hint");
  return j(I(this), "number" != e25);
}), X(X.S, "Array", { isArray: _e });
var jn = function(e25, t3, r2, n2) {
  try {
    return n2 ? t3(I(r2)[0], r2[1]) : t3(r2);
  } catch (t4) {
    var i2 = e25.return;
    throw void 0 !== i2 && I(i2.call(e25)), t4;
  }
};
var Rn = Z("iterator");
var Mn = Array.prototype;
var Vn = function(e25) {
  return void 0 !== e25 && (cn.Array === e25 || Mn[Rn] === e25);
};
var Un = function(e25, t3, r2) {
  t3 in e25 ? M.f(e25, t3, V(0, r2)) : e25[t3] = r2;
};
var qn = Z("iterator");
var Wn = T.getIteratorMethod = function(e25) {
  if (null != e25) return e25[qn] || e25["@@iterator"] || cn[Rt(e25)];
};
var $n = Z("iterator");
var Gn = false;
try {
  zn = [7][$n]();
  zn.return = function() {
    Gn = true;
  }, Array.from(zn, function() {
    throw 2;
  });
} catch (e25) {
}
var zn;
var Hn = function(e25, t3) {
  if (!t3 && !Gn) return false;
  var r2 = false;
  try {
    var n2 = [7], i2 = n2[$n]();
    i2.next = function() {
      return { done: r2 = true };
    }, n2[$n] = function() {
      return i2;
    }, e25(n2);
  } catch (e26) {
  }
  return r2;
};
X(X.S + X.F * !Hn(function(e25) {
  Array.from(e25);
}), "Array", { from: function(e25) {
  var t3, r2, n2, i2, a2 = Te(e25), o2 = "function" == typeof this ? this : Array, s2 = arguments.length, u2 = s2 > 1 ? arguments[1] : void 0, c2 = void 0 !== u2, l2 = 0, p2 = Wn(a2);
  if (c2 && (u2 = J(u2, s2 > 2 ? arguments[2] : void 0, 2)), null == p2 || o2 == Array && Vn(p2)) for (r2 = new o2(t3 = me(a2.length)); t3 > l2; l2++) Un(r2, l2, c2 ? u2(a2[l2], l2) : a2[l2]);
  else for (i2 = p2.call(a2), r2 = new o2(); !(n2 = i2.next()).done; l2++) Un(r2, l2, c2 ? jn(i2, u2, [n2.value, l2], true) : n2.value);
  return r2.length = l2, r2;
} }), X(X.S + X.F * w(function() {
  function e25() {
  }
  return !(Array.of.call(e25) instanceof e25);
}), "Array", { of: function() {
  for (var e25 = 0, t3 = arguments.length, r2 = new ("function" == typeof this ? this : Array)(t3); t3 > e25; ) Un(r2, e25, arguments[e25++]);
  return r2.length = t3, r2;
} });
var Kn = function(e25, t3) {
  return !!e25 && w(function() {
    t3 ? e25.call(null, function() {
    }, 1) : e25.call(null);
  });
};
var Jn = [].join;
X(X.P + X.F * (ue != Object || !Kn(Jn)), "Array", { join: function(e25) {
  return Jn.call(le(this), void 0 === e25 ? "," : e25);
} });
var Qn = [].slice;
X(X.P + X.F * w(function() {
  Be && Qn.call(Be);
}), "Array", { slice: function(e25, t3) {
  var r2 = me(this.length), n2 = se(this);
  if (t3 = void 0 === t3 ? r2 : t3, "Array" == n2) return Qn.call(this, e25, t3);
  for (var i2 = ve(e25, r2), a2 = ve(t3, r2), o2 = me(a2 - i2), s2 = new Array(o2), u2 = 0; u2 < o2; u2++) s2[u2] = "String" == n2 ? this.charAt(i2 + u2) : this[i2 + u2];
  return s2;
} });
var Xn = [].sort;
var Yn = [1, 2, 3];
X(X.P + X.F * (w(function() {
  Yn.sort(void 0);
}) || !w(function() {
  Yn.sort(null);
}) || !Kn(Xn)), "Array", { sort: function(e25) {
  return void 0 === e25 ? Xn.call(Te(this)) : Xn.call(Te(this), K(e25));
} });
var Zn = Z("species");
var ei = function(e25, t3) {
  return new (function(e26) {
    var t4;
    return _e(e26) && ("function" != typeof (t4 = e26.constructor) || t4 !== Array && !_e(t4.prototype) || (t4 = void 0), P(t4) && null === (t4 = t4[Zn]) && (t4 = void 0)), void 0 === t4 ? Array : t4;
  }(e25))(t3);
};
var ti = function(e25, t3) {
  var r2 = 1 == e25, n2 = 2 == e25, i2 = 3 == e25, a2 = 4 == e25, o2 = 6 == e25, s2 = 5 == e25 || o2, u2 = t3 || ei;
  return function(t4, c2, l2) {
    for (var p2, f2, h2 = Te(t4), d2 = ue(h2), m2 = J(c2, l2, 3), g2 = me(d2.length), y2 = 0, v2 = r2 ? u2(t4, g2) : n2 ? u2(t4, 0) : void 0; g2 > y2; y2++) if ((s2 || y2 in d2) && (f2 = m2(p2 = d2[y2], y2, h2), e25)) {
      if (r2) v2[y2] = f2;
      else if (f2) switch (e25) {
        case 3:
          return true;
        case 5:
          return p2;
        case 6:
          return y2;
        case 2:
          v2.push(p2);
      }
      else if (a2) return false;
    }
    return o2 ? -1 : i2 || a2 ? a2 : v2;
  };
};
var ri = ti(0);
var ni = Kn([].forEach, true);
X(X.P + X.F * !ni, "Array", { forEach: function(e25) {
  return ri(this, e25, arguments[1]);
} });
var ii = ti(1);
X(X.P + X.F * !Kn([].map, true), "Array", { map: function(e25) {
  return ii(this, e25, arguments[1]);
} });
var ai = ti(2);
X(X.P + X.F * !Kn([].filter, true), "Array", { filter: function(e25) {
  return ai(this, e25, arguments[1]);
} });
var oi = ti(3);
X(X.P + X.F * !Kn([].some, true), "Array", { some: function(e25) {
  return oi(this, e25, arguments[1]);
} });
var si = ti(4);
X(X.P + X.F * !Kn([].every, true), "Array", { every: function(e25) {
  return si(this, e25, arguments[1]);
} });
var ui = function(e25, t3, r2, n2, i2) {
  K(t3);
  var a2 = Te(e25), o2 = ue(a2), s2 = me(a2.length), u2 = i2 ? s2 - 1 : 0, c2 = i2 ? -1 : 1;
  if (r2 < 2) for (; ; ) {
    if (u2 in o2) {
      n2 = o2[u2], u2 += c2;
      break;
    }
    if (u2 += c2, i2 ? u2 < 0 : s2 <= u2) throw TypeError("Reduce of empty array with no initial value");
  }
  for (; i2 ? u2 >= 0 : s2 > u2; u2 += c2) u2 in o2 && (n2 = t3(n2, o2[u2], u2, a2));
  return n2;
};
X(X.P + X.F * !Kn([].reduce, true), "Array", { reduce: function(e25) {
  return ui(this, e25, arguments.length, arguments[1], false);
} }), X(X.P + X.F * !Kn([].reduceRight, true), "Array", { reduceRight: function(e25) {
  return ui(this, e25, arguments.length, arguments[1], true);
} });
var ci = xe(false);
var li = [].indexOf;
var pi = !!li && 1 / [1].indexOf(1, -0) < 0;
X(X.P + X.F * (pi || !Kn(li)), "Array", { indexOf: function(e25) {
  return pi ? li.apply(this, arguments) || 0 : ci(this, e25, arguments[1]);
} });
var fi = [].lastIndexOf;
var hi = !!fi && 1 / [1].lastIndexOf(1, -0) < 0;
X(X.P + X.F * (hi || !Kn(fi)), "Array", { lastIndexOf: function(e25) {
  if (hi) return fi.apply(this, arguments) || 0;
  var t3 = le(this), r2 = me(t3.length), n2 = r2 - 1;
  for (arguments.length > 1 && (n2 = Math.min(n2, he(arguments[1]))), n2 < 0 && (n2 = r2 + n2); n2 >= 0; n2--) if (n2 in t3 && t3[n2] === e25) return n2 || 0;
  return -1;
} });
var di = [].copyWithin || function(e25, t3) {
  var r2 = Te(this), n2 = me(r2.length), i2 = ve(e25, n2), a2 = ve(t3, n2), o2 = arguments.length > 2 ? arguments[2] : void 0, s2 = Math.min((void 0 === o2 ? n2 : ve(o2, n2)) - a2, n2 - i2), u2 = 1;
  for (a2 < i2 && i2 < a2 + s2 && (u2 = -1, a2 += s2 - 1, i2 += s2 - 1); s2-- > 0; ) a2 in r2 ? r2[i2] = r2[a2] : delete r2[i2], i2 += u2, a2 += u2;
  return r2;
};
var mi = Z("unscopables");
var gi = Array.prototype;
null == gi[mi] && U(gi, mi, {});
var yi = function(e25) {
  gi[mi][e25] = true;
};
X(X.P, "Array", { copyWithin: di }), yi("copyWithin");
var vi = function(e25) {
  for (var t3 = Te(this), r2 = me(t3.length), n2 = arguments.length, i2 = ve(n2 > 1 ? arguments[1] : void 0, r2), a2 = n2 > 2 ? arguments[2] : void 0, o2 = void 0 === a2 ? r2 : ve(a2, r2); o2 > i2; ) t3[i2++] = e25;
  return t3;
};
X(X.P, "Array", { fill: vi }), yi("fill");
var xi = ti(5);
var bi = true;
"find" in [] && Array(1).find(function() {
  bi = false;
}), X(X.P + X.F * bi, "Array", { find: function(e25) {
  return xi(this, e25, arguments.length > 1 ? arguments[1] : void 0);
} }), yi("find");
var Ei = ti(6);
var Ci = true;
"findIndex" in [] && Array(1).findIndex(function() {
  Ci = false;
}), X(X.P + X.F * Ci, "Array", { findIndex: function(e25) {
  return Ei(this, e25, arguments.length > 1 ? arguments[1] : void 0);
} }), yi("findIndex");
var Si = Z("species");
var ki = function(e25) {
  var t3 = D[e25];
  _ && t3 && !t3[Si] && M.f(t3, Si, { configurable: true, get: function() {
    return this;
  } });
};
ki("Array");
var Di = function(e25, t3) {
  return { value: t3, done: !!e25 };
};
var Fi = mn(Array, "Array", function(e25, t3) {
  this._t = le(e25), this._i = 0, this._k = t3;
}, function() {
  var e25 = this._t, t3 = this._k, r2 = this._i++;
  return !e25 || r2 >= e25.length ? (this._t = void 0, Di(1)) : Di(0, "keys" == t3 ? r2 : "values" == t3 ? e25[r2] : [r2, e25[r2]]);
}, "values");
cn.Arguments = cn.Array, yi("keys"), yi("values"), yi("entries");
var Ai = function() {
  var e25 = I(this), t3 = "";
  return e25.global && (t3 += "g"), e25.ignoreCase && (t3 += "i"), e25.multiline && (t3 += "m"), e25.unicode && (t3 += "u"), e25.sticky && (t3 += "y"), t3;
};
var wi = M.f;
var _i = Me.f;
var Ti = D.RegExp;
var Pi = Ti;
var Ii = Ti.prototype;
var Bi = /a/g;
var Oi = /a/g;
var Li = new Ti(Bi) !== Bi;
if (_ && (!Li || w(function() {
  return Oi[Z("match")] = false, Ti(Bi) != Bi || Ti(Oi) == Oi || "/a/i" != Ti(Bi, "i");
}))) {
  Ti = function(e25, t3) {
    var r2 = this instanceof Ti, n2 = xn(e25), i2 = void 0 === t3;
    return !r2 && n2 && e25.constructor === Ti && i2 ? e25 : pr(Li ? new Pi(n2 && !i2 ? e25.source : e25, t3) : Pi((n2 = e25 instanceof Ti) ? e25.source : e25, n2 && i2 ? Ai.call(e25) : t3), r2 ? this : Ii, Ti);
  };
  for (Ni = function(e25) {
    e25 in Ti || wi(Ti, e25, { configurable: true, get: function() {
      return Pi[e25];
    }, set: function(t3) {
      Pi[e25] = t3;
    } });
  }, ji = _i(Pi), Ri = 0; ji.length > Ri; ) Ni(ji[Ri++]);
  Ii.constructor = Ti, Ti.prototype = Ii, H(D, "RegExp", Ti);
}
var Ni;
var ji;
var Ri;
ki("RegExp");
var Mi = RegExp.prototype.exec;
var Vi = String.prototype.replace;
var Ui = Mi;
var qi = function() {
  var e25 = /a/, t3 = /b*/g;
  return Mi.call(e25, "a"), Mi.call(t3, "a"), 0 !== e25.lastIndex || 0 !== t3.lastIndex;
}();
var Wi = void 0 !== /()??/.exec("")[1];
(qi || Wi) && (Ui = function(e25) {
  var t3, r2, n2, i2, a2 = this;
  return Wi && (r2 = new RegExp("^" + a2.source + "$(?!\\s)", Ai.call(a2))), qi && (t3 = a2.lastIndex), n2 = Mi.call(a2, e25), qi && n2 && (a2.lastIndex = a2.global ? n2.index + n2[0].length : t3), Wi && n2 && n2.length > 1 && Vi.call(n2[0], r2, function() {
    for (i2 = 1; i2 < arguments.length - 2; i2++) void 0 === arguments[i2] && (n2[i2] = void 0);
  }), n2;
});
var $i = Ui;
X({ target: "RegExp", proto: true, forced: $i !== /./.exec }, { exec: $i }), _ && "g" != /./g.flags && M.f(RegExp.prototype, "flags", { configurable: true, get: Ai });
var Gi = /./.toString;
var zi = function(e25) {
  H(RegExp.prototype, "toString", e25, true);
};
w(function() {
  return "/a/b" != Gi.call({ source: "a", flags: "b" });
}) ? zi(function() {
  var e25 = I(this);
  return "/".concat(e25.source, "/", "flags" in e25 ? e25.flags : !_ && e25 instanceof RegExp ? Ai.call(e25) : void 0);
}) : "toString" != Gi.name && zi(function() {
  return Gi.call(this);
});
var Hi = un(true);
var Ki = function(e25, t3, r2) {
  return t3 + (r2 ? Hi(e25, t3).length : 1);
};
var Ji = RegExp.prototype.exec;
var Qi = function(e25, t3) {
  var r2 = e25.exec;
  if ("function" == typeof r2) {
    var n2 = r2.call(e25, t3);
    if ("object" !== i(n2)) throw new TypeError("RegExp exec method returned something other than an Object or null");
    return n2;
  }
  if ("RegExp" !== Rt(e25)) throw new TypeError("RegExp#exec called on incompatible receiver");
  return Ji.call(e25, t3);
};
var Xi = Z("species");
var Yi = !w(function() {
  var e25 = /./;
  return e25.exec = function() {
    var e26 = [];
    return e26.groups = { a: "7" }, e26;
  }, "7" !== "".replace(e25, "$<a>");
});
var Zi = function() {
  var e25 = /(?:)/, t3 = e25.exec;
  e25.exec = function() {
    return t3.apply(this, arguments);
  };
  var r2 = "ab".split(e25);
  return 2 === r2.length && "a" === r2[0] && "b" === r2[1];
}();
var ea = function(e25, t3, r2) {
  var n2 = Z(e25), i2 = !w(function() {
    var t4 = {};
    return t4[n2] = function() {
      return 7;
    }, 7 != ""[e25](t4);
  }), a2 = i2 ? !w(function() {
    var t4 = false, r3 = /a/;
    return r3.exec = function() {
      return t4 = true, null;
    }, "split" === e25 && (r3.constructor = {}, r3.constructor[Xi] = function() {
      return r3;
    }), r3[n2](""), !t4;
  }) : void 0;
  if (!i2 || !a2 || "replace" === e25 && !Yi || "split" === e25 && !Zi) {
    var o2 = /./[n2], s2 = r2(ce, n2, ""[e25], function(e26, t4, r3, n3, a3) {
      return t4.exec === $i ? i2 && !a3 ? { done: true, value: o2.call(t4, r3, n3) } : { done: true, value: e26.call(r3, t4, n3) } : { done: false };
    }), u2 = s2[0], c2 = s2[1];
    H(String.prototype, e25, u2), U(RegExp.prototype, n2, 2 == t3 ? function(e26, t4) {
      return c2.call(e26, this, t4);
    } : function(e26) {
      return c2.call(e26, this);
    });
  }
};
ea("match", 1, function(e25, t3, r2, n2) {
  return [function(r3) {
    var n3 = e25(this), i2 = null == r3 ? void 0 : r3[t3];
    return void 0 !== i2 ? i2.call(r3, n3) : new RegExp(r3)[t3](String(n3));
  }, function(e26) {
    var t4 = n2(r2, e26, this);
    if (t4.done) return t4.value;
    var i2 = I(e26), a2 = String(this);
    if (!i2.global) return Qi(i2, a2);
    var o2 = i2.unicode;
    i2.lastIndex = 0;
    for (var s2, u2 = [], c2 = 0; null !== (s2 = Qi(i2, a2)); ) {
      var l2 = String(s2[0]);
      u2[c2] = l2, "" === l2 && (i2.lastIndex = Ki(a2, me(i2.lastIndex), o2)), c2++;
    }
    return 0 === c2 ? null : u2;
  }];
});
var ta = Math.max;
var ra = Math.min;
var na = Math.floor;
var ia = /\$([$&`']|\d\d?|<[^>]*>)/g;
var aa = /\$([$&`']|\d\d?)/g;
ea("replace", 2, function(e25, t3, r2, n2) {
  return [function(n3, i3) {
    var a2 = e25(this), o2 = null == n3 ? void 0 : n3[t3];
    return void 0 !== o2 ? o2.call(n3, a2, i3) : r2.call(String(a2), n3, i3);
  }, function(e26, t4) {
    var a2 = n2(r2, e26, this, t4);
    if (a2.done) return a2.value;
    var o2 = I(e26), s2 = String(this), u2 = "function" == typeof t4;
    u2 || (t4 = String(t4));
    var c2 = o2.global;
    if (c2) {
      var l2 = o2.unicode;
      o2.lastIndex = 0;
    }
    for (var p2 = []; ; ) {
      var f2 = Qi(o2, s2);
      if (null === f2) break;
      if (p2.push(f2), !c2) break;
      "" === String(f2[0]) && (o2.lastIndex = Ki(s2, me(o2.lastIndex), l2));
    }
    for (var h2, d2 = "", m2 = 0, g2 = 0; g2 < p2.length; g2++) {
      f2 = p2[g2];
      for (var y2 = String(f2[0]), v2 = ta(ra(he(f2.index), s2.length), 0), x2 = [], b2 = 1; b2 < f2.length; b2++) x2.push(void 0 === (h2 = f2[b2]) ? h2 : String(h2));
      var E2 = f2.groups;
      if (u2) {
        var C3 = [y2].concat(x2, v2, s2);
        void 0 !== E2 && C3.push(E2);
        var S3 = String(t4.apply(void 0, C3));
      } else S3 = i2(y2, s2, v2, x2, E2, t4);
      v2 >= m2 && (d2 += s2.slice(m2, v2) + S3, m2 = v2 + y2.length);
    }
    return d2 + s2.slice(m2);
  }];
  function i2(e26, t4, n3, i3, a2, o2) {
    var s2 = n3 + e26.length, u2 = i3.length, c2 = aa;
    return void 0 !== a2 && (a2 = Te(a2), c2 = ia), r2.call(o2, c2, function(r3, o3) {
      var c3;
      switch (o3.charAt(0)) {
        case "$":
          return "$";
        case "&":
          return e26;
        case "`":
          return t4.slice(0, n3);
        case "'":
          return t4.slice(s2);
        case "<":
          c3 = a2[o3.slice(1, -1)];
          break;
        default:
          var l2 = +o3;
          if (0 === l2) return r3;
          if (l2 > u2) {
            var p2 = na(l2 / 10);
            return 0 === p2 ? r3 : p2 <= u2 ? void 0 === i3[p2 - 1] ? o3.charAt(1) : i3[p2 - 1] + o3.charAt(1) : r3;
          }
          c3 = i3[l2 - 1];
      }
      return void 0 === c3 ? "" : c3;
    });
  }
}), ea("search", 1, function(e25, t3, r2, n2) {
  return [function(r3) {
    var n3 = e25(this), i2 = null == r3 ? void 0 : r3[t3];
    return void 0 !== i2 ? i2.call(r3, n3) : new RegExp(r3)[t3](String(n3));
  }, function(e26) {
    var t4 = n2(r2, e26, this);
    if (t4.done) return t4.value;
    var i2 = I(e26), a2 = String(this), o2 = i2.lastIndex;
    Bt(o2, 0) || (i2.lastIndex = 0);
    var s2 = Qi(i2, a2);
    return Bt(i2.lastIndex, o2) || (i2.lastIndex = o2), null === s2 ? -1 : s2.index;
  }];
});
var oa = Z("species");
var sa = function(e25, t3) {
  var r2, n2 = I(e25).constructor;
  return void 0 === n2 || null == (r2 = I(n2)[oa]) ? t3 : K(r2);
};
var ua = Math.min;
var ca = [].push;
var la = !w(function() {
  RegExp(4294967295, "y");
});
ea("split", 2, function(e25, t3, r2, n2) {
  var i2;
  return i2 = "c" == "abbc".split(/(b)*/)[1] || 4 != "test".split(/(?:)/, -1).length || 2 != "ab".split(/(?:ab)*/).length || 4 != ".".split(/(.?)(.?)/).length || ".".split(/()()/).length > 1 || "".split(/.?/).length ? function(e26, t4) {
    var n3 = String(this);
    if (void 0 === e26 && 0 === t4) return [];
    if (!xn(e26)) return r2.call(n3, e26, t4);
    for (var i3, a2, o2, s2 = [], u2 = (e26.ignoreCase ? "i" : "") + (e26.multiline ? "m" : "") + (e26.unicode ? "u" : "") + (e26.sticky ? "y" : ""), c2 = 0, l2 = void 0 === t4 ? 4294967295 : t4 >>> 0, p2 = new RegExp(e26.source, u2 + "g"); (i3 = $i.call(p2, n3)) && !((a2 = p2.lastIndex) > c2 && (s2.push(n3.slice(c2, i3.index)), i3.length > 1 && i3.index < n3.length && ca.apply(s2, i3.slice(1)), o2 = i3[0].length, c2 = a2, s2.length >= l2)); ) p2.lastIndex === i3.index && p2.lastIndex++;
    return c2 === n3.length ? !o2 && p2.test("") || s2.push("") : s2.push(n3.slice(c2)), s2.length > l2 ? s2.slice(0, l2) : s2;
  } : "0".split(void 0, 0).length ? function(e26, t4) {
    return void 0 === e26 && 0 === t4 ? [] : r2.call(this, e26, t4);
  } : r2, [function(r3, n3) {
    var a2 = e25(this), o2 = null == r3 ? void 0 : r3[t3];
    return void 0 !== o2 ? o2.call(r3, a2, n3) : i2.call(String(a2), r3, n3);
  }, function(e26, t4) {
    var a2 = n2(i2, e26, this, t4, i2 !== r2);
    if (a2.done) return a2.value;
    var o2 = I(e26), s2 = String(this), u2 = sa(o2, RegExp), c2 = o2.unicode, l2 = (o2.ignoreCase ? "i" : "") + (o2.multiline ? "m" : "") + (o2.unicode ? "u" : "") + (la ? "y" : "g"), p2 = new u2(la ? o2 : "^(?:" + o2.source + ")", l2), f2 = void 0 === t4 ? 4294967295 : t4 >>> 0;
    if (0 === f2) return [];
    if (0 === s2.length) return null === Qi(p2, s2) ? [s2] : [];
    for (var h2 = 0, d2 = 0, m2 = []; d2 < s2.length; ) {
      p2.lastIndex = la ? d2 : 0;
      var g2, y2 = Qi(p2, la ? s2 : s2.slice(d2));
      if (null === y2 || (g2 = ua(me(p2.lastIndex + (la ? 0 : d2)), s2.length)) === h2) d2 = Ki(s2, d2, c2);
      else {
        if (m2.push(s2.slice(h2, d2)), m2.length === f2) return m2;
        for (var v2 = 1; v2 <= y2.length - 1; v2++) if (m2.push(y2[v2]), m2.length === f2) return m2;
        d2 = h2 = g2;
      }
    }
    return m2.push(s2.slice(h2)), m2;
  }];
});
var pa;
var fa;
var ha;
var da = function(e25, t3, r2, n2) {
  if (!(e25 instanceof t3) || void 0 !== n2 && n2 in e25) throw TypeError(r2 + ": incorrect invocation!");
  return e25;
};
var ma = r(function(e25) {
  var t3 = {}, r2 = {}, n2 = e25.exports = function(e26, n3, i2, a2, o2) {
    var s2, u2, c2, l2, p2 = o2 ? function() {
      return e26;
    } : Wn(e26), f2 = J(i2, a2, n3 ? 2 : 1), h2 = 0;
    if ("function" != typeof p2) throw TypeError(e26 + " is not iterable!");
    if (Vn(p2)) {
      for (s2 = me(e26.length); s2 > h2; h2++) if ((l2 = n3 ? f2(I(u2 = e26[h2])[0], u2[1]) : f2(e26[h2])) === t3 || l2 === r2) return l2;
    } else for (c2 = p2.call(e26); !(u2 = c2.next()).done; ) if ((l2 = jn(c2, f2, u2.value, n3)) === t3 || l2 === r2) return l2;
  };
  n2.BREAK = t3, n2.RETURN = r2;
});
var ga = D.process;
var ya = D.setImmediate;
var va = D.clearImmediate;
var xa = D.MessageChannel;
var ba = D.Dispatch;
var Ea = 0;
var Ca = {};
var Sa = function() {
  var e25 = +this;
  if (Ca.hasOwnProperty(e25)) {
    var t3 = Ca[e25];
    delete Ca[e25], t3();
  }
};
var ka = function(e25) {
  Sa.call(e25.data);
};
ya && va || (ya = function(e25) {
  for (var t3 = [], r2 = 1; arguments.length > r2; ) t3.push(arguments[r2++]);
  return Ca[++Ea] = function() {
    Vt("function" == typeof e25 ? e25 : Function(e25), t3);
  }, pa(Ea), Ea;
}, va = function(e25) {
  delete Ca[e25];
}, "process" == se(ga) ? pa = function(e25) {
  ga.nextTick(J(Sa, e25, 1));
} : ba && ba.now ? pa = function(e25) {
  ba.now(J(Sa, e25, 1));
} : xa ? (ha = (fa = new xa()).port2, fa.port1.onmessage = ka, pa = J(ha.postMessage, ha, 1)) : D.addEventListener && "function" == typeof postMessage && !D.importScripts ? (pa = function(e25) {
  D.postMessage(e25 + "", "*");
}, D.addEventListener("message", ka, false)) : pa = "onreadystatechange" in L("script") ? function(e25) {
  Be.appendChild(L("script")).onreadystatechange = function() {
    Be.removeChild(this), Sa.call(e25);
  };
} : function(e25) {
  setTimeout(J(Sa, e25, 1), 0);
});
var Da = { set: ya, clear: va };
var Fa = Da.set;
var Aa = D.MutationObserver || D.WebKitMutationObserver;
var wa = D.process;
var _a2 = D.Promise;
var Ta = "process" == se(wa);
function Pa(e25) {
  var t3, r2;
  this.promise = new e25(function(e26, n2) {
    if (void 0 !== t3 || void 0 !== r2) throw TypeError("Bad Promise constructor");
    t3 = e26, r2 = n2;
  }), this.resolve = K(t3), this.reject = K(r2);
}
var Ia;
var Ba;
var Oa;
var La;
var Na = { f: function(e25) {
  return new Pa(e25);
} };
var ja = function(e25) {
  try {
    return { e: false, v: e25() };
  } catch (e26) {
    return { e: true, v: e26 };
  }
};
var Ra = D.navigator;
var Ma = Ra && Ra.userAgent || "";
var Va = function(e25, t3) {
  if (I(e25), P(t3) && t3.constructor === e25) return t3;
  var r2 = Na.f(e25);
  return (0, r2.resolve)(t3), r2.promise;
};
var Ua = function(e25, t3, r2) {
  for (var n2 in t3) H(e25, n2, t3[n2], r2);
  return e25;
};
var qa = Da.set;
var Wa = function() {
  var e25, t3, r2, n2 = function() {
    var n3, i3;
    for (Ta && (n3 = wa.domain) && n3.exit(); e25; ) {
      i3 = e25.fn, e25 = e25.next;
      try {
        i3();
      } catch (n4) {
        throw e25 ? r2() : t3 = void 0, n4;
      }
    }
    t3 = void 0, n3 && n3.enter();
  };
  if (Ta) r2 = function() {
    wa.nextTick(n2);
  };
  else if (!Aa || D.navigator && D.navigator.standalone) if (_a2 && _a2.resolve) {
    var i2 = _a2.resolve(void 0);
    r2 = function() {
      i2.then(n2);
    };
  } else r2 = function() {
    Fa.call(D, n2);
  };
  else {
    var a2 = true, o2 = document.createTextNode("");
    new Aa(n2).observe(o2, { characterData: true }), r2 = function() {
      o2.data = a2 = !a2;
    };
  }
  return function(n3) {
    var i3 = { fn: n3, next: void 0 };
    t3 && (t3.next = i3), e25 || (e25 = i3, r2()), t3 = i3;
  };
}();
var $a = D.TypeError;
var Ga = D.process;
var za = Ga && Ga.versions;
var Ha = za && za.v8 || "";
var Ka = D.Promise;
var Ja = "process" == Rt(Ga);
var Qa = function() {
};
var Xa = Ba = Na.f;
var Ya = !!function() {
  try {
    var e25 = Ka.resolve(1), t3 = (e25.constructor = {})[Z("species")] = function(e26) {
      e26(Qa, Qa);
    };
    return (Ja || "function" == typeof PromiseRejectionEvent) && e25.then(Qa) instanceof t3 && 0 !== Ha.indexOf("6.6") && -1 === Ma.indexOf("Chrome/66");
  } catch (e26) {
  }
}();
var Za = function(e25) {
  var t3;
  return !(!P(e25) || "function" != typeof (t3 = e25.then)) && t3;
};
var eo = function(e25, t3) {
  if (!e25._n) {
    e25._n = true;
    var r2 = e25._c;
    Wa(function() {
      for (var n2 = e25._v, i2 = 1 == e25._s, a2 = 0, o2 = function(t4) {
        var r3, a3, o3, s2 = i2 ? t4.ok : t4.fail, u2 = t4.resolve, c2 = t4.reject, l2 = t4.domain;
        try {
          s2 ? (i2 || (2 == e25._h && no(e25), e25._h = 1), true === s2 ? r3 = n2 : (l2 && l2.enter(), r3 = s2(n2), l2 && (l2.exit(), o3 = true)), r3 === t4.promise ? c2($a("Promise-chain cycle")) : (a3 = Za(r3)) ? a3.call(r3, u2, c2) : u2(r3)) : c2(n2);
        } catch (e26) {
          l2 && !o3 && l2.exit(), c2(e26);
        }
      }; r2.length > a2; ) o2(r2[a2++]);
      e25._c = [], e25._n = false, t3 && !e25._h && to(e25);
    });
  }
};
var to = function(e25) {
  qa.call(D, function() {
    var t3, r2, n2, i2 = e25._v, a2 = ro(e25);
    if (a2 && (t3 = ja(function() {
      Ja ? Ga.emit("unhandledRejection", i2, e25) : (r2 = D.onunhandledrejection) ? r2({ promise: e25, reason: i2 }) : (n2 = D.console) && n2.error && n2.error("Unhandled promise rejection", i2);
    }), e25._h = Ja || ro(e25) ? 2 : 1), e25._a = void 0, a2 && t3.e) throw t3.v;
  });
};
var ro = function(e25) {
  return 1 !== e25._h && 0 === (e25._a || e25._c).length;
};
var no = function(e25) {
  qa.call(D, function() {
    var t3;
    Ja ? Ga.emit("rejectionHandled", e25) : (t3 = D.onrejectionhandled) && t3({ promise: e25, reason: e25._v });
  });
};
var io = function(e25) {
  var t3 = this;
  t3._d || (t3._d = true, (t3 = t3._w || t3)._v = e25, t3._s = 2, t3._a || (t3._a = t3._c.slice()), eo(t3, true));
};
var ao = function e5(t3) {
  var r2, n2 = this;
  if (!n2._d) {
    n2._d = true, n2 = n2._w || n2;
    try {
      if (n2 === t3) throw $a("Promise can't be resolved itself");
      (r2 = Za(t3)) ? Wa(function() {
        var i2 = { _w: n2, _d: false };
        try {
          r2.call(t3, J(e5, i2, 1), J(io, i2, 1));
        } catch (e25) {
          io.call(i2, e25);
        }
      }) : (n2._v = t3, n2._s = 1, eo(n2, false));
    } catch (e25) {
      io.call({ _w: n2, _d: false }, e25);
    }
  }
};
Ya || (Ka = function(e25) {
  da(this, Ka, "Promise", "_h"), K(e25), Ia.call(this);
  try {
    e25(J(ao, this, 1), J(io, this, 1));
  } catch (e26) {
    io.call(this, e26);
  }
}, (Ia = function(e25) {
  this._c = [], this._a = void 0, this._s = 0, this._d = false, this._v = void 0, this._h = 0, this._n = false;
}).prototype = Ua(Ka.prototype, { then: function(e25, t3) {
  var r2 = Xa(sa(this, Ka));
  return r2.ok = "function" != typeof e25 || e25, r2.fail = "function" == typeof t3 && t3, r2.domain = Ja ? Ga.domain : void 0, this._c.push(r2), this._a && this._a.push(r2), this._s && eo(this, false), r2.promise;
}, catch: function(e25) {
  return this.then(void 0, e25);
} }), Oa = function() {
  var e25 = new Ia();
  this.promise = e25, this.resolve = J(ao, e25, 1), this.reject = J(io, e25, 1);
}, Na.f = Xa = function(e25) {
  return e25 === Ka || e25 === La ? new Oa(e25) : Ba(e25);
}), X(X.G + X.W + X.F * !Ya, { Promise: Ka }), re(Ka, "Promise"), ki("Promise"), La = T.Promise, X(X.S + X.F * !Ya, "Promise", { reject: function(e25) {
  var t3 = Xa(this);
  return (0, t3.reject)(e25), t3.promise;
} }), X(X.S + X.F * !Ya, "Promise", { resolve: function(e25) {
  return Va(this, e25);
} }), X(X.S + X.F * !(Ya && Hn(function(e25) {
  Ka.all(e25).catch(Qa);
})), "Promise", { all: function(e25) {
  var t3 = this, r2 = Xa(t3), n2 = r2.resolve, i2 = r2.reject, a2 = ja(function() {
    var r3 = [], a3 = 0, o2 = 1;
    ma(e25, false, function(e26) {
      var s2 = a3++, u2 = false;
      r3.push(void 0), o2++, t3.resolve(e26).then(function(e27) {
        u2 || (u2 = true, r3[s2] = e27, --o2 || n2(r3));
      }, i2);
    }), --o2 || n2(r3);
  });
  return a2.e && i2(a2.v), r2.promise;
}, race: function(e25) {
  var t3 = this, r2 = Xa(t3), n2 = r2.reject, i2 = ja(function() {
    ma(e25, false, function(e26) {
      t3.resolve(e26).then(r2.resolve, n2);
    });
  });
  return i2.e && n2(i2.v), r2.promise;
} });
var oo = function(e25, t3) {
  if (!P(e25) || e25._t !== t3) throw TypeError("Incompatible receiver, " + t3 + " required!");
  return e25;
};
var so = M.f;
var uo = Y.fastKey;
var co = _ ? "_s" : "size";
var lo = function(e25, t3) {
  var r2, n2 = uo(t3);
  if ("F" !== n2) return e25._i[n2];
  for (r2 = e25._f; r2; r2 = r2.n) if (r2.k == t3) return r2;
};
var po = { getConstructor: function(e25, t3, r2, n2) {
  var i2 = e25(function(e26, a2) {
    da(e26, i2, t3, "_i"), e26._t = t3, e26._i = je(null), e26._f = void 0, e26._l = void 0, e26[co] = 0, null != a2 && ma(a2, r2, e26[n2], e26);
  });
  return Ua(i2.prototype, { clear: function() {
    for (var e26 = oo(this, t3), r3 = e26._i, n3 = e26._f; n3; n3 = n3.n) n3.r = true, n3.p && (n3.p = n3.p.n = void 0), delete r3[n3.i];
    e26._f = e26._l = void 0, e26[co] = 0;
  }, delete: function(e26) {
    var r3 = oo(this, t3), n3 = lo(r3, e26);
    if (n3) {
      var i3 = n3.n, a2 = n3.p;
      delete r3._i[n3.i], n3.r = true, a2 && (a2.n = i3), i3 && (i3.p = a2), r3._f == n3 && (r3._f = i3), r3._l == n3 && (r3._l = a2), r3[co]--;
    }
    return !!n3;
  }, forEach: function(e26) {
    oo(this, t3);
    for (var r3, n3 = J(e26, arguments.length > 1 ? arguments[1] : void 0, 3); r3 = r3 ? r3.n : this._f; ) for (n3(r3.v, r3.k, this); r3 && r3.r; ) r3 = r3.p;
  }, has: function(e26) {
    return !!lo(oo(this, t3), e26);
  } }), _ && so(i2.prototype, "size", { get: function() {
    return oo(this, t3)[co];
  } }), i2;
}, def: function(e25, t3, r2) {
  var n2, i2, a2 = lo(e25, t3);
  return a2 ? a2.v = r2 : (e25._l = a2 = { i: i2 = uo(t3, true), k: t3, v: r2, p: n2 = e25._l, n: void 0, r: false }, e25._f || (e25._f = a2), n2 && (n2.n = a2), e25[co]++, "F" !== i2 && (e25._i[i2] = a2)), e25;
}, getEntry: lo, setStrong: function(e25, t3, r2) {
  mn(e25, t3, function(e26, r3) {
    this._t = oo(e26, t3), this._k = r3, this._l = void 0;
  }, function() {
    for (var e26 = this._k, t4 = this._l; t4 && t4.r; ) t4 = t4.p;
    return this._t && (this._l = t4 = t4 ? t4.n : this._t._f) ? Di(0, "keys" == e26 ? t4.k : "values" == e26 ? t4.v : [t4.k, t4.v]) : (this._t = void 0, Di(1));
  }, r2 ? "entries" : "values", !r2, true), ki(t3);
} };
var fo = function(e25, t3, r2, n2, i2, a2) {
  var o2 = D[e25], s2 = o2, u2 = i2 ? "set" : "add", c2 = s2 && s2.prototype, l2 = {}, p2 = function(e26) {
    var t4 = c2[e26];
    H(c2, e26, "delete" == e26 ? function(e27) {
      return !(a2 && !P(e27)) && t4.call(this, 0 === e27 ? 0 : e27);
    } : "has" == e26 ? function(e27) {
      return !(a2 && !P(e27)) && t4.call(this, 0 === e27 ? 0 : e27);
    } : "get" == e26 ? function(e27) {
      return a2 && !P(e27) ? void 0 : t4.call(this, 0 === e27 ? 0 : e27);
    } : "add" == e26 ? function(e27) {
      return t4.call(this, 0 === e27 ? 0 : e27), this;
    } : function(e27, r3) {
      return t4.call(this, 0 === e27 ? 0 : e27, r3), this;
    });
  };
  if ("function" == typeof s2 && (a2 || c2.forEach && !w(function() {
    new s2().entries().next();
  }))) {
    var f2 = new s2(), h2 = f2[u2](a2 ? {} : -0, 1) != f2, d2 = w(function() {
      f2.has(1);
    }), m2 = Hn(function(e26) {
      new s2(e26);
    }), g2 = !a2 && w(function() {
      for (var e26 = new s2(), t4 = 5; t4--; ) e26[u2](t4, t4);
      return !e26.has(-0);
    });
    m2 || ((s2 = t3(function(t4, r3) {
      da(t4, s2, e25);
      var n3 = pr(new o2(), t4, s2);
      return null != r3 && ma(r3, i2, n3[u2], n3), n3;
    })).prototype = c2, c2.constructor = s2), (d2 || g2) && (p2("delete"), p2("has"), i2 && p2("get")), (g2 || h2) && p2(u2), a2 && c2.clear && delete c2.clear;
  } else s2 = n2.getConstructor(t3, e25, i2, u2), Ua(s2.prototype, r2), Y.NEED = true;
  return re(s2, e25), l2[e25] = s2, X(X.G + X.W + X.F * (s2 != o2), l2), a2 || n2.setStrong(s2, e25, i2), s2;
};
var ho = (fo("Map", function(e25) {
  return function() {
    return e25(this, arguments.length > 0 ? arguments[0] : void 0);
  };
}, { get: function(e25) {
  var t3 = po.getEntry(oo(this, "Map"), e25);
  return t3 && t3.v;
}, set: function(e25, t3) {
  return po.def(oo(this, "Map"), 0 === e25 ? 0 : e25, t3);
} }, po, true), fo("Set", function(e25) {
  return function() {
    return e25(this, arguments.length > 0 ? arguments[0] : void 0);
  };
}, { add: function(e25) {
  return po.def(oo(this, "Set"), e25 = 0 === e25 ? 0 : e25, e25);
} }, po), Y.getWeak);
var mo = ti(5);
var go = ti(6);
var yo = 0;
var vo = function(e25) {
  return e25._l || (e25._l = new xo());
};
var xo = function() {
  this.a = [];
};
var bo = function(e25, t3) {
  return mo(e25.a, function(e26) {
    return e26[0] === t3;
  });
};
xo.prototype = { get: function(e25) {
  var t3 = bo(this, e25);
  if (t3) return t3[1];
}, has: function(e25) {
  return !!bo(this, e25);
}, set: function(e25, t3) {
  var r2 = bo(this, e25);
  r2 ? r2[1] = t3 : this.a.push([e25, t3]);
}, delete: function(e25) {
  var t3 = go(this.a, function(t4) {
    return t4[0] === e25;
  });
  return ~t3 && this.a.splice(t3, 1), !!~t3;
} };
var Eo = { getConstructor: function(e25, t3, r2, n2) {
  var i2 = e25(function(e26, a2) {
    da(e26, i2, t3, "_i"), e26._t = t3, e26._i = yo++, e26._l = void 0, null != a2 && ma(a2, r2, e26[n2], e26);
  });
  return Ua(i2.prototype, { delete: function(e26) {
    if (!P(e26)) return false;
    var r3 = ho(e26);
    return true === r3 ? vo(oo(this, t3)).delete(e26) : r3 && A(r3, this._i) && delete r3[this._i];
  }, has: function(e26) {
    if (!P(e26)) return false;
    var r3 = ho(e26);
    return true === r3 ? vo(oo(this, t3)).has(e26) : r3 && A(r3, this._i);
  } }), i2;
}, def: function(e25, t3, r2) {
  var n2 = ho(I(t3), true);
  return true === n2 ? vo(e25).set(t3, r2) : n2[e25._i] = r2, e25;
}, ufstore: vo };
r(function(e25) {
  var t3, r2 = ti(0), n2 = oo, i2 = !D.ActiveXObject && "ActiveXObject" in D, a2 = Y.getWeak, o2 = Object.isExtensible, s2 = Eo.ufstore, u2 = function(e26) {
    return function() {
      return e26(this, arguments.length > 0 ? arguments[0] : void 0);
    };
  }, c2 = { get: function(e26) {
    if (P(e26)) {
      var t4 = a2(e26);
      return true === t4 ? s2(oo(this, "WeakMap")).get(e26) : t4 ? t4[this._i] : void 0;
    }
  }, set: function(e26, t4) {
    return Eo.def(oo(this, "WeakMap"), e26, t4);
  } }, l2 = e25.exports = fo("WeakMap", u2, c2, Eo, true, true);
  n2 && i2 && (t3 = Eo.getConstructor(u2, "WeakMap"), It(t3.prototype, c2), Y.NEED = true, r2(["delete", "has", "get", "set"], function(e26) {
    var r3 = l2.prototype, n3 = r3[e26];
    H(r3, e26, function(r4, i3) {
      if (P(r4) && !o2(r4)) {
        this._f || (this._f = new t3());
        var a3 = this._f[e26](r4, i3);
        return "set" == e26 ? this : a3;
      }
      return n3.call(this, r4, i3);
    });
  }));
});
fo("WeakSet", function(e25) {
  return function() {
    return e25(this, arguments.length > 0 ? arguments[0] : void 0);
  };
}, { add: function(e25) {
  return Eo.def(oo(this, "WeakSet"), e25, true);
} }, Eo, false, true);
for (So = $("typed_array"), ko = $("view"), Do = !(!D.ArrayBuffer || !D.DataView), Fo = Do, Ao = 0, wo = "Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(","); Ao < 9; ) (Co = D[wo[Ao++]]) ? (U(Co.prototype, So, true), U(Co.prototype, ko, true)) : Fo = false;
var Co;
var So;
var ko;
var Do;
var Fo;
var Ao;
var wo;
var _o = { ABV: Do, CONSTR: Fo, TYPED: So, VIEW: ko };
var To = function(e25) {
  if (void 0 === e25) return 0;
  var t3 = he(e25), r2 = me(t3);
  if (t3 !== r2) throw RangeError("Wrong length!");
  return r2;
};
var Po = r(function(e25, t3) {
  var r2 = Me.f, n2 = M.f, i2 = "prototype", a2 = "Wrong index!", o2 = D.ArrayBuffer, s2 = D.DataView, u2 = D.Math, c2 = D.RangeError, l2 = D.Infinity, p2 = o2, f2 = u2.abs, h2 = u2.pow, d2 = u2.floor, m2 = u2.log, g2 = u2.LN2, y2 = _ ? "_b" : "buffer", v2 = _ ? "_l" : "byteLength", x2 = _ ? "_o" : "byteOffset";
  function b2(e26, t4, r3) {
    var n3, i3, a3, o3 = new Array(r3), s3 = 8 * r3 - t4 - 1, u3 = (1 << s3) - 1, c3 = u3 >> 1, p3 = 23 === t4 ? h2(2, -24) - h2(2, -77) : 0, y3 = 0, v3 = e26 < 0 || 0 === e26 && 1 / e26 < 0 ? 1 : 0;
    for ((e26 = f2(e26)) != e26 || e26 === l2 ? (i3 = e26 != e26 ? 1 : 0, n3 = u3) : (n3 = d2(m2(e26) / g2), e26 * (a3 = h2(2, -n3)) < 1 && (n3--, a3 *= 2), (e26 += n3 + c3 >= 1 ? p3 / a3 : p3 * h2(2, 1 - c3)) * a3 >= 2 && (n3++, a3 /= 2), n3 + c3 >= u3 ? (i3 = 0, n3 = u3) : n3 + c3 >= 1 ? (i3 = (e26 * a3 - 1) * h2(2, t4), n3 += c3) : (i3 = e26 * h2(2, c3 - 1) * h2(2, t4), n3 = 0)); t4 >= 8; o3[y3++] = 255 & i3, i3 /= 256, t4 -= 8) ;
    for (n3 = n3 << t4 | i3, s3 += t4; s3 > 0; o3[y3++] = 255 & n3, n3 /= 256, s3 -= 8) ;
    return o3[--y3] |= 128 * v3, o3;
  }
  function E2(e26, t4, r3) {
    var n3, i3 = 8 * r3 - t4 - 1, a3 = (1 << i3) - 1, o3 = a3 >> 1, s3 = i3 - 7, u3 = r3 - 1, c3 = e26[u3--], p3 = 127 & c3;
    for (c3 >>= 7; s3 > 0; p3 = 256 * p3 + e26[u3], u3--, s3 -= 8) ;
    for (n3 = p3 & (1 << -s3) - 1, p3 >>= -s3, s3 += t4; s3 > 0; n3 = 256 * n3 + e26[u3], u3--, s3 -= 8) ;
    if (0 === p3) p3 = 1 - o3;
    else {
      if (p3 === a3) return n3 ? NaN : c3 ? -l2 : l2;
      n3 += h2(2, t4), p3 -= o3;
    }
    return (c3 ? -1 : 1) * n3 * h2(2, p3 - t4);
  }
  function C3(e26) {
    return e26[3] << 24 | e26[2] << 16 | e26[1] << 8 | e26[0];
  }
  function S3(e26) {
    return [255 & e26];
  }
  function k2(e26) {
    return [255 & e26, e26 >> 8 & 255];
  }
  function F2(e26) {
    return [255 & e26, e26 >> 8 & 255, e26 >> 16 & 255, e26 >> 24 & 255];
  }
  function A2(e26) {
    return b2(e26, 52, 8);
  }
  function T2(e26) {
    return b2(e26, 23, 4);
  }
  function P2(e26, t4, r3) {
    n2(e26[i2], t4, { get: function() {
      return this[r3];
    } });
  }
  function I2(e26, t4, r3, n3) {
    var i3 = To(+r3);
    if (i3 + t4 > e26[v2]) throw c2(a2);
    var o3 = e26[y2]._b, s3 = i3 + e26[x2], u3 = o3.slice(s3, s3 + t4);
    return n3 ? u3 : u3.reverse();
  }
  function B2(e26, t4, r3, n3, i3, o3) {
    var s3 = To(+r3);
    if (s3 + t4 > e26[v2]) throw c2(a2);
    for (var u3 = e26[y2]._b, l3 = s3 + e26[x2], p3 = n3(+i3), f3 = 0; f3 < t4; f3++) u3[l3 + f3] = p3[o3 ? f3 : t4 - f3 - 1];
  }
  if (_o.ABV) {
    if (!w(function() {
      o2(1);
    }) || !w(function() {
      new o2(-1);
    }) || w(function() {
      return new o2(), new o2(1.5), new o2(NaN), "ArrayBuffer" != o2.name;
    })) {
      for (var O2, L2 = (o2 = function(e26) {
        return da(this, o2), new p2(To(e26));
      })[i2] = p2[i2], N2 = r2(p2), j2 = 0; N2.length > j2; ) (O2 = N2[j2++]) in o2 || U(o2, O2, p2[O2]);
      L2.constructor = o2;
    }
    var R2 = new s2(new o2(2)), V2 = s2[i2].setInt8;
    R2.setInt8(0, 2147483648), R2.setInt8(1, 2147483649), !R2.getInt8(0) && R2.getInt8(1) || Ua(s2[i2], { setInt8: function(e26, t4) {
      V2.call(this, e26, t4 << 24 >> 24);
    }, setUint8: function(e26, t4) {
      V2.call(this, e26, t4 << 24 >> 24);
    } }, true);
  } else o2 = function(e26) {
    da(this, o2, "ArrayBuffer");
    var t4 = To(e26);
    this._b = vi.call(new Array(t4), 0), this[v2] = t4;
  }, s2 = function(e26, t4, r3) {
    da(this, s2, "DataView"), da(e26, o2, "DataView");
    var n3 = e26[v2], i3 = he(t4);
    if (i3 < 0 || i3 > n3) throw c2("Wrong offset!");
    if (i3 + (r3 = void 0 === r3 ? n3 - i3 : me(r3)) > n3) throw c2("Wrong length!");
    this[y2] = e26, this[x2] = i3, this[v2] = r3;
  }, _ && (P2(o2, "byteLength", "_l"), P2(s2, "buffer", "_b"), P2(s2, "byteLength", "_l"), P2(s2, "byteOffset", "_o")), Ua(s2[i2], { getInt8: function(e26) {
    return I2(this, 1, e26)[0] << 24 >> 24;
  }, getUint8: function(e26) {
    return I2(this, 1, e26)[0];
  }, getInt16: function(e26) {
    var t4 = I2(this, 2, e26, arguments[1]);
    return (t4[1] << 8 | t4[0]) << 16 >> 16;
  }, getUint16: function(e26) {
    var t4 = I2(this, 2, e26, arguments[1]);
    return t4[1] << 8 | t4[0];
  }, getInt32: function(e26) {
    return C3(I2(this, 4, e26, arguments[1]));
  }, getUint32: function(e26) {
    return C3(I2(this, 4, e26, arguments[1])) >>> 0;
  }, getFloat32: function(e26) {
    return E2(I2(this, 4, e26, arguments[1]), 23, 4);
  }, getFloat64: function(e26) {
    return E2(I2(this, 8, e26, arguments[1]), 52, 8);
  }, setInt8: function(e26, t4) {
    B2(this, 1, e26, S3, t4);
  }, setUint8: function(e26, t4) {
    B2(this, 1, e26, S3, t4);
  }, setInt16: function(e26, t4) {
    B2(this, 2, e26, k2, t4, arguments[2]);
  }, setUint16: function(e26, t4) {
    B2(this, 2, e26, k2, t4, arguments[2]);
  }, setInt32: function(e26, t4) {
    B2(this, 4, e26, F2, t4, arguments[2]);
  }, setUint32: function(e26, t4) {
    B2(this, 4, e26, F2, t4, arguments[2]);
  }, setFloat32: function(e26, t4) {
    B2(this, 4, e26, T2, t4, arguments[2]);
  }, setFloat64: function(e26, t4) {
    B2(this, 8, e26, A2, t4, arguments[2]);
  } });
  re(o2, "ArrayBuffer"), re(s2, "DataView"), U(s2[i2], _o.VIEW, true), t3.ArrayBuffer = o2, t3.DataView = s2;
});
var Io = D.ArrayBuffer;
var Bo = Po.ArrayBuffer;
var Oo = Po.DataView;
var Lo = _o.ABV && Io.isView;
var No = Bo.prototype.slice;
var jo = _o.VIEW;
X(X.G + X.W + X.F * (Io !== Bo), { ArrayBuffer: Bo }), X(X.S + X.F * !_o.CONSTR, "ArrayBuffer", { isView: function(e25) {
  return Lo && Lo(e25) || P(e25) && jo in e25;
} }), X(X.P + X.U + X.F * w(function() {
  return !new Bo(2).slice(1, void 0).byteLength;
}), "ArrayBuffer", { slice: function(e25, t3) {
  if (void 0 !== No && void 0 === t3) return No.call(I(this), e25);
  for (var r2 = I(this).byteLength, n2 = ve(e25, r2), i2 = ve(void 0 === t3 ? r2 : t3, r2), a2 = new (sa(this, Bo))(me(i2 - n2)), o2 = new Oo(this), s2 = new Oo(a2), u2 = 0; n2 < i2; ) s2.setUint8(u2++, o2.getUint8(n2++));
  return a2;
} }), ki("ArrayBuffer"), X(X.G + X.W + X.F * !_o.ABV, { DataView: Po.DataView });
var Ro = r(function(e25) {
  if (_) {
    var t3 = D, r2 = w, n2 = X, a2 = _o, o2 = Po, s2 = J, u2 = da, c2 = V, l2 = U, p2 = Ua, f2 = he, h2 = me, d2 = To, m2 = ve, g2 = j, y2 = A, v2 = Rt, x2 = P, b2 = Te, E2 = Vn, C3 = je, S3 = At, k2 = Me.f, F2 = Wn, T2 = $, I2 = Z, B2 = ti, O2 = xe, L2 = sa, N2 = Fi, R2 = cn, q2 = Hn, W2 = ki, G2 = vi, z2 = di, H2 = M, K2 = Ge, Q2 = H2.f, Y2 = K2.f, ee2 = t3.RangeError, te2 = t3.TypeError, re2 = t3.Uint8Array, ne2 = Array.prototype, ie4 = o2.ArrayBuffer, ae2 = o2.DataView, oe2 = B2(0), se2 = B2(2), ue2 = B2(3), ce2 = B2(4), le2 = B2(5), pe2 = B2(6), fe2 = O2(true), de2 = O2(false), ge2 = N2.values, ye2 = N2.keys, be2 = N2.entries, Ee2 = ne2.lastIndexOf, Ce2 = ne2.reduce, Se2 = ne2.reduceRight, ke2 = ne2.join, De2 = ne2.sort, Fe2 = ne2.slice, Ae2 = ne2.toString, we2 = ne2.toLocaleString, _e2 = I2("iterator"), Pe2 = I2("toStringTag"), Ie2 = T2("typed_constructor"), Be2 = T2("def_constructor"), Oe2 = a2.CONSTR, Le2 = a2.TYPED, Ne2 = a2.VIEW, Re2 = B2(1, function(e26, t4) {
      return $e2(L2(e26, e26[Be2]), t4);
    }), Ve2 = r2(function() {
      return 1 === new re2(new Uint16Array([1]).buffer)[0];
    }), Ue2 = !!re2 && !!re2.prototype.set && r2(function() {
      new re2(1).set({});
    }), qe2 = function(e26, t4) {
      var r3 = f2(e26);
      if (r3 < 0 || r3 % t4) throw ee2("Wrong offset!");
      return r3;
    }, We2 = function(e26) {
      if (x2(e26) && Le2 in e26) return e26;
      throw te2(e26 + " is not a typed array!");
    }, $e2 = function(e26, t4) {
      if (!(x2(e26) && Ie2 in e26)) throw te2("It is not a typed array constructor!");
      return new e26(t4);
    }, ze2 = function(e26, t4) {
      return He2(L2(e26, e26[Be2]), t4);
    }, He2 = function(e26, t4) {
      for (var r3 = 0, n3 = t4.length, i2 = $e2(e26, n3); n3 > r3; ) i2[r3] = t4[r3++];
      return i2;
    }, Ke2 = function(e26, t4, r3) {
      Q2(e26, t4, { get: function() {
        return this._d[r3];
      } });
    }, Je2 = function(e26) {
      var t4, r3, n3, i2, a3, o3, u3 = b2(e26), c3 = arguments.length, l3 = c3 > 1 ? arguments[1] : void 0, p3 = void 0 !== l3, f3 = F2(u3);
      if (null != f3 && !E2(f3)) {
        for (o3 = f3.call(u3), n3 = [], t4 = 0; !(a3 = o3.next()).done; t4++) n3.push(a3.value);
        u3 = n3;
      }
      for (p3 && c3 > 2 && (l3 = s2(l3, arguments[2], 2)), t4 = 0, r3 = h2(u3.length), i2 = $e2(this, r3); r3 > t4; t4++) i2[t4] = p3 ? l3(u3[t4], t4) : u3[t4];
      return i2;
    }, Qe2 = function() {
      for (var e26 = 0, t4 = arguments.length, r3 = $e2(this, t4); t4 > e26; ) r3[e26] = arguments[e26++];
      return r3;
    }, Xe2 = !!re2 && r2(function() {
      we2.call(new re2(1));
    }), Ye2 = function() {
      return we2.apply(Xe2 ? Fe2.call(We2(this)) : We2(this), arguments);
    }, Ze2 = { copyWithin: function(e26, t4) {
      return z2.call(We2(this), e26, t4, arguments.length > 2 ? arguments[2] : void 0);
    }, every: function(e26) {
      return ce2(We2(this), e26, arguments.length > 1 ? arguments[1] : void 0);
    }, fill: function(e26) {
      return G2.apply(We2(this), arguments);
    }, filter: function(e26) {
      return ze2(this, se2(We2(this), e26, arguments.length > 1 ? arguments[1] : void 0));
    }, find: function(e26) {
      return le2(We2(this), e26, arguments.length > 1 ? arguments[1] : void 0);
    }, findIndex: function(e26) {
      return pe2(We2(this), e26, arguments.length > 1 ? arguments[1] : void 0);
    }, forEach: function(e26) {
      oe2(We2(this), e26, arguments.length > 1 ? arguments[1] : void 0);
    }, indexOf: function(e26) {
      return de2(We2(this), e26, arguments.length > 1 ? arguments[1] : void 0);
    }, includes: function(e26) {
      return fe2(We2(this), e26, arguments.length > 1 ? arguments[1] : void 0);
    }, join: function(e26) {
      return ke2.apply(We2(this), arguments);
    }, lastIndexOf: function(e26) {
      return Ee2.apply(We2(this), arguments);
    }, map: function(e26) {
      return Re2(We2(this), e26, arguments.length > 1 ? arguments[1] : void 0);
    }, reduce: function(e26) {
      return Ce2.apply(We2(this), arguments);
    }, reduceRight: function(e26) {
      return Se2.apply(We2(this), arguments);
    }, reverse: function() {
      for (var e26, t4 = We2(this).length, r3 = Math.floor(t4 / 2), n3 = 0; n3 < r3; ) e26 = this[n3], this[n3++] = this[--t4], this[t4] = e26;
      return this;
    }, some: function(e26) {
      return ue2(We2(this), e26, arguments.length > 1 ? arguments[1] : void 0);
    }, sort: function(e26) {
      return De2.call(We2(this), e26);
    }, subarray: function(e26, t4) {
      var r3 = We2(this), n3 = r3.length, i2 = m2(e26, n3);
      return new (L2(r3, r3[Be2]))(r3.buffer, r3.byteOffset + i2 * r3.BYTES_PER_ELEMENT, h2((void 0 === t4 ? n3 : m2(t4, n3)) - i2));
    } }, et2 = function(e26, t4) {
      return ze2(this, Fe2.call(We2(this), e26, t4));
    }, tt2 = function(e26) {
      We2(this);
      var t4 = qe2(arguments[1], 1), r3 = this.length, n3 = b2(e26), i2 = h2(n3.length), a3 = 0;
      if (i2 + t4 > r3) throw ee2("Wrong length!");
      for (; a3 < i2; ) this[t4 + a3] = n3[a3++];
    }, rt2 = { entries: function() {
      return be2.call(We2(this));
    }, keys: function() {
      return ye2.call(We2(this));
    }, values: function() {
      return ge2.call(We2(this));
    } }, nt2 = function(e26, t4) {
      return x2(e26) && e26[Le2] && "symbol" != i(t4) && t4 in e26 && String(+t4) == String(t4);
    }, it2 = function(e26, t4) {
      return nt2(e26, t4 = g2(t4, true)) ? c2(2, e26[t4]) : Y2(e26, t4);
    }, at2 = function(e26, t4, r3) {
      return !(nt2(e26, t4 = g2(t4, true)) && x2(r3) && y2(r3, "value")) || y2(r3, "get") || y2(r3, "set") || r3.configurable || y2(r3, "writable") && !r3.writable || y2(r3, "enumerable") && !r3.enumerable ? Q2(e26, t4, r3) : (e26[t4] = r3.value, e26);
    };
    Oe2 || (K2.f = it2, H2.f = at2), n2(n2.S + n2.F * !Oe2, "Object", { getOwnPropertyDescriptor: it2, defineProperty: at2 }), r2(function() {
      Ae2.call({});
    }) && (Ae2 = we2 = function() {
      return ke2.call(this);
    });
    var ot2 = p2({}, Ze2);
    p2(ot2, rt2), l2(ot2, _e2, rt2.values), p2(ot2, { slice: et2, set: tt2, constructor: function() {
    }, toString: Ae2, toLocaleString: Ye2 }), Ke2(ot2, "buffer", "b"), Ke2(ot2, "byteOffset", "o"), Ke2(ot2, "byteLength", "l"), Ke2(ot2, "length", "e"), Q2(ot2, Pe2, { get: function() {
      return this[Le2];
    } }), e25.exports = function(e26, i2, o3, s3) {
      var c3 = e26 + ((s3 = !!s3) ? "Clamped" : "") + "Array", p3 = "get" + e26, f3 = "set" + e26, m3 = t3[c3], g3 = m3 || {}, y3 = m3 && S3(m3), b3 = !m3 || !a2.ABV, E3 = {}, D2 = m3 && m3.prototype, F3 = function(e27, t4) {
        Q2(e27, t4, { get: function() {
          return function(e28, t5) {
            var r3 = e28._d;
            return r3.v[p3](t5 * i2 + r3.o, Ve2);
          }(this, t4);
        }, set: function(e28) {
          return function(e29, t5, r3) {
            var n3 = e29._d;
            s3 && (r3 = (r3 = Math.round(r3)) < 0 ? 0 : r3 > 255 ? 255 : 255 & r3), n3.v[f3](t5 * i2 + n3.o, r3, Ve2);
          }(this, t4, e28);
        }, enumerable: true });
      };
      b3 ? (m3 = o3(function(e27, t4, r3, n3) {
        u2(e27, m3, c3, "_d");
        var a3, o4, s4, p4, f4 = 0, g4 = 0;
        if (x2(t4)) {
          if (!(t4 instanceof ie4 || "ArrayBuffer" == (p4 = v2(t4)) || "SharedArrayBuffer" == p4)) return Le2 in t4 ? He2(m3, t4) : Je2.call(m3, t4);
          a3 = t4, g4 = qe2(r3, i2);
          var y4 = t4.byteLength;
          if (void 0 === n3) {
            if (y4 % i2) throw ee2("Wrong length!");
            if ((o4 = y4 - g4) < 0) throw ee2("Wrong length!");
          } else if ((o4 = h2(n3) * i2) + g4 > y4) throw ee2("Wrong length!");
          s4 = o4 / i2;
        } else s4 = d2(t4), a3 = new ie4(o4 = s4 * i2);
        for (l2(e27, "_d", { b: a3, o: g4, l: o4, e: s4, v: new ae2(a3) }); f4 < s4; ) F3(e27, f4++);
      }), D2 = m3.prototype = C3(ot2), l2(D2, "constructor", m3)) : r2(function() {
        m3(1);
      }) && r2(function() {
        new m3(-1);
      }) && q2(function(e27) {
        new m3(), new m3(null), new m3(1.5), new m3(e27);
      }, true) || (m3 = o3(function(e27, t4, r3, n3) {
        var a3;
        return u2(e27, m3, c3), x2(t4) ? t4 instanceof ie4 || "ArrayBuffer" == (a3 = v2(t4)) || "SharedArrayBuffer" == a3 ? void 0 !== n3 ? new g3(t4, qe2(r3, i2), n3) : void 0 !== r3 ? new g3(t4, qe2(r3, i2)) : new g3(t4) : Le2 in t4 ? He2(m3, t4) : Je2.call(m3, t4) : new g3(d2(t4));
      }), oe2(y3 !== Function.prototype ? k2(g3).concat(k2(y3)) : k2(g3), function(e27) {
        e27 in m3 || l2(m3, e27, g3[e27]);
      }), m3.prototype = D2, D2.constructor = m3);
      var A2 = D2[_e2], w2 = !!A2 && ("values" == A2.name || null == A2.name), _2 = rt2.values;
      l2(m3, Ie2, true), l2(D2, Le2, c3), l2(D2, Ne2, true), l2(D2, Be2, m3), (s3 ? new m3(1)[Pe2] == c3 : Pe2 in D2) || Q2(D2, Pe2, { get: function() {
        return c3;
      } }), E3[c3] = m3, n2(n2.G + n2.W + n2.F * (m3 != g3), E3), n2(n2.S, c3, { BYTES_PER_ELEMENT: i2 }), n2(n2.S + n2.F * r2(function() {
        g3.of.call(m3, 1);
      }), c3, { from: Je2, of: Qe2 }), "BYTES_PER_ELEMENT" in D2 || l2(D2, "BYTES_PER_ELEMENT", i2), n2(n2.P, c3, Ze2), W2(c3), n2(n2.P + n2.F * Ue2, c3, { set: tt2 }), n2(n2.P + n2.F * !w2, c3, rt2), D2.toString != Ae2 && (D2.toString = Ae2), n2(n2.P + n2.F * r2(function() {
        new m3(1).slice();
      }), c3, { slice: et2 }), n2(n2.P + n2.F * (r2(function() {
        return [1, 2].toLocaleString() != new m3([1, 2]).toLocaleString();
      }) || !r2(function() {
        D2.toLocaleString.call([1, 2]);
      })), c3, { toLocaleString: Ye2 }), R2[c3] = w2 ? A2 : _2, w2 || l2(D2, _e2, _2);
    };
  } else e25.exports = function() {
  };
});
Ro("Int8", 1, function(e25) {
  return function(t3, r2, n2) {
    return e25(this, t3, r2, n2);
  };
}), Ro("Uint8", 1, function(e25) {
  return function(t3, r2, n2) {
    return e25(this, t3, r2, n2);
  };
}), Ro("Uint8", 1, function(e25) {
  return function(t3, r2, n2) {
    return e25(this, t3, r2, n2);
  };
}, true), Ro("Int16", 2, function(e25) {
  return function(t3, r2, n2) {
    return e25(this, t3, r2, n2);
  };
}), Ro("Uint16", 2, function(e25) {
  return function(t3, r2, n2) {
    return e25(this, t3, r2, n2);
  };
}), Ro("Int32", 4, function(e25) {
  return function(t3, r2, n2) {
    return e25(this, t3, r2, n2);
  };
}), Ro("Uint32", 4, function(e25) {
  return function(t3, r2, n2) {
    return e25(this, t3, r2, n2);
  };
}), Ro("Float32", 4, function(e25) {
  return function(t3, r2, n2) {
    return e25(this, t3, r2, n2);
  };
}), Ro("Float64", 8, function(e25) {
  return function(t3, r2, n2) {
    return e25(this, t3, r2, n2);
  };
});
var Mo = (D.Reflect || {}).apply;
var Vo = Function.apply;
X(X.S + X.F * !w(function() {
  Mo(function() {
  });
}), "Reflect", { apply: function(e25, t3, r2) {
  var n2 = K(e25), i2 = I(r2);
  return Mo ? Mo(n2, t3, i2) : Vo.call(n2, t3, i2);
} });
var Uo = (D.Reflect || {}).construct;
var qo = w(function() {
  function e25() {
  }
  return !(Uo(function() {
  }, [], e25) instanceof e25);
});
var Wo = !w(function() {
  Uo(function() {
  });
});
X(X.S + X.F * (qo || Wo), "Reflect", { construct: function(e25, t3) {
  K(e25), I(t3);
  var r2 = arguments.length < 3 ? e25 : K(arguments[2]);
  if (Wo && !qo) return Uo(e25, t3, r2);
  if (e25 == r2) {
    switch (t3.length) {
      case 0:
        return new e25();
      case 1:
        return new e25(t3[0]);
      case 2:
        return new e25(t3[0], t3[1]);
      case 3:
        return new e25(t3[0], t3[1], t3[2]);
      case 4:
        return new e25(t3[0], t3[1], t3[2], t3[3]);
    }
    var n2 = [null];
    return n2.push.apply(n2, t3), new ($t.apply(e25, n2))();
  }
  var i2 = r2.prototype, a2 = je(P(i2) ? i2 : Object.prototype), o2 = Function.apply.call(e25, a2, t3);
  return P(o2) ? o2 : a2;
} }), X(X.S + X.F * w(function() {
  Reflect.defineProperty(M.f({}, 1, { value: 1 }), 1, { value: 2 });
}), "Reflect", { defineProperty: function(e25, t3, r2) {
  I(e25), t3 = j(t3, true), I(r2);
  try {
    return M.f(e25, t3, r2), true;
  } catch (e26) {
    return false;
  }
} });
var $o = Ge.f;
X(X.S, "Reflect", { deleteProperty: function(e25, t3) {
  var r2 = $o(I(e25), t3);
  return !(r2 && !r2.configurable) && delete e25[t3];
} });
var Go = function(e25) {
  this._t = I(e25), this._i = 0;
  var t3, r2 = this._k = [];
  for (t3 in e25) r2.push(t3);
};
pn(Go, "Object", function() {
  var e25, t3 = this._k;
  do {
    if (this._i >= t3.length) return { value: void 0, done: true };
  } while (!((e25 = t3[this._i++]) in this._t));
  return { value: e25, done: false };
}), X(X.S, "Reflect", { enumerate: function(e25) {
  return new Go(e25);
} }), X(X.S, "Reflect", { get: function e6(t3, r2) {
  var n2, i2, a2 = arguments.length < 3 ? t3 : arguments[2];
  return I(t3) === a2 ? t3[r2] : (n2 = Ge.f(t3, r2)) ? A(n2, "value") ? n2.value : void 0 !== n2.get ? n2.get.call(a2) : void 0 : P(i2 = At(t3)) ? e6(i2, r2, a2) : void 0;
} }), X(X.S, "Reflect", { getOwnPropertyDescriptor: function(e25, t3) {
  return Ge.f(I(e25), t3);
} }), X(X.S, "Reflect", { getPrototypeOf: function(e25) {
  return At(I(e25));
} }), X(X.S, "Reflect", { has: function(e25, t3) {
  return t3 in e25;
} });
var zo = Object.isExtensible;
X(X.S, "Reflect", { isExtensible: function(e25) {
  return I(e25), !zo || zo(e25);
} });
var Ho = D.Reflect;
var Ko = Ho && Ho.ownKeys || function(e25) {
  var t3 = Me.f(I(e25)), r2 = Ae.f;
  return r2 ? t3.concat(r2(e25)) : t3;
};
X(X.S, "Reflect", { ownKeys: Ko });
var Jo = Object.preventExtensions;
X(X.S, "Reflect", { preventExtensions: function(e25) {
  I(e25);
  try {
    return Jo && Jo(e25), true;
  } catch (e26) {
    return false;
  }
} }), X(X.S, "Reflect", { set: function e7(t3, r2, n2) {
  var i2, a2, o2 = arguments.length < 4 ? t3 : arguments[3], s2 = Ge.f(I(t3), r2);
  if (!s2) {
    if (P(a2 = At(t3))) return e7(a2, r2, n2, o2);
    s2 = V(0);
  }
  if (A(s2, "value")) {
    if (false === s2.writable || !P(o2)) return false;
    if (i2 = Ge.f(o2, r2)) {
      if (i2.get || i2.set || false === i2.writable) return false;
      i2.value = n2, M.f(o2, r2, i2);
    } else M.f(o2, r2, V(0, n2));
    return true;
  }
  return void 0 !== s2.set && (s2.set.call(o2, n2), true);
} }), Lt && X(X.S, "Reflect", { setPrototypeOf: function(e25, t3) {
  Lt.check(e25, t3);
  try {
    return Lt.set(e25, t3), true;
  } catch (e26) {
    return false;
  }
} });
var Qo = xe(true);
X(X.P, "Array", { includes: function(e25) {
  return Qo(this, e25, arguments.length > 1 ? arguments[1] : void 0);
} }), yi("includes");
T.Array.includes;
var Xo = Z("isConcatSpreadable");
var Yo = function e8(t3, r2, n2, i2, a2, o2, s2, u2) {
  for (var c2, l2, p2 = a2, f2 = 0, h2 = !!s2 && J(s2, u2, 3); f2 < i2; ) {
    if (f2 in n2) {
      if (c2 = h2 ? h2(n2[f2], f2, r2) : n2[f2], l2 = false, P(c2) && (l2 = void 0 !== (l2 = c2[Xo]) ? !!l2 : _e(c2)), l2 && o2 > 0) p2 = e8(t3, r2, c2, me(c2.length), p2, o2 - 1) - 1;
      else {
        if (p2 >= 9007199254740991) throw TypeError();
        t3[p2] = c2;
      }
      p2++;
    }
    f2++;
  }
  return p2;
};
X(X.P, "Array", { flatMap: function(e25) {
  var t3, r2, n2 = Te(this);
  return K(e25), t3 = me(n2.length), r2 = ei(n2, 0), Yo(r2, n2, n2, t3, 0, 1, e25, arguments[1]), r2;
} }), yi("flatMap");
T.Array.flatMap;
var Zo = function(e25, t3, r2, n2) {
  var i2 = String(ce(e25)), a2 = i2.length, o2 = void 0 === r2 ? " " : String(r2), s2 = me(t3);
  if (s2 <= a2 || "" == o2) return i2;
  var u2 = s2 - a2, c2 = Fr.call(o2, Math.ceil(u2 / o2.length));
  return c2.length > u2 && (c2 = c2.slice(0, u2)), n2 ? c2 + i2 : i2 + c2;
};
var es = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(Ma);
X(X.P + X.F * es, "String", { padStart: function(e25) {
  return Zo(this, e25, arguments.length > 1 ? arguments[1] : void 0, true);
} });
T.String.padStart;
var ts = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(Ma);
X(X.P + X.F * ts, "String", { padEnd: function(e25) {
  return Zo(this, e25, arguments.length > 1 ? arguments[1] : void 0, false);
} });
T.String.padEnd;
rr("trimLeft", function(e25) {
  return function() {
    return e25(this, 1);
  };
}, "trimStart");
T.String.trimLeft;
rr("trimRight", function(e25) {
  return function() {
    return e25(this, 2);
  };
}, "trimEnd");
T.String.trimRight;
ae("asyncIterator");
ne.f("asyncIterator");
X(X.S, "Object", { getOwnPropertyDescriptors: function(e25) {
  for (var t3, r2, n2 = le(e25), i2 = Ge.f, a2 = Ko(n2), o2 = {}, s2 = 0; a2.length > s2; ) void 0 !== (r2 = i2(n2, t3 = a2[s2++])) && Un(o2, t3, r2);
  return o2;
} });
T.Object.getOwnPropertyDescriptors;
var rs = we.f;
var ns = function(e25) {
  return function(t3) {
    for (var r2, n2 = le(t3), i2 = Fe(n2), a2 = i2.length, o2 = 0, s2 = []; a2 > o2; ) r2 = i2[o2++], _ && !rs.call(n2, r2) || s2.push(e25 ? [r2, n2[r2]] : n2[r2]);
    return s2;
  };
};
var is = ns(false);
X(X.S, "Object", { values: function(e25) {
  return is(e25);
} });
T.Object.values;
var as = ns(true);
X(X.S, "Object", { entries: function(e25) {
  return as(e25);
} });
T.Object.entries;
X(X.P + X.R, "Promise", { finally: function(e25) {
  var t3 = sa(this, T.Promise || D.Promise), r2 = "function" == typeof e25;
  return this.then(r2 ? function(r3) {
    return Va(t3, e25()).then(function() {
      return r3;
    });
  } : e25, r2 ? function(r3) {
    return Va(t3, e25()).then(function() {
      throw r3;
    });
  } : e25);
} });
T.Promise.finally;
var os = [].slice;
var ss = /MSIE .\./.test(Ma);
var us = function(e25) {
  return function(t3, r2) {
    var n2 = arguments.length > 2, i2 = !!n2 && os.call(arguments, 2);
    return e25(n2 ? function() {
      ("function" == typeof t3 ? t3 : Function(t3)).apply(this, i2);
    } : t3, r2);
  };
};
X(X.G + X.B + X.F * ss, { setTimeout: us(D.setTimeout), setInterval: us(D.setInterval) }), X(X.G + X.B, { setImmediate: Da.set, clearImmediate: Da.clear });
for (cs = Z("iterator"), ls = Z("toStringTag"), ps = cn.Array, fs = { CSSRuleList: true, CSSStyleDeclaration: false, CSSValueList: false, ClientRectList: false, DOMRectList: false, DOMStringList: false, DOMTokenList: true, DataTransferItemList: false, FileList: false, HTMLAllCollection: false, HTMLCollection: false, HTMLFormElement: false, HTMLSelectElement: false, MediaList: true, MimeTypeArray: false, NamedNodeMap: false, NodeList: true, PaintRequestList: false, Plugin: false, PluginArray: false, SVGLengthList: false, SVGNumberList: false, SVGPathSegList: false, SVGPointList: false, SVGStringList: false, SVGTransformList: false, SourceBufferList: false, StyleSheetList: true, TextTrackCueList: false, TextTrackList: false, TouchList: false }, hs = Fe(fs), ds = 0; ds < hs.length; ds++) {
  gs = hs[ds], ys = fs[gs], vs = D[gs], xs = vs && vs.prototype;
  if (xs && (xs[cs] || U(xs, cs, ps), xs[ls] || U(xs, ls, gs), cn[gs] = ps, ys)) for (ms in Fi) xs[ms] || H(xs, ms, Fi[ms], true);
}
var ms;
var gs;
var ys;
var vs;
var xs;
var cs;
var ls;
var ps;
var fs;
var hs;
var ds;
r(function(e25) {
  var t3 = function(e26) {
    var t4, r2 = Object.prototype, n2 = r2.hasOwnProperty, a2 = "function" == typeof Symbol ? Symbol : {}, o2 = a2.iterator || "@@iterator", s2 = a2.asyncIterator || "@@asyncIterator", u2 = a2.toStringTag || "@@toStringTag";
    function c2(e27, t5, r3, n3) {
      var i2 = t5 && t5.prototype instanceof g2 ? t5 : g2, a3 = Object.create(i2.prototype), o3 = new w2(n3 || []);
      return a3._invoke = /* @__PURE__ */ function(e28, t6, r4) {
        var n4 = p2;
        return function(i3, a4) {
          if (n4 === h2) throw new Error("Generator is already running");
          if (n4 === d2) {
            if ("throw" === i3) throw a4;
            return T2();
          }
          for (r4.method = i3, r4.arg = a4; ; ) {
            var o4 = r4.delegate;
            if (o4) {
              var s3 = D2(o4, r4);
              if (s3) {
                if (s3 === m2) continue;
                return s3;
              }
            }
            if ("next" === r4.method) r4.sent = r4._sent = r4.arg;
            else if ("throw" === r4.method) {
              if (n4 === p2) throw n4 = d2, r4.arg;
              r4.dispatchException(r4.arg);
            } else "return" === r4.method && r4.abrupt("return", r4.arg);
            n4 = h2;
            var u3 = l2(e28, t6, r4);
            if ("normal" === u3.type) {
              if (n4 = r4.done ? d2 : f2, u3.arg === m2) continue;
              return { value: u3.arg, done: r4.done };
            }
            "throw" === u3.type && (n4 = d2, r4.method = "throw", r4.arg = u3.arg);
          }
        };
      }(e27, r3, o3), a3;
    }
    function l2(e27, t5, r3) {
      try {
        return { type: "normal", arg: e27.call(t5, r3) };
      } catch (e28) {
        return { type: "throw", arg: e28 };
      }
    }
    e26.wrap = c2;
    var p2 = "suspendedStart", f2 = "suspendedYield", h2 = "executing", d2 = "completed", m2 = {};
    function g2() {
    }
    function y2() {
    }
    function v2() {
    }
    var x2 = {};
    x2[o2] = function() {
      return this;
    };
    var b2 = Object.getPrototypeOf, E2 = b2 && b2(b2(_2([])));
    E2 && E2 !== r2 && n2.call(E2, o2) && (x2 = E2);
    var C3 = v2.prototype = g2.prototype = Object.create(x2);
    function S3(e27) {
      ["next", "throw", "return"].forEach(function(t5) {
        e27[t5] = function(e28) {
          return this._invoke(t5, e28);
        };
      });
    }
    function k2(e27) {
      var t5;
      this._invoke = function(r3, a3) {
        function o3() {
          return new Promise(function(t6, o4) {
            !function t7(r4, a4, o5, s3) {
              var u3 = l2(e27[r4], e27, a4);
              if ("throw" !== u3.type) {
                var c3 = u3.arg, p3 = c3.value;
                return p3 && "object" === i(p3) && n2.call(p3, "__await") ? Promise.resolve(p3.__await).then(function(e28) {
                  t7("next", e28, o5, s3);
                }, function(e28) {
                  t7("throw", e28, o5, s3);
                }) : Promise.resolve(p3).then(function(e28) {
                  c3.value = e28, o5(c3);
                }, function(e28) {
                  return t7("throw", e28, o5, s3);
                });
              }
              s3(u3.arg);
            }(r3, a3, t6, o4);
          });
        }
        return t5 = t5 ? t5.then(o3, o3) : o3();
      };
    }
    function D2(e27, r3) {
      var n3 = e27.iterator[r3.method];
      if (n3 === t4) {
        if (r3.delegate = null, "throw" === r3.method) {
          if (e27.iterator.return && (r3.method = "return", r3.arg = t4, D2(e27, r3), "throw" === r3.method)) return m2;
          r3.method = "throw", r3.arg = new TypeError("The iterator does not provide a 'throw' method");
        }
        return m2;
      }
      var i2 = l2(n3, e27.iterator, r3.arg);
      if ("throw" === i2.type) return r3.method = "throw", r3.arg = i2.arg, r3.delegate = null, m2;
      var a3 = i2.arg;
      return a3 ? a3.done ? (r3[e27.resultName] = a3.value, r3.next = e27.nextLoc, "return" !== r3.method && (r3.method = "next", r3.arg = t4), r3.delegate = null, m2) : a3 : (r3.method = "throw", r3.arg = new TypeError("iterator result is not an object"), r3.delegate = null, m2);
    }
    function F2(e27) {
      var t5 = { tryLoc: e27[0] };
      1 in e27 && (t5.catchLoc = e27[1]), 2 in e27 && (t5.finallyLoc = e27[2], t5.afterLoc = e27[3]), this.tryEntries.push(t5);
    }
    function A2(e27) {
      var t5 = e27.completion || {};
      t5.type = "normal", delete t5.arg, e27.completion = t5;
    }
    function w2(e27) {
      this.tryEntries = [{ tryLoc: "root" }], e27.forEach(F2, this), this.reset(true);
    }
    function _2(e27) {
      if (e27) {
        var r3 = e27[o2];
        if (r3) return r3.call(e27);
        if ("function" == typeof e27.next) return e27;
        if (!isNaN(e27.length)) {
          var i2 = -1, a3 = function r4() {
            for (; ++i2 < e27.length; ) if (n2.call(e27, i2)) return r4.value = e27[i2], r4.done = false, r4;
            return r4.value = t4, r4.done = true, r4;
          };
          return a3.next = a3;
        }
      }
      return { next: T2 };
    }
    function T2() {
      return { value: t4, done: true };
    }
    return y2.prototype = C3.constructor = v2, v2.constructor = y2, v2[u2] = y2.displayName = "GeneratorFunction", e26.isGeneratorFunction = function(e27) {
      var t5 = "function" == typeof e27 && e27.constructor;
      return !!t5 && (t5 === y2 || "GeneratorFunction" === (t5.displayName || t5.name));
    }, e26.mark = function(e27) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(e27, v2) : (e27.__proto__ = v2, u2 in e27 || (e27[u2] = "GeneratorFunction")), e27.prototype = Object.create(C3), e27;
    }, e26.awrap = function(e27) {
      return { __await: e27 };
    }, S3(k2.prototype), k2.prototype[s2] = function() {
      return this;
    }, e26.AsyncIterator = k2, e26.async = function(t5, r3, n3, i2) {
      var a3 = new k2(c2(t5, r3, n3, i2));
      return e26.isGeneratorFunction(r3) ? a3 : a3.next().then(function(e27) {
        return e27.done ? e27.value : a3.next();
      });
    }, S3(C3), C3[u2] = "Generator", C3[o2] = function() {
      return this;
    }, C3.toString = function() {
      return "[object Generator]";
    }, e26.keys = function(e27) {
      var t5 = [];
      for (var r3 in e27) t5.push(r3);
      return t5.reverse(), function r4() {
        for (; t5.length; ) {
          var n3 = t5.pop();
          if (n3 in e27) return r4.value = n3, r4.done = false, r4;
        }
        return r4.done = true, r4;
      };
    }, e26.values = _2, w2.prototype = { constructor: w2, reset: function(e27) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t4, this.done = false, this.delegate = null, this.method = "next", this.arg = t4, this.tryEntries.forEach(A2), !e27) for (var r3 in this) "t" === r3.charAt(0) && n2.call(this, r3) && !isNaN(+r3.slice(1)) && (this[r3] = t4);
    }, stop: function() {
      this.done = true;
      var e27 = this.tryEntries[0].completion;
      if ("throw" === e27.type) throw e27.arg;
      return this.rval;
    }, dispatchException: function(e27) {
      if (this.done) throw e27;
      var r3 = this;
      function i2(n3, i3) {
        return s3.type = "throw", s3.arg = e27, r3.next = n3, i3 && (r3.method = "next", r3.arg = t4), !!i3;
      }
      for (var a3 = this.tryEntries.length - 1; a3 >= 0; --a3) {
        var o3 = this.tryEntries[a3], s3 = o3.completion;
        if ("root" === o3.tryLoc) return i2("end");
        if (o3.tryLoc <= this.prev) {
          var u3 = n2.call(o3, "catchLoc"), c3 = n2.call(o3, "finallyLoc");
          if (u3 && c3) {
            if (this.prev < o3.catchLoc) return i2(o3.catchLoc, true);
            if (this.prev < o3.finallyLoc) return i2(o3.finallyLoc);
          } else if (u3) {
            if (this.prev < o3.catchLoc) return i2(o3.catchLoc, true);
          } else {
            if (!c3) throw new Error("try statement without catch or finally");
            if (this.prev < o3.finallyLoc) return i2(o3.finallyLoc);
          }
        }
      }
    }, abrupt: function(e27, t5) {
      for (var r3 = this.tryEntries.length - 1; r3 >= 0; --r3) {
        var i2 = this.tryEntries[r3];
        if (i2.tryLoc <= this.prev && n2.call(i2, "finallyLoc") && this.prev < i2.finallyLoc) {
          var a3 = i2;
          break;
        }
      }
      a3 && ("break" === e27 || "continue" === e27) && a3.tryLoc <= t5 && t5 <= a3.finallyLoc && (a3 = null);
      var o3 = a3 ? a3.completion : {};
      return o3.type = e27, o3.arg = t5, a3 ? (this.method = "next", this.next = a3.finallyLoc, m2) : this.complete(o3);
    }, complete: function(e27, t5) {
      if ("throw" === e27.type) throw e27.arg;
      return "break" === e27.type || "continue" === e27.type ? this.next = e27.arg : "return" === e27.type ? (this.rval = this.arg = e27.arg, this.method = "return", this.next = "end") : "normal" === e27.type && t5 && (this.next = t5), m2;
    }, finish: function(e27) {
      for (var t5 = this.tryEntries.length - 1; t5 >= 0; --t5) {
        var r3 = this.tryEntries[t5];
        if (r3.finallyLoc === e27) return this.complete(r3.completion, r3.afterLoc), A2(r3), m2;
      }
    }, catch: function(e27) {
      for (var t5 = this.tryEntries.length - 1; t5 >= 0; --t5) {
        var r3 = this.tryEntries[t5];
        if (r3.tryLoc === e27) {
          var n3 = r3.completion;
          if ("throw" === n3.type) {
            var i2 = n3.arg;
            A2(r3);
          }
          return i2;
        }
      }
      throw new Error("illegal catch attempt");
    }, delegateYield: function(e27, r3, n3) {
      return this.delegate = { iterator: _2(e27), resultName: r3, nextLoc: n3 }, "next" === this.method && (this.arg = t4), m2;
    } }, e26;
  }(e25.exports);
  try {
    regeneratorRuntime = t3;
  } catch (e26) {
    Function("r", "regeneratorRuntime = r")(t3);
  }
});
var bs = r(function(e25) {
  var t3 = e25.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
  "number" == typeof __g && (__g = t3);
});
var Es = r(function(e25) {
  var t3 = e25.exports = { version: "2.6.10" };
  "number" == typeof __e && (__e = t3);
});
var Cs = (Es.version, function(e25, t3, r2) {
  if (function(e26) {
    if ("function" != typeof e26) throw TypeError(e26 + " is not a function!");
  }(e25), void 0 === t3) return e25;
  switch (r2) {
    case 1:
      return function(r3) {
        return e25.call(t3, r3);
      };
    case 2:
      return function(r3, n2) {
        return e25.call(t3, r3, n2);
      };
    case 3:
      return function(r3, n2, i2) {
        return e25.call(t3, r3, n2, i2);
      };
  }
  return function() {
    return e25.apply(t3, arguments);
  };
});
var Ss = function(e25) {
  return "object" === i(e25) ? null !== e25 : "function" == typeof e25;
};
var ks = function(e25) {
  if (!Ss(e25)) throw TypeError(e25 + " is not an object!");
  return e25;
};
var Ds = function(e25) {
  try {
    return !!e25();
  } catch (e26) {
    return true;
  }
};
var Fs = !Ds(function() {
  return 7 != Object.defineProperty({}, "a", { get: function() {
    return 7;
  } }).a;
});
var As = bs.document;
var ws = Ss(As) && Ss(As.createElement);
var _s = !Fs && !Ds(function() {
  return 7 != Object.defineProperty((e25 = "div", ws ? As.createElement(e25) : {}), "a", { get: function() {
    return 7;
  } }).a;
  var e25;
});
var Ts = Object.defineProperty;
var Ps = { f: Fs ? Object.defineProperty : function(e25, t3, r2) {
  if (ks(e25), t3 = function(e26, t4) {
    if (!Ss(e26)) return e26;
    var r3, n2;
    if (t4 && "function" == typeof (r3 = e26.toString) && !Ss(n2 = r3.call(e26))) return n2;
    if ("function" == typeof (r3 = e26.valueOf) && !Ss(n2 = r3.call(e26))) return n2;
    if (!t4 && "function" == typeof (r3 = e26.toString) && !Ss(n2 = r3.call(e26))) return n2;
    throw TypeError("Can't convert object to primitive value");
  }(t3, true), ks(r2), _s) try {
    return Ts(e25, t3, r2);
  } catch (e26) {
  }
  if ("get" in r2 || "set" in r2) throw TypeError("Accessors not supported!");
  return "value" in r2 && (e25[t3] = r2.value), e25;
} };
var Is = Fs ? function(e25, t3, r2) {
  return Ps.f(e25, t3, function(e26, t4) {
    return { enumerable: !(1 & e26), configurable: !(2 & e26), writable: !(4 & e26), value: t4 };
  }(1, r2));
} : function(e25, t3, r2) {
  return e25[t3] = r2, e25;
};
var Bs = {}.hasOwnProperty;
var Os = function(e25, t3) {
  return Bs.call(e25, t3);
};
var Ls = function e9(t3, r2, n2) {
  var i2, a2, o2, s2 = t3 & e9.F, u2 = t3 & e9.G, c2 = t3 & e9.S, l2 = t3 & e9.P, p2 = t3 & e9.B, f2 = t3 & e9.W, h2 = u2 ? Es : Es[r2] || (Es[r2] = {}), d2 = h2.prototype, m2 = u2 ? bs : c2 ? bs[r2] : (bs[r2] || {}).prototype;
  for (i2 in u2 && (n2 = r2), n2) (a2 = !s2 && m2 && void 0 !== m2[i2]) && Os(h2, i2) || (o2 = a2 ? m2[i2] : n2[i2], h2[i2] = u2 && "function" != typeof m2[i2] ? n2[i2] : p2 && a2 ? Cs(o2, bs) : f2 && m2[i2] == o2 ? function(e25) {
    var t4 = function(t5, r3, n3) {
      if (this instanceof e25) {
        switch (arguments.length) {
          case 0:
            return new e25();
          case 1:
            return new e25(t5);
          case 2:
            return new e25(t5, r3);
        }
        return new e25(t5, r3, n3);
      }
      return e25.apply(this, arguments);
    };
    return t4.prototype = e25.prototype, t4;
  }(o2) : l2 && "function" == typeof o2 ? Cs(Function.call, o2) : o2, l2 && ((h2.virtual || (h2.virtual = {}))[i2] = o2, t3 & e9.R && d2 && !d2[i2] && Is(d2, i2, o2)));
};
Ls.F = 1, Ls.G = 2, Ls.S = 4, Ls.P = 8, Ls.B = 16, Ls.W = 32, Ls.U = 64, Ls.R = 128;
Ls(Ls.G, { global: bs });
var Ns = Es.global;
function js(e25, t3) {
  for (var r2 = 0, n2 = e25.length - 1; n2 >= 0; n2--) {
    var i2 = e25[n2];
    "." === i2 ? e25.splice(n2, 1) : ".." === i2 ? (e25.splice(n2, 1), r2++) : r2 && (e25.splice(n2, 1), r2--);
  }
  if (t3) for (; r2--; r2) e25.unshift("..");
  return e25;
}
t2(r(function(e25) {
  var t3, r2 = (t3 = Ns) && t3.__esModule ? t3 : { default: t3 };
  r2.default._babelPolyfill && "undefined" != typeof console && console.warn && console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."), r2.default._babelPolyfill = true;
}));
var Rs = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var Ms = function(e25) {
  return Rs.exec(e25).slice(1);
};
function Vs() {
  for (var e25 = "", t3 = false, r2 = arguments.length - 1; r2 >= -1 && !t3; r2--) {
    var n2 = r2 >= 0 ? arguments[r2] : "/";
    if ("string" != typeof n2) throw new TypeError("Arguments to path.resolve must be strings");
    n2 && (e25 = n2 + "/" + e25, t3 = "/" === n2.charAt(0));
  }
  return (t3 ? "/" : "") + (e25 = js($s(e25.split("/"), function(e26) {
    return !!e26;
  }), !t3).join("/")) || ".";
}
function Us(e25) {
  var t3 = qs(e25), r2 = "/" === Gs(e25, -1);
  return (e25 = js($s(e25.split("/"), function(e26) {
    return !!e26;
  }), !t3).join("/")) || t3 || (e25 = "."), e25 && r2 && (e25 += "/"), (t3 ? "/" : "") + e25;
}
function qs(e25) {
  return "/" === e25.charAt(0);
}
var Ws = { extname: function(e25) {
  return Ms(e25)[3];
}, basename: function(e25, t3) {
  var r2 = Ms(e25)[2];
  return t3 && r2.substr(-1 * t3.length) === t3 && (r2 = r2.substr(0, r2.length - t3.length)), r2;
}, dirname: function(e25) {
  var t3 = Ms(e25), r2 = t3[0], n2 = t3[1];
  return r2 || n2 ? (n2 && (n2 = n2.substr(0, n2.length - 1)), r2 + n2) : ".";
}, sep: "/", delimiter: ":", relative: function(e25, t3) {
  function r2(e26) {
    for (var t4 = 0; t4 < e26.length && "" === e26[t4]; t4++) ;
    for (var r3 = e26.length - 1; r3 >= 0 && "" === e26[r3]; r3--) ;
    return t4 > r3 ? [] : e26.slice(t4, r3 - t4 + 1);
  }
  e25 = Vs(e25).substr(1), t3 = Vs(t3).substr(1);
  for (var n2 = r2(e25.split("/")), i2 = r2(t3.split("/")), a2 = Math.min(n2.length, i2.length), o2 = a2, s2 = 0; s2 < a2; s2++) if (n2[s2] !== i2[s2]) {
    o2 = s2;
    break;
  }
  var u2 = [];
  for (s2 = o2; s2 < n2.length; s2++) u2.push("..");
  return (u2 = u2.concat(i2.slice(o2))).join("/");
}, join: function() {
  return Us($s(Array.prototype.slice.call(arguments, 0), function(e25, t3) {
    if ("string" != typeof e25) throw new TypeError("Arguments to path.join must be strings");
    return e25;
  }).join("/"));
}, isAbsolute: qs, normalize: Us, resolve: Vs };
function $s(e25, t3) {
  if (e25.filter) return e25.filter(t3);
  for (var r2 = [], n2 = 0; n2 < e25.length; n2++) t3(e25[n2], n2, e25) && r2.push(e25[n2]);
  return r2;
}
var Gs = "b" === "ab".substr(-1) ? function(e25, t3, r2) {
  return e25.substr(t3, r2);
} : function(e25, t3, r2) {
  return t3 < 0 && (t3 = e25.length + t3), e25.substr(t3, r2);
};
function zs(e25) {
  return null != e25 && (!!e25._isBuffer || Hs(e25) || function(e26) {
    return "function" == typeof e26.readFloatLE && "function" == typeof e26.slice && Hs(e26.slice(0, 0));
  }(e25));
}
function Hs(e25) {
  return !!e25.constructor && "function" == typeof e25.constructor.isBuffer && e25.constructor.isBuffer(e25);
}
var Ks = "function" == typeof Object.create ? function(e25, t3) {
  e25.super_ = t3, e25.prototype = Object.create(t3.prototype, { constructor: { value: e25, enumerable: false, writable: true, configurable: true } });
} : function(e25, t3) {
  e25.super_ = t3;
  var r2 = function() {
  };
  r2.prototype = t3.prototype, e25.prototype = new r2(), e25.prototype.constructor = e25;
};
var Js = /%[sdj%]/g;
function Qs(e25) {
  if (!cu(e25)) {
    for (var t3 = [], r2 = 0; r2 < arguments.length; r2++) t3.push(Zs(arguments[r2]));
    return t3.join(" ");
  }
  r2 = 1;
  for (var n2 = arguments, i2 = n2.length, a2 = String(e25).replace(Js, function(e26) {
    if ("%%" === e26) return "%";
    if (r2 >= i2) return e26;
    switch (e26) {
      case "%s":
        return String(n2[r2++]);
      case "%d":
        return Number(n2[r2++]);
      case "%j":
        try {
          return JSON.stringify(n2[r2++]);
        } catch (e27) {
          return "[Circular]";
        }
      default:
        return e26;
    }
  }), o2 = n2[r2]; r2 < i2; o2 = n2[++r2]) su(o2) || !fu(o2) ? a2 += " " + o2 : a2 += " " + Zs(o2);
  return a2;
}
var Xs;
var Ys = {};
function Zs(e25, t3) {
  var r2 = { seen: [], stylize: tu };
  return arguments.length >= 3 && (r2.depth = arguments[2]), arguments.length >= 4 && (r2.colors = arguments[3]), ou(t3) ? r2.showHidden = t3 : t3 && bu(r2, t3), lu(r2.showHidden) && (r2.showHidden = false), lu(r2.depth) && (r2.depth = 2), lu(r2.colors) && (r2.colors = false), lu(r2.customInspect) && (r2.customInspect = true), r2.colors && (r2.stylize = eu), ru(r2, e25, r2.depth);
}
function eu(e25, t3) {
  var r2 = Zs.styles[t3];
  return r2 ? "\x1B[" + Zs.colors[r2][0] + "m" + e25 + "\x1B[" + Zs.colors[r2][1] + "m" : e25;
}
function tu(e25, t3) {
  return e25;
}
function ru(e25, t3, r2) {
  if (e25.customInspect && t3 && mu(t3.inspect) && t3.inspect !== Zs && (!t3.constructor || t3.constructor.prototype !== t3)) {
    var n2 = t3.inspect(r2, e25);
    return cu(n2) || (n2 = ru(e25, n2, r2)), n2;
  }
  var i2 = function(e26, t4) {
    if (lu(t4)) return e26.stylize("undefined", "undefined");
    if (cu(t4)) {
      var r3 = "'" + JSON.stringify(t4).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
      return e26.stylize(r3, "string");
    }
    if (uu(t4)) return e26.stylize("" + t4, "number");
    if (ou(t4)) return e26.stylize("" + t4, "boolean");
    if (su(t4)) return e26.stylize("null", "null");
  }(e25, t3);
  if (i2) return i2;
  var a2 = Object.keys(t3), o2 = function(e26) {
    var t4 = {};
    return e26.forEach(function(e27, r3) {
      t4[e27] = true;
    }), t4;
  }(a2);
  if (e25.showHidden && (a2 = Object.getOwnPropertyNames(t3)), du(t3) && (a2.indexOf("message") >= 0 || a2.indexOf("description") >= 0)) return nu(t3);
  if (0 === a2.length) {
    if (mu(t3)) {
      var s2 = t3.name ? ": " + t3.name : "";
      return e25.stylize("[Function" + s2 + "]", "special");
    }
    if (pu(t3)) return e25.stylize(RegExp.prototype.toString.call(t3), "regexp");
    if (hu(t3)) return e25.stylize(Date.prototype.toString.call(t3), "date");
    if (du(t3)) return nu(t3);
  }
  var u2, c2 = "", l2 = false, p2 = ["{", "}"];
  (au(t3) && (l2 = true, p2 = ["[", "]"]), mu(t3)) && (c2 = " [Function" + (t3.name ? ": " + t3.name : "") + "]");
  return pu(t3) && (c2 = " " + RegExp.prototype.toString.call(t3)), hu(t3) && (c2 = " " + Date.prototype.toUTCString.call(t3)), du(t3) && (c2 = " " + nu(t3)), 0 !== a2.length || l2 && 0 != t3.length ? r2 < 0 ? pu(t3) ? e25.stylize(RegExp.prototype.toString.call(t3), "regexp") : e25.stylize("[Object]", "special") : (e25.seen.push(t3), u2 = l2 ? function(e26, t4, r3, n3, i3) {
    for (var a3 = [], o3 = 0, s3 = t4.length; o3 < s3; ++o3) Eu(t4, String(o3)) ? a3.push(iu(e26, t4, r3, n3, String(o3), true)) : a3.push("");
    return i3.forEach(function(i4) {
      i4.match(/^\d+$/) || a3.push(iu(e26, t4, r3, n3, i4, true));
    }), a3;
  }(e25, t3, r2, o2, a2) : a2.map(function(n3) {
    return iu(e25, t3, r2, o2, n3, l2);
  }), e25.seen.pop(), function(e26, t4, r3) {
    if (e26.reduce(function(e27, t5) {
      return t5.indexOf("\n"), e27 + t5.replace(/\u001b\[\d\d?m/g, "").length + 1;
    }, 0) > 60) return r3[0] + ("" === t4 ? "" : t4 + "\n ") + " " + e26.join(",\n  ") + " " + r3[1];
    return r3[0] + t4 + " " + e26.join(", ") + " " + r3[1];
  }(u2, c2, p2)) : p2[0] + c2 + p2[1];
}
function nu(e25) {
  return "[" + Error.prototype.toString.call(e25) + "]";
}
function iu(e25, t3, r2, n2, i2, a2) {
  var o2, s2, u2;
  if ((u2 = Object.getOwnPropertyDescriptor(t3, i2) || { value: t3[i2] }).get ? s2 = u2.set ? e25.stylize("[Getter/Setter]", "special") : e25.stylize("[Getter]", "special") : u2.set && (s2 = e25.stylize("[Setter]", "special")), Eu(n2, i2) || (o2 = "[" + i2 + "]"), s2 || (e25.seen.indexOf(u2.value) < 0 ? (s2 = su(r2) ? ru(e25, u2.value, null) : ru(e25, u2.value, r2 - 1)).indexOf("\n") > -1 && (s2 = a2 ? s2.split("\n").map(function(e26) {
    return "  " + e26;
  }).join("\n").substr(2) : "\n" + s2.split("\n").map(function(e26) {
    return "   " + e26;
  }).join("\n")) : s2 = e25.stylize("[Circular]", "special")), lu(o2)) {
    if (a2 && i2.match(/^\d+$/)) return s2;
    (o2 = JSON.stringify("" + i2)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (o2 = o2.substr(1, o2.length - 2), o2 = e25.stylize(o2, "name")) : (o2 = o2.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), o2 = e25.stylize(o2, "string"));
  }
  return o2 + ": " + s2;
}
function au(e25) {
  return Array.isArray(e25);
}
function ou(e25) {
  return "boolean" == typeof e25;
}
function su(e25) {
  return null === e25;
}
function uu(e25) {
  return "number" == typeof e25;
}
function cu(e25) {
  return "string" == typeof e25;
}
function lu(e25) {
  return void 0 === e25;
}
function pu(e25) {
  return fu(e25) && "[object RegExp]" === yu(e25);
}
function fu(e25) {
  return "object" === i(e25) && null !== e25;
}
function hu(e25) {
  return fu(e25) && "[object Date]" === yu(e25);
}
function du(e25) {
  return fu(e25) && ("[object Error]" === yu(e25) || e25 instanceof Error);
}
function mu(e25) {
  return "function" == typeof e25;
}
function gu(e25) {
  return null === e25 || "boolean" == typeof e25 || "number" == typeof e25 || "string" == typeof e25 || "symbol" === i(e25) || void 0 === e25;
}
function yu(e25) {
  return Object.prototype.toString.call(e25);
}
function vu(e25) {
  return e25 < 10 ? "0" + e25.toString(10) : e25.toString(10);
}
Zs.colors = { bold: [1, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], white: [37, 39], grey: [90, 39], black: [30, 39], blue: [34, 39], cyan: [36, 39], green: [32, 39], magenta: [35, 39], red: [31, 39], yellow: [33, 39] }, Zs.styles = { special: "cyan", number: "yellow", boolean: "yellow", undefined: "grey", null: "bold", string: "green", date: "magenta", regexp: "red" };
var xu = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
function bu(e25, t3) {
  if (!t3 || !fu(t3)) return e25;
  for (var r2 = Object.keys(t3), n2 = r2.length; n2--; ) e25[r2[n2]] = t3[r2[n2]];
  return e25;
}
function Eu(e25, t3) {
  return Object.prototype.hasOwnProperty.call(e25, t3);
}
var Cu = { inherits: Ks, _extend: bu, log: function() {
  console.log("%s - %s", function() {
    var e25 = /* @__PURE__ */ new Date(), t3 = [vu(e25.getHours()), vu(e25.getMinutes()), vu(e25.getSeconds())].join(":");
    return [e25.getDate(), xu[e25.getMonth()], t3].join(" ");
  }(), Qs.apply(null, arguments));
}, isBuffer: function(e25) {
  return Buffer.isBuffer(e25);
}, isPrimitive: gu, isFunction: mu, isError: du, isDate: hu, isObject: fu, isRegExp: pu, isUndefined: lu, isSymbol: function(e25) {
  return "symbol" === i(e25);
}, isString: cu, isNumber: uu, isNullOrUndefined: function(e25) {
  return null == e25;
}, isNull: su, isBoolean: ou, isArray: au, inspect: Zs, deprecate: function e10(t3, r2) {
  if (lu(global.process)) return function() {
    return e10(t3, r2).apply(this, arguments);
  };
  var n2 = false;
  return function() {
    return n2 || (console.error(r2), n2 = true), t3.apply(this, arguments);
  };
}, format: Qs, debuglog: function(e25) {
  if (lu(Xs) && (Xs = ""), e25 = e25.toUpperCase(), !Ys[e25]) if (new RegExp("\\b" + e25 + "\\b", "i").test(Xs)) {
    Ys[e25] = function() {
      var t3 = Qs.apply(null, arguments);
      console.error("%s %d: %s", e25, 0, t3);
    };
  } else Ys[e25] = function() {
  };
  return Ys[e25];
} };
function Su(e25, t3) {
  if (e25 === t3) return 0;
  for (var r2 = e25.length, n2 = t3.length, i2 = 0, a2 = Math.min(r2, n2); i2 < a2; ++i2) if (e25[i2] !== t3[i2]) {
    r2 = e25[i2], n2 = t3[i2];
    break;
  }
  return r2 < n2 ? -1 : n2 < r2 ? 1 : 0;
}
var ku;
var Du = Object.prototype.hasOwnProperty;
var Fu = Object.keys || function(e25) {
  var t3 = [];
  for (var r2 in e25) Du.call(e25, r2) && t3.push(r2);
  return t3;
};
var Au = Array.prototype.slice;
function wu() {
  return void 0 !== ku ? ku : ku = "foo" === function() {
  }.name;
}
function _u(e25) {
  return Object.prototype.toString.call(e25);
}
function Tu(e25) {
  return !zs(e25) && ("function" == typeof global.ArrayBuffer && ("function" == typeof ArrayBuffer.isView ? ArrayBuffer.isView(e25) : !!e25 && (e25 instanceof DataView || !!(e25.buffer && e25.buffer instanceof ArrayBuffer))));
}
function Pu(e25, t3) {
  e25 || ju(e25, true, t3, "==", Ru);
}
var Iu = /\s*function\s+([^\(\s]*)\s*/;
function Bu(e25) {
  if (mu(e25)) {
    if (wu()) return e25.name;
    var t3 = e25.toString().match(Iu);
    return t3 && t3[1];
  }
}
function Ou(e25) {
  this.name = "AssertionError", this.actual = e25.actual, this.expected = e25.expected, this.operator = e25.operator, e25.message ? (this.message = e25.message, this.generatedMessage = false) : (this.message = function(e26) {
    return Lu(Nu(e26.actual), 128) + " " + e26.operator + " " + Lu(Nu(e26.expected), 128);
  }(this), this.generatedMessage = true);
  var t3 = e25.stackStartFunction || ju;
  if (Error.captureStackTrace) Error.captureStackTrace(this, t3);
  else {
    var r2 = new Error();
    if (r2.stack) {
      var n2 = r2.stack, i2 = Bu(t3), a2 = n2.indexOf("\n" + i2);
      if (a2 >= 0) {
        var o2 = n2.indexOf("\n", a2 + 1);
        n2 = n2.substring(o2 + 1);
      }
      this.stack = n2;
    }
  }
}
function Lu(e25, t3) {
  return "string" == typeof e25 ? e25.length < t3 ? e25 : e25.slice(0, t3) : e25;
}
function Nu(e25) {
  if (wu() || !mu(e25)) return Zs(e25);
  var t3 = Bu(e25);
  return "[Function" + (t3 ? ": " + t3 : "") + "]";
}
function ju(e25, t3, r2, n2, i2) {
  throw new Ou({ message: r2, actual: e25, expected: t3, operator: n2, stackStartFunction: i2 });
}
function Ru(e25, t3) {
  e25 || ju(e25, true, t3, "==", Ru);
}
function Mu(e25, t3, r2, n2) {
  if (e25 === t3) return true;
  if (zs(e25) && zs(t3)) return 0 === Su(e25, t3);
  if (hu(e25) && hu(t3)) return e25.getTime() === t3.getTime();
  if (pu(e25) && pu(t3)) return e25.source === t3.source && e25.global === t3.global && e25.multiline === t3.multiline && e25.lastIndex === t3.lastIndex && e25.ignoreCase === t3.ignoreCase;
  if (null !== e25 && "object" === i(e25) || null !== t3 && "object" === i(t3)) {
    if (Tu(e25) && Tu(t3) && _u(e25) === _u(t3) && !(e25 instanceof Float32Array || e25 instanceof Float64Array)) return 0 === Su(new Uint8Array(e25.buffer), new Uint8Array(t3.buffer));
    if (zs(e25) !== zs(t3)) return false;
    var a2 = (n2 = n2 || { actual: [], expected: [] }).actual.indexOf(e25);
    return -1 !== a2 && a2 === n2.expected.indexOf(t3) || (n2.actual.push(e25), n2.expected.push(t3), function(e26, t4, r3, n3) {
      if (null == e26 || null == t4) return false;
      if (gu(e26) || gu(t4)) return e26 === t4;
      if (r3 && Object.getPrototypeOf(e26) !== Object.getPrototypeOf(t4)) return false;
      var i2 = Vu(e26), a3 = Vu(t4);
      if (i2 && !a3 || !i2 && a3) return false;
      if (i2) return e26 = Au.call(e26), t4 = Au.call(t4), Mu(e26, t4, r3);
      var o2, s2, u2 = Fu(e26), c2 = Fu(t4);
      if (u2.length !== c2.length) return false;
      for (u2.sort(), c2.sort(), s2 = u2.length - 1; s2 >= 0; s2--) if (u2[s2] !== c2[s2]) return false;
      for (s2 = u2.length - 1; s2 >= 0; s2--) if (o2 = u2[s2], !Mu(e26[o2], t4[o2], r3, n3)) return false;
      return true;
    }(e25, t3, r2, n2));
  }
  return r2 ? e25 === t3 : e25 == t3;
}
function Vu(e25) {
  return "[object Arguments]" == Object.prototype.toString.call(e25);
}
function Uu(e25, t3) {
  if (!e25 || !t3) return false;
  if ("[object RegExp]" == Object.prototype.toString.call(t3)) return t3.test(e25);
  try {
    if (e25 instanceof t3) return true;
  } catch (e26) {
  }
  return !Error.isPrototypeOf(t3) && true === t3.call({}, e25);
}
function qu(e25, t3, r2, n2) {
  var i2;
  if ("function" != typeof t3) throw new TypeError('"block" argument must be a function');
  "string" == typeof r2 && (n2 = r2, r2 = null), i2 = function(e26) {
    var t4;
    try {
      e26();
    } catch (e27) {
      t4 = e27;
    }
    return t4;
  }(t3), n2 = (r2 && r2.name ? " (" + r2.name + ")." : ".") + (n2 ? " " + n2 : "."), e25 && !i2 && ju(i2, r2, "Missing expected exception" + n2);
  var a2 = "string" == typeof n2, o2 = !e25 && i2 && !r2;
  if ((!e25 && du(i2) && a2 && Uu(i2, r2) || o2) && ju(i2, r2, "Got unwanted exception" + n2), e25 && i2 && r2 && !Uu(i2, r2) || !e25 && i2) throw i2;
}
Pu.AssertionError = Ou, Ks(Ou, Error), Pu.fail = ju, Pu.ok = Ru, Pu.equal = function e11(t3, r2, n2) {
  t3 != r2 && ju(t3, r2, n2, "==", e11);
}, Pu.notEqual = function e12(t3, r2, n2) {
  t3 == r2 && ju(t3, r2, n2, "!=", e12);
}, Pu.deepEqual = function e13(t3, r2, n2) {
  Mu(t3, r2, false) || ju(t3, r2, n2, "deepEqual", e13);
}, Pu.deepStrictEqual = function e14(t3, r2, n2) {
  Mu(t3, r2, true) || ju(t3, r2, n2, "deepStrictEqual", e14);
}, Pu.notDeepEqual = function e15(t3, r2, n2) {
  Mu(t3, r2, false) && ju(t3, r2, n2, "notDeepEqual", e15);
}, Pu.notDeepStrictEqual = function e16(t3, r2, n2) {
  Mu(t3, r2, true) && ju(t3, r2, n2, "notDeepStrictEqual", e16);
}, Pu.strictEqual = function e17(t3, r2, n2) {
  t3 !== r2 && ju(t3, r2, n2, "===", e17);
}, Pu.notStrictEqual = function e18(t3, r2, n2) {
  t3 === r2 && ju(t3, r2, n2, "!==", e18);
}, Pu.throws = function(e25, t3, r2) {
  qu(true, e25, t3, r2);
}, Pu.doesNotThrow = function(e25, t3, r2) {
  qu(false, e25, t3, r2);
}, Pu.ifError = function(e25) {
  if (e25) throw e25;
};
var Wu = "ECMAScript JS AST traversal functions";
var $u = "https://github.com/estools/estraverse";
var Gu = "estraverse.js";
var zu = { node: ">=4.0" };
var Hu = [{ name: "Yusuke Suzuki", email: "utatane.tea@gmail.com", web: "http://github.com/Constellation" }];
var Ku = { type: "git", url: "http://github.com/estools/estraverse.git" };
var Ju = { "babel-preset-env": "^1.6.1", "babel-register": "^6.3.13", chai: "^2.1.1", espree: "^1.11.0", gulp: "^3.8.10", "gulp-bump": "^0.2.2", "gulp-filter": "^2.0.0", "gulp-git": "^1.0.1", "gulp-tag-version": "^1.3.0", jshint: "^2.5.6", mocha: "^2.1.0" };
var Qu = { test: "npm run-script lint && npm run-script unit-test", lint: "jshint estraverse.js", "unit-test": "mocha --compilers js:babel-register" };
var Xu = { name: "estraverse", description: Wu, homepage: $u, main: Gu, version: "4.3.0", engines: zu, maintainers: Hu, repository: Ku, devDependencies: Ju, license: "BSD-2-Clause", scripts: Qu };
var Yu = n(Object.freeze({ __proto__: null, name: "estraverse", description: Wu, homepage: $u, main: Gu, version: "4.3.0", engines: zu, maintainers: Hu, repository: Ku, devDependencies: Ju, license: "BSD-2-Clause", scripts: Qu, default: Xu }));
var Zu = r(function(e25, t3) {
  !function e26(t4) {
    var r2, n2, a2, o2, s2, u2;
    function c2(e27) {
      var t5, r3, n3 = {};
      for (t5 in e27) e27.hasOwnProperty(t5) && ("object" === i(r3 = e27[t5]) && null !== r3 ? n3[t5] = c2(r3) : n3[t5] = r3);
      return n3;
    }
    function l2(e27, t5) {
      this.parent = e27, this.key = t5;
    }
    function p2(e27, t5, r3, n3) {
      this.node = e27, this.path = t5, this.wrap = r3, this.ref = n3;
    }
    function f2() {
    }
    function h2(e27) {
      return null != e27 && ("object" === i(e27) && "string" == typeof e27.type);
    }
    function d2(e27, t5) {
      return (e27 === r2.ObjectExpression || e27 === r2.ObjectPattern) && "properties" === t5;
    }
    function m2(e27, t5) {
      return new f2().traverse(e27, t5);
    }
    function g2(e27, t5) {
      var r3;
      return r3 = function(e28, t6) {
        var r4, n3, i2, a3;
        for (n3 = e28.length, i2 = 0; n3; ) t6(e28[a3 = i2 + (r4 = n3 >>> 1)]) ? n3 = r4 : (i2 = a3 + 1, n3 -= r4 + 1);
        return i2;
      }(t5, function(t6) {
        return t6.range[0] > e27.range[0];
      }), e27.extendedRange = [e27.range[0], e27.range[1]], r3 !== t5.length && (e27.extendedRange[1] = t5[r3].range[0]), (r3 -= 1) >= 0 && (e27.extendedRange[0] = t5[r3].range[1]), e27;
    }
    return r2 = { AssignmentExpression: "AssignmentExpression", AssignmentPattern: "AssignmentPattern", ArrayExpression: "ArrayExpression", ArrayPattern: "ArrayPattern", ArrowFunctionExpression: "ArrowFunctionExpression", AwaitExpression: "AwaitExpression", BlockStatement: "BlockStatement", BinaryExpression: "BinaryExpression", BreakStatement: "BreakStatement", CallExpression: "CallExpression", CatchClause: "CatchClause", ClassBody: "ClassBody", ClassDeclaration: "ClassDeclaration", ClassExpression: "ClassExpression", ComprehensionBlock: "ComprehensionBlock", ComprehensionExpression: "ComprehensionExpression", ConditionalExpression: "ConditionalExpression", ContinueStatement: "ContinueStatement", DebuggerStatement: "DebuggerStatement", DirectiveStatement: "DirectiveStatement", DoWhileStatement: "DoWhileStatement", EmptyStatement: "EmptyStatement", ExportAllDeclaration: "ExportAllDeclaration", ExportDefaultDeclaration: "ExportDefaultDeclaration", ExportNamedDeclaration: "ExportNamedDeclaration", ExportSpecifier: "ExportSpecifier", ExpressionStatement: "ExpressionStatement", ForStatement: "ForStatement", ForInStatement: "ForInStatement", ForOfStatement: "ForOfStatement", FunctionDeclaration: "FunctionDeclaration", FunctionExpression: "FunctionExpression", GeneratorExpression: "GeneratorExpression", Identifier: "Identifier", IfStatement: "IfStatement", ImportExpression: "ImportExpression", ImportDeclaration: "ImportDeclaration", ImportDefaultSpecifier: "ImportDefaultSpecifier", ImportNamespaceSpecifier: "ImportNamespaceSpecifier", ImportSpecifier: "ImportSpecifier", Literal: "Literal", LabeledStatement: "LabeledStatement", LogicalExpression: "LogicalExpression", MemberExpression: "MemberExpression", MetaProperty: "MetaProperty", MethodDefinition: "MethodDefinition", ModuleSpecifier: "ModuleSpecifier", NewExpression: "NewExpression", ObjectExpression: "ObjectExpression", ObjectPattern: "ObjectPattern", Program: "Program", Property: "Property", RestElement: "RestElement", ReturnStatement: "ReturnStatement", SequenceExpression: "SequenceExpression", SpreadElement: "SpreadElement", Super: "Super", SwitchStatement: "SwitchStatement", SwitchCase: "SwitchCase", TaggedTemplateExpression: "TaggedTemplateExpression", TemplateElement: "TemplateElement", TemplateLiteral: "TemplateLiteral", ThisExpression: "ThisExpression", ThrowStatement: "ThrowStatement", TryStatement: "TryStatement", UnaryExpression: "UnaryExpression", UpdateExpression: "UpdateExpression", VariableDeclaration: "VariableDeclaration", VariableDeclarator: "VariableDeclarator", WhileStatement: "WhileStatement", WithStatement: "WithStatement", YieldExpression: "YieldExpression" }, a2 = { AssignmentExpression: ["left", "right"], AssignmentPattern: ["left", "right"], ArrayExpression: ["elements"], ArrayPattern: ["elements"], ArrowFunctionExpression: ["params", "body"], AwaitExpression: ["argument"], BlockStatement: ["body"], BinaryExpression: ["left", "right"], BreakStatement: ["label"], CallExpression: ["callee", "arguments"], CatchClause: ["param", "body"], ClassBody: ["body"], ClassDeclaration: ["id", "superClass", "body"], ClassExpression: ["id", "superClass", "body"], ComprehensionBlock: ["left", "right"], ComprehensionExpression: ["blocks", "filter", "body"], ConditionalExpression: ["test", "consequent", "alternate"], ContinueStatement: ["label"], DebuggerStatement: [], DirectiveStatement: [], DoWhileStatement: ["body", "test"], EmptyStatement: [], ExportAllDeclaration: ["source"], ExportDefaultDeclaration: ["declaration"], ExportNamedDeclaration: ["declaration", "specifiers", "source"], ExportSpecifier: ["exported", "local"], ExpressionStatement: ["expression"], ForStatement: ["init", "test", "update", "body"], ForInStatement: ["left", "right", "body"], ForOfStatement: ["left", "right", "body"], FunctionDeclaration: ["id", "params", "body"], FunctionExpression: ["id", "params", "body"], GeneratorExpression: ["blocks", "filter", "body"], Identifier: [], IfStatement: ["test", "consequent", "alternate"], ImportExpression: ["source"], ImportDeclaration: ["specifiers", "source"], ImportDefaultSpecifier: ["local"], ImportNamespaceSpecifier: ["local"], ImportSpecifier: ["imported", "local"], Literal: [], LabeledStatement: ["label", "body"], LogicalExpression: ["left", "right"], MemberExpression: ["object", "property"], MetaProperty: ["meta", "property"], MethodDefinition: ["key", "value"], ModuleSpecifier: [], NewExpression: ["callee", "arguments"], ObjectExpression: ["properties"], ObjectPattern: ["properties"], Program: ["body"], Property: ["key", "value"], RestElement: ["argument"], ReturnStatement: ["argument"], SequenceExpression: ["expressions"], SpreadElement: ["argument"], Super: [], SwitchStatement: ["discriminant", "cases"], SwitchCase: ["test", "consequent"], TaggedTemplateExpression: ["tag", "quasi"], TemplateElement: [], TemplateLiteral: ["quasis", "expressions"], ThisExpression: [], ThrowStatement: ["argument"], TryStatement: ["block", "handler", "finalizer"], UnaryExpression: ["argument"], UpdateExpression: ["argument"], VariableDeclaration: ["declarations"], VariableDeclarator: ["id", "init"], WhileStatement: ["test", "body"], WithStatement: ["object", "body"], YieldExpression: ["argument"] }, n2 = { Break: o2 = {}, Skip: s2 = {}, Remove: u2 = {} }, l2.prototype.replace = function(e27) {
      this.parent[this.key] = e27;
    }, l2.prototype.remove = function() {
      return Array.isArray(this.parent) ? (this.parent.splice(this.key, 1), true) : (this.replace(null), false);
    }, f2.prototype.path = function() {
      var e27, t5, r3, n3, i2;
      function a3(e28, t6) {
        if (Array.isArray(t6)) for (r3 = 0, n3 = t6.length; r3 < n3; ++r3) e28.push(t6[r3]);
        else e28.push(t6);
      }
      if (!this.__current.path) return null;
      for (i2 = [], e27 = 2, t5 = this.__leavelist.length; e27 < t5; ++e27) a3(i2, this.__leavelist[e27].path);
      return a3(i2, this.__current.path), i2;
    }, f2.prototype.type = function() {
      return this.current().type || this.__current.wrap;
    }, f2.prototype.parents = function() {
      var e27, t5, r3;
      for (r3 = [], e27 = 1, t5 = this.__leavelist.length; e27 < t5; ++e27) r3.push(this.__leavelist[e27].node);
      return r3;
    }, f2.prototype.current = function() {
      return this.__current.node;
    }, f2.prototype.__execute = function(e27, t5) {
      var r3, n3;
      return n3 = void 0, r3 = this.__current, this.__current = t5, this.__state = null, e27 && (n3 = e27.call(this, t5.node, this.__leavelist[this.__leavelist.length - 1].node)), this.__current = r3, n3;
    }, f2.prototype.notify = function(e27) {
      this.__state = e27;
    }, f2.prototype.skip = function() {
      this.notify(s2);
    }, f2.prototype.break = function() {
      this.notify(o2);
    }, f2.prototype.remove = function() {
      this.notify(u2);
    }, f2.prototype.__initialize = function(e27, t5) {
      this.visitor = t5, this.root = e27, this.__worklist = [], this.__leavelist = [], this.__current = null, this.__state = null, this.__fallback = null, "iteration" === t5.fallback ? this.__fallback = Object.keys : "function" == typeof t5.fallback && (this.__fallback = t5.fallback), this.__keys = a2, t5.keys && (this.__keys = Object.assign(Object.create(this.__keys), t5.keys));
    }, f2.prototype.traverse = function(e27, t5) {
      var r3, n3, i2, a3, u3, c3, l3, f3, m3, g3, y2, v2;
      for (this.__initialize(e27, t5), v2 = {}, r3 = this.__worklist, n3 = this.__leavelist, r3.push(new p2(e27, null, null, null)), n3.push(new p2(null, null, null, null)); r3.length; ) if ((i2 = r3.pop()) !== v2) {
        if (i2.node) {
          if (c3 = this.__execute(t5.enter, i2), this.__state === o2 || c3 === o2) return;
          if (r3.push(v2), n3.push(i2), this.__state === s2 || c3 === s2) continue;
          if (u3 = (a3 = i2.node).type || i2.wrap, !(g3 = this.__keys[u3])) {
            if (!this.__fallback) throw new Error("Unknown node type " + u3 + ".");
            g3 = this.__fallback(a3);
          }
          for (f3 = g3.length; (f3 -= 1) >= 0; ) if (y2 = a3[l3 = g3[f3]]) if (Array.isArray(y2)) {
            for (m3 = y2.length; (m3 -= 1) >= 0; ) if (y2[m3]) {
              if (d2(u3, g3[f3])) i2 = new p2(y2[m3], [l3, m3], "Property", null);
              else {
                if (!h2(y2[m3])) continue;
                i2 = new p2(y2[m3], [l3, m3], null, null);
              }
              r3.push(i2);
            }
          } else h2(y2) && r3.push(new p2(y2, l3, null, null));
        }
      } else if (i2 = n3.pop(), c3 = this.__execute(t5.leave, i2), this.__state === o2 || c3 === o2) return;
    }, f2.prototype.replace = function(e27, t5) {
      var r3, n3, i2, a3, c3, f3, m3, g3, y2, v2, x2, b2, E2;
      function C3(e28) {
        var t6, n4, i3, a4;
        if (e28.ref.remove()) {
          for (n4 = e28.ref.key, a4 = e28.ref.parent, t6 = r3.length; t6--; ) if ((i3 = r3[t6]).ref && i3.ref.parent === a4) {
            if (i3.ref.key < n4) break;
            --i3.ref.key;
          }
        }
      }
      for (this.__initialize(e27, t5), x2 = {}, r3 = this.__worklist, n3 = this.__leavelist, f3 = new p2(e27, null, null, new l2(b2 = { root: e27 }, "root")), r3.push(f3), n3.push(f3); r3.length; ) if ((f3 = r3.pop()) !== x2) {
        if (void 0 !== (c3 = this.__execute(t5.enter, f3)) && c3 !== o2 && c3 !== s2 && c3 !== u2 && (f3.ref.replace(c3), f3.node = c3), this.__state !== u2 && c3 !== u2 || (C3(f3), f3.node = null), this.__state === o2 || c3 === o2) return b2.root;
        if ((i2 = f3.node) && (r3.push(x2), n3.push(f3), this.__state !== s2 && c3 !== s2)) {
          if (a3 = i2.type || f3.wrap, !(y2 = this.__keys[a3])) {
            if (!this.__fallback) throw new Error("Unknown node type " + a3 + ".");
            y2 = this.__fallback(i2);
          }
          for (m3 = y2.length; (m3 -= 1) >= 0; ) if (v2 = i2[E2 = y2[m3]]) if (Array.isArray(v2)) {
            for (g3 = v2.length; (g3 -= 1) >= 0; ) if (v2[g3]) {
              if (d2(a3, y2[m3])) f3 = new p2(v2[g3], [E2, g3], "Property", new l2(v2, g3));
              else {
                if (!h2(v2[g3])) continue;
                f3 = new p2(v2[g3], [E2, g3], null, new l2(v2, g3));
              }
              r3.push(f3);
            }
          } else h2(v2) && r3.push(new p2(v2, E2, null, new l2(i2, E2)));
        }
      } else if (f3 = n3.pop(), void 0 !== (c3 = this.__execute(t5.leave, f3)) && c3 !== o2 && c3 !== s2 && c3 !== u2 && f3.ref.replace(c3), this.__state !== u2 && c3 !== u2 || C3(f3), this.__state === o2 || c3 === o2) return b2.root;
      return b2.root;
    }, t4.version = Yu.version, t4.Syntax = r2, t4.traverse = m2, t4.replace = function(e27, t5) {
      return new f2().replace(e27, t5);
    }, t4.attachComments = function(e27, t5, r3) {
      var i2, a3, o3, s3, u3 = [];
      if (!e27.range) throw new Error("attachComments needs range information");
      if (!r3.length) {
        if (t5.length) {
          for (o3 = 0, a3 = t5.length; o3 < a3; o3 += 1) (i2 = c2(t5[o3])).extendedRange = [0, e27.range[0]], u3.push(i2);
          e27.leadingComments = u3;
        }
        return e27;
      }
      for (o3 = 0, a3 = t5.length; o3 < a3; o3 += 1) u3.push(g2(c2(t5[o3]), r3));
      return s3 = 0, m2(e27, { enter: function(e28) {
        for (var t6; s3 < u3.length && !((t6 = u3[s3]).extendedRange[1] > e28.range[0]); ) t6.extendedRange[1] === e28.range[0] ? (e28.leadingComments || (e28.leadingComments = []), e28.leadingComments.push(t6), u3.splice(s3, 1)) : s3 += 1;
        return s3 === u3.length ? n2.Break : u3[s3].extendedRange[0] > e28.range[1] ? n2.Skip : void 0;
      } }), s3 = 0, m2(e27, { leave: function(e28) {
        for (var t6; s3 < u3.length && (t6 = u3[s3], !(e28.range[1] < t6.extendedRange[0])); ) e28.range[1] === t6.extendedRange[0] ? (e28.trailingComments || (e28.trailingComments = []), e28.trailingComments.push(t6), u3.splice(s3, 1)) : s3 += 1;
        return s3 === u3.length ? n2.Break : u3[s3].extendedRange[0] > e28.range[1] ? n2.Skip : void 0;
      } }), e27;
    }, t4.VisitorKeys = a2, t4.VisitorOption = n2, t4.Controller = f2, t4.cloneEnvironment = function() {
      return e26({});
    }, t4;
  }(t3);
});
var ec = function() {
  function e25(t3, r2, n2, i2, o2, s2, u2) {
    a(this, e25), this.identifier = t3, this.from = r2, this.tainted = false, this.resolved = null, this.flag = n2, this.isWrite() && (this.writeExpr = i2, this.partial = s2, this.init = u2), this.__maybeImplicitGlobal = o2;
  }
  return s(e25, [{ key: "isStatic", value: function() {
    return !this.tainted && this.resolved && this.resolved.scope.isStatic();
  } }, { key: "isWrite", value: function() {
    return !!(this.flag & e25.WRITE);
  } }, { key: "isRead", value: function() {
    return !!(this.flag & e25.READ);
  } }, { key: "isReadOnly", value: function() {
    return this.flag === e25.READ;
  } }, { key: "isWriteOnly", value: function() {
    return this.flag === e25.WRITE;
  } }, { key: "isReadWrite", value: function() {
    return this.flag === e25.RW;
  } }]), e25;
}();
ec.READ = 1, ec.WRITE = 2, ec.RW = 3;
var tc = ec;
var rc = function e19(t3, r2) {
  a(this, e19), this.name = t3, this.identifiers = [], this.references = [], this.defs = [], this.tainted = false, this.stack = true, this.scope = r2;
};
rc.CatchClause = "CatchClause", rc.Parameter = "Parameter", rc.FunctionName = "FunctionName", rc.ClassName = "ClassName", rc.Variable = "Variable", rc.ImportBinding = "ImportBinding", rc.ImplicitGlobalVariable = "ImplicitGlobalVariable";
var nc = rc;
var ic = function e20(t3, r2, n2, i2, o2, s2) {
  a(this, e20), this.type = t3, this.name = r2, this.node = n2, this.parent = i2, this.index = o2, this.kind = s2;
};
var ac = { ParameterDefinition: function(e25) {
  function t3(e26, r2, n2, i2) {
    var o2;
    return a(this, t3), (o2 = v(this, h(t3).call(this, nc.Parameter, e26, r2, null, n2, null))).rest = i2, o2;
  }
  return f(t3, ic), t3;
}(), Definition: ic };
var oc = Zu.Syntax;
var sc = ac.Definition;
function uc(e25) {
  return e25.type === nc.ClassName || e25.type === nc.Variable && "var" !== e25.parent.kind;
}
var cc = function() {
  function e25(t3, r2, n2, i2, o2) {
    a(this, e25), this.type = r2, this.set = /* @__PURE__ */ new Map(), this.taints = /* @__PURE__ */ new Map(), this.dynamic = "global" === this.type || "with" === this.type, this.block = i2, this.through = [], this.variables = [], this.references = [], this.variableScope = "global" === this.type || "function" === this.type || "module" === this.type ? this : n2.variableScope, this.functionExpressionScope = false, this.directCallToEvalScope = false, this.thisFound = false, this.__left = [], this.upper = n2, this.isStrict = function(e26, t4, r3, n3) {
      var i3;
      if (e26.upper && e26.upper.isStrict) return true;
      if (r3) return true;
      if ("class" === e26.type || "module" === e26.type) return true;
      if ("block" === e26.type || "switch" === e26.type) return false;
      if ("function" === e26.type) {
        if (t4.type === oc.ArrowFunctionExpression && t4.body.type !== oc.BlockStatement) return false;
        if (!(i3 = t4.type === oc.Program ? t4 : t4.body)) return false;
      } else {
        if ("global" !== e26.type) return false;
        i3 = t4;
      }
      if (n3) for (var a2 = 0, o3 = i3.body.length; a2 < o3; ++a2) {
        var s2 = i3.body[a2];
        if (s2.type !== oc.DirectiveStatement) break;
        if ('"use strict"' === s2.raw || "'use strict'" === s2.raw) return true;
      }
      else for (var u2 = 0, c2 = i3.body.length; u2 < c2; ++u2) {
        var l2 = i3.body[u2];
        if (l2.type !== oc.ExpressionStatement) break;
        var p2 = l2.expression;
        if (p2.type !== oc.Literal || "string" != typeof p2.value) break;
        if (null !== p2.raw && void 0 !== p2.raw) {
          if ('"use strict"' === p2.raw || "'use strict'" === p2.raw) return true;
        } else if ("use strict" === p2.value) return true;
      }
      return false;
    }(this, i2, o2, t3.__useDirective()), this.childScopes = [], this.upper && this.upper.childScopes.push(this), this.__declaredVariables = t3.__declaredVariables, function(e26, t4) {
      e26.scopes.push(t4);
      var r3 = e26.__nodeToScope.get(t4.block);
      r3 ? r3.push(t4) : e26.__nodeToScope.set(t4.block, [t4]);
    }(t3, this);
  }
  return s(e25, [{ key: "__shouldStaticallyClose", value: function(e26) {
    return !this.dynamic || e26.__isOptimistic();
  } }, { key: "__shouldStaticallyCloseForGlobal", value: function(e26) {
    var t3 = e26.identifier.name;
    if (!this.set.has(t3)) return false;
    var r2 = this.set.get(t3).defs;
    return r2.length > 0 && r2.every(uc);
  } }, { key: "__staticCloseRef", value: function(e26) {
    this.__resolve(e26) || this.__delegateToUpperScope(e26);
  } }, { key: "__dynamicCloseRef", value: function(e26) {
    var t3 = this;
    do {
      t3.through.push(e26), t3 = t3.upper;
    } while (t3);
  } }, { key: "__globalCloseRef", value: function(e26) {
    this.__shouldStaticallyCloseForGlobal(e26) ? this.__staticCloseRef(e26) : this.__dynamicCloseRef(e26);
  } }, { key: "__close", value: function(e26) {
    var t3;
    t3 = this.__shouldStaticallyClose(e26) ? this.__staticCloseRef : "global" !== this.type ? this.__dynamicCloseRef : this.__globalCloseRef;
    for (var r2 = 0, n2 = this.__left.length; r2 < n2; ++r2) {
      var i2 = this.__left[r2];
      t3.call(this, i2);
    }
    return this.__left = null, this.upper;
  } }, { key: "__isValidResolution", value: function(e26, t3) {
    return true;
  } }, { key: "__resolve", value: function(e26) {
    var t3 = e26.identifier.name;
    if (!this.set.has(t3)) return false;
    var r2 = this.set.get(t3);
    return !!this.__isValidResolution(e26, r2) && (r2.references.push(e26), r2.stack = r2.stack && e26.from.variableScope === this.variableScope, e26.tainted && (r2.tainted = true, this.taints.set(r2.name, true)), e26.resolved = r2, true);
  } }, { key: "__delegateToUpperScope", value: function(e26) {
    this.upper && this.upper.__left.push(e26), this.through.push(e26);
  } }, { key: "__addDeclaredVariablesOfNode", value: function(e26, t3) {
    if (null != t3) {
      var r2 = this.__declaredVariables.get(t3);
      null == r2 && (r2 = [], this.__declaredVariables.set(t3, r2)), -1 === r2.indexOf(e26) && r2.push(e26);
    }
  } }, { key: "__defineGeneric", value: function(e26, t3, r2, n2, i2) {
    var a2;
    (a2 = t3.get(e26)) || (a2 = new nc(e26, this), t3.set(e26, a2), r2.push(a2)), i2 && (a2.defs.push(i2), this.__addDeclaredVariablesOfNode(a2, i2.node), this.__addDeclaredVariablesOfNode(a2, i2.parent)), n2 && a2.identifiers.push(n2);
  } }, { key: "__define", value: function(e26, t3) {
    e26 && e26.type === oc.Identifier && this.__defineGeneric(e26.name, this.set, this.variables, e26, t3);
  } }, { key: "__referencing", value: function(e26, t3, r2, n2, i2, a2) {
    if (e26 && e26.type === oc.Identifier && "super" !== e26.name) {
      var o2 = new tc(e26, this, t3 || tc.READ, r2, n2, !!i2, !!a2);
      this.references.push(o2), this.__left.push(o2);
    }
  } }, { key: "__detectEval", value: function() {
    var e26 = this;
    this.directCallToEvalScope = true;
    do {
      e26.dynamic = true, e26 = e26.upper;
    } while (e26);
  } }, { key: "__detectThis", value: function() {
    this.thisFound = true;
  } }, { key: "__isClosed", value: function() {
    return null === this.__left;
  } }, { key: "resolve", value: function(e26) {
    var t3, r2, n2;
    for (Pu(this.__isClosed(), "Scope should be closed."), Pu(e26.type === oc.Identifier, "Target should be identifier."), r2 = 0, n2 = this.references.length; r2 < n2; ++r2) if ((t3 = this.references[r2]).identifier === e26) return t3;
    return null;
  } }, { key: "isStatic", value: function() {
    return !this.dynamic;
  } }, { key: "isArgumentsMaterialized", value: function() {
    return true;
  } }, { key: "isThisMaterialized", value: function() {
    return true;
  } }, { key: "isUsedName", value: function(e26) {
    if (this.set.has(e26)) return true;
    for (var t3 = 0, r2 = this.through.length; t3 < r2; ++t3) if (this.through[t3].identifier.name === e26) return true;
    return false;
  } }]), e25;
}();
var lc = { Scope: cc, GlobalScope: function(e25) {
  function t3(e26, r2) {
    var n2;
    return a(this, t3), (n2 = v(this, h(t3).call(this, e26, "global", null, r2, false))).implicit = { set: /* @__PURE__ */ new Map(), variables: [], left: [] }, n2;
  }
  return f(t3, cc), s(t3, [{ key: "__close", value: function(e26) {
    for (var r2 = [], n2 = 0, i2 = this.__left.length; n2 < i2; ++n2) {
      var a2 = this.__left[n2];
      a2.__maybeImplicitGlobal && !this.set.has(a2.identifier.name) && r2.push(a2.__maybeImplicitGlobal);
    }
    for (var o2 = 0, s2 = r2.length; o2 < s2; ++o2) {
      var u2 = r2[o2];
      this.__defineImplicit(u2.pattern, new sc(nc.ImplicitGlobalVariable, u2.pattern, u2.node, null, null, null));
    }
    return this.implicit.left = this.__left, x(h(t3.prototype), "__close", this).call(this, e26);
  } }, { key: "__defineImplicit", value: function(e26, t4) {
    e26 && e26.type === oc.Identifier && this.__defineGeneric(e26.name, this.implicit.set, this.implicit.variables, e26, t4);
  } }]), t3;
}(), ModuleScope: function(e25) {
  function t3(e26, r2, n2) {
    return a(this, t3), v(this, h(t3).call(this, e26, "module", r2, n2, false));
  }
  return f(t3, cc), t3;
}(), FunctionExpressionNameScope: function(e25) {
  function t3(e26, r2, n2) {
    var i2;
    return a(this, t3), (i2 = v(this, h(t3).call(this, e26, "function-expression-name", r2, n2, false))).__define(n2.id, new sc(nc.FunctionName, n2.id, n2, null, null, null)), i2.functionExpressionScope = true, i2;
  }
  return f(t3, cc), t3;
}(), CatchScope: function(e25) {
  function t3(e26, r2, n2) {
    return a(this, t3), v(this, h(t3).call(this, e26, "catch", r2, n2, false));
  }
  return f(t3, cc), t3;
}(), WithScope: function(e25) {
  function t3(e26, r2, n2) {
    return a(this, t3), v(this, h(t3).call(this, e26, "with", r2, n2, false));
  }
  return f(t3, cc), s(t3, [{ key: "__close", value: function(e26) {
    if (this.__shouldStaticallyClose(e26)) return x(h(t3.prototype), "__close", this).call(this, e26);
    for (var r2 = 0, n2 = this.__left.length; r2 < n2; ++r2) {
      var i2 = this.__left[r2];
      i2.tainted = true, this.__delegateToUpperScope(i2);
    }
    return this.__left = null, this.upper;
  } }]), t3;
}(), BlockScope: function(e25) {
  function t3(e26, r2, n2) {
    return a(this, t3), v(this, h(t3).call(this, e26, "block", r2, n2, false));
  }
  return f(t3, cc), t3;
}(), SwitchScope: function(e25) {
  function t3(e26, r2, n2) {
    return a(this, t3), v(this, h(t3).call(this, e26, "switch", r2, n2, false));
  }
  return f(t3, cc), t3;
}(), FunctionScope: function(e25) {
  function t3(e26, r2, n2, i2) {
    var o2;
    return a(this, t3), (o2 = v(this, h(t3).call(this, e26, "function", r2, n2, i2))).block.type !== oc.ArrowFunctionExpression && o2.__defineArguments(), o2;
  }
  return f(t3, cc), s(t3, [{ key: "isArgumentsMaterialized", value: function() {
    if (this.block.type === oc.ArrowFunctionExpression) return false;
    if (!this.isStatic()) return true;
    var e26 = this.set.get("arguments");
    return Pu(e26, "Always have arguments variable."), e26.tainted || 0 !== e26.references.length;
  } }, { key: "isThisMaterialized", value: function() {
    return !this.isStatic() || this.thisFound;
  } }, { key: "__defineArguments", value: function() {
    this.__defineGeneric("arguments", this.set, this.variables, null, null), this.taints.set("arguments", true);
  } }, { key: "__isValidResolution", value: function(e26, t4) {
    if ("Program" === this.block.type) return true;
    var r2 = this.block.body.range[0];
    return !(t4.scope === this && e26.identifier.range[0] < r2 && t4.defs.every(function(e27) {
      return e27.name.range[0] >= r2;
    }));
  } }]), t3;
}(), ForScope: function(e25) {
  function t3(e26, r2, n2) {
    return a(this, t3), v(this, h(t3).call(this, e26, "for", r2, n2, false));
  }
  return f(t3, cc), t3;
}(), ClassScope: function(e25) {
  function t3(e26, r2, n2) {
    return a(this, t3), v(this, h(t3).call(this, e26, "class", r2, n2, false));
  }
  return f(t3, cc), t3;
}() };
var pc = lc.GlobalScope;
var fc = lc.CatchScope;
var hc = lc.WithScope;
var dc = lc.ModuleScope;
var mc = lc.ClassScope;
var gc = lc.SwitchScope;
var yc = lc.FunctionScope;
var vc = lc.ForScope;
var xc = lc.FunctionExpressionNameScope;
var bc = lc.BlockScope;
var Ec = function() {
  function e25(t3) {
    a(this, e25), this.scopes = [], this.globalScope = null, this.__nodeToScope = /* @__PURE__ */ new WeakMap(), this.__currentScope = null, this.__options = t3, this.__declaredVariables = /* @__PURE__ */ new WeakMap();
  }
  return s(e25, [{ key: "__useDirective", value: function() {
    return this.__options.directive;
  } }, { key: "__isOptimistic", value: function() {
    return this.__options.optimistic;
  } }, { key: "__ignoreEval", value: function() {
    return this.__options.ignoreEval;
  } }, { key: "__isNodejsScope", value: function() {
    return this.__options.nodejsScope;
  } }, { key: "isModule", value: function() {
    return "module" === this.__options.sourceType;
  } }, { key: "isImpliedStrict", value: function() {
    return this.__options.impliedStrict;
  } }, { key: "isStrictModeSupported", value: function() {
    return this.__options.ecmaVersion >= 5;
  } }, { key: "__get", value: function(e26) {
    return this.__nodeToScope.get(e26);
  } }, { key: "getDeclaredVariables", value: function(e26) {
    return this.__declaredVariables.get(e26) || [];
  } }, { key: "acquire", value: function(e26, t3) {
    function r2(e27) {
      return "function" !== e27.type || !e27.functionExpressionScope;
    }
    var n2 = this.__get(e26);
    if (!n2 || 0 === n2.length) return null;
    if (1 === n2.length) return n2[0];
    if (t3) for (var i2 = n2.length - 1; i2 >= 0; --i2) {
      var a2 = n2[i2];
      if (r2(a2)) return a2;
    }
    else for (var o2 = 0, s2 = n2.length; o2 < s2; ++o2) {
      var u2 = n2[o2];
      if (r2(u2)) return u2;
    }
    return null;
  } }, { key: "acquireAll", value: function(e26) {
    return this.__get(e26);
  } }, { key: "release", value: function(e26, t3) {
    var r2 = this.__get(e26);
    if (r2 && r2.length) {
      var n2 = r2[0].upper;
      return n2 ? this.acquire(n2.block, t3) : null;
    }
    return null;
  } }, { key: "attach", value: function() {
  } }, { key: "detach", value: function() {
  } }, { key: "__nestScope", value: function(e26) {
    return e26 instanceof pc && (Pu(null === this.__currentScope), this.globalScope = e26), this.__currentScope = e26, e26;
  } }, { key: "__nestGlobalScope", value: function(e26) {
    return this.__nestScope(new pc(this, e26));
  } }, { key: "__nestBlockScope", value: function(e26) {
    return this.__nestScope(new bc(this, this.__currentScope, e26));
  } }, { key: "__nestFunctionScope", value: function(e26, t3) {
    return this.__nestScope(new yc(this, this.__currentScope, e26, t3));
  } }, { key: "__nestForScope", value: function(e26) {
    return this.__nestScope(new vc(this, this.__currentScope, e26));
  } }, { key: "__nestCatchScope", value: function(e26) {
    return this.__nestScope(new fc(this, this.__currentScope, e26));
  } }, { key: "__nestWithScope", value: function(e26) {
    return this.__nestScope(new hc(this, this.__currentScope, e26));
  } }, { key: "__nestClassScope", value: function(e26) {
    return this.__nestScope(new mc(this, this.__currentScope, e26));
  } }, { key: "__nestSwitchScope", value: function(e26) {
    return this.__nestScope(new gc(this, this.__currentScope, e26));
  } }, { key: "__nestModuleScope", value: function(e26) {
    return this.__nestScope(new dc(this, this.__currentScope, e26));
  } }, { key: "__nestFunctionExpressionNameScope", value: function(e26) {
    return this.__nestScope(new xc(this, this.__currentScope, e26));
  } }, { key: "__isES6", value: function() {
    return this.__options.ecmaVersion >= 6;
  } }]), e25;
}();
var Cc = "https://github.com/estools/esrecurse";
var Sc = { node: ">=4.0" };
var kc = [{ name: "Yusuke Suzuki", email: "utatane.tea@gmail.com", web: "https://github.com/Constellation" }];
var Dc = { type: "git", url: "https://github.com/estools/esrecurse.git" };
var Fc = { estraverse: "^4.1.0" };
var Ac = { "babel-cli": "^6.24.1", "babel-eslint": "^7.2.3", "babel-preset-es2015": "^6.24.1", "babel-register": "^6.24.1", chai: "^4.0.2", esprima: "^4.0.0", gulp: "^3.9.0", "gulp-bump": "^2.7.0", "gulp-eslint": "^4.0.0", "gulp-filter": "^5.0.0", "gulp-git": "^2.4.1", "gulp-mocha": "^4.3.1", "gulp-tag-version": "^1.2.1", jsdoc: "^3.3.0-alpha10", minimist: "^1.1.0" };
var wc = { test: "gulp travis", "unit-test": "gulp test", lint: "gulp lint" };
var _c = { presets: ["es2015"] };
var Tc = { name: "esrecurse", description: "ECMAScript AST recursive visitor", homepage: Cc, main: "esrecurse.js", version: "4.2.1", engines: Sc, maintainers: kc, repository: Dc, dependencies: Fc, devDependencies: Ac, license: "BSD-2-Clause", scripts: wc, babel: _c };
var Pc = n(Object.freeze({ __proto__: null, name: "esrecurse", description: "ECMAScript AST recursive visitor", homepage: Cc, main: "esrecurse.js", version: "4.2.1", engines: Sc, maintainers: kc, repository: Dc, dependencies: Fc, devDependencies: Ac, license: "BSD-2-Clause", scripts: wc, babel: _c, default: Tc }));
var Ic = r(function(e25, t3) {
  !function() {
    var e26 = Zu;
    function r2(e27) {
      return null != e27 && ("object" === i(e27) && "string" == typeof e27.type);
    }
    function n2(t4, r3) {
      return (t4 === e26.Syntax.ObjectExpression || t4 === e26.Syntax.ObjectPattern) && "properties" === r3;
    }
    function a2(t4, r3) {
      r3 = r3 || {}, this.__visitor = t4 || this, this.__childVisitorKeys = r3.childVisitorKeys ? Object.assign({}, e26.VisitorKeys, r3.childVisitorKeys) : e26.VisitorKeys, "iteration" === r3.fallback ? this.__fallback = Object.keys : "function" == typeof r3.fallback && (this.__fallback = r3.fallback);
    }
    a2.prototype.visitChildren = function(t4) {
      var i2, a3, o2, s2, u2, c2, l2;
      if (null != t4) {
        if (i2 = t4.type || e26.Syntax.Property, !(a3 = this.__childVisitorKeys[i2])) {
          if (!this.__fallback) throw new Error("Unknown node type " + i2 + ".");
          a3 = this.__fallback(t4);
        }
        for (o2 = 0, s2 = a3.length; o2 < s2; ++o2) if (l2 = t4[a3[o2]]) if (Array.isArray(l2)) for (u2 = 0, c2 = l2.length; u2 < c2; ++u2) l2[u2] && (r2(l2[u2]) || n2(i2, a3[o2])) && this.visit(l2[u2]);
        else r2(l2) && this.visit(l2);
      }
    }, a2.prototype.visit = function(t4) {
      var r3;
      null != t4 && (r3 = t4.type || e26.Syntax.Property, this.__visitor[r3] ? this.__visitor[r3].call(this, t4) : this.visitChildren(t4));
    }, t3.version = Pc.version, t3.Visitor = a2, t3.visit = function(e27, t4, r3) {
      new a2(t4, r3).visit(e27);
    };
  }();
});
var Bc = (Ic.version, Ic.Visitor, Ic.visit, Zu.Syntax);
var Oc = function(e25) {
  function t3(e26, r2, n2) {
    var i2;
    return a(this, t3), (i2 = v(this, h(t3).call(this, null, e26))).rootPattern = r2, i2.callback = n2, i2.assignments = [], i2.rightHandNodes = [], i2.restElements = [], i2;
  }
  return f(t3, Ic.Visitor), s(t3, null, [{ key: "isPattern", value: function(e26) {
    var t4 = e26.type;
    return t4 === Bc.Identifier || t4 === Bc.ObjectPattern || t4 === Bc.ArrayPattern || t4 === Bc.SpreadElement || t4 === Bc.RestElement || t4 === Bc.AssignmentPattern;
  } }]), s(t3, [{ key: "Identifier", value: function(e26) {
    var t4, r2 = (t4 = this.restElements)[t4.length - 1] || null;
    this.callback(e26, { topLevel: e26 === this.rootPattern, rest: null != r2 && r2.argument === e26, assignments: this.assignments });
  } }, { key: "Property", value: function(e26) {
    e26.computed && this.rightHandNodes.push(e26.key), this.visit(e26.value);
  } }, { key: "ArrayPattern", value: function(e26) {
    for (var t4 = 0, r2 = e26.elements.length; t4 < r2; ++t4) {
      var n2 = e26.elements[t4];
      this.visit(n2);
    }
  } }, { key: "AssignmentPattern", value: function(e26) {
    this.assignments.push(e26), this.visit(e26.left), this.rightHandNodes.push(e26.right), this.assignments.pop();
  } }, { key: "RestElement", value: function(e26) {
    this.restElements.push(e26), this.visit(e26.argument), this.restElements.pop();
  } }, { key: "MemberExpression", value: function(e26) {
    e26.computed && this.rightHandNodes.push(e26.property), this.rightHandNodes.push(e26.object);
  } }, { key: "SpreadElement", value: function(e26) {
    this.visit(e26.argument);
  } }, { key: "ArrayExpression", value: function(e26) {
    e26.elements.forEach(this.visit, this);
  } }, { key: "AssignmentExpression", value: function(e26) {
    this.assignments.push(e26), this.visit(e26.left), this.rightHandNodes.push(e26.right), this.assignments.pop();
  } }, { key: "CallExpression", value: function(e26) {
    var t4 = this;
    e26.arguments.forEach(function(e27) {
      t4.rightHandNodes.push(e27);
    }), this.visit(e26.callee);
  } }]), t3;
}();
var Lc = Zu.Syntax;
var Nc = ac.ParameterDefinition;
var jc = ac.Definition;
var Rc = function(e25) {
  function t3(e26, r2) {
    var n2;
    return a(this, t3), (n2 = v(this, h(t3).call(this, null, r2.options))).declaration = e26, n2.referencer = r2, n2;
  }
  return f(t3, Ic.Visitor), s(t3, [{ key: "visitImport", value: function(e26, t4) {
    var r2 = this;
    this.referencer.visitPattern(e26, function(e27) {
      r2.referencer.currentScope().__define(e27, new jc(nc.ImportBinding, e27, t4, r2.declaration, null, null));
    });
  } }, { key: "ImportNamespaceSpecifier", value: function(e26) {
    var t4 = e26.local || e26.id;
    t4 && this.visitImport(t4, e26);
  } }, { key: "ImportDefaultSpecifier", value: function(e26) {
    var t4 = e26.local || e26.id;
    this.visitImport(t4, e26);
  } }, { key: "ImportSpecifier", value: function(e26) {
    var t4 = e26.local || e26.id;
    e26.name ? this.visitImport(e26.name, e26) : this.visitImport(t4, e26);
  } }]), t3;
}();
var Mc = function(e25) {
  function t3(e26, r2) {
    var n2;
    return a(this, t3), (n2 = v(this, h(t3).call(this, null, e26))).options = e26, n2.scopeManager = r2, n2.parent = null, n2.isInnerMethodDefinition = false, n2;
  }
  return f(t3, Ic.Visitor), s(t3, [{ key: "currentScope", value: function() {
    return this.scopeManager.__currentScope;
  } }, { key: "close", value: function(e26) {
    for (; this.currentScope() && e26 === this.currentScope().block; ) this.scopeManager.__currentScope = this.currentScope().__close(this.scopeManager);
  } }, { key: "pushInnerMethodDefinition", value: function(e26) {
    var t4 = this.isInnerMethodDefinition;
    return this.isInnerMethodDefinition = e26, t4;
  } }, { key: "popInnerMethodDefinition", value: function(e26) {
    this.isInnerMethodDefinition = e26;
  } }, { key: "referencingDefaultValue", value: function(e26, t4, r2, n2) {
    var i2 = this.currentScope();
    t4.forEach(function(t5) {
      i2.__referencing(e26, tc.WRITE, t5.right, r2, e26 !== t5.left, n2);
    });
  } }, { key: "visitPattern", value: function(e26, t4, r2) {
    var n2 = t4, i2 = r2;
    "function" == typeof t4 && (i2 = t4, n2 = { processRightHandNodes: false }), function(e27, t5, r3, n3) {
      var i3 = new Oc(e27, t5, n3);
      i3.visit(t5), null != r3 && i3.rightHandNodes.forEach(r3.visit, r3);
    }(this.options, e26, n2.processRightHandNodes ? this : null, i2);
  } }, { key: "visitFunction", value: function(e26) {
    var t4, r2, n2 = this;
    e26.type === Lc.FunctionDeclaration && this.currentScope().__define(e26.id, new jc(nc.FunctionName, e26.id, e26, null, null, null)), e26.type === Lc.FunctionExpression && e26.id && this.scopeManager.__nestFunctionExpressionNameScope(e26), this.scopeManager.__nestFunctionScope(e26, this.isInnerMethodDefinition);
    var i2 = this;
    function a2(r3, n3) {
      i2.currentScope().__define(r3, new Nc(r3, e26, t4, n3.rest)), i2.referencingDefaultValue(r3, n3.assignments, null, true);
    }
    for (t4 = 0, r2 = e26.params.length; t4 < r2; ++t4) this.visitPattern(e26.params[t4], { processRightHandNodes: true }, a2);
    e26.rest && this.visitPattern({ type: "RestElement", argument: e26.rest }, function(t5) {
      n2.currentScope().__define(t5, new Nc(t5, e26, e26.params.length, true));
    }), e26.body && (e26.body.type === Lc.BlockStatement ? this.visitChildren(e26.body) : this.visit(e26.body)), this.close(e26);
  } }, { key: "visitClass", value: function(e26) {
    e26.type === Lc.ClassDeclaration && this.currentScope().__define(e26.id, new jc(nc.ClassName, e26.id, e26, null, null, null)), this.visit(e26.superClass), this.scopeManager.__nestClassScope(e26), e26.id && this.currentScope().__define(e26.id, new jc(nc.ClassName, e26.id, e26)), this.visit(e26.body), this.close(e26);
  } }, { key: "visitProperty", value: function(e26) {
    var t4;
    e26.computed && this.visit(e26.key);
    var r2 = e26.type === Lc.MethodDefinition;
    r2 && (t4 = this.pushInnerMethodDefinition(true)), this.visit(e26.value), r2 && this.popInnerMethodDefinition(t4);
  } }, { key: "visitForIn", value: function(e26) {
    var t4 = this;
    e26.left.type === Lc.VariableDeclaration && "var" !== e26.left.kind && this.scopeManager.__nestForScope(e26), e26.left.type === Lc.VariableDeclaration ? (this.visit(e26.left), this.visitPattern(e26.left.declarations[0].id, function(r2) {
      t4.currentScope().__referencing(r2, tc.WRITE, e26.right, null, true, true);
    })) : this.visitPattern(e26.left, { processRightHandNodes: true }, function(r2, n2) {
      var i2 = null;
      t4.currentScope().isStrict || (i2 = { pattern: r2, node: e26 }), t4.referencingDefaultValue(r2, n2.assignments, i2, false), t4.currentScope().__referencing(r2, tc.WRITE, e26.right, i2, true, false);
    }), this.visit(e26.right), this.visit(e26.body), this.close(e26);
  } }, { key: "visitVariableDeclaration", value: function(e26, t4, r2, n2) {
    var i2 = this, a2 = r2.declarations[n2], o2 = a2.init;
    this.visitPattern(a2.id, { processRightHandNodes: true }, function(s2, u2) {
      e26.__define(s2, new jc(t4, s2, a2, r2, n2, r2.kind)), i2.referencingDefaultValue(s2, u2.assignments, null, true), o2 && i2.currentScope().__referencing(s2, tc.WRITE, o2, null, !u2.topLevel, true);
    });
  } }, { key: "AssignmentExpression", value: function(e26) {
    var t4 = this;
    Oc.isPattern(e26.left) ? "=" === e26.operator ? this.visitPattern(e26.left, { processRightHandNodes: true }, function(r2, n2) {
      var i2 = null;
      t4.currentScope().isStrict || (i2 = { pattern: r2, node: e26 }), t4.referencingDefaultValue(r2, n2.assignments, i2, false), t4.currentScope().__referencing(r2, tc.WRITE, e26.right, i2, !n2.topLevel, false);
    }) : this.currentScope().__referencing(e26.left, tc.RW, e26.right) : this.visit(e26.left), this.visit(e26.right);
  } }, { key: "CatchClause", value: function(e26) {
    var t4 = this;
    this.scopeManager.__nestCatchScope(e26), this.visitPattern(e26.param, { processRightHandNodes: true }, function(r2, n2) {
      t4.currentScope().__define(r2, new jc(nc.CatchClause, e26.param, e26, null, null, null)), t4.referencingDefaultValue(r2, n2.assignments, null, true);
    }), this.visit(e26.body), this.close(e26);
  } }, { key: "Program", value: function(e26) {
    this.scopeManager.__nestGlobalScope(e26), this.scopeManager.__isNodejsScope() && (this.currentScope().isStrict = false, this.scopeManager.__nestFunctionScope(e26, false)), this.scopeManager.__isES6() && this.scopeManager.isModule() && this.scopeManager.__nestModuleScope(e26), this.scopeManager.isStrictModeSupported() && this.scopeManager.isImpliedStrict() && (this.currentScope().isStrict = true), this.visitChildren(e26), this.close(e26);
  } }, { key: "Identifier", value: function(e26) {
    this.currentScope().__referencing(e26);
  } }, { key: "UpdateExpression", value: function(e26) {
    Oc.isPattern(e26.argument) ? this.currentScope().__referencing(e26.argument, tc.RW, null) : this.visitChildren(e26);
  } }, { key: "MemberExpression", value: function(e26) {
    this.visit(e26.object), e26.computed && this.visit(e26.property);
  } }, { key: "Property", value: function(e26) {
    this.visitProperty(e26);
  } }, { key: "MethodDefinition", value: function(e26) {
    this.visitProperty(e26);
  } }, { key: "BreakStatement", value: function() {
  } }, { key: "ContinueStatement", value: function() {
  } }, { key: "LabeledStatement", value: function(e26) {
    this.visit(e26.body);
  } }, { key: "ForStatement", value: function(e26) {
    e26.init && e26.init.type === Lc.VariableDeclaration && "var" !== e26.init.kind && this.scopeManager.__nestForScope(e26), this.visitChildren(e26), this.close(e26);
  } }, { key: "ClassExpression", value: function(e26) {
    this.visitClass(e26);
  } }, { key: "ClassDeclaration", value: function(e26) {
    this.visitClass(e26);
  } }, { key: "CallExpression", value: function(e26) {
    this.scopeManager.__ignoreEval() || e26.callee.type !== Lc.Identifier || "eval" !== e26.callee.name || this.currentScope().variableScope.__detectEval(), this.visitChildren(e26);
  } }, { key: "BlockStatement", value: function(e26) {
    this.scopeManager.__isES6() && this.scopeManager.__nestBlockScope(e26), this.visitChildren(e26), this.close(e26);
  } }, { key: "ThisExpression", value: function() {
    this.currentScope().variableScope.__detectThis();
  } }, { key: "WithStatement", value: function(e26) {
    this.visit(e26.object), this.scopeManager.__nestWithScope(e26), this.visit(e26.body), this.close(e26);
  } }, { key: "VariableDeclaration", value: function(e26) {
    for (var t4 = "var" === e26.kind ? this.currentScope().variableScope : this.currentScope(), r2 = 0, n2 = e26.declarations.length; r2 < n2; ++r2) {
      var i2 = e26.declarations[r2];
      this.visitVariableDeclaration(t4, nc.Variable, e26, r2), i2.init && this.visit(i2.init);
    }
  } }, { key: "SwitchStatement", value: function(e26) {
    this.visit(e26.discriminant), this.scopeManager.__isES6() && this.scopeManager.__nestSwitchScope(e26);
    for (var t4 = 0, r2 = e26.cases.length; t4 < r2; ++t4) this.visit(e26.cases[t4]);
    this.close(e26);
  } }, { key: "FunctionDeclaration", value: function(e26) {
    this.visitFunction(e26);
  } }, { key: "FunctionExpression", value: function(e26) {
    this.visitFunction(e26);
  } }, { key: "ForOfStatement", value: function(e26) {
    this.visitForIn(e26);
  } }, { key: "ForInStatement", value: function(e26) {
    this.visitForIn(e26);
  } }, { key: "ArrowFunctionExpression", value: function(e26) {
    this.visitFunction(e26);
  } }, { key: "ImportDeclaration", value: function(e26) {
    Pu(this.scopeManager.__isES6() && this.scopeManager.isModule(), "ImportDeclaration should appear when the mode is ES6 and in the module context."), new Rc(e26, this).visit(e26);
  } }, { key: "visitExportDeclaration", value: function(e26) {
    e26.source || (e26.declaration ? this.visit(e26.declaration) : this.visitChildren(e26));
  } }, { key: "ExportDeclaration", value: function(e26) {
    this.visitExportDeclaration(e26);
  } }, { key: "ExportNamedDeclaration", value: function(e26) {
    this.visitExportDeclaration(e26);
  } }, { key: "ExportSpecifier", value: function(e26) {
    var t4 = e26.id || e26.local;
    this.visit(t4);
  } }, { key: "MetaProperty", value: function() {
  } }]), t3;
}();
var Vc = "http://github.com/eslint/eslint-scope";
var Uc = { node: ">=8.0.0" };
var qc = { url: "https://github.com/eslint/eslint-scope/issues" };
var Wc = { test: "node Makefile.js test", lint: "node Makefile.js lint", "generate-release": "eslint-generate-release", "generate-alpharelease": "eslint-generate-prerelease alpha", "generate-betarelease": "eslint-generate-prerelease beta", "generate-rcrelease": "eslint-generate-prerelease rc", "publish-release": "eslint-publish-release" };
var $c = ["LICENSE", "README.md", "lib"];
var Gc = { esrecurse: "^4.1.0", estraverse: "^4.1.1" };
var zc = { "@typescript-eslint/parser": "^1.11.0", chai: "^4.2.0", eslint: "^6.0.1", "eslint-config-eslint": "^5.0.1", "eslint-plugin-node": "^9.1.0", "eslint-release": "^1.0.0", espree: "^6.0.0", istanbul: "^0.4.5", mocha: "^6.1.4", "npm-license": "^0.3.3", shelljs: "^0.8.3", typescript: "^3.5.2" };
var Hc = { name: "eslint-scope", description: "ECMAScript scope analyzer for ESLint", homepage: Vc, main: "lib/index.js", version: "5.0.0", engines: Uc, repository: "eslint/eslint-scope", bugs: qc, license: "BSD-2-Clause", scripts: Wc, files: $c, dependencies: Gc, devDependencies: zc };
var Kc = n(Object.freeze({ __proto__: null, name: "eslint-scope", description: "ECMAScript scope analyzer for ESLint", homepage: Vc, main: "lib/index.js", version: "5.0.0", engines: Uc, repository: "eslint/eslint-scope", bugs: qc, license: "BSD-2-Clause", scripts: Wc, files: $c, dependencies: Gc, devDependencies: zc, default: Hc }));
var Jc = lc.Scope;
var Qc = { version: Kc.version, Reference: tc, Variable: nc, Scope: Jc, ScopeManager: Ec, analyze: function(e25, t3) {
  var r2 = function e26(t4, r3) {
    function n3(e27) {
      return "object" === i(e27) && e27 instanceof Object && !(e27 instanceof Array) && !(e27 instanceof RegExp);
    }
    for (var a2 in r3) if (Object.prototype.hasOwnProperty.call(r3, a2)) {
      var o2 = r3[a2];
      n3(o2) ? n3(t4[a2]) ? e26(t4[a2], o2) : t4[a2] = e26({}, o2) : t4[a2] = o2;
    }
    return t4;
  }({ optimistic: false, directive: false, nodejsScope: false, impliedStrict: false, sourceType: "script", ecmaVersion: 5, childVisitorKeys: null, fallback: "iteration" }, t3), n2 = new Ec(r2);
  return new Mc(r2, n2).visit(e25), Pu(null === n2.__currentScope, "currentScope should be null."), n2;
} };
var Xc = ["left", "right"];
var Yc = ["left", "right"];
var Zc = ["elements"];
var el = ["elements"];
var tl = ["params", "body"];
var rl = ["argument"];
var nl = ["body"];
var il = ["left", "right"];
var al = ["label"];
var ol = ["callee", "arguments"];
var sl = ["param", "body"];
var ul = ["body"];
var cl = ["id", "superClass", "body"];
var ll = ["id", "superClass", "body"];
var pl = ["test", "consequent", "alternate"];
var fl = ["label"];
var hl = [];
var dl = ["body", "test"];
var ml = [];
var gl = ["source"];
var yl = ["declaration"];
var vl = ["declaration", "specifiers", "source"];
var xl = ["exported", "local"];
var bl = ["expression"];
var El = ["argument"];
var Cl = ["argument"];
var Sl = ["init", "test", "update", "body"];
var kl = ["left", "right", "body"];
var Dl = ["left", "right", "body"];
var Fl = ["id", "params", "body"];
var Al = ["id", "params", "body"];
var wl = [];
var _l = ["test", "consequent", "alternate"];
var Tl = ["specifiers", "source"];
var Pl = ["local"];
var Il = ["source"];
var Bl = ["local"];
var Ol = ["imported", "local"];
var Ll = ["name", "value"];
var Nl = ["name"];
var jl = ["openingElement", "children", "closingElement"];
var Rl = [];
var Ml = ["expression"];
var Vl = [];
var Ul = ["object", "property"];
var ql = ["namespace", "name"];
var Wl = ["name", "attributes"];
var $l = ["argument"];
var Gl = [];
var zl = ["openingFragment", "children", "closingFragment"];
var Hl = [];
var Kl = ["label", "body"];
var Jl = ["left", "right"];
var Ql = ["object", "property"];
var Xl = ["meta", "property"];
var Yl = ["key", "value"];
var Zl = ["callee", "arguments"];
var ep = ["properties"];
var tp = ["properties"];
var rp = ["body"];
var np = ["key", "value"];
var ip = ["argument"];
var ap = ["argument"];
var op = ["expressions"];
var sp = ["argument"];
var up = [];
var cp = ["discriminant", "cases"];
var lp = ["test", "consequent"];
var pp = ["tag", "quasi"];
var fp = [];
var hp = ["quasis", "expressions"];
var dp = [];
var mp = ["argument"];
var gp = ["block", "handler", "finalizer"];
var yp = ["argument"];
var vp = ["argument"];
var xp = ["declarations"];
var bp = ["id", "init"];
var Ep = ["test", "body"];
var Cp = ["object", "body"];
var Sp = ["argument"];
var kp = { AssignmentExpression: Xc, AssignmentPattern: Yc, ArrayExpression: Zc, ArrayPattern: el, ArrowFunctionExpression: tl, AwaitExpression: rl, BlockStatement: nl, BinaryExpression: il, BreakStatement: al, CallExpression: ol, CatchClause: sl, ClassBody: ul, ClassDeclaration: cl, ClassExpression: ll, ConditionalExpression: pl, ContinueStatement: fl, DebuggerStatement: hl, DoWhileStatement: dl, EmptyStatement: ml, ExportAllDeclaration: gl, ExportDefaultDeclaration: yl, ExportNamedDeclaration: vl, ExportSpecifier: xl, ExpressionStatement: bl, ExperimentalRestProperty: El, ExperimentalSpreadProperty: Cl, ForStatement: Sl, ForInStatement: kl, ForOfStatement: Dl, FunctionDeclaration: Fl, FunctionExpression: Al, Identifier: wl, IfStatement: _l, ImportDeclaration: Tl, ImportDefaultSpecifier: Pl, ImportExpression: Il, ImportNamespaceSpecifier: Bl, ImportSpecifier: Ol, JSXAttribute: Ll, JSXClosingElement: Nl, JSXElement: jl, JSXEmptyExpression: Rl, JSXExpressionContainer: Ml, JSXIdentifier: Vl, JSXMemberExpression: Ul, JSXNamespacedName: ql, JSXOpeningElement: Wl, JSXSpreadAttribute: $l, JSXText: Gl, JSXFragment: zl, Literal: Hl, LabeledStatement: Kl, LogicalExpression: Jl, MemberExpression: Ql, MetaProperty: Xl, MethodDefinition: Yl, NewExpression: Zl, ObjectExpression: ep, ObjectPattern: tp, Program: rp, Property: np, RestElement: ip, ReturnStatement: ap, SequenceExpression: op, SpreadElement: sp, Super: up, SwitchStatement: cp, SwitchCase: lp, TaggedTemplateExpression: pp, TemplateElement: fp, TemplateLiteral: hp, ThisExpression: dp, ThrowStatement: mp, TryStatement: gp, UnaryExpression: yp, UpdateExpression: vp, VariableDeclaration: xp, VariableDeclarator: bp, WhileStatement: Ep, WithStatement: Cp, YieldExpression: Sp };
var Dp = n(Object.freeze({ __proto__: null, AssignmentExpression: Xc, AssignmentPattern: Yc, ArrayExpression: Zc, ArrayPattern: el, ArrowFunctionExpression: tl, AwaitExpression: rl, BlockStatement: nl, BinaryExpression: il, BreakStatement: al, CallExpression: ol, CatchClause: sl, ClassBody: ul, ClassDeclaration: cl, ClassExpression: ll, ConditionalExpression: pl, ContinueStatement: fl, DebuggerStatement: hl, DoWhileStatement: dl, EmptyStatement: ml, ExportAllDeclaration: gl, ExportDefaultDeclaration: yl, ExportNamedDeclaration: vl, ExportSpecifier: xl, ExpressionStatement: bl, ExperimentalRestProperty: El, ExperimentalSpreadProperty: Cl, ForStatement: Sl, ForInStatement: kl, ForOfStatement: Dl, FunctionDeclaration: Fl, FunctionExpression: Al, Identifier: wl, IfStatement: _l, ImportDeclaration: Tl, ImportDefaultSpecifier: Pl, ImportExpression: Il, ImportNamespaceSpecifier: Bl, ImportSpecifier: Ol, JSXAttribute: Ll, JSXClosingElement: Nl, JSXElement: jl, JSXEmptyExpression: Rl, JSXExpressionContainer: Ml, JSXIdentifier: Vl, JSXMemberExpression: Ul, JSXNamespacedName: ql, JSXOpeningElement: Wl, JSXSpreadAttribute: $l, JSXText: Gl, JSXFragment: zl, Literal: Hl, LabeledStatement: Kl, LogicalExpression: Jl, MemberExpression: Ql, MetaProperty: Xl, MethodDefinition: Yl, NewExpression: Zl, ObjectExpression: ep, ObjectPattern: tp, Program: rp, Property: np, RestElement: ip, ReturnStatement: ap, SequenceExpression: op, SpreadElement: sp, Super: up, SwitchStatement: cp, SwitchCase: lp, TaggedTemplateExpression: pp, TemplateElement: fp, TemplateLiteral: hp, ThisExpression: dp, ThrowStatement: mp, TryStatement: gp, UnaryExpression: yp, UpdateExpression: vp, VariableDeclaration: xp, VariableDeclarator: bp, WhileStatement: Ep, WithStatement: Cp, YieldExpression: Sp, default: kp }));
var Fp = Object.freeze(Object.keys(Dp));
var Ap = true;
var wp = false;
var _p = void 0;
try {
  for (Pp = Fp[Symbol.iterator](); !(Ap = (Tp = Pp.next()).done); Ap = true) {
    Ip = Tp.value;
    Object.freeze(Dp[Ip]);
  }
} catch (e25) {
  wp = true, _p = e25;
} finally {
  try {
    Ap || null == Pp.return || Pp.return();
  } finally {
    if (wp) throw _p;
  }
}
var Ip;
var Tp;
var Pp;
Object.freeze(Dp);
var Bp = /* @__PURE__ */ new Set(["parent", "leadingComments", "trailingComments"]);
function Op(e25) {
  return !Bp.has(e25) && "_" !== e25[0];
}
var Lp = Object.freeze({ KEYS: Dp, getKeys: function(e25) {
  return Object.keys(e25).filter(Op);
}, unionWith: function(e25) {
  for (var t3 = Object.assign({}, Dp), r2 = 0, n2 = Object.keys(e25); r2 < n2.length; r2++) {
    var i2 = n2[r2];
    if (t3.hasOwnProperty(i2)) {
      var a2 = new Set(e25[i2]), o2 = true, s2 = false, u2 = void 0;
      try {
        for (var c2, l2 = t3[i2][Symbol.iterator](); !(o2 = (c2 = l2.next()).done); o2 = true) {
          var p2 = c2.value;
          a2.add(p2);
        }
      } catch (e26) {
        s2 = true, u2 = e26;
      } finally {
        try {
          o2 || null == l2.return || l2.return();
        } finally {
          if (s2) throw u2;
        }
      }
      t3[i2] = Object.freeze(Array.from(a2));
    } else t3[i2] = Object.freeze(Array.from(e25[i2]));
  }
  return Object.freeze(t3);
} });
var Np = { 3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile", 5: "class enum extends super const export import", 6: "enum", strict: "implements interface let package private protected public static yield", strictBind: "eval arguments" };
var jp = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
var Rp = { 5: jp, "5module": jp + " export import", 6: jp + " const class extends export import super" };
var Mp = /^in(stanceof)?$/;
var Vp = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7C6\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB67\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
var Up = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
var qp = new RegExp("[" + Vp + "]");
var Wp = new RegExp("[" + Vp + Up + "]");
Vp = Up = null;
var $p = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 477, 28, 11, 0, 9, 21, 155, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 12, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 0, 33, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 0, 161, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 270, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 754, 9486, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541];
var Gp = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 525, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 232, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 792487, 239];
function zp(e25, t3) {
  for (var r2 = 65536, n2 = 0; n2 < t3.length; n2 += 2) {
    if ((r2 += t3[n2]) > e25) return false;
    if ((r2 += t3[n2 + 1]) >= e25) return true;
  }
}
function Hp(e25, t3) {
  return e25 < 65 ? 36 === e25 : e25 < 91 || (e25 < 97 ? 95 === e25 : e25 < 123 || (e25 <= 65535 ? e25 >= 170 && qp.test(String.fromCharCode(e25)) : false !== t3 && zp(e25, $p)));
}
function Kp(e25, t3) {
  return e25 < 48 ? 36 === e25 : e25 < 58 || !(e25 < 65) && (e25 < 91 || (e25 < 97 ? 95 === e25 : e25 < 123 || (e25 <= 65535 ? e25 >= 170 && Wp.test(String.fromCharCode(e25)) : false !== t3 && (zp(e25, $p) || zp(e25, Gp)))));
}
var Jp = function(e25, t3) {
  void 0 === t3 && (t3 = {}), this.label = e25, this.keyword = t3.keyword, this.beforeExpr = !!t3.beforeExpr, this.startsExpr = !!t3.startsExpr, this.isLoop = !!t3.isLoop, this.isAssign = !!t3.isAssign, this.prefix = !!t3.prefix, this.postfix = !!t3.postfix, this.binop = t3.binop || null, this.updateContext = null;
};
function Qp(e25, t3) {
  return new Jp(e25, { beforeExpr: true, binop: t3 });
}
var Xp = { beforeExpr: true };
var Yp = { startsExpr: true };
var Zp = {};
function ef(e25, t3) {
  return void 0 === t3 && (t3 = {}), t3.keyword = e25, Zp[e25] = new Jp(e25, t3);
}
var tf = { num: new Jp("num", Yp), regexp: new Jp("regexp", Yp), string: new Jp("string", Yp), name: new Jp("name", Yp), eof: new Jp("eof"), bracketL: new Jp("[", { beforeExpr: true, startsExpr: true }), bracketR: new Jp("]"), braceL: new Jp("{", { beforeExpr: true, startsExpr: true }), braceR: new Jp("}"), parenL: new Jp("(", { beforeExpr: true, startsExpr: true }), parenR: new Jp(")"), comma: new Jp(",", Xp), semi: new Jp(";", Xp), colon: new Jp(":", Xp), dot: new Jp("."), question: new Jp("?", Xp), arrow: new Jp("=>", Xp), template: new Jp("template"), invalidTemplate: new Jp("invalidTemplate"), ellipsis: new Jp("...", Xp), backQuote: new Jp("`", Yp), dollarBraceL: new Jp("${", { beforeExpr: true, startsExpr: true }), eq: new Jp("=", { beforeExpr: true, isAssign: true }), assign: new Jp("_=", { beforeExpr: true, isAssign: true }), incDec: new Jp("++/--", { prefix: true, postfix: true, startsExpr: true }), prefix: new Jp("!/~", { beforeExpr: true, prefix: true, startsExpr: true }), logicalOR: Qp("||", 1), logicalAND: Qp("&&", 2), bitwiseOR: Qp("|", 3), bitwiseXOR: Qp("^", 4), bitwiseAND: Qp("&", 5), equality: Qp("==/!=/===/!==", 6), relational: Qp("</>/<=/>=", 7), bitShift: Qp("<</>>/>>>", 8), plusMin: new Jp("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }), modulo: Qp("%", 10), star: Qp("*", 10), slash: Qp("/", 10), starstar: new Jp("**", { beforeExpr: true }), _break: ef("break"), _case: ef("case", Xp), _catch: ef("catch"), _continue: ef("continue"), _debugger: ef("debugger"), _default: ef("default", Xp), _do: ef("do", { isLoop: true, beforeExpr: true }), _else: ef("else", Xp), _finally: ef("finally"), _for: ef("for", { isLoop: true }), _function: ef("function", Yp), _if: ef("if"), _return: ef("return", Xp), _switch: ef("switch"), _throw: ef("throw", Xp), _try: ef("try"), _var: ef("var"), _const: ef("const"), _while: ef("while", { isLoop: true }), _with: ef("with"), _new: ef("new", { beforeExpr: true, startsExpr: true }), _this: ef("this", Yp), _super: ef("super", Yp), _class: ef("class", Yp), _extends: ef("extends", Xp), _export: ef("export"), _import: ef("import", Yp), _null: ef("null", Yp), _true: ef("true", Yp), _false: ef("false", Yp), _in: ef("in", { beforeExpr: true, binop: 7 }), _instanceof: ef("instanceof", { beforeExpr: true, binop: 7 }), _typeof: ef("typeof", { beforeExpr: true, prefix: true, startsExpr: true }), _void: ef("void", { beforeExpr: true, prefix: true, startsExpr: true }), _delete: ef("delete", { beforeExpr: true, prefix: true, startsExpr: true }) };
var rf = /\r\n?|\n|\u2028|\u2029/;
var nf = new RegExp(rf.source, "g");
function af(e25, t3) {
  return 10 === e25 || 13 === e25 || !t3 && (8232 === e25 || 8233 === e25);
}
var of = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
var sf = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
var uf = Object.prototype;
var cf = uf.hasOwnProperty;
var lf = uf.toString;
function pf(e25, t3) {
  return cf.call(e25, t3);
}
var ff = Array.isArray || function(e25) {
  return "[object Array]" === lf.call(e25);
};
function hf(e25) {
  return new RegExp("^(?:" + e25.replace(/ /g, "|") + ")$");
}
var df = function(e25, t3) {
  this.line = e25, this.column = t3;
};
df.prototype.offset = function(e25) {
  return new df(this.line, this.column + e25);
};
var mf = function(e25, t3, r2) {
  this.start = t3, this.end = r2, null !== e25.sourceFile && (this.source = e25.sourceFile);
};
function gf(e25, t3) {
  for (var r2 = 1, n2 = 0; ; ) {
    nf.lastIndex = n2;
    var i2 = nf.exec(e25);
    if (!(i2 && i2.index < t3)) return new df(r2, t3 - n2);
    ++r2, n2 = i2.index + i2[0].length;
  }
}
var yf = { ecmaVersion: 10, sourceType: "script", onInsertedSemicolon: null, onTrailingComma: null, allowReserved: null, allowReturnOutsideFunction: false, allowImportExportEverywhere: false, allowAwaitOutsideFunction: false, allowHashBang: false, locations: false, onToken: null, onComment: null, ranges: false, program: null, sourceFile: null, directSourceFile: null, preserveParens: false };
function vf(e25) {
  var t3 = {};
  for (var r2 in yf) t3[r2] = e25 && pf(e25, r2) ? e25[r2] : yf[r2];
  if (t3.ecmaVersion >= 2015 && (t3.ecmaVersion -= 2009), null == t3.allowReserved && (t3.allowReserved = t3.ecmaVersion < 5), ff(t3.onToken)) {
    var n2 = t3.onToken;
    t3.onToken = function(e26) {
      return n2.push(e26);
    };
  }
  return ff(t3.onComment) && (t3.onComment = /* @__PURE__ */ function(e26, t4) {
    return function(r3, n3, i2, a2, o2, s2) {
      var u2 = { type: r3 ? "Block" : "Line", value: n3, start: i2, end: a2 };
      e26.locations && (u2.loc = new mf(this, o2, s2)), e26.ranges && (u2.range = [i2, a2]), t4.push(u2);
    };
  }(t3, t3.onComment)), t3;
}
var xf = 2;
var bf = 1 | xf;
var Ef = 4;
var Cf = 8;
function Sf(e25, t3) {
  return xf | (e25 ? Ef : 0) | (t3 ? Cf : 0);
}
var kf = function(e25, t3, r2) {
  this.options = e25 = vf(e25), this.sourceFile = e25.sourceFile, this.keywords = hf(Rp[e25.ecmaVersion >= 6 ? 6 : "module" === e25.sourceType ? "5module" : 5]);
  var n2 = "";
  if (true !== e25.allowReserved) {
    for (var i2 = e25.ecmaVersion; !(n2 = Np[i2]); i2--) ;
    "module" === e25.sourceType && (n2 += " await");
  }
  this.reservedWords = hf(n2);
  var a2 = (n2 ? n2 + " " : "") + Np.strict;
  this.reservedWordsStrict = hf(a2), this.reservedWordsStrictBind = hf(a2 + " " + Np.strictBind), this.input = String(t3), this.containsEsc = false, r2 ? (this.pos = r2, this.lineStart = this.input.lastIndexOf("\n", r2 - 1) + 1, this.curLine = this.input.slice(0, this.lineStart).split(rf).length) : (this.pos = this.lineStart = 0, this.curLine = 1), this.type = tf.eof, this.value = null, this.start = this.end = this.pos, this.startLoc = this.endLoc = this.curPosition(), this.lastTokEndLoc = this.lastTokStartLoc = null, this.lastTokStart = this.lastTokEnd = this.pos, this.context = this.initialContext(), this.exprAllowed = true, this.inModule = "module" === e25.sourceType, this.strict = this.inModule || this.strictDirective(this.pos), this.potentialArrowAt = -1, this.yieldPos = this.awaitPos = this.awaitIdentPos = 0, this.labels = [], this.undefinedExports = {}, 0 === this.pos && e25.allowHashBang && "#!" === this.input.slice(0, 2) && this.skipLineComment(2), this.scopeStack = [], this.enterScope(1), this.regexpState = null;
};
var Df = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true } };
kf.prototype.parse = function() {
  var e25 = this.options.program || this.startNode();
  return this.nextToken(), this.parseTopLevel(e25);
}, Df.inFunction.get = function() {
  return (this.currentVarScope().flags & xf) > 0;
}, Df.inGenerator.get = function() {
  return (this.currentVarScope().flags & Cf) > 0;
}, Df.inAsync.get = function() {
  return (this.currentVarScope().flags & Ef) > 0;
}, Df.allowSuper.get = function() {
  return (64 & this.currentThisScope().flags) > 0;
}, Df.allowDirectSuper.get = function() {
  return (128 & this.currentThisScope().flags) > 0;
}, Df.treatFunctionsAsVar.get = function() {
  return this.treatFunctionsAsVarInScope(this.currentScope());
}, kf.prototype.inNonArrowFunction = function() {
  return (this.currentThisScope().flags & xf) > 0;
}, kf.extend = function() {
  for (var e25 = [], t3 = arguments.length; t3--; ) e25[t3] = arguments[t3];
  for (var r2 = this, n2 = 0; n2 < e25.length; n2++) r2 = e25[n2](r2);
  return r2;
}, kf.parse = function(e25, t3) {
  return new this(t3, e25).parse();
}, kf.parseExpressionAt = function(e25, t3, r2) {
  var n2 = new this(r2, e25, t3);
  return n2.nextToken(), n2.parseExpression();
}, kf.tokenizer = function(e25, t3) {
  return new this(t3, e25);
}, Object.defineProperties(kf.prototype, Df);
var Ff = kf.prototype;
var Af = /^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)")/;
function wf() {
  this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
}
Ff.strictDirective = function(e25) {
  for (; ; ) {
    sf.lastIndex = e25, e25 += sf.exec(this.input)[0].length;
    var t3 = Af.exec(this.input.slice(e25));
    if (!t3) return false;
    if ("use strict" === (t3[1] || t3[2])) return true;
    e25 += t3[0].length, sf.lastIndex = e25, e25 += sf.exec(this.input)[0].length, ";" === this.input[e25] && e25++;
  }
}, Ff.eat = function(e25) {
  return this.type === e25 && (this.next(), true);
}, Ff.isContextual = function(e25) {
  return this.type === tf.name && this.value === e25 && !this.containsEsc;
}, Ff.eatContextual = function(e25) {
  return !!this.isContextual(e25) && (this.next(), true);
}, Ff.expectContextual = function(e25) {
  this.eatContextual(e25) || this.unexpected();
}, Ff.canInsertSemicolon = function() {
  return this.type === tf.eof || this.type === tf.braceR || rf.test(this.input.slice(this.lastTokEnd, this.start));
}, Ff.insertSemicolon = function() {
  if (this.canInsertSemicolon()) return this.options.onInsertedSemicolon && this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc), true;
}, Ff.semicolon = function() {
  this.eat(tf.semi) || this.insertSemicolon() || this.unexpected();
}, Ff.afterTrailingComma = function(e25, t3) {
  if (this.type === e25) return this.options.onTrailingComma && this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc), t3 || this.next(), true;
}, Ff.expect = function(e25) {
  this.eat(e25) || this.unexpected();
}, Ff.unexpected = function(e25) {
  this.raise(null != e25 ? e25 : this.start, "Unexpected token");
}, Ff.checkPatternErrors = function(e25, t3) {
  if (e25) {
    e25.trailingComma > -1 && this.raiseRecoverable(e25.trailingComma, "Comma is not permitted after the rest element");
    var r2 = t3 ? e25.parenthesizedAssign : e25.parenthesizedBind;
    r2 > -1 && this.raiseRecoverable(r2, "Parenthesized pattern");
  }
}, Ff.checkExpressionErrors = function(e25, t3) {
  if (!e25) return false;
  var r2 = e25.shorthandAssign, n2 = e25.doubleProto;
  if (!t3) return r2 >= 0 || n2 >= 0;
  r2 >= 0 && this.raise(r2, "Shorthand property assignments are valid only in destructuring patterns"), n2 >= 0 && this.raiseRecoverable(n2, "Redefinition of __proto__ property");
}, Ff.checkYieldAwaitInDefaultParams = function() {
  this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos) && this.raise(this.yieldPos, "Yield expression cannot be a default value"), this.awaitPos && this.raise(this.awaitPos, "Await expression cannot be a default value");
}, Ff.isSimpleAssignTarget = function(e25) {
  return "ParenthesizedExpression" === e25.type ? this.isSimpleAssignTarget(e25.expression) : "Identifier" === e25.type || "MemberExpression" === e25.type;
};
var _f = kf.prototype;
_f.parseTopLevel = function(e25) {
  var t3 = {};
  for (e25.body || (e25.body = []); this.type !== tf.eof; ) {
    var r2 = this.parseStatement(null, true, t3);
    e25.body.push(r2);
  }
  if (this.inModule) for (var n2 = 0, i2 = Object.keys(this.undefinedExports); n2 < i2.length; n2 += 1) {
    var a2 = i2[n2];
    this.raiseRecoverable(this.undefinedExports[a2].start, "Export '" + a2 + "' is not defined");
  }
  return this.adaptDirectivePrologue(e25.body), this.next(), e25.sourceType = this.options.sourceType, this.finishNode(e25, "Program");
};
var Tf = { kind: "loop" };
var Pf = { kind: "switch" };
_f.isLet = function(e25) {
  if (this.options.ecmaVersion < 6 || !this.isContextual("let")) return false;
  sf.lastIndex = this.pos;
  var t3 = sf.exec(this.input), r2 = this.pos + t3[0].length, n2 = this.input.charCodeAt(r2);
  if (91 === n2) return true;
  if (e25) return false;
  if (123 === n2) return true;
  if (Hp(n2, true)) {
    for (var i2 = r2 + 1; Kp(this.input.charCodeAt(i2), true); ) ++i2;
    var a2 = this.input.slice(r2, i2);
    if (!Mp.test(a2)) return true;
  }
  return false;
}, _f.isAsyncFunction = function() {
  if (this.options.ecmaVersion < 8 || !this.isContextual("async")) return false;
  sf.lastIndex = this.pos;
  var e25 = sf.exec(this.input), t3 = this.pos + e25[0].length;
  return !(rf.test(this.input.slice(this.pos, t3)) || "function" !== this.input.slice(t3, t3 + 8) || t3 + 8 !== this.input.length && Kp(this.input.charAt(t3 + 8)));
}, _f.parseStatement = function(e25, t3, r2) {
  var n2, i2 = this.type, a2 = this.startNode();
  switch (this.isLet(e25) && (i2 = tf._var, n2 = "let"), i2) {
    case tf._break:
    case tf._continue:
      return this.parseBreakContinueStatement(a2, i2.keyword);
    case tf._debugger:
      return this.parseDebuggerStatement(a2);
    case tf._do:
      return this.parseDoStatement(a2);
    case tf._for:
      return this.parseForStatement(a2);
    case tf._function:
      return e25 && (this.strict || "if" !== e25 && "label" !== e25) && this.options.ecmaVersion >= 6 && this.unexpected(), this.parseFunctionStatement(a2, false, !e25);
    case tf._class:
      return e25 && this.unexpected(), this.parseClass(a2, true);
    case tf._if:
      return this.parseIfStatement(a2);
    case tf._return:
      return this.parseReturnStatement(a2);
    case tf._switch:
      return this.parseSwitchStatement(a2);
    case tf._throw:
      return this.parseThrowStatement(a2);
    case tf._try:
      return this.parseTryStatement(a2);
    case tf._const:
    case tf._var:
      return n2 = n2 || this.value, e25 && "var" !== n2 && this.unexpected(), this.parseVarStatement(a2, n2);
    case tf._while:
      return this.parseWhileStatement(a2);
    case tf._with:
      return this.parseWithStatement(a2);
    case tf.braceL:
      return this.parseBlock(true, a2);
    case tf.semi:
      return this.parseEmptyStatement(a2);
    case tf._export:
    case tf._import:
      if (this.options.ecmaVersion > 10 && i2 === tf._import) {
        sf.lastIndex = this.pos;
        var o2 = sf.exec(this.input), s2 = this.pos + o2[0].length;
        if (40 === this.input.charCodeAt(s2)) return this.parseExpressionStatement(a2, this.parseExpression());
      }
      return this.options.allowImportExportEverywhere || (t3 || this.raise(this.start, "'import' and 'export' may only appear at the top level"), this.inModule || this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")), i2 === tf._import ? this.parseImport(a2) : this.parseExport(a2, r2);
    default:
      if (this.isAsyncFunction()) return e25 && this.unexpected(), this.next(), this.parseFunctionStatement(a2, true, !e25);
      var u2 = this.value, c2 = this.parseExpression();
      return i2 === tf.name && "Identifier" === c2.type && this.eat(tf.colon) ? this.parseLabeledStatement(a2, u2, c2, e25) : this.parseExpressionStatement(a2, c2);
  }
}, _f.parseBreakContinueStatement = function(e25, t3) {
  var r2 = "break" === t3;
  this.next(), this.eat(tf.semi) || this.insertSemicolon() ? e25.label = null : this.type !== tf.name ? this.unexpected() : (e25.label = this.parseIdent(), this.semicolon());
  for (var n2 = 0; n2 < this.labels.length; ++n2) {
    var i2 = this.labels[n2];
    if (null == e25.label || i2.name === e25.label.name) {
      if (null != i2.kind && (r2 || "loop" === i2.kind)) break;
      if (e25.label && r2) break;
    }
  }
  return n2 === this.labels.length && this.raise(e25.start, "Unsyntactic " + t3), this.finishNode(e25, r2 ? "BreakStatement" : "ContinueStatement");
}, _f.parseDebuggerStatement = function(e25) {
  return this.next(), this.semicolon(), this.finishNode(e25, "DebuggerStatement");
}, _f.parseDoStatement = function(e25) {
  return this.next(), this.labels.push(Tf), e25.body = this.parseStatement("do"), this.labels.pop(), this.expect(tf._while), e25.test = this.parseParenExpression(), this.options.ecmaVersion >= 6 ? this.eat(tf.semi) : this.semicolon(), this.finishNode(e25, "DoWhileStatement");
}, _f.parseForStatement = function(e25) {
  this.next();
  var t3 = this.options.ecmaVersion >= 9 && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual("await") ? this.lastTokStart : -1;
  if (this.labels.push(Tf), this.enterScope(0), this.expect(tf.parenL), this.type === tf.semi) return t3 > -1 && this.unexpected(t3), this.parseFor(e25, null);
  var r2 = this.isLet();
  if (this.type === tf._var || this.type === tf._const || r2) {
    var n2 = this.startNode(), i2 = r2 ? "let" : this.value;
    return this.next(), this.parseVar(n2, true, i2), this.finishNode(n2, "VariableDeclaration"), (this.type === tf._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && 1 === n2.declarations.length ? (this.options.ecmaVersion >= 9 && (this.type === tf._in ? t3 > -1 && this.unexpected(t3) : e25.await = t3 > -1), this.parseForIn(e25, n2)) : (t3 > -1 && this.unexpected(t3), this.parseFor(e25, n2));
  }
  var a2 = new wf(), o2 = this.parseExpression(true, a2);
  return this.type === tf._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? (this.options.ecmaVersion >= 9 && (this.type === tf._in ? t3 > -1 && this.unexpected(t3) : e25.await = t3 > -1), this.toAssignable(o2, false, a2), this.checkLVal(o2), this.parseForIn(e25, o2)) : (this.checkExpressionErrors(a2, true), t3 > -1 && this.unexpected(t3), this.parseFor(e25, o2));
}, _f.parseFunctionStatement = function(e25, t3, r2) {
  return this.next(), this.parseFunction(e25, Bf | (r2 ? 0 : Of), false, t3);
}, _f.parseIfStatement = function(e25) {
  return this.next(), e25.test = this.parseParenExpression(), e25.consequent = this.parseStatement("if"), e25.alternate = this.eat(tf._else) ? this.parseStatement("if") : null, this.finishNode(e25, "IfStatement");
}, _f.parseReturnStatement = function(e25) {
  return this.inFunction || this.options.allowReturnOutsideFunction || this.raise(this.start, "'return' outside of function"), this.next(), this.eat(tf.semi) || this.insertSemicolon() ? e25.argument = null : (e25.argument = this.parseExpression(), this.semicolon()), this.finishNode(e25, "ReturnStatement");
}, _f.parseSwitchStatement = function(e25) {
  var t3;
  this.next(), e25.discriminant = this.parseParenExpression(), e25.cases = [], this.expect(tf.braceL), this.labels.push(Pf), this.enterScope(0);
  for (var r2 = false; this.type !== tf.braceR; ) if (this.type === tf._case || this.type === tf._default) {
    var n2 = this.type === tf._case;
    t3 && this.finishNode(t3, "SwitchCase"), e25.cases.push(t3 = this.startNode()), t3.consequent = [], this.next(), n2 ? t3.test = this.parseExpression() : (r2 && this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"), r2 = true, t3.test = null), this.expect(tf.colon);
  } else t3 || this.unexpected(), t3.consequent.push(this.parseStatement(null));
  return this.exitScope(), t3 && this.finishNode(t3, "SwitchCase"), this.next(), this.labels.pop(), this.finishNode(e25, "SwitchStatement");
}, _f.parseThrowStatement = function(e25) {
  return this.next(), rf.test(this.input.slice(this.lastTokEnd, this.start)) && this.raise(this.lastTokEnd, "Illegal newline after throw"), e25.argument = this.parseExpression(), this.semicolon(), this.finishNode(e25, "ThrowStatement");
};
var If = [];
_f.parseTryStatement = function(e25) {
  if (this.next(), e25.block = this.parseBlock(), e25.handler = null, this.type === tf._catch) {
    var t3 = this.startNode();
    if (this.next(), this.eat(tf.parenL)) {
      t3.param = this.parseBindingAtom();
      var r2 = "Identifier" === t3.param.type;
      this.enterScope(r2 ? 32 : 0), this.checkLVal(t3.param, r2 ? 4 : 2), this.expect(tf.parenR);
    } else this.options.ecmaVersion < 10 && this.unexpected(), t3.param = null, this.enterScope(0);
    t3.body = this.parseBlock(false), this.exitScope(), e25.handler = this.finishNode(t3, "CatchClause");
  }
  return e25.finalizer = this.eat(tf._finally) ? this.parseBlock() : null, e25.handler || e25.finalizer || this.raise(e25.start, "Missing catch or finally clause"), this.finishNode(e25, "TryStatement");
}, _f.parseVarStatement = function(e25, t3) {
  return this.next(), this.parseVar(e25, false, t3), this.semicolon(), this.finishNode(e25, "VariableDeclaration");
}, _f.parseWhileStatement = function(e25) {
  return this.next(), e25.test = this.parseParenExpression(), this.labels.push(Tf), e25.body = this.parseStatement("while"), this.labels.pop(), this.finishNode(e25, "WhileStatement");
}, _f.parseWithStatement = function(e25) {
  return this.strict && this.raise(this.start, "'with' in strict mode"), this.next(), e25.object = this.parseParenExpression(), e25.body = this.parseStatement("with"), this.finishNode(e25, "WithStatement");
}, _f.parseEmptyStatement = function(e25) {
  return this.next(), this.finishNode(e25, "EmptyStatement");
}, _f.parseLabeledStatement = function(e25, t3, r2, n2) {
  for (var i2 = 0, a2 = this.labels; i2 < a2.length; i2 += 1) {
    a2[i2].name === t3 && this.raise(r2.start, "Label '" + t3 + "' is already declared");
  }
  for (var o2 = this.type.isLoop ? "loop" : this.type === tf._switch ? "switch" : null, s2 = this.labels.length - 1; s2 >= 0; s2--) {
    var u2 = this.labels[s2];
    if (u2.statementStart !== e25.start) break;
    u2.statementStart = this.start, u2.kind = o2;
  }
  return this.labels.push({ name: t3, kind: o2, statementStart: this.start }), e25.body = this.parseStatement(n2 ? -1 === n2.indexOf("label") ? n2 + "label" : n2 : "label"), this.labels.pop(), e25.label = r2, this.finishNode(e25, "LabeledStatement");
}, _f.parseExpressionStatement = function(e25, t3) {
  return e25.expression = t3, this.semicolon(), this.finishNode(e25, "ExpressionStatement");
}, _f.parseBlock = function(e25, t3) {
  for (void 0 === e25 && (e25 = true), void 0 === t3 && (t3 = this.startNode()), t3.body = [], this.expect(tf.braceL), e25 && this.enterScope(0); !this.eat(tf.braceR); ) {
    var r2 = this.parseStatement(null);
    t3.body.push(r2);
  }
  return e25 && this.exitScope(), this.finishNode(t3, "BlockStatement");
}, _f.parseFor = function(e25, t3) {
  return e25.init = t3, this.expect(tf.semi), e25.test = this.type === tf.semi ? null : this.parseExpression(), this.expect(tf.semi), e25.update = this.type === tf.parenR ? null : this.parseExpression(), this.expect(tf.parenR), e25.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(e25, "ForStatement");
}, _f.parseForIn = function(e25, t3) {
  var r2 = this.type === tf._in;
  return this.next(), "VariableDeclaration" === t3.type && null != t3.declarations[0].init && (!r2 || this.options.ecmaVersion < 8 || this.strict || "var" !== t3.kind || "Identifier" !== t3.declarations[0].id.type) ? this.raise(t3.start, (r2 ? "for-in" : "for-of") + " loop variable declaration may not have an initializer") : "AssignmentPattern" === t3.type && this.raise(t3.start, "Invalid left-hand side in for-loop"), e25.left = t3, e25.right = r2 ? this.parseExpression() : this.parseMaybeAssign(), this.expect(tf.parenR), e25.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(e25, r2 ? "ForInStatement" : "ForOfStatement");
}, _f.parseVar = function(e25, t3, r2) {
  for (e25.declarations = [], e25.kind = r2; ; ) {
    var n2 = this.startNode();
    if (this.parseVarId(n2, r2), this.eat(tf.eq) ? n2.init = this.parseMaybeAssign(t3) : "const" !== r2 || this.type === tf._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? "Identifier" === n2.id.type || t3 && (this.type === tf._in || this.isContextual("of")) ? n2.init = null : this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value") : this.unexpected(), e25.declarations.push(this.finishNode(n2, "VariableDeclarator")), !this.eat(tf.comma)) break;
  }
  return e25;
}, _f.parseVarId = function(e25, t3) {
  e25.id = this.parseBindingAtom(), this.checkLVal(e25.id, "var" === t3 ? 1 : 2, false);
};
var Bf = 1;
var Of = 2;
_f.parseFunction = function(e25, t3, r2, n2) {
  this.initFunction(e25), (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !n2) && (this.type === tf.star && t3 & Of && this.unexpected(), e25.generator = this.eat(tf.star)), this.options.ecmaVersion >= 8 && (e25.async = !!n2), t3 & Bf && (e25.id = 4 & t3 && this.type !== tf.name ? null : this.parseIdent(), !e25.id || t3 & Of || this.checkLVal(e25.id, this.strict || e25.generator || e25.async ? this.treatFunctionsAsVar ? 1 : 2 : 3));
  var i2 = this.yieldPos, a2 = this.awaitPos, o2 = this.awaitIdentPos;
  return this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(Sf(e25.async, e25.generator)), t3 & Bf || (e25.id = this.type === tf.name ? this.parseIdent() : null), this.parseFunctionParams(e25), this.parseFunctionBody(e25, r2, false), this.yieldPos = i2, this.awaitPos = a2, this.awaitIdentPos = o2, this.finishNode(e25, t3 & Bf ? "FunctionDeclaration" : "FunctionExpression");
}, _f.parseFunctionParams = function(e25) {
  this.expect(tf.parenL), e25.params = this.parseBindingList(tf.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams();
}, _f.parseClass = function(e25, t3) {
  this.next();
  var r2 = this.strict;
  this.strict = true, this.parseClassId(e25, t3), this.parseClassSuper(e25);
  var n2 = this.startNode(), i2 = false;
  for (n2.body = [], this.expect(tf.braceL); !this.eat(tf.braceR); ) {
    var a2 = this.parseClassElement(null !== e25.superClass);
    a2 && (n2.body.push(a2), "MethodDefinition" === a2.type && "constructor" === a2.kind && (i2 && this.raise(a2.start, "Duplicate constructor in the same class"), i2 = true));
  }
  return e25.body = this.finishNode(n2, "ClassBody"), this.strict = r2, this.finishNode(e25, t3 ? "ClassDeclaration" : "ClassExpression");
}, _f.parseClassElement = function(e25) {
  var t3 = this;
  if (this.eat(tf.semi)) return null;
  var r2 = this.startNode(), n2 = function(e26, n3) {
    void 0 === n3 && (n3 = false);
    var i3 = t3.start, a3 = t3.startLoc;
    return !!t3.eatContextual(e26) && (!(t3.type === tf.parenL || n3 && t3.canInsertSemicolon()) || (r2.key && t3.unexpected(), r2.computed = false, r2.key = t3.startNodeAt(i3, a3), r2.key.name = e26, t3.finishNode(r2.key, "Identifier"), false));
  };
  r2.kind = "method", r2.static = n2("static");
  var i2 = this.eat(tf.star), a2 = false;
  i2 || (this.options.ecmaVersion >= 8 && n2("async", true) ? (a2 = true, i2 = this.options.ecmaVersion >= 9 && this.eat(tf.star)) : n2("get") ? r2.kind = "get" : n2("set") && (r2.kind = "set")), r2.key || this.parsePropertyName(r2);
  var o2 = r2.key, s2 = false;
  return r2.computed || r2.static || !("Identifier" === o2.type && "constructor" === o2.name || "Literal" === o2.type && "constructor" === o2.value) ? r2.static && "Identifier" === o2.type && "prototype" === o2.name && this.raise(o2.start, "Classes may not have a static property named prototype") : ("method" !== r2.kind && this.raise(o2.start, "Constructor can't have get/set modifier"), i2 && this.raise(o2.start, "Constructor can't be a generator"), a2 && this.raise(o2.start, "Constructor can't be an async method"), r2.kind = "constructor", s2 = e25), this.parseClassMethod(r2, i2, a2, s2), "get" === r2.kind && 0 !== r2.value.params.length && this.raiseRecoverable(r2.value.start, "getter should have no params"), "set" === r2.kind && 1 !== r2.value.params.length && this.raiseRecoverable(r2.value.start, "setter should have exactly one param"), "set" === r2.kind && "RestElement" === r2.value.params[0].type && this.raiseRecoverable(r2.value.params[0].start, "Setter cannot use rest params"), r2;
}, _f.parseClassMethod = function(e25, t3, r2, n2) {
  return e25.value = this.parseMethod(t3, r2, n2), this.finishNode(e25, "MethodDefinition");
}, _f.parseClassId = function(e25, t3) {
  this.type === tf.name ? (e25.id = this.parseIdent(), t3 && this.checkLVal(e25.id, 2, false)) : (true === t3 && this.unexpected(), e25.id = null);
}, _f.parseClassSuper = function(e25) {
  e25.superClass = this.eat(tf._extends) ? this.parseExprSubscripts() : null;
}, _f.parseExport = function(e25, t3) {
  if (this.next(), this.eat(tf.star)) return this.expectContextual("from"), this.type !== tf.string && this.unexpected(), e25.source = this.parseExprAtom(), this.semicolon(), this.finishNode(e25, "ExportAllDeclaration");
  if (this.eat(tf._default)) {
    var r2;
    if (this.checkExport(t3, "default", this.lastTokStart), this.type === tf._function || (r2 = this.isAsyncFunction())) {
      var n2 = this.startNode();
      this.next(), r2 && this.next(), e25.declaration = this.parseFunction(n2, 4 | Bf, false, r2);
    } else if (this.type === tf._class) {
      var i2 = this.startNode();
      e25.declaration = this.parseClass(i2, "nullableID");
    } else e25.declaration = this.parseMaybeAssign(), this.semicolon();
    return this.finishNode(e25, "ExportDefaultDeclaration");
  }
  if (this.shouldParseExportStatement()) e25.declaration = this.parseStatement(null), "VariableDeclaration" === e25.declaration.type ? this.checkVariableExport(t3, e25.declaration.declarations) : this.checkExport(t3, e25.declaration.id.name, e25.declaration.id.start), e25.specifiers = [], e25.source = null;
  else {
    if (e25.declaration = null, e25.specifiers = this.parseExportSpecifiers(t3), this.eatContextual("from")) this.type !== tf.string && this.unexpected(), e25.source = this.parseExprAtom();
    else {
      for (var a2 = 0, o2 = e25.specifiers; a2 < o2.length; a2 += 1) {
        var s2 = o2[a2];
        this.checkUnreserved(s2.local), this.checkLocalExport(s2.local);
      }
      e25.source = null;
    }
    this.semicolon();
  }
  return this.finishNode(e25, "ExportNamedDeclaration");
}, _f.checkExport = function(e25, t3, r2) {
  e25 && (pf(e25, t3) && this.raiseRecoverable(r2, "Duplicate export '" + t3 + "'"), e25[t3] = true);
}, _f.checkPatternExport = function(e25, t3) {
  var r2 = t3.type;
  if ("Identifier" === r2) this.checkExport(e25, t3.name, t3.start);
  else if ("ObjectPattern" === r2) for (var n2 = 0, i2 = t3.properties; n2 < i2.length; n2 += 1) {
    var a2 = i2[n2];
    this.checkPatternExport(e25, a2);
  }
  else if ("ArrayPattern" === r2) for (var o2 = 0, s2 = t3.elements; o2 < s2.length; o2 += 1) {
    var u2 = s2[o2];
    u2 && this.checkPatternExport(e25, u2);
  }
  else "Property" === r2 ? this.checkPatternExport(e25, t3.value) : "AssignmentPattern" === r2 ? this.checkPatternExport(e25, t3.left) : "RestElement" === r2 ? this.checkPatternExport(e25, t3.argument) : "ParenthesizedExpression" === r2 && this.checkPatternExport(e25, t3.expression);
}, _f.checkVariableExport = function(e25, t3) {
  if (e25) for (var r2 = 0, n2 = t3; r2 < n2.length; r2 += 1) {
    var i2 = n2[r2];
    this.checkPatternExport(e25, i2.id);
  }
}, _f.shouldParseExportStatement = function() {
  return "var" === this.type.keyword || "const" === this.type.keyword || "class" === this.type.keyword || "function" === this.type.keyword || this.isLet() || this.isAsyncFunction();
}, _f.parseExportSpecifiers = function(e25) {
  var t3 = [], r2 = true;
  for (this.expect(tf.braceL); !this.eat(tf.braceR); ) {
    if (r2) r2 = false;
    else if (this.expect(tf.comma), this.afterTrailingComma(tf.braceR)) break;
    var n2 = this.startNode();
    n2.local = this.parseIdent(true), n2.exported = this.eatContextual("as") ? this.parseIdent(true) : n2.local, this.checkExport(e25, n2.exported.name, n2.exported.start), t3.push(this.finishNode(n2, "ExportSpecifier"));
  }
  return t3;
}, _f.parseImport = function(e25) {
  return this.next(), this.type === tf.string ? (e25.specifiers = If, e25.source = this.parseExprAtom()) : (e25.specifiers = this.parseImportSpecifiers(), this.expectContextual("from"), e25.source = this.type === tf.string ? this.parseExprAtom() : this.unexpected()), this.semicolon(), this.finishNode(e25, "ImportDeclaration");
}, _f.parseImportSpecifiers = function() {
  var e25 = [], t3 = true;
  if (this.type === tf.name) {
    var r2 = this.startNode();
    if (r2.local = this.parseIdent(), this.checkLVal(r2.local, 2), e25.push(this.finishNode(r2, "ImportDefaultSpecifier")), !this.eat(tf.comma)) return e25;
  }
  if (this.type === tf.star) {
    var n2 = this.startNode();
    return this.next(), this.expectContextual("as"), n2.local = this.parseIdent(), this.checkLVal(n2.local, 2), e25.push(this.finishNode(n2, "ImportNamespaceSpecifier")), e25;
  }
  for (this.expect(tf.braceL); !this.eat(tf.braceR); ) {
    if (t3) t3 = false;
    else if (this.expect(tf.comma), this.afterTrailingComma(tf.braceR)) break;
    var i2 = this.startNode();
    i2.imported = this.parseIdent(true), this.eatContextual("as") ? i2.local = this.parseIdent() : (this.checkUnreserved(i2.imported), i2.local = i2.imported), this.checkLVal(i2.local, 2), e25.push(this.finishNode(i2, "ImportSpecifier"));
  }
  return e25;
}, _f.adaptDirectivePrologue = function(e25) {
  for (var t3 = 0; t3 < e25.length && this.isDirectiveCandidate(e25[t3]); ++t3) e25[t3].directive = e25[t3].expression.raw.slice(1, -1);
}, _f.isDirectiveCandidate = function(e25) {
  return "ExpressionStatement" === e25.type && "Literal" === e25.expression.type && "string" == typeof e25.expression.value && ('"' === this.input[e25.start] || "'" === this.input[e25.start]);
};
var Lf = kf.prototype;
Lf.toAssignable = function(e25, t3, r2) {
  if (this.options.ecmaVersion >= 6 && e25) switch (e25.type) {
    case "Identifier":
      this.inAsync && "await" === e25.name && this.raise(e25.start, "Cannot use 'await' as identifier inside an async function");
      break;
    case "ObjectPattern":
    case "ArrayPattern":
    case "RestElement":
      break;
    case "ObjectExpression":
      e25.type = "ObjectPattern", r2 && this.checkPatternErrors(r2, true);
      for (var n2 = 0, i2 = e25.properties; n2 < i2.length; n2 += 1) {
        var a2 = i2[n2];
        this.toAssignable(a2, t3), "RestElement" !== a2.type || "ArrayPattern" !== a2.argument.type && "ObjectPattern" !== a2.argument.type || this.raise(a2.argument.start, "Unexpected token");
      }
      break;
    case "Property":
      "init" !== e25.kind && this.raise(e25.key.start, "Object pattern can't contain getter or setter"), this.toAssignable(e25.value, t3);
      break;
    case "ArrayExpression":
      e25.type = "ArrayPattern", r2 && this.checkPatternErrors(r2, true), this.toAssignableList(e25.elements, t3);
      break;
    case "SpreadElement":
      e25.type = "RestElement", this.toAssignable(e25.argument, t3), "AssignmentPattern" === e25.argument.type && this.raise(e25.argument.start, "Rest elements cannot have a default value");
      break;
    case "AssignmentExpression":
      "=" !== e25.operator && this.raise(e25.left.end, "Only '=' operator can be used for specifying default value."), e25.type = "AssignmentPattern", delete e25.operator, this.toAssignable(e25.left, t3);
    case "AssignmentPattern":
      break;
    case "ParenthesizedExpression":
      this.toAssignable(e25.expression, t3, r2);
      break;
    case "MemberExpression":
      if (!t3) break;
    default:
      this.raise(e25.start, "Assigning to rvalue");
  }
  else r2 && this.checkPatternErrors(r2, true);
  return e25;
}, Lf.toAssignableList = function(e25, t3) {
  for (var r2 = e25.length, n2 = 0; n2 < r2; n2++) {
    var i2 = e25[n2];
    i2 && this.toAssignable(i2, t3);
  }
  if (r2) {
    var a2 = e25[r2 - 1];
    6 === this.options.ecmaVersion && t3 && a2 && "RestElement" === a2.type && "Identifier" !== a2.argument.type && this.unexpected(a2.argument.start);
  }
  return e25;
}, Lf.parseSpread = function(e25) {
  var t3 = this.startNode();
  return this.next(), t3.argument = this.parseMaybeAssign(false, e25), this.finishNode(t3, "SpreadElement");
}, Lf.parseRestBinding = function() {
  var e25 = this.startNode();
  return this.next(), 6 === this.options.ecmaVersion && this.type !== tf.name && this.unexpected(), e25.argument = this.parseBindingAtom(), this.finishNode(e25, "RestElement");
}, Lf.parseBindingAtom = function() {
  if (this.options.ecmaVersion >= 6) switch (this.type) {
    case tf.bracketL:
      var e25 = this.startNode();
      return this.next(), e25.elements = this.parseBindingList(tf.bracketR, true, true), this.finishNode(e25, "ArrayPattern");
    case tf.braceL:
      return this.parseObj(true);
  }
  return this.parseIdent();
}, Lf.parseBindingList = function(e25, t3, r2) {
  for (var n2 = [], i2 = true; !this.eat(e25); ) if (i2 ? i2 = false : this.expect(tf.comma), t3 && this.type === tf.comma) n2.push(null);
  else {
    if (r2 && this.afterTrailingComma(e25)) break;
    if (this.type === tf.ellipsis) {
      var a2 = this.parseRestBinding();
      this.parseBindingListItem(a2), n2.push(a2), this.type === tf.comma && this.raise(this.start, "Comma is not permitted after the rest element"), this.expect(e25);
      break;
    }
    var o2 = this.parseMaybeDefault(this.start, this.startLoc);
    this.parseBindingListItem(o2), n2.push(o2);
  }
  return n2;
}, Lf.parseBindingListItem = function(e25) {
  return e25;
}, Lf.parseMaybeDefault = function(e25, t3, r2) {
  if (r2 = r2 || this.parseBindingAtom(), this.options.ecmaVersion < 6 || !this.eat(tf.eq)) return r2;
  var n2 = this.startNodeAt(e25, t3);
  return n2.left = r2, n2.right = this.parseMaybeAssign(), this.finishNode(n2, "AssignmentPattern");
}, Lf.checkLVal = function(e25, t3, r2) {
  switch (void 0 === t3 && (t3 = 0), e25.type) {
    case "Identifier":
      2 === t3 && "let" === e25.name && this.raiseRecoverable(e25.start, "let is disallowed as a lexically bound name"), this.strict && this.reservedWordsStrictBind.test(e25.name) && this.raiseRecoverable(e25.start, (t3 ? "Binding " : "Assigning to ") + e25.name + " in strict mode"), r2 && (pf(r2, e25.name) && this.raiseRecoverable(e25.start, "Argument name clash"), r2[e25.name] = true), 0 !== t3 && 5 !== t3 && this.declareName(e25.name, t3, e25.start);
      break;
    case "MemberExpression":
      t3 && this.raiseRecoverable(e25.start, "Binding member expression");
      break;
    case "ObjectPattern":
      for (var n2 = 0, i2 = e25.properties; n2 < i2.length; n2 += 1) {
        var a2 = i2[n2];
        this.checkLVal(a2, t3, r2);
      }
      break;
    case "Property":
      this.checkLVal(e25.value, t3, r2);
      break;
    case "ArrayPattern":
      for (var o2 = 0, s2 = e25.elements; o2 < s2.length; o2 += 1) {
        var u2 = s2[o2];
        u2 && this.checkLVal(u2, t3, r2);
      }
      break;
    case "AssignmentPattern":
      this.checkLVal(e25.left, t3, r2);
      break;
    case "RestElement":
      this.checkLVal(e25.argument, t3, r2);
      break;
    case "ParenthesizedExpression":
      this.checkLVal(e25.expression, t3, r2);
      break;
    default:
      this.raise(e25.start, (t3 ? "Binding" : "Assigning to") + " rvalue");
  }
};
var Nf = kf.prototype;
Nf.checkPropClash = function(e25, t3, r2) {
  if (!(this.options.ecmaVersion >= 9 && "SpreadElement" === e25.type || this.options.ecmaVersion >= 6 && (e25.computed || e25.method || e25.shorthand))) {
    var n2, i2 = e25.key;
    switch (i2.type) {
      case "Identifier":
        n2 = i2.name;
        break;
      case "Literal":
        n2 = String(i2.value);
        break;
      default:
        return;
    }
    var a2 = e25.kind;
    if (this.options.ecmaVersion >= 6) "__proto__" === n2 && "init" === a2 && (t3.proto && (r2 && r2.doubleProto < 0 ? r2.doubleProto = i2.start : this.raiseRecoverable(i2.start, "Redefinition of __proto__ property")), t3.proto = true);
    else {
      var o2 = t3[n2 = "$" + n2];
      if (o2) ("init" === a2 ? this.strict && o2.init || o2.get || o2.set : o2.init || o2[a2]) && this.raiseRecoverable(i2.start, "Redefinition of property");
      else o2 = t3[n2] = { init: false, get: false, set: false };
      o2[a2] = true;
    }
  }
}, Nf.parseExpression = function(e25, t3) {
  var r2 = this.start, n2 = this.startLoc, i2 = this.parseMaybeAssign(e25, t3);
  if (this.type === tf.comma) {
    var a2 = this.startNodeAt(r2, n2);
    for (a2.expressions = [i2]; this.eat(tf.comma); ) a2.expressions.push(this.parseMaybeAssign(e25, t3));
    return this.finishNode(a2, "SequenceExpression");
  }
  return i2;
}, Nf.parseMaybeAssign = function(e25, t3, r2) {
  if (this.isContextual("yield")) {
    if (this.inGenerator) return this.parseYield(e25);
    this.exprAllowed = false;
  }
  var n2 = false, i2 = -1, a2 = -1, o2 = -1;
  t3 ? (i2 = t3.parenthesizedAssign, a2 = t3.trailingComma, o2 = t3.shorthandAssign, t3.parenthesizedAssign = t3.trailingComma = t3.shorthandAssign = -1) : (t3 = new wf(), n2 = true);
  var s2 = this.start, u2 = this.startLoc;
  this.type !== tf.parenL && this.type !== tf.name || (this.potentialArrowAt = this.start);
  var c2 = this.parseMaybeConditional(e25, t3);
  if (r2 && (c2 = r2.call(this, c2, s2, u2)), this.type.isAssign) {
    var l2 = this.startNodeAt(s2, u2);
    return l2.operator = this.value, l2.left = this.type === tf.eq ? this.toAssignable(c2, false, t3) : c2, n2 || wf.call(t3), t3.shorthandAssign = -1, this.checkLVal(c2), this.next(), l2.right = this.parseMaybeAssign(e25), this.finishNode(l2, "AssignmentExpression");
  }
  return n2 && this.checkExpressionErrors(t3, true), i2 > -1 && (t3.parenthesizedAssign = i2), a2 > -1 && (t3.trailingComma = a2), o2 > -1 && (t3.shorthandAssign = o2), c2;
}, Nf.parseMaybeConditional = function(e25, t3) {
  var r2 = this.start, n2 = this.startLoc, i2 = this.parseExprOps(e25, t3);
  if (this.checkExpressionErrors(t3)) return i2;
  if (this.eat(tf.question)) {
    var a2 = this.startNodeAt(r2, n2);
    return a2.test = i2, a2.consequent = this.parseMaybeAssign(), this.expect(tf.colon), a2.alternate = this.parseMaybeAssign(e25), this.finishNode(a2, "ConditionalExpression");
  }
  return i2;
}, Nf.parseExprOps = function(e25, t3) {
  var r2 = this.start, n2 = this.startLoc, i2 = this.parseMaybeUnary(t3, false);
  return this.checkExpressionErrors(t3) ? i2 : i2.start === r2 && "ArrowFunctionExpression" === i2.type ? i2 : this.parseExprOp(i2, r2, n2, -1, e25);
}, Nf.parseExprOp = function(e25, t3, r2, n2, i2) {
  var a2 = this.type.binop;
  if (null != a2 && (!i2 || this.type !== tf._in) && a2 > n2) {
    var o2 = this.type === tf.logicalOR || this.type === tf.logicalAND, s2 = this.value;
    this.next();
    var u2 = this.start, c2 = this.startLoc, l2 = this.parseExprOp(this.parseMaybeUnary(null, false), u2, c2, a2, i2), p2 = this.buildBinary(t3, r2, e25, l2, s2, o2);
    return this.parseExprOp(p2, t3, r2, n2, i2);
  }
  return e25;
}, Nf.buildBinary = function(e25, t3, r2, n2, i2, a2) {
  var o2 = this.startNodeAt(e25, t3);
  return o2.left = r2, o2.operator = i2, o2.right = n2, this.finishNode(o2, a2 ? "LogicalExpression" : "BinaryExpression");
}, Nf.parseMaybeUnary = function(e25, t3) {
  var r2, n2 = this.start, i2 = this.startLoc;
  if (this.isContextual("await") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) r2 = this.parseAwait(), t3 = true;
  else if (this.type.prefix) {
    var a2 = this.startNode(), o2 = this.type === tf.incDec;
    a2.operator = this.value, a2.prefix = true, this.next(), a2.argument = this.parseMaybeUnary(null, true), this.checkExpressionErrors(e25, true), o2 ? this.checkLVal(a2.argument) : this.strict && "delete" === a2.operator && "Identifier" === a2.argument.type ? this.raiseRecoverable(a2.start, "Deleting local variable in strict mode") : t3 = true, r2 = this.finishNode(a2, o2 ? "UpdateExpression" : "UnaryExpression");
  } else {
    if (r2 = this.parseExprSubscripts(e25), this.checkExpressionErrors(e25)) return r2;
    for (; this.type.postfix && !this.canInsertSemicolon(); ) {
      var s2 = this.startNodeAt(n2, i2);
      s2.operator = this.value, s2.prefix = false, s2.argument = r2, this.checkLVal(r2), this.next(), r2 = this.finishNode(s2, "UpdateExpression");
    }
  }
  return !t3 && this.eat(tf.starstar) ? this.buildBinary(n2, i2, r2, this.parseMaybeUnary(null, false), "**", false) : r2;
}, Nf.parseExprSubscripts = function(e25) {
  var t3 = this.start, r2 = this.startLoc, n2 = this.parseExprAtom(e25), i2 = "ArrowFunctionExpression" === n2.type && ")" !== this.input.slice(this.lastTokStart, this.lastTokEnd);
  if (this.checkExpressionErrors(e25) || i2) return n2;
  var a2 = this.parseSubscripts(n2, t3, r2);
  return e25 && "MemberExpression" === a2.type && (e25.parenthesizedAssign >= a2.start && (e25.parenthesizedAssign = -1), e25.parenthesizedBind >= a2.start && (e25.parenthesizedBind = -1)), a2;
}, Nf.parseSubscripts = function(e25, t3, r2, n2) {
  for (var i2 = this.options.ecmaVersion >= 8 && "Identifier" === e25.type && "async" === e25.name && this.lastTokEnd === e25.end && !this.canInsertSemicolon() && "async" === this.input.slice(e25.start, e25.end); ; ) {
    var a2 = this.parseSubscript(e25, t3, r2, n2, i2);
    if (a2 === e25 || "ArrowFunctionExpression" === a2.type) return a2;
    e25 = a2;
  }
}, Nf.parseSubscript = function(e25, t3, r2, n2, i2) {
  var a2 = this.eat(tf.bracketL);
  if (a2 || this.eat(tf.dot)) {
    var o2 = this.startNodeAt(t3, r2);
    o2.object = e25, o2.property = a2 ? this.parseExpression() : this.parseIdent("never" !== this.options.allowReserved), o2.computed = !!a2, a2 && this.expect(tf.bracketR), e25 = this.finishNode(o2, "MemberExpression");
  } else if (!n2 && this.eat(tf.parenL)) {
    var s2 = new wf(), u2 = this.yieldPos, c2 = this.awaitPos, l2 = this.awaitIdentPos;
    this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0;
    var p2 = this.parseExprList(tf.parenR, this.options.ecmaVersion >= 8, false, s2);
    if (i2 && !this.canInsertSemicolon() && this.eat(tf.arrow)) return this.checkPatternErrors(s2, false), this.checkYieldAwaitInDefaultParams(), this.awaitIdentPos > 0 && this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"), this.yieldPos = u2, this.awaitPos = c2, this.awaitIdentPos = l2, this.parseArrowExpression(this.startNodeAt(t3, r2), p2, true);
    this.checkExpressionErrors(s2, true), this.yieldPos = u2 || this.yieldPos, this.awaitPos = c2 || this.awaitPos, this.awaitIdentPos = l2 || this.awaitIdentPos;
    var f2 = this.startNodeAt(t3, r2);
    f2.callee = e25, f2.arguments = p2, e25 = this.finishNode(f2, "CallExpression");
  } else if (this.type === tf.backQuote) {
    var h2 = this.startNodeAt(t3, r2);
    h2.tag = e25, h2.quasi = this.parseTemplate({ isTagged: true }), e25 = this.finishNode(h2, "TaggedTemplateExpression");
  }
  return e25;
}, Nf.parseExprAtom = function(e25) {
  this.type === tf.slash && this.readRegexp();
  var t3, r2 = this.potentialArrowAt === this.start;
  switch (this.type) {
    case tf._super:
      return this.allowSuper || this.raise(this.start, "'super' keyword outside a method"), t3 = this.startNode(), this.next(), this.type !== tf.parenL || this.allowDirectSuper || this.raise(t3.start, "super() call outside constructor of a subclass"), this.type !== tf.dot && this.type !== tf.bracketL && this.type !== tf.parenL && this.unexpected(), this.finishNode(t3, "Super");
    case tf._this:
      return t3 = this.startNode(), this.next(), this.finishNode(t3, "ThisExpression");
    case tf.name:
      var n2 = this.start, i2 = this.startLoc, a2 = this.containsEsc, o2 = this.parseIdent(false);
      if (this.options.ecmaVersion >= 8 && !a2 && "async" === o2.name && !this.canInsertSemicolon() && this.eat(tf._function)) return this.parseFunction(this.startNodeAt(n2, i2), 0, false, true);
      if (r2 && !this.canInsertSemicolon()) {
        if (this.eat(tf.arrow)) return this.parseArrowExpression(this.startNodeAt(n2, i2), [o2], false);
        if (this.options.ecmaVersion >= 8 && "async" === o2.name && this.type === tf.name && !a2) return o2 = this.parseIdent(false), !this.canInsertSemicolon() && this.eat(tf.arrow) || this.unexpected(), this.parseArrowExpression(this.startNodeAt(n2, i2), [o2], true);
      }
      return o2;
    case tf.regexp:
      var s2 = this.value;
      return (t3 = this.parseLiteral(s2.value)).regex = { pattern: s2.pattern, flags: s2.flags }, t3;
    case tf.num:
    case tf.string:
      return this.parseLiteral(this.value);
    case tf._null:
    case tf._true:
    case tf._false:
      return (t3 = this.startNode()).value = this.type === tf._null ? null : this.type === tf._true, t3.raw = this.type.keyword, this.next(), this.finishNode(t3, "Literal");
    case tf.parenL:
      var u2 = this.start, c2 = this.parseParenAndDistinguishExpression(r2);
      return e25 && (e25.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(c2) && (e25.parenthesizedAssign = u2), e25.parenthesizedBind < 0 && (e25.parenthesizedBind = u2)), c2;
    case tf.bracketL:
      return t3 = this.startNode(), this.next(), t3.elements = this.parseExprList(tf.bracketR, true, true, e25), this.finishNode(t3, "ArrayExpression");
    case tf.braceL:
      return this.parseObj(false, e25);
    case tf._function:
      return t3 = this.startNode(), this.next(), this.parseFunction(t3, 0);
    case tf._class:
      return this.parseClass(this.startNode(), false);
    case tf._new:
      return this.parseNew();
    case tf.backQuote:
      return this.parseTemplate();
    case tf._import:
      return this.options.ecmaVersion >= 11 ? this.parseExprImport() : this.unexpected();
    default:
      this.unexpected();
  }
}, Nf.parseExprImport = function() {
  var e25 = this.startNode();
  switch (this.next(), this.type) {
    case tf.parenL:
      return this.parseDynamicImport(e25);
    default:
      this.unexpected();
  }
}, Nf.parseDynamicImport = function(e25) {
  if (this.next(), e25.source = this.parseMaybeAssign(), !this.eat(tf.parenR)) {
    var t3 = this.start;
    this.eat(tf.comma) && this.eat(tf.parenR) ? this.raiseRecoverable(t3, "Trailing comma is not allowed in import()") : this.unexpected(t3);
  }
  return this.finishNode(e25, "ImportExpression");
}, Nf.parseLiteral = function(e25) {
  var t3 = this.startNode();
  return t3.value = e25, t3.raw = this.input.slice(this.start, this.end), 110 === t3.raw.charCodeAt(t3.raw.length - 1) && (t3.bigint = t3.raw.slice(0, -1)), this.next(), this.finishNode(t3, "Literal");
}, Nf.parseParenExpression = function() {
  this.expect(tf.parenL);
  var e25 = this.parseExpression();
  return this.expect(tf.parenR), e25;
}, Nf.parseParenAndDistinguishExpression = function(e25) {
  var t3, r2 = this.start, n2 = this.startLoc, i2 = this.options.ecmaVersion >= 8;
  if (this.options.ecmaVersion >= 6) {
    this.next();
    var a2, o2 = this.start, s2 = this.startLoc, u2 = [], c2 = true, l2 = false, p2 = new wf(), f2 = this.yieldPos, h2 = this.awaitPos;
    for (this.yieldPos = 0, this.awaitPos = 0; this.type !== tf.parenR; ) {
      if (c2 ? c2 = false : this.expect(tf.comma), i2 && this.afterTrailingComma(tf.parenR, true)) {
        l2 = true;
        break;
      }
      if (this.type === tf.ellipsis) {
        a2 = this.start, u2.push(this.parseParenItem(this.parseRestBinding())), this.type === tf.comma && this.raise(this.start, "Comma is not permitted after the rest element");
        break;
      }
      u2.push(this.parseMaybeAssign(false, p2, this.parseParenItem));
    }
    var d2 = this.start, m2 = this.startLoc;
    if (this.expect(tf.parenR), e25 && !this.canInsertSemicolon() && this.eat(tf.arrow)) return this.checkPatternErrors(p2, false), this.checkYieldAwaitInDefaultParams(), this.yieldPos = f2, this.awaitPos = h2, this.parseParenArrowList(r2, n2, u2);
    u2.length && !l2 || this.unexpected(this.lastTokStart), a2 && this.unexpected(a2), this.checkExpressionErrors(p2, true), this.yieldPos = f2 || this.yieldPos, this.awaitPos = h2 || this.awaitPos, u2.length > 1 ? ((t3 = this.startNodeAt(o2, s2)).expressions = u2, this.finishNodeAt(t3, "SequenceExpression", d2, m2)) : t3 = u2[0];
  } else t3 = this.parseParenExpression();
  if (this.options.preserveParens) {
    var g2 = this.startNodeAt(r2, n2);
    return g2.expression = t3, this.finishNode(g2, "ParenthesizedExpression");
  }
  return t3;
}, Nf.parseParenItem = function(e25) {
  return e25;
}, Nf.parseParenArrowList = function(e25, t3, r2) {
  return this.parseArrowExpression(this.startNodeAt(e25, t3), r2);
};
var jf = [];
Nf.parseNew = function() {
  var e25 = this.startNode(), t3 = this.parseIdent(true);
  if (this.options.ecmaVersion >= 6 && this.eat(tf.dot)) {
    e25.meta = t3;
    var r2 = this.containsEsc;
    return e25.property = this.parseIdent(true), ("target" !== e25.property.name || r2) && this.raiseRecoverable(e25.property.start, "The only valid meta property for new is new.target"), this.inNonArrowFunction() || this.raiseRecoverable(e25.start, "new.target can only be used in functions"), this.finishNode(e25, "MetaProperty");
  }
  var n2 = this.start, i2 = this.startLoc, a2 = this.type === tf._import;
  return e25.callee = this.parseSubscripts(this.parseExprAtom(), n2, i2, true), a2 && "ImportExpression" === e25.callee.type && this.raise(n2, "Cannot use new with import()"), this.eat(tf.parenL) ? e25.arguments = this.parseExprList(tf.parenR, this.options.ecmaVersion >= 8, false) : e25.arguments = jf, this.finishNode(e25, "NewExpression");
}, Nf.parseTemplateElement = function(e25) {
  var t3 = e25.isTagged, r2 = this.startNode();
  return this.type === tf.invalidTemplate ? (t3 || this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal"), r2.value = { raw: this.value, cooked: null }) : r2.value = { raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"), cooked: this.value }, this.next(), r2.tail = this.type === tf.backQuote, this.finishNode(r2, "TemplateElement");
}, Nf.parseTemplate = function(e25) {
  void 0 === e25 && (e25 = {});
  var t3 = e25.isTagged;
  void 0 === t3 && (t3 = false);
  var r2 = this.startNode();
  this.next(), r2.expressions = [];
  var n2 = this.parseTemplateElement({ isTagged: t3 });
  for (r2.quasis = [n2]; !n2.tail; ) this.type === tf.eof && this.raise(this.pos, "Unterminated template literal"), this.expect(tf.dollarBraceL), r2.expressions.push(this.parseExpression()), this.expect(tf.braceR), r2.quasis.push(n2 = this.parseTemplateElement({ isTagged: t3 }));
  return this.next(), this.finishNode(r2, "TemplateLiteral");
}, Nf.isAsyncProp = function(e25) {
  return !e25.computed && "Identifier" === e25.key.type && "async" === e25.key.name && (this.type === tf.name || this.type === tf.num || this.type === tf.string || this.type === tf.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === tf.star) && !rf.test(this.input.slice(this.lastTokEnd, this.start));
}, Nf.parseObj = function(e25, t3) {
  var r2 = this.startNode(), n2 = true, i2 = {};
  for (r2.properties = [], this.next(); !this.eat(tf.braceR); ) {
    if (n2) n2 = false;
    else if (this.expect(tf.comma), this.options.ecmaVersion >= 5 && this.afterTrailingComma(tf.braceR)) break;
    var a2 = this.parseProperty(e25, t3);
    e25 || this.checkPropClash(a2, i2, t3), r2.properties.push(a2);
  }
  return this.finishNode(r2, e25 ? "ObjectPattern" : "ObjectExpression");
}, Nf.parseProperty = function(e25, t3) {
  var r2, n2, i2, a2, o2 = this.startNode();
  if (this.options.ecmaVersion >= 9 && this.eat(tf.ellipsis)) return e25 ? (o2.argument = this.parseIdent(false), this.type === tf.comma && this.raise(this.start, "Comma is not permitted after the rest element"), this.finishNode(o2, "RestElement")) : (this.type === tf.parenL && t3 && (t3.parenthesizedAssign < 0 && (t3.parenthesizedAssign = this.start), t3.parenthesizedBind < 0 && (t3.parenthesizedBind = this.start)), o2.argument = this.parseMaybeAssign(false, t3), this.type === tf.comma && t3 && t3.trailingComma < 0 && (t3.trailingComma = this.start), this.finishNode(o2, "SpreadElement"));
  this.options.ecmaVersion >= 6 && (o2.method = false, o2.shorthand = false, (e25 || t3) && (i2 = this.start, a2 = this.startLoc), e25 || (r2 = this.eat(tf.star)));
  var s2 = this.containsEsc;
  return this.parsePropertyName(o2), !e25 && !s2 && this.options.ecmaVersion >= 8 && !r2 && this.isAsyncProp(o2) ? (n2 = true, r2 = this.options.ecmaVersion >= 9 && this.eat(tf.star), this.parsePropertyName(o2, t3)) : n2 = false, this.parsePropertyValue(o2, e25, r2, n2, i2, a2, t3, s2), this.finishNode(o2, "Property");
}, Nf.parsePropertyValue = function(e25, t3, r2, n2, i2, a2, o2, s2) {
  if ((r2 || n2) && this.type === tf.colon && this.unexpected(), this.eat(tf.colon)) e25.value = t3 ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, o2), e25.kind = "init";
  else if (this.options.ecmaVersion >= 6 && this.type === tf.parenL) t3 && this.unexpected(), e25.kind = "init", e25.method = true, e25.value = this.parseMethod(r2, n2);
  else if (t3 || s2 || !(this.options.ecmaVersion >= 5) || e25.computed || "Identifier" !== e25.key.type || "get" !== e25.key.name && "set" !== e25.key.name || this.type === tf.comma || this.type === tf.braceR) this.options.ecmaVersion >= 6 && !e25.computed && "Identifier" === e25.key.type ? ((r2 || n2) && this.unexpected(), this.checkUnreserved(e25.key), "await" !== e25.key.name || this.awaitIdentPos || (this.awaitIdentPos = i2), e25.kind = "init", t3 ? e25.value = this.parseMaybeDefault(i2, a2, e25.key) : this.type === tf.eq && o2 ? (o2.shorthandAssign < 0 && (o2.shorthandAssign = this.start), e25.value = this.parseMaybeDefault(i2, a2, e25.key)) : e25.value = e25.key, e25.shorthand = true) : this.unexpected();
  else {
    (r2 || n2) && this.unexpected(), e25.kind = e25.key.name, this.parsePropertyName(e25), e25.value = this.parseMethod(false);
    var u2 = "get" === e25.kind ? 0 : 1;
    if (e25.value.params.length !== u2) {
      var c2 = e25.value.start;
      "get" === e25.kind ? this.raiseRecoverable(c2, "getter should have no params") : this.raiseRecoverable(c2, "setter should have exactly one param");
    } else "set" === e25.kind && "RestElement" === e25.value.params[0].type && this.raiseRecoverable(e25.value.params[0].start, "Setter cannot use rest params");
  }
}, Nf.parsePropertyName = function(e25) {
  if (this.options.ecmaVersion >= 6) {
    if (this.eat(tf.bracketL)) return e25.computed = true, e25.key = this.parseMaybeAssign(), this.expect(tf.bracketR), e25.key;
    e25.computed = false;
  }
  return e25.key = this.type === tf.num || this.type === tf.string ? this.parseExprAtom() : this.parseIdent("never" !== this.options.allowReserved);
}, Nf.initFunction = function(e25) {
  e25.id = null, this.options.ecmaVersion >= 6 && (e25.generator = e25.expression = false), this.options.ecmaVersion >= 8 && (e25.async = false);
}, Nf.parseMethod = function(e25, t3, r2) {
  var n2 = this.startNode(), i2 = this.yieldPos, a2 = this.awaitPos, o2 = this.awaitIdentPos;
  return this.initFunction(n2), this.options.ecmaVersion >= 6 && (n2.generator = e25), this.options.ecmaVersion >= 8 && (n2.async = !!t3), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(64 | Sf(t3, n2.generator) | (r2 ? 128 : 0)), this.expect(tf.parenL), n2.params = this.parseBindingList(tf.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams(), this.parseFunctionBody(n2, false, true), this.yieldPos = i2, this.awaitPos = a2, this.awaitIdentPos = o2, this.finishNode(n2, "FunctionExpression");
}, Nf.parseArrowExpression = function(e25, t3, r2) {
  var n2 = this.yieldPos, i2 = this.awaitPos, a2 = this.awaitIdentPos;
  return this.enterScope(16 | Sf(r2, false)), this.initFunction(e25), this.options.ecmaVersion >= 8 && (e25.async = !!r2), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, e25.params = this.toAssignableList(t3, true), this.parseFunctionBody(e25, true, false), this.yieldPos = n2, this.awaitPos = i2, this.awaitIdentPos = a2, this.finishNode(e25, "ArrowFunctionExpression");
}, Nf.parseFunctionBody = function(e25, t3, r2) {
  var n2 = t3 && this.type !== tf.braceL, i2 = this.strict, a2 = false;
  if (n2) e25.body = this.parseMaybeAssign(), e25.expression = true, this.checkParams(e25, false);
  else {
    var o2 = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(e25.params);
    i2 && !o2 || (a2 = this.strictDirective(this.end)) && o2 && this.raiseRecoverable(e25.start, "Illegal 'use strict' directive in function with non-simple parameter list");
    var s2 = this.labels;
    this.labels = [], a2 && (this.strict = true), this.checkParams(e25, !i2 && !a2 && !t3 && !r2 && this.isSimpleParamList(e25.params)), e25.body = this.parseBlock(false), e25.expression = false, this.adaptDirectivePrologue(e25.body.body), this.labels = s2;
  }
  this.exitScope(), this.strict && e25.id && this.checkLVal(e25.id, 5), this.strict = i2;
}, Nf.isSimpleParamList = function(e25) {
  for (var t3 = 0, r2 = e25; t3 < r2.length; t3 += 1) {
    if ("Identifier" !== r2[t3].type) return false;
  }
  return true;
}, Nf.checkParams = function(e25, t3) {
  for (var r2 = {}, n2 = 0, i2 = e25.params; n2 < i2.length; n2 += 1) {
    var a2 = i2[n2];
    this.checkLVal(a2, 1, t3 ? null : r2);
  }
}, Nf.parseExprList = function(e25, t3, r2, n2) {
  for (var i2 = [], a2 = true; !this.eat(e25); ) {
    if (a2) a2 = false;
    else if (this.expect(tf.comma), t3 && this.afterTrailingComma(e25)) break;
    var o2 = void 0;
    r2 && this.type === tf.comma ? o2 = null : this.type === tf.ellipsis ? (o2 = this.parseSpread(n2), n2 && this.type === tf.comma && n2.trailingComma < 0 && (n2.trailingComma = this.start)) : o2 = this.parseMaybeAssign(false, n2), i2.push(o2);
  }
  return i2;
}, Nf.checkUnreserved = function(e25) {
  var t3 = e25.start, r2 = e25.end, n2 = e25.name;
  (this.inGenerator && "yield" === n2 && this.raiseRecoverable(t3, "Cannot use 'yield' as identifier inside a generator"), this.inAsync && "await" === n2 && this.raiseRecoverable(t3, "Cannot use 'await' as identifier inside an async function"), this.keywords.test(n2) && this.raise(t3, "Unexpected keyword '" + n2 + "'"), this.options.ecmaVersion < 6 && -1 !== this.input.slice(t3, r2).indexOf("\\")) || (this.strict ? this.reservedWordsStrict : this.reservedWords).test(n2) && (this.inAsync || "await" !== n2 || this.raiseRecoverable(t3, "Cannot use keyword 'await' outside an async function"), this.raiseRecoverable(t3, "The keyword '" + n2 + "' is reserved"));
}, Nf.parseIdent = function(e25, t3) {
  var r2 = this.startNode();
  return this.type === tf.name ? r2.name = this.value : this.type.keyword ? (r2.name = this.type.keyword, "class" !== r2.name && "function" !== r2.name || this.lastTokEnd === this.lastTokStart + 1 && 46 === this.input.charCodeAt(this.lastTokStart) || this.context.pop()) : this.unexpected(), this.next(), this.finishNode(r2, "Identifier"), e25 || (this.checkUnreserved(r2), "await" !== r2.name || this.awaitIdentPos || (this.awaitIdentPos = r2.start)), r2;
}, Nf.parseYield = function(e25) {
  this.yieldPos || (this.yieldPos = this.start);
  var t3 = this.startNode();
  return this.next(), this.type === tf.semi || this.canInsertSemicolon() || this.type !== tf.star && !this.type.startsExpr ? (t3.delegate = false, t3.argument = null) : (t3.delegate = this.eat(tf.star), t3.argument = this.parseMaybeAssign(e25)), this.finishNode(t3, "YieldExpression");
}, Nf.parseAwait = function() {
  this.awaitPos || (this.awaitPos = this.start);
  var e25 = this.startNode();
  return this.next(), e25.argument = this.parseMaybeUnary(null, true), this.finishNode(e25, "AwaitExpression");
};
var Rf = kf.prototype;
Rf.raise = function(e25, t3) {
  var r2 = gf(this.input, e25);
  t3 += " (" + r2.line + ":" + r2.column + ")";
  var n2 = new SyntaxError(t3);
  throw n2.pos = e25, n2.loc = r2, n2.raisedAt = this.pos, n2;
}, Rf.raiseRecoverable = Rf.raise, Rf.curPosition = function() {
  if (this.options.locations) return new df(this.curLine, this.pos - this.lineStart);
};
var Mf = kf.prototype;
var Vf = function(e25) {
  this.flags = e25, this.var = [], this.lexical = [], this.functions = [];
};
Mf.enterScope = function(e25) {
  this.scopeStack.push(new Vf(e25));
}, Mf.exitScope = function() {
  this.scopeStack.pop();
}, Mf.treatFunctionsAsVarInScope = function(e25) {
  return e25.flags & xf || !this.inModule && 1 & e25.flags;
}, Mf.declareName = function(e25, t3, r2) {
  var n2 = false;
  if (2 === t3) {
    var i2 = this.currentScope();
    n2 = i2.lexical.indexOf(e25) > -1 || i2.functions.indexOf(e25) > -1 || i2.var.indexOf(e25) > -1, i2.lexical.push(e25), this.inModule && 1 & i2.flags && delete this.undefinedExports[e25];
  } else if (4 === t3) {
    this.currentScope().lexical.push(e25);
  } else if (3 === t3) {
    var a2 = this.currentScope();
    n2 = this.treatFunctionsAsVar ? a2.lexical.indexOf(e25) > -1 : a2.lexical.indexOf(e25) > -1 || a2.var.indexOf(e25) > -1, a2.functions.push(e25);
  } else for (var o2 = this.scopeStack.length - 1; o2 >= 0; --o2) {
    var s2 = this.scopeStack[o2];
    if (s2.lexical.indexOf(e25) > -1 && !(32 & s2.flags && s2.lexical[0] === e25) || !this.treatFunctionsAsVarInScope(s2) && s2.functions.indexOf(e25) > -1) {
      n2 = true;
      break;
    }
    if (s2.var.push(e25), this.inModule && 1 & s2.flags && delete this.undefinedExports[e25], s2.flags & bf) break;
  }
  n2 && this.raiseRecoverable(r2, "Identifier '" + e25 + "' has already been declared");
}, Mf.checkLocalExport = function(e25) {
  -1 === this.scopeStack[0].lexical.indexOf(e25.name) && -1 === this.scopeStack[0].var.indexOf(e25.name) && (this.undefinedExports[e25.name] = e25);
}, Mf.currentScope = function() {
  return this.scopeStack[this.scopeStack.length - 1];
}, Mf.currentVarScope = function() {
  for (var e25 = this.scopeStack.length - 1; ; e25--) {
    var t3 = this.scopeStack[e25];
    if (t3.flags & bf) return t3;
  }
}, Mf.currentThisScope = function() {
  for (var e25 = this.scopeStack.length - 1; ; e25--) {
    var t3 = this.scopeStack[e25];
    if (t3.flags & bf && !(16 & t3.flags)) return t3;
  }
};
var Uf = function(e25, t3, r2) {
  this.type = "", this.start = t3, this.end = 0, e25.options.locations && (this.loc = new mf(e25, r2)), e25.options.directSourceFile && (this.sourceFile = e25.options.directSourceFile), e25.options.ranges && (this.range = [t3, 0]);
};
var qf = kf.prototype;
function Wf(e25, t3, r2, n2) {
  return e25.type = t3, e25.end = r2, this.options.locations && (e25.loc.end = n2), this.options.ranges && (e25.range[1] = r2), e25;
}
qf.startNode = function() {
  return new Uf(this, this.start, this.startLoc);
}, qf.startNodeAt = function(e25, t3) {
  return new Uf(this, e25, t3);
}, qf.finishNode = function(e25, t3) {
  return Wf.call(this, e25, t3, this.lastTokEnd, this.lastTokEndLoc);
}, qf.finishNodeAt = function(e25, t3, r2, n2) {
  return Wf.call(this, e25, t3, r2, n2);
};
var $f = function(e25, t3, r2, n2, i2) {
  this.token = e25, this.isExpr = !!t3, this.preserveSpace = !!r2, this.override = n2, this.generator = !!i2;
};
var Gf = { b_stat: new $f("{", false), b_expr: new $f("{", true), b_tmpl: new $f("${", false), p_stat: new $f("(", false), p_expr: new $f("(", true), q_tmpl: new $f("`", true, true, function(e25) {
  return e25.tryReadTemplateToken();
}), f_stat: new $f("function", false), f_expr: new $f("function", true), f_expr_gen: new $f("function", true, false, null, true), f_gen: new $f("function", false, false, null, true) };
var zf = kf.prototype;
zf.initialContext = function() {
  return [Gf.b_stat];
}, zf.braceIsBlock = function(e25) {
  var t3 = this.curContext();
  return t3 === Gf.f_expr || t3 === Gf.f_stat || (e25 !== tf.colon || t3 !== Gf.b_stat && t3 !== Gf.b_expr ? e25 === tf._return || e25 === tf.name && this.exprAllowed ? rf.test(this.input.slice(this.lastTokEnd, this.start)) : e25 === tf._else || e25 === tf.semi || e25 === tf.eof || e25 === tf.parenR || e25 === tf.arrow || (e25 === tf.braceL ? t3 === Gf.b_stat : e25 !== tf._var && e25 !== tf._const && e25 !== tf.name && !this.exprAllowed) : !t3.isExpr);
}, zf.inGeneratorContext = function() {
  for (var e25 = this.context.length - 1; e25 >= 1; e25--) {
    var t3 = this.context[e25];
    if ("function" === t3.token) return t3.generator;
  }
  return false;
}, zf.updateContext = function(e25) {
  var t3, r2 = this.type;
  r2.keyword && e25 === tf.dot ? this.exprAllowed = false : (t3 = r2.updateContext) ? t3.call(this, e25) : this.exprAllowed = r2.beforeExpr;
}, tf.parenR.updateContext = tf.braceR.updateContext = function() {
  if (1 !== this.context.length) {
    var e25 = this.context.pop();
    e25 === Gf.b_stat && "function" === this.curContext().token && (e25 = this.context.pop()), this.exprAllowed = !e25.isExpr;
  } else this.exprAllowed = true;
}, tf.braceL.updateContext = function(e25) {
  this.context.push(this.braceIsBlock(e25) ? Gf.b_stat : Gf.b_expr), this.exprAllowed = true;
}, tf.dollarBraceL.updateContext = function() {
  this.context.push(Gf.b_tmpl), this.exprAllowed = true;
}, tf.parenL.updateContext = function(e25) {
  var t3 = e25 === tf._if || e25 === tf._for || e25 === tf._with || e25 === tf._while;
  this.context.push(t3 ? Gf.p_stat : Gf.p_expr), this.exprAllowed = true;
}, tf.incDec.updateContext = function() {
}, tf._function.updateContext = tf._class.updateContext = function(e25) {
  !e25.beforeExpr || e25 === tf.semi || e25 === tf._else || e25 === tf._return && rf.test(this.input.slice(this.lastTokEnd, this.start)) || (e25 === tf.colon || e25 === tf.braceL) && this.curContext() === Gf.b_stat ? this.context.push(Gf.f_stat) : this.context.push(Gf.f_expr), this.exprAllowed = false;
}, tf.backQuote.updateContext = function() {
  this.curContext() === Gf.q_tmpl ? this.context.pop() : this.context.push(Gf.q_tmpl), this.exprAllowed = false;
}, tf.star.updateContext = function(e25) {
  if (e25 === tf._function) {
    var t3 = this.context.length - 1;
    this.context[t3] === Gf.f_expr ? this.context[t3] = Gf.f_expr_gen : this.context[t3] = Gf.f_gen;
  }
  this.exprAllowed = true;
}, tf.name.updateContext = function(e25) {
  var t3 = false;
  this.options.ecmaVersion >= 6 && e25 !== tf.dot && ("of" === this.value && !this.exprAllowed || "yield" === this.value && this.inGeneratorContext()) && (t3 = true), this.exprAllowed = t3;
};
var Hf = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
var Kf = Hf + " Extended_Pictographic";
var Jf = { 9: Hf, 10: Kf, 11: "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS Extended_Pictographic" };
var Qf = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
var Xf = "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
var Yf = Xf + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
var Zf = { 9: Xf, 10: Yf, 11: "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho" };
var eh = {};
function th(e25) {
  var t3 = eh[e25] = { binary: hf(Jf[e25] + " " + Qf), nonBinary: { General_Category: hf(Qf), Script: hf(Zf[e25]) } };
  t3.nonBinary.Script_Extensions = t3.nonBinary.Script, t3.nonBinary.gc = t3.nonBinary.General_Category, t3.nonBinary.sc = t3.nonBinary.Script, t3.nonBinary.scx = t3.nonBinary.Script_Extensions;
}
th(9), th(10), th(11);
var rh = kf.prototype;
var nh = function(e25) {
  this.parser = e25, this.validFlags = "gim" + (e25.options.ecmaVersion >= 6 ? "uy" : "") + (e25.options.ecmaVersion >= 9 ? "s" : ""), this.unicodeProperties = eh[e25.options.ecmaVersion >= 11 ? 11 : e25.options.ecmaVersion], this.source = "", this.flags = "", this.start = 0, this.switchU = false, this.switchN = false, this.pos = 0, this.lastIntValue = 0, this.lastStringValue = "", this.lastAssertionIsQuantifiable = false, this.numCapturingParens = 0, this.maxBackReference = 0, this.groupNames = [], this.backReferenceNames = [];
};
function ih(e25) {
  return e25 <= 65535 ? String.fromCharCode(e25) : (e25 -= 65536, String.fromCharCode(55296 + (e25 >> 10), 56320 + (1023 & e25)));
}
function ah(e25) {
  return 36 === e25 || e25 >= 40 && e25 <= 43 || 46 === e25 || 63 === e25 || e25 >= 91 && e25 <= 94 || e25 >= 123 && e25 <= 125;
}
function oh(e25) {
  return e25 >= 65 && e25 <= 90 || e25 >= 97 && e25 <= 122;
}
function sh(e25) {
  return oh(e25) || 95 === e25;
}
function uh(e25) {
  return sh(e25) || ch(e25);
}
function ch(e25) {
  return e25 >= 48 && e25 <= 57;
}
function lh(e25) {
  return e25 >= 48 && e25 <= 57 || e25 >= 65 && e25 <= 70 || e25 >= 97 && e25 <= 102;
}
function ph(e25) {
  return e25 >= 65 && e25 <= 70 ? e25 - 65 + 10 : e25 >= 97 && e25 <= 102 ? e25 - 97 + 10 : e25 - 48;
}
function fh(e25) {
  return e25 >= 48 && e25 <= 55;
}
nh.prototype.reset = function(e25, t3, r2) {
  var n2 = -1 !== r2.indexOf("u");
  this.start = 0 | e25, this.source = t3 + "", this.flags = r2, this.switchU = n2 && this.parser.options.ecmaVersion >= 6, this.switchN = n2 && this.parser.options.ecmaVersion >= 9;
}, nh.prototype.raise = function(e25) {
  this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + e25);
}, nh.prototype.at = function(e25) {
  var t3 = this.source, r2 = t3.length;
  if (e25 >= r2) return -1;
  var n2 = t3.charCodeAt(e25);
  return !this.switchU || n2 <= 55295 || n2 >= 57344 || e25 + 1 >= r2 ? n2 : (n2 << 10) + t3.charCodeAt(e25 + 1) - 56613888;
}, nh.prototype.nextIndex = function(e25) {
  var t3 = this.source, r2 = t3.length;
  if (e25 >= r2) return r2;
  var n2 = t3.charCodeAt(e25);
  return !this.switchU || n2 <= 55295 || n2 >= 57344 || e25 + 1 >= r2 ? e25 + 1 : e25 + 2;
}, nh.prototype.current = function() {
  return this.at(this.pos);
}, nh.prototype.lookahead = function() {
  return this.at(this.nextIndex(this.pos));
}, nh.prototype.advance = function() {
  this.pos = this.nextIndex(this.pos);
}, nh.prototype.eat = function(e25) {
  return this.current() === e25 && (this.advance(), true);
}, rh.validateRegExpFlags = function(e25) {
  for (var t3 = e25.validFlags, r2 = e25.flags, n2 = 0; n2 < r2.length; n2++) {
    var i2 = r2.charAt(n2);
    -1 === t3.indexOf(i2) && this.raise(e25.start, "Invalid regular expression flag"), r2.indexOf(i2, n2 + 1) > -1 && this.raise(e25.start, "Duplicate regular expression flag");
  }
}, rh.validateRegExpPattern = function(e25) {
  this.regexp_pattern(e25), !e25.switchN && this.options.ecmaVersion >= 9 && e25.groupNames.length > 0 && (e25.switchN = true, this.regexp_pattern(e25));
}, rh.regexp_pattern = function(e25) {
  e25.pos = 0, e25.lastIntValue = 0, e25.lastStringValue = "", e25.lastAssertionIsQuantifiable = false, e25.numCapturingParens = 0, e25.maxBackReference = 0, e25.groupNames.length = 0, e25.backReferenceNames.length = 0, this.regexp_disjunction(e25), e25.pos !== e25.source.length && (e25.eat(41) && e25.raise("Unmatched ')'"), (e25.eat(93) || e25.eat(125)) && e25.raise("Lone quantifier brackets")), e25.maxBackReference > e25.numCapturingParens && e25.raise("Invalid escape");
  for (var t3 = 0, r2 = e25.backReferenceNames; t3 < r2.length; t3 += 1) {
    var n2 = r2[t3];
    -1 === e25.groupNames.indexOf(n2) && e25.raise("Invalid named capture referenced");
  }
}, rh.regexp_disjunction = function(e25) {
  for (this.regexp_alternative(e25); e25.eat(124); ) this.regexp_alternative(e25);
  this.regexp_eatQuantifier(e25, true) && e25.raise("Nothing to repeat"), e25.eat(123) && e25.raise("Lone quantifier brackets");
}, rh.regexp_alternative = function(e25) {
  for (; e25.pos < e25.source.length && this.regexp_eatTerm(e25); ) ;
}, rh.regexp_eatTerm = function(e25) {
  return this.regexp_eatAssertion(e25) ? (e25.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(e25) && e25.switchU && e25.raise("Invalid quantifier"), true) : !(e25.switchU ? !this.regexp_eatAtom(e25) : !this.regexp_eatExtendedAtom(e25)) && (this.regexp_eatQuantifier(e25), true);
}, rh.regexp_eatAssertion = function(e25) {
  var t3 = e25.pos;
  if (e25.lastAssertionIsQuantifiable = false, e25.eat(94) || e25.eat(36)) return true;
  if (e25.eat(92)) {
    if (e25.eat(66) || e25.eat(98)) return true;
    e25.pos = t3;
  }
  if (e25.eat(40) && e25.eat(63)) {
    var r2 = false;
    if (this.options.ecmaVersion >= 9 && (r2 = e25.eat(60)), e25.eat(61) || e25.eat(33)) return this.regexp_disjunction(e25), e25.eat(41) || e25.raise("Unterminated group"), e25.lastAssertionIsQuantifiable = !r2, true;
  }
  return e25.pos = t3, false;
}, rh.regexp_eatQuantifier = function(e25, t3) {
  return void 0 === t3 && (t3 = false), !!this.regexp_eatQuantifierPrefix(e25, t3) && (e25.eat(63), true);
}, rh.regexp_eatQuantifierPrefix = function(e25, t3) {
  return e25.eat(42) || e25.eat(43) || e25.eat(63) || this.regexp_eatBracedQuantifier(e25, t3);
}, rh.regexp_eatBracedQuantifier = function(e25, t3) {
  var r2 = e25.pos;
  if (e25.eat(123)) {
    var n2 = 0, i2 = -1;
    if (this.regexp_eatDecimalDigits(e25) && (n2 = e25.lastIntValue, e25.eat(44) && this.regexp_eatDecimalDigits(e25) && (i2 = e25.lastIntValue), e25.eat(125))) return -1 !== i2 && i2 < n2 && !t3 && e25.raise("numbers out of order in {} quantifier"), true;
    e25.switchU && !t3 && e25.raise("Incomplete quantifier"), e25.pos = r2;
  }
  return false;
}, rh.regexp_eatAtom = function(e25) {
  return this.regexp_eatPatternCharacters(e25) || e25.eat(46) || this.regexp_eatReverseSolidusAtomEscape(e25) || this.regexp_eatCharacterClass(e25) || this.regexp_eatUncapturingGroup(e25) || this.regexp_eatCapturingGroup(e25);
}, rh.regexp_eatReverseSolidusAtomEscape = function(e25) {
  var t3 = e25.pos;
  if (e25.eat(92)) {
    if (this.regexp_eatAtomEscape(e25)) return true;
    e25.pos = t3;
  }
  return false;
}, rh.regexp_eatUncapturingGroup = function(e25) {
  var t3 = e25.pos;
  if (e25.eat(40)) {
    if (e25.eat(63) && e25.eat(58)) {
      if (this.regexp_disjunction(e25), e25.eat(41)) return true;
      e25.raise("Unterminated group");
    }
    e25.pos = t3;
  }
  return false;
}, rh.regexp_eatCapturingGroup = function(e25) {
  if (e25.eat(40)) {
    if (this.options.ecmaVersion >= 9 ? this.regexp_groupSpecifier(e25) : 63 === e25.current() && e25.raise("Invalid group"), this.regexp_disjunction(e25), e25.eat(41)) return e25.numCapturingParens += 1, true;
    e25.raise("Unterminated group");
  }
  return false;
}, rh.regexp_eatExtendedAtom = function(e25) {
  return e25.eat(46) || this.regexp_eatReverseSolidusAtomEscape(e25) || this.regexp_eatCharacterClass(e25) || this.regexp_eatUncapturingGroup(e25) || this.regexp_eatCapturingGroup(e25) || this.regexp_eatInvalidBracedQuantifier(e25) || this.regexp_eatExtendedPatternCharacter(e25);
}, rh.regexp_eatInvalidBracedQuantifier = function(e25) {
  return this.regexp_eatBracedQuantifier(e25, true) && e25.raise("Nothing to repeat"), false;
}, rh.regexp_eatSyntaxCharacter = function(e25) {
  var t3 = e25.current();
  return !!ah(t3) && (e25.lastIntValue = t3, e25.advance(), true);
}, rh.regexp_eatPatternCharacters = function(e25) {
  for (var t3 = e25.pos, r2 = 0; -1 !== (r2 = e25.current()) && !ah(r2); ) e25.advance();
  return e25.pos !== t3;
}, rh.regexp_eatExtendedPatternCharacter = function(e25) {
  var t3 = e25.current();
  return !(-1 === t3 || 36 === t3 || t3 >= 40 && t3 <= 43 || 46 === t3 || 63 === t3 || 91 === t3 || 94 === t3 || 124 === t3) && (e25.advance(), true);
}, rh.regexp_groupSpecifier = function(e25) {
  if (e25.eat(63)) {
    if (this.regexp_eatGroupName(e25)) return -1 !== e25.groupNames.indexOf(e25.lastStringValue) && e25.raise("Duplicate capture group name"), void e25.groupNames.push(e25.lastStringValue);
    e25.raise("Invalid group");
  }
}, rh.regexp_eatGroupName = function(e25) {
  if (e25.lastStringValue = "", e25.eat(60)) {
    if (this.regexp_eatRegExpIdentifierName(e25) && e25.eat(62)) return true;
    e25.raise("Invalid capture group name");
  }
  return false;
}, rh.regexp_eatRegExpIdentifierName = function(e25) {
  if (e25.lastStringValue = "", this.regexp_eatRegExpIdentifierStart(e25)) {
    for (e25.lastStringValue += ih(e25.lastIntValue); this.regexp_eatRegExpIdentifierPart(e25); ) e25.lastStringValue += ih(e25.lastIntValue);
    return true;
  }
  return false;
}, rh.regexp_eatRegExpIdentifierStart = function(e25) {
  var t3 = e25.pos, r2 = e25.current();
  return e25.advance(), 92 === r2 && this.regexp_eatRegExpUnicodeEscapeSequence(e25) && (r2 = e25.lastIntValue), function(e26) {
    return Hp(e26, true) || 36 === e26 || 95 === e26;
  }(r2) ? (e25.lastIntValue = r2, true) : (e25.pos = t3, false);
}, rh.regexp_eatRegExpIdentifierPart = function(e25) {
  var t3 = e25.pos, r2 = e25.current();
  return e25.advance(), 92 === r2 && this.regexp_eatRegExpUnicodeEscapeSequence(e25) && (r2 = e25.lastIntValue), function(e26) {
    return Kp(e26, true) || 36 === e26 || 95 === e26 || 8204 === e26 || 8205 === e26;
  }(r2) ? (e25.lastIntValue = r2, true) : (e25.pos = t3, false);
}, rh.regexp_eatAtomEscape = function(e25) {
  return !!(this.regexp_eatBackReference(e25) || this.regexp_eatCharacterClassEscape(e25) || this.regexp_eatCharacterEscape(e25) || e25.switchN && this.regexp_eatKGroupName(e25)) || (e25.switchU && (99 === e25.current() && e25.raise("Invalid unicode escape"), e25.raise("Invalid escape")), false);
}, rh.regexp_eatBackReference = function(e25) {
  var t3 = e25.pos;
  if (this.regexp_eatDecimalEscape(e25)) {
    var r2 = e25.lastIntValue;
    if (e25.switchU) return r2 > e25.maxBackReference && (e25.maxBackReference = r2), true;
    if (r2 <= e25.numCapturingParens) return true;
    e25.pos = t3;
  }
  return false;
}, rh.regexp_eatKGroupName = function(e25) {
  if (e25.eat(107)) {
    if (this.regexp_eatGroupName(e25)) return e25.backReferenceNames.push(e25.lastStringValue), true;
    e25.raise("Invalid named reference");
  }
  return false;
}, rh.regexp_eatCharacterEscape = function(e25) {
  return this.regexp_eatControlEscape(e25) || this.regexp_eatCControlLetter(e25) || this.regexp_eatZero(e25) || this.regexp_eatHexEscapeSequence(e25) || this.regexp_eatRegExpUnicodeEscapeSequence(e25) || !e25.switchU && this.regexp_eatLegacyOctalEscapeSequence(e25) || this.regexp_eatIdentityEscape(e25);
}, rh.regexp_eatCControlLetter = function(e25) {
  var t3 = e25.pos;
  if (e25.eat(99)) {
    if (this.regexp_eatControlLetter(e25)) return true;
    e25.pos = t3;
  }
  return false;
}, rh.regexp_eatZero = function(e25) {
  return 48 === e25.current() && !ch(e25.lookahead()) && (e25.lastIntValue = 0, e25.advance(), true);
}, rh.regexp_eatControlEscape = function(e25) {
  var t3 = e25.current();
  return 116 === t3 ? (e25.lastIntValue = 9, e25.advance(), true) : 110 === t3 ? (e25.lastIntValue = 10, e25.advance(), true) : 118 === t3 ? (e25.lastIntValue = 11, e25.advance(), true) : 102 === t3 ? (e25.lastIntValue = 12, e25.advance(), true) : 114 === t3 && (e25.lastIntValue = 13, e25.advance(), true);
}, rh.regexp_eatControlLetter = function(e25) {
  var t3 = e25.current();
  return !!oh(t3) && (e25.lastIntValue = t3 % 32, e25.advance(), true);
}, rh.regexp_eatRegExpUnicodeEscapeSequence = function(e25) {
  var t3, r2 = e25.pos;
  if (e25.eat(117)) {
    if (this.regexp_eatFixedHexDigits(e25, 4)) {
      var n2 = e25.lastIntValue;
      if (e25.switchU && n2 >= 55296 && n2 <= 56319) {
        var i2 = e25.pos;
        if (e25.eat(92) && e25.eat(117) && this.regexp_eatFixedHexDigits(e25, 4)) {
          var a2 = e25.lastIntValue;
          if (a2 >= 56320 && a2 <= 57343) return e25.lastIntValue = 1024 * (n2 - 55296) + (a2 - 56320) + 65536, true;
        }
        e25.pos = i2, e25.lastIntValue = n2;
      }
      return true;
    }
    if (e25.switchU && e25.eat(123) && this.regexp_eatHexDigits(e25) && e25.eat(125) && ((t3 = e25.lastIntValue) >= 0 && t3 <= 1114111)) return true;
    e25.switchU && e25.raise("Invalid unicode escape"), e25.pos = r2;
  }
  return false;
}, rh.regexp_eatIdentityEscape = function(e25) {
  if (e25.switchU) return !!this.regexp_eatSyntaxCharacter(e25) || !!e25.eat(47) && (e25.lastIntValue = 47, true);
  var t3 = e25.current();
  return !(99 === t3 || e25.switchN && 107 === t3) && (e25.lastIntValue = t3, e25.advance(), true);
}, rh.regexp_eatDecimalEscape = function(e25) {
  e25.lastIntValue = 0;
  var t3 = e25.current();
  if (t3 >= 49 && t3 <= 57) {
    do {
      e25.lastIntValue = 10 * e25.lastIntValue + (t3 - 48), e25.advance();
    } while ((t3 = e25.current()) >= 48 && t3 <= 57);
    return true;
  }
  return false;
}, rh.regexp_eatCharacterClassEscape = function(e25) {
  var t3 = e25.current();
  if (/* @__PURE__ */ function(e26) {
    return 100 === e26 || 68 === e26 || 115 === e26 || 83 === e26 || 119 === e26 || 87 === e26;
  }(t3)) return e25.lastIntValue = -1, e25.advance(), true;
  if (e25.switchU && this.options.ecmaVersion >= 9 && (80 === t3 || 112 === t3)) {
    if (e25.lastIntValue = -1, e25.advance(), e25.eat(123) && this.regexp_eatUnicodePropertyValueExpression(e25) && e25.eat(125)) return true;
    e25.raise("Invalid property name");
  }
  return false;
}, rh.regexp_eatUnicodePropertyValueExpression = function(e25) {
  var t3 = e25.pos;
  if (this.regexp_eatUnicodePropertyName(e25) && e25.eat(61)) {
    var r2 = e25.lastStringValue;
    if (this.regexp_eatUnicodePropertyValue(e25)) {
      var n2 = e25.lastStringValue;
      return this.regexp_validateUnicodePropertyNameAndValue(e25, r2, n2), true;
    }
  }
  if (e25.pos = t3, this.regexp_eatLoneUnicodePropertyNameOrValue(e25)) {
    var i2 = e25.lastStringValue;
    return this.regexp_validateUnicodePropertyNameOrValue(e25, i2), true;
  }
  return false;
}, rh.regexp_validateUnicodePropertyNameAndValue = function(e25, t3, r2) {
  pf(e25.unicodeProperties.nonBinary, t3) || e25.raise("Invalid property name"), e25.unicodeProperties.nonBinary[t3].test(r2) || e25.raise("Invalid property value");
}, rh.regexp_validateUnicodePropertyNameOrValue = function(e25, t3) {
  e25.unicodeProperties.binary.test(t3) || e25.raise("Invalid property name");
}, rh.regexp_eatUnicodePropertyName = function(e25) {
  var t3 = 0;
  for (e25.lastStringValue = ""; sh(t3 = e25.current()); ) e25.lastStringValue += ih(t3), e25.advance();
  return "" !== e25.lastStringValue;
}, rh.regexp_eatUnicodePropertyValue = function(e25) {
  var t3 = 0;
  for (e25.lastStringValue = ""; uh(t3 = e25.current()); ) e25.lastStringValue += ih(t3), e25.advance();
  return "" !== e25.lastStringValue;
}, rh.regexp_eatLoneUnicodePropertyNameOrValue = function(e25) {
  return this.regexp_eatUnicodePropertyValue(e25);
}, rh.regexp_eatCharacterClass = function(e25) {
  if (e25.eat(91)) {
    if (e25.eat(94), this.regexp_classRanges(e25), e25.eat(93)) return true;
    e25.raise("Unterminated character class");
  }
  return false;
}, rh.regexp_classRanges = function(e25) {
  for (; this.regexp_eatClassAtom(e25); ) {
    var t3 = e25.lastIntValue;
    if (e25.eat(45) && this.regexp_eatClassAtom(e25)) {
      var r2 = e25.lastIntValue;
      !e25.switchU || -1 !== t3 && -1 !== r2 || e25.raise("Invalid character class"), -1 !== t3 && -1 !== r2 && t3 > r2 && e25.raise("Range out of order in character class");
    }
  }
}, rh.regexp_eatClassAtom = function(e25) {
  var t3 = e25.pos;
  if (e25.eat(92)) {
    if (this.regexp_eatClassEscape(e25)) return true;
    if (e25.switchU) {
      var r2 = e25.current();
      (99 === r2 || fh(r2)) && e25.raise("Invalid class escape"), e25.raise("Invalid escape");
    }
    e25.pos = t3;
  }
  var n2 = e25.current();
  return 93 !== n2 && (e25.lastIntValue = n2, e25.advance(), true);
}, rh.regexp_eatClassEscape = function(e25) {
  var t3 = e25.pos;
  if (e25.eat(98)) return e25.lastIntValue = 8, true;
  if (e25.switchU && e25.eat(45)) return e25.lastIntValue = 45, true;
  if (!e25.switchU && e25.eat(99)) {
    if (this.regexp_eatClassControlLetter(e25)) return true;
    e25.pos = t3;
  }
  return this.regexp_eatCharacterClassEscape(e25) || this.regexp_eatCharacterEscape(e25);
}, rh.regexp_eatClassControlLetter = function(e25) {
  var t3 = e25.current();
  return !(!ch(t3) && 95 !== t3) && (e25.lastIntValue = t3 % 32, e25.advance(), true);
}, rh.regexp_eatHexEscapeSequence = function(e25) {
  var t3 = e25.pos;
  if (e25.eat(120)) {
    if (this.regexp_eatFixedHexDigits(e25, 2)) return true;
    e25.switchU && e25.raise("Invalid escape"), e25.pos = t3;
  }
  return false;
}, rh.regexp_eatDecimalDigits = function(e25) {
  var t3 = e25.pos, r2 = 0;
  for (e25.lastIntValue = 0; ch(r2 = e25.current()); ) e25.lastIntValue = 10 * e25.lastIntValue + (r2 - 48), e25.advance();
  return e25.pos !== t3;
}, rh.regexp_eatHexDigits = function(e25) {
  var t3 = e25.pos, r2 = 0;
  for (e25.lastIntValue = 0; lh(r2 = e25.current()); ) e25.lastIntValue = 16 * e25.lastIntValue + ph(r2), e25.advance();
  return e25.pos !== t3;
}, rh.regexp_eatLegacyOctalEscapeSequence = function(e25) {
  if (this.regexp_eatOctalDigit(e25)) {
    var t3 = e25.lastIntValue;
    if (this.regexp_eatOctalDigit(e25)) {
      var r2 = e25.lastIntValue;
      t3 <= 3 && this.regexp_eatOctalDigit(e25) ? e25.lastIntValue = 64 * t3 + 8 * r2 + e25.lastIntValue : e25.lastIntValue = 8 * t3 + r2;
    } else e25.lastIntValue = t3;
    return true;
  }
  return false;
}, rh.regexp_eatOctalDigit = function(e25) {
  var t3 = e25.current();
  return fh(t3) ? (e25.lastIntValue = t3 - 48, e25.advance(), true) : (e25.lastIntValue = 0, false);
}, rh.regexp_eatFixedHexDigits = function(e25, t3) {
  var r2 = e25.pos;
  e25.lastIntValue = 0;
  for (var n2 = 0; n2 < t3; ++n2) {
    var i2 = e25.current();
    if (!lh(i2)) return e25.pos = r2, false;
    e25.lastIntValue = 16 * e25.lastIntValue + ph(i2), e25.advance();
  }
  return true;
};
var hh = function(e25) {
  this.type = e25.type, this.value = e25.value, this.start = e25.start, this.end = e25.end, e25.options.locations && (this.loc = new mf(e25, e25.startLoc, e25.endLoc)), e25.options.ranges && (this.range = [e25.start, e25.end]);
};
var dh = kf.prototype;
function mh(e25) {
  return e25 <= 65535 ? String.fromCharCode(e25) : (e25 -= 65536, String.fromCharCode(55296 + (e25 >> 10), 56320 + (1023 & e25)));
}
dh.next = function() {
  this.options.onToken && this.options.onToken(new hh(this)), this.lastTokEnd = this.end, this.lastTokStart = this.start, this.lastTokEndLoc = this.endLoc, this.lastTokStartLoc = this.startLoc, this.nextToken();
}, dh.getToken = function() {
  return this.next(), new hh(this);
}, "undefined" != typeof Symbol && (dh[Symbol.iterator] = function() {
  var e25 = this;
  return { next: function() {
    var t3 = e25.getToken();
    return { done: t3.type === tf.eof, value: t3 };
  } };
}), dh.curContext = function() {
  return this.context[this.context.length - 1];
}, dh.nextToken = function() {
  var e25 = this.curContext();
  return e25 && e25.preserveSpace || this.skipSpace(), this.start = this.pos, this.options.locations && (this.startLoc = this.curPosition()), this.pos >= this.input.length ? this.finishToken(tf.eof) : e25.override ? e25.override(this) : void this.readToken(this.fullCharCodeAtPos());
}, dh.readToken = function(e25) {
  return Hp(e25, this.options.ecmaVersion >= 6) || 92 === e25 ? this.readWord() : this.getTokenFromCode(e25);
}, dh.fullCharCodeAtPos = function() {
  var e25 = this.input.charCodeAt(this.pos);
  return e25 <= 55295 || e25 >= 57344 ? e25 : (e25 << 10) + this.input.charCodeAt(this.pos + 1) - 56613888;
}, dh.skipBlockComment = function() {
  var e25, t3 = this.options.onComment && this.curPosition(), r2 = this.pos, n2 = this.input.indexOf("*/", this.pos += 2);
  if (-1 === n2 && this.raise(this.pos - 2, "Unterminated comment"), this.pos = n2 + 2, this.options.locations) for (nf.lastIndex = r2; (e25 = nf.exec(this.input)) && e25.index < this.pos; ) ++this.curLine, this.lineStart = e25.index + e25[0].length;
  this.options.onComment && this.options.onComment(true, this.input.slice(r2 + 2, n2), r2, this.pos, t3, this.curPosition());
}, dh.skipLineComment = function(e25) {
  for (var t3 = this.pos, r2 = this.options.onComment && this.curPosition(), n2 = this.input.charCodeAt(this.pos += e25); this.pos < this.input.length && !af(n2); ) n2 = this.input.charCodeAt(++this.pos);
  this.options.onComment && this.options.onComment(false, this.input.slice(t3 + e25, this.pos), t3, this.pos, r2, this.curPosition());
}, dh.skipSpace = function() {
  e: for (; this.pos < this.input.length; ) {
    var e25 = this.input.charCodeAt(this.pos);
    switch (e25) {
      case 32:
      case 160:
        ++this.pos;
        break;
      case 13:
        10 === this.input.charCodeAt(this.pos + 1) && ++this.pos;
      case 10:
      case 8232:
      case 8233:
        ++this.pos, this.options.locations && (++this.curLine, this.lineStart = this.pos);
        break;
      case 47:
        switch (this.input.charCodeAt(this.pos + 1)) {
          case 42:
            this.skipBlockComment();
            break;
          case 47:
            this.skipLineComment(2);
            break;
          default:
            break e;
        }
        break;
      default:
        if (!(e25 > 8 && e25 < 14 || e25 >= 5760 && of.test(String.fromCharCode(e25)))) break e;
        ++this.pos;
    }
  }
}, dh.finishToken = function(e25, t3) {
  this.end = this.pos, this.options.locations && (this.endLoc = this.curPosition());
  var r2 = this.type;
  this.type = e25, this.value = t3, this.updateContext(r2);
}, dh.readToken_dot = function() {
  var e25 = this.input.charCodeAt(this.pos + 1);
  if (e25 >= 48 && e25 <= 57) return this.readNumber(true);
  var t3 = this.input.charCodeAt(this.pos + 2);
  return this.options.ecmaVersion >= 6 && 46 === e25 && 46 === t3 ? (this.pos += 3, this.finishToken(tf.ellipsis)) : (++this.pos, this.finishToken(tf.dot));
}, dh.readToken_slash = function() {
  var e25 = this.input.charCodeAt(this.pos + 1);
  return this.exprAllowed ? (++this.pos, this.readRegexp()) : 61 === e25 ? this.finishOp(tf.assign, 2) : this.finishOp(tf.slash, 1);
}, dh.readToken_mult_modulo_exp = function(e25) {
  var t3 = this.input.charCodeAt(this.pos + 1), r2 = 1, n2 = 42 === e25 ? tf.star : tf.modulo;
  return this.options.ecmaVersion >= 7 && 42 === e25 && 42 === t3 && (++r2, n2 = tf.starstar, t3 = this.input.charCodeAt(this.pos + 2)), 61 === t3 ? this.finishOp(tf.assign, r2 + 1) : this.finishOp(n2, r2);
}, dh.readToken_pipe_amp = function(e25) {
  var t3 = this.input.charCodeAt(this.pos + 1);
  return t3 === e25 ? this.finishOp(124 === e25 ? tf.logicalOR : tf.logicalAND, 2) : 61 === t3 ? this.finishOp(tf.assign, 2) : this.finishOp(124 === e25 ? tf.bitwiseOR : tf.bitwiseAND, 1);
}, dh.readToken_caret = function() {
  return 61 === this.input.charCodeAt(this.pos + 1) ? this.finishOp(tf.assign, 2) : this.finishOp(tf.bitwiseXOR, 1);
}, dh.readToken_plus_min = function(e25) {
  var t3 = this.input.charCodeAt(this.pos + 1);
  return t3 === e25 ? 45 !== t3 || this.inModule || 62 !== this.input.charCodeAt(this.pos + 2) || 0 !== this.lastTokEnd && !rf.test(this.input.slice(this.lastTokEnd, this.pos)) ? this.finishOp(tf.incDec, 2) : (this.skipLineComment(3), this.skipSpace(), this.nextToken()) : 61 === t3 ? this.finishOp(tf.assign, 2) : this.finishOp(tf.plusMin, 1);
}, dh.readToken_lt_gt = function(e25) {
  var t3 = this.input.charCodeAt(this.pos + 1), r2 = 1;
  return t3 === e25 ? (r2 = 62 === e25 && 62 === this.input.charCodeAt(this.pos + 2) ? 3 : 2, 61 === this.input.charCodeAt(this.pos + r2) ? this.finishOp(tf.assign, r2 + 1) : this.finishOp(tf.bitShift, r2)) : 33 !== t3 || 60 !== e25 || this.inModule || 45 !== this.input.charCodeAt(this.pos + 2) || 45 !== this.input.charCodeAt(this.pos + 3) ? (61 === t3 && (r2 = 2), this.finishOp(tf.relational, r2)) : (this.skipLineComment(4), this.skipSpace(), this.nextToken());
}, dh.readToken_eq_excl = function(e25) {
  var t3 = this.input.charCodeAt(this.pos + 1);
  return 61 === t3 ? this.finishOp(tf.equality, 61 === this.input.charCodeAt(this.pos + 2) ? 3 : 2) : 61 === e25 && 62 === t3 && this.options.ecmaVersion >= 6 ? (this.pos += 2, this.finishToken(tf.arrow)) : this.finishOp(61 === e25 ? tf.eq : tf.prefix, 1);
}, dh.getTokenFromCode = function(e25) {
  switch (e25) {
    case 46:
      return this.readToken_dot();
    case 40:
      return ++this.pos, this.finishToken(tf.parenL);
    case 41:
      return ++this.pos, this.finishToken(tf.parenR);
    case 59:
      return ++this.pos, this.finishToken(tf.semi);
    case 44:
      return ++this.pos, this.finishToken(tf.comma);
    case 91:
      return ++this.pos, this.finishToken(tf.bracketL);
    case 93:
      return ++this.pos, this.finishToken(tf.bracketR);
    case 123:
      return ++this.pos, this.finishToken(tf.braceL);
    case 125:
      return ++this.pos, this.finishToken(tf.braceR);
    case 58:
      return ++this.pos, this.finishToken(tf.colon);
    case 63:
      return ++this.pos, this.finishToken(tf.question);
    case 96:
      if (this.options.ecmaVersion < 6) break;
      return ++this.pos, this.finishToken(tf.backQuote);
    case 48:
      var t3 = this.input.charCodeAt(this.pos + 1);
      if (120 === t3 || 88 === t3) return this.readRadixNumber(16);
      if (this.options.ecmaVersion >= 6) {
        if (111 === t3 || 79 === t3) return this.readRadixNumber(8);
        if (98 === t3 || 66 === t3) return this.readRadixNumber(2);
      }
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      return this.readNumber(false);
    case 34:
    case 39:
      return this.readString(e25);
    case 47:
      return this.readToken_slash();
    case 37:
    case 42:
      return this.readToken_mult_modulo_exp(e25);
    case 124:
    case 38:
      return this.readToken_pipe_amp(e25);
    case 94:
      return this.readToken_caret();
    case 43:
    case 45:
      return this.readToken_plus_min(e25);
    case 60:
    case 62:
      return this.readToken_lt_gt(e25);
    case 61:
    case 33:
      return this.readToken_eq_excl(e25);
    case 126:
      return this.finishOp(tf.prefix, 1);
  }
  this.raise(this.pos, "Unexpected character '" + mh(e25) + "'");
}, dh.finishOp = function(e25, t3) {
  var r2 = this.input.slice(this.pos, this.pos + t3);
  return this.pos += t3, this.finishToken(e25, r2);
}, dh.readRegexp = function() {
  for (var e25, t3, r2 = this.pos; ; ) {
    this.pos >= this.input.length && this.raise(r2, "Unterminated regular expression");
    var n2 = this.input.charAt(this.pos);
    if (rf.test(n2) && this.raise(r2, "Unterminated regular expression"), e25) e25 = false;
    else {
      if ("[" === n2) t3 = true;
      else if ("]" === n2 && t3) t3 = false;
      else if ("/" === n2 && !t3) break;
      e25 = "\\" === n2;
    }
    ++this.pos;
  }
  var i2 = this.input.slice(r2, this.pos);
  ++this.pos;
  var a2 = this.pos, o2 = this.readWord1();
  this.containsEsc && this.unexpected(a2);
  var s2 = this.regexpState || (this.regexpState = new nh(this));
  s2.reset(r2, i2, o2), this.validateRegExpFlags(s2), this.validateRegExpPattern(s2);
  var u2 = null;
  try {
    u2 = new RegExp(i2, o2);
  } catch (e26) {
  }
  return this.finishToken(tf.regexp, { pattern: i2, flags: o2, value: u2 });
}, dh.readInt = function(e25, t3) {
  for (var r2 = this.pos, n2 = 0, i2 = 0, a2 = null == t3 ? 1 / 0 : t3; i2 < a2; ++i2) {
    var o2 = this.input.charCodeAt(this.pos), s2 = void 0;
    if ((s2 = o2 >= 97 ? o2 - 97 + 10 : o2 >= 65 ? o2 - 65 + 10 : o2 >= 48 && o2 <= 57 ? o2 - 48 : 1 / 0) >= e25) break;
    ++this.pos, n2 = n2 * e25 + s2;
  }
  return this.pos === r2 || null != t3 && this.pos - r2 !== t3 ? null : n2;
}, dh.readRadixNumber = function(e25) {
  var t3 = this.pos;
  this.pos += 2;
  var r2 = this.readInt(e25);
  return null == r2 && this.raise(this.start + 2, "Expected number in radix " + e25), this.options.ecmaVersion >= 11 && 110 === this.input.charCodeAt(this.pos) ? (r2 = "undefined" != typeof BigInt ? BigInt(this.input.slice(t3, this.pos)) : null, ++this.pos) : Hp(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(tf.num, r2);
}, dh.readNumber = function(e25) {
  var t3 = this.pos;
  e25 || null !== this.readInt(10) || this.raise(t3, "Invalid number");
  var r2 = this.pos - t3 >= 2 && 48 === this.input.charCodeAt(t3);
  r2 && this.strict && this.raise(t3, "Invalid number"), r2 && /[89]/.test(this.input.slice(t3, this.pos)) && (r2 = false);
  var n2 = this.input.charCodeAt(this.pos);
  if (!r2 && !e25 && this.options.ecmaVersion >= 11 && 110 === n2) {
    var i2 = this.input.slice(t3, this.pos), a2 = "undefined" != typeof BigInt ? BigInt(i2) : null;
    return ++this.pos, Hp(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(tf.num, a2);
  }
  46 !== n2 || r2 || (++this.pos, this.readInt(10), n2 = this.input.charCodeAt(this.pos)), 69 !== n2 && 101 !== n2 || r2 || (43 !== (n2 = this.input.charCodeAt(++this.pos)) && 45 !== n2 || ++this.pos, null === this.readInt(10) && this.raise(t3, "Invalid number")), Hp(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
  var o2 = this.input.slice(t3, this.pos), s2 = r2 ? parseInt(o2, 8) : parseFloat(o2);
  return this.finishToken(tf.num, s2);
}, dh.readCodePoint = function() {
  var e25;
  if (123 === this.input.charCodeAt(this.pos)) {
    this.options.ecmaVersion < 6 && this.unexpected();
    var t3 = ++this.pos;
    e25 = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos), ++this.pos, e25 > 1114111 && this.invalidStringToken(t3, "Code point out of bounds");
  } else e25 = this.readHexChar(4);
  return e25;
}, dh.readString = function(e25) {
  for (var t3 = "", r2 = ++this.pos; ; ) {
    this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
    var n2 = this.input.charCodeAt(this.pos);
    if (n2 === e25) break;
    92 === n2 ? (t3 += this.input.slice(r2, this.pos), t3 += this.readEscapedChar(false), r2 = this.pos) : (af(n2, this.options.ecmaVersion >= 10) && this.raise(this.start, "Unterminated string constant"), ++this.pos);
  }
  return t3 += this.input.slice(r2, this.pos++), this.finishToken(tf.string, t3);
};
var gh = {};
dh.tryReadTemplateToken = function() {
  this.inTemplateElement = true;
  try {
    this.readTmplToken();
  } catch (e25) {
    if (e25 !== gh) throw e25;
    this.readInvalidTemplateToken();
  }
  this.inTemplateElement = false;
}, dh.invalidStringToken = function(e25, t3) {
  if (this.inTemplateElement && this.options.ecmaVersion >= 9) throw gh;
  this.raise(e25, t3);
}, dh.readTmplToken = function() {
  for (var e25 = "", t3 = this.pos; ; ) {
    this.pos >= this.input.length && this.raise(this.start, "Unterminated template");
    var r2 = this.input.charCodeAt(this.pos);
    if (96 === r2 || 36 === r2 && 123 === this.input.charCodeAt(this.pos + 1)) return this.pos !== this.start || this.type !== tf.template && this.type !== tf.invalidTemplate ? (e25 += this.input.slice(t3, this.pos), this.finishToken(tf.template, e25)) : 36 === r2 ? (this.pos += 2, this.finishToken(tf.dollarBraceL)) : (++this.pos, this.finishToken(tf.backQuote));
    if (92 === r2) e25 += this.input.slice(t3, this.pos), e25 += this.readEscapedChar(true), t3 = this.pos;
    else if (af(r2)) {
      switch (e25 += this.input.slice(t3, this.pos), ++this.pos, r2) {
        case 13:
          10 === this.input.charCodeAt(this.pos) && ++this.pos;
        case 10:
          e25 += "\n";
          break;
        default:
          e25 += String.fromCharCode(r2);
      }
      this.options.locations && (++this.curLine, this.lineStart = this.pos), t3 = this.pos;
    } else ++this.pos;
  }
}, dh.readInvalidTemplateToken = function() {
  for (; this.pos < this.input.length; this.pos++) switch (this.input[this.pos]) {
    case "\\":
      ++this.pos;
      break;
    case "$":
      if ("{" !== this.input[this.pos + 1]) break;
    case "`":
      return this.finishToken(tf.invalidTemplate, this.input.slice(this.start, this.pos));
  }
  this.raise(this.start, "Unterminated template");
}, dh.readEscapedChar = function(e25) {
  var t3 = this.input.charCodeAt(++this.pos);
  switch (++this.pos, t3) {
    case 110:
      return "\n";
    case 114:
      return "\r";
    case 120:
      return String.fromCharCode(this.readHexChar(2));
    case 117:
      return mh(this.readCodePoint());
    case 116:
      return "	";
    case 98:
      return "\b";
    case 118:
      return "\v";
    case 102:
      return "\f";
    case 13:
      10 === this.input.charCodeAt(this.pos) && ++this.pos;
    case 10:
      return this.options.locations && (this.lineStart = this.pos, ++this.curLine), "";
    default:
      if (t3 >= 48 && t3 <= 55) {
        var r2 = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0], n2 = parseInt(r2, 8);
        return n2 > 255 && (r2 = r2.slice(0, -1), n2 = parseInt(r2, 8)), this.pos += r2.length - 1, t3 = this.input.charCodeAt(this.pos), "0" === r2 && 56 !== t3 && 57 !== t3 || !this.strict && !e25 || this.invalidStringToken(this.pos - 1 - r2.length, e25 ? "Octal literal in template string" : "Octal literal in strict mode"), String.fromCharCode(n2);
      }
      return af(t3) ? "" : String.fromCharCode(t3);
  }
}, dh.readHexChar = function(e25) {
  var t3 = this.pos, r2 = this.readInt(16, e25);
  return null === r2 && this.invalidStringToken(t3, "Bad character escape sequence"), r2;
}, dh.readWord1 = function() {
  this.containsEsc = false;
  for (var e25 = "", t3 = true, r2 = this.pos, n2 = this.options.ecmaVersion >= 6; this.pos < this.input.length; ) {
    var i2 = this.fullCharCodeAtPos();
    if (Kp(i2, n2)) this.pos += i2 <= 65535 ? 1 : 2;
    else {
      if (92 !== i2) break;
      this.containsEsc = true, e25 += this.input.slice(r2, this.pos);
      var a2 = this.pos;
      117 !== this.input.charCodeAt(++this.pos) && this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"), ++this.pos;
      var o2 = this.readCodePoint();
      (t3 ? Hp : Kp)(o2, n2) || this.invalidStringToken(a2, "Invalid Unicode escape"), e25 += mh(o2), r2 = this.pos;
    }
    t3 = false;
  }
  return e25 + this.input.slice(r2, this.pos);
}, dh.readWord = function() {
  var e25 = this.readWord1(), t3 = tf.name;
  return this.keywords.test(e25) && (this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword " + e25), t3 = Zp[e25]), this.finishToken(t3, e25);
};
kf.acorn = { Parser: kf, version: "7.1.0", defaultOptions: yf, Position: df, SourceLocation: mf, getLineInfo: gf, Node: Uf, TokenType: Jp, tokTypes: tf, keywordTypes: Zp, TokContext: $f, tokContexts: Gf, isIdentifierChar: Kp, isIdentifierStart: Hp, Token: hh, isNewLine: af, lineBreak: rf, lineBreakG: nf, nonASCIIwhitespace: of };
var yh = Object.freeze({ __proto__: null, Node: Uf, Parser: kf, Position: df, SourceLocation: mf, TokContext: $f, Token: hh, TokenType: Jp, defaultOptions: yf, getLineInfo: gf, isIdentifierChar: Kp, isIdentifierStart: Hp, isNewLine: af, keywordTypes: Zp, lineBreak: rf, lineBreakG: nf, nonASCIIwhitespace: of, parse: function(e25, t3) {
  return kf.parse(e25, t3);
}, parseExpressionAt: function(e25, t3, r2) {
  return kf.parseExpressionAt(e25, t3, r2);
}, tokContexts: Gf, tokTypes: tf, tokenizer: function(e25, t3) {
  return kf.tokenizer(e25, t3);
}, version: "7.1.0" });
var vh = { quot: '"', amp: "&", apos: "'", lt: "<", gt: ">", nbsp: "\xA0", iexcl: "\xA1", cent: "\xA2", pound: "\xA3", curren: "\xA4", yen: "\xA5", brvbar: "\xA6", sect: "\xA7", uml: "\xA8", copy: "\xA9", ordf: "\xAA", laquo: "\xAB", not: "\xAC", shy: "\xAD", reg: "\xAE", macr: "\xAF", deg: "\xB0", plusmn: "\xB1", sup2: "\xB2", sup3: "\xB3", acute: "\xB4", micro: "\xB5", para: "\xB6", middot: "\xB7", cedil: "\xB8", sup1: "\xB9", ordm: "\xBA", raquo: "\xBB", frac14: "\xBC", frac12: "\xBD", frac34: "\xBE", iquest: "\xBF", Agrave: "\xC0", Aacute: "\xC1", Acirc: "\xC2", Atilde: "\xC3", Auml: "\xC4", Aring: "\xC5", AElig: "\xC6", Ccedil: "\xC7", Egrave: "\xC8", Eacute: "\xC9", Ecirc: "\xCA", Euml: "\xCB", Igrave: "\xCC", Iacute: "\xCD", Icirc: "\xCE", Iuml: "\xCF", ETH: "\xD0", Ntilde: "\xD1", Ograve: "\xD2", Oacute: "\xD3", Ocirc: "\xD4", Otilde: "\xD5", Ouml: "\xD6", times: "\xD7", Oslash: "\xD8", Ugrave: "\xD9", Uacute: "\xDA", Ucirc: "\xDB", Uuml: "\xDC", Yacute: "\xDD", THORN: "\xDE", szlig: "\xDF", agrave: "\xE0", aacute: "\xE1", acirc: "\xE2", atilde: "\xE3", auml: "\xE4", aring: "\xE5", aelig: "\xE6", ccedil: "\xE7", egrave: "\xE8", eacute: "\xE9", ecirc: "\xEA", euml: "\xEB", igrave: "\xEC", iacute: "\xED", icirc: "\xEE", iuml: "\xEF", eth: "\xF0", ntilde: "\xF1", ograve: "\xF2", oacute: "\xF3", ocirc: "\xF4", otilde: "\xF5", ouml: "\xF6", divide: "\xF7", oslash: "\xF8", ugrave: "\xF9", uacute: "\xFA", ucirc: "\xFB", uuml: "\xFC", yacute: "\xFD", thorn: "\xFE", yuml: "\xFF", OElig: "\u0152", oelig: "\u0153", Scaron: "\u0160", scaron: "\u0161", Yuml: "\u0178", fnof: "\u0192", circ: "\u02C6", tilde: "\u02DC", Alpha: "\u0391", Beta: "\u0392", Gamma: "\u0393", Delta: "\u0394", Epsilon: "\u0395", Zeta: "\u0396", Eta: "\u0397", Theta: "\u0398", Iota: "\u0399", Kappa: "\u039A", Lambda: "\u039B", Mu: "\u039C", Nu: "\u039D", Xi: "\u039E", Omicron: "\u039F", Pi: "\u03A0", Rho: "\u03A1", Sigma: "\u03A3", Tau: "\u03A4", Upsilon: "\u03A5", Phi: "\u03A6", Chi: "\u03A7", Psi: "\u03A8", Omega: "\u03A9", alpha: "\u03B1", beta: "\u03B2", gamma: "\u03B3", delta: "\u03B4", epsilon: "\u03B5", zeta: "\u03B6", eta: "\u03B7", theta: "\u03B8", iota: "\u03B9", kappa: "\u03BA", lambda: "\u03BB", mu: "\u03BC", nu: "\u03BD", xi: "\u03BE", omicron: "\u03BF", pi: "\u03C0", rho: "\u03C1", sigmaf: "\u03C2", sigma: "\u03C3", tau: "\u03C4", upsilon: "\u03C5", phi: "\u03C6", chi: "\u03C7", psi: "\u03C8", omega: "\u03C9", thetasym: "\u03D1", upsih: "\u03D2", piv: "\u03D6", ensp: "\u2002", emsp: "\u2003", thinsp: "\u2009", zwnj: "\u200C", zwj: "\u200D", lrm: "\u200E", rlm: "\u200F", ndash: "\u2013", mdash: "\u2014", lsquo: "\u2018", rsquo: "\u2019", sbquo: "\u201A", ldquo: "\u201C", rdquo: "\u201D", bdquo: "\u201E", dagger: "\u2020", Dagger: "\u2021", bull: "\u2022", hellip: "\u2026", permil: "\u2030", prime: "\u2032", Prime: "\u2033", lsaquo: "\u2039", rsaquo: "\u203A", oline: "\u203E", frasl: "\u2044", euro: "\u20AC", image: "\u2111", weierp: "\u2118", real: "\u211C", trade: "\u2122", alefsym: "\u2135", larr: "\u2190", uarr: "\u2191", rarr: "\u2192", darr: "\u2193", harr: "\u2194", crarr: "\u21B5", lArr: "\u21D0", uArr: "\u21D1", rArr: "\u21D2", dArr: "\u21D3", hArr: "\u21D4", forall: "\u2200", part: "\u2202", exist: "\u2203", empty: "\u2205", nabla: "\u2207", isin: "\u2208", notin: "\u2209", ni: "\u220B", prod: "\u220F", sum: "\u2211", minus: "\u2212", lowast: "\u2217", radic: "\u221A", prop: "\u221D", infin: "\u221E", ang: "\u2220", and: "\u2227", or: "\u2228", cap: "\u2229", cup: "\u222A", int: "\u222B", there4: "\u2234", sim: "\u223C", cong: "\u2245", asymp: "\u2248", ne: "\u2260", equiv: "\u2261", le: "\u2264", ge: "\u2265", sub: "\u2282", sup: "\u2283", nsub: "\u2284", sube: "\u2286", supe: "\u2287", oplus: "\u2295", otimes: "\u2297", perp: "\u22A5", sdot: "\u22C5", lceil: "\u2308", rceil: "\u2309", lfloor: "\u230A", rfloor: "\u230B", lang: "\u2329", rang: "\u232A", loz: "\u25CA", spades: "\u2660", clubs: "\u2663", hearts: "\u2665", diams: "\u2666" };
var xh = { 3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile", 5: "class enum extends super const export import", 6: "enum", strict: "implements interface let package private protected public static yield", strictBind: "eval arguments" };
var bh = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
var Eh = { 5: bh, "5module": bh + " export import", 6: bh + " const class extends export import super" };
var Ch = /^in(stanceof)?$/;
var Sh = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7C6\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB67\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
var kh = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
var Dh = new RegExp("[" + Sh + "]");
var Fh = new RegExp("[" + Sh + kh + "]");
Sh = kh = null;
var Ah = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 477, 28, 11, 0, 9, 21, 155, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 12, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 0, 33, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 0, 161, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 270, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 754, 9486, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541];
var wh = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 525, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 232, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 792487, 239];
function _h(e25, t3) {
  for (var r2 = 65536, n2 = 0; n2 < t3.length; n2 += 2) {
    if ((r2 += t3[n2]) > e25) return false;
    if ((r2 += t3[n2 + 1]) >= e25) return true;
  }
}
function Th(e25, t3) {
  return e25 < 65 ? 36 === e25 : e25 < 91 || (e25 < 97 ? 95 === e25 : e25 < 123 || (e25 <= 65535 ? e25 >= 170 && Dh.test(String.fromCharCode(e25)) : false !== t3 && _h(e25, Ah)));
}
function Ph(e25, t3) {
  return e25 < 48 ? 36 === e25 : e25 < 58 || !(e25 < 65) && (e25 < 91 || (e25 < 97 ? 95 === e25 : e25 < 123 || (e25 <= 65535 ? e25 >= 170 && Fh.test(String.fromCharCode(e25)) : false !== t3 && (_h(e25, Ah) || _h(e25, wh)))));
}
var Ih = function(e25, t3) {
  void 0 === t3 && (t3 = {}), this.label = e25, this.keyword = t3.keyword, this.beforeExpr = !!t3.beforeExpr, this.startsExpr = !!t3.startsExpr, this.isLoop = !!t3.isLoop, this.isAssign = !!t3.isAssign, this.prefix = !!t3.prefix, this.postfix = !!t3.postfix, this.binop = t3.binop || null, this.updateContext = null;
};
function Bh(e25, t3) {
  return new Ih(e25, { beforeExpr: true, binop: t3 });
}
var Oh = { beforeExpr: true };
var Lh = { startsExpr: true };
var Nh = {};
function jh(e25, t3) {
  return void 0 === t3 && (t3 = {}), t3.keyword = e25, Nh[e25] = new Ih(e25, t3);
}
var Rh = { num: new Ih("num", Lh), regexp: new Ih("regexp", Lh), string: new Ih("string", Lh), name: new Ih("name", Lh), eof: new Ih("eof"), bracketL: new Ih("[", { beforeExpr: true, startsExpr: true }), bracketR: new Ih("]"), braceL: new Ih("{", { beforeExpr: true, startsExpr: true }), braceR: new Ih("}"), parenL: new Ih("(", { beforeExpr: true, startsExpr: true }), parenR: new Ih(")"), comma: new Ih(",", Oh), semi: new Ih(";", Oh), colon: new Ih(":", Oh), dot: new Ih("."), question: new Ih("?", Oh), arrow: new Ih("=>", Oh), template: new Ih("template"), invalidTemplate: new Ih("invalidTemplate"), ellipsis: new Ih("...", Oh), backQuote: new Ih("`", Lh), dollarBraceL: new Ih("${", { beforeExpr: true, startsExpr: true }), eq: new Ih("=", { beforeExpr: true, isAssign: true }), assign: new Ih("_=", { beforeExpr: true, isAssign: true }), incDec: new Ih("++/--", { prefix: true, postfix: true, startsExpr: true }), prefix: new Ih("!/~", { beforeExpr: true, prefix: true, startsExpr: true }), logicalOR: Bh("||", 1), logicalAND: Bh("&&", 2), bitwiseOR: Bh("|", 3), bitwiseXOR: Bh("^", 4), bitwiseAND: Bh("&", 5), equality: Bh("==/!=/===/!==", 6), relational: Bh("</>/<=/>=", 7), bitShift: Bh("<</>>/>>>", 8), plusMin: new Ih("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }), modulo: Bh("%", 10), star: Bh("*", 10), slash: Bh("/", 10), starstar: new Ih("**", { beforeExpr: true }), _break: jh("break"), _case: jh("case", Oh), _catch: jh("catch"), _continue: jh("continue"), _debugger: jh("debugger"), _default: jh("default", Oh), _do: jh("do", { isLoop: true, beforeExpr: true }), _else: jh("else", Oh), _finally: jh("finally"), _for: jh("for", { isLoop: true }), _function: jh("function", Lh), _if: jh("if"), _return: jh("return", Oh), _switch: jh("switch"), _throw: jh("throw", Oh), _try: jh("try"), _var: jh("var"), _const: jh("const"), _while: jh("while", { isLoop: true }), _with: jh("with"), _new: jh("new", { beforeExpr: true, startsExpr: true }), _this: jh("this", Lh), _super: jh("super", Lh), _class: jh("class", Lh), _extends: jh("extends", Oh), _export: jh("export"), _import: jh("import", Lh), _null: jh("null", Lh), _true: jh("true", Lh), _false: jh("false", Lh), _in: jh("in", { beforeExpr: true, binop: 7 }), _instanceof: jh("instanceof", { beforeExpr: true, binop: 7 }), _typeof: jh("typeof", { beforeExpr: true, prefix: true, startsExpr: true }), _void: jh("void", { beforeExpr: true, prefix: true, startsExpr: true }), _delete: jh("delete", { beforeExpr: true, prefix: true, startsExpr: true }) };
var Mh = /\r\n?|\n|\u2028|\u2029/;
var Vh = new RegExp(Mh.source, "g");
function Uh(e25, t3) {
  return 10 === e25 || 13 === e25 || !t3 && (8232 === e25 || 8233 === e25);
}
var qh = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
var Wh = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
var $h = Object.prototype;
var Gh = $h.hasOwnProperty;
var zh = $h.toString;
function Hh(e25, t3) {
  return Gh.call(e25, t3);
}
var Kh = Array.isArray || function(e25) {
  return "[object Array]" === zh.call(e25);
};
function Jh(e25) {
  return new RegExp("^(?:" + e25.replace(/ /g, "|") + ")$");
}
var Qh = function(e25, t3) {
  this.line = e25, this.column = t3;
};
Qh.prototype.offset = function(e25) {
  return new Qh(this.line, this.column + e25);
};
var Xh = function(e25, t3, r2) {
  this.start = t3, this.end = r2, null !== e25.sourceFile && (this.source = e25.sourceFile);
};
function Yh(e25, t3) {
  for (var r2 = 1, n2 = 0; ; ) {
    Vh.lastIndex = n2;
    var i2 = Vh.exec(e25);
    if (!(i2 && i2.index < t3)) return new Qh(r2, t3 - n2);
    ++r2, n2 = i2.index + i2[0].length;
  }
}
var Zh = { ecmaVersion: 9, sourceType: "script", onInsertedSemicolon: null, onTrailingComma: null, allowReserved: null, allowReturnOutsideFunction: false, allowImportExportEverywhere: false, allowAwaitOutsideFunction: false, allowHashBang: false, locations: false, onToken: null, onComment: null, ranges: false, program: null, sourceFile: null, directSourceFile: null, preserveParens: false };
function ed(e25) {
  var t3 = {};
  for (var r2 in Zh) t3[r2] = e25 && Hh(e25, r2) ? e25[r2] : Zh[r2];
  if (t3.ecmaVersion >= 2015 && (t3.ecmaVersion -= 2009), null == t3.allowReserved && (t3.allowReserved = t3.ecmaVersion < 5), Kh(t3.onToken)) {
    var n2 = t3.onToken;
    t3.onToken = function(e26) {
      return n2.push(e26);
    };
  }
  return Kh(t3.onComment) && (t3.onComment = /* @__PURE__ */ function(e26, t4) {
    return function(r3, n3, i2, a2, o2, s2) {
      var u2 = { type: r3 ? "Block" : "Line", value: n3, start: i2, end: a2 };
      e26.locations && (u2.loc = new Xh(this, o2, s2)), e26.ranges && (u2.range = [i2, a2]), t4.push(u2);
    };
  }(t3, t3.onComment)), t3;
}
var td = 2;
var rd = 1 | td;
var nd = 4;
var id2 = 8;
function ad(e25, t3) {
  return td | (e25 ? nd : 0) | (t3 ? id2 : 0);
}
var od = function(e25, t3, r2) {
  this.options = e25 = ed(e25), this.sourceFile = e25.sourceFile, this.keywords = Jh(Eh[e25.ecmaVersion >= 6 ? 6 : "module" === e25.sourceType ? "5module" : 5]);
  var n2 = "";
  if (true !== e25.allowReserved) {
    for (var i2 = e25.ecmaVersion; !(n2 = xh[i2]); i2--) ;
    "module" === e25.sourceType && (n2 += " await");
  }
  this.reservedWords = Jh(n2);
  var a2 = (n2 ? n2 + " " : "") + xh.strict;
  this.reservedWordsStrict = Jh(a2), this.reservedWordsStrictBind = Jh(a2 + " " + xh.strictBind), this.input = String(t3), this.containsEsc = false, r2 ? (this.pos = r2, this.lineStart = this.input.lastIndexOf("\n", r2 - 1) + 1, this.curLine = this.input.slice(0, this.lineStart).split(Mh).length) : (this.pos = this.lineStart = 0, this.curLine = 1), this.type = Rh.eof, this.value = null, this.start = this.end = this.pos, this.startLoc = this.endLoc = this.curPosition(), this.lastTokEndLoc = this.lastTokStartLoc = null, this.lastTokStart = this.lastTokEnd = this.pos, this.context = this.initialContext(), this.exprAllowed = true, this.inModule = "module" === e25.sourceType, this.strict = this.inModule || this.strictDirective(this.pos), this.potentialArrowAt = -1, this.yieldPos = this.awaitPos = this.awaitIdentPos = 0, this.labels = [], this.undefinedExports = {}, 0 === this.pos && e25.allowHashBang && "#!" === this.input.slice(0, 2) && this.skipLineComment(2), this.scopeStack = [], this.enterScope(1), this.regexpState = null;
};
var sd = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true } };
od.prototype.parse = function() {
  var e25 = this.options.program || this.startNode();
  return this.nextToken(), this.parseTopLevel(e25);
}, sd.inFunction.get = function() {
  return (this.currentVarScope().flags & td) > 0;
}, sd.inGenerator.get = function() {
  return (this.currentVarScope().flags & id2) > 0;
}, sd.inAsync.get = function() {
  return (this.currentVarScope().flags & nd) > 0;
}, sd.allowSuper.get = function() {
  return (64 & this.currentThisScope().flags) > 0;
}, sd.allowDirectSuper.get = function() {
  return (128 & this.currentThisScope().flags) > 0;
}, sd.treatFunctionsAsVar.get = function() {
  return this.treatFunctionsAsVarInScope(this.currentScope());
}, od.prototype.inNonArrowFunction = function() {
  return (this.currentThisScope().flags & td) > 0;
}, od.extend = function() {
  for (var e25 = [], t3 = arguments.length; t3--; ) e25[t3] = arguments[t3];
  for (var r2 = this, n2 = 0; n2 < e25.length; n2++) r2 = e25[n2](r2);
  return r2;
}, od.parse = function(e25, t3) {
  return new this(t3, e25).parse();
}, od.parseExpressionAt = function(e25, t3, r2) {
  var n2 = new this(r2, e25, t3);
  return n2.nextToken(), n2.parseExpression();
}, od.tokenizer = function(e25, t3) {
  return new this(t3, e25);
}, Object.defineProperties(od.prototype, sd);
var ud = od.prototype;
var cd = /^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)")/;
function ld() {
  this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
}
ud.strictDirective = function(e25) {
  for (; ; ) {
    Wh.lastIndex = e25, e25 += Wh.exec(this.input)[0].length;
    var t3 = cd.exec(this.input.slice(e25));
    if (!t3) return false;
    if ("use strict" === (t3[1] || t3[2])) return true;
    e25 += t3[0].length, Wh.lastIndex = e25, e25 += Wh.exec(this.input)[0].length, ";" === this.input[e25] && e25++;
  }
}, ud.eat = function(e25) {
  return this.type === e25 && (this.next(), true);
}, ud.isContextual = function(e25) {
  return this.type === Rh.name && this.value === e25 && !this.containsEsc;
}, ud.eatContextual = function(e25) {
  return !!this.isContextual(e25) && (this.next(), true);
}, ud.expectContextual = function(e25) {
  this.eatContextual(e25) || this.unexpected();
}, ud.canInsertSemicolon = function() {
  return this.type === Rh.eof || this.type === Rh.braceR || Mh.test(this.input.slice(this.lastTokEnd, this.start));
}, ud.insertSemicolon = function() {
  if (this.canInsertSemicolon()) return this.options.onInsertedSemicolon && this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc), true;
}, ud.semicolon = function() {
  this.eat(Rh.semi) || this.insertSemicolon() || this.unexpected();
}, ud.afterTrailingComma = function(e25, t3) {
  if (this.type === e25) return this.options.onTrailingComma && this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc), t3 || this.next(), true;
}, ud.expect = function(e25) {
  this.eat(e25) || this.unexpected();
}, ud.unexpected = function(e25) {
  this.raise(null != e25 ? e25 : this.start, "Unexpected token");
}, ud.checkPatternErrors = function(e25, t3) {
  if (e25) {
    e25.trailingComma > -1 && this.raiseRecoverable(e25.trailingComma, "Comma is not permitted after the rest element");
    var r2 = t3 ? e25.parenthesizedAssign : e25.parenthesizedBind;
    r2 > -1 && this.raiseRecoverable(r2, "Parenthesized pattern");
  }
}, ud.checkExpressionErrors = function(e25, t3) {
  if (!e25) return false;
  var r2 = e25.shorthandAssign, n2 = e25.doubleProto;
  if (!t3) return r2 >= 0 || n2 >= 0;
  r2 >= 0 && this.raise(r2, "Shorthand property assignments are valid only in destructuring patterns"), n2 >= 0 && this.raiseRecoverable(n2, "Redefinition of __proto__ property");
}, ud.checkYieldAwaitInDefaultParams = function() {
  this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos) && this.raise(this.yieldPos, "Yield expression cannot be a default value"), this.awaitPos && this.raise(this.awaitPos, "Await expression cannot be a default value");
}, ud.isSimpleAssignTarget = function(e25) {
  return "ParenthesizedExpression" === e25.type ? this.isSimpleAssignTarget(e25.expression) : "Identifier" === e25.type || "MemberExpression" === e25.type;
};
var pd = od.prototype;
pd.parseTopLevel = function(e25) {
  var t3 = {};
  for (e25.body || (e25.body = []); this.type !== Rh.eof; ) {
    var r2 = this.parseStatement(null, true, t3);
    e25.body.push(r2);
  }
  if (this.inModule) for (var n2 = 0, i2 = Object.keys(this.undefinedExports); n2 < i2.length; n2 += 1) {
    var a2 = i2[n2];
    this.raiseRecoverable(this.undefinedExports[a2].start, "Export '" + a2 + "' is not defined");
  }
  return this.adaptDirectivePrologue(e25.body), this.next(), e25.sourceType = this.options.sourceType, this.finishNode(e25, "Program");
};
var fd = { kind: "loop" };
var hd = { kind: "switch" };
pd.isLet = function(e25) {
  if (this.options.ecmaVersion < 6 || !this.isContextual("let")) return false;
  Wh.lastIndex = this.pos;
  var t3 = Wh.exec(this.input), r2 = this.pos + t3[0].length, n2 = this.input.charCodeAt(r2);
  if (91 === n2) return true;
  if (e25) return false;
  if (123 === n2) return true;
  if (Th(n2, true)) {
    for (var i2 = r2 + 1; Ph(this.input.charCodeAt(i2), true); ) ++i2;
    var a2 = this.input.slice(r2, i2);
    if (!Ch.test(a2)) return true;
  }
  return false;
}, pd.isAsyncFunction = function() {
  if (this.options.ecmaVersion < 8 || !this.isContextual("async")) return false;
  Wh.lastIndex = this.pos;
  var e25 = Wh.exec(this.input), t3 = this.pos + e25[0].length;
  return !(Mh.test(this.input.slice(this.pos, t3)) || "function" !== this.input.slice(t3, t3 + 8) || t3 + 8 !== this.input.length && Ph(this.input.charAt(t3 + 8)));
}, pd.parseStatement = function(e25, t3, r2) {
  var n2, i2 = this.type, a2 = this.startNode();
  switch (this.isLet(e25) && (i2 = Rh._var, n2 = "let"), i2) {
    case Rh._break:
    case Rh._continue:
      return this.parseBreakContinueStatement(a2, i2.keyword);
    case Rh._debugger:
      return this.parseDebuggerStatement(a2);
    case Rh._do:
      return this.parseDoStatement(a2);
    case Rh._for:
      return this.parseForStatement(a2);
    case Rh._function:
      return e25 && (this.strict || "if" !== e25 && "label" !== e25) && this.options.ecmaVersion >= 6 && this.unexpected(), this.parseFunctionStatement(a2, false, !e25);
    case Rh._class:
      return e25 && this.unexpected(), this.parseClass(a2, true);
    case Rh._if:
      return this.parseIfStatement(a2);
    case Rh._return:
      return this.parseReturnStatement(a2);
    case Rh._switch:
      return this.parseSwitchStatement(a2);
    case Rh._throw:
      return this.parseThrowStatement(a2);
    case Rh._try:
      return this.parseTryStatement(a2);
    case Rh._const:
    case Rh._var:
      return n2 = n2 || this.value, e25 && "var" !== n2 && this.unexpected(), this.parseVarStatement(a2, n2);
    case Rh._while:
      return this.parseWhileStatement(a2);
    case Rh._with:
      return this.parseWithStatement(a2);
    case Rh.braceL:
      return this.parseBlock(true, a2);
    case Rh.semi:
      return this.parseEmptyStatement(a2);
    case Rh._export:
    case Rh._import:
      if (this.options.ecmaVersion > 10 && i2 === Rh._import) {
        Wh.lastIndex = this.pos;
        var o2 = Wh.exec(this.input), s2 = this.pos + o2[0].length;
        if (40 === this.input.charCodeAt(s2)) return this.parseExpressionStatement(a2, this.parseExpression());
      }
      return this.options.allowImportExportEverywhere || (t3 || this.raise(this.start, "'import' and 'export' may only appear at the top level"), this.inModule || this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")), i2 === Rh._import ? this.parseImport(a2) : this.parseExport(a2, r2);
    default:
      if (this.isAsyncFunction()) return e25 && this.unexpected(), this.next(), this.parseFunctionStatement(a2, true, !e25);
      var u2 = this.value, c2 = this.parseExpression();
      return i2 === Rh.name && "Identifier" === c2.type && this.eat(Rh.colon) ? this.parseLabeledStatement(a2, u2, c2, e25) : this.parseExpressionStatement(a2, c2);
  }
}, pd.parseBreakContinueStatement = function(e25, t3) {
  var r2 = "break" === t3;
  this.next(), this.eat(Rh.semi) || this.insertSemicolon() ? e25.label = null : this.type !== Rh.name ? this.unexpected() : (e25.label = this.parseIdent(), this.semicolon());
  for (var n2 = 0; n2 < this.labels.length; ++n2) {
    var i2 = this.labels[n2];
    if (null == e25.label || i2.name === e25.label.name) {
      if (null != i2.kind && (r2 || "loop" === i2.kind)) break;
      if (e25.label && r2) break;
    }
  }
  return n2 === this.labels.length && this.raise(e25.start, "Unsyntactic " + t3), this.finishNode(e25, r2 ? "BreakStatement" : "ContinueStatement");
}, pd.parseDebuggerStatement = function(e25) {
  return this.next(), this.semicolon(), this.finishNode(e25, "DebuggerStatement");
}, pd.parseDoStatement = function(e25) {
  return this.next(), this.labels.push(fd), e25.body = this.parseStatement("do"), this.labels.pop(), this.expect(Rh._while), e25.test = this.parseParenExpression(), this.options.ecmaVersion >= 6 ? this.eat(Rh.semi) : this.semicolon(), this.finishNode(e25, "DoWhileStatement");
}, pd.parseForStatement = function(e25) {
  this.next();
  var t3 = this.options.ecmaVersion >= 9 && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual("await") ? this.lastTokStart : -1;
  if (this.labels.push(fd), this.enterScope(0), this.expect(Rh.parenL), this.type === Rh.semi) return t3 > -1 && this.unexpected(t3), this.parseFor(e25, null);
  var r2 = this.isLet();
  if (this.type === Rh._var || this.type === Rh._const || r2) {
    var n2 = this.startNode(), i2 = r2 ? "let" : this.value;
    return this.next(), this.parseVar(n2, true, i2), this.finishNode(n2, "VariableDeclaration"), (this.type === Rh._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && 1 === n2.declarations.length ? (this.options.ecmaVersion >= 9 && (this.type === Rh._in ? t3 > -1 && this.unexpected(t3) : e25.await = t3 > -1), this.parseForIn(e25, n2)) : (t3 > -1 && this.unexpected(t3), this.parseFor(e25, n2));
  }
  var a2 = new ld(), o2 = this.parseExpression(true, a2);
  return this.type === Rh._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? (this.options.ecmaVersion >= 9 && (this.type === Rh._in ? t3 > -1 && this.unexpected(t3) : e25.await = t3 > -1), this.toAssignable(o2, false, a2), this.checkLVal(o2), this.parseForIn(e25, o2)) : (this.checkExpressionErrors(a2, true), t3 > -1 && this.unexpected(t3), this.parseFor(e25, o2));
}, pd.parseFunctionStatement = function(e25, t3, r2) {
  return this.next(), this.parseFunction(e25, md | (r2 ? 0 : gd), false, t3);
}, pd.parseIfStatement = function(e25) {
  return this.next(), e25.test = this.parseParenExpression(), e25.consequent = this.parseStatement("if"), e25.alternate = this.eat(Rh._else) ? this.parseStatement("if") : null, this.finishNode(e25, "IfStatement");
}, pd.parseReturnStatement = function(e25) {
  return this.inFunction || this.options.allowReturnOutsideFunction || this.raise(this.start, "'return' outside of function"), this.next(), this.eat(Rh.semi) || this.insertSemicolon() ? e25.argument = null : (e25.argument = this.parseExpression(), this.semicolon()), this.finishNode(e25, "ReturnStatement");
}, pd.parseSwitchStatement = function(e25) {
  var t3;
  this.next(), e25.discriminant = this.parseParenExpression(), e25.cases = [], this.expect(Rh.braceL), this.labels.push(hd), this.enterScope(0);
  for (var r2 = false; this.type !== Rh.braceR; ) if (this.type === Rh._case || this.type === Rh._default) {
    var n2 = this.type === Rh._case;
    t3 && this.finishNode(t3, "SwitchCase"), e25.cases.push(t3 = this.startNode()), t3.consequent = [], this.next(), n2 ? t3.test = this.parseExpression() : (r2 && this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"), r2 = true, t3.test = null), this.expect(Rh.colon);
  } else t3 || this.unexpected(), t3.consequent.push(this.parseStatement(null));
  return this.exitScope(), t3 && this.finishNode(t3, "SwitchCase"), this.next(), this.labels.pop(), this.finishNode(e25, "SwitchStatement");
}, pd.parseThrowStatement = function(e25) {
  return this.next(), Mh.test(this.input.slice(this.lastTokEnd, this.start)) && this.raise(this.lastTokEnd, "Illegal newline after throw"), e25.argument = this.parseExpression(), this.semicolon(), this.finishNode(e25, "ThrowStatement");
};
var dd = [];
pd.parseTryStatement = function(e25) {
  if (this.next(), e25.block = this.parseBlock(), e25.handler = null, this.type === Rh._catch) {
    var t3 = this.startNode();
    if (this.next(), this.eat(Rh.parenL)) {
      t3.param = this.parseBindingAtom();
      var r2 = "Identifier" === t3.param.type;
      this.enterScope(r2 ? 32 : 0), this.checkLVal(t3.param, r2 ? 4 : 2), this.expect(Rh.parenR);
    } else this.options.ecmaVersion < 10 && this.unexpected(), t3.param = null, this.enterScope(0);
    t3.body = this.parseBlock(false), this.exitScope(), e25.handler = this.finishNode(t3, "CatchClause");
  }
  return e25.finalizer = this.eat(Rh._finally) ? this.parseBlock() : null, e25.handler || e25.finalizer || this.raise(e25.start, "Missing catch or finally clause"), this.finishNode(e25, "TryStatement");
}, pd.parseVarStatement = function(e25, t3) {
  return this.next(), this.parseVar(e25, false, t3), this.semicolon(), this.finishNode(e25, "VariableDeclaration");
}, pd.parseWhileStatement = function(e25) {
  return this.next(), e25.test = this.parseParenExpression(), this.labels.push(fd), e25.body = this.parseStatement("while"), this.labels.pop(), this.finishNode(e25, "WhileStatement");
}, pd.parseWithStatement = function(e25) {
  return this.strict && this.raise(this.start, "'with' in strict mode"), this.next(), e25.object = this.parseParenExpression(), e25.body = this.parseStatement("with"), this.finishNode(e25, "WithStatement");
}, pd.parseEmptyStatement = function(e25) {
  return this.next(), this.finishNode(e25, "EmptyStatement");
}, pd.parseLabeledStatement = function(e25, t3, r2, n2) {
  for (var i2 = 0, a2 = this.labels; i2 < a2.length; i2 += 1) {
    a2[i2].name === t3 && this.raise(r2.start, "Label '" + t3 + "' is already declared");
  }
  for (var o2 = this.type.isLoop ? "loop" : this.type === Rh._switch ? "switch" : null, s2 = this.labels.length - 1; s2 >= 0; s2--) {
    var u2 = this.labels[s2];
    if (u2.statementStart !== e25.start) break;
    u2.statementStart = this.start, u2.kind = o2;
  }
  return this.labels.push({ name: t3, kind: o2, statementStart: this.start }), e25.body = this.parseStatement(n2 ? -1 === n2.indexOf("label") ? n2 + "label" : n2 : "label"), this.labels.pop(), e25.label = r2, this.finishNode(e25, "LabeledStatement");
}, pd.parseExpressionStatement = function(e25, t3) {
  return e25.expression = t3, this.semicolon(), this.finishNode(e25, "ExpressionStatement");
}, pd.parseBlock = function(e25, t3) {
  for (void 0 === e25 && (e25 = true), void 0 === t3 && (t3 = this.startNode()), t3.body = [], this.expect(Rh.braceL), e25 && this.enterScope(0); !this.eat(Rh.braceR); ) {
    var r2 = this.parseStatement(null);
    t3.body.push(r2);
  }
  return e25 && this.exitScope(), this.finishNode(t3, "BlockStatement");
}, pd.parseFor = function(e25, t3) {
  return e25.init = t3, this.expect(Rh.semi), e25.test = this.type === Rh.semi ? null : this.parseExpression(), this.expect(Rh.semi), e25.update = this.type === Rh.parenR ? null : this.parseExpression(), this.expect(Rh.parenR), e25.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(e25, "ForStatement");
}, pd.parseForIn = function(e25, t3) {
  var r2 = this.type === Rh._in;
  return this.next(), "VariableDeclaration" === t3.type && null != t3.declarations[0].init && (!r2 || this.options.ecmaVersion < 8 || this.strict || "var" !== t3.kind || "Identifier" !== t3.declarations[0].id.type) ? this.raise(t3.start, (r2 ? "for-in" : "for-of") + " loop variable declaration may not have an initializer") : "AssignmentPattern" === t3.type && this.raise(t3.start, "Invalid left-hand side in for-loop"), e25.left = t3, e25.right = r2 ? this.parseExpression() : this.parseMaybeAssign(), this.expect(Rh.parenR), e25.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(e25, r2 ? "ForInStatement" : "ForOfStatement");
}, pd.parseVar = function(e25, t3, r2) {
  for (e25.declarations = [], e25.kind = r2; ; ) {
    var n2 = this.startNode();
    if (this.parseVarId(n2, r2), this.eat(Rh.eq) ? n2.init = this.parseMaybeAssign(t3) : "const" !== r2 || this.type === Rh._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? "Identifier" === n2.id.type || t3 && (this.type === Rh._in || this.isContextual("of")) ? n2.init = null : this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value") : this.unexpected(), e25.declarations.push(this.finishNode(n2, "VariableDeclarator")), !this.eat(Rh.comma)) break;
  }
  return e25;
}, pd.parseVarId = function(e25, t3) {
  e25.id = this.parseBindingAtom(), this.checkLVal(e25.id, "var" === t3 ? 1 : 2, false);
};
var md = 1;
var gd = 2;
pd.parseFunction = function(e25, t3, r2, n2) {
  this.initFunction(e25), (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !n2) && (this.type === Rh.star && t3 & gd && this.unexpected(), e25.generator = this.eat(Rh.star)), this.options.ecmaVersion >= 8 && (e25.async = !!n2), t3 & md && (e25.id = 4 & t3 && this.type !== Rh.name ? null : this.parseIdent(), !e25.id || t3 & gd || this.checkLVal(e25.id, this.strict || e25.generator || e25.async ? this.treatFunctionsAsVar ? 1 : 2 : 3));
  var i2 = this.yieldPos, a2 = this.awaitPos, o2 = this.awaitIdentPos;
  return this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(ad(e25.async, e25.generator)), t3 & md || (e25.id = this.type === Rh.name ? this.parseIdent() : null), this.parseFunctionParams(e25), this.parseFunctionBody(e25, r2, false), this.yieldPos = i2, this.awaitPos = a2, this.awaitIdentPos = o2, this.finishNode(e25, t3 & md ? "FunctionDeclaration" : "FunctionExpression");
}, pd.parseFunctionParams = function(e25) {
  this.expect(Rh.parenL), e25.params = this.parseBindingList(Rh.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams();
}, pd.parseClass = function(e25, t3) {
  this.next();
  var r2 = this.strict;
  this.strict = true, this.parseClassId(e25, t3), this.parseClassSuper(e25);
  var n2 = this.startNode(), i2 = false;
  for (n2.body = [], this.expect(Rh.braceL); !this.eat(Rh.braceR); ) {
    var a2 = this.parseClassElement(null !== e25.superClass);
    a2 && (n2.body.push(a2), "MethodDefinition" === a2.type && "constructor" === a2.kind && (i2 && this.raise(a2.start, "Duplicate constructor in the same class"), i2 = true));
  }
  return e25.body = this.finishNode(n2, "ClassBody"), this.strict = r2, this.finishNode(e25, t3 ? "ClassDeclaration" : "ClassExpression");
}, pd.parseClassElement = function(e25) {
  var t3 = this;
  if (this.eat(Rh.semi)) return null;
  var r2 = this.startNode(), n2 = function(e26, n3) {
    void 0 === n3 && (n3 = false);
    var i3 = t3.start, a3 = t3.startLoc;
    return !!t3.eatContextual(e26) && (!(t3.type === Rh.parenL || n3 && t3.canInsertSemicolon()) || (r2.key && t3.unexpected(), r2.computed = false, r2.key = t3.startNodeAt(i3, a3), r2.key.name = e26, t3.finishNode(r2.key, "Identifier"), false));
  };
  r2.kind = "method", r2.static = n2("static");
  var i2 = this.eat(Rh.star), a2 = false;
  i2 || (this.options.ecmaVersion >= 8 && n2("async", true) ? (a2 = true, i2 = this.options.ecmaVersion >= 9 && this.eat(Rh.star)) : n2("get") ? r2.kind = "get" : n2("set") && (r2.kind = "set")), r2.key || this.parsePropertyName(r2);
  var o2 = r2.key, s2 = false;
  return r2.computed || r2.static || !("Identifier" === o2.type && "constructor" === o2.name || "Literal" === o2.type && "constructor" === o2.value) ? r2.static && "Identifier" === o2.type && "prototype" === o2.name && this.raise(o2.start, "Classes may not have a static property named prototype") : ("method" !== r2.kind && this.raise(o2.start, "Constructor can't have get/set modifier"), i2 && this.raise(o2.start, "Constructor can't be a generator"), a2 && this.raise(o2.start, "Constructor can't be an async method"), r2.kind = "constructor", s2 = e25), this.parseClassMethod(r2, i2, a2, s2), "get" === r2.kind && 0 !== r2.value.params.length && this.raiseRecoverable(r2.value.start, "getter should have no params"), "set" === r2.kind && 1 !== r2.value.params.length && this.raiseRecoverable(r2.value.start, "setter should have exactly one param"), "set" === r2.kind && "RestElement" === r2.value.params[0].type && this.raiseRecoverable(r2.value.params[0].start, "Setter cannot use rest params"), r2;
}, pd.parseClassMethod = function(e25, t3, r2, n2) {
  return e25.value = this.parseMethod(t3, r2, n2), this.finishNode(e25, "MethodDefinition");
}, pd.parseClassId = function(e25, t3) {
  this.type === Rh.name ? (e25.id = this.parseIdent(), t3 && this.checkLVal(e25.id, 2, false)) : (true === t3 && this.unexpected(), e25.id = null);
}, pd.parseClassSuper = function(e25) {
  e25.superClass = this.eat(Rh._extends) ? this.parseExprSubscripts() : null;
}, pd.parseExport = function(e25, t3) {
  if (this.next(), this.eat(Rh.star)) return this.expectContextual("from"), this.type !== Rh.string && this.unexpected(), e25.source = this.parseExprAtom(), this.semicolon(), this.finishNode(e25, "ExportAllDeclaration");
  if (this.eat(Rh._default)) {
    var r2;
    if (this.checkExport(t3, "default", this.lastTokStart), this.type === Rh._function || (r2 = this.isAsyncFunction())) {
      var n2 = this.startNode();
      this.next(), r2 && this.next(), e25.declaration = this.parseFunction(n2, 4 | md, false, r2);
    } else if (this.type === Rh._class) {
      var i2 = this.startNode();
      e25.declaration = this.parseClass(i2, "nullableID");
    } else e25.declaration = this.parseMaybeAssign(), this.semicolon();
    return this.finishNode(e25, "ExportDefaultDeclaration");
  }
  if (this.shouldParseExportStatement()) e25.declaration = this.parseStatement(null), "VariableDeclaration" === e25.declaration.type ? this.checkVariableExport(t3, e25.declaration.declarations) : this.checkExport(t3, e25.declaration.id.name, e25.declaration.id.start), e25.specifiers = [], e25.source = null;
  else {
    if (e25.declaration = null, e25.specifiers = this.parseExportSpecifiers(t3), this.eatContextual("from")) this.type !== Rh.string && this.unexpected(), e25.source = this.parseExprAtom();
    else {
      for (var a2 = 0, o2 = e25.specifiers; a2 < o2.length; a2 += 1) {
        var s2 = o2[a2];
        this.checkUnreserved(s2.local), this.checkLocalExport(s2.local);
      }
      e25.source = null;
    }
    this.semicolon();
  }
  return this.finishNode(e25, "ExportNamedDeclaration");
}, pd.checkExport = function(e25, t3, r2) {
  e25 && (Hh(e25, t3) && this.raiseRecoverable(r2, "Duplicate export '" + t3 + "'"), e25[t3] = true);
}, pd.checkPatternExport = function(e25, t3) {
  var r2 = t3.type;
  if ("Identifier" === r2) this.checkExport(e25, t3.name, t3.start);
  else if ("ObjectPattern" === r2) for (var n2 = 0, i2 = t3.properties; n2 < i2.length; n2 += 1) {
    var a2 = i2[n2];
    this.checkPatternExport(e25, a2);
  }
  else if ("ArrayPattern" === r2) for (var o2 = 0, s2 = t3.elements; o2 < s2.length; o2 += 1) {
    var u2 = s2[o2];
    u2 && this.checkPatternExport(e25, u2);
  }
  else "Property" === r2 ? this.checkPatternExport(e25, t3.value) : "AssignmentPattern" === r2 ? this.checkPatternExport(e25, t3.left) : "RestElement" === r2 ? this.checkPatternExport(e25, t3.argument) : "ParenthesizedExpression" === r2 && this.checkPatternExport(e25, t3.expression);
}, pd.checkVariableExport = function(e25, t3) {
  if (e25) for (var r2 = 0, n2 = t3; r2 < n2.length; r2 += 1) {
    var i2 = n2[r2];
    this.checkPatternExport(e25, i2.id);
  }
}, pd.shouldParseExportStatement = function() {
  return "var" === this.type.keyword || "const" === this.type.keyword || "class" === this.type.keyword || "function" === this.type.keyword || this.isLet() || this.isAsyncFunction();
}, pd.parseExportSpecifiers = function(e25) {
  var t3 = [], r2 = true;
  for (this.expect(Rh.braceL); !this.eat(Rh.braceR); ) {
    if (r2) r2 = false;
    else if (this.expect(Rh.comma), this.afterTrailingComma(Rh.braceR)) break;
    var n2 = this.startNode();
    n2.local = this.parseIdent(true), n2.exported = this.eatContextual("as") ? this.parseIdent(true) : n2.local, this.checkExport(e25, n2.exported.name, n2.exported.start), t3.push(this.finishNode(n2, "ExportSpecifier"));
  }
  return t3;
}, pd.parseImport = function(e25) {
  return this.next(), this.type === Rh.string ? (e25.specifiers = dd, e25.source = this.parseExprAtom()) : (e25.specifiers = this.parseImportSpecifiers(), this.expectContextual("from"), e25.source = this.type === Rh.string ? this.parseExprAtom() : this.unexpected()), this.semicolon(), this.finishNode(e25, "ImportDeclaration");
}, pd.parseImportSpecifiers = function() {
  var e25 = [], t3 = true;
  if (this.type === Rh.name) {
    var r2 = this.startNode();
    if (r2.local = this.parseIdent(), this.checkLVal(r2.local, 2), e25.push(this.finishNode(r2, "ImportDefaultSpecifier")), !this.eat(Rh.comma)) return e25;
  }
  if (this.type === Rh.star) {
    var n2 = this.startNode();
    return this.next(), this.expectContextual("as"), n2.local = this.parseIdent(), this.checkLVal(n2.local, 2), e25.push(this.finishNode(n2, "ImportNamespaceSpecifier")), e25;
  }
  for (this.expect(Rh.braceL); !this.eat(Rh.braceR); ) {
    if (t3) t3 = false;
    else if (this.expect(Rh.comma), this.afterTrailingComma(Rh.braceR)) break;
    var i2 = this.startNode();
    i2.imported = this.parseIdent(true), this.eatContextual("as") ? i2.local = this.parseIdent() : (this.checkUnreserved(i2.imported), i2.local = i2.imported), this.checkLVal(i2.local, 2), e25.push(this.finishNode(i2, "ImportSpecifier"));
  }
  return e25;
}, pd.adaptDirectivePrologue = function(e25) {
  for (var t3 = 0; t3 < e25.length && this.isDirectiveCandidate(e25[t3]); ++t3) e25[t3].directive = e25[t3].expression.raw.slice(1, -1);
}, pd.isDirectiveCandidate = function(e25) {
  return "ExpressionStatement" === e25.type && "Literal" === e25.expression.type && "string" == typeof e25.expression.value && ('"' === this.input[e25.start] || "'" === this.input[e25.start]);
};
var yd = od.prototype;
yd.toAssignable = function(e25, t3, r2) {
  if (this.options.ecmaVersion >= 6 && e25) switch (e25.type) {
    case "Identifier":
      this.inAsync && "await" === e25.name && this.raise(e25.start, "Cannot use 'await' as identifier inside an async function");
      break;
    case "ObjectPattern":
    case "ArrayPattern":
    case "RestElement":
      break;
    case "ObjectExpression":
      e25.type = "ObjectPattern", r2 && this.checkPatternErrors(r2, true);
      for (var n2 = 0, i2 = e25.properties; n2 < i2.length; n2 += 1) {
        var a2 = i2[n2];
        this.toAssignable(a2, t3), "RestElement" !== a2.type || "ArrayPattern" !== a2.argument.type && "ObjectPattern" !== a2.argument.type || this.raise(a2.argument.start, "Unexpected token");
      }
      break;
    case "Property":
      "init" !== e25.kind && this.raise(e25.key.start, "Object pattern can't contain getter or setter"), this.toAssignable(e25.value, t3);
      break;
    case "ArrayExpression":
      e25.type = "ArrayPattern", r2 && this.checkPatternErrors(r2, true), this.toAssignableList(e25.elements, t3);
      break;
    case "SpreadElement":
      e25.type = "RestElement", this.toAssignable(e25.argument, t3), "AssignmentPattern" === e25.argument.type && this.raise(e25.argument.start, "Rest elements cannot have a default value");
      break;
    case "AssignmentExpression":
      "=" !== e25.operator && this.raise(e25.left.end, "Only '=' operator can be used for specifying default value."), e25.type = "AssignmentPattern", delete e25.operator, this.toAssignable(e25.left, t3);
    case "AssignmentPattern":
      break;
    case "ParenthesizedExpression":
      this.toAssignable(e25.expression, t3, r2);
      break;
    case "MemberExpression":
      if (!t3) break;
    default:
      this.raise(e25.start, "Assigning to rvalue");
  }
  else r2 && this.checkPatternErrors(r2, true);
  return e25;
}, yd.toAssignableList = function(e25, t3) {
  for (var r2 = e25.length, n2 = 0; n2 < r2; n2++) {
    var i2 = e25[n2];
    i2 && this.toAssignable(i2, t3);
  }
  if (r2) {
    var a2 = e25[r2 - 1];
    6 === this.options.ecmaVersion && t3 && a2 && "RestElement" === a2.type && "Identifier" !== a2.argument.type && this.unexpected(a2.argument.start);
  }
  return e25;
}, yd.parseSpread = function(e25) {
  var t3 = this.startNode();
  return this.next(), t3.argument = this.parseMaybeAssign(false, e25), this.finishNode(t3, "SpreadElement");
}, yd.parseRestBinding = function() {
  var e25 = this.startNode();
  return this.next(), 6 === this.options.ecmaVersion && this.type !== Rh.name && this.unexpected(), e25.argument = this.parseBindingAtom(), this.finishNode(e25, "RestElement");
}, yd.parseBindingAtom = function() {
  if (this.options.ecmaVersion >= 6) switch (this.type) {
    case Rh.bracketL:
      var e25 = this.startNode();
      return this.next(), e25.elements = this.parseBindingList(Rh.bracketR, true, true), this.finishNode(e25, "ArrayPattern");
    case Rh.braceL:
      return this.parseObj(true);
  }
  return this.parseIdent();
}, yd.parseBindingList = function(e25, t3, r2) {
  for (var n2 = [], i2 = true; !this.eat(e25); ) if (i2 ? i2 = false : this.expect(Rh.comma), t3 && this.type === Rh.comma) n2.push(null);
  else {
    if (r2 && this.afterTrailingComma(e25)) break;
    if (this.type === Rh.ellipsis) {
      var a2 = this.parseRestBinding();
      this.parseBindingListItem(a2), n2.push(a2), this.type === Rh.comma && this.raise(this.start, "Comma is not permitted after the rest element"), this.expect(e25);
      break;
    }
    var o2 = this.parseMaybeDefault(this.start, this.startLoc);
    this.parseBindingListItem(o2), n2.push(o2);
  }
  return n2;
}, yd.parseBindingListItem = function(e25) {
  return e25;
}, yd.parseMaybeDefault = function(e25, t3, r2) {
  if (r2 = r2 || this.parseBindingAtom(), this.options.ecmaVersion < 6 || !this.eat(Rh.eq)) return r2;
  var n2 = this.startNodeAt(e25, t3);
  return n2.left = r2, n2.right = this.parseMaybeAssign(), this.finishNode(n2, "AssignmentPattern");
}, yd.checkLVal = function(e25, t3, r2) {
  switch (void 0 === t3 && (t3 = 0), e25.type) {
    case "Identifier":
      2 === t3 && "let" === e25.name && this.raiseRecoverable(e25.start, "let is disallowed as a lexically bound name"), this.strict && this.reservedWordsStrictBind.test(e25.name) && this.raiseRecoverable(e25.start, (t3 ? "Binding " : "Assigning to ") + e25.name + " in strict mode"), r2 && (Hh(r2, e25.name) && this.raiseRecoverable(e25.start, "Argument name clash"), r2[e25.name] = true), 0 !== t3 && 5 !== t3 && this.declareName(e25.name, t3, e25.start);
      break;
    case "MemberExpression":
      t3 && this.raiseRecoverable(e25.start, "Binding member expression");
      break;
    case "ObjectPattern":
      for (var n2 = 0, i2 = e25.properties; n2 < i2.length; n2 += 1) {
        var a2 = i2[n2];
        this.checkLVal(a2, t3, r2);
      }
      break;
    case "Property":
      this.checkLVal(e25.value, t3, r2);
      break;
    case "ArrayPattern":
      for (var o2 = 0, s2 = e25.elements; o2 < s2.length; o2 += 1) {
        var u2 = s2[o2];
        u2 && this.checkLVal(u2, t3, r2);
      }
      break;
    case "AssignmentPattern":
      this.checkLVal(e25.left, t3, r2);
      break;
    case "RestElement":
      this.checkLVal(e25.argument, t3, r2);
      break;
    case "ParenthesizedExpression":
      this.checkLVal(e25.expression, t3, r2);
      break;
    default:
      this.raise(e25.start, (t3 ? "Binding" : "Assigning to") + " rvalue");
  }
};
var vd = od.prototype;
vd.checkPropClash = function(e25, t3, r2) {
  if (!(this.options.ecmaVersion >= 9 && "SpreadElement" === e25.type || this.options.ecmaVersion >= 6 && (e25.computed || e25.method || e25.shorthand))) {
    var n2, i2 = e25.key;
    switch (i2.type) {
      case "Identifier":
        n2 = i2.name;
        break;
      case "Literal":
        n2 = String(i2.value);
        break;
      default:
        return;
    }
    var a2 = e25.kind;
    if (this.options.ecmaVersion >= 6) "__proto__" === n2 && "init" === a2 && (t3.proto && (r2 && r2.doubleProto < 0 ? r2.doubleProto = i2.start : this.raiseRecoverable(i2.start, "Redefinition of __proto__ property")), t3.proto = true);
    else {
      var o2 = t3[n2 = "$" + n2];
      if (o2) ("init" === a2 ? this.strict && o2.init || o2.get || o2.set : o2.init || o2[a2]) && this.raiseRecoverable(i2.start, "Redefinition of property");
      else o2 = t3[n2] = { init: false, get: false, set: false };
      o2[a2] = true;
    }
  }
}, vd.parseExpression = function(e25, t3) {
  var r2 = this.start, n2 = this.startLoc, i2 = this.parseMaybeAssign(e25, t3);
  if (this.type === Rh.comma) {
    var a2 = this.startNodeAt(r2, n2);
    for (a2.expressions = [i2]; this.eat(Rh.comma); ) a2.expressions.push(this.parseMaybeAssign(e25, t3));
    return this.finishNode(a2, "SequenceExpression");
  }
  return i2;
}, vd.parseMaybeAssign = function(e25, t3, r2) {
  if (this.isContextual("yield")) {
    if (this.inGenerator) return this.parseYield(e25);
    this.exprAllowed = false;
  }
  var n2 = false, i2 = -1, a2 = -1, o2 = -1;
  t3 ? (i2 = t3.parenthesizedAssign, a2 = t3.trailingComma, o2 = t3.shorthandAssign, t3.parenthesizedAssign = t3.trailingComma = t3.shorthandAssign = -1) : (t3 = new ld(), n2 = true);
  var s2 = this.start, u2 = this.startLoc;
  this.type !== Rh.parenL && this.type !== Rh.name || (this.potentialArrowAt = this.start);
  var c2 = this.parseMaybeConditional(e25, t3);
  if (r2 && (c2 = r2.call(this, c2, s2, u2)), this.type.isAssign) {
    var l2 = this.startNodeAt(s2, u2);
    return l2.operator = this.value, l2.left = this.type === Rh.eq ? this.toAssignable(c2, false, t3) : c2, n2 || ld.call(t3), t3.shorthandAssign = -1, this.checkLVal(c2), this.next(), l2.right = this.parseMaybeAssign(e25), this.finishNode(l2, "AssignmentExpression");
  }
  return n2 && this.checkExpressionErrors(t3, true), i2 > -1 && (t3.parenthesizedAssign = i2), a2 > -1 && (t3.trailingComma = a2), o2 > -1 && (t3.shorthandAssign = o2), c2;
}, vd.parseMaybeConditional = function(e25, t3) {
  var r2 = this.start, n2 = this.startLoc, i2 = this.parseExprOps(e25, t3);
  if (this.checkExpressionErrors(t3)) return i2;
  if (this.eat(Rh.question)) {
    var a2 = this.startNodeAt(r2, n2);
    return a2.test = i2, a2.consequent = this.parseMaybeAssign(), this.expect(Rh.colon), a2.alternate = this.parseMaybeAssign(e25), this.finishNode(a2, "ConditionalExpression");
  }
  return i2;
}, vd.parseExprOps = function(e25, t3) {
  var r2 = this.start, n2 = this.startLoc, i2 = this.parseMaybeUnary(t3, false);
  return this.checkExpressionErrors(t3) ? i2 : i2.start === r2 && "ArrowFunctionExpression" === i2.type ? i2 : this.parseExprOp(i2, r2, n2, -1, e25);
}, vd.parseExprOp = function(e25, t3, r2, n2, i2) {
  var a2 = this.type.binop;
  if (null != a2 && (!i2 || this.type !== Rh._in) && a2 > n2) {
    var o2 = this.type === Rh.logicalOR || this.type === Rh.logicalAND, s2 = this.value;
    this.next();
    var u2 = this.start, c2 = this.startLoc, l2 = this.parseExprOp(this.parseMaybeUnary(null, false), u2, c2, a2, i2), p2 = this.buildBinary(t3, r2, e25, l2, s2, o2);
    return this.parseExprOp(p2, t3, r2, n2, i2);
  }
  return e25;
}, vd.buildBinary = function(e25, t3, r2, n2, i2, a2) {
  var o2 = this.startNodeAt(e25, t3);
  return o2.left = r2, o2.operator = i2, o2.right = n2, this.finishNode(o2, a2 ? "LogicalExpression" : "BinaryExpression");
}, vd.parseMaybeUnary = function(e25, t3) {
  var r2, n2 = this.start, i2 = this.startLoc;
  if (this.isContextual("await") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) r2 = this.parseAwait(), t3 = true;
  else if (this.type.prefix) {
    var a2 = this.startNode(), o2 = this.type === Rh.incDec;
    a2.operator = this.value, a2.prefix = true, this.next(), a2.argument = this.parseMaybeUnary(null, true), this.checkExpressionErrors(e25, true), o2 ? this.checkLVal(a2.argument) : this.strict && "delete" === a2.operator && "Identifier" === a2.argument.type ? this.raiseRecoverable(a2.start, "Deleting local variable in strict mode") : t3 = true, r2 = this.finishNode(a2, o2 ? "UpdateExpression" : "UnaryExpression");
  } else {
    if (r2 = this.parseExprSubscripts(e25), this.checkExpressionErrors(e25)) return r2;
    for (; this.type.postfix && !this.canInsertSemicolon(); ) {
      var s2 = this.startNodeAt(n2, i2);
      s2.operator = this.value, s2.prefix = false, s2.argument = r2, this.checkLVal(r2), this.next(), r2 = this.finishNode(s2, "UpdateExpression");
    }
  }
  return !t3 && this.eat(Rh.starstar) ? this.buildBinary(n2, i2, r2, this.parseMaybeUnary(null, false), "**", false) : r2;
}, vd.parseExprSubscripts = function(e25) {
  var t3 = this.start, r2 = this.startLoc, n2 = this.parseExprAtom(e25), i2 = "ArrowFunctionExpression" === n2.type && ")" !== this.input.slice(this.lastTokStart, this.lastTokEnd);
  if (this.checkExpressionErrors(e25) || i2) return n2;
  var a2 = this.parseSubscripts(n2, t3, r2);
  return e25 && "MemberExpression" === a2.type && (e25.parenthesizedAssign >= a2.start && (e25.parenthesizedAssign = -1), e25.parenthesizedBind >= a2.start && (e25.parenthesizedBind = -1)), a2;
}, vd.parseSubscripts = function(e25, t3, r2, n2) {
  for (var i2 = this.options.ecmaVersion >= 8 && "Identifier" === e25.type && "async" === e25.name && this.lastTokEnd === e25.end && !this.canInsertSemicolon() && "async" === this.input.slice(e25.start, e25.end); ; ) {
    var a2 = this.parseSubscript(e25, t3, r2, n2, i2);
    if (a2 === e25 || "ArrowFunctionExpression" === a2.type) return a2;
    e25 = a2;
  }
}, vd.parseSubscript = function(e25, t3, r2, n2, i2) {
  var a2 = this.eat(Rh.bracketL);
  if (a2 || this.eat(Rh.dot)) {
    var o2 = this.startNodeAt(t3, r2);
    o2.object = e25, o2.property = a2 ? this.parseExpression() : this.parseIdent("never" !== this.options.allowReserved), o2.computed = !!a2, a2 && this.expect(Rh.bracketR), e25 = this.finishNode(o2, "MemberExpression");
  } else if (!n2 && this.eat(Rh.parenL)) {
    var s2 = new ld(), u2 = this.yieldPos, c2 = this.awaitPos, l2 = this.awaitIdentPos;
    this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0;
    var p2 = this.parseExprList(Rh.parenR, this.options.ecmaVersion >= 8 && "Import" !== e25.type, false, s2);
    if (i2 && !this.canInsertSemicolon() && this.eat(Rh.arrow)) return this.checkPatternErrors(s2, false), this.checkYieldAwaitInDefaultParams(), this.awaitIdentPos > 0 && this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"), this.yieldPos = u2, this.awaitPos = c2, this.awaitIdentPos = l2, this.parseArrowExpression(this.startNodeAt(t3, r2), p2, true);
    this.checkExpressionErrors(s2, true), this.yieldPos = u2 || this.yieldPos, this.awaitPos = c2 || this.awaitPos, this.awaitIdentPos = l2 || this.awaitIdentPos;
    var f2 = this.startNodeAt(t3, r2);
    if (f2.callee = e25, f2.arguments = p2, "Import" === f2.callee.type) {
      1 !== f2.arguments.length && this.raise(f2.start, "import() requires exactly one argument");
      var h2 = f2.arguments[0];
      h2 && "SpreadElement" === h2.type && this.raise(h2.start, "... is not allowed in import()");
    }
    e25 = this.finishNode(f2, "CallExpression");
  } else if (this.type === Rh.backQuote) {
    var d2 = this.startNodeAt(t3, r2);
    d2.tag = e25, d2.quasi = this.parseTemplate({ isTagged: true }), e25 = this.finishNode(d2, "TaggedTemplateExpression");
  }
  return e25;
}, vd.parseExprAtom = function(e25) {
  this.type === Rh.slash && this.readRegexp();
  var t3, r2 = this.potentialArrowAt === this.start;
  switch (this.type) {
    case Rh._super:
      return this.allowSuper || this.raise(this.start, "'super' keyword outside a method"), t3 = this.startNode(), this.next(), this.type !== Rh.parenL || this.allowDirectSuper || this.raise(t3.start, "super() call outside constructor of a subclass"), this.type !== Rh.dot && this.type !== Rh.bracketL && this.type !== Rh.parenL && this.unexpected(), this.finishNode(t3, "Super");
    case Rh._this:
      return t3 = this.startNode(), this.next(), this.finishNode(t3, "ThisExpression");
    case Rh.name:
      var n2 = this.start, i2 = this.startLoc, a2 = this.containsEsc, o2 = this.parseIdent(false);
      if (this.options.ecmaVersion >= 8 && !a2 && "async" === o2.name && !this.canInsertSemicolon() && this.eat(Rh._function)) return this.parseFunction(this.startNodeAt(n2, i2), 0, false, true);
      if (r2 && !this.canInsertSemicolon()) {
        if (this.eat(Rh.arrow)) return this.parseArrowExpression(this.startNodeAt(n2, i2), [o2], false);
        if (this.options.ecmaVersion >= 8 && "async" === o2.name && this.type === Rh.name && !a2) return o2 = this.parseIdent(false), !this.canInsertSemicolon() && this.eat(Rh.arrow) || this.unexpected(), this.parseArrowExpression(this.startNodeAt(n2, i2), [o2], true);
      }
      return o2;
    case Rh.regexp:
      var s2 = this.value;
      return (t3 = this.parseLiteral(s2.value)).regex = { pattern: s2.pattern, flags: s2.flags }, t3;
    case Rh.num:
    case Rh.string:
      return this.parseLiteral(this.value);
    case Rh._null:
    case Rh._true:
    case Rh._false:
      return (t3 = this.startNode()).value = this.type === Rh._null ? null : this.type === Rh._true, t3.raw = this.type.keyword, this.next(), this.finishNode(t3, "Literal");
    case Rh.parenL:
      var u2 = this.start, c2 = this.parseParenAndDistinguishExpression(r2);
      return e25 && (e25.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(c2) && (e25.parenthesizedAssign = u2), e25.parenthesizedBind < 0 && (e25.parenthesizedBind = u2)), c2;
    case Rh.bracketL:
      return t3 = this.startNode(), this.next(), t3.elements = this.parseExprList(Rh.bracketR, true, true, e25), this.finishNode(t3, "ArrayExpression");
    case Rh.braceL:
      return this.parseObj(false, e25);
    case Rh._function:
      return t3 = this.startNode(), this.next(), this.parseFunction(t3, 0);
    case Rh._class:
      return this.parseClass(this.startNode(), false);
    case Rh._new:
      return this.parseNew();
    case Rh.backQuote:
      return this.parseTemplate();
    case Rh._import:
      return this.options.ecmaVersion > 10 ? this.parseDynamicImport() : this.unexpected();
    default:
      this.unexpected();
  }
}, vd.parseDynamicImport = function() {
  var e25 = this.startNode();
  return this.next(), this.type !== Rh.parenL && this.unexpected(), this.finishNode(e25, "Import");
}, vd.parseLiteral = function(e25) {
  var t3 = this.startNode();
  return t3.value = e25, t3.raw = this.input.slice(this.start, this.end), 110 === t3.raw.charCodeAt(t3.raw.length - 1) && (t3.bigint = t3.raw.slice(0, -1)), this.next(), this.finishNode(t3, "Literal");
}, vd.parseParenExpression = function() {
  this.expect(Rh.parenL);
  var e25 = this.parseExpression();
  return this.expect(Rh.parenR), e25;
}, vd.parseParenAndDistinguishExpression = function(e25) {
  var t3, r2 = this.start, n2 = this.startLoc, i2 = this.options.ecmaVersion >= 8;
  if (this.options.ecmaVersion >= 6) {
    this.next();
    var a2, o2 = this.start, s2 = this.startLoc, u2 = [], c2 = true, l2 = false, p2 = new ld(), f2 = this.yieldPos, h2 = this.awaitPos;
    for (this.yieldPos = 0, this.awaitPos = 0; this.type !== Rh.parenR; ) {
      if (c2 ? c2 = false : this.expect(Rh.comma), i2 && this.afterTrailingComma(Rh.parenR, true)) {
        l2 = true;
        break;
      }
      if (this.type === Rh.ellipsis) {
        a2 = this.start, u2.push(this.parseParenItem(this.parseRestBinding())), this.type === Rh.comma && this.raise(this.start, "Comma is not permitted after the rest element");
        break;
      }
      u2.push(this.parseMaybeAssign(false, p2, this.parseParenItem));
    }
    var d2 = this.start, m2 = this.startLoc;
    if (this.expect(Rh.parenR), e25 && !this.canInsertSemicolon() && this.eat(Rh.arrow)) return this.checkPatternErrors(p2, false), this.checkYieldAwaitInDefaultParams(), this.yieldPos = f2, this.awaitPos = h2, this.parseParenArrowList(r2, n2, u2);
    u2.length && !l2 || this.unexpected(this.lastTokStart), a2 && this.unexpected(a2), this.checkExpressionErrors(p2, true), this.yieldPos = f2 || this.yieldPos, this.awaitPos = h2 || this.awaitPos, u2.length > 1 ? ((t3 = this.startNodeAt(o2, s2)).expressions = u2, this.finishNodeAt(t3, "SequenceExpression", d2, m2)) : t3 = u2[0];
  } else t3 = this.parseParenExpression();
  if (this.options.preserveParens) {
    var g2 = this.startNodeAt(r2, n2);
    return g2.expression = t3, this.finishNode(g2, "ParenthesizedExpression");
  }
  return t3;
}, vd.parseParenItem = function(e25) {
  return e25;
}, vd.parseParenArrowList = function(e25, t3, r2) {
  return this.parseArrowExpression(this.startNodeAt(e25, t3), r2);
};
var xd = [];
vd.parseNew = function() {
  var e25 = this.startNode(), t3 = this.parseIdent(true);
  if (this.options.ecmaVersion >= 6 && this.eat(Rh.dot)) {
    e25.meta = t3;
    var r2 = this.containsEsc;
    return e25.property = this.parseIdent(true), ("target" !== e25.property.name || r2) && this.raiseRecoverable(e25.property.start, "The only valid meta property for new is new.target"), this.inNonArrowFunction() || this.raiseRecoverable(e25.start, "new.target can only be used in functions"), this.finishNode(e25, "MetaProperty");
  }
  var n2 = this.start, i2 = this.startLoc;
  return e25.callee = this.parseSubscripts(this.parseExprAtom(), n2, i2, true), this.options.ecmaVersion > 10 && "Import" === e25.callee.type && this.raise(e25.callee.start, "Cannot use new with import(...)"), this.eat(Rh.parenL) ? e25.arguments = this.parseExprList(Rh.parenR, this.options.ecmaVersion >= 8 && "Import" !== e25.callee.type, false) : e25.arguments = xd, this.finishNode(e25, "NewExpression");
}, vd.parseTemplateElement = function(e25) {
  var t3 = e25.isTagged, r2 = this.startNode();
  return this.type === Rh.invalidTemplate ? (t3 || this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal"), r2.value = { raw: this.value, cooked: null }) : r2.value = { raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"), cooked: this.value }, this.next(), r2.tail = this.type === Rh.backQuote, this.finishNode(r2, "TemplateElement");
}, vd.parseTemplate = function(e25) {
  void 0 === e25 && (e25 = {});
  var t3 = e25.isTagged;
  void 0 === t3 && (t3 = false);
  var r2 = this.startNode();
  this.next(), r2.expressions = [];
  var n2 = this.parseTemplateElement({ isTagged: t3 });
  for (r2.quasis = [n2]; !n2.tail; ) this.type === Rh.eof && this.raise(this.pos, "Unterminated template literal"), this.expect(Rh.dollarBraceL), r2.expressions.push(this.parseExpression()), this.expect(Rh.braceR), r2.quasis.push(n2 = this.parseTemplateElement({ isTagged: t3 }));
  return this.next(), this.finishNode(r2, "TemplateLiteral");
}, vd.isAsyncProp = function(e25) {
  return !e25.computed && "Identifier" === e25.key.type && "async" === e25.key.name && (this.type === Rh.name || this.type === Rh.num || this.type === Rh.string || this.type === Rh.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === Rh.star) && !Mh.test(this.input.slice(this.lastTokEnd, this.start));
}, vd.parseObj = function(e25, t3) {
  var r2 = this.startNode(), n2 = true, i2 = {};
  for (r2.properties = [], this.next(); !this.eat(Rh.braceR); ) {
    if (n2) n2 = false;
    else if (this.expect(Rh.comma), this.afterTrailingComma(Rh.braceR)) break;
    var a2 = this.parseProperty(e25, t3);
    e25 || this.checkPropClash(a2, i2, t3), r2.properties.push(a2);
  }
  return this.finishNode(r2, e25 ? "ObjectPattern" : "ObjectExpression");
}, vd.parseProperty = function(e25, t3) {
  var r2, n2, i2, a2, o2 = this.startNode();
  if (this.options.ecmaVersion >= 9 && this.eat(Rh.ellipsis)) return e25 ? (o2.argument = this.parseIdent(false), this.type === Rh.comma && this.raise(this.start, "Comma is not permitted after the rest element"), this.finishNode(o2, "RestElement")) : (this.type === Rh.parenL && t3 && (t3.parenthesizedAssign < 0 && (t3.parenthesizedAssign = this.start), t3.parenthesizedBind < 0 && (t3.parenthesizedBind = this.start)), o2.argument = this.parseMaybeAssign(false, t3), this.type === Rh.comma && t3 && t3.trailingComma < 0 && (t3.trailingComma = this.start), this.finishNode(o2, "SpreadElement"));
  this.options.ecmaVersion >= 6 && (o2.method = false, o2.shorthand = false, (e25 || t3) && (i2 = this.start, a2 = this.startLoc), e25 || (r2 = this.eat(Rh.star)));
  var s2 = this.containsEsc;
  return this.parsePropertyName(o2), !e25 && !s2 && this.options.ecmaVersion >= 8 && !r2 && this.isAsyncProp(o2) ? (n2 = true, r2 = this.options.ecmaVersion >= 9 && this.eat(Rh.star), this.parsePropertyName(o2, t3)) : n2 = false, this.parsePropertyValue(o2, e25, r2, n2, i2, a2, t3, s2), this.finishNode(o2, "Property");
}, vd.parsePropertyValue = function(e25, t3, r2, n2, i2, a2, o2, s2) {
  if ((r2 || n2) && this.type === Rh.colon && this.unexpected(), this.eat(Rh.colon)) e25.value = t3 ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, o2), e25.kind = "init";
  else if (this.options.ecmaVersion >= 6 && this.type === Rh.parenL) t3 && this.unexpected(), e25.kind = "init", e25.method = true, e25.value = this.parseMethod(r2, n2);
  else if (t3 || s2 || !(this.options.ecmaVersion >= 5) || e25.computed || "Identifier" !== e25.key.type || "get" !== e25.key.name && "set" !== e25.key.name || this.type === Rh.comma || this.type === Rh.braceR) this.options.ecmaVersion >= 6 && !e25.computed && "Identifier" === e25.key.type ? ((r2 || n2) && this.unexpected(), this.checkUnreserved(e25.key), "await" !== e25.key.name || this.awaitIdentPos || (this.awaitIdentPos = i2), e25.kind = "init", t3 ? e25.value = this.parseMaybeDefault(i2, a2, e25.key) : this.type === Rh.eq && o2 ? (o2.shorthandAssign < 0 && (o2.shorthandAssign = this.start), e25.value = this.parseMaybeDefault(i2, a2, e25.key)) : e25.value = e25.key, e25.shorthand = true) : this.unexpected();
  else {
    (r2 || n2) && this.unexpected(), e25.kind = e25.key.name, this.parsePropertyName(e25), e25.value = this.parseMethod(false);
    var u2 = "get" === e25.kind ? 0 : 1;
    if (e25.value.params.length !== u2) {
      var c2 = e25.value.start;
      "get" === e25.kind ? this.raiseRecoverable(c2, "getter should have no params") : this.raiseRecoverable(c2, "setter should have exactly one param");
    } else "set" === e25.kind && "RestElement" === e25.value.params[0].type && this.raiseRecoverable(e25.value.params[0].start, "Setter cannot use rest params");
  }
}, vd.parsePropertyName = function(e25) {
  if (this.options.ecmaVersion >= 6) {
    if (this.eat(Rh.bracketL)) return e25.computed = true, e25.key = this.parseMaybeAssign(), this.expect(Rh.bracketR), e25.key;
    e25.computed = false;
  }
  return e25.key = this.type === Rh.num || this.type === Rh.string ? this.parseExprAtom() : this.parseIdent("never" !== this.options.allowReserved);
}, vd.initFunction = function(e25) {
  e25.id = null, this.options.ecmaVersion >= 6 && (e25.generator = e25.expression = false), this.options.ecmaVersion >= 8 && (e25.async = false);
}, vd.parseMethod = function(e25, t3, r2) {
  var n2 = this.startNode(), i2 = this.yieldPos, a2 = this.awaitPos, o2 = this.awaitIdentPos;
  return this.initFunction(n2), this.options.ecmaVersion >= 6 && (n2.generator = e25), this.options.ecmaVersion >= 8 && (n2.async = !!t3), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(64 | ad(t3, n2.generator) | (r2 ? 128 : 0)), this.expect(Rh.parenL), n2.params = this.parseBindingList(Rh.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams(), this.parseFunctionBody(n2, false, true), this.yieldPos = i2, this.awaitPos = a2, this.awaitIdentPos = o2, this.finishNode(n2, "FunctionExpression");
}, vd.parseArrowExpression = function(e25, t3, r2) {
  var n2 = this.yieldPos, i2 = this.awaitPos, a2 = this.awaitIdentPos;
  return this.enterScope(16 | ad(r2, false)), this.initFunction(e25), this.options.ecmaVersion >= 8 && (e25.async = !!r2), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, e25.params = this.toAssignableList(t3, true), this.parseFunctionBody(e25, true, false), this.yieldPos = n2, this.awaitPos = i2, this.awaitIdentPos = a2, this.finishNode(e25, "ArrowFunctionExpression");
}, vd.parseFunctionBody = function(e25, t3, r2) {
  var n2 = t3 && this.type !== Rh.braceL, i2 = this.strict, a2 = false;
  if (n2) e25.body = this.parseMaybeAssign(), e25.expression = true, this.checkParams(e25, false);
  else {
    var o2 = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(e25.params);
    i2 && !o2 || (a2 = this.strictDirective(this.end)) && o2 && this.raiseRecoverable(e25.start, "Illegal 'use strict' directive in function with non-simple parameter list");
    var s2 = this.labels;
    this.labels = [], a2 && (this.strict = true), this.checkParams(e25, !i2 && !a2 && !t3 && !r2 && this.isSimpleParamList(e25.params)), e25.body = this.parseBlock(false), e25.expression = false, this.adaptDirectivePrologue(e25.body.body), this.labels = s2;
  }
  this.exitScope(), this.strict && e25.id && this.checkLVal(e25.id, 5), this.strict = i2;
}, vd.isSimpleParamList = function(e25) {
  for (var t3 = 0, r2 = e25; t3 < r2.length; t3 += 1) {
    if ("Identifier" !== r2[t3].type) return false;
  }
  return true;
}, vd.checkParams = function(e25, t3) {
  for (var r2 = {}, n2 = 0, i2 = e25.params; n2 < i2.length; n2 += 1) {
    var a2 = i2[n2];
    this.checkLVal(a2, 1, t3 ? null : r2);
  }
}, vd.parseExprList = function(e25, t3, r2, n2) {
  for (var i2 = [], a2 = true; !this.eat(e25); ) {
    if (a2) a2 = false;
    else if (this.expect(Rh.comma), t3 && this.afterTrailingComma(e25)) break;
    var o2 = void 0;
    r2 && this.type === Rh.comma ? o2 = null : this.type === Rh.ellipsis ? (o2 = this.parseSpread(n2), n2 && this.type === Rh.comma && n2.trailingComma < 0 && (n2.trailingComma = this.start)) : o2 = this.parseMaybeAssign(false, n2), i2.push(o2);
  }
  return i2;
}, vd.checkUnreserved = function(e25) {
  var t3 = e25.start, r2 = e25.end, n2 = e25.name;
  (this.inGenerator && "yield" === n2 && this.raiseRecoverable(t3, "Cannot use 'yield' as identifier inside a generator"), this.inAsync && "await" === n2 && this.raiseRecoverable(t3, "Cannot use 'await' as identifier inside an async function"), this.keywords.test(n2) && this.raise(t3, "Unexpected keyword '" + n2 + "'"), this.options.ecmaVersion < 6 && -1 !== this.input.slice(t3, r2).indexOf("\\")) || (this.strict ? this.reservedWordsStrict : this.reservedWords).test(n2) && (this.inAsync || "await" !== n2 || this.raiseRecoverable(t3, "Cannot use keyword 'await' outside an async function"), this.raiseRecoverable(t3, "The keyword '" + n2 + "' is reserved"));
}, vd.parseIdent = function(e25, t3) {
  var r2 = this.startNode();
  return this.type === Rh.name ? r2.name = this.value : this.type.keyword ? (r2.name = this.type.keyword, "class" !== r2.name && "function" !== r2.name || this.lastTokEnd === this.lastTokStart + 1 && 46 === this.input.charCodeAt(this.lastTokStart) || this.context.pop()) : this.unexpected(), this.next(), this.finishNode(r2, "Identifier"), e25 || (this.checkUnreserved(r2), "await" !== r2.name || this.awaitIdentPos || (this.awaitIdentPos = r2.start)), r2;
}, vd.parseYield = function(e25) {
  this.yieldPos || (this.yieldPos = this.start);
  var t3 = this.startNode();
  return this.next(), this.type === Rh.semi || this.canInsertSemicolon() || this.type !== Rh.star && !this.type.startsExpr ? (t3.delegate = false, t3.argument = null) : (t3.delegate = this.eat(Rh.star), t3.argument = this.parseMaybeAssign(e25)), this.finishNode(t3, "YieldExpression");
}, vd.parseAwait = function() {
  this.awaitPos || (this.awaitPos = this.start);
  var e25 = this.startNode();
  return this.next(), e25.argument = this.parseMaybeUnary(null, true), this.finishNode(e25, "AwaitExpression");
};
var bd = od.prototype;
bd.raise = function(e25, t3) {
  var r2 = Yh(this.input, e25);
  t3 += " (" + r2.line + ":" + r2.column + ")";
  var n2 = new SyntaxError(t3);
  throw n2.pos = e25, n2.loc = r2, n2.raisedAt = this.pos, n2;
}, bd.raiseRecoverable = bd.raise, bd.curPosition = function() {
  if (this.options.locations) return new Qh(this.curLine, this.pos - this.lineStart);
};
var Ed = od.prototype;
var Cd = function(e25) {
  this.flags = e25, this.var = [], this.lexical = [], this.functions = [];
};
Ed.enterScope = function(e25) {
  this.scopeStack.push(new Cd(e25));
}, Ed.exitScope = function() {
  this.scopeStack.pop();
}, Ed.treatFunctionsAsVarInScope = function(e25) {
  return e25.flags & td || !this.inModule && 1 & e25.flags;
}, Ed.declareName = function(e25, t3, r2) {
  var n2 = false;
  if (2 === t3) {
    var i2 = this.currentScope();
    n2 = i2.lexical.indexOf(e25) > -1 || i2.functions.indexOf(e25) > -1 || i2.var.indexOf(e25) > -1, i2.lexical.push(e25), this.inModule && 1 & i2.flags && delete this.undefinedExports[e25];
  } else if (4 === t3) {
    this.currentScope().lexical.push(e25);
  } else if (3 === t3) {
    var a2 = this.currentScope();
    n2 = this.treatFunctionsAsVar ? a2.lexical.indexOf(e25) > -1 : a2.lexical.indexOf(e25) > -1 || a2.var.indexOf(e25) > -1, a2.functions.push(e25);
  } else for (var o2 = this.scopeStack.length - 1; o2 >= 0; --o2) {
    var s2 = this.scopeStack[o2];
    if (s2.lexical.indexOf(e25) > -1 && !(32 & s2.flags && s2.lexical[0] === e25) || !this.treatFunctionsAsVarInScope(s2) && s2.functions.indexOf(e25) > -1) {
      n2 = true;
      break;
    }
    if (s2.var.push(e25), this.inModule && 1 & s2.flags && delete this.undefinedExports[e25], s2.flags & rd) break;
  }
  n2 && this.raiseRecoverable(r2, "Identifier '" + e25 + "' has already been declared");
}, Ed.checkLocalExport = function(e25) {
  -1 === this.scopeStack[0].lexical.indexOf(e25.name) && -1 === this.scopeStack[0].var.indexOf(e25.name) && (this.undefinedExports[e25.name] = e25);
}, Ed.currentScope = function() {
  return this.scopeStack[this.scopeStack.length - 1];
}, Ed.currentVarScope = function() {
  for (var e25 = this.scopeStack.length - 1; ; e25--) {
    var t3 = this.scopeStack[e25];
    if (t3.flags & rd) return t3;
  }
}, Ed.currentThisScope = function() {
  for (var e25 = this.scopeStack.length - 1; ; e25--) {
    var t3 = this.scopeStack[e25];
    if (t3.flags & rd && !(16 & t3.flags)) return t3;
  }
};
var Sd = function(e25, t3, r2) {
  this.type = "", this.start = t3, this.end = 0, e25.options.locations && (this.loc = new Xh(e25, r2)), e25.options.directSourceFile && (this.sourceFile = e25.options.directSourceFile), e25.options.ranges && (this.range = [t3, 0]);
};
var kd = od.prototype;
function Dd(e25, t3, r2, n2) {
  return e25.type = t3, e25.end = r2, this.options.locations && (e25.loc.end = n2), this.options.ranges && (e25.range[1] = r2), e25;
}
kd.startNode = function() {
  return new Sd(this, this.start, this.startLoc);
}, kd.startNodeAt = function(e25, t3) {
  return new Sd(this, e25, t3);
}, kd.finishNode = function(e25, t3) {
  return Dd.call(this, e25, t3, this.lastTokEnd, this.lastTokEndLoc);
}, kd.finishNodeAt = function(e25, t3, r2, n2) {
  return Dd.call(this, e25, t3, r2, n2);
};
var Fd = function(e25, t3, r2, n2, i2) {
  this.token = e25, this.isExpr = !!t3, this.preserveSpace = !!r2, this.override = n2, this.generator = !!i2;
};
var Ad = { b_stat: new Fd("{", false), b_expr: new Fd("{", true), b_tmpl: new Fd("${", false), p_stat: new Fd("(", false), p_expr: new Fd("(", true), q_tmpl: new Fd("`", true, true, function(e25) {
  return e25.tryReadTemplateToken();
}), f_stat: new Fd("function", false), f_expr: new Fd("function", true), f_expr_gen: new Fd("function", true, false, null, true), f_gen: new Fd("function", false, false, null, true) };
var wd = od.prototype;
wd.initialContext = function() {
  return [Ad.b_stat];
}, wd.braceIsBlock = function(e25) {
  var t3 = this.curContext();
  return t3 === Ad.f_expr || t3 === Ad.f_stat || (e25 !== Rh.colon || t3 !== Ad.b_stat && t3 !== Ad.b_expr ? e25 === Rh._return || e25 === Rh.name && this.exprAllowed ? Mh.test(this.input.slice(this.lastTokEnd, this.start)) : e25 === Rh._else || e25 === Rh.semi || e25 === Rh.eof || e25 === Rh.parenR || e25 === Rh.arrow || (e25 === Rh.braceL ? t3 === Ad.b_stat : e25 !== Rh._var && e25 !== Rh._const && e25 !== Rh.name && !this.exprAllowed) : !t3.isExpr);
}, wd.inGeneratorContext = function() {
  for (var e25 = this.context.length - 1; e25 >= 1; e25--) {
    var t3 = this.context[e25];
    if ("function" === t3.token) return t3.generator;
  }
  return false;
}, wd.updateContext = function(e25) {
  var t3, r2 = this.type;
  r2.keyword && e25 === Rh.dot ? this.exprAllowed = false : (t3 = r2.updateContext) ? t3.call(this, e25) : this.exprAllowed = r2.beforeExpr;
}, Rh.parenR.updateContext = Rh.braceR.updateContext = function() {
  if (1 !== this.context.length) {
    var e25 = this.context.pop();
    e25 === Ad.b_stat && "function" === this.curContext().token && (e25 = this.context.pop()), this.exprAllowed = !e25.isExpr;
  } else this.exprAllowed = true;
}, Rh.braceL.updateContext = function(e25) {
  this.context.push(this.braceIsBlock(e25) ? Ad.b_stat : Ad.b_expr), this.exprAllowed = true;
}, Rh.dollarBraceL.updateContext = function() {
  this.context.push(Ad.b_tmpl), this.exprAllowed = true;
}, Rh.parenL.updateContext = function(e25) {
  var t3 = e25 === Rh._if || e25 === Rh._for || e25 === Rh._with || e25 === Rh._while;
  this.context.push(t3 ? Ad.p_stat : Ad.p_expr), this.exprAllowed = true;
}, Rh.incDec.updateContext = function() {
}, Rh._function.updateContext = Rh._class.updateContext = function(e25) {
  !e25.beforeExpr || e25 === Rh.semi || e25 === Rh._else || e25 === Rh._return && Mh.test(this.input.slice(this.lastTokEnd, this.start)) || (e25 === Rh.colon || e25 === Rh.braceL) && this.curContext() === Ad.b_stat ? this.context.push(Ad.f_stat) : this.context.push(Ad.f_expr), this.exprAllowed = false;
}, Rh.backQuote.updateContext = function() {
  this.curContext() === Ad.q_tmpl ? this.context.pop() : this.context.push(Ad.q_tmpl), this.exprAllowed = false;
}, Rh.star.updateContext = function(e25) {
  if (e25 === Rh._function) {
    var t3 = this.context.length - 1;
    this.context[t3] === Ad.f_expr ? this.context[t3] = Ad.f_expr_gen : this.context[t3] = Ad.f_gen;
  }
  this.exprAllowed = true;
}, Rh.name.updateContext = function(e25) {
  var t3 = false;
  this.options.ecmaVersion >= 6 && e25 !== Rh.dot && ("of" === this.value && !this.exprAllowed || "yield" === this.value && this.inGeneratorContext()) && (t3 = true), this.exprAllowed = t3;
};
var _d = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
var Td = _d + " Extended_Pictographic";
var Pd = { 9: _d, 10: Td, 11: "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS Extended_Pictographic" };
var Id = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
var Bd = "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
var Od = Bd + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
var Ld = { 9: Bd, 10: Od, 11: "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho" };
var Nd = {};
function jd(e25) {
  var t3 = Nd[e25] = { binary: Jh(Pd[e25] + " " + Id), nonBinary: { General_Category: Jh(Id), Script: Jh(Ld[e25]) } };
  t3.nonBinary.Script_Extensions = t3.nonBinary.Script, t3.nonBinary.gc = t3.nonBinary.General_Category, t3.nonBinary.sc = t3.nonBinary.Script, t3.nonBinary.scx = t3.nonBinary.Script_Extensions;
}
jd(9), jd(10), jd(11);
var Rd = od.prototype;
var Md = function(e25) {
  this.parser = e25, this.validFlags = "gim" + (e25.options.ecmaVersion >= 6 ? "uy" : "") + (e25.options.ecmaVersion >= 9 ? "s" : ""), this.unicodeProperties = Nd[e25.options.ecmaVersion >= 11 ? 11 : e25.options.ecmaVersion], this.source = "", this.flags = "", this.start = 0, this.switchU = false, this.switchN = false, this.pos = 0, this.lastIntValue = 0, this.lastStringValue = "", this.lastAssertionIsQuantifiable = false, this.numCapturingParens = 0, this.maxBackReference = 0, this.groupNames = [], this.backReferenceNames = [];
};
function Vd(e25) {
  return e25 <= 65535 ? String.fromCharCode(e25) : (e25 -= 65536, String.fromCharCode(55296 + (e25 >> 10), 56320 + (1023 & e25)));
}
function Ud(e25) {
  return 36 === e25 || e25 >= 40 && e25 <= 43 || 46 === e25 || 63 === e25 || e25 >= 91 && e25 <= 94 || e25 >= 123 && e25 <= 125;
}
function qd(e25) {
  return e25 >= 65 && e25 <= 90 || e25 >= 97 && e25 <= 122;
}
function Wd(e25) {
  return qd(e25) || 95 === e25;
}
function $d(e25) {
  return Wd(e25) || Gd(e25);
}
function Gd(e25) {
  return e25 >= 48 && e25 <= 57;
}
function zd(e25) {
  return e25 >= 48 && e25 <= 57 || e25 >= 65 && e25 <= 70 || e25 >= 97 && e25 <= 102;
}
function Hd(e25) {
  return e25 >= 65 && e25 <= 70 ? e25 - 65 + 10 : e25 >= 97 && e25 <= 102 ? e25 - 97 + 10 : e25 - 48;
}
function Kd(e25) {
  return e25 >= 48 && e25 <= 55;
}
Md.prototype.reset = function(e25, t3, r2) {
  var n2 = -1 !== r2.indexOf("u");
  this.start = 0 | e25, this.source = t3 + "", this.flags = r2, this.switchU = n2 && this.parser.options.ecmaVersion >= 6, this.switchN = n2 && this.parser.options.ecmaVersion >= 9;
}, Md.prototype.raise = function(e25) {
  this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + e25);
}, Md.prototype.at = function(e25) {
  var t3 = this.source, r2 = t3.length;
  if (e25 >= r2) return -1;
  var n2 = t3.charCodeAt(e25);
  return !this.switchU || n2 <= 55295 || n2 >= 57344 || e25 + 1 >= r2 ? n2 : (n2 << 10) + t3.charCodeAt(e25 + 1) - 56613888;
}, Md.prototype.nextIndex = function(e25) {
  var t3 = this.source, r2 = t3.length;
  if (e25 >= r2) return r2;
  var n2 = t3.charCodeAt(e25);
  return !this.switchU || n2 <= 55295 || n2 >= 57344 || e25 + 1 >= r2 ? e25 + 1 : e25 + 2;
}, Md.prototype.current = function() {
  return this.at(this.pos);
}, Md.prototype.lookahead = function() {
  return this.at(this.nextIndex(this.pos));
}, Md.prototype.advance = function() {
  this.pos = this.nextIndex(this.pos);
}, Md.prototype.eat = function(e25) {
  return this.current() === e25 && (this.advance(), true);
}, Rd.validateRegExpFlags = function(e25) {
  for (var t3 = e25.validFlags, r2 = e25.flags, n2 = 0; n2 < r2.length; n2++) {
    var i2 = r2.charAt(n2);
    -1 === t3.indexOf(i2) && this.raise(e25.start, "Invalid regular expression flag"), r2.indexOf(i2, n2 + 1) > -1 && this.raise(e25.start, "Duplicate regular expression flag");
  }
}, Rd.validateRegExpPattern = function(e25) {
  this.regexp_pattern(e25), !e25.switchN && this.options.ecmaVersion >= 9 && e25.groupNames.length > 0 && (e25.switchN = true, this.regexp_pattern(e25));
}, Rd.regexp_pattern = function(e25) {
  e25.pos = 0, e25.lastIntValue = 0, e25.lastStringValue = "", e25.lastAssertionIsQuantifiable = false, e25.numCapturingParens = 0, e25.maxBackReference = 0, e25.groupNames.length = 0, e25.backReferenceNames.length = 0, this.regexp_disjunction(e25), e25.pos !== e25.source.length && (e25.eat(41) && e25.raise("Unmatched ')'"), (e25.eat(93) || e25.eat(125)) && e25.raise("Lone quantifier brackets")), e25.maxBackReference > e25.numCapturingParens && e25.raise("Invalid escape");
  for (var t3 = 0, r2 = e25.backReferenceNames; t3 < r2.length; t3 += 1) {
    var n2 = r2[t3];
    -1 === e25.groupNames.indexOf(n2) && e25.raise("Invalid named capture referenced");
  }
}, Rd.regexp_disjunction = function(e25) {
  for (this.regexp_alternative(e25); e25.eat(124); ) this.regexp_alternative(e25);
  this.regexp_eatQuantifier(e25, true) && e25.raise("Nothing to repeat"), e25.eat(123) && e25.raise("Lone quantifier brackets");
}, Rd.regexp_alternative = function(e25) {
  for (; e25.pos < e25.source.length && this.regexp_eatTerm(e25); ) ;
}, Rd.regexp_eatTerm = function(e25) {
  return this.regexp_eatAssertion(e25) ? (e25.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(e25) && e25.switchU && e25.raise("Invalid quantifier"), true) : !(e25.switchU ? !this.regexp_eatAtom(e25) : !this.regexp_eatExtendedAtom(e25)) && (this.regexp_eatQuantifier(e25), true);
}, Rd.regexp_eatAssertion = function(e25) {
  var t3 = e25.pos;
  if (e25.lastAssertionIsQuantifiable = false, e25.eat(94) || e25.eat(36)) return true;
  if (e25.eat(92)) {
    if (e25.eat(66) || e25.eat(98)) return true;
    e25.pos = t3;
  }
  if (e25.eat(40) && e25.eat(63)) {
    var r2 = false;
    if (this.options.ecmaVersion >= 9 && (r2 = e25.eat(60)), e25.eat(61) || e25.eat(33)) return this.regexp_disjunction(e25), e25.eat(41) || e25.raise("Unterminated group"), e25.lastAssertionIsQuantifiable = !r2, true;
  }
  return e25.pos = t3, false;
}, Rd.regexp_eatQuantifier = function(e25, t3) {
  return void 0 === t3 && (t3 = false), !!this.regexp_eatQuantifierPrefix(e25, t3) && (e25.eat(63), true);
}, Rd.regexp_eatQuantifierPrefix = function(e25, t3) {
  return e25.eat(42) || e25.eat(43) || e25.eat(63) || this.regexp_eatBracedQuantifier(e25, t3);
}, Rd.regexp_eatBracedQuantifier = function(e25, t3) {
  var r2 = e25.pos;
  if (e25.eat(123)) {
    var n2 = 0, i2 = -1;
    if (this.regexp_eatDecimalDigits(e25) && (n2 = e25.lastIntValue, e25.eat(44) && this.regexp_eatDecimalDigits(e25) && (i2 = e25.lastIntValue), e25.eat(125))) return -1 !== i2 && i2 < n2 && !t3 && e25.raise("numbers out of order in {} quantifier"), true;
    e25.switchU && !t3 && e25.raise("Incomplete quantifier"), e25.pos = r2;
  }
  return false;
}, Rd.regexp_eatAtom = function(e25) {
  return this.regexp_eatPatternCharacters(e25) || e25.eat(46) || this.regexp_eatReverseSolidusAtomEscape(e25) || this.regexp_eatCharacterClass(e25) || this.regexp_eatUncapturingGroup(e25) || this.regexp_eatCapturingGroup(e25);
}, Rd.regexp_eatReverseSolidusAtomEscape = function(e25) {
  var t3 = e25.pos;
  if (e25.eat(92)) {
    if (this.regexp_eatAtomEscape(e25)) return true;
    e25.pos = t3;
  }
  return false;
}, Rd.regexp_eatUncapturingGroup = function(e25) {
  var t3 = e25.pos;
  if (e25.eat(40)) {
    if (e25.eat(63) && e25.eat(58)) {
      if (this.regexp_disjunction(e25), e25.eat(41)) return true;
      e25.raise("Unterminated group");
    }
    e25.pos = t3;
  }
  return false;
}, Rd.regexp_eatCapturingGroup = function(e25) {
  if (e25.eat(40)) {
    if (this.options.ecmaVersion >= 9 ? this.regexp_groupSpecifier(e25) : 63 === e25.current() && e25.raise("Invalid group"), this.regexp_disjunction(e25), e25.eat(41)) return e25.numCapturingParens += 1, true;
    e25.raise("Unterminated group");
  }
  return false;
}, Rd.regexp_eatExtendedAtom = function(e25) {
  return e25.eat(46) || this.regexp_eatReverseSolidusAtomEscape(e25) || this.regexp_eatCharacterClass(e25) || this.regexp_eatUncapturingGroup(e25) || this.regexp_eatCapturingGroup(e25) || this.regexp_eatInvalidBracedQuantifier(e25) || this.regexp_eatExtendedPatternCharacter(e25);
}, Rd.regexp_eatInvalidBracedQuantifier = function(e25) {
  return this.regexp_eatBracedQuantifier(e25, true) && e25.raise("Nothing to repeat"), false;
}, Rd.regexp_eatSyntaxCharacter = function(e25) {
  var t3 = e25.current();
  return !!Ud(t3) && (e25.lastIntValue = t3, e25.advance(), true);
}, Rd.regexp_eatPatternCharacters = function(e25) {
  for (var t3 = e25.pos, r2 = 0; -1 !== (r2 = e25.current()) && !Ud(r2); ) e25.advance();
  return e25.pos !== t3;
}, Rd.regexp_eatExtendedPatternCharacter = function(e25) {
  var t3 = e25.current();
  return !(-1 === t3 || 36 === t3 || t3 >= 40 && t3 <= 43 || 46 === t3 || 63 === t3 || 91 === t3 || 94 === t3 || 124 === t3) && (e25.advance(), true);
}, Rd.regexp_groupSpecifier = function(e25) {
  if (e25.eat(63)) {
    if (this.regexp_eatGroupName(e25)) return -1 !== e25.groupNames.indexOf(e25.lastStringValue) && e25.raise("Duplicate capture group name"), void e25.groupNames.push(e25.lastStringValue);
    e25.raise("Invalid group");
  }
}, Rd.regexp_eatGroupName = function(e25) {
  if (e25.lastStringValue = "", e25.eat(60)) {
    if (this.regexp_eatRegExpIdentifierName(e25) && e25.eat(62)) return true;
    e25.raise("Invalid capture group name");
  }
  return false;
}, Rd.regexp_eatRegExpIdentifierName = function(e25) {
  if (e25.lastStringValue = "", this.regexp_eatRegExpIdentifierStart(e25)) {
    for (e25.lastStringValue += Vd(e25.lastIntValue); this.regexp_eatRegExpIdentifierPart(e25); ) e25.lastStringValue += Vd(e25.lastIntValue);
    return true;
  }
  return false;
}, Rd.regexp_eatRegExpIdentifierStart = function(e25) {
  var t3 = e25.pos, r2 = e25.current();
  return e25.advance(), 92 === r2 && this.regexp_eatRegExpUnicodeEscapeSequence(e25) && (r2 = e25.lastIntValue), function(e26) {
    return Th(e26, true) || 36 === e26 || 95 === e26;
  }(r2) ? (e25.lastIntValue = r2, true) : (e25.pos = t3, false);
}, Rd.regexp_eatRegExpIdentifierPart = function(e25) {
  var t3 = e25.pos, r2 = e25.current();
  return e25.advance(), 92 === r2 && this.regexp_eatRegExpUnicodeEscapeSequence(e25) && (r2 = e25.lastIntValue), function(e26) {
    return Ph(e26, true) || 36 === e26 || 95 === e26 || 8204 === e26 || 8205 === e26;
  }(r2) ? (e25.lastIntValue = r2, true) : (e25.pos = t3, false);
}, Rd.regexp_eatAtomEscape = function(e25) {
  return !!(this.regexp_eatBackReference(e25) || this.regexp_eatCharacterClassEscape(e25) || this.regexp_eatCharacterEscape(e25) || e25.switchN && this.regexp_eatKGroupName(e25)) || (e25.switchU && (99 === e25.current() && e25.raise("Invalid unicode escape"), e25.raise("Invalid escape")), false);
}, Rd.regexp_eatBackReference = function(e25) {
  var t3 = e25.pos;
  if (this.regexp_eatDecimalEscape(e25)) {
    var r2 = e25.lastIntValue;
    if (e25.switchU) return r2 > e25.maxBackReference && (e25.maxBackReference = r2), true;
    if (r2 <= e25.numCapturingParens) return true;
    e25.pos = t3;
  }
  return false;
}, Rd.regexp_eatKGroupName = function(e25) {
  if (e25.eat(107)) {
    if (this.regexp_eatGroupName(e25)) return e25.backReferenceNames.push(e25.lastStringValue), true;
    e25.raise("Invalid named reference");
  }
  return false;
}, Rd.regexp_eatCharacterEscape = function(e25) {
  return this.regexp_eatControlEscape(e25) || this.regexp_eatCControlLetter(e25) || this.regexp_eatZero(e25) || this.regexp_eatHexEscapeSequence(e25) || this.regexp_eatRegExpUnicodeEscapeSequence(e25) || !e25.switchU && this.regexp_eatLegacyOctalEscapeSequence(e25) || this.regexp_eatIdentityEscape(e25);
}, Rd.regexp_eatCControlLetter = function(e25) {
  var t3 = e25.pos;
  if (e25.eat(99)) {
    if (this.regexp_eatControlLetter(e25)) return true;
    e25.pos = t3;
  }
  return false;
}, Rd.regexp_eatZero = function(e25) {
  return 48 === e25.current() && !Gd(e25.lookahead()) && (e25.lastIntValue = 0, e25.advance(), true);
}, Rd.regexp_eatControlEscape = function(e25) {
  var t3 = e25.current();
  return 116 === t3 ? (e25.lastIntValue = 9, e25.advance(), true) : 110 === t3 ? (e25.lastIntValue = 10, e25.advance(), true) : 118 === t3 ? (e25.lastIntValue = 11, e25.advance(), true) : 102 === t3 ? (e25.lastIntValue = 12, e25.advance(), true) : 114 === t3 && (e25.lastIntValue = 13, e25.advance(), true);
}, Rd.regexp_eatControlLetter = function(e25) {
  var t3 = e25.current();
  return !!qd(t3) && (e25.lastIntValue = t3 % 32, e25.advance(), true);
}, Rd.regexp_eatRegExpUnicodeEscapeSequence = function(e25) {
  var t3, r2 = e25.pos;
  if (e25.eat(117)) {
    if (this.regexp_eatFixedHexDigits(e25, 4)) {
      var n2 = e25.lastIntValue;
      if (e25.switchU && n2 >= 55296 && n2 <= 56319) {
        var i2 = e25.pos;
        if (e25.eat(92) && e25.eat(117) && this.regexp_eatFixedHexDigits(e25, 4)) {
          var a2 = e25.lastIntValue;
          if (a2 >= 56320 && a2 <= 57343) return e25.lastIntValue = 1024 * (n2 - 55296) + (a2 - 56320) + 65536, true;
        }
        e25.pos = i2, e25.lastIntValue = n2;
      }
      return true;
    }
    if (e25.switchU && e25.eat(123) && this.regexp_eatHexDigits(e25) && e25.eat(125) && ((t3 = e25.lastIntValue) >= 0 && t3 <= 1114111)) return true;
    e25.switchU && e25.raise("Invalid unicode escape"), e25.pos = r2;
  }
  return false;
}, Rd.regexp_eatIdentityEscape = function(e25) {
  if (e25.switchU) return !!this.regexp_eatSyntaxCharacter(e25) || !!e25.eat(47) && (e25.lastIntValue = 47, true);
  var t3 = e25.current();
  return !(99 === t3 || e25.switchN && 107 === t3) && (e25.lastIntValue = t3, e25.advance(), true);
}, Rd.regexp_eatDecimalEscape = function(e25) {
  e25.lastIntValue = 0;
  var t3 = e25.current();
  if (t3 >= 49 && t3 <= 57) {
    do {
      e25.lastIntValue = 10 * e25.lastIntValue + (t3 - 48), e25.advance();
    } while ((t3 = e25.current()) >= 48 && t3 <= 57);
    return true;
  }
  return false;
}, Rd.regexp_eatCharacterClassEscape = function(e25) {
  var t3 = e25.current();
  if (/* @__PURE__ */ function(e26) {
    return 100 === e26 || 68 === e26 || 115 === e26 || 83 === e26 || 119 === e26 || 87 === e26;
  }(t3)) return e25.lastIntValue = -1, e25.advance(), true;
  if (e25.switchU && this.options.ecmaVersion >= 9 && (80 === t3 || 112 === t3)) {
    if (e25.lastIntValue = -1, e25.advance(), e25.eat(123) && this.regexp_eatUnicodePropertyValueExpression(e25) && e25.eat(125)) return true;
    e25.raise("Invalid property name");
  }
  return false;
}, Rd.regexp_eatUnicodePropertyValueExpression = function(e25) {
  var t3 = e25.pos;
  if (this.regexp_eatUnicodePropertyName(e25) && e25.eat(61)) {
    var r2 = e25.lastStringValue;
    if (this.regexp_eatUnicodePropertyValue(e25)) {
      var n2 = e25.lastStringValue;
      return this.regexp_validateUnicodePropertyNameAndValue(e25, r2, n2), true;
    }
  }
  if (e25.pos = t3, this.regexp_eatLoneUnicodePropertyNameOrValue(e25)) {
    var i2 = e25.lastStringValue;
    return this.regexp_validateUnicodePropertyNameOrValue(e25, i2), true;
  }
  return false;
}, Rd.regexp_validateUnicodePropertyNameAndValue = function(e25, t3, r2) {
  Hh(e25.unicodeProperties.nonBinary, t3) || e25.raise("Invalid property name"), e25.unicodeProperties.nonBinary[t3].test(r2) || e25.raise("Invalid property value");
}, Rd.regexp_validateUnicodePropertyNameOrValue = function(e25, t3) {
  e25.unicodeProperties.binary.test(t3) || e25.raise("Invalid property name");
}, Rd.regexp_eatUnicodePropertyName = function(e25) {
  var t3 = 0;
  for (e25.lastStringValue = ""; Wd(t3 = e25.current()); ) e25.lastStringValue += Vd(t3), e25.advance();
  return "" !== e25.lastStringValue;
}, Rd.regexp_eatUnicodePropertyValue = function(e25) {
  var t3 = 0;
  for (e25.lastStringValue = ""; $d(t3 = e25.current()); ) e25.lastStringValue += Vd(t3), e25.advance();
  return "" !== e25.lastStringValue;
}, Rd.regexp_eatLoneUnicodePropertyNameOrValue = function(e25) {
  return this.regexp_eatUnicodePropertyValue(e25);
}, Rd.regexp_eatCharacterClass = function(e25) {
  if (e25.eat(91)) {
    if (e25.eat(94), this.regexp_classRanges(e25), e25.eat(93)) return true;
    e25.raise("Unterminated character class");
  }
  return false;
}, Rd.regexp_classRanges = function(e25) {
  for (; this.regexp_eatClassAtom(e25); ) {
    var t3 = e25.lastIntValue;
    if (e25.eat(45) && this.regexp_eatClassAtom(e25)) {
      var r2 = e25.lastIntValue;
      !e25.switchU || -1 !== t3 && -1 !== r2 || e25.raise("Invalid character class"), -1 !== t3 && -1 !== r2 && t3 > r2 && e25.raise("Range out of order in character class");
    }
  }
}, Rd.regexp_eatClassAtom = function(e25) {
  var t3 = e25.pos;
  if (e25.eat(92)) {
    if (this.regexp_eatClassEscape(e25)) return true;
    if (e25.switchU) {
      var r2 = e25.current();
      (99 === r2 || Kd(r2)) && e25.raise("Invalid class escape"), e25.raise("Invalid escape");
    }
    e25.pos = t3;
  }
  var n2 = e25.current();
  return 93 !== n2 && (e25.lastIntValue = n2, e25.advance(), true);
}, Rd.regexp_eatClassEscape = function(e25) {
  var t3 = e25.pos;
  if (e25.eat(98)) return e25.lastIntValue = 8, true;
  if (e25.switchU && e25.eat(45)) return e25.lastIntValue = 45, true;
  if (!e25.switchU && e25.eat(99)) {
    if (this.regexp_eatClassControlLetter(e25)) return true;
    e25.pos = t3;
  }
  return this.regexp_eatCharacterClassEscape(e25) || this.regexp_eatCharacterEscape(e25);
}, Rd.regexp_eatClassControlLetter = function(e25) {
  var t3 = e25.current();
  return !(!Gd(t3) && 95 !== t3) && (e25.lastIntValue = t3 % 32, e25.advance(), true);
}, Rd.regexp_eatHexEscapeSequence = function(e25) {
  var t3 = e25.pos;
  if (e25.eat(120)) {
    if (this.regexp_eatFixedHexDigits(e25, 2)) return true;
    e25.switchU && e25.raise("Invalid escape"), e25.pos = t3;
  }
  return false;
}, Rd.regexp_eatDecimalDigits = function(e25) {
  var t3 = e25.pos, r2 = 0;
  for (e25.lastIntValue = 0; Gd(r2 = e25.current()); ) e25.lastIntValue = 10 * e25.lastIntValue + (r2 - 48), e25.advance();
  return e25.pos !== t3;
}, Rd.regexp_eatHexDigits = function(e25) {
  var t3 = e25.pos, r2 = 0;
  for (e25.lastIntValue = 0; zd(r2 = e25.current()); ) e25.lastIntValue = 16 * e25.lastIntValue + Hd(r2), e25.advance();
  return e25.pos !== t3;
}, Rd.regexp_eatLegacyOctalEscapeSequence = function(e25) {
  if (this.regexp_eatOctalDigit(e25)) {
    var t3 = e25.lastIntValue;
    if (this.regexp_eatOctalDigit(e25)) {
      var r2 = e25.lastIntValue;
      t3 <= 3 && this.regexp_eatOctalDigit(e25) ? e25.lastIntValue = 64 * t3 + 8 * r2 + e25.lastIntValue : e25.lastIntValue = 8 * t3 + r2;
    } else e25.lastIntValue = t3;
    return true;
  }
  return false;
}, Rd.regexp_eatOctalDigit = function(e25) {
  var t3 = e25.current();
  return Kd(t3) ? (e25.lastIntValue = t3 - 48, e25.advance(), true) : (e25.lastIntValue = 0, false);
}, Rd.regexp_eatFixedHexDigits = function(e25, t3) {
  var r2 = e25.pos;
  e25.lastIntValue = 0;
  for (var n2 = 0; n2 < t3; ++n2) {
    var i2 = e25.current();
    if (!zd(i2)) return e25.pos = r2, false;
    e25.lastIntValue = 16 * e25.lastIntValue + Hd(i2), e25.advance();
  }
  return true;
};
var Jd = function(e25) {
  this.type = e25.type, this.value = e25.value, this.start = e25.start, this.end = e25.end, e25.options.locations && (this.loc = new Xh(e25, e25.startLoc, e25.endLoc)), e25.options.ranges && (this.range = [e25.start, e25.end]);
};
var Qd = od.prototype;
function Xd(e25) {
  return e25 <= 65535 ? String.fromCharCode(e25) : (e25 -= 65536, String.fromCharCode(55296 + (e25 >> 10), 56320 + (1023 & e25)));
}
Qd.next = function() {
  this.options.onToken && this.options.onToken(new Jd(this)), this.lastTokEnd = this.end, this.lastTokStart = this.start, this.lastTokEndLoc = this.endLoc, this.lastTokStartLoc = this.startLoc, this.nextToken();
}, Qd.getToken = function() {
  return this.next(), new Jd(this);
}, "undefined" != typeof Symbol && (Qd[Symbol.iterator] = function() {
  var e25 = this;
  return { next: function() {
    var t3 = e25.getToken();
    return { done: t3.type === Rh.eof, value: t3 };
  } };
}), Qd.curContext = function() {
  return this.context[this.context.length - 1];
}, Qd.nextToken = function() {
  var e25 = this.curContext();
  return e25 && e25.preserveSpace || this.skipSpace(), this.start = this.pos, this.options.locations && (this.startLoc = this.curPosition()), this.pos >= this.input.length ? this.finishToken(Rh.eof) : e25.override ? e25.override(this) : void this.readToken(this.fullCharCodeAtPos());
}, Qd.readToken = function(e25) {
  return Th(e25, this.options.ecmaVersion >= 6) || 92 === e25 ? this.readWord() : this.getTokenFromCode(e25);
}, Qd.fullCharCodeAtPos = function() {
  var e25 = this.input.charCodeAt(this.pos);
  return e25 <= 55295 || e25 >= 57344 ? e25 : (e25 << 10) + this.input.charCodeAt(this.pos + 1) - 56613888;
}, Qd.skipBlockComment = function() {
  var e25, t3 = this.options.onComment && this.curPosition(), r2 = this.pos, n2 = this.input.indexOf("*/", this.pos += 2);
  if (-1 === n2 && this.raise(this.pos - 2, "Unterminated comment"), this.pos = n2 + 2, this.options.locations) for (Vh.lastIndex = r2; (e25 = Vh.exec(this.input)) && e25.index < this.pos; ) ++this.curLine, this.lineStart = e25.index + e25[0].length;
  this.options.onComment && this.options.onComment(true, this.input.slice(r2 + 2, n2), r2, this.pos, t3, this.curPosition());
}, Qd.skipLineComment = function(e25) {
  for (var t3 = this.pos, r2 = this.options.onComment && this.curPosition(), n2 = this.input.charCodeAt(this.pos += e25); this.pos < this.input.length && !Uh(n2); ) n2 = this.input.charCodeAt(++this.pos);
  this.options.onComment && this.options.onComment(false, this.input.slice(t3 + e25, this.pos), t3, this.pos, r2, this.curPosition());
}, Qd.skipSpace = function() {
  e: for (; this.pos < this.input.length; ) {
    var e25 = this.input.charCodeAt(this.pos);
    switch (e25) {
      case 32:
      case 160:
        ++this.pos;
        break;
      case 13:
        10 === this.input.charCodeAt(this.pos + 1) && ++this.pos;
      case 10:
      case 8232:
      case 8233:
        ++this.pos, this.options.locations && (++this.curLine, this.lineStart = this.pos);
        break;
      case 47:
        switch (this.input.charCodeAt(this.pos + 1)) {
          case 42:
            this.skipBlockComment();
            break;
          case 47:
            this.skipLineComment(2);
            break;
          default:
            break e;
        }
        break;
      default:
        if (!(e25 > 8 && e25 < 14 || e25 >= 5760 && qh.test(String.fromCharCode(e25)))) break e;
        ++this.pos;
    }
  }
}, Qd.finishToken = function(e25, t3) {
  this.end = this.pos, this.options.locations && (this.endLoc = this.curPosition());
  var r2 = this.type;
  this.type = e25, this.value = t3, this.updateContext(r2);
}, Qd.readToken_dot = function() {
  var e25 = this.input.charCodeAt(this.pos + 1);
  if (e25 >= 48 && e25 <= 57) return this.readNumber(true);
  var t3 = this.input.charCodeAt(this.pos + 2);
  return this.options.ecmaVersion >= 6 && 46 === e25 && 46 === t3 ? (this.pos += 3, this.finishToken(Rh.ellipsis)) : (++this.pos, this.finishToken(Rh.dot));
}, Qd.readToken_slash = function() {
  var e25 = this.input.charCodeAt(this.pos + 1);
  return this.exprAllowed ? (++this.pos, this.readRegexp()) : 61 === e25 ? this.finishOp(Rh.assign, 2) : this.finishOp(Rh.slash, 1);
}, Qd.readToken_mult_modulo_exp = function(e25) {
  var t3 = this.input.charCodeAt(this.pos + 1), r2 = 1, n2 = 42 === e25 ? Rh.star : Rh.modulo;
  return this.options.ecmaVersion >= 7 && 42 === e25 && 42 === t3 && (++r2, n2 = Rh.starstar, t3 = this.input.charCodeAt(this.pos + 2)), 61 === t3 ? this.finishOp(Rh.assign, r2 + 1) : this.finishOp(n2, r2);
}, Qd.readToken_pipe_amp = function(e25) {
  var t3 = this.input.charCodeAt(this.pos + 1);
  return t3 === e25 ? this.finishOp(124 === e25 ? Rh.logicalOR : Rh.logicalAND, 2) : 61 === t3 ? this.finishOp(Rh.assign, 2) : this.finishOp(124 === e25 ? Rh.bitwiseOR : Rh.bitwiseAND, 1);
}, Qd.readToken_caret = function() {
  return 61 === this.input.charCodeAt(this.pos + 1) ? this.finishOp(Rh.assign, 2) : this.finishOp(Rh.bitwiseXOR, 1);
}, Qd.readToken_plus_min = function(e25) {
  var t3 = this.input.charCodeAt(this.pos + 1);
  return t3 === e25 ? 45 !== t3 || this.inModule || 62 !== this.input.charCodeAt(this.pos + 2) || 0 !== this.lastTokEnd && !Mh.test(this.input.slice(this.lastTokEnd, this.pos)) ? this.finishOp(Rh.incDec, 2) : (this.skipLineComment(3), this.skipSpace(), this.nextToken()) : 61 === t3 ? this.finishOp(Rh.assign, 2) : this.finishOp(Rh.plusMin, 1);
}, Qd.readToken_lt_gt = function(e25) {
  var t3 = this.input.charCodeAt(this.pos + 1), r2 = 1;
  return t3 === e25 ? (r2 = 62 === e25 && 62 === this.input.charCodeAt(this.pos + 2) ? 3 : 2, 61 === this.input.charCodeAt(this.pos + r2) ? this.finishOp(Rh.assign, r2 + 1) : this.finishOp(Rh.bitShift, r2)) : 33 !== t3 || 60 !== e25 || this.inModule || 45 !== this.input.charCodeAt(this.pos + 2) || 45 !== this.input.charCodeAt(this.pos + 3) ? (61 === t3 && (r2 = 2), this.finishOp(Rh.relational, r2)) : (this.skipLineComment(4), this.skipSpace(), this.nextToken());
}, Qd.readToken_eq_excl = function(e25) {
  var t3 = this.input.charCodeAt(this.pos + 1);
  return 61 === t3 ? this.finishOp(Rh.equality, 61 === this.input.charCodeAt(this.pos + 2) ? 3 : 2) : 61 === e25 && 62 === t3 && this.options.ecmaVersion >= 6 ? (this.pos += 2, this.finishToken(Rh.arrow)) : this.finishOp(61 === e25 ? Rh.eq : Rh.prefix, 1);
}, Qd.getTokenFromCode = function(e25) {
  switch (e25) {
    case 46:
      return this.readToken_dot();
    case 40:
      return ++this.pos, this.finishToken(Rh.parenL);
    case 41:
      return ++this.pos, this.finishToken(Rh.parenR);
    case 59:
      return ++this.pos, this.finishToken(Rh.semi);
    case 44:
      return ++this.pos, this.finishToken(Rh.comma);
    case 91:
      return ++this.pos, this.finishToken(Rh.bracketL);
    case 93:
      return ++this.pos, this.finishToken(Rh.bracketR);
    case 123:
      return ++this.pos, this.finishToken(Rh.braceL);
    case 125:
      return ++this.pos, this.finishToken(Rh.braceR);
    case 58:
      return ++this.pos, this.finishToken(Rh.colon);
    case 63:
      return ++this.pos, this.finishToken(Rh.question);
    case 96:
      if (this.options.ecmaVersion < 6) break;
      return ++this.pos, this.finishToken(Rh.backQuote);
    case 48:
      var t3 = this.input.charCodeAt(this.pos + 1);
      if (120 === t3 || 88 === t3) return this.readRadixNumber(16);
      if (this.options.ecmaVersion >= 6) {
        if (111 === t3 || 79 === t3) return this.readRadixNumber(8);
        if (98 === t3 || 66 === t3) return this.readRadixNumber(2);
      }
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      return this.readNumber(false);
    case 34:
    case 39:
      return this.readString(e25);
    case 47:
      return this.readToken_slash();
    case 37:
    case 42:
      return this.readToken_mult_modulo_exp(e25);
    case 124:
    case 38:
      return this.readToken_pipe_amp(e25);
    case 94:
      return this.readToken_caret();
    case 43:
    case 45:
      return this.readToken_plus_min(e25);
    case 60:
    case 62:
      return this.readToken_lt_gt(e25);
    case 61:
    case 33:
      return this.readToken_eq_excl(e25);
    case 126:
      return this.finishOp(Rh.prefix, 1);
  }
  this.raise(this.pos, "Unexpected character '" + Xd(e25) + "'");
}, Qd.finishOp = function(e25, t3) {
  var r2 = this.input.slice(this.pos, this.pos + t3);
  return this.pos += t3, this.finishToken(e25, r2);
}, Qd.readRegexp = function() {
  for (var e25, t3, r2 = this.pos; ; ) {
    this.pos >= this.input.length && this.raise(r2, "Unterminated regular expression");
    var n2 = this.input.charAt(this.pos);
    if (Mh.test(n2) && this.raise(r2, "Unterminated regular expression"), e25) e25 = false;
    else {
      if ("[" === n2) t3 = true;
      else if ("]" === n2 && t3) t3 = false;
      else if ("/" === n2 && !t3) break;
      e25 = "\\" === n2;
    }
    ++this.pos;
  }
  var i2 = this.input.slice(r2, this.pos);
  ++this.pos;
  var a2 = this.pos, o2 = this.readWord1();
  this.containsEsc && this.unexpected(a2);
  var s2 = this.regexpState || (this.regexpState = new Md(this));
  s2.reset(r2, i2, o2), this.validateRegExpFlags(s2), this.validateRegExpPattern(s2);
  var u2 = null;
  try {
    u2 = new RegExp(i2, o2);
  } catch (e26) {
  }
  return this.finishToken(Rh.regexp, { pattern: i2, flags: o2, value: u2 });
}, Qd.readInt = function(e25, t3) {
  for (var r2 = this.pos, n2 = 0, i2 = 0, a2 = null == t3 ? 1 / 0 : t3; i2 < a2; ++i2) {
    var o2 = this.input.charCodeAt(this.pos), s2 = void 0;
    if ((s2 = o2 >= 97 ? o2 - 97 + 10 : o2 >= 65 ? o2 - 65 + 10 : o2 >= 48 && o2 <= 57 ? o2 - 48 : 1 / 0) >= e25) break;
    ++this.pos, n2 = n2 * e25 + s2;
  }
  return this.pos === r2 || null != t3 && this.pos - r2 !== t3 ? null : n2;
}, Qd.readRadixNumber = function(e25) {
  var t3 = this.pos;
  this.pos += 2;
  var r2 = this.readInt(e25);
  return null == r2 && this.raise(this.start + 2, "Expected number in radix " + e25), this.options.ecmaVersion >= 11 && 110 === this.input.charCodeAt(this.pos) ? (r2 = "undefined" != typeof BigInt ? BigInt(this.input.slice(t3, this.pos)) : null, ++this.pos) : Th(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(Rh.num, r2);
}, Qd.readNumber = function(e25) {
  var t3 = this.pos;
  e25 || null !== this.readInt(10) || this.raise(t3, "Invalid number");
  var r2 = this.pos - t3 >= 2 && 48 === this.input.charCodeAt(t3);
  r2 && this.strict && this.raise(t3, "Invalid number"), r2 && /[89]/.test(this.input.slice(t3, this.pos)) && (r2 = false);
  var n2 = this.input.charCodeAt(this.pos);
  if (!r2 && !e25 && this.options.ecmaVersion >= 11 && 110 === n2) {
    var i2 = this.input.slice(t3, this.pos), a2 = "undefined" != typeof BigInt ? BigInt(i2) : null;
    return ++this.pos, Th(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(Rh.num, a2);
  }
  46 !== n2 || r2 || (++this.pos, this.readInt(10), n2 = this.input.charCodeAt(this.pos)), 69 !== n2 && 101 !== n2 || r2 || (43 !== (n2 = this.input.charCodeAt(++this.pos)) && 45 !== n2 || ++this.pos, null === this.readInt(10) && this.raise(t3, "Invalid number")), Th(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
  var o2 = this.input.slice(t3, this.pos), s2 = r2 ? parseInt(o2, 8) : parseFloat(o2);
  return this.finishToken(Rh.num, s2);
}, Qd.readCodePoint = function() {
  var e25;
  if (123 === this.input.charCodeAt(this.pos)) {
    this.options.ecmaVersion < 6 && this.unexpected();
    var t3 = ++this.pos;
    e25 = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos), ++this.pos, e25 > 1114111 && this.invalidStringToken(t3, "Code point out of bounds");
  } else e25 = this.readHexChar(4);
  return e25;
}, Qd.readString = function(e25) {
  for (var t3 = "", r2 = ++this.pos; ; ) {
    this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
    var n2 = this.input.charCodeAt(this.pos);
    if (n2 === e25) break;
    92 === n2 ? (t3 += this.input.slice(r2, this.pos), t3 += this.readEscapedChar(false), r2 = this.pos) : (Uh(n2, this.options.ecmaVersion >= 10) && this.raise(this.start, "Unterminated string constant"), ++this.pos);
  }
  return t3 += this.input.slice(r2, this.pos++), this.finishToken(Rh.string, t3);
};
var Yd = {};
Qd.tryReadTemplateToken = function() {
  this.inTemplateElement = true;
  try {
    this.readTmplToken();
  } catch (e25) {
    if (e25 !== Yd) throw e25;
    this.readInvalidTemplateToken();
  }
  this.inTemplateElement = false;
}, Qd.invalidStringToken = function(e25, t3) {
  if (this.inTemplateElement && this.options.ecmaVersion >= 9) throw Yd;
  this.raise(e25, t3);
}, Qd.readTmplToken = function() {
  for (var e25 = "", t3 = this.pos; ; ) {
    this.pos >= this.input.length && this.raise(this.start, "Unterminated template");
    var r2 = this.input.charCodeAt(this.pos);
    if (96 === r2 || 36 === r2 && 123 === this.input.charCodeAt(this.pos + 1)) return this.pos !== this.start || this.type !== Rh.template && this.type !== Rh.invalidTemplate ? (e25 += this.input.slice(t3, this.pos), this.finishToken(Rh.template, e25)) : 36 === r2 ? (this.pos += 2, this.finishToken(Rh.dollarBraceL)) : (++this.pos, this.finishToken(Rh.backQuote));
    if (92 === r2) e25 += this.input.slice(t3, this.pos), e25 += this.readEscapedChar(true), t3 = this.pos;
    else if (Uh(r2)) {
      switch (e25 += this.input.slice(t3, this.pos), ++this.pos, r2) {
        case 13:
          10 === this.input.charCodeAt(this.pos) && ++this.pos;
        case 10:
          e25 += "\n";
          break;
        default:
          e25 += String.fromCharCode(r2);
      }
      this.options.locations && (++this.curLine, this.lineStart = this.pos), t3 = this.pos;
    } else ++this.pos;
  }
}, Qd.readInvalidTemplateToken = function() {
  for (; this.pos < this.input.length; this.pos++) switch (this.input[this.pos]) {
    case "\\":
      ++this.pos;
      break;
    case "$":
      if ("{" !== this.input[this.pos + 1]) break;
    case "`":
      return this.finishToken(Rh.invalidTemplate, this.input.slice(this.start, this.pos));
  }
  this.raise(this.start, "Unterminated template");
}, Qd.readEscapedChar = function(e25) {
  var t3 = this.input.charCodeAt(++this.pos);
  switch (++this.pos, t3) {
    case 110:
      return "\n";
    case 114:
      return "\r";
    case 120:
      return String.fromCharCode(this.readHexChar(2));
    case 117:
      return Xd(this.readCodePoint());
    case 116:
      return "	";
    case 98:
      return "\b";
    case 118:
      return "\v";
    case 102:
      return "\f";
    case 13:
      10 === this.input.charCodeAt(this.pos) && ++this.pos;
    case 10:
      return this.options.locations && (this.lineStart = this.pos, ++this.curLine), "";
    default:
      if (t3 >= 48 && t3 <= 55) {
        var r2 = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0], n2 = parseInt(r2, 8);
        return n2 > 255 && (r2 = r2.slice(0, -1), n2 = parseInt(r2, 8)), this.pos += r2.length - 1, t3 = this.input.charCodeAt(this.pos), "0" === r2 && 56 !== t3 && 57 !== t3 || !this.strict && !e25 || this.invalidStringToken(this.pos - 1 - r2.length, e25 ? "Octal literal in template string" : "Octal literal in strict mode"), String.fromCharCode(n2);
      }
      return Uh(t3) ? "" : String.fromCharCode(t3);
  }
}, Qd.readHexChar = function(e25) {
  var t3 = this.pos, r2 = this.readInt(16, e25);
  return null === r2 && this.invalidStringToken(t3, "Bad character escape sequence"), r2;
}, Qd.readWord1 = function() {
  this.containsEsc = false;
  for (var e25 = "", t3 = true, r2 = this.pos, n2 = this.options.ecmaVersion >= 6; this.pos < this.input.length; ) {
    var i2 = this.fullCharCodeAtPos();
    if (Ph(i2, n2)) this.pos += i2 <= 65535 ? 1 : 2;
    else {
      if (92 !== i2) break;
      this.containsEsc = true, e25 += this.input.slice(r2, this.pos);
      var a2 = this.pos;
      117 !== this.input.charCodeAt(++this.pos) && this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"), ++this.pos;
      var o2 = this.readCodePoint();
      (t3 ? Th : Ph)(o2, n2) || this.invalidStringToken(a2, "Invalid Unicode escape"), e25 += Xd(o2), r2 = this.pos;
    }
    t3 = false;
  }
  return e25 + this.input.slice(r2, this.pos);
}, Qd.readWord = function() {
  var e25 = this.readWord1(), t3 = Rh.name;
  return this.keywords.test(e25) && (this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword " + e25), t3 = Nh[e25]), this.finishToken(t3, e25);
};
od.acorn = { Parser: od, version: "6.4.0", defaultOptions: Zh, Position: Qh, SourceLocation: Xh, getLineInfo: Yh, Node: Sd, TokenType: Ih, tokTypes: Rh, keywordTypes: Nh, TokContext: Fd, tokContexts: Ad, isIdentifierChar: Ph, isIdentifierStart: Th, Token: Jd, isNewLine: Uh, lineBreak: Mh, lineBreakG: Vh, nonASCIIwhitespace: qh };
var Zd = n(Object.freeze({ __proto__: null, Node: Sd, Parser: od, Position: Qh, SourceLocation: Xh, TokContext: Fd, Token: Jd, TokenType: Ih, defaultOptions: Zh, getLineInfo: Yh, isIdentifierChar: Ph, isIdentifierStart: Th, isNewLine: Uh, keywordTypes: Nh, lineBreak: Mh, lineBreakG: Vh, nonASCIIwhitespace: qh, parse: function(e25, t3) {
  return od.parse(e25, t3);
}, parseExpressionAt: function(e25, t3, r2) {
  return od.parseExpressionAt(e25, t3, r2);
}, tokContexts: Ad, tokTypes: Rh, tokenizer: function(e25, t3) {
  return od.tokenizer(e25, t3);
}, version: "6.4.0" }));
var em = r(function(e25) {
  var t3 = /^[\da-fA-F]+$/, r2 = /^\d+$/, n2 = /* @__PURE__ */ new WeakMap();
  function i2(e26) {
    e26 = e26.Parser.acorn || e26;
    var t4 = n2.get(e26);
    if (!t4) {
      var r3 = e26.tokTypes, i3 = e26.TokContext, a2 = e26.TokenType, o3 = new i3("<tag", false), s2 = new i3("</tag", false), u2 = new i3("<tag>...</tag>", true, true), c2 = { tc_oTag: o3, tc_cTag: s2, tc_expr: u2 }, l2 = { jsxName: new a2("jsxName"), jsxText: new a2("jsxText", { beforeExpr: true }), jsxTagStart: new a2("jsxTagStart"), jsxTagEnd: new a2("jsxTagEnd") };
      l2.jsxTagStart.updateContext = function() {
        this.context.push(u2), this.context.push(o3), this.exprAllowed = false;
      }, l2.jsxTagEnd.updateContext = function(e27) {
        var t5 = this.context.pop();
        t5 === o3 && e27 === r3.slash || t5 === s2 ? (this.context.pop(), this.exprAllowed = this.curContext() === u2) : this.exprAllowed = true;
      }, t4 = { tokContexts: c2, tokTypes: l2 }, n2.set(e26, t4);
    }
    return t4;
  }
  function o2(e26) {
    return e26 ? "JSXIdentifier" === e26.type ? e26.name : "JSXNamespacedName" === e26.type ? e26.namespace.name + ":" + e26.name.name : "JSXMemberExpression" === e26.type ? o2(e26.object) + "." + o2(e26.property) : void 0 : e26;
  }
  e25.exports = function(e26) {
    return e26 = e26 || {}, function(n3) {
      return function(e27, n4) {
        var u2 = n4.acorn || Zd, c2 = i2(u2), l2 = u2.tokTypes, p2 = c2.tokTypes, d2 = u2.tokContexts, m2 = c2.tokContexts.tc_oTag, g2 = c2.tokContexts.tc_cTag, y2 = c2.tokContexts.tc_expr, b2 = u2.isNewLine, E2 = u2.isIdentifierStart, C3 = u2.isIdentifierChar;
        return function(n5) {
          function i3() {
            return a(this, i3), v(this, h(i3).apply(this, arguments));
          }
          return f(i3, n5), s(i3, [{ key: "jsx_readToken", value: function() {
            for (var e28 = "", t4 = this.pos; ; ) {
              this.pos >= this.input.length && this.raise(this.start, "Unterminated JSX contents");
              var r3 = this.input.charCodeAt(this.pos);
              switch (r3) {
                case 60:
                case 123:
                  return this.pos === this.start ? 60 === r3 && this.exprAllowed ? (++this.pos, this.finishToken(p2.jsxTagStart)) : this.getTokenFromCode(r3) : (e28 += this.input.slice(t4, this.pos), this.finishToken(p2.jsxText, e28));
                case 38:
                  e28 += this.input.slice(t4, this.pos), e28 += this.jsx_readEntity(), t4 = this.pos;
                  break;
                default:
                  b2(r3) ? (e28 += this.input.slice(t4, this.pos), e28 += this.jsx_readNewLine(true), t4 = this.pos) : ++this.pos;
              }
            }
          } }, { key: "jsx_readNewLine", value: function(e28) {
            var t4, r3 = this.input.charCodeAt(this.pos);
            return ++this.pos, 13 === r3 && 10 === this.input.charCodeAt(this.pos) ? (++this.pos, t4 = e28 ? "\n" : "\r\n") : t4 = String.fromCharCode(r3), this.options.locations && (++this.curLine, this.lineStart = this.pos), t4;
          } }, { key: "jsx_readString", value: function(e28) {
            for (var t4 = "", r3 = ++this.pos; ; ) {
              this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
              var n6 = this.input.charCodeAt(this.pos);
              if (n6 === e28) break;
              38 === n6 ? (t4 += this.input.slice(r3, this.pos), t4 += this.jsx_readEntity(), r3 = this.pos) : b2(n6) ? (t4 += this.input.slice(r3, this.pos), t4 += this.jsx_readNewLine(false), r3 = this.pos) : ++this.pos;
            }
            return t4 += this.input.slice(r3, this.pos++), this.finishToken(l2.string, t4);
          } }, { key: "jsx_readEntity", value: function() {
            var e28, n6 = "", i4 = 0, a2 = this.input[this.pos];
            "&" !== a2 && this.raise(this.pos, "Entity must start with an ampersand");
            for (var o3 = ++this.pos; this.pos < this.input.length && i4++ < 10; ) {
              if (";" === (a2 = this.input[this.pos++])) {
                "#" === n6[0] ? "x" === n6[1] ? (n6 = n6.substr(2), t3.test(n6) && (e28 = String.fromCharCode(parseInt(n6, 16)))) : (n6 = n6.substr(1), r2.test(n6) && (e28 = String.fromCharCode(parseInt(n6, 10)))) : e28 = vh[n6];
                break;
              }
              n6 += a2;
            }
            return e28 || (this.pos = o3, "&");
          } }, { key: "jsx_readWord", value: function() {
            var e28, t4 = this.pos;
            do {
              e28 = this.input.charCodeAt(++this.pos);
            } while (C3(e28) || 45 === e28);
            return this.finishToken(p2.jsxName, this.input.slice(t4, this.pos));
          } }, { key: "jsx_parseIdentifier", value: function() {
            var e28 = this.startNode();
            return this.type === p2.jsxName ? e28.name = this.value : this.type.keyword ? e28.name = this.type.keyword : this.unexpected(), this.next(), this.finishNode(e28, "JSXIdentifier");
          } }, { key: "jsx_parseNamespacedName", value: function() {
            var t4 = this.start, r3 = this.startLoc, n6 = this.jsx_parseIdentifier();
            if (!e27.allowNamespaces || !this.eat(l2.colon)) return n6;
            var i4 = this.startNodeAt(t4, r3);
            return i4.namespace = n6, i4.name = this.jsx_parseIdentifier(), this.finishNode(i4, "JSXNamespacedName");
          } }, { key: "jsx_parseElementName", value: function() {
            if (this.type === p2.jsxTagEnd) return "";
            var t4 = this.start, r3 = this.startLoc, n6 = this.jsx_parseNamespacedName();
            for (this.type !== l2.dot || "JSXNamespacedName" !== n6.type || e27.allowNamespacedObjects || this.unexpected(); this.eat(l2.dot); ) {
              var i4 = this.startNodeAt(t4, r3);
              i4.object = n6, i4.property = this.jsx_parseIdentifier(), n6 = this.finishNode(i4, "JSXMemberExpression");
            }
            return n6;
          } }, { key: "jsx_parseAttributeValue", value: function() {
            switch (this.type) {
              case l2.braceL:
                var e28 = this.jsx_parseExpressionContainer();
                return "JSXEmptyExpression" === e28.expression.type && this.raise(e28.start, "JSX attributes must only be assigned a non-empty expression"), e28;
              case p2.jsxTagStart:
              case l2.string:
                return this.parseExprAtom();
              default:
                this.raise(this.start, "JSX value should be either an expression or a quoted JSX text");
            }
          } }, { key: "jsx_parseEmptyExpression", value: function() {
            var e28 = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);
            return this.finishNodeAt(e28, "JSXEmptyExpression", this.start, this.startLoc);
          } }, { key: "jsx_parseExpressionContainer", value: function() {
            var e28 = this.startNode();
            return this.next(), e28.expression = this.type === l2.braceR ? this.jsx_parseEmptyExpression() : this.parseExpression(), this.expect(l2.braceR), this.finishNode(e28, "JSXExpressionContainer");
          } }, { key: "jsx_parseAttribute", value: function() {
            var e28 = this.startNode();
            return this.eat(l2.braceL) ? (this.expect(l2.ellipsis), e28.argument = this.parseMaybeAssign(), this.expect(l2.braceR), this.finishNode(e28, "JSXSpreadAttribute")) : (e28.name = this.jsx_parseNamespacedName(), e28.value = this.eat(l2.eq) ? this.jsx_parseAttributeValue() : null, this.finishNode(e28, "JSXAttribute"));
          } }, { key: "jsx_parseOpeningElementAt", value: function(e28, t4) {
            var r3 = this.startNodeAt(e28, t4);
            r3.attributes = [];
            var n6 = this.jsx_parseElementName();
            for (n6 && (r3.name = n6); this.type !== l2.slash && this.type !== p2.jsxTagEnd; ) r3.attributes.push(this.jsx_parseAttribute());
            return r3.selfClosing = this.eat(l2.slash), this.expect(p2.jsxTagEnd), this.finishNode(r3, n6 ? "JSXOpeningElement" : "JSXOpeningFragment");
          } }, { key: "jsx_parseClosingElementAt", value: function(e28, t4) {
            var r3 = this.startNodeAt(e28, t4), n6 = this.jsx_parseElementName();
            return n6 && (r3.name = n6), this.expect(p2.jsxTagEnd), this.finishNode(r3, n6 ? "JSXClosingElement" : "JSXClosingFragment");
          } }, { key: "jsx_parseElementAt", value: function(e28, t4) {
            var r3 = this.startNodeAt(e28, t4), n6 = [], i4 = this.jsx_parseOpeningElementAt(e28, t4), a2 = null;
            if (!i4.selfClosing) {
              e: for (; ; ) switch (this.type) {
                case p2.jsxTagStart:
                  if (e28 = this.start, t4 = this.startLoc, this.next(), this.eat(l2.slash)) {
                    a2 = this.jsx_parseClosingElementAt(e28, t4);
                    break e;
                  }
                  n6.push(this.jsx_parseElementAt(e28, t4));
                  break;
                case p2.jsxText:
                  n6.push(this.parseExprAtom());
                  break;
                case l2.braceL:
                  n6.push(this.jsx_parseExpressionContainer());
                  break;
                default:
                  this.unexpected();
              }
              o2(a2.name) !== o2(i4.name) && this.raise(a2.start, "Expected corresponding JSX closing tag for <" + o2(i4.name) + ">");
            }
            var s2 = i4.name ? "Element" : "Fragment";
            return r3["opening" + s2] = i4, r3["closing" + s2] = a2, r3.children = n6, this.type === l2.relational && "<" === this.value && this.raise(this.start, "Adjacent JSX elements must be wrapped in an enclosing tag"), this.finishNode(r3, "JSX" + s2);
          } }, { key: "jsx_parseText", value: function(e28) {
            var t4 = this.parseLiteral(e28);
            return t4.type = "JSXText", t4;
          } }, { key: "jsx_parseElement", value: function() {
            var e28 = this.start, t4 = this.startLoc;
            return this.next(), this.jsx_parseElementAt(e28, t4);
          } }, { key: "parseExprAtom", value: function(e28) {
            return this.type === p2.jsxText ? this.jsx_parseText(this.value) : this.type === p2.jsxTagStart ? this.jsx_parseElement() : x(h(i3.prototype), "parseExprAtom", this).call(this, e28);
          } }, { key: "readToken", value: function(e28) {
            var t4 = this.curContext();
            if (t4 === y2) return this.jsx_readToken();
            if (t4 === m2 || t4 === g2) {
              if (E2(e28)) return this.jsx_readWord();
              if (62 == e28) return ++this.pos, this.finishToken(p2.jsxTagEnd);
              if ((34 === e28 || 39 === e28) && t4 == m2) return this.jsx_readString(e28);
            }
            return 60 === e28 && this.exprAllowed && 33 !== this.input.charCodeAt(this.pos + 1) ? (++this.pos, this.finishToken(p2.jsxTagStart)) : x(h(i3.prototype), "readToken", this).call(this, e28);
          } }, { key: "updateContext", value: function(e28) {
            if (this.type == l2.braceL) {
              var t4 = this.curContext();
              t4 == m2 ? this.context.push(d2.b_expr) : t4 == y2 ? this.context.push(d2.b_tmpl) : x(h(i3.prototype), "updateContext", this).call(this, e28), this.exprAllowed = true;
            } else {
              if (this.type !== l2.slash || e28 !== p2.jsxTagStart) return x(h(i3.prototype), "updateContext", this).call(this, e28);
              this.context.length -= 2, this.context.push(g2), this.exprAllowed = false;
            }
          } }], [{ key: "acornJsx", get: function() {
            return c2;
          } }]), i3;
        }(n4);
      }({ allowNamespaces: false !== e26.allowNamespaces, allowNamespacedObjects: !!e26.allowNamespacedObjects }, n3);
    };
  }, Object.defineProperty(e25.exports, "tokTypes", { get: function() {
    return i2(Zd).tokTypes;
  }, configurable: true, enumerable: true });
});
var tm = { AssignmentExpression: "AssignmentExpression", AssignmentPattern: "AssignmentPattern", ArrayExpression: "ArrayExpression", ArrayPattern: "ArrayPattern", ArrowFunctionExpression: "ArrowFunctionExpression", AwaitExpression: "AwaitExpression", BlockStatement: "BlockStatement", BinaryExpression: "BinaryExpression", BreakStatement: "BreakStatement", CallExpression: "CallExpression", CatchClause: "CatchClause", ClassBody: "ClassBody", ClassDeclaration: "ClassDeclaration", ClassExpression: "ClassExpression", ConditionalExpression: "ConditionalExpression", ContinueStatement: "ContinueStatement", DoWhileStatement: "DoWhileStatement", DebuggerStatement: "DebuggerStatement", EmptyStatement: "EmptyStatement", ExpressionStatement: "ExpressionStatement", ForStatement: "ForStatement", ForInStatement: "ForInStatement", ForOfStatement: "ForOfStatement", FunctionDeclaration: "FunctionDeclaration", FunctionExpression: "FunctionExpression", Identifier: "Identifier", IfStatement: "IfStatement", Literal: "Literal", LabeledStatement: "LabeledStatement", LogicalExpression: "LogicalExpression", MemberExpression: "MemberExpression", MetaProperty: "MetaProperty", MethodDefinition: "MethodDefinition", NewExpression: "NewExpression", ObjectExpression: "ObjectExpression", ObjectPattern: "ObjectPattern", Program: "Program", Property: "Property", RestElement: "RestElement", ReturnStatement: "ReturnStatement", SequenceExpression: "SequenceExpression", SpreadElement: "SpreadElement", Super: "Super", SwitchCase: "SwitchCase", SwitchStatement: "SwitchStatement", TaggedTemplateExpression: "TaggedTemplateExpression", TemplateElement: "TemplateElement", TemplateLiteral: "TemplateLiteral", ThisExpression: "ThisExpression", ThrowStatement: "ThrowStatement", TryStatement: "TryStatement", UnaryExpression: "UnaryExpression", UpdateExpression: "UpdateExpression", VariableDeclaration: "VariableDeclaration", VariableDeclarator: "VariableDeclarator", WhileStatement: "WhileStatement", WithStatement: "WithStatement", YieldExpression: "YieldExpression", JSXIdentifier: "JSXIdentifier", JSXNamespacedName: "JSXNamespacedName", JSXMemberExpression: "JSXMemberExpression", JSXEmptyExpression: "JSXEmptyExpression", JSXExpressionContainer: "JSXExpressionContainer", JSXElement: "JSXElement", JSXClosingElement: "JSXClosingElement", JSXOpeningElement: "JSXOpeningElement", JSXAttribute: "JSXAttribute", JSXSpreadAttribute: "JSXSpreadAttribute", JSXText: "JSXText", ExportDefaultDeclaration: "ExportDefaultDeclaration", ExportNamedDeclaration: "ExportNamedDeclaration", ExportAllDeclaration: "ExportAllDeclaration", ExportSpecifier: "ExportSpecifier", ImportDeclaration: "ImportDeclaration", ImportSpecifier: "ImportSpecifier", ImportDefaultSpecifier: "ImportDefaultSpecifier", ImportNamespaceSpecifier: "ImportNamespaceSpecifier" };
var rm2 = { Boolean: "Boolean", EOF: "<end>", Identifier: "Identifier", Keyword: "Keyword", Null: "Null", Numeric: "Numeric", Punctuator: "Punctuator", String: "String", RegularExpression: "RegularExpression", Template: "Template", JSXIdentifier: "JSXIdentifier", JSXText: "JSXText" };
function nm(e25, t3) {
  this._acornTokTypes = e25, this._tokens = [], this._curlyBrace = null, this._code = t3;
}
nm.prototype = { constructor: nm, translate: function(e25, t3) {
  var r2 = e25.type, n2 = this._acornTokTypes;
  if (r2 === n2.name) e25.type = rm2.Identifier, "static" === e25.value && (e25.type = rm2.Keyword), t3.ecmaVersion > 5 && ("yield" === e25.value || "let" === e25.value) && (e25.type = rm2.Keyword);
  else if (r2 === n2.semi || r2 === n2.comma || r2 === n2.parenL || r2 === n2.parenR || r2 === n2.braceL || r2 === n2.braceR || r2 === n2.dot || r2 === n2.bracketL || r2 === n2.colon || r2 === n2.question || r2 === n2.bracketR || r2 === n2.ellipsis || r2 === n2.arrow || r2 === n2.jsxTagStart || r2 === n2.incDec || r2 === n2.starstar || r2 === n2.jsxTagEnd || r2 === n2.prefix || r2.binop && !r2.keyword || r2.isAssign) e25.type = rm2.Punctuator, e25.value = this._code.slice(e25.start, e25.end);
  else if (r2 === n2.jsxName) e25.type = rm2.JSXIdentifier;
  else if ("jsxText" === r2.label || r2 === n2.jsxAttrValueToken) e25.type = rm2.JSXText;
  else if (r2.keyword) "true" === r2.keyword || "false" === r2.keyword ? e25.type = rm2.Boolean : "null" === r2.keyword ? e25.type = rm2.Null : e25.type = rm2.Keyword;
  else if (r2 === n2.num) e25.type = rm2.Numeric, e25.value = this._code.slice(e25.start, e25.end);
  else if (r2 === n2.string) t3.jsxAttrValueToken ? (t3.jsxAttrValueToken = false, e25.type = rm2.JSXText) : e25.type = rm2.String, e25.value = this._code.slice(e25.start, e25.end);
  else if (r2 === n2.regexp) {
    e25.type = rm2.RegularExpression;
    var i2 = e25.value;
    e25.regex = { flags: i2.flags, pattern: i2.pattern }, e25.value = "/".concat(i2.pattern, "/").concat(i2.flags);
  }
  return e25;
}, onToken: function(e25, t3) {
  var r2 = this, n2 = this._acornTokTypes, i2 = t3.tokens, a2 = this._tokens;
  function o2() {
    i2.push(function(e26, t4) {
      var r3 = e26[0], n3 = e26[e26.length - 1], i3 = { type: rm2.Template, value: t4.slice(r3.start, n3.end) };
      return r3.loc && (i3.loc = { start: r3.loc.start, end: n3.loc.end }), r3.range && (i3.start = r3.range[0], i3.end = n3.range[1], i3.range = [i3.start, i3.end]), i3;
    }(r2._tokens, r2._code)), r2._tokens = [];
  }
  if (e25.type !== n2.eof) {
    if (e25.type === n2.backQuote) return this._curlyBrace && (i2.push(this.translate(this._curlyBrace, t3)), this._curlyBrace = null), a2.push(e25), void (a2.length > 1 && o2());
    if (e25.type === n2.dollarBraceL) return a2.push(e25), void o2();
    if (e25.type === n2.braceR) return this._curlyBrace && i2.push(this.translate(this._curlyBrace, t3)), void (this._curlyBrace = e25);
    if (e25.type === n2.template || e25.type === n2.invalidTemplate) return this._curlyBrace && (a2.push(this._curlyBrace), this._curlyBrace = null), void a2.push(e25);
    this._curlyBrace && (i2.push(this.translate(this._curlyBrace, t3)), this._curlyBrace = null), i2.push(this.translate(e25, t3));
  } else this._curlyBrace && i2.push(this.translate(this._curlyBrace, t3));
} };
var im = nm;
var am = 5;
var om = Symbol("espree's internal state");
var sm = Symbol("espree's esprimaFinishNode");
function um(e25) {
  var t3 = function() {
    var e26 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : am;
    if ("number" != typeof e26) throw new Error("ecmaVersion must be a number. Received value of type ".concat(i(e26), " instead."));
    var t4 = e26;
    switch (t4 >= 2015 && (t4 -= 2009), t4) {
      case 3:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
        return t4;
    }
    throw new Error("Invalid ecmaVersion.");
  }(e25.ecmaVersion), r2 = function() {
    var e26 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "script";
    if ("script" === e26 || "module" === e26) return e26;
    throw new Error("Invalid sourceType.");
  }(e25.sourceType), n2 = true === e25.range, a2 = true === e25.loc;
  if ("module" === r2 && t3 < 6) throw new Error("sourceType 'module' is not supported when ecmaVersion < 2015. Consider adding `{ ecmaVersion: 2015 }` to the parser options.");
  return Object.assign({}, e25, { ecmaVersion: t3, sourceType: r2, ranges: n2, locations: a2 });
}
var cm = function() {
  return function(e25) {
    var t3 = Object.assign({}, e25.acorn.tokTypes);
    return e25.acornJsx && Object.assign(t3, e25.acornJsx.tokTypes), function(r2) {
      function n2(e26, r3) {
        var o2;
        a(this, n2), "object" === i(e26) && null !== e26 || (e26 = {}), "string" == typeof r3 || r3 instanceof String || (r3 = String(r3));
        var s2 = um(e26), u2 = s2.ecmaFeatures || {}, c2 = true === s2.tokens ? new im(t3, r3) : null;
        return (o2 = v(this, h(n2).call(this, { ecmaVersion: s2.ecmaVersion, sourceType: s2.sourceType, ranges: s2.ranges, locations: s2.locations, allowReturnOutsideFunction: Boolean(u2.globalReturn), onToken: function(e27) {
          c2 && c2.onToken(e27, o2[om]), e27.type !== t3.eof && (o2[om].lastToken = e27);
        }, onComment: function(e27, t4, r4, n3, a2, s3) {
          if (o2[om].comments) {
            var u3 = function(e28, t5, r5, n4, a3, o3) {
              var s4 = { type: e28 ? "Block" : "Line", value: t5 };
              return "number" == typeof r5 && (s4.start = r5, s4.end = n4, s4.range = [r5, n4]), "object" === i(a3) && (s4.loc = { start: a3, end: o3 }), s4;
            }(e27, t4, r4, n3, a2, s3);
            o2[om].comments.push(u3);
          }
        } }, r3)))[om] = { tokens: c2 ? [] : null, comments: true === s2.comment ? [] : null, impliedStrict: true === u2.impliedStrict && o2.options.ecmaVersion >= 5, ecmaVersion: o2.options.ecmaVersion, jsxAttrValueToken: false, lastToken: null }, o2;
      }
      return f(n2, r2), s(n2, [{ key: "tokenize", value: function() {
        do {
          this.next();
        } while (this.type !== t3.eof);
        this.next();
        var e26 = this[om], r3 = e26.tokens;
        return e26.comments && (r3.comments = e26.comments), r3;
      } }, { key: "finishNode", value: function() {
        for (var e26, t4 = arguments.length, r3 = new Array(t4), i2 = 0; i2 < t4; i2++) r3[i2] = arguments[i2];
        var a2 = (e26 = x(h(n2.prototype), "finishNode", this)).call.apply(e26, [this].concat(r3));
        return this[sm](a2);
      } }, { key: "finishNodeAt", value: function() {
        for (var e26, t4 = arguments.length, r3 = new Array(t4), i2 = 0; i2 < t4; i2++) r3[i2] = arguments[i2];
        var a2 = (e26 = x(h(n2.prototype), "finishNodeAt", this)).call.apply(e26, [this].concat(r3));
        return this[sm](a2);
      } }, { key: "parse", value: function() {
        var e26 = this[om], t4 = x(h(n2.prototype), "parse", this).call(this);
        return t4.sourceType = this.options.sourceType, e26.comments && (t4.comments = e26.comments), e26.tokens && (t4.tokens = e26.tokens), t4.range && (t4.range[0] = t4.body.length ? t4.body[0].range[0] : t4.range[0], t4.range[1] = e26.lastToken ? e26.lastToken.range[1] : t4.range[1]), t4.loc && (t4.loc.start = t4.body.length ? t4.body[0].loc.start : t4.loc.start, t4.loc.end = e26.lastToken ? e26.lastToken.loc.end : t4.loc.end), t4;
      } }, { key: "parseTopLevel", value: function(e26) {
        return this[om].impliedStrict && (this.strict = true), x(h(n2.prototype), "parseTopLevel", this).call(this, e26);
      } }, { key: "raise", value: function(t4, r3) {
        var n3 = e25.acorn.getLineInfo(this.input, t4), i2 = new SyntaxError(r3);
        throw i2.index = t4, i2.lineNumber = n3.line, i2.column = n3.column + 1, i2;
      } }, { key: "raiseRecoverable", value: function(e26, t4) {
        this.raise(e26, t4);
      } }, { key: "unexpected", value: function(e26) {
        var t4 = "Unexpected token";
        if (null != e26) {
          if (this.pos = e26, this.options.locations) for (; this.pos < this.lineStart; ) this.lineStart = this.input.lastIndexOf("\n", this.lineStart - 2) + 1, --this.curLine;
          this.nextToken();
        }
        this.end > this.start && (t4 += " ".concat(this.input.slice(this.start, this.end))), this.raise(this.start, t4);
      } }, { key: "jsx_readString", value: function(e26) {
        var r3 = x(h(n2.prototype), "jsx_readString", this).call(this, e26);
        return this.type === t3.string && (this[om].jsxAttrValueToken = true), r3;
      } }, { key: sm, value: function(e26) {
        if ("TemplateElement" === e26.type) {
          var t4 = "${" === this.input.slice(e26.end, e26.end + 2);
          e26.range && (e26.range[0]--, e26.range[1] += t4 ? 2 : 1), e26.loc && (e26.loc.start.column--, e26.loc.end.column += t4 ? 2 : 1);
        }
        return e26.type.indexOf("Function") > -1 && !e26.generator && (e26.generator = false), e26;
      } }]), n2;
    }(e25);
  };
};
var lm = "An Esprima-compatible JavaScript parser built on Acorn";
var pm = "Nicholas C. Zakas <nicholas+npm@nczconsulting.com>";
var fm = "https://github.com/eslint/espree";
var hm = ["lib", "espree.js"];
var dm = { node: ">=6.0.0" };
var mm = { url: "http://github.com/eslint/espree.git" };
var gm = { acorn: "^7.1.0", "acorn-jsx": "^5.1.0", "eslint-visitor-keys": "^1.1.0" };
var ym = { browserify: "^16.5.0", chai: "^4.2.0", eslint: "^6.0.1", "eslint-config-eslint": "^5.0.1", "eslint-plugin-node": "^9.1.0", "eslint-release": "^1.0.0", esprima: "latest", "esprima-fb": "^8001.2001.0-dev-harmony-fb", "json-diff": "^0.5.4", leche: "^2.3.0", mocha: "^6.2.0", nyc: "^14.1.1", regenerate: "^1.4.0", shelljs: "^0.3.0", "shelljs-nodecli": "^0.1.1", "unicode-6.3.0": "^0.7.5" };
var vm = ["ast", "ecmascript", "javascript", "parser", "syntax", "acorn"];
var xm = { "generate-regex": "node tools/generate-identifier-regex.js", test: "npm run-script lint && node Makefile.js test", lint: "node Makefile.js lint", browserify: "node Makefile.js browserify", "generate-release": "eslint-generate-release", "generate-alpharelease": "eslint-generate-prerelease alpha", "generate-betarelease": "eslint-generate-prerelease beta", "generate-rcrelease": "eslint-generate-prerelease rc", "publish-release": "eslint-publish-release" };
var bm = { name: "espree", description: lm, author: pm, homepage: fm, main: "espree.js", version: "6.1.2", files: hm, engines: dm, repository: "eslint/espree", bugs: mm, license: "BSD-2-Clause", dependencies: gm, devDependencies: ym, keywords: vm, scripts: xm };
var Em = Object.freeze({ __proto__: null, name: "espree", description: lm, author: pm, homepage: fm, main: "espree.js", version: "6.1.2", files: hm, engines: dm, repository: "eslint/espree", bugs: mm, license: "BSD-2-Clause", dependencies: gm, devDependencies: ym, keywords: vm, scripts: xm, default: bm });
var Cm = n(yh);
var Sm = n(Em);
var km = { _regular: null, _jsx: null, get regular() {
  return null === this._regular && (this._regular = Cm.Parser.extend(cm())), this._regular;
}, get jsx() {
  return null === this._jsx && (this._jsx = Cm.Parser.extend(em(), cm())), this._jsx;
}, get: function(e25) {
  return Boolean(e25 && e25.ecmaFeatures && e25.ecmaFeatures.jsx) ? this.jsx : this.regular;
} };
var Dm = { version: Sm.version, tokenize: function(e25, t3) {
  var r2 = km.get(t3);
  return t3 && true === t3.tokens || (t3 = Object.assign({}, t3, { tokens: true })), new r2(t3, e25).tokenize();
}, parse: function(e25, t3) {
  return new (km.get(t3))(t3, e25).parse();
}, Syntax: function() {
  var e25, t3 = {};
  for (e25 in "function" == typeof Object.create && (t3 = /* @__PURE__ */ Object.create(null)), tm) Object.hasOwnProperty.call(tm, e25) && (t3[e25] = tm[e25]);
  return "function" == typeof Object.freeze && Object.freeze(t3), t3;
}(), VisitorKeys: Lp.KEYS };
var Fm = r(function(t3, r2) {
  (function() {
    var n2, a2 = 200, o2 = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", s2 = "Expected a function", u2 = "__lodash_hash_undefined__", c2 = 500, l2 = "__lodash_placeholder__", p2 = 1, f2 = 2, h2 = 4, d2 = 1, m2 = 2, g2 = 1, y2 = 2, v2 = 4, x2 = 8, b2 = 16, E2 = 32, C3 = 64, S3 = 128, k2 = 256, D2 = 512, F2 = 30, A2 = "...", w2 = 800, _2 = 16, T2 = 1, P2 = 2, I2 = 1 / 0, B2 = 9007199254740991, O2 = 17976931348623157e292, L2 = NaN, N2 = 4294967295, j2 = N2 - 1, R2 = N2 >>> 1, M2 = [["ary", S3], ["bind", g2], ["bindKey", y2], ["curry", x2], ["curryRight", b2], ["flip", D2], ["partial", E2], ["partialRight", C3], ["rearg", k2]], V2 = "[object Arguments]", U2 = "[object Array]", q2 = "[object AsyncFunction]", W2 = "[object Boolean]", $2 = "[object Date]", G2 = "[object DOMException]", z2 = "[object Error]", H2 = "[object Function]", K2 = "[object GeneratorFunction]", J2 = "[object Map]", Q2 = "[object Number]", X2 = "[object Null]", Y2 = "[object Object]", Z2 = "[object Proxy]", ee2 = "[object RegExp]", te2 = "[object Set]", re2 = "[object String]", ne2 = "[object Symbol]", ie4 = "[object Undefined]", ae2 = "[object WeakMap]", oe2 = "[object WeakSet]", se2 = "[object ArrayBuffer]", ue2 = "[object DataView]", ce2 = "[object Float32Array]", le2 = "[object Float64Array]", pe2 = "[object Int8Array]", fe2 = "[object Int16Array]", he2 = "[object Int32Array]", de2 = "[object Uint8Array]", me2 = "[object Uint8ClampedArray]", ge2 = "[object Uint16Array]", ye2 = "[object Uint32Array]", ve2 = /\b__p \+= '';/g, xe2 = /\b(__p \+=) '' \+/g, be2 = /(__e\(.*?\)|\b__t\)) \+\n'';/g, Ee2 = /&(?:amp|lt|gt|quot|#39);/g, Ce2 = /[&<>"']/g, Se2 = RegExp(Ee2.source), ke2 = RegExp(Ce2.source), De2 = /<%-([\s\S]+?)%>/g, Fe2 = /<%([\s\S]+?)%>/g, Ae2 = /<%=([\s\S]+?)%>/g, we2 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, _e2 = /^\w*$/, Te2 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, Pe2 = /[\\^$.*+?()[\]{}|]/g, Ie2 = RegExp(Pe2.source), Be2 = /^\s+|\s+$/g, Oe2 = /^\s+/, Le2 = /\s+$/, Ne2 = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, je2 = /\{\n\/\* \[wrapped with (.+)\] \*/, Re2 = /,? & /, Me2 = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g, Ve2 = /\\(\\)?/g, Ue2 = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g, qe2 = /\w*$/, We2 = /^[-+]0x[0-9a-f]+$/i, $e2 = /^0b[01]+$/i, Ge2 = /^\[object .+?Constructor\]$/, ze2 = /^0o[0-7]+$/i, He2 = /^(?:0|[1-9]\d*)$/, Ke2 = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g, Je2 = /($^)/, Qe2 = /['\n\r\u2028\u2029\\]/g, Xe2 = "\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff", Ye2 = "\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", Ze2 = "[\\ud800-\\udfff]", et2 = "[" + Ye2 + "]", tt2 = "[" + Xe2 + "]", rt2 = "\\d+", nt2 = "[\\u2700-\\u27bf]", it2 = "[a-z\\xdf-\\xf6\\xf8-\\xff]", at2 = "[^\\ud800-\\udfff" + Ye2 + rt2 + "\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]", ot2 = "\\ud83c[\\udffb-\\udfff]", st2 = "[^\\ud800-\\udfff]", ut2 = "(?:\\ud83c[\\udde6-\\uddff]){2}", ct2 = "[\\ud800-\\udbff][\\udc00-\\udfff]", lt3 = "[A-Z\\xc0-\\xd6\\xd8-\\xde]", pt2 = "(?:" + it2 + "|" + at2 + ")", ft2 = "(?:" + lt3 + "|" + at2 + ")", ht2 = "(?:" + tt2 + "|" + ot2 + ")?", dt2 = "[\\ufe0e\\ufe0f]?" + ht2 + ("(?:\\u200d(?:" + [st2, ut2, ct2].join("|") + ")[\\ufe0e\\ufe0f]?" + ht2 + ")*"), mt2 = "(?:" + [nt2, ut2, ct2].join("|") + ")" + dt2, gt2 = "(?:" + [st2 + tt2 + "?", tt2, ut2, ct2, Ze2].join("|") + ")", yt2 = RegExp("['\u2019]", "g"), vt = RegExp(tt2, "g"), xt = RegExp(ot2 + "(?=" + ot2 + ")|" + gt2 + dt2, "g"), bt = RegExp([lt3 + "?" + it2 + "+(?:['\u2019](?:d|ll|m|re|s|t|ve))?(?=" + [et2, lt3, "$"].join("|") + ")", ft2 + "+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?(?=" + [et2, lt3 + pt2, "$"].join("|") + ")", lt3 + "?" + pt2 + "+(?:['\u2019](?:d|ll|m|re|s|t|ve))?", lt3 + "+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?", "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rt2, mt2].join("|"), "g"), Et = RegExp("[\\u200d\\ud800-\\udfff" + Xe2 + "\\ufe0e\\ufe0f]"), Ct2 = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/, St2 = ["Array", "Buffer", "DataView", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Map", "Math", "Object", "Promise", "RegExp", "Set", "String", "Symbol", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap", "_", "clearTimeout", "isFinite", "parseInt", "setTimeout"], kt2 = -1, Dt2 = {};
    Dt2[ce2] = Dt2[le2] = Dt2[pe2] = Dt2[fe2] = Dt2[he2] = Dt2[de2] = Dt2[me2] = Dt2[ge2] = Dt2[ye2] = true, Dt2[V2] = Dt2[U2] = Dt2[se2] = Dt2[W2] = Dt2[ue2] = Dt2[$2] = Dt2[z2] = Dt2[H2] = Dt2[J2] = Dt2[Q2] = Dt2[Y2] = Dt2[ee2] = Dt2[te2] = Dt2[re2] = Dt2[ae2] = false;
    var Ft2 = {};
    Ft2[V2] = Ft2[U2] = Ft2[se2] = Ft2[ue2] = Ft2[W2] = Ft2[$2] = Ft2[ce2] = Ft2[le2] = Ft2[pe2] = Ft2[fe2] = Ft2[he2] = Ft2[J2] = Ft2[Q2] = Ft2[Y2] = Ft2[ee2] = Ft2[te2] = Ft2[re2] = Ft2[ne2] = Ft2[de2] = Ft2[me2] = Ft2[ge2] = Ft2[ye2] = true, Ft2[z2] = Ft2[H2] = Ft2[ae2] = false;
    var At2 = { "\\": "\\", "'": "'", "\n": "n", "\r": "r", "\u2028": "u2028", "\u2029": "u2029" }, wt2 = parseFloat, _t2 = parseInt, Tt2 = "object" == i(e) && e && e.Object === Object && e, Pt2 = "object" == ("undefined" == typeof self ? "undefined" : i(self)) && self && self.Object === Object && self, It2 = Tt2 || Pt2 || Function("return this")(), Bt2 = r2 && !r2.nodeType && r2, Ot2 = Bt2 && t3 && !t3.nodeType && t3, Lt2 = Ot2 && Ot2.exports === Bt2, Nt2 = Lt2 && Tt2.process, jt2 = function() {
      try {
        var e25 = Ot2 && Ot2.require && Ot2.require("util").types;
        return e25 || Nt2 && Nt2.binding && Nt2.binding("util");
      } catch (e26) {
      }
    }(), Rt2 = jt2 && jt2.isArrayBuffer, Mt2 = jt2 && jt2.isDate, Vt2 = jt2 && jt2.isMap, Ut2 = jt2 && jt2.isRegExp, qt2 = jt2 && jt2.isSet, Wt2 = jt2 && jt2.isTypedArray;
    function $t2(e25, t4, r3) {
      switch (r3.length) {
        case 0:
          return e25.call(t4);
        case 1:
          return e25.call(t4, r3[0]);
        case 2:
          return e25.call(t4, r3[0], r3[1]);
        case 3:
          return e25.call(t4, r3[0], r3[1], r3[2]);
      }
      return e25.apply(t4, r3);
    }
    function Gt2(e25, t4, r3, n3) {
      for (var i2 = -1, a3 = null == e25 ? 0 : e25.length; ++i2 < a3; ) {
        var o3 = e25[i2];
        t4(n3, o3, r3(o3), e25);
      }
      return n3;
    }
    function zt2(e25, t4) {
      for (var r3 = -1, n3 = null == e25 ? 0 : e25.length; ++r3 < n3 && false !== t4(e25[r3], r3, e25); ) ;
      return e25;
    }
    function Ht2(e25, t4) {
      for (var r3 = null == e25 ? 0 : e25.length; r3-- && false !== t4(e25[r3], r3, e25); ) ;
      return e25;
    }
    function Kt2(e25, t4) {
      for (var r3 = -1, n3 = null == e25 ? 0 : e25.length; ++r3 < n3; ) if (!t4(e25[r3], r3, e25)) return false;
      return true;
    }
    function Jt2(e25, t4) {
      for (var r3 = -1, n3 = null == e25 ? 0 : e25.length, i2 = 0, a3 = []; ++r3 < n3; ) {
        var o3 = e25[r3];
        t4(o3, r3, e25) && (a3[i2++] = o3);
      }
      return a3;
    }
    function Qt2(e25, t4) {
      return !!(null == e25 ? 0 : e25.length) && or2(e25, t4, 0) > -1;
    }
    function Xt2(e25, t4, r3) {
      for (var n3 = -1, i2 = null == e25 ? 0 : e25.length; ++n3 < i2; ) if (r3(t4, e25[n3])) return true;
      return false;
    }
    function Yt2(e25, t4) {
      for (var r3 = -1, n3 = null == e25 ? 0 : e25.length, i2 = Array(n3); ++r3 < n3; ) i2[r3] = t4(e25[r3], r3, e25);
      return i2;
    }
    function Zt2(e25, t4) {
      for (var r3 = -1, n3 = t4.length, i2 = e25.length; ++r3 < n3; ) e25[i2 + r3] = t4[r3];
      return e25;
    }
    function er2(e25, t4, r3, n3) {
      var i2 = -1, a3 = null == e25 ? 0 : e25.length;
      for (n3 && a3 && (r3 = e25[++i2]); ++i2 < a3; ) r3 = t4(r3, e25[i2], i2, e25);
      return r3;
    }
    function tr2(e25, t4, r3, n3) {
      var i2 = null == e25 ? 0 : e25.length;
      for (n3 && i2 && (r3 = e25[--i2]); i2--; ) r3 = t4(r3, e25[i2], i2, e25);
      return r3;
    }
    function rr2(e25, t4) {
      for (var r3 = -1, n3 = null == e25 ? 0 : e25.length; ++r3 < n3; ) if (t4(e25[r3], r3, e25)) return true;
      return false;
    }
    var nr2 = lr2("length");
    function ir2(e25, t4, r3) {
      var n3;
      return r3(e25, function(e26, r4, i2) {
        if (t4(e26, r4, i2)) return n3 = r4, false;
      }), n3;
    }
    function ar2(e25, t4, r3, n3) {
      for (var i2 = e25.length, a3 = r3 + (n3 ? 1 : -1); n3 ? a3-- : ++a3 < i2; ) if (t4(e25[a3], a3, e25)) return a3;
      return -1;
    }
    function or2(e25, t4, r3) {
      return t4 == t4 ? function(e26, t5, r4) {
        var n3 = r4 - 1, i2 = e26.length;
        for (; ++n3 < i2; ) if (e26[n3] === t5) return n3;
        return -1;
      }(e25, t4, r3) : ar2(e25, ur2, r3);
    }
    function sr2(e25, t4, r3, n3) {
      for (var i2 = r3 - 1, a3 = e25.length; ++i2 < a3; ) if (n3(e25[i2], t4)) return i2;
      return -1;
    }
    function ur2(e25) {
      return e25 != e25;
    }
    function cr2(e25, t4) {
      var r3 = null == e25 ? 0 : e25.length;
      return r3 ? hr2(e25, t4) / r3 : L2;
    }
    function lr2(e25) {
      return function(t4) {
        return null == t4 ? n2 : t4[e25];
      };
    }
    function pr2(e25) {
      return function(t4) {
        return null == e25 ? n2 : e25[t4];
      };
    }
    function fr2(e25, t4, r3, n3, i2) {
      return i2(e25, function(e26, i3, a3) {
        r3 = n3 ? (n3 = false, e26) : t4(r3, e26, i3, a3);
      }), r3;
    }
    function hr2(e25, t4) {
      for (var r3, i2 = -1, a3 = e25.length; ++i2 < a3; ) {
        var o3 = t4(e25[i2]);
        o3 !== n2 && (r3 = r3 === n2 ? o3 : r3 + o3);
      }
      return r3;
    }
    function dr2(e25, t4) {
      for (var r3 = -1, n3 = Array(e25); ++r3 < e25; ) n3[r3] = t4(r3);
      return n3;
    }
    function mr2(e25) {
      return function(t4) {
        return e25(t4);
      };
    }
    function gr2(e25, t4) {
      return Yt2(t4, function(t5) {
        return e25[t5];
      });
    }
    function yr2(e25, t4) {
      return e25.has(t4);
    }
    function vr2(e25, t4) {
      for (var r3 = -1, n3 = e25.length; ++r3 < n3 && or2(t4, e25[r3], 0) > -1; ) ;
      return r3;
    }
    function xr2(e25, t4) {
      for (var r3 = e25.length; r3-- && or2(t4, e25[r3], 0) > -1; ) ;
      return r3;
    }
    var br2 = pr2({ "\xC0": "A", "\xC1": "A", "\xC2": "A", "\xC3": "A", "\xC4": "A", "\xC5": "A", "\xE0": "a", "\xE1": "a", "\xE2": "a", "\xE3": "a", "\xE4": "a", "\xE5": "a", "\xC7": "C", "\xE7": "c", "\xD0": "D", "\xF0": "d", "\xC8": "E", "\xC9": "E", "\xCA": "E", "\xCB": "E", "\xE8": "e", "\xE9": "e", "\xEA": "e", "\xEB": "e", "\xCC": "I", "\xCD": "I", "\xCE": "I", "\xCF": "I", "\xEC": "i", "\xED": "i", "\xEE": "i", "\xEF": "i", "\xD1": "N", "\xF1": "n", "\xD2": "O", "\xD3": "O", "\xD4": "O", "\xD5": "O", "\xD6": "O", "\xD8": "O", "\xF2": "o", "\xF3": "o", "\xF4": "o", "\xF5": "o", "\xF6": "o", "\xF8": "o", "\xD9": "U", "\xDA": "U", "\xDB": "U", "\xDC": "U", "\xF9": "u", "\xFA": "u", "\xFB": "u", "\xFC": "u", "\xDD": "Y", "\xFD": "y", "\xFF": "y", "\xC6": "Ae", "\xE6": "ae", "\xDE": "Th", "\xFE": "th", "\xDF": "ss", "\u0100": "A", "\u0102": "A", "\u0104": "A", "\u0101": "a", "\u0103": "a", "\u0105": "a", "\u0106": "C", "\u0108": "C", "\u010A": "C", "\u010C": "C", "\u0107": "c", "\u0109": "c", "\u010B": "c", "\u010D": "c", "\u010E": "D", "\u0110": "D", "\u010F": "d", "\u0111": "d", "\u0112": "E", "\u0114": "E", "\u0116": "E", "\u0118": "E", "\u011A": "E", "\u0113": "e", "\u0115": "e", "\u0117": "e", "\u0119": "e", "\u011B": "e", "\u011C": "G", "\u011E": "G", "\u0120": "G", "\u0122": "G", "\u011D": "g", "\u011F": "g", "\u0121": "g", "\u0123": "g", "\u0124": "H", "\u0126": "H", "\u0125": "h", "\u0127": "h", "\u0128": "I", "\u012A": "I", "\u012C": "I", "\u012E": "I", "\u0130": "I", "\u0129": "i", "\u012B": "i", "\u012D": "i", "\u012F": "i", "\u0131": "i", "\u0134": "J", "\u0135": "j", "\u0136": "K", "\u0137": "k", "\u0138": "k", "\u0139": "L", "\u013B": "L", "\u013D": "L", "\u013F": "L", "\u0141": "L", "\u013A": "l", "\u013C": "l", "\u013E": "l", "\u0140": "l", "\u0142": "l", "\u0143": "N", "\u0145": "N", "\u0147": "N", "\u014A": "N", "\u0144": "n", "\u0146": "n", "\u0148": "n", "\u014B": "n", "\u014C": "O", "\u014E": "O", "\u0150": "O", "\u014D": "o", "\u014F": "o", "\u0151": "o", "\u0154": "R", "\u0156": "R", "\u0158": "R", "\u0155": "r", "\u0157": "r", "\u0159": "r", "\u015A": "S", "\u015C": "S", "\u015E": "S", "\u0160": "S", "\u015B": "s", "\u015D": "s", "\u015F": "s", "\u0161": "s", "\u0162": "T", "\u0164": "T", "\u0166": "T", "\u0163": "t", "\u0165": "t", "\u0167": "t", "\u0168": "U", "\u016A": "U", "\u016C": "U", "\u016E": "U", "\u0170": "U", "\u0172": "U", "\u0169": "u", "\u016B": "u", "\u016D": "u", "\u016F": "u", "\u0171": "u", "\u0173": "u", "\u0174": "W", "\u0175": "w", "\u0176": "Y", "\u0177": "y", "\u0178": "Y", "\u0179": "Z", "\u017B": "Z", "\u017D": "Z", "\u017A": "z", "\u017C": "z", "\u017E": "z", "\u0132": "IJ", "\u0133": "ij", "\u0152": "Oe", "\u0153": "oe", "\u0149": "'n", "\u017F": "s" }), Er2 = pr2({ "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" });
    function Cr(e25) {
      return "\\" + At2[e25];
    }
    function Sr(e25) {
      return Et.test(e25);
    }
    function kr(e25) {
      var t4 = -1, r3 = Array(e25.size);
      return e25.forEach(function(e26, n3) {
        r3[++t4] = [n3, e26];
      }), r3;
    }
    function Dr2(e25, t4) {
      return function(r3) {
        return e25(t4(r3));
      };
    }
    function Fr2(e25, t4) {
      for (var r3 = -1, n3 = e25.length, i2 = 0, a3 = []; ++r3 < n3; ) {
        var o3 = e25[r3];
        o3 !== t4 && o3 !== l2 || (e25[r3] = l2, a3[i2++] = r3);
      }
      return a3;
    }
    function Ar2(e25) {
      var t4 = -1, r3 = Array(e25.size);
      return e25.forEach(function(e26) {
        r3[++t4] = e26;
      }), r3;
    }
    function wr2(e25) {
      var t4 = -1, r3 = Array(e25.size);
      return e25.forEach(function(e26) {
        r3[++t4] = [e26, e26];
      }), r3;
    }
    function _r2(e25) {
      return Sr(e25) ? function(e26) {
        var t4 = xt.lastIndex = 0;
        for (; xt.test(e26); ) ++t4;
        return t4;
      }(e25) : nr2(e25);
    }
    function Tr2(e25) {
      return Sr(e25) ? function(e26) {
        return e26.match(xt) || [];
      }(e25) : function(e26) {
        return e26.split("");
      }(e25);
    }
    var Pr2 = pr2({ "&amp;": "&", "&lt;": "<", "&gt;": ">", "&quot;": '"', "&#39;": "'" });
    var Ir2 = function e25(t4) {
      var r3, Xe3 = (t4 = null == t4 ? It2 : Ir2.defaults(It2.Object(), t4, Ir2.pick(It2, St2))).Array, Ye3 = t4.Date, Ze3 = t4.Error, et3 = t4.Function, tt3 = t4.Math, rt3 = t4.Object, nt3 = t4.RegExp, it3 = t4.String, at3 = t4.TypeError, ot3 = Xe3.prototype, st3 = et3.prototype, ut3 = rt3.prototype, ct3 = t4["__core-js_shared__"], lt4 = st3.toString, pt3 = ut3.hasOwnProperty, ft3 = 0, ht3 = (r3 = /[^.]+$/.exec(ct3 && ct3.keys && ct3.keys.IE_PROTO || "")) ? "Symbol(src)_1." + r3 : "", dt3 = ut3.toString, mt3 = lt4.call(rt3), gt3 = It2._, xt2 = nt3("^" + lt4.call(pt3).replace(Pe2, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"), Et2 = Lt2 ? t4.Buffer : n2, At3 = t4.Symbol, Tt3 = t4.Uint8Array, Pt3 = Et2 ? Et2.allocUnsafe : n2, Bt3 = Dr2(rt3.getPrototypeOf, rt3), Ot3 = rt3.create, Nt3 = ut3.propertyIsEnumerable, jt3 = ot3.splice, nr3 = At3 ? At3.isConcatSpreadable : n2, pr3 = At3 ? At3.iterator : n2, Br2 = At3 ? At3.toStringTag : n2, Or2 = function() {
        try {
          var e26 = Ma2(rt3, "defineProperty");
          return e26({}, "", {}), e26;
        } catch (e27) {
        }
      }(), Lr2 = t4.clearTimeout !== It2.clearTimeout && t4.clearTimeout, Nr2 = Ye3 && Ye3.now !== It2.Date.now && Ye3.now, jr2 = t4.setTimeout !== It2.setTimeout && t4.setTimeout, Rr2 = tt3.ceil, Mr2 = tt3.floor, Vr2 = rt3.getOwnPropertySymbols, Ur2 = Et2 ? Et2.isBuffer : n2, qr2 = t4.isFinite, Wr2 = ot3.join, $r2 = Dr2(rt3.keys, rt3), Gr2 = tt3.max, zr2 = tt3.min, Hr2 = Ye3.now, Kr2 = t4.parseInt, Jr2 = tt3.random, Qr2 = ot3.reverse, Xr2 = Ma2(t4, "DataView"), Yr2 = Ma2(t4, "Map"), Zr2 = Ma2(t4, "Promise"), en2 = Ma2(t4, "Set"), tn2 = Ma2(t4, "WeakMap"), rn2 = Ma2(rt3, "create"), nn2 = tn2 && new tn2(), an2 = {}, on3 = po2(Xr2), sn2 = po2(Yr2), un2 = po2(Zr2), cn2 = po2(en2), ln2 = po2(tn2), pn2 = At3 ? At3.prototype : n2, fn2 = pn2 ? pn2.valueOf : n2, hn2 = pn2 ? pn2.toString : n2;
      function dn2(e26) {
        if (_s2(e26) && !vs(e26) && !(e26 instanceof vn2)) {
          if (e26 instanceof yn2) return e26;
          if (pt3.call(e26, "__wrapped__")) return fo2(e26);
        }
        return new yn2(e26);
      }
      var mn2 = /* @__PURE__ */ function() {
        function e26() {
        }
        return function(t5) {
          if (!ws2(t5)) return {};
          if (Ot3) return Ot3(t5);
          e26.prototype = t5;
          var r4 = new e26();
          return e26.prototype = n2, r4;
        };
      }();
      function gn2() {
      }
      function yn2(e26, t5) {
        this.__wrapped__ = e26, this.__actions__ = [], this.__chain__ = !!t5, this.__index__ = 0, this.__values__ = n2;
      }
      function vn2(e26) {
        this.__wrapped__ = e26, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = false, this.__iteratees__ = [], this.__takeCount__ = N2, this.__views__ = [];
      }
      function xn2(e26) {
        var t5 = -1, r4 = null == e26 ? 0 : e26.length;
        for (this.clear(); ++t5 < r4; ) {
          var n3 = e26[t5];
          this.set(n3[0], n3[1]);
        }
      }
      function bn2(e26) {
        var t5 = -1, r4 = null == e26 ? 0 : e26.length;
        for (this.clear(); ++t5 < r4; ) {
          var n3 = e26[t5];
          this.set(n3[0], n3[1]);
        }
      }
      function En2(e26) {
        var t5 = -1, r4 = null == e26 ? 0 : e26.length;
        for (this.clear(); ++t5 < r4; ) {
          var n3 = e26[t5];
          this.set(n3[0], n3[1]);
        }
      }
      function Cn2(e26) {
        var t5 = -1, r4 = null == e26 ? 0 : e26.length;
        for (this.__data__ = new En2(); ++t5 < r4; ) this.add(e26[t5]);
      }
      function Sn2(e26) {
        var t5 = this.__data__ = new bn2(e26);
        this.size = t5.size;
      }
      function kn2(e26, t5) {
        var r4 = vs(e26), n3 = !r4 && ys(e26), i2 = !r4 && !n3 && Cs2(e26), a3 = !r4 && !n3 && !i2 && js2(e26), o3 = r4 || n3 || i2 || a3, s3 = o3 ? dr2(e26.length, it3) : [], u3 = s3.length;
        for (var c3 in e26) !t5 && !pt3.call(e26, c3) || o3 && ("length" == c3 || i2 && ("offset" == c3 || "parent" == c3) || a3 && ("buffer" == c3 || "byteLength" == c3 || "byteOffset" == c3) || za2(c3, u3)) || s3.push(c3);
        return s3;
      }
      function Dn2(e26) {
        var t5 = e26.length;
        return t5 ? e26[Ci2(0, t5 - 1)] : n2;
      }
      function Fn2(e26, t5) {
        return uo2(na2(e26), Ln2(t5, 0, e26.length));
      }
      function An2(e26) {
        return uo2(na2(e26));
      }
      function wn2(e26, t5, r4) {
        (r4 === n2 || ds(e26[t5], r4)) && (r4 !== n2 || t5 in e26) || Bn2(e26, t5, r4);
      }
      function _n2(e26, t5, r4) {
        var i2 = e26[t5];
        pt3.call(e26, t5) && ds(i2, r4) && (r4 !== n2 || t5 in e26) || Bn2(e26, t5, r4);
      }
      function Tn2(e26, t5) {
        for (var r4 = e26.length; r4--; ) if (ds(e26[r4][0], t5)) return r4;
        return -1;
      }
      function Pn2(e26, t5, r4, n3) {
        return Vn2(e26, function(e27, i2, a3) {
          t5(n3, e27, r4(e27), a3);
        }), n3;
      }
      function In2(e26, t5) {
        return e26 && ia2(t5, au2(t5), e26);
      }
      function Bn2(e26, t5, r4) {
        "__proto__" == t5 && Or2 ? Or2(e26, t5, { configurable: true, enumerable: true, value: r4, writable: true }) : e26[t5] = r4;
      }
      function On2(e26, t5) {
        for (var r4 = -1, i2 = t5.length, a3 = Xe3(i2), o3 = null == e26; ++r4 < i2; ) a3[r4] = o3 ? n2 : eu2(e26, t5[r4]);
        return a3;
      }
      function Ln2(e26, t5, r4) {
        return e26 == e26 && (r4 !== n2 && (e26 = e26 <= r4 ? e26 : r4), t5 !== n2 && (e26 = e26 >= t5 ? e26 : t5)), e26;
      }
      function Nn2(e26, t5, r4, i2, a3, o3) {
        var s3, u3 = t5 & p2, c3 = t5 & f2, l3 = t5 & h2;
        if (r4 && (s3 = a3 ? r4(e26, i2, a3, o3) : r4(e26)), s3 !== n2) return s3;
        if (!ws2(e26)) return e26;
        var d3 = vs(e26);
        if (d3) {
          if (s3 = function(e27) {
            var t6 = e27.length, r5 = new e27.constructor(t6);
            t6 && "string" == typeof e27[0] && pt3.call(e27, "index") && (r5.index = e27.index, r5.input = e27.input);
            return r5;
          }(e26), !u3) return na2(e26, s3);
        } else {
          var m3 = qa2(e26), g3 = m3 == H2 || m3 == K2;
          if (Cs2(e26)) return Xi2(e26, u3);
          if (m3 == Y2 || m3 == V2 || g3 && !a3) {
            if (s3 = c3 || g3 ? {} : $a2(e26), !u3) return c3 ? function(e27, t6) {
              return ia2(e27, Ua2(e27), t6);
            }(e26, function(e27, t6) {
              return e27 && ia2(t6, ou2(t6), e27);
            }(s3, e26)) : function(e27, t6) {
              return ia2(e27, Va2(e27), t6);
            }(e26, In2(s3, e26));
          } else {
            if (!Ft2[m3]) return a3 ? e26 : {};
            s3 = function(e27, t6, r5) {
              var n3 = e27.constructor;
              switch (t6) {
                case se2:
                  return Yi2(e27);
                case W2:
                case $2:
                  return new n3(+e27);
                case ue2:
                  return function(e28, t7) {
                    var r6 = t7 ? Yi2(e28.buffer) : e28.buffer;
                    return new e28.constructor(r6, e28.byteOffset, e28.byteLength);
                  }(e27, r5);
                case ce2:
                case le2:
                case pe2:
                case fe2:
                case he2:
                case de2:
                case me2:
                case ge2:
                case ye2:
                  return Zi2(e27, r5);
                case J2:
                  return new n3();
                case Q2:
                case re2:
                  return new n3(e27);
                case ee2:
                  return function(e28) {
                    var t7 = new e28.constructor(e28.source, qe2.exec(e28));
                    return t7.lastIndex = e28.lastIndex, t7;
                  }(e27);
                case te2:
                  return new n3();
                case ne2:
                  return i3 = e27, fn2 ? rt3(fn2.call(i3)) : {};
              }
              var i3;
            }(e26, m3, u3);
          }
        }
        o3 || (o3 = new Sn2());
        var y3 = o3.get(e26);
        if (y3) return y3;
        o3.set(e26, s3), Os2(e26) ? e26.forEach(function(n3) {
          s3.add(Nn2(n3, t5, r4, n3, e26, o3));
        }) : Ts2(e26) && e26.forEach(function(n3, i3) {
          s3.set(i3, Nn2(n3, t5, r4, i3, e26, o3));
        });
        var v3 = d3 ? n2 : (l3 ? c3 ? Ia2 : Pa2 : c3 ? ou2 : au2)(e26);
        return zt2(v3 || e26, function(n3, i3) {
          v3 && (n3 = e26[i3 = n3]), _n2(s3, i3, Nn2(n3, t5, r4, i3, e26, o3));
        }), s3;
      }
      function jn2(e26, t5, r4) {
        var i2 = r4.length;
        if (null == e26) return !i2;
        for (e26 = rt3(e26); i2--; ) {
          var a3 = r4[i2], o3 = t5[a3], s3 = e26[a3];
          if (s3 === n2 && !(a3 in e26) || !o3(s3)) return false;
        }
        return true;
      }
      function Rn2(e26, t5, r4) {
        if ("function" != typeof e26) throw new at3(s2);
        return io2(function() {
          e26.apply(n2, r4);
        }, t5);
      }
      function Mn2(e26, t5, r4, n3) {
        var i2 = -1, o3 = Qt2, s3 = true, u3 = e26.length, c3 = [], l3 = t5.length;
        if (!u3) return c3;
        r4 && (t5 = Yt2(t5, mr2(r4))), n3 ? (o3 = Xt2, s3 = false) : t5.length >= a2 && (o3 = yr2, s3 = false, t5 = new Cn2(t5));
        e: for (; ++i2 < u3; ) {
          var p3 = e26[i2], f3 = null == r4 ? p3 : r4(p3);
          if (p3 = n3 || 0 !== p3 ? p3 : 0, s3 && f3 == f3) {
            for (var h3 = l3; h3--; ) if (t5[h3] === f3) continue e;
            c3.push(p3);
          } else o3(t5, f3, n3) || c3.push(p3);
        }
        return c3;
      }
      dn2.templateSettings = { escape: De2, evaluate: Fe2, interpolate: Ae2, variable: "", imports: { _: dn2 } }, dn2.prototype = gn2.prototype, dn2.prototype.constructor = dn2, yn2.prototype = mn2(gn2.prototype), yn2.prototype.constructor = yn2, vn2.prototype = mn2(gn2.prototype), vn2.prototype.constructor = vn2, xn2.prototype.clear = function() {
        this.__data__ = rn2 ? rn2(null) : {}, this.size = 0;
      }, xn2.prototype.delete = function(e26) {
        var t5 = this.has(e26) && delete this.__data__[e26];
        return this.size -= t5 ? 1 : 0, t5;
      }, xn2.prototype.get = function(e26) {
        var t5 = this.__data__;
        if (rn2) {
          var r4 = t5[e26];
          return r4 === u2 ? n2 : r4;
        }
        return pt3.call(t5, e26) ? t5[e26] : n2;
      }, xn2.prototype.has = function(e26) {
        var t5 = this.__data__;
        return rn2 ? t5[e26] !== n2 : pt3.call(t5, e26);
      }, xn2.prototype.set = function(e26, t5) {
        var r4 = this.__data__;
        return this.size += this.has(e26) ? 0 : 1, r4[e26] = rn2 && t5 === n2 ? u2 : t5, this;
      }, bn2.prototype.clear = function() {
        this.__data__ = [], this.size = 0;
      }, bn2.prototype.delete = function(e26) {
        var t5 = this.__data__, r4 = Tn2(t5, e26);
        return !(r4 < 0) && (r4 == t5.length - 1 ? t5.pop() : jt3.call(t5, r4, 1), --this.size, true);
      }, bn2.prototype.get = function(e26) {
        var t5 = this.__data__, r4 = Tn2(t5, e26);
        return r4 < 0 ? n2 : t5[r4][1];
      }, bn2.prototype.has = function(e26) {
        return Tn2(this.__data__, e26) > -1;
      }, bn2.prototype.set = function(e26, t5) {
        var r4 = this.__data__, n3 = Tn2(r4, e26);
        return n3 < 0 ? (++this.size, r4.push([e26, t5])) : r4[n3][1] = t5, this;
      }, En2.prototype.clear = function() {
        this.size = 0, this.__data__ = { hash: new xn2(), map: new (Yr2 || bn2)(), string: new xn2() };
      }, En2.prototype.delete = function(e26) {
        var t5 = ja2(this, e26).delete(e26);
        return this.size -= t5 ? 1 : 0, t5;
      }, En2.prototype.get = function(e26) {
        return ja2(this, e26).get(e26);
      }, En2.prototype.has = function(e26) {
        return ja2(this, e26).has(e26);
      }, En2.prototype.set = function(e26, t5) {
        var r4 = ja2(this, e26), n3 = r4.size;
        return r4.set(e26, t5), this.size += r4.size == n3 ? 0 : 1, this;
      }, Cn2.prototype.add = Cn2.prototype.push = function(e26) {
        return this.__data__.set(e26, u2), this;
      }, Cn2.prototype.has = function(e26) {
        return this.__data__.has(e26);
      }, Sn2.prototype.clear = function() {
        this.__data__ = new bn2(), this.size = 0;
      }, Sn2.prototype.delete = function(e26) {
        var t5 = this.__data__, r4 = t5.delete(e26);
        return this.size = t5.size, r4;
      }, Sn2.prototype.get = function(e26) {
        return this.__data__.get(e26);
      }, Sn2.prototype.has = function(e26) {
        return this.__data__.has(e26);
      }, Sn2.prototype.set = function(e26, t5) {
        var r4 = this.__data__;
        if (r4 instanceof bn2) {
          var n3 = r4.__data__;
          if (!Yr2 || n3.length < a2 - 1) return n3.push([e26, t5]), this.size = ++r4.size, this;
          r4 = this.__data__ = new En2(n3);
        }
        return r4.set(e26, t5), this.size = r4.size, this;
      };
      var Vn2 = sa2(Kn2), Un2 = sa2(Jn2, true);
      function qn2(e26, t5) {
        var r4 = true;
        return Vn2(e26, function(e27, n3, i2) {
          return r4 = !!t5(e27, n3, i2);
        }), r4;
      }
      function Wn2(e26, t5, r4) {
        for (var i2 = -1, a3 = e26.length; ++i2 < a3; ) {
          var o3 = e26[i2], s3 = t5(o3);
          if (null != s3 && (u3 === n2 ? s3 == s3 && !Ns2(s3) : r4(s3, u3))) var u3 = s3, c3 = o3;
        }
        return c3;
      }
      function $n2(e26, t5) {
        var r4 = [];
        return Vn2(e26, function(e27, n3, i2) {
          t5(e27, n3, i2) && r4.push(e27);
        }), r4;
      }
      function Gn2(e26, t5, r4, n3, i2) {
        var a3 = -1, o3 = e26.length;
        for (r4 || (r4 = Ga2), i2 || (i2 = []); ++a3 < o3; ) {
          var s3 = e26[a3];
          t5 > 0 && r4(s3) ? t5 > 1 ? Gn2(s3, t5 - 1, r4, n3, i2) : Zt2(i2, s3) : n3 || (i2[i2.length] = s3);
        }
        return i2;
      }
      var zn = ua2(), Hn2 = ua2(true);
      function Kn2(e26, t5) {
        return e26 && zn(e26, t5, au2);
      }
      function Jn2(e26, t5) {
        return e26 && Hn2(e26, t5, au2);
      }
      function Qn2(e26, t5) {
        return Jt2(t5, function(t6) {
          return Ds2(e26[t6]);
        });
      }
      function Xn2(e26, t5) {
        for (var r4 = 0, i2 = (t5 = Hi2(t5, e26)).length; null != e26 && r4 < i2; ) e26 = e26[lo2(t5[r4++])];
        return r4 && r4 == i2 ? e26 : n2;
      }
      function Yn2(e26, t5, r4) {
        var n3 = t5(e26);
        return vs(e26) ? n3 : Zt2(n3, r4(e26));
      }
      function Zn2(e26) {
        return null == e26 ? e26 === n2 ? ie4 : X2 : Br2 && Br2 in rt3(e26) ? function(e27) {
          var t5 = pt3.call(e27, Br2), r4 = e27[Br2];
          try {
            e27[Br2] = n2;
            var i2 = true;
          } catch (e28) {
          }
          var a3 = dt3.call(e27);
          i2 && (t5 ? e27[Br2] = r4 : delete e27[Br2]);
          return a3;
        }(e26) : function(e27) {
          return dt3.call(e27);
        }(e26);
      }
      function ei2(e26, t5) {
        return e26 > t5;
      }
      function ti2(e26, t5) {
        return null != e26 && pt3.call(e26, t5);
      }
      function ri2(e26, t5) {
        return null != e26 && t5 in rt3(e26);
      }
      function ni2(e26, t5, r4) {
        for (var i2 = r4 ? Xt2 : Qt2, a3 = e26[0].length, o3 = e26.length, s3 = o3, u3 = Xe3(o3), c3 = 1 / 0, l3 = []; s3--; ) {
          var p3 = e26[s3];
          s3 && t5 && (p3 = Yt2(p3, mr2(t5))), c3 = zr2(p3.length, c3), u3[s3] = !r4 && (t5 || a3 >= 120 && p3.length >= 120) ? new Cn2(s3 && p3) : n2;
        }
        p3 = e26[0];
        var f3 = -1, h3 = u3[0];
        e: for (; ++f3 < a3 && l3.length < c3; ) {
          var d3 = p3[f3], m3 = t5 ? t5(d3) : d3;
          if (d3 = r4 || 0 !== d3 ? d3 : 0, !(h3 ? yr2(h3, m3) : i2(l3, m3, r4))) {
            for (s3 = o3; --s3; ) {
              var g3 = u3[s3];
              if (!(g3 ? yr2(g3, m3) : i2(e26[s3], m3, r4))) continue e;
            }
            h3 && h3.push(m3), l3.push(d3);
          }
        }
        return l3;
      }
      function ii2(e26, t5, r4) {
        var i2 = null == (e26 = to2(e26, t5 = Hi2(t5, e26))) ? e26 : e26[lo2(ko(t5))];
        return null == i2 ? n2 : $t2(i2, e26, r4);
      }
      function ai2(e26) {
        return _s2(e26) && Zn2(e26) == V2;
      }
      function oi2(e26, t5, r4, i2, a3) {
        return e26 === t5 || (null == e26 || null == t5 || !_s2(e26) && !_s2(t5) ? e26 != e26 && t5 != t5 : function(e27, t6, r5, i3, a4, o3) {
          var s3 = vs(e27), u3 = vs(t6), c3 = s3 ? U2 : qa2(e27), l3 = u3 ? U2 : qa2(t6), p3 = (c3 = c3 == V2 ? Y2 : c3) == Y2, f3 = (l3 = l3 == V2 ? Y2 : l3) == Y2, h3 = c3 == l3;
          if (h3 && Cs2(e27)) {
            if (!Cs2(t6)) return false;
            s3 = true, p3 = false;
          }
          if (h3 && !p3) return o3 || (o3 = new Sn2()), s3 || js2(e27) ? _a3(e27, t6, r5, i3, a4, o3) : function(e28, t7, r6, n3, i4, a5, o4) {
            switch (r6) {
              case ue2:
                if (e28.byteLength != t7.byteLength || e28.byteOffset != t7.byteOffset) return false;
                e28 = e28.buffer, t7 = t7.buffer;
              case se2:
                return !(e28.byteLength != t7.byteLength || !a5(new Tt3(e28), new Tt3(t7)));
              case W2:
              case $2:
              case Q2:
                return ds(+e28, +t7);
              case z2:
                return e28.name == t7.name && e28.message == t7.message;
              case ee2:
              case re2:
                return e28 == t7 + "";
              case J2:
                var s4 = kr;
              case te2:
                var u4 = n3 & d2;
                if (s4 || (s4 = Ar2), e28.size != t7.size && !u4) return false;
                var c4 = o4.get(e28);
                if (c4) return c4 == t7;
                n3 |= m2, o4.set(e28, t7);
                var l4 = _a3(s4(e28), s4(t7), n3, i4, a5, o4);
                return o4.delete(e28), l4;
              case ne2:
                if (fn2) return fn2.call(e28) == fn2.call(t7);
            }
            return false;
          }(e27, t6, c3, r5, i3, a4, o3);
          if (!(r5 & d2)) {
            var g3 = p3 && pt3.call(e27, "__wrapped__"), y3 = f3 && pt3.call(t6, "__wrapped__");
            if (g3 || y3) {
              var v3 = g3 ? e27.value() : e27, x3 = y3 ? t6.value() : t6;
              return o3 || (o3 = new Sn2()), a4(v3, x3, r5, i3, o3);
            }
          }
          if (!h3) return false;
          return o3 || (o3 = new Sn2()), function(e28, t7, r6, i4, a5, o4) {
            var s4 = r6 & d2, u4 = Pa2(e28), c4 = u4.length, l4 = Pa2(t7).length;
            if (c4 != l4 && !s4) return false;
            var p4 = c4;
            for (; p4--; ) {
              var f4 = u4[p4];
              if (!(s4 ? f4 in t7 : pt3.call(t7, f4))) return false;
            }
            var h4 = o4.get(e28);
            if (h4 && o4.get(t7)) return h4 == t7;
            var m3 = true;
            o4.set(e28, t7), o4.set(t7, e28);
            var g4 = s4;
            for (; ++p4 < c4; ) {
              f4 = u4[p4];
              var y4 = e28[f4], v4 = t7[f4];
              if (i4) var x4 = s4 ? i4(v4, y4, f4, t7, e28, o4) : i4(y4, v4, f4, e28, t7, o4);
              if (!(x4 === n2 ? y4 === v4 || a5(y4, v4, r6, i4, o4) : x4)) {
                m3 = false;
                break;
              }
              g4 || (g4 = "constructor" == f4);
            }
            if (m3 && !g4) {
              var b3 = e28.constructor, E3 = t7.constructor;
              b3 != E3 && "constructor" in e28 && "constructor" in t7 && !("function" == typeof b3 && b3 instanceof b3 && "function" == typeof E3 && E3 instanceof E3) && (m3 = false);
            }
            return o4.delete(e28), o4.delete(t7), m3;
          }(e27, t6, r5, i3, a4, o3);
        }(e26, t5, r4, i2, oi2, a3));
      }
      function si2(e26, t5, r4, i2) {
        var a3 = r4.length, o3 = a3, s3 = !i2;
        if (null == e26) return !o3;
        for (e26 = rt3(e26); a3--; ) {
          var u3 = r4[a3];
          if (s3 && u3[2] ? u3[1] !== e26[u3[0]] : !(u3[0] in e26)) return false;
        }
        for (; ++a3 < o3; ) {
          var c3 = (u3 = r4[a3])[0], l3 = e26[c3], p3 = u3[1];
          if (s3 && u3[2]) {
            if (l3 === n2 && !(c3 in e26)) return false;
          } else {
            var f3 = new Sn2();
            if (i2) var h3 = i2(l3, p3, c3, e26, t5, f3);
            if (!(h3 === n2 ? oi2(p3, l3, d2 | m2, i2, f3) : h3)) return false;
          }
        }
        return true;
      }
      function ui2(e26) {
        return !(!ws2(e26) || (t5 = e26, ht3 && ht3 in t5)) && (Ds2(e26) ? xt2 : Ge2).test(po2(e26));
        var t5;
      }
      function ci2(e26) {
        return "function" == typeof e26 ? e26 : null == e26 ? Pu2 : "object" == i(e26) ? vs(e26) ? mi2(e26[0], e26[1]) : di2(e26) : Vu2(e26);
      }
      function li2(e26) {
        if (!Xa2(e26)) return $r2(e26);
        var t5 = [];
        for (var r4 in rt3(e26)) pt3.call(e26, r4) && "constructor" != r4 && t5.push(r4);
        return t5;
      }
      function pi2(e26) {
        if (!ws2(e26)) return function(e27) {
          var t6 = [];
          if (null != e27) for (var r5 in rt3(e27)) t6.push(r5);
          return t6;
        }(e26);
        var t5 = Xa2(e26), r4 = [];
        for (var n3 in e26) ("constructor" != n3 || !t5 && pt3.call(e26, n3)) && r4.push(n3);
        return r4;
      }
      function fi2(e26, t5) {
        return e26 < t5;
      }
      function hi2(e26, t5) {
        var r4 = -1, n3 = bs2(e26) ? Xe3(e26.length) : [];
        return Vn2(e26, function(e27, i2, a3) {
          n3[++r4] = t5(e27, i2, a3);
        }), n3;
      }
      function di2(e26) {
        var t5 = Ra2(e26);
        return 1 == t5.length && t5[0][2] ? Za2(t5[0][0], t5[0][1]) : function(r4) {
          return r4 === e26 || si2(r4, e26, t5);
        };
      }
      function mi2(e26, t5) {
        return Ka2(e26) && Ya2(t5) ? Za2(lo2(e26), t5) : function(r4) {
          var i2 = eu2(r4, e26);
          return i2 === n2 && i2 === t5 ? tu2(r4, e26) : oi2(t5, i2, d2 | m2);
        };
      }
      function gi2(e26, t5, r4, i2, a3) {
        e26 !== t5 && zn(t5, function(o3, s3) {
          if (a3 || (a3 = new Sn2()), ws2(o3)) !function(e27, t6, r5, i3, a4, o4, s4) {
            var u4 = ro2(e27, r5), c3 = ro2(t6, r5), l3 = s4.get(c3);
            if (l3) return void wn2(e27, r5, l3);
            var p3 = o4 ? o4(u4, c3, r5 + "", e27, t6, s4) : n2, f3 = p3 === n2;
            if (f3) {
              var h3 = vs(c3), d3 = !h3 && Cs2(c3), m3 = !h3 && !d3 && js2(c3);
              p3 = c3, h3 || d3 || m3 ? vs(u4) ? p3 = u4 : Es2(u4) ? p3 = na2(u4) : d3 ? (f3 = false, p3 = Xi2(c3, true)) : m3 ? (f3 = false, p3 = Zi2(c3, true)) : p3 = [] : Is2(c3) || ys(c3) ? (p3 = u4, ys(u4) ? p3 = Gs2(u4) : ws2(u4) && !Ds2(u4) || (p3 = $a2(c3))) : f3 = false;
            }
            f3 && (s4.set(c3, p3), a4(p3, c3, i3, o4, s4), s4.delete(c3));
            wn2(e27, r5, p3);
          }(e26, t5, s3, r4, gi2, i2, a3);
          else {
            var u3 = i2 ? i2(ro2(e26, s3), o3, s3 + "", e26, t5, a3) : n2;
            u3 === n2 && (u3 = o3), wn2(e26, s3, u3);
          }
        }, ou2);
      }
      function yi2(e26, t5) {
        var r4 = e26.length;
        if (r4) return za2(t5 += t5 < 0 ? r4 : 0, r4) ? e26[t5] : n2;
      }
      function vi2(e26, t5, r4) {
        var n3 = -1;
        return t5 = Yt2(t5.length ? t5 : [Pu2], mr2(Na2())), function(e27, t6) {
          var r5 = e27.length;
          for (e27.sort(t6); r5--; ) e27[r5] = e27[r5].value;
          return e27;
        }(hi2(e26, function(e27, r5, i2) {
          return { criteria: Yt2(t5, function(t6) {
            return t6(e27);
          }), index: ++n3, value: e27 };
        }), function(e27, t6) {
          return function(e28, t7, r5) {
            var n4 = -1, i2 = e28.criteria, a3 = t7.criteria, o3 = i2.length, s3 = r5.length;
            for (; ++n4 < o3; ) {
              var u3 = ea2(i2[n4], a3[n4]);
              if (u3) {
                if (n4 >= s3) return u3;
                var c3 = r5[n4];
                return u3 * ("desc" == c3 ? -1 : 1);
              }
            }
            return e28.index - t7.index;
          }(e27, t6, r4);
        });
      }
      function xi2(e26, t5, r4) {
        for (var n3 = -1, i2 = t5.length, a3 = {}; ++n3 < i2; ) {
          var o3 = t5[n3], s3 = Xn2(e26, o3);
          r4(s3, o3) && Ai2(a3, Hi2(o3, e26), s3);
        }
        return a3;
      }
      function bi2(e26, t5, r4, n3) {
        var i2 = n3 ? sr2 : or2, a3 = -1, o3 = t5.length, s3 = e26;
        for (e26 === t5 && (t5 = na2(t5)), r4 && (s3 = Yt2(e26, mr2(r4))); ++a3 < o3; ) for (var u3 = 0, c3 = t5[a3], l3 = r4 ? r4(c3) : c3; (u3 = i2(s3, l3, u3, n3)) > -1; ) s3 !== e26 && jt3.call(s3, u3, 1), jt3.call(e26, u3, 1);
        return e26;
      }
      function Ei2(e26, t5) {
        for (var r4 = e26 ? t5.length : 0, n3 = r4 - 1; r4--; ) {
          var i2 = t5[r4];
          if (r4 == n3 || i2 !== a3) {
            var a3 = i2;
            za2(i2) ? jt3.call(e26, i2, 1) : Mi2(e26, i2);
          }
        }
        return e26;
      }
      function Ci2(e26, t5) {
        return e26 + Mr2(Jr2() * (t5 - e26 + 1));
      }
      function Si2(e26, t5) {
        var r4 = "";
        if (!e26 || t5 < 1 || t5 > B2) return r4;
        do {
          t5 % 2 && (r4 += e26), (t5 = Mr2(t5 / 2)) && (e26 += e26);
        } while (t5);
        return r4;
      }
      function ki2(e26, t5) {
        return ao2(eo2(e26, t5, Pu2), e26 + "");
      }
      function Di2(e26) {
        return Dn2(du2(e26));
      }
      function Fi2(e26, t5) {
        var r4 = du2(e26);
        return uo2(r4, Ln2(t5, 0, r4.length));
      }
      function Ai2(e26, t5, r4, i2) {
        if (!ws2(e26)) return e26;
        for (var a3 = -1, o3 = (t5 = Hi2(t5, e26)).length, s3 = o3 - 1, u3 = e26; null != u3 && ++a3 < o3; ) {
          var c3 = lo2(t5[a3]), l3 = r4;
          if (a3 != s3) {
            var p3 = u3[c3];
            (l3 = i2 ? i2(p3, c3, u3) : n2) === n2 && (l3 = ws2(p3) ? p3 : za2(t5[a3 + 1]) ? [] : {});
          }
          _n2(u3, c3, l3), u3 = u3[c3];
        }
        return e26;
      }
      var wi2 = nn2 ? function(e26, t5) {
        return nn2.set(e26, t5), e26;
      } : Pu2, _i2 = Or2 ? function(e26, t5) {
        return Or2(e26, "toString", { configurable: true, enumerable: false, value: wu2(t5), writable: true });
      } : Pu2;
      function Ti2(e26) {
        return uo2(du2(e26));
      }
      function Pi2(e26, t5, r4) {
        var n3 = -1, i2 = e26.length;
        t5 < 0 && (t5 = -t5 > i2 ? 0 : i2 + t5), (r4 = r4 > i2 ? i2 : r4) < 0 && (r4 += i2), i2 = t5 > r4 ? 0 : r4 - t5 >>> 0, t5 >>>= 0;
        for (var a3 = Xe3(i2); ++n3 < i2; ) a3[n3] = e26[n3 + t5];
        return a3;
      }
      function Ii2(e26, t5) {
        var r4;
        return Vn2(e26, function(e27, n3, i2) {
          return !(r4 = t5(e27, n3, i2));
        }), !!r4;
      }
      function Bi2(e26, t5, r4) {
        var n3 = 0, i2 = null == e26 ? n3 : e26.length;
        if ("number" == typeof t5 && t5 == t5 && i2 <= R2) {
          for (; n3 < i2; ) {
            var a3 = n3 + i2 >>> 1, o3 = e26[a3];
            null !== o3 && !Ns2(o3) && (r4 ? o3 <= t5 : o3 < t5) ? n3 = a3 + 1 : i2 = a3;
          }
          return i2;
        }
        return Oi2(e26, t5, Pu2, r4);
      }
      function Oi2(e26, t5, r4, i2) {
        t5 = r4(t5);
        for (var a3 = 0, o3 = null == e26 ? 0 : e26.length, s3 = t5 != t5, u3 = null === t5, c3 = Ns2(t5), l3 = t5 === n2; a3 < o3; ) {
          var p3 = Mr2((a3 + o3) / 2), f3 = r4(e26[p3]), h3 = f3 !== n2, d3 = null === f3, m3 = f3 == f3, g3 = Ns2(f3);
          if (s3) var y3 = i2 || m3;
          else y3 = l3 ? m3 && (i2 || h3) : u3 ? m3 && h3 && (i2 || !d3) : c3 ? m3 && h3 && !d3 && (i2 || !g3) : !d3 && !g3 && (i2 ? f3 <= t5 : f3 < t5);
          y3 ? a3 = p3 + 1 : o3 = p3;
        }
        return zr2(o3, j2);
      }
      function Li2(e26, t5) {
        for (var r4 = -1, n3 = e26.length, i2 = 0, a3 = []; ++r4 < n3; ) {
          var o3 = e26[r4], s3 = t5 ? t5(o3) : o3;
          if (!r4 || !ds(s3, u3)) {
            var u3 = s3;
            a3[i2++] = 0 === o3 ? 0 : o3;
          }
        }
        return a3;
      }
      function Ni(e26) {
        return "number" == typeof e26 ? e26 : Ns2(e26) ? L2 : +e26;
      }
      function ji(e26) {
        if ("string" == typeof e26) return e26;
        if (vs(e26)) return Yt2(e26, ji) + "";
        if (Ns2(e26)) return hn2 ? hn2.call(e26) : "";
        var t5 = e26 + "";
        return "0" == t5 && 1 / e26 == -I2 ? "-0" : t5;
      }
      function Ri(e26, t5, r4) {
        var n3 = -1, i2 = Qt2, o3 = e26.length, s3 = true, u3 = [], c3 = u3;
        if (r4) s3 = false, i2 = Xt2;
        else if (o3 >= a2) {
          var l3 = t5 ? null : Sa2(e26);
          if (l3) return Ar2(l3);
          s3 = false, i2 = yr2, c3 = new Cn2();
        } else c3 = t5 ? [] : u3;
        e: for (; ++n3 < o3; ) {
          var p3 = e26[n3], f3 = t5 ? t5(p3) : p3;
          if (p3 = r4 || 0 !== p3 ? p3 : 0, s3 && f3 == f3) {
            for (var h3 = c3.length; h3--; ) if (c3[h3] === f3) continue e;
            t5 && c3.push(f3), u3.push(p3);
          } else i2(c3, f3, r4) || (c3 !== u3 && c3.push(f3), u3.push(p3));
        }
        return u3;
      }
      function Mi2(e26, t5) {
        return null == (e26 = to2(e26, t5 = Hi2(t5, e26))) || delete e26[lo2(ko(t5))];
      }
      function Vi2(e26, t5, r4, n3) {
        return Ai2(e26, t5, r4(Xn2(e26, t5)), n3);
      }
      function Ui2(e26, t5, r4, n3) {
        for (var i2 = e26.length, a3 = n3 ? i2 : -1; (n3 ? a3-- : ++a3 < i2) && t5(e26[a3], a3, e26); ) ;
        return r4 ? Pi2(e26, n3 ? 0 : a3, n3 ? a3 + 1 : i2) : Pi2(e26, n3 ? a3 + 1 : 0, n3 ? i2 : a3);
      }
      function qi2(e26, t5) {
        var r4 = e26;
        return r4 instanceof vn2 && (r4 = r4.value()), er2(t5, function(e27, t6) {
          return t6.func.apply(t6.thisArg, Zt2([e27], t6.args));
        }, r4);
      }
      function Wi2(e26, t5, r4) {
        var n3 = e26.length;
        if (n3 < 2) return n3 ? Ri(e26[0]) : [];
        for (var i2 = -1, a3 = Xe3(n3); ++i2 < n3; ) for (var o3 = e26[i2], s3 = -1; ++s3 < n3; ) s3 != i2 && (a3[i2] = Mn2(a3[i2] || o3, e26[s3], t5, r4));
        return Ri(Gn2(a3, 1), t5, r4);
      }
      function $i2(e26, t5, r4) {
        for (var i2 = -1, a3 = e26.length, o3 = t5.length, s3 = {}; ++i2 < a3; ) {
          var u3 = i2 < o3 ? t5[i2] : n2;
          r4(s3, e26[i2], u3);
        }
        return s3;
      }
      function Gi2(e26) {
        return Es2(e26) ? e26 : [];
      }
      function zi2(e26) {
        return "function" == typeof e26 ? e26 : Pu2;
      }
      function Hi2(e26, t5) {
        return vs(e26) ? e26 : Ka2(e26, t5) ? [e26] : co2(zs2(e26));
      }
      var Ki2 = ki2;
      function Ji2(e26, t5, r4) {
        var i2 = e26.length;
        return r4 = r4 === n2 ? i2 : r4, !t5 && r4 >= i2 ? e26 : Pi2(e26, t5, r4);
      }
      var Qi2 = Lr2 || function(e26) {
        return It2.clearTimeout(e26);
      };
      function Xi2(e26, t5) {
        if (t5) return e26.slice();
        var r4 = e26.length, n3 = Pt3 ? Pt3(r4) : new e26.constructor(r4);
        return e26.copy(n3), n3;
      }
      function Yi2(e26) {
        var t5 = new e26.constructor(e26.byteLength);
        return new Tt3(t5).set(new Tt3(e26)), t5;
      }
      function Zi2(e26, t5) {
        var r4 = t5 ? Yi2(e26.buffer) : e26.buffer;
        return new e26.constructor(r4, e26.byteOffset, e26.length);
      }
      function ea2(e26, t5) {
        if (e26 !== t5) {
          var r4 = e26 !== n2, i2 = null === e26, a3 = e26 == e26, o3 = Ns2(e26), s3 = t5 !== n2, u3 = null === t5, c3 = t5 == t5, l3 = Ns2(t5);
          if (!u3 && !l3 && !o3 && e26 > t5 || o3 && s3 && c3 && !u3 && !l3 || i2 && s3 && c3 || !r4 && c3 || !a3) return 1;
          if (!i2 && !o3 && !l3 && e26 < t5 || l3 && r4 && a3 && !i2 && !o3 || u3 && r4 && a3 || !s3 && a3 || !c3) return -1;
        }
        return 0;
      }
      function ta2(e26, t5, r4, n3) {
        for (var i2 = -1, a3 = e26.length, o3 = r4.length, s3 = -1, u3 = t5.length, c3 = Gr2(a3 - o3, 0), l3 = Xe3(u3 + c3), p3 = !n3; ++s3 < u3; ) l3[s3] = t5[s3];
        for (; ++i2 < o3; ) (p3 || i2 < a3) && (l3[r4[i2]] = e26[i2]);
        for (; c3--; ) l3[s3++] = e26[i2++];
        return l3;
      }
      function ra2(e26, t5, r4, n3) {
        for (var i2 = -1, a3 = e26.length, o3 = -1, s3 = r4.length, u3 = -1, c3 = t5.length, l3 = Gr2(a3 - s3, 0), p3 = Xe3(l3 + c3), f3 = !n3; ++i2 < l3; ) p3[i2] = e26[i2];
        for (var h3 = i2; ++u3 < c3; ) p3[h3 + u3] = t5[u3];
        for (; ++o3 < s3; ) (f3 || i2 < a3) && (p3[h3 + r4[o3]] = e26[i2++]);
        return p3;
      }
      function na2(e26, t5) {
        var r4 = -1, n3 = e26.length;
        for (t5 || (t5 = Xe3(n3)); ++r4 < n3; ) t5[r4] = e26[r4];
        return t5;
      }
      function ia2(e26, t5, r4, i2) {
        var a3 = !r4;
        r4 || (r4 = {});
        for (var o3 = -1, s3 = t5.length; ++o3 < s3; ) {
          var u3 = t5[o3], c3 = i2 ? i2(r4[u3], e26[u3], u3, r4, e26) : n2;
          c3 === n2 && (c3 = e26[u3]), a3 ? Bn2(r4, u3, c3) : _n2(r4, u3, c3);
        }
        return r4;
      }
      function aa2(e26, t5) {
        return function(r4, n3) {
          var i2 = vs(r4) ? Gt2 : Pn2, a3 = t5 ? t5() : {};
          return i2(r4, e26, Na2(n3, 2), a3);
        };
      }
      function oa2(e26) {
        return ki2(function(t5, r4) {
          var i2 = -1, a3 = r4.length, o3 = a3 > 1 ? r4[a3 - 1] : n2, s3 = a3 > 2 ? r4[2] : n2;
          for (o3 = e26.length > 3 && "function" == typeof o3 ? (a3--, o3) : n2, s3 && Ha2(r4[0], r4[1], s3) && (o3 = a3 < 3 ? n2 : o3, a3 = 1), t5 = rt3(t5); ++i2 < a3; ) {
            var u3 = r4[i2];
            u3 && e26(t5, u3, i2, o3);
          }
          return t5;
        });
      }
      function sa2(e26, t5) {
        return function(r4, n3) {
          if (null == r4) return r4;
          if (!bs2(r4)) return e26(r4, n3);
          for (var i2 = r4.length, a3 = t5 ? i2 : -1, o3 = rt3(r4); (t5 ? a3-- : ++a3 < i2) && false !== n3(o3[a3], a3, o3); ) ;
          return r4;
        };
      }
      function ua2(e26) {
        return function(t5, r4, n3) {
          for (var i2 = -1, a3 = rt3(t5), o3 = n3(t5), s3 = o3.length; s3--; ) {
            var u3 = o3[e26 ? s3 : ++i2];
            if (false === r4(a3[u3], u3, a3)) break;
          }
          return t5;
        };
      }
      function ca2(e26) {
        return function(t5) {
          var r4 = Sr(t5 = zs2(t5)) ? Tr2(t5) : n2, i2 = r4 ? r4[0] : t5.charAt(0), a3 = r4 ? Ji2(r4, 1).join("") : t5.slice(1);
          return i2[e26]() + a3;
        };
      }
      function la2(e26) {
        return function(t5) {
          return er2(Du2(yu2(t5).replace(yt2, "")), e26, "");
        };
      }
      function pa2(e26) {
        return function() {
          var t5 = arguments;
          switch (t5.length) {
            case 0:
              return new e26();
            case 1:
              return new e26(t5[0]);
            case 2:
              return new e26(t5[0], t5[1]);
            case 3:
              return new e26(t5[0], t5[1], t5[2]);
            case 4:
              return new e26(t5[0], t5[1], t5[2], t5[3]);
            case 5:
              return new e26(t5[0], t5[1], t5[2], t5[3], t5[4]);
            case 6:
              return new e26(t5[0], t5[1], t5[2], t5[3], t5[4], t5[5]);
            case 7:
              return new e26(t5[0], t5[1], t5[2], t5[3], t5[4], t5[5], t5[6]);
          }
          var r4 = mn2(e26.prototype), n3 = e26.apply(r4, t5);
          return ws2(n3) ? n3 : r4;
        };
      }
      function fa2(e26) {
        return function(t5, r4, i2) {
          var a3 = rt3(t5);
          if (!bs2(t5)) {
            var o3 = Na2(r4, 3);
            t5 = au2(t5), r4 = function(e27) {
              return o3(a3[e27], e27, a3);
            };
          }
          var s3 = e26(t5, r4, i2);
          return s3 > -1 ? a3[o3 ? t5[s3] : s3] : n2;
        };
      }
      function ha2(e26) {
        return Ta2(function(t5) {
          var r4 = t5.length, i2 = r4, a3 = yn2.prototype.thru;
          for (e26 && t5.reverse(); i2--; ) {
            var o3 = t5[i2];
            if ("function" != typeof o3) throw new at3(s2);
            if (a3 && !u3 && "wrapper" == Oa2(o3)) var u3 = new yn2([], true);
          }
          for (i2 = u3 ? i2 : r4; ++i2 < r4; ) {
            var c3 = Oa2(o3 = t5[i2]), l3 = "wrapper" == c3 ? Ba2(o3) : n2;
            u3 = l3 && Ja2(l3[0]) && l3[1] == (S3 | x2 | E2 | k2) && !l3[4].length && 1 == l3[9] ? u3[Oa2(l3[0])].apply(u3, l3[3]) : 1 == o3.length && Ja2(o3) ? u3[c3]() : u3.thru(o3);
          }
          return function() {
            var e27 = arguments, n3 = e27[0];
            if (u3 && 1 == e27.length && vs(n3)) return u3.plant(n3).value();
            for (var i3 = 0, a4 = r4 ? t5[i3].apply(this, e27) : n3; ++i3 < r4; ) a4 = t5[i3].call(this, a4);
            return a4;
          };
        });
      }
      function da2(e26, t5, r4, i2, a3, o3, s3, u3, c3, l3) {
        var p3 = t5 & S3, f3 = t5 & g2, h3 = t5 & y2, d3 = t5 & (x2 | b2), m3 = t5 & D2, v3 = h3 ? n2 : pa2(e26);
        return function g3() {
          for (var y3 = arguments.length, x3 = Xe3(y3), b3 = y3; b3--; ) x3[b3] = arguments[b3];
          if (d3) var E3 = La2(g3), C4 = function(e27, t6) {
            for (var r5 = e27.length, n3 = 0; r5--; ) e27[r5] === t6 && ++n3;
            return n3;
          }(x3, E3);
          if (i2 && (x3 = ta2(x3, i2, a3, d3)), o3 && (x3 = ra2(x3, o3, s3, d3)), y3 -= C4, d3 && y3 < l3) {
            var S4 = Fr2(x3, E3);
            return Ea2(e26, t5, da2, g3.placeholder, r4, x3, S4, u3, c3, l3 - y3);
          }
          var k3 = f3 ? r4 : this, D3 = h3 ? k3[e26] : e26;
          return y3 = x3.length, u3 ? x3 = function(e27, t6) {
            var r5 = e27.length, i3 = zr2(t6.length, r5), a4 = na2(e27);
            for (; i3--; ) {
              var o4 = t6[i3];
              e27[i3] = za2(o4, r5) ? a4[o4] : n2;
            }
            return e27;
          }(x3, u3) : m3 && y3 > 1 && x3.reverse(), p3 && c3 < y3 && (x3.length = c3), this && this !== It2 && this instanceof g3 && (D3 = v3 || pa2(D3)), D3.apply(k3, x3);
        };
      }
      function ma2(e26, t5) {
        return function(r4, n3) {
          return function(e27, t6, r5, n4) {
            return Kn2(e27, function(e28, i2, a3) {
              t6(n4, r5(e28), i2, a3);
            }), n4;
          }(r4, e26, t5(n3), {});
        };
      }
      function ga2(e26, t5) {
        return function(r4, i2) {
          var a3;
          if (r4 === n2 && i2 === n2) return t5;
          if (r4 !== n2 && (a3 = r4), i2 !== n2) {
            if (a3 === n2) return i2;
            "string" == typeof r4 || "string" == typeof i2 ? (r4 = ji(r4), i2 = ji(i2)) : (r4 = Ni(r4), i2 = Ni(i2)), a3 = e26(r4, i2);
          }
          return a3;
        };
      }
      function ya2(e26) {
        return Ta2(function(t5) {
          return t5 = Yt2(t5, mr2(Na2())), ki2(function(r4) {
            var n3 = this;
            return e26(t5, function(e27) {
              return $t2(e27, n3, r4);
            });
          });
        });
      }
      function va2(e26, t5) {
        var r4 = (t5 = t5 === n2 ? " " : ji(t5)).length;
        if (r4 < 2) return r4 ? Si2(t5, e26) : t5;
        var i2 = Si2(t5, Rr2(e26 / _r2(t5)));
        return Sr(t5) ? Ji2(Tr2(i2), 0, e26).join("") : i2.slice(0, e26);
      }
      function xa2(e26) {
        return function(t5, r4, i2) {
          return i2 && "number" != typeof i2 && Ha2(t5, r4, i2) && (r4 = i2 = n2), t5 = Us2(t5), r4 === n2 ? (r4 = t5, t5 = 0) : r4 = Us2(r4), function(e27, t6, r5, n3) {
            for (var i3 = -1, a3 = Gr2(Rr2((t6 - e27) / (r5 || 1)), 0), o3 = Xe3(a3); a3--; ) o3[n3 ? a3 : ++i3] = e27, e27 += r5;
            return o3;
          }(t5, r4, i2 = i2 === n2 ? t5 < r4 ? 1 : -1 : Us2(i2), e26);
        };
      }
      function ba2(e26) {
        return function(t5, r4) {
          return "string" == typeof t5 && "string" == typeof r4 || (t5 = $s2(t5), r4 = $s2(r4)), e26(t5, r4);
        };
      }
      function Ea2(e26, t5, r4, i2, a3, o3, s3, u3, c3, l3) {
        var p3 = t5 & x2;
        t5 |= p3 ? E2 : C3, (t5 &= ~(p3 ? C3 : E2)) & v2 || (t5 &= ~(g2 | y2));
        var f3 = [e26, t5, a3, p3 ? o3 : n2, p3 ? s3 : n2, p3 ? n2 : o3, p3 ? n2 : s3, u3, c3, l3], h3 = r4.apply(n2, f3);
        return Ja2(e26) && no2(h3, f3), h3.placeholder = i2, oo2(h3, e26, t5);
      }
      function Ca2(e26) {
        var t5 = tt3[e26];
        return function(e27, r4) {
          if (e27 = $s2(e27), (r4 = null == r4 ? 0 : zr2(qs2(r4), 292)) && qr2(e27)) {
            var n3 = (zs2(e27) + "e").split("e");
            return +((n3 = (zs2(t5(n3[0] + "e" + (+n3[1] + r4))) + "e").split("e"))[0] + "e" + (+n3[1] - r4));
          }
          return t5(e27);
        };
      }
      var Sa2 = en2 && 1 / Ar2(new en2([, -0]))[1] == I2 ? function(e26) {
        return new en2(e26);
      } : Nu2;
      function ka2(e26) {
        return function(t5) {
          var r4 = qa2(t5);
          return r4 == J2 ? kr(t5) : r4 == te2 ? wr2(t5) : function(e27, t6) {
            return Yt2(t6, function(t7) {
              return [t7, e27[t7]];
            });
          }(t5, e26(t5));
        };
      }
      function Da2(e26, t5, r4, i2, a3, o3, u3, c3) {
        var p3 = t5 & y2;
        if (!p3 && "function" != typeof e26) throw new at3(s2);
        var f3 = i2 ? i2.length : 0;
        if (f3 || (t5 &= ~(E2 | C3), i2 = a3 = n2), u3 = u3 === n2 ? u3 : Gr2(qs2(u3), 0), c3 = c3 === n2 ? c3 : qs2(c3), f3 -= a3 ? a3.length : 0, t5 & C3) {
          var h3 = i2, d3 = a3;
          i2 = a3 = n2;
        }
        var m3 = p3 ? n2 : Ba2(e26), D3 = [e26, t5, r4, i2, a3, h3, d3, o3, u3, c3];
        if (m3 && function(e27, t6) {
          var r5 = e27[1], n3 = t6[1], i3 = r5 | n3, a4 = i3 < (g2 | y2 | S3), o4 = n3 == S3 && r5 == x2 || n3 == S3 && r5 == k2 && e27[7].length <= t6[8] || n3 == (S3 | k2) && t6[7].length <= t6[8] && r5 == x2;
          if (!a4 && !o4) return e27;
          n3 & g2 && (e27[2] = t6[2], i3 |= r5 & g2 ? 0 : v2);
          var s3 = t6[3];
          if (s3) {
            var u4 = e27[3];
            e27[3] = u4 ? ta2(u4, s3, t6[4]) : s3, e27[4] = u4 ? Fr2(e27[3], l2) : t6[4];
          }
          (s3 = t6[5]) && (u4 = e27[5], e27[5] = u4 ? ra2(u4, s3, t6[6]) : s3, e27[6] = u4 ? Fr2(e27[5], l2) : t6[6]);
          (s3 = t6[7]) && (e27[7] = s3);
          n3 & S3 && (e27[8] = null == e27[8] ? t6[8] : zr2(e27[8], t6[8]));
          null == e27[9] && (e27[9] = t6[9]);
          e27[0] = t6[0], e27[1] = i3;
        }(D3, m3), e26 = D3[0], t5 = D3[1], r4 = D3[2], i2 = D3[3], a3 = D3[4], !(c3 = D3[9] = D3[9] === n2 ? p3 ? 0 : e26.length : Gr2(D3[9] - f3, 0)) && t5 & (x2 | b2) && (t5 &= ~(x2 | b2)), t5 && t5 != g2) F3 = t5 == x2 || t5 == b2 ? function(e27, t6, r5) {
          var i3 = pa2(e27);
          return function a4() {
            for (var o4 = arguments.length, s3 = Xe3(o4), u4 = o4, c4 = La2(a4); u4--; ) s3[u4] = arguments[u4];
            var l3 = o4 < 3 && s3[0] !== c4 && s3[o4 - 1] !== c4 ? [] : Fr2(s3, c4);
            return (o4 -= l3.length) < r5 ? Ea2(e27, t6, da2, a4.placeholder, n2, s3, l3, n2, n2, r5 - o4) : $t2(this && this !== It2 && this instanceof a4 ? i3 : e27, this, s3);
          };
        }(e26, t5, c3) : t5 != E2 && t5 != (g2 | E2) || a3.length ? da2.apply(n2, D3) : function(e27, t6, r5, n3) {
          var i3 = t6 & g2, a4 = pa2(e27);
          return function t7() {
            for (var o4 = -1, s3 = arguments.length, u4 = -1, c4 = n3.length, l3 = Xe3(c4 + s3), p4 = this && this !== It2 && this instanceof t7 ? a4 : e27; ++u4 < c4; ) l3[u4] = n3[u4];
            for (; s3--; ) l3[u4++] = arguments[++o4];
            return $t2(p4, i3 ? r5 : this, l3);
          };
        }(e26, t5, r4, i2);
        else var F3 = function(e27, t6, r5) {
          var n3 = t6 & g2, i3 = pa2(e27);
          return function t7() {
            return (this && this !== It2 && this instanceof t7 ? i3 : e27).apply(n3 ? r5 : this, arguments);
          };
        }(e26, t5, r4);
        return oo2((m3 ? wi2 : no2)(F3, D3), e26, t5);
      }
      function Fa2(e26, t5, r4, i2) {
        return e26 === n2 || ds(e26, ut3[r4]) && !pt3.call(i2, r4) ? t5 : e26;
      }
      function Aa2(e26, t5, r4, i2, a3, o3) {
        return ws2(e26) && ws2(t5) && (o3.set(t5, e26), gi2(e26, t5, n2, Aa2, o3), o3.delete(t5)), e26;
      }
      function wa2(e26) {
        return Is2(e26) ? n2 : e26;
      }
      function _a3(e26, t5, r4, i2, a3, o3) {
        var s3 = r4 & d2, u3 = e26.length, c3 = t5.length;
        if (u3 != c3 && !(s3 && c3 > u3)) return false;
        var l3 = o3.get(e26);
        if (l3 && o3.get(t5)) return l3 == t5;
        var p3 = -1, f3 = true, h3 = r4 & m2 ? new Cn2() : n2;
        for (o3.set(e26, t5), o3.set(t5, e26); ++p3 < u3; ) {
          var g3 = e26[p3], y3 = t5[p3];
          if (i2) var v3 = s3 ? i2(y3, g3, p3, t5, e26, o3) : i2(g3, y3, p3, e26, t5, o3);
          if (v3 !== n2) {
            if (v3) continue;
            f3 = false;
            break;
          }
          if (h3) {
            if (!rr2(t5, function(e27, t6) {
              if (!yr2(h3, t6) && (g3 === e27 || a3(g3, e27, r4, i2, o3))) return h3.push(t6);
            })) {
              f3 = false;
              break;
            }
          } else if (g3 !== y3 && !a3(g3, y3, r4, i2, o3)) {
            f3 = false;
            break;
          }
        }
        return o3.delete(e26), o3.delete(t5), f3;
      }
      function Ta2(e26) {
        return ao2(eo2(e26, n2, xo2), e26 + "");
      }
      function Pa2(e26) {
        return Yn2(e26, au2, Va2);
      }
      function Ia2(e26) {
        return Yn2(e26, ou2, Ua2);
      }
      var Ba2 = nn2 ? function(e26) {
        return nn2.get(e26);
      } : Nu2;
      function Oa2(e26) {
        for (var t5 = e26.name + "", r4 = an2[t5], n3 = pt3.call(an2, t5) ? r4.length : 0; n3--; ) {
          var i2 = r4[n3], a3 = i2.func;
          if (null == a3 || a3 == e26) return i2.name;
        }
        return t5;
      }
      function La2(e26) {
        return (pt3.call(dn2, "placeholder") ? dn2 : e26).placeholder;
      }
      function Na2() {
        var e26 = dn2.iteratee || Iu2;
        return e26 = e26 === Iu2 ? ci2 : e26, arguments.length ? e26(arguments[0], arguments[1]) : e26;
      }
      function ja2(e26, t5) {
        var r4 = e26.__data__;
        return function(e27) {
          var t6 = i(e27);
          return "string" == t6 || "number" == t6 || "symbol" == t6 || "boolean" == t6 ? "__proto__" !== e27 : null === e27;
        }(t5) ? r4["string" == typeof t5 ? "string" : "hash"] : r4.map;
      }
      function Ra2(e26) {
        for (var t5 = au2(e26), r4 = t5.length; r4--; ) {
          var n3 = t5[r4], i2 = e26[n3];
          t5[r4] = [n3, i2, Ya2(i2)];
        }
        return t5;
      }
      function Ma2(e26, t5) {
        var r4 = function(e27, t6) {
          return null == e27 ? n2 : e27[t6];
        }(e26, t5);
        return ui2(r4) ? r4 : n2;
      }
      var Va2 = Vr2 ? function(e26) {
        return null == e26 ? [] : (e26 = rt3(e26), Jt2(Vr2(e26), function(t5) {
          return Nt3.call(e26, t5);
        }));
      } : Wu2, Ua2 = Vr2 ? function(e26) {
        for (var t5 = []; e26; ) Zt2(t5, Va2(e26)), e26 = Bt3(e26);
        return t5;
      } : Wu2, qa2 = Zn2;
      function Wa2(e26, t5, r4) {
        for (var n3 = -1, i2 = (t5 = Hi2(t5, e26)).length, a3 = false; ++n3 < i2; ) {
          var o3 = lo2(t5[n3]);
          if (!(a3 = null != e26 && r4(e26, o3))) break;
          e26 = e26[o3];
        }
        return a3 || ++n3 != i2 ? a3 : !!(i2 = null == e26 ? 0 : e26.length) && As2(i2) && za2(o3, i2) && (vs(e26) || ys(e26));
      }
      function $a2(e26) {
        return "function" != typeof e26.constructor || Xa2(e26) ? {} : mn2(Bt3(e26));
      }
      function Ga2(e26) {
        return vs(e26) || ys(e26) || !!(nr3 && e26 && e26[nr3]);
      }
      function za2(e26, t5) {
        var r4 = i(e26);
        return !!(t5 = null == t5 ? B2 : t5) && ("number" == r4 || "symbol" != r4 && He2.test(e26)) && e26 > -1 && e26 % 1 == 0 && e26 < t5;
      }
      function Ha2(e26, t5, r4) {
        if (!ws2(r4)) return false;
        var n3 = i(t5);
        return !!("number" == n3 ? bs2(r4) && za2(t5, r4.length) : "string" == n3 && t5 in r4) && ds(r4[t5], e26);
      }
      function Ka2(e26, t5) {
        if (vs(e26)) return false;
        var r4 = i(e26);
        return !("number" != r4 && "symbol" != r4 && "boolean" != r4 && null != e26 && !Ns2(e26)) || (_e2.test(e26) || !we2.test(e26) || null != t5 && e26 in rt3(t5));
      }
      function Ja2(e26) {
        var t5 = Oa2(e26), r4 = dn2[t5];
        if ("function" != typeof r4 || !(t5 in vn2.prototype)) return false;
        if (e26 === r4) return true;
        var n3 = Ba2(r4);
        return !!n3 && e26 === n3[0];
      }
      (Xr2 && qa2(new Xr2(new ArrayBuffer(1))) != ue2 || Yr2 && qa2(new Yr2()) != J2 || Zr2 && "[object Promise]" != qa2(Zr2.resolve()) || en2 && qa2(new en2()) != te2 || tn2 && qa2(new tn2()) != ae2) && (qa2 = function(e26) {
        var t5 = Zn2(e26), r4 = t5 == Y2 ? e26.constructor : n2, i2 = r4 ? po2(r4) : "";
        if (i2) switch (i2) {
          case on3:
            return ue2;
          case sn2:
            return J2;
          case un2:
            return "[object Promise]";
          case cn2:
            return te2;
          case ln2:
            return ae2;
        }
        return t5;
      });
      var Qa2 = ct3 ? Ds2 : $u2;
      function Xa2(e26) {
        var t5 = e26 && e26.constructor;
        return e26 === ("function" == typeof t5 && t5.prototype || ut3);
      }
      function Ya2(e26) {
        return e26 == e26 && !ws2(e26);
      }
      function Za2(e26, t5) {
        return function(r4) {
          return null != r4 && (r4[e26] === t5 && (t5 !== n2 || e26 in rt3(r4)));
        };
      }
      function eo2(e26, t5, r4) {
        return t5 = Gr2(t5 === n2 ? e26.length - 1 : t5, 0), function() {
          for (var n3 = arguments, i2 = -1, a3 = Gr2(n3.length - t5, 0), o3 = Xe3(a3); ++i2 < a3; ) o3[i2] = n3[t5 + i2];
          i2 = -1;
          for (var s3 = Xe3(t5 + 1); ++i2 < t5; ) s3[i2] = n3[i2];
          return s3[t5] = r4(o3), $t2(e26, this, s3);
        };
      }
      function to2(e26, t5) {
        return t5.length < 2 ? e26 : Xn2(e26, Pi2(t5, 0, -1));
      }
      function ro2(e26, t5) {
        if (("constructor" !== t5 || "function" != typeof e26[t5]) && "__proto__" != t5) return e26[t5];
      }
      var no2 = so2(wi2), io2 = jr2 || function(e26, t5) {
        return It2.setTimeout(e26, t5);
      }, ao2 = so2(_i2);
      function oo2(e26, t5, r4) {
        var n3 = t5 + "";
        return ao2(e26, function(e27, t6) {
          var r5 = t6.length;
          if (!r5) return e27;
          var n4 = r5 - 1;
          return t6[n4] = (r5 > 1 ? "& " : "") + t6[n4], t6 = t6.join(r5 > 2 ? ", " : " "), e27.replace(Ne2, "{\n/* [wrapped with " + t6 + "] */\n");
        }(n3, function(e27, t6) {
          return zt2(M2, function(r5) {
            var n4 = "_." + r5[0];
            t6 & r5[1] && !Qt2(e27, n4) && e27.push(n4);
          }), e27.sort();
        }(function(e27) {
          var t6 = e27.match(je2);
          return t6 ? t6[1].split(Re2) : [];
        }(n3), r4)));
      }
      function so2(e26) {
        var t5 = 0, r4 = 0;
        return function() {
          var i2 = Hr2(), a3 = _2 - (i2 - r4);
          if (r4 = i2, a3 > 0) {
            if (++t5 >= w2) return arguments[0];
          } else t5 = 0;
          return e26.apply(n2, arguments);
        };
      }
      function uo2(e26, t5) {
        var r4 = -1, i2 = e26.length, a3 = i2 - 1;
        for (t5 = t5 === n2 ? i2 : t5; ++r4 < t5; ) {
          var o3 = Ci2(r4, a3), s3 = e26[o3];
          e26[o3] = e26[r4], e26[r4] = s3;
        }
        return e26.length = t5, e26;
      }
      var co2 = function(e26) {
        var t5 = us2(e26, function(e27) {
          return r4.size === c2 && r4.clear(), e27;
        }), r4 = t5.cache;
        return t5;
      }(function(e26) {
        var t5 = [];
        return 46 === e26.charCodeAt(0) && t5.push(""), e26.replace(Te2, function(e27, r4, n3, i2) {
          t5.push(n3 ? i2.replace(Ve2, "$1") : r4 || e27);
        }), t5;
      });
      function lo2(e26) {
        if ("string" == typeof e26 || Ns2(e26)) return e26;
        var t5 = e26 + "";
        return "0" == t5 && 1 / e26 == -I2 ? "-0" : t5;
      }
      function po2(e26) {
        if (null != e26) {
          try {
            return lt4.call(e26);
          } catch (e27) {
          }
          try {
            return e26 + "";
          } catch (e27) {
          }
        }
        return "";
      }
      function fo2(e26) {
        if (e26 instanceof vn2) return e26.clone();
        var t5 = new yn2(e26.__wrapped__, e26.__chain__);
        return t5.__actions__ = na2(e26.__actions__), t5.__index__ = e26.__index__, t5.__values__ = e26.__values__, t5;
      }
      var ho2 = ki2(function(e26, t5) {
        return Es2(e26) ? Mn2(e26, Gn2(t5, 1, Es2, true)) : [];
      }), mo2 = ki2(function(e26, t5) {
        var r4 = ko(t5);
        return Es2(r4) && (r4 = n2), Es2(e26) ? Mn2(e26, Gn2(t5, 1, Es2, true), Na2(r4, 2)) : [];
      }), go2 = ki2(function(e26, t5) {
        var r4 = ko(t5);
        return Es2(r4) && (r4 = n2), Es2(e26) ? Mn2(e26, Gn2(t5, 1, Es2, true), n2, r4) : [];
      });
      function yo2(e26, t5, r4) {
        var n3 = null == e26 ? 0 : e26.length;
        if (!n3) return -1;
        var i2 = null == r4 ? 0 : qs2(r4);
        return i2 < 0 && (i2 = Gr2(n3 + i2, 0)), ar2(e26, Na2(t5, 3), i2);
      }
      function vo2(e26, t5, r4) {
        var i2 = null == e26 ? 0 : e26.length;
        if (!i2) return -1;
        var a3 = i2 - 1;
        return r4 !== n2 && (a3 = qs2(r4), a3 = r4 < 0 ? Gr2(i2 + a3, 0) : zr2(a3, i2 - 1)), ar2(e26, Na2(t5, 3), a3, true);
      }
      function xo2(e26) {
        return (null == e26 ? 0 : e26.length) ? Gn2(e26, 1) : [];
      }
      function bo2(e26) {
        return e26 && e26.length ? e26[0] : n2;
      }
      var Eo2 = ki2(function(e26) {
        var t5 = Yt2(e26, Gi2);
        return t5.length && t5[0] === e26[0] ? ni2(t5) : [];
      }), Co = ki2(function(e26) {
        var t5 = ko(e26), r4 = Yt2(e26, Gi2);
        return t5 === ko(r4) ? t5 = n2 : r4.pop(), r4.length && r4[0] === e26[0] ? ni2(r4, Na2(t5, 2)) : [];
      }), So = ki2(function(e26) {
        var t5 = ko(e26), r4 = Yt2(e26, Gi2);
        return (t5 = "function" == typeof t5 ? t5 : n2) && r4.pop(), r4.length && r4[0] === e26[0] ? ni2(r4, n2, t5) : [];
      });
      function ko(e26) {
        var t5 = null == e26 ? 0 : e26.length;
        return t5 ? e26[t5 - 1] : n2;
      }
      var Do = ki2(Fo);
      function Fo(e26, t5) {
        return e26 && e26.length && t5 && t5.length ? bi2(e26, t5) : e26;
      }
      var Ao = Ta2(function(e26, t5) {
        var r4 = null == e26 ? 0 : e26.length, n3 = On2(e26, t5);
        return Ei2(e26, Yt2(t5, function(e27) {
          return za2(e27, r4) ? +e27 : e27;
        }).sort(ea2)), n3;
      });
      function wo(e26) {
        return null == e26 ? e26 : Qr2.call(e26);
      }
      var _o2 = ki2(function(e26) {
        return Ri(Gn2(e26, 1, Es2, true));
      }), To2 = ki2(function(e26) {
        var t5 = ko(e26);
        return Es2(t5) && (t5 = n2), Ri(Gn2(e26, 1, Es2, true), Na2(t5, 2));
      }), Po2 = ki2(function(e26) {
        var t5 = ko(e26);
        return t5 = "function" == typeof t5 ? t5 : n2, Ri(Gn2(e26, 1, Es2, true), n2, t5);
      });
      function Io2(e26) {
        if (!e26 || !e26.length) return [];
        var t5 = 0;
        return e26 = Jt2(e26, function(e27) {
          if (Es2(e27)) return t5 = Gr2(e27.length, t5), true;
        }), dr2(t5, function(t6) {
          return Yt2(e26, lr2(t6));
        });
      }
      function Bo2(e26, t5) {
        if (!e26 || !e26.length) return [];
        var r4 = Io2(e26);
        return null == t5 ? r4 : Yt2(r4, function(e27) {
          return $t2(t5, n2, e27);
        });
      }
      var Oo2 = ki2(function(e26, t5) {
        return Es2(e26) ? Mn2(e26, t5) : [];
      }), Lo2 = ki2(function(e26) {
        return Wi2(Jt2(e26, Es2));
      }), No2 = ki2(function(e26) {
        var t5 = ko(e26);
        return Es2(t5) && (t5 = n2), Wi2(Jt2(e26, Es2), Na2(t5, 2));
      }), jo2 = ki2(function(e26) {
        var t5 = ko(e26);
        return t5 = "function" == typeof t5 ? t5 : n2, Wi2(Jt2(e26, Es2), n2, t5);
      }), Ro2 = ki2(Io2);
      var Mo2 = ki2(function(e26) {
        var t5 = e26.length, r4 = t5 > 1 ? e26[t5 - 1] : n2;
        return r4 = "function" == typeof r4 ? (e26.pop(), r4) : n2, Bo2(e26, r4);
      });
      function Vo2(e26) {
        var t5 = dn2(e26);
        return t5.__chain__ = true, t5;
      }
      function Uo2(e26, t5) {
        return t5(e26);
      }
      var qo2 = Ta2(function(e26) {
        var t5 = e26.length, r4 = t5 ? e26[0] : 0, i2 = this.__wrapped__, a3 = function(t6) {
          return On2(t6, e26);
        };
        return !(t5 > 1 || this.__actions__.length) && i2 instanceof vn2 && za2(r4) ? ((i2 = i2.slice(r4, +r4 + (t5 ? 1 : 0))).__actions__.push({ func: Uo2, args: [a3], thisArg: n2 }), new yn2(i2, this.__chain__).thru(function(e27) {
          return t5 && !e27.length && e27.push(n2), e27;
        })) : this.thru(a3);
      });
      var Wo2 = aa2(function(e26, t5, r4) {
        pt3.call(e26, r4) ? ++e26[r4] : Bn2(e26, r4, 1);
      });
      var $o2 = fa2(yo2), Go2 = fa2(vo2);
      function zo2(e26, t5) {
        return (vs(e26) ? zt2 : Vn2)(e26, Na2(t5, 3));
      }
      function Ho2(e26, t5) {
        return (vs(e26) ? Ht2 : Un2)(e26, Na2(t5, 3));
      }
      var Ko2 = aa2(function(e26, t5, r4) {
        pt3.call(e26, r4) ? e26[r4].push(t5) : Bn2(e26, r4, [t5]);
      });
      var Jo2 = ki2(function(e26, t5, r4) {
        var n3 = -1, i2 = "function" == typeof t5, a3 = bs2(e26) ? Xe3(e26.length) : [];
        return Vn2(e26, function(e27) {
          a3[++n3] = i2 ? $t2(t5, e27, r4) : ii2(e27, t5, r4);
        }), a3;
      }), Qo2 = aa2(function(e26, t5, r4) {
        Bn2(e26, r4, t5);
      });
      function Xo2(e26, t5) {
        return (vs(e26) ? Yt2 : hi2)(e26, Na2(t5, 3));
      }
      var Yo2 = aa2(function(e26, t5, r4) {
        e26[r4 ? 0 : 1].push(t5);
      }, function() {
        return [[], []];
      });
      var Zo2 = ki2(function(e26, t5) {
        if (null == e26) return [];
        var r4 = t5.length;
        return r4 > 1 && Ha2(e26, t5[0], t5[1]) ? t5 = [] : r4 > 2 && Ha2(t5[0], t5[1], t5[2]) && (t5 = [t5[0]]), vi2(e26, Gn2(t5, 1), []);
      }), es2 = Nr2 || function() {
        return It2.Date.now();
      };
      function ts2(e26, t5, r4) {
        return t5 = r4 ? n2 : t5, t5 = e26 && null == t5 ? e26.length : t5, Da2(e26, S3, n2, n2, n2, n2, t5);
      }
      function rs2(e26, t5) {
        var r4;
        if ("function" != typeof t5) throw new at3(s2);
        return e26 = qs2(e26), function() {
          return --e26 > 0 && (r4 = t5.apply(this, arguments)), e26 <= 1 && (t5 = n2), r4;
        };
      }
      var ns2 = ki2(function(e26, t5, r4) {
        var n3 = g2;
        if (r4.length) {
          var i2 = Fr2(r4, La2(ns2));
          n3 |= E2;
        }
        return Da2(e26, n3, t5, r4, i2);
      }), is2 = ki2(function(e26, t5, r4) {
        var n3 = g2 | y2;
        if (r4.length) {
          var i2 = Fr2(r4, La2(is2));
          n3 |= E2;
        }
        return Da2(t5, n3, e26, r4, i2);
      });
      function as2(e26, t5, r4) {
        var i2, a3, o3, u3, c3, l3, p3 = 0, f3 = false, h3 = false, d3 = true;
        if ("function" != typeof e26) throw new at3(s2);
        function m3(t6) {
          var r5 = i2, o4 = a3;
          return i2 = a3 = n2, p3 = t6, u3 = e26.apply(o4, r5);
        }
        function g3(e27) {
          var r5 = e27 - l3;
          return l3 === n2 || r5 >= t5 || r5 < 0 || h3 && e27 - p3 >= o3;
        }
        function y3() {
          var e27 = es2();
          if (g3(e27)) return v3(e27);
          c3 = io2(y3, function(e28) {
            var r5 = t5 - (e28 - l3);
            return h3 ? zr2(r5, o3 - (e28 - p3)) : r5;
          }(e27));
        }
        function v3(e27) {
          return c3 = n2, d3 && i2 ? m3(e27) : (i2 = a3 = n2, u3);
        }
        function x3() {
          var e27 = es2(), r5 = g3(e27);
          if (i2 = arguments, a3 = this, l3 = e27, r5) {
            if (c3 === n2) return function(e28) {
              return p3 = e28, c3 = io2(y3, t5), f3 ? m3(e28) : u3;
            }(l3);
            if (h3) return Qi2(c3), c3 = io2(y3, t5), m3(l3);
          }
          return c3 === n2 && (c3 = io2(y3, t5)), u3;
        }
        return t5 = $s2(t5) || 0, ws2(r4) && (f3 = !!r4.leading, o3 = (h3 = "maxWait" in r4) ? Gr2($s2(r4.maxWait) || 0, t5) : o3, d3 = "trailing" in r4 ? !!r4.trailing : d3), x3.cancel = function() {
          c3 !== n2 && Qi2(c3), p3 = 0, i2 = l3 = a3 = c3 = n2;
        }, x3.flush = function() {
          return c3 === n2 ? u3 : v3(es2());
        }, x3;
      }
      var os2 = ki2(function(e26, t5) {
        return Rn2(e26, 1, t5);
      }), ss2 = ki2(function(e26, t5, r4) {
        return Rn2(e26, $s2(t5) || 0, r4);
      });
      function us2(e26, t5) {
        if ("function" != typeof e26 || null != t5 && "function" != typeof t5) throw new at3(s2);
        var r4 = function r5() {
          var n3 = arguments, i2 = t5 ? t5.apply(this, n3) : n3[0], a3 = r5.cache;
          if (a3.has(i2)) return a3.get(i2);
          var o3 = e26.apply(this, n3);
          return r5.cache = a3.set(i2, o3) || a3, o3;
        };
        return r4.cache = new (us2.Cache || En2)(), r4;
      }
      function cs(e26) {
        if ("function" != typeof e26) throw new at3(s2);
        return function() {
          var t5 = arguments;
          switch (t5.length) {
            case 0:
              return !e26.call(this);
            case 1:
              return !e26.call(this, t5[0]);
            case 2:
              return !e26.call(this, t5[0], t5[1]);
            case 3:
              return !e26.call(this, t5[0], t5[1], t5[2]);
          }
          return !e26.apply(this, t5);
        };
      }
      us2.Cache = En2;
      var ls = Ki2(function(e26, t5) {
        var r4 = (t5 = 1 == t5.length && vs(t5[0]) ? Yt2(t5[0], mr2(Na2())) : Yt2(Gn2(t5, 1), mr2(Na2()))).length;
        return ki2(function(n3) {
          for (var i2 = -1, a3 = zr2(n3.length, r4); ++i2 < a3; ) n3[i2] = t5[i2].call(this, n3[i2]);
          return $t2(e26, this, n3);
        });
      }), ps = ki2(function(e26, t5) {
        var r4 = Fr2(t5, La2(ps));
        return Da2(e26, E2, n2, t5, r4);
      }), fs = ki2(function(e26, t5) {
        var r4 = Fr2(t5, La2(fs));
        return Da2(e26, C3, n2, t5, r4);
      }), hs = Ta2(function(e26, t5) {
        return Da2(e26, k2, n2, n2, n2, t5);
      });
      function ds(e26, t5) {
        return e26 === t5 || e26 != e26 && t5 != t5;
      }
      var ms = ba2(ei2), gs = ba2(function(e26, t5) {
        return e26 >= t5;
      }), ys = ai2(/* @__PURE__ */ function() {
        return arguments;
      }()) ? ai2 : function(e26) {
        return _s2(e26) && pt3.call(e26, "callee") && !Nt3.call(e26, "callee");
      }, vs = Xe3.isArray, xs = Rt2 ? mr2(Rt2) : function(e26) {
        return _s2(e26) && Zn2(e26) == se2;
      };
      function bs2(e26) {
        return null != e26 && As2(e26.length) && !Ds2(e26);
      }
      function Es2(e26) {
        return _s2(e26) && bs2(e26);
      }
      var Cs2 = Ur2 || $u2, Ss2 = Mt2 ? mr2(Mt2) : function(e26) {
        return _s2(e26) && Zn2(e26) == $2;
      };
      function ks2(e26) {
        if (!_s2(e26)) return false;
        var t5 = Zn2(e26);
        return t5 == z2 || t5 == G2 || "string" == typeof e26.message && "string" == typeof e26.name && !Is2(e26);
      }
      function Ds2(e26) {
        if (!ws2(e26)) return false;
        var t5 = Zn2(e26);
        return t5 == H2 || t5 == K2 || t5 == q2 || t5 == Z2;
      }
      function Fs2(e26) {
        return "number" == typeof e26 && e26 == qs2(e26);
      }
      function As2(e26) {
        return "number" == typeof e26 && e26 > -1 && e26 % 1 == 0 && e26 <= B2;
      }
      function ws2(e26) {
        var t5 = i(e26);
        return null != e26 && ("object" == t5 || "function" == t5);
      }
      function _s2(e26) {
        return null != e26 && "object" == i(e26);
      }
      var Ts2 = Vt2 ? mr2(Vt2) : function(e26) {
        return _s2(e26) && qa2(e26) == J2;
      };
      function Ps2(e26) {
        return "number" == typeof e26 || _s2(e26) && Zn2(e26) == Q2;
      }
      function Is2(e26) {
        if (!_s2(e26) || Zn2(e26) != Y2) return false;
        var t5 = Bt3(e26);
        if (null === t5) return true;
        var r4 = pt3.call(t5, "constructor") && t5.constructor;
        return "function" == typeof r4 && r4 instanceof r4 && lt4.call(r4) == mt3;
      }
      var Bs2 = Ut2 ? mr2(Ut2) : function(e26) {
        return _s2(e26) && Zn2(e26) == ee2;
      };
      var Os2 = qt2 ? mr2(qt2) : function(e26) {
        return _s2(e26) && qa2(e26) == te2;
      };
      function Ls2(e26) {
        return "string" == typeof e26 || !vs(e26) && _s2(e26) && Zn2(e26) == re2;
      }
      function Ns2(e26) {
        return "symbol" == i(e26) || _s2(e26) && Zn2(e26) == ne2;
      }
      var js2 = Wt2 ? mr2(Wt2) : function(e26) {
        return _s2(e26) && As2(e26.length) && !!Dt2[Zn2(e26)];
      };
      var Rs2 = ba2(fi2), Ms2 = ba2(function(e26, t5) {
        return e26 <= t5;
      });
      function Vs2(e26) {
        if (!e26) return [];
        if (bs2(e26)) return Ls2(e26) ? Tr2(e26) : na2(e26);
        if (pr3 && e26[pr3]) return function(e27) {
          for (var t6, r4 = []; !(t6 = e27.next()).done; ) r4.push(t6.value);
          return r4;
        }(e26[pr3]());
        var t5 = qa2(e26);
        return (t5 == J2 ? kr : t5 == te2 ? Ar2 : du2)(e26);
      }
      function Us2(e26) {
        return e26 ? (e26 = $s2(e26)) === I2 || e26 === -I2 ? (e26 < 0 ? -1 : 1) * O2 : e26 == e26 ? e26 : 0 : 0 === e26 ? e26 : 0;
      }
      function qs2(e26) {
        var t5 = Us2(e26), r4 = t5 % 1;
        return t5 == t5 ? r4 ? t5 - r4 : t5 : 0;
      }
      function Ws2(e26) {
        return e26 ? Ln2(qs2(e26), 0, N2) : 0;
      }
      function $s2(e26) {
        if ("number" == typeof e26) return e26;
        if (Ns2(e26)) return L2;
        if (ws2(e26)) {
          var t5 = "function" == typeof e26.valueOf ? e26.valueOf() : e26;
          e26 = ws2(t5) ? t5 + "" : t5;
        }
        if ("string" != typeof e26) return 0 === e26 ? e26 : +e26;
        e26 = e26.replace(Be2, "");
        var r4 = $e2.test(e26);
        return r4 || ze2.test(e26) ? _t2(e26.slice(2), r4 ? 2 : 8) : We2.test(e26) ? L2 : +e26;
      }
      function Gs2(e26) {
        return ia2(e26, ou2(e26));
      }
      function zs2(e26) {
        return null == e26 ? "" : ji(e26);
      }
      var Hs2 = oa2(function(e26, t5) {
        if (Xa2(t5) || bs2(t5)) ia2(t5, au2(t5), e26);
        else for (var r4 in t5) pt3.call(t5, r4) && _n2(e26, r4, t5[r4]);
      }), Ks2 = oa2(function(e26, t5) {
        ia2(t5, ou2(t5), e26);
      }), Js2 = oa2(function(e26, t5, r4, n3) {
        ia2(t5, ou2(t5), e26, n3);
      }), Qs2 = oa2(function(e26, t5, r4, n3) {
        ia2(t5, au2(t5), e26, n3);
      }), Xs2 = Ta2(On2);
      var Ys2 = ki2(function(e26, t5) {
        e26 = rt3(e26);
        var r4 = -1, i2 = t5.length, a3 = i2 > 2 ? t5[2] : n2;
        for (a3 && Ha2(t5[0], t5[1], a3) && (i2 = 1); ++r4 < i2; ) for (var o3 = t5[r4], s3 = ou2(o3), u3 = -1, c3 = s3.length; ++u3 < c3; ) {
          var l3 = s3[u3], p3 = e26[l3];
          (p3 === n2 || ds(p3, ut3[l3]) && !pt3.call(e26, l3)) && (e26[l3] = o3[l3]);
        }
        return e26;
      }), Zs2 = ki2(function(e26) {
        return e26.push(n2, Aa2), $t2(uu2, n2, e26);
      });
      function eu2(e26, t5, r4) {
        var i2 = null == e26 ? n2 : Xn2(e26, t5);
        return i2 === n2 ? r4 : i2;
      }
      function tu2(e26, t5) {
        return null != e26 && Wa2(e26, t5, ri2);
      }
      var ru2 = ma2(function(e26, t5, r4) {
        null != t5 && "function" != typeof t5.toString && (t5 = dt3.call(t5)), e26[t5] = r4;
      }, wu2(Pu2)), nu2 = ma2(function(e26, t5, r4) {
        null != t5 && "function" != typeof t5.toString && (t5 = dt3.call(t5)), pt3.call(e26, t5) ? e26[t5].push(r4) : e26[t5] = [r4];
      }, Na2), iu2 = ki2(ii2);
      function au2(e26) {
        return bs2(e26) ? kn2(e26) : li2(e26);
      }
      function ou2(e26) {
        return bs2(e26) ? kn2(e26, true) : pi2(e26);
      }
      var su2 = oa2(function(e26, t5, r4) {
        gi2(e26, t5, r4);
      }), uu2 = oa2(function(e26, t5, r4, n3) {
        gi2(e26, t5, r4, n3);
      }), cu2 = Ta2(function(e26, t5) {
        var r4 = {};
        if (null == e26) return r4;
        var n3 = false;
        t5 = Yt2(t5, function(t6) {
          return t6 = Hi2(t6, e26), n3 || (n3 = t6.length > 1), t6;
        }), ia2(e26, Ia2(e26), r4), n3 && (r4 = Nn2(r4, p2 | f2 | h2, wa2));
        for (var i2 = t5.length; i2--; ) Mi2(r4, t5[i2]);
        return r4;
      });
      var lu2 = Ta2(function(e26, t5) {
        return null == e26 ? {} : function(e27, t6) {
          return xi2(e27, t6, function(t7, r4) {
            return tu2(e27, r4);
          });
        }(e26, t5);
      });
      function pu2(e26, t5) {
        if (null == e26) return {};
        var r4 = Yt2(Ia2(e26), function(e27) {
          return [e27];
        });
        return t5 = Na2(t5), xi2(e26, r4, function(e27, r5) {
          return t5(e27, r5[0]);
        });
      }
      var fu2 = ka2(au2), hu2 = ka2(ou2);
      function du2(e26) {
        return null == e26 ? [] : gr2(e26, au2(e26));
      }
      var mu2 = la2(function(e26, t5, r4) {
        return t5 = t5.toLowerCase(), e26 + (r4 ? gu2(t5) : t5);
      });
      function gu2(e26) {
        return ku2(zs2(e26).toLowerCase());
      }
      function yu2(e26) {
        return (e26 = zs2(e26)) && e26.replace(Ke2, br2).replace(vt, "");
      }
      var vu2 = la2(function(e26, t5, r4) {
        return e26 + (r4 ? "-" : "") + t5.toLowerCase();
      }), xu2 = la2(function(e26, t5, r4) {
        return e26 + (r4 ? " " : "") + t5.toLowerCase();
      }), bu2 = ca2("toLowerCase");
      var Eu2 = la2(function(e26, t5, r4) {
        return e26 + (r4 ? "_" : "") + t5.toLowerCase();
      });
      var Cu2 = la2(function(e26, t5, r4) {
        return e26 + (r4 ? " " : "") + ku2(t5);
      });
      var Su2 = la2(function(e26, t5, r4) {
        return e26 + (r4 ? " " : "") + t5.toUpperCase();
      }), ku2 = ca2("toUpperCase");
      function Du2(e26, t5, r4) {
        return e26 = zs2(e26), (t5 = r4 ? n2 : t5) === n2 ? function(e27) {
          return Ct2.test(e27);
        }(e26) ? function(e27) {
          return e27.match(bt) || [];
        }(e26) : function(e27) {
          return e27.match(Me2) || [];
        }(e26) : e26.match(t5) || [];
      }
      var Fu2 = ki2(function(e26, t5) {
        try {
          return $t2(e26, n2, t5);
        } catch (e27) {
          return ks2(e27) ? e27 : new Ze3(e27);
        }
      }), Au2 = Ta2(function(e26, t5) {
        return zt2(t5, function(t6) {
          t6 = lo2(t6), Bn2(e26, t6, ns2(e26[t6], e26));
        }), e26;
      });
      function wu2(e26) {
        return function() {
          return e26;
        };
      }
      var _u2 = ha2(), Tu2 = ha2(true);
      function Pu2(e26) {
        return e26;
      }
      function Iu2(e26) {
        return ci2("function" == typeof e26 ? e26 : Nn2(e26, p2));
      }
      var Bu2 = ki2(function(e26, t5) {
        return function(r4) {
          return ii2(r4, e26, t5);
        };
      }), Ou2 = ki2(function(e26, t5) {
        return function(r4) {
          return ii2(e26, r4, t5);
        };
      });
      function Lu2(e26, t5, r4) {
        var n3 = au2(t5), i2 = Qn2(t5, n3);
        null != r4 || ws2(t5) && (i2.length || !n3.length) || (r4 = t5, t5 = e26, e26 = this, i2 = Qn2(t5, au2(t5)));
        var a3 = !(ws2(r4) && "chain" in r4 && !r4.chain), o3 = Ds2(e26);
        return zt2(i2, function(r5) {
          var n4 = t5[r5];
          e26[r5] = n4, o3 && (e26.prototype[r5] = function() {
            var t6 = this.__chain__;
            if (a3 || t6) {
              var r6 = e26(this.__wrapped__), i3 = r6.__actions__ = na2(this.__actions__);
              return i3.push({ func: n4, args: arguments, thisArg: e26 }), r6.__chain__ = t6, r6;
            }
            return n4.apply(e26, Zt2([this.value()], arguments));
          });
        }), e26;
      }
      function Nu2() {
      }
      var ju2 = ya2(Yt2), Ru2 = ya2(Kt2), Mu2 = ya2(rr2);
      function Vu2(e26) {
        return Ka2(e26) ? lr2(lo2(e26)) : /* @__PURE__ */ function(e27) {
          return function(t5) {
            return Xn2(t5, e27);
          };
        }(e26);
      }
      var Uu2 = xa2(), qu2 = xa2(true);
      function Wu2() {
        return [];
      }
      function $u2() {
        return false;
      }
      var Gu2 = ga2(function(e26, t5) {
        return e26 + t5;
      }, 0), zu2 = Ca2("ceil"), Hu2 = ga2(function(e26, t5) {
        return e26 / t5;
      }, 1), Ku2 = Ca2("floor");
      var Ju2, Qu2 = ga2(function(e26, t5) {
        return e26 * t5;
      }, 1), Xu2 = Ca2("round"), Yu2 = ga2(function(e26, t5) {
        return e26 - t5;
      }, 0);
      return dn2.after = function(e26, t5) {
        if ("function" != typeof t5) throw new at3(s2);
        return e26 = qs2(e26), function() {
          if (--e26 < 1) return t5.apply(this, arguments);
        };
      }, dn2.ary = ts2, dn2.assign = Hs2, dn2.assignIn = Ks2, dn2.assignInWith = Js2, dn2.assignWith = Qs2, dn2.at = Xs2, dn2.before = rs2, dn2.bind = ns2, dn2.bindAll = Au2, dn2.bindKey = is2, dn2.castArray = function() {
        if (!arguments.length) return [];
        var e26 = arguments[0];
        return vs(e26) ? e26 : [e26];
      }, dn2.chain = Vo2, dn2.chunk = function(e26, t5, r4) {
        t5 = (r4 ? Ha2(e26, t5, r4) : t5 === n2) ? 1 : Gr2(qs2(t5), 0);
        var i2 = null == e26 ? 0 : e26.length;
        if (!i2 || t5 < 1) return [];
        for (var a3 = 0, o3 = 0, s3 = Xe3(Rr2(i2 / t5)); a3 < i2; ) s3[o3++] = Pi2(e26, a3, a3 += t5);
        return s3;
      }, dn2.compact = function(e26) {
        for (var t5 = -1, r4 = null == e26 ? 0 : e26.length, n3 = 0, i2 = []; ++t5 < r4; ) {
          var a3 = e26[t5];
          a3 && (i2[n3++] = a3);
        }
        return i2;
      }, dn2.concat = function() {
        var e26 = arguments.length;
        if (!e26) return [];
        for (var t5 = Xe3(e26 - 1), r4 = arguments[0], n3 = e26; n3--; ) t5[n3 - 1] = arguments[n3];
        return Zt2(vs(r4) ? na2(r4) : [r4], Gn2(t5, 1));
      }, dn2.cond = function(e26) {
        var t5 = null == e26 ? 0 : e26.length, r4 = Na2();
        return e26 = t5 ? Yt2(e26, function(e27) {
          if ("function" != typeof e27[1]) throw new at3(s2);
          return [r4(e27[0]), e27[1]];
        }) : [], ki2(function(r5) {
          for (var n3 = -1; ++n3 < t5; ) {
            var i2 = e26[n3];
            if ($t2(i2[0], this, r5)) return $t2(i2[1], this, r5);
          }
        });
      }, dn2.conforms = function(e26) {
        return function(e27) {
          var t5 = au2(e27);
          return function(r4) {
            return jn2(r4, e27, t5);
          };
        }(Nn2(e26, p2));
      }, dn2.constant = wu2, dn2.countBy = Wo2, dn2.create = function(e26, t5) {
        var r4 = mn2(e26);
        return null == t5 ? r4 : In2(r4, t5);
      }, dn2.curry = function e26(t5, r4, i2) {
        var a3 = Da2(t5, x2, n2, n2, n2, n2, n2, r4 = i2 ? n2 : r4);
        return a3.placeholder = e26.placeholder, a3;
      }, dn2.curryRight = function e26(t5, r4, i2) {
        var a3 = Da2(t5, b2, n2, n2, n2, n2, n2, r4 = i2 ? n2 : r4);
        return a3.placeholder = e26.placeholder, a3;
      }, dn2.debounce = as2, dn2.defaults = Ys2, dn2.defaultsDeep = Zs2, dn2.defer = os2, dn2.delay = ss2, dn2.difference = ho2, dn2.differenceBy = mo2, dn2.differenceWith = go2, dn2.drop = function(e26, t5, r4) {
        var i2 = null == e26 ? 0 : e26.length;
        return i2 ? Pi2(e26, (t5 = r4 || t5 === n2 ? 1 : qs2(t5)) < 0 ? 0 : t5, i2) : [];
      }, dn2.dropRight = function(e26, t5, r4) {
        var i2 = null == e26 ? 0 : e26.length;
        return i2 ? Pi2(e26, 0, (t5 = i2 - (t5 = r4 || t5 === n2 ? 1 : qs2(t5))) < 0 ? 0 : t5) : [];
      }, dn2.dropRightWhile = function(e26, t5) {
        return e26 && e26.length ? Ui2(e26, Na2(t5, 3), true, true) : [];
      }, dn2.dropWhile = function(e26, t5) {
        return e26 && e26.length ? Ui2(e26, Na2(t5, 3), true) : [];
      }, dn2.fill = function(e26, t5, r4, i2) {
        var a3 = null == e26 ? 0 : e26.length;
        return a3 ? (r4 && "number" != typeof r4 && Ha2(e26, t5, r4) && (r4 = 0, i2 = a3), function(e27, t6, r5, i3) {
          var a4 = e27.length;
          for ((r5 = qs2(r5)) < 0 && (r5 = -r5 > a4 ? 0 : a4 + r5), (i3 = i3 === n2 || i3 > a4 ? a4 : qs2(i3)) < 0 && (i3 += a4), i3 = r5 > i3 ? 0 : Ws2(i3); r5 < i3; ) e27[r5++] = t6;
          return e27;
        }(e26, t5, r4, i2)) : [];
      }, dn2.filter = function(e26, t5) {
        return (vs(e26) ? Jt2 : $n2)(e26, Na2(t5, 3));
      }, dn2.flatMap = function(e26, t5) {
        return Gn2(Xo2(e26, t5), 1);
      }, dn2.flatMapDeep = function(e26, t5) {
        return Gn2(Xo2(e26, t5), I2);
      }, dn2.flatMapDepth = function(e26, t5, r4) {
        return r4 = r4 === n2 ? 1 : qs2(r4), Gn2(Xo2(e26, t5), r4);
      }, dn2.flatten = xo2, dn2.flattenDeep = function(e26) {
        return (null == e26 ? 0 : e26.length) ? Gn2(e26, I2) : [];
      }, dn2.flattenDepth = function(e26, t5) {
        return (null == e26 ? 0 : e26.length) ? Gn2(e26, t5 = t5 === n2 ? 1 : qs2(t5)) : [];
      }, dn2.flip = function(e26) {
        return Da2(e26, D2);
      }, dn2.flow = _u2, dn2.flowRight = Tu2, dn2.fromPairs = function(e26) {
        for (var t5 = -1, r4 = null == e26 ? 0 : e26.length, n3 = {}; ++t5 < r4; ) {
          var i2 = e26[t5];
          n3[i2[0]] = i2[1];
        }
        return n3;
      }, dn2.functions = function(e26) {
        return null == e26 ? [] : Qn2(e26, au2(e26));
      }, dn2.functionsIn = function(e26) {
        return null == e26 ? [] : Qn2(e26, ou2(e26));
      }, dn2.groupBy = Ko2, dn2.initial = function(e26) {
        return (null == e26 ? 0 : e26.length) ? Pi2(e26, 0, -1) : [];
      }, dn2.intersection = Eo2, dn2.intersectionBy = Co, dn2.intersectionWith = So, dn2.invert = ru2, dn2.invertBy = nu2, dn2.invokeMap = Jo2, dn2.iteratee = Iu2, dn2.keyBy = Qo2, dn2.keys = au2, dn2.keysIn = ou2, dn2.map = Xo2, dn2.mapKeys = function(e26, t5) {
        var r4 = {};
        return t5 = Na2(t5, 3), Kn2(e26, function(e27, n3, i2) {
          Bn2(r4, t5(e27, n3, i2), e27);
        }), r4;
      }, dn2.mapValues = function(e26, t5) {
        var r4 = {};
        return t5 = Na2(t5, 3), Kn2(e26, function(e27, n3, i2) {
          Bn2(r4, n3, t5(e27, n3, i2));
        }), r4;
      }, dn2.matches = function(e26) {
        return di2(Nn2(e26, p2));
      }, dn2.matchesProperty = function(e26, t5) {
        return mi2(e26, Nn2(t5, p2));
      }, dn2.memoize = us2, dn2.merge = su2, dn2.mergeWith = uu2, dn2.method = Bu2, dn2.methodOf = Ou2, dn2.mixin = Lu2, dn2.negate = cs, dn2.nthArg = function(e26) {
        return e26 = qs2(e26), ki2(function(t5) {
          return yi2(t5, e26);
        });
      }, dn2.omit = cu2, dn2.omitBy = function(e26, t5) {
        return pu2(e26, cs(Na2(t5)));
      }, dn2.once = function(e26) {
        return rs2(2, e26);
      }, dn2.orderBy = function(e26, t5, r4, i2) {
        return null == e26 ? [] : (vs(t5) || (t5 = null == t5 ? [] : [t5]), vs(r4 = i2 ? n2 : r4) || (r4 = null == r4 ? [] : [r4]), vi2(e26, t5, r4));
      }, dn2.over = ju2, dn2.overArgs = ls, dn2.overEvery = Ru2, dn2.overSome = Mu2, dn2.partial = ps, dn2.partialRight = fs, dn2.partition = Yo2, dn2.pick = lu2, dn2.pickBy = pu2, dn2.property = Vu2, dn2.propertyOf = function(e26) {
        return function(t5) {
          return null == e26 ? n2 : Xn2(e26, t5);
        };
      }, dn2.pull = Do, dn2.pullAll = Fo, dn2.pullAllBy = function(e26, t5, r4) {
        return e26 && e26.length && t5 && t5.length ? bi2(e26, t5, Na2(r4, 2)) : e26;
      }, dn2.pullAllWith = function(e26, t5, r4) {
        return e26 && e26.length && t5 && t5.length ? bi2(e26, t5, n2, r4) : e26;
      }, dn2.pullAt = Ao, dn2.range = Uu2, dn2.rangeRight = qu2, dn2.rearg = hs, dn2.reject = function(e26, t5) {
        return (vs(e26) ? Jt2 : $n2)(e26, cs(Na2(t5, 3)));
      }, dn2.remove = function(e26, t5) {
        var r4 = [];
        if (!e26 || !e26.length) return r4;
        var n3 = -1, i2 = [], a3 = e26.length;
        for (t5 = Na2(t5, 3); ++n3 < a3; ) {
          var o3 = e26[n3];
          t5(o3, n3, e26) && (r4.push(o3), i2.push(n3));
        }
        return Ei2(e26, i2), r4;
      }, dn2.rest = function(e26, t5) {
        if ("function" != typeof e26) throw new at3(s2);
        return ki2(e26, t5 = t5 === n2 ? t5 : qs2(t5));
      }, dn2.reverse = wo, dn2.sampleSize = function(e26, t5, r4) {
        return t5 = (r4 ? Ha2(e26, t5, r4) : t5 === n2) ? 1 : qs2(t5), (vs(e26) ? Fn2 : Fi2)(e26, t5);
      }, dn2.set = function(e26, t5, r4) {
        return null == e26 ? e26 : Ai2(e26, t5, r4);
      }, dn2.setWith = function(e26, t5, r4, i2) {
        return i2 = "function" == typeof i2 ? i2 : n2, null == e26 ? e26 : Ai2(e26, t5, r4, i2);
      }, dn2.shuffle = function(e26) {
        return (vs(e26) ? An2 : Ti2)(e26);
      }, dn2.slice = function(e26, t5, r4) {
        var i2 = null == e26 ? 0 : e26.length;
        return i2 ? (r4 && "number" != typeof r4 && Ha2(e26, t5, r4) ? (t5 = 0, r4 = i2) : (t5 = null == t5 ? 0 : qs2(t5), r4 = r4 === n2 ? i2 : qs2(r4)), Pi2(e26, t5, r4)) : [];
      }, dn2.sortBy = Zo2, dn2.sortedUniq = function(e26) {
        return e26 && e26.length ? Li2(e26) : [];
      }, dn2.sortedUniqBy = function(e26, t5) {
        return e26 && e26.length ? Li2(e26, Na2(t5, 2)) : [];
      }, dn2.split = function(e26, t5, r4) {
        return r4 && "number" != typeof r4 && Ha2(e26, t5, r4) && (t5 = r4 = n2), (r4 = r4 === n2 ? N2 : r4 >>> 0) ? (e26 = zs2(e26)) && ("string" == typeof t5 || null != t5 && !Bs2(t5)) && !(t5 = ji(t5)) && Sr(e26) ? Ji2(Tr2(e26), 0, r4) : e26.split(t5, r4) : [];
      }, dn2.spread = function(e26, t5) {
        if ("function" != typeof e26) throw new at3(s2);
        return t5 = null == t5 ? 0 : Gr2(qs2(t5), 0), ki2(function(r4) {
          var n3 = r4[t5], i2 = Ji2(r4, 0, t5);
          return n3 && Zt2(i2, n3), $t2(e26, this, i2);
        });
      }, dn2.tail = function(e26) {
        var t5 = null == e26 ? 0 : e26.length;
        return t5 ? Pi2(e26, 1, t5) : [];
      }, dn2.take = function(e26, t5, r4) {
        return e26 && e26.length ? Pi2(e26, 0, (t5 = r4 || t5 === n2 ? 1 : qs2(t5)) < 0 ? 0 : t5) : [];
      }, dn2.takeRight = function(e26, t5, r4) {
        var i2 = null == e26 ? 0 : e26.length;
        return i2 ? Pi2(e26, (t5 = i2 - (t5 = r4 || t5 === n2 ? 1 : qs2(t5))) < 0 ? 0 : t5, i2) : [];
      }, dn2.takeRightWhile = function(e26, t5) {
        return e26 && e26.length ? Ui2(e26, Na2(t5, 3), false, true) : [];
      }, dn2.takeWhile = function(e26, t5) {
        return e26 && e26.length ? Ui2(e26, Na2(t5, 3)) : [];
      }, dn2.tap = function(e26, t5) {
        return t5(e26), e26;
      }, dn2.throttle = function(e26, t5, r4) {
        var n3 = true, i2 = true;
        if ("function" != typeof e26) throw new at3(s2);
        return ws2(r4) && (n3 = "leading" in r4 ? !!r4.leading : n3, i2 = "trailing" in r4 ? !!r4.trailing : i2), as2(e26, t5, { leading: n3, maxWait: t5, trailing: i2 });
      }, dn2.thru = Uo2, dn2.toArray = Vs2, dn2.toPairs = fu2, dn2.toPairsIn = hu2, dn2.toPath = function(e26) {
        return vs(e26) ? Yt2(e26, lo2) : Ns2(e26) ? [e26] : na2(co2(zs2(e26)));
      }, dn2.toPlainObject = Gs2, dn2.transform = function(e26, t5, r4) {
        var n3 = vs(e26), i2 = n3 || Cs2(e26) || js2(e26);
        if (t5 = Na2(t5, 4), null == r4) {
          var a3 = e26 && e26.constructor;
          r4 = i2 ? n3 ? new a3() : [] : ws2(e26) && Ds2(a3) ? mn2(Bt3(e26)) : {};
        }
        return (i2 ? zt2 : Kn2)(e26, function(e27, n4, i3) {
          return t5(r4, e27, n4, i3);
        }), r4;
      }, dn2.unary = function(e26) {
        return ts2(e26, 1);
      }, dn2.union = _o2, dn2.unionBy = To2, dn2.unionWith = Po2, dn2.uniq = function(e26) {
        return e26 && e26.length ? Ri(e26) : [];
      }, dn2.uniqBy = function(e26, t5) {
        return e26 && e26.length ? Ri(e26, Na2(t5, 2)) : [];
      }, dn2.uniqWith = function(e26, t5) {
        return t5 = "function" == typeof t5 ? t5 : n2, e26 && e26.length ? Ri(e26, n2, t5) : [];
      }, dn2.unset = function(e26, t5) {
        return null == e26 || Mi2(e26, t5);
      }, dn2.unzip = Io2, dn2.unzipWith = Bo2, dn2.update = function(e26, t5, r4) {
        return null == e26 ? e26 : Vi2(e26, t5, zi2(r4));
      }, dn2.updateWith = function(e26, t5, r4, i2) {
        return i2 = "function" == typeof i2 ? i2 : n2, null == e26 ? e26 : Vi2(e26, t5, zi2(r4), i2);
      }, dn2.values = du2, dn2.valuesIn = function(e26) {
        return null == e26 ? [] : gr2(e26, ou2(e26));
      }, dn2.without = Oo2, dn2.words = Du2, dn2.wrap = function(e26, t5) {
        return ps(zi2(t5), e26);
      }, dn2.xor = Lo2, dn2.xorBy = No2, dn2.xorWith = jo2, dn2.zip = Ro2, dn2.zipObject = function(e26, t5) {
        return $i2(e26 || [], t5 || [], _n2);
      }, dn2.zipObjectDeep = function(e26, t5) {
        return $i2(e26 || [], t5 || [], Ai2);
      }, dn2.zipWith = Mo2, dn2.entries = fu2, dn2.entriesIn = hu2, dn2.extend = Ks2, dn2.extendWith = Js2, Lu2(dn2, dn2), dn2.add = Gu2, dn2.attempt = Fu2, dn2.camelCase = mu2, dn2.capitalize = gu2, dn2.ceil = zu2, dn2.clamp = function(e26, t5, r4) {
        return r4 === n2 && (r4 = t5, t5 = n2), r4 !== n2 && (r4 = (r4 = $s2(r4)) == r4 ? r4 : 0), t5 !== n2 && (t5 = (t5 = $s2(t5)) == t5 ? t5 : 0), Ln2($s2(e26), t5, r4);
      }, dn2.clone = function(e26) {
        return Nn2(e26, h2);
      }, dn2.cloneDeep = function(e26) {
        return Nn2(e26, p2 | h2);
      }, dn2.cloneDeepWith = function(e26, t5) {
        return Nn2(e26, p2 | h2, t5 = "function" == typeof t5 ? t5 : n2);
      }, dn2.cloneWith = function(e26, t5) {
        return Nn2(e26, h2, t5 = "function" == typeof t5 ? t5 : n2);
      }, dn2.conformsTo = function(e26, t5) {
        return null == t5 || jn2(e26, t5, au2(t5));
      }, dn2.deburr = yu2, dn2.defaultTo = function(e26, t5) {
        return null == e26 || e26 != e26 ? t5 : e26;
      }, dn2.divide = Hu2, dn2.endsWith = function(e26, t5, r4) {
        e26 = zs2(e26), t5 = ji(t5);
        var i2 = e26.length, a3 = r4 = r4 === n2 ? i2 : Ln2(qs2(r4), 0, i2);
        return (r4 -= t5.length) >= 0 && e26.slice(r4, a3) == t5;
      }, dn2.eq = ds, dn2.escape = function(e26) {
        return (e26 = zs2(e26)) && ke2.test(e26) ? e26.replace(Ce2, Er2) : e26;
      }, dn2.escapeRegExp = function(e26) {
        return (e26 = zs2(e26)) && Ie2.test(e26) ? e26.replace(Pe2, "\\$&") : e26;
      }, dn2.every = function(e26, t5, r4) {
        var i2 = vs(e26) ? Kt2 : qn2;
        return r4 && Ha2(e26, t5, r4) && (t5 = n2), i2(e26, Na2(t5, 3));
      }, dn2.find = $o2, dn2.findIndex = yo2, dn2.findKey = function(e26, t5) {
        return ir2(e26, Na2(t5, 3), Kn2);
      }, dn2.findLast = Go2, dn2.findLastIndex = vo2, dn2.findLastKey = function(e26, t5) {
        return ir2(e26, Na2(t5, 3), Jn2);
      }, dn2.floor = Ku2, dn2.forEach = zo2, dn2.forEachRight = Ho2, dn2.forIn = function(e26, t5) {
        return null == e26 ? e26 : zn(e26, Na2(t5, 3), ou2);
      }, dn2.forInRight = function(e26, t5) {
        return null == e26 ? e26 : Hn2(e26, Na2(t5, 3), ou2);
      }, dn2.forOwn = function(e26, t5) {
        return e26 && Kn2(e26, Na2(t5, 3));
      }, dn2.forOwnRight = function(e26, t5) {
        return e26 && Jn2(e26, Na2(t5, 3));
      }, dn2.get = eu2, dn2.gt = ms, dn2.gte = gs, dn2.has = function(e26, t5) {
        return null != e26 && Wa2(e26, t5, ti2);
      }, dn2.hasIn = tu2, dn2.head = bo2, dn2.identity = Pu2, dn2.includes = function(e26, t5, r4, n3) {
        e26 = bs2(e26) ? e26 : du2(e26), r4 = r4 && !n3 ? qs2(r4) : 0;
        var i2 = e26.length;
        return r4 < 0 && (r4 = Gr2(i2 + r4, 0)), Ls2(e26) ? r4 <= i2 && e26.indexOf(t5, r4) > -1 : !!i2 && or2(e26, t5, r4) > -1;
      }, dn2.indexOf = function(e26, t5, r4) {
        var n3 = null == e26 ? 0 : e26.length;
        if (!n3) return -1;
        var i2 = null == r4 ? 0 : qs2(r4);
        return i2 < 0 && (i2 = Gr2(n3 + i2, 0)), or2(e26, t5, i2);
      }, dn2.inRange = function(e26, t5, r4) {
        return t5 = Us2(t5), r4 === n2 ? (r4 = t5, t5 = 0) : r4 = Us2(r4), function(e27, t6, r5) {
          return e27 >= zr2(t6, r5) && e27 < Gr2(t6, r5);
        }(e26 = $s2(e26), t5, r4);
      }, dn2.invoke = iu2, dn2.isArguments = ys, dn2.isArray = vs, dn2.isArrayBuffer = xs, dn2.isArrayLike = bs2, dn2.isArrayLikeObject = Es2, dn2.isBoolean = function(e26) {
        return true === e26 || false === e26 || _s2(e26) && Zn2(e26) == W2;
      }, dn2.isBuffer = Cs2, dn2.isDate = Ss2, dn2.isElement = function(e26) {
        return _s2(e26) && 1 === e26.nodeType && !Is2(e26);
      }, dn2.isEmpty = function(e26) {
        if (null == e26) return true;
        if (bs2(e26) && (vs(e26) || "string" == typeof e26 || "function" == typeof e26.splice || Cs2(e26) || js2(e26) || ys(e26))) return !e26.length;
        var t5 = qa2(e26);
        if (t5 == J2 || t5 == te2) return !e26.size;
        if (Xa2(e26)) return !li2(e26).length;
        for (var r4 in e26) if (pt3.call(e26, r4)) return false;
        return true;
      }, dn2.isEqual = function(e26, t5) {
        return oi2(e26, t5);
      }, dn2.isEqualWith = function(e26, t5, r4) {
        var i2 = (r4 = "function" == typeof r4 ? r4 : n2) ? r4(e26, t5) : n2;
        return i2 === n2 ? oi2(e26, t5, n2, r4) : !!i2;
      }, dn2.isError = ks2, dn2.isFinite = function(e26) {
        return "number" == typeof e26 && qr2(e26);
      }, dn2.isFunction = Ds2, dn2.isInteger = Fs2, dn2.isLength = As2, dn2.isMap = Ts2, dn2.isMatch = function(e26, t5) {
        return e26 === t5 || si2(e26, t5, Ra2(t5));
      }, dn2.isMatchWith = function(e26, t5, r4) {
        return r4 = "function" == typeof r4 ? r4 : n2, si2(e26, t5, Ra2(t5), r4);
      }, dn2.isNaN = function(e26) {
        return Ps2(e26) && e26 != +e26;
      }, dn2.isNative = function(e26) {
        if (Qa2(e26)) throw new Ze3(o2);
        return ui2(e26);
      }, dn2.isNil = function(e26) {
        return null == e26;
      }, dn2.isNull = function(e26) {
        return null === e26;
      }, dn2.isNumber = Ps2, dn2.isObject = ws2, dn2.isObjectLike = _s2, dn2.isPlainObject = Is2, dn2.isRegExp = Bs2, dn2.isSafeInteger = function(e26) {
        return Fs2(e26) && e26 >= -B2 && e26 <= B2;
      }, dn2.isSet = Os2, dn2.isString = Ls2, dn2.isSymbol = Ns2, dn2.isTypedArray = js2, dn2.isUndefined = function(e26) {
        return e26 === n2;
      }, dn2.isWeakMap = function(e26) {
        return _s2(e26) && qa2(e26) == ae2;
      }, dn2.isWeakSet = function(e26) {
        return _s2(e26) && Zn2(e26) == oe2;
      }, dn2.join = function(e26, t5) {
        return null == e26 ? "" : Wr2.call(e26, t5);
      }, dn2.kebabCase = vu2, dn2.last = ko, dn2.lastIndexOf = function(e26, t5, r4) {
        var i2 = null == e26 ? 0 : e26.length;
        if (!i2) return -1;
        var a3 = i2;
        return r4 !== n2 && (a3 = (a3 = qs2(r4)) < 0 ? Gr2(i2 + a3, 0) : zr2(a3, i2 - 1)), t5 == t5 ? function(e27, t6, r5) {
          for (var n3 = r5 + 1; n3--; ) if (e27[n3] === t6) return n3;
          return n3;
        }(e26, t5, a3) : ar2(e26, ur2, a3, true);
      }, dn2.lowerCase = xu2, dn2.lowerFirst = bu2, dn2.lt = Rs2, dn2.lte = Ms2, dn2.max = function(e26) {
        return e26 && e26.length ? Wn2(e26, Pu2, ei2) : n2;
      }, dn2.maxBy = function(e26, t5) {
        return e26 && e26.length ? Wn2(e26, Na2(t5, 2), ei2) : n2;
      }, dn2.mean = function(e26) {
        return cr2(e26, Pu2);
      }, dn2.meanBy = function(e26, t5) {
        return cr2(e26, Na2(t5, 2));
      }, dn2.min = function(e26) {
        return e26 && e26.length ? Wn2(e26, Pu2, fi2) : n2;
      }, dn2.minBy = function(e26, t5) {
        return e26 && e26.length ? Wn2(e26, Na2(t5, 2), fi2) : n2;
      }, dn2.stubArray = Wu2, dn2.stubFalse = $u2, dn2.stubObject = function() {
        return {};
      }, dn2.stubString = function() {
        return "";
      }, dn2.stubTrue = function() {
        return true;
      }, dn2.multiply = Qu2, dn2.nth = function(e26, t5) {
        return e26 && e26.length ? yi2(e26, qs2(t5)) : n2;
      }, dn2.noConflict = function() {
        return It2._ === this && (It2._ = gt3), this;
      }, dn2.noop = Nu2, dn2.now = es2, dn2.pad = function(e26, t5, r4) {
        e26 = zs2(e26);
        var n3 = (t5 = qs2(t5)) ? _r2(e26) : 0;
        if (!t5 || n3 >= t5) return e26;
        var i2 = (t5 - n3) / 2;
        return va2(Mr2(i2), r4) + e26 + va2(Rr2(i2), r4);
      }, dn2.padEnd = function(e26, t5, r4) {
        e26 = zs2(e26);
        var n3 = (t5 = qs2(t5)) ? _r2(e26) : 0;
        return t5 && n3 < t5 ? e26 + va2(t5 - n3, r4) : e26;
      }, dn2.padStart = function(e26, t5, r4) {
        e26 = zs2(e26);
        var n3 = (t5 = qs2(t5)) ? _r2(e26) : 0;
        return t5 && n3 < t5 ? va2(t5 - n3, r4) + e26 : e26;
      }, dn2.parseInt = function(e26, t5, r4) {
        return r4 || null == t5 ? t5 = 0 : t5 && (t5 = +t5), Kr2(zs2(e26).replace(Oe2, ""), t5 || 0);
      }, dn2.random = function(e26, t5, r4) {
        if (r4 && "boolean" != typeof r4 && Ha2(e26, t5, r4) && (t5 = r4 = n2), r4 === n2 && ("boolean" == typeof t5 ? (r4 = t5, t5 = n2) : "boolean" == typeof e26 && (r4 = e26, e26 = n2)), e26 === n2 && t5 === n2 ? (e26 = 0, t5 = 1) : (e26 = Us2(e26), t5 === n2 ? (t5 = e26, e26 = 0) : t5 = Us2(t5)), e26 > t5) {
          var i2 = e26;
          e26 = t5, t5 = i2;
        }
        if (r4 || e26 % 1 || t5 % 1) {
          var a3 = Jr2();
          return zr2(e26 + a3 * (t5 - e26 + wt2("1e-" + ((a3 + "").length - 1))), t5);
        }
        return Ci2(e26, t5);
      }, dn2.reduce = function(e26, t5, r4) {
        var n3 = vs(e26) ? er2 : fr2, i2 = arguments.length < 3;
        return n3(e26, Na2(t5, 4), r4, i2, Vn2);
      }, dn2.reduceRight = function(e26, t5, r4) {
        var n3 = vs(e26) ? tr2 : fr2, i2 = arguments.length < 3;
        return n3(e26, Na2(t5, 4), r4, i2, Un2);
      }, dn2.repeat = function(e26, t5, r4) {
        return t5 = (r4 ? Ha2(e26, t5, r4) : t5 === n2) ? 1 : qs2(t5), Si2(zs2(e26), t5);
      }, dn2.replace = function() {
        var e26 = arguments, t5 = zs2(e26[0]);
        return e26.length < 3 ? t5 : t5.replace(e26[1], e26[2]);
      }, dn2.result = function(e26, t5, r4) {
        var i2 = -1, a3 = (t5 = Hi2(t5, e26)).length;
        for (a3 || (a3 = 1, e26 = n2); ++i2 < a3; ) {
          var o3 = null == e26 ? n2 : e26[lo2(t5[i2])];
          o3 === n2 && (i2 = a3, o3 = r4), e26 = Ds2(o3) ? o3.call(e26) : o3;
        }
        return e26;
      }, dn2.round = Xu2, dn2.runInContext = e25, dn2.sample = function(e26) {
        return (vs(e26) ? Dn2 : Di2)(e26);
      }, dn2.size = function(e26) {
        if (null == e26) return 0;
        if (bs2(e26)) return Ls2(e26) ? _r2(e26) : e26.length;
        var t5 = qa2(e26);
        return t5 == J2 || t5 == te2 ? e26.size : li2(e26).length;
      }, dn2.snakeCase = Eu2, dn2.some = function(e26, t5, r4) {
        var i2 = vs(e26) ? rr2 : Ii2;
        return r4 && Ha2(e26, t5, r4) && (t5 = n2), i2(e26, Na2(t5, 3));
      }, dn2.sortedIndex = function(e26, t5) {
        return Bi2(e26, t5);
      }, dn2.sortedIndexBy = function(e26, t5, r4) {
        return Oi2(e26, t5, Na2(r4, 2));
      }, dn2.sortedIndexOf = function(e26, t5) {
        var r4 = null == e26 ? 0 : e26.length;
        if (r4) {
          var n3 = Bi2(e26, t5);
          if (n3 < r4 && ds(e26[n3], t5)) return n3;
        }
        return -1;
      }, dn2.sortedLastIndex = function(e26, t5) {
        return Bi2(e26, t5, true);
      }, dn2.sortedLastIndexBy = function(e26, t5, r4) {
        return Oi2(e26, t5, Na2(r4, 2), true);
      }, dn2.sortedLastIndexOf = function(e26, t5) {
        if (null == e26 ? 0 : e26.length) {
          var r4 = Bi2(e26, t5, true) - 1;
          if (ds(e26[r4], t5)) return r4;
        }
        return -1;
      }, dn2.startCase = Cu2, dn2.startsWith = function(e26, t5, r4) {
        return e26 = zs2(e26), r4 = null == r4 ? 0 : Ln2(qs2(r4), 0, e26.length), t5 = ji(t5), e26.slice(r4, r4 + t5.length) == t5;
      }, dn2.subtract = Yu2, dn2.sum = function(e26) {
        return e26 && e26.length ? hr2(e26, Pu2) : 0;
      }, dn2.sumBy = function(e26, t5) {
        return e26 && e26.length ? hr2(e26, Na2(t5, 2)) : 0;
      }, dn2.template = function(e26, t5, r4) {
        var i2 = dn2.templateSettings;
        r4 && Ha2(e26, t5, r4) && (t5 = n2), e26 = zs2(e26), t5 = Js2({}, t5, i2, Fa2);
        var a3, o3, s3 = Js2({}, t5.imports, i2.imports, Fa2), u3 = au2(s3), c3 = gr2(s3, u3), l3 = 0, p3 = t5.interpolate || Je2, f3 = "__p += '", h3 = nt3((t5.escape || Je2).source + "|" + p3.source + "|" + (p3 === Ae2 ? Ue2 : Je2).source + "|" + (t5.evaluate || Je2).source + "|$", "g"), d3 = "//# sourceURL=" + (pt3.call(t5, "sourceURL") ? (t5.sourceURL + "").replace(/[\r\n]/g, " ") : "lodash.templateSources[" + ++kt2 + "]") + "\n";
        e26.replace(h3, function(t6, r5, n3, i3, s4, u4) {
          return n3 || (n3 = i3), f3 += e26.slice(l3, u4).replace(Qe2, Cr), r5 && (a3 = true, f3 += "' +\n__e(" + r5 + ") +\n'"), s4 && (o3 = true, f3 += "';\n" + s4 + ";\n__p += '"), n3 && (f3 += "' +\n((__t = (" + n3 + ")) == null ? '' : __t) +\n'"), l3 = u4 + t6.length, t6;
        }), f3 += "';\n";
        var m3 = pt3.call(t5, "variable") && t5.variable;
        m3 || (f3 = "with (obj) {\n" + f3 + "\n}\n"), f3 = (o3 ? f3.replace(ve2, "") : f3).replace(xe2, "$1").replace(be2, "$1;"), f3 = "function(" + (m3 || "obj") + ") {\n" + (m3 ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (a3 ? ", __e = _.escape" : "") + (o3 ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + f3 + "return __p\n}";
        var g3 = Fu2(function() {
          return et3(u3, d3 + "return " + f3).apply(n2, c3);
        });
        if (g3.source = f3, ks2(g3)) throw g3;
        return g3;
      }, dn2.times = function(e26, t5) {
        if ((e26 = qs2(e26)) < 1 || e26 > B2) return [];
        var r4 = N2, n3 = zr2(e26, N2);
        t5 = Na2(t5), e26 -= N2;
        for (var i2 = dr2(n3, t5); ++r4 < e26; ) t5(r4);
        return i2;
      }, dn2.toFinite = Us2, dn2.toInteger = qs2, dn2.toLength = Ws2, dn2.toLower = function(e26) {
        return zs2(e26).toLowerCase();
      }, dn2.toNumber = $s2, dn2.toSafeInteger = function(e26) {
        return e26 ? Ln2(qs2(e26), -B2, B2) : 0 === e26 ? e26 : 0;
      }, dn2.toString = zs2, dn2.toUpper = function(e26) {
        return zs2(e26).toUpperCase();
      }, dn2.trim = function(e26, t5, r4) {
        if ((e26 = zs2(e26)) && (r4 || t5 === n2)) return e26.replace(Be2, "");
        if (!e26 || !(t5 = ji(t5))) return e26;
        var i2 = Tr2(e26), a3 = Tr2(t5);
        return Ji2(i2, vr2(i2, a3), xr2(i2, a3) + 1).join("");
      }, dn2.trimEnd = function(e26, t5, r4) {
        if ((e26 = zs2(e26)) && (r4 || t5 === n2)) return e26.replace(Le2, "");
        if (!e26 || !(t5 = ji(t5))) return e26;
        var i2 = Tr2(e26);
        return Ji2(i2, 0, xr2(i2, Tr2(t5)) + 1).join("");
      }, dn2.trimStart = function(e26, t5, r4) {
        if ((e26 = zs2(e26)) && (r4 || t5 === n2)) return e26.replace(Oe2, "");
        if (!e26 || !(t5 = ji(t5))) return e26;
        var i2 = Tr2(e26);
        return Ji2(i2, vr2(i2, Tr2(t5))).join("");
      }, dn2.truncate = function(e26, t5) {
        var r4 = F2, i2 = A2;
        if (ws2(t5)) {
          var a3 = "separator" in t5 ? t5.separator : a3;
          r4 = "length" in t5 ? qs2(t5.length) : r4, i2 = "omission" in t5 ? ji(t5.omission) : i2;
        }
        var o3 = (e26 = zs2(e26)).length;
        if (Sr(e26)) {
          var s3 = Tr2(e26);
          o3 = s3.length;
        }
        if (r4 >= o3) return e26;
        var u3 = r4 - _r2(i2);
        if (u3 < 1) return i2;
        var c3 = s3 ? Ji2(s3, 0, u3).join("") : e26.slice(0, u3);
        if (a3 === n2) return c3 + i2;
        if (s3 && (u3 += c3.length - u3), Bs2(a3)) {
          if (e26.slice(u3).search(a3)) {
            var l3, p3 = c3;
            for (a3.global || (a3 = nt3(a3.source, zs2(qe2.exec(a3)) + "g")), a3.lastIndex = 0; l3 = a3.exec(p3); ) var f3 = l3.index;
            c3 = c3.slice(0, f3 === n2 ? u3 : f3);
          }
        } else if (e26.indexOf(ji(a3), u3) != u3) {
          var h3 = c3.lastIndexOf(a3);
          h3 > -1 && (c3 = c3.slice(0, h3));
        }
        return c3 + i2;
      }, dn2.unescape = function(e26) {
        return (e26 = zs2(e26)) && Se2.test(e26) ? e26.replace(Ee2, Pr2) : e26;
      }, dn2.uniqueId = function(e26) {
        var t5 = ++ft3;
        return zs2(e26) + t5;
      }, dn2.upperCase = Su2, dn2.upperFirst = ku2, dn2.each = zo2, dn2.eachRight = Ho2, dn2.first = bo2, Lu2(dn2, (Ju2 = {}, Kn2(dn2, function(e26, t5) {
        pt3.call(dn2.prototype, t5) || (Ju2[t5] = e26);
      }), Ju2), { chain: false }), dn2.VERSION = "4.17.15", zt2(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(e26) {
        dn2[e26].placeholder = dn2;
      }), zt2(["drop", "take"], function(e26, t5) {
        vn2.prototype[e26] = function(r4) {
          r4 = r4 === n2 ? 1 : Gr2(qs2(r4), 0);
          var i2 = this.__filtered__ && !t5 ? new vn2(this) : this.clone();
          return i2.__filtered__ ? i2.__takeCount__ = zr2(r4, i2.__takeCount__) : i2.__views__.push({ size: zr2(r4, N2), type: e26 + (i2.__dir__ < 0 ? "Right" : "") }), i2;
        }, vn2.prototype[e26 + "Right"] = function(t6) {
          return this.reverse()[e26](t6).reverse();
        };
      }), zt2(["filter", "map", "takeWhile"], function(e26, t5) {
        var r4 = t5 + 1, n3 = r4 == T2 || 3 == r4;
        vn2.prototype[e26] = function(e27) {
          var t6 = this.clone();
          return t6.__iteratees__.push({ iteratee: Na2(e27, 3), type: r4 }), t6.__filtered__ = t6.__filtered__ || n3, t6;
        };
      }), zt2(["head", "last"], function(e26, t5) {
        var r4 = "take" + (t5 ? "Right" : "");
        vn2.prototype[e26] = function() {
          return this[r4](1).value()[0];
        };
      }), zt2(["initial", "tail"], function(e26, t5) {
        var r4 = "drop" + (t5 ? "" : "Right");
        vn2.prototype[e26] = function() {
          return this.__filtered__ ? new vn2(this) : this[r4](1);
        };
      }), vn2.prototype.compact = function() {
        return this.filter(Pu2);
      }, vn2.prototype.find = function(e26) {
        return this.filter(e26).head();
      }, vn2.prototype.findLast = function(e26) {
        return this.reverse().find(e26);
      }, vn2.prototype.invokeMap = ki2(function(e26, t5) {
        return "function" == typeof e26 ? new vn2(this) : this.map(function(r4) {
          return ii2(r4, e26, t5);
        });
      }), vn2.prototype.reject = function(e26) {
        return this.filter(cs(Na2(e26)));
      }, vn2.prototype.slice = function(e26, t5) {
        e26 = qs2(e26);
        var r4 = this;
        return r4.__filtered__ && (e26 > 0 || t5 < 0) ? new vn2(r4) : (e26 < 0 ? r4 = r4.takeRight(-e26) : e26 && (r4 = r4.drop(e26)), t5 !== n2 && (r4 = (t5 = qs2(t5)) < 0 ? r4.dropRight(-t5) : r4.take(t5 - e26)), r4);
      }, vn2.prototype.takeRightWhile = function(e26) {
        return this.reverse().takeWhile(e26).reverse();
      }, vn2.prototype.toArray = function() {
        return this.take(N2);
      }, Kn2(vn2.prototype, function(e26, t5) {
        var r4 = /^(?:filter|find|map|reject)|While$/.test(t5), i2 = /^(?:head|last)$/.test(t5), a3 = dn2[i2 ? "take" + ("last" == t5 ? "Right" : "") : t5], o3 = i2 || /^find/.test(t5);
        a3 && (dn2.prototype[t5] = function() {
          var t6 = this.__wrapped__, s3 = i2 ? [1] : arguments, u3 = t6 instanceof vn2, c3 = s3[0], l3 = u3 || vs(t6), p3 = function(e27) {
            var t7 = a3.apply(dn2, Zt2([e27], s3));
            return i2 && f3 ? t7[0] : t7;
          };
          l3 && r4 && "function" == typeof c3 && 1 != c3.length && (u3 = l3 = false);
          var f3 = this.__chain__, h3 = !!this.__actions__.length, d3 = o3 && !f3, m3 = u3 && !h3;
          if (!o3 && l3) {
            t6 = m3 ? t6 : new vn2(this);
            var g3 = e26.apply(t6, s3);
            return g3.__actions__.push({ func: Uo2, args: [p3], thisArg: n2 }), new yn2(g3, f3);
          }
          return d3 && m3 ? e26.apply(this, s3) : (g3 = this.thru(p3), d3 ? i2 ? g3.value()[0] : g3.value() : g3);
        });
      }), zt2(["pop", "push", "shift", "sort", "splice", "unshift"], function(e26) {
        var t5 = ot3[e26], r4 = /^(?:push|sort|unshift)$/.test(e26) ? "tap" : "thru", n3 = /^(?:pop|shift)$/.test(e26);
        dn2.prototype[e26] = function() {
          var e27 = arguments;
          if (n3 && !this.__chain__) {
            var i2 = this.value();
            return t5.apply(vs(i2) ? i2 : [], e27);
          }
          return this[r4](function(r5) {
            return t5.apply(vs(r5) ? r5 : [], e27);
          });
        };
      }), Kn2(vn2.prototype, function(e26, t5) {
        var r4 = dn2[t5];
        if (r4) {
          var n3 = r4.name + "";
          pt3.call(an2, n3) || (an2[n3] = []), an2[n3].push({ name: t5, func: r4 });
        }
      }), an2[da2(n2, y2).name] = [{ name: "wrapper", func: n2 }], vn2.prototype.clone = function() {
        var e26 = new vn2(this.__wrapped__);
        return e26.__actions__ = na2(this.__actions__), e26.__dir__ = this.__dir__, e26.__filtered__ = this.__filtered__, e26.__iteratees__ = na2(this.__iteratees__), e26.__takeCount__ = this.__takeCount__, e26.__views__ = na2(this.__views__), e26;
      }, vn2.prototype.reverse = function() {
        if (this.__filtered__) {
          var e26 = new vn2(this);
          e26.__dir__ = -1, e26.__filtered__ = true;
        } else (e26 = this.clone()).__dir__ *= -1;
        return e26;
      }, vn2.prototype.value = function() {
        var e26 = this.__wrapped__.value(), t5 = this.__dir__, r4 = vs(e26), n3 = t5 < 0, i2 = r4 ? e26.length : 0, a3 = function(e27, t6, r5) {
          var n4 = -1, i3 = r5.length;
          for (; ++n4 < i3; ) {
            var a4 = r5[n4], o4 = a4.size;
            switch (a4.type) {
              case "drop":
                e27 += o4;
                break;
              case "dropRight":
                t6 -= o4;
                break;
              case "take":
                t6 = zr2(t6, e27 + o4);
                break;
              case "takeRight":
                e27 = Gr2(e27, t6 - o4);
            }
          }
          return { start: e27, end: t6 };
        }(0, i2, this.__views__), o3 = a3.start, s3 = a3.end, u3 = s3 - o3, c3 = n3 ? s3 : o3 - 1, l3 = this.__iteratees__, p3 = l3.length, f3 = 0, h3 = zr2(u3, this.__takeCount__);
        if (!r4 || !n3 && i2 == u3 && h3 == u3) return qi2(e26, this.__actions__);
        var d3 = [];
        e: for (; u3-- && f3 < h3; ) {
          for (var m3 = -1, g3 = e26[c3 += t5]; ++m3 < p3; ) {
            var y3 = l3[m3], v3 = y3.iteratee, x3 = y3.type, b3 = v3(g3);
            if (x3 == P2) g3 = b3;
            else if (!b3) {
              if (x3 == T2) continue e;
              break e;
            }
          }
          d3[f3++] = g3;
        }
        return d3;
      }, dn2.prototype.at = qo2, dn2.prototype.chain = function() {
        return Vo2(this);
      }, dn2.prototype.commit = function() {
        return new yn2(this.value(), this.__chain__);
      }, dn2.prototype.next = function() {
        this.__values__ === n2 && (this.__values__ = Vs2(this.value()));
        var e26 = this.__index__ >= this.__values__.length;
        return { done: e26, value: e26 ? n2 : this.__values__[this.__index__++] };
      }, dn2.prototype.plant = function(e26) {
        for (var t5, r4 = this; r4 instanceof gn2; ) {
          var i2 = fo2(r4);
          i2.__index__ = 0, i2.__values__ = n2, t5 ? a3.__wrapped__ = i2 : t5 = i2;
          var a3 = i2;
          r4 = r4.__wrapped__;
        }
        return a3.__wrapped__ = e26, t5;
      }, dn2.prototype.reverse = function() {
        var e26 = this.__wrapped__;
        if (e26 instanceof vn2) {
          var t5 = e26;
          return this.__actions__.length && (t5 = new vn2(this)), (t5 = t5.reverse()).__actions__.push({ func: Uo2, args: [wo], thisArg: n2 }), new yn2(t5, this.__chain__);
        }
        return this.thru(wo);
      }, dn2.prototype.toJSON = dn2.prototype.valueOf = dn2.prototype.value = function() {
        return qi2(this.__wrapped__, this.__actions__);
      }, dn2.prototype.first = dn2.prototype.head, pr3 && (dn2.prototype[pr3] = function() {
        return this;
      }), dn2;
    }();
    Ot2 ? ((Ot2.exports = Ir2)._ = Ir2, Bt2._ = Ir2) : It2._ = Ir2;
  }).call(e);
});
var Am = { Array: false, ArrayBuffer: false, Atomics: false, BigInt: false, BigInt64Array: false, BigUint64Array: false, Boolean: false, constructor: false, DataView: false, Date: false, decodeURI: false, decodeURIComponent: false, encodeURI: false, encodeURIComponent: false, Error: false, escape: false, eval: false, EvalError: false, Float32Array: false, Float64Array: false, Function: false, globalThis: false, hasOwnProperty: false, Infinity: false, Int16Array: false, Int32Array: false, Int8Array: false, isFinite: false, isNaN: false, isPrototypeOf: false, JSON: false, Map: false, Math: false, NaN: false, Number: false, Object: false, parseFloat: false, parseInt: false, Promise: false, propertyIsEnumerable: false, Proxy: false, RangeError: false, ReferenceError: false, Reflect: false, RegExp: false, Set: false, SharedArrayBuffer: false, String: false, Symbol: false, SyntaxError: false, toLocaleString: false, toString: false, TypeError: false, Uint16Array: false, Uint32Array: false, Uint8Array: false, Uint8ClampedArray: false, undefined: false, unescape: false, URIError: false, valueOf: false, WeakMap: false, WeakSet: false };
var wm = { Array: false, Boolean: false, constructor: false, Date: false, decodeURI: false, decodeURIComponent: false, encodeURI: false, encodeURIComponent: false, Error: false, escape: false, eval: false, EvalError: false, Function: false, hasOwnProperty: false, Infinity: false, isFinite: false, isNaN: false, isPrototypeOf: false, JSON: false, Math: false, NaN: false, Number: false, Object: false, parseFloat: false, parseInt: false, propertyIsEnumerable: false, RangeError: false, ReferenceError: false, RegExp: false, String: false, SyntaxError: false, toLocaleString: false, toString: false, TypeError: false, undefined: false, unescape: false, URIError: false, valueOf: false };
var _m = { Array: false, ArrayBuffer: false, Boolean: false, constructor: false, DataView: false, Date: false, decodeURI: false, decodeURIComponent: false, encodeURI: false, encodeURIComponent: false, Error: false, escape: false, eval: false, EvalError: false, Float32Array: false, Float64Array: false, Function: false, hasOwnProperty: false, Infinity: false, Int16Array: false, Int32Array: false, Int8Array: false, isFinite: false, isNaN: false, isPrototypeOf: false, JSON: false, Map: false, Math: false, NaN: false, Number: false, Object: false, parseFloat: false, parseInt: false, Promise: false, propertyIsEnumerable: false, Proxy: false, RangeError: false, ReferenceError: false, Reflect: false, RegExp: false, Set: false, String: false, Symbol: false, SyntaxError: false, toLocaleString: false, toString: false, TypeError: false, Uint16Array: false, Uint32Array: false, Uint8Array: false, Uint8ClampedArray: false, undefined: false, unescape: false, URIError: false, valueOf: false, WeakMap: false, WeakSet: false };
var Tm = { Array: false, ArrayBuffer: false, Atomics: false, Boolean: false, constructor: false, DataView: false, Date: false, decodeURI: false, decodeURIComponent: false, encodeURI: false, encodeURIComponent: false, Error: false, escape: false, eval: false, EvalError: false, Float32Array: false, Float64Array: false, Function: false, hasOwnProperty: false, Infinity: false, Int16Array: false, Int32Array: false, Int8Array: false, isFinite: false, isNaN: false, isPrototypeOf: false, JSON: false, Map: false, Math: false, NaN: false, Number: false, Object: false, parseFloat: false, parseInt: false, Promise: false, propertyIsEnumerable: false, Proxy: false, RangeError: false, ReferenceError: false, Reflect: false, RegExp: false, Set: false, SharedArrayBuffer: false, String: false, Symbol: false, SyntaxError: false, toLocaleString: false, toString: false, TypeError: false, Uint16Array: false, Uint32Array: false, Uint8Array: false, Uint8ClampedArray: false, undefined: false, unescape: false, URIError: false, valueOf: false, WeakMap: false, WeakSet: false };
var Pm = { AbortController: false, AbortSignal: false, addEventListener: false, alert: false, AnalyserNode: false, Animation: false, AnimationEffectReadOnly: false, AnimationEffectTiming: false, AnimationEffectTimingReadOnly: false, AnimationEvent: false, AnimationPlaybackEvent: false, AnimationTimeline: false, applicationCache: false, ApplicationCache: false, ApplicationCacheErrorEvent: false, atob: false, Attr: false, Audio: false, AudioBuffer: false, AudioBufferSourceNode: false, AudioContext: false, AudioDestinationNode: false, AudioListener: false, AudioNode: false, AudioParam: false, AudioProcessingEvent: false, AudioScheduledSourceNode: false, "AudioWorkletGlobalScope ": false, AudioWorkletNode: false, AudioWorkletProcessor: false, BarProp: false, BaseAudioContext: false, BatteryManager: false, BeforeUnloadEvent: false, BiquadFilterNode: false, Blob: false, BlobEvent: false, blur: false, BroadcastChannel: false, btoa: false, BudgetService: false, ByteLengthQueuingStrategy: false, Cache: false, caches: false, CacheStorage: false, cancelAnimationFrame: false, cancelIdleCallback: false, CanvasCaptureMediaStreamTrack: false, CanvasGradient: false, CanvasPattern: false, CanvasRenderingContext2D: false, ChannelMergerNode: false, ChannelSplitterNode: false, CharacterData: false, clearInterval: false, clearTimeout: false, clientInformation: false, ClipboardEvent: false, close: false, closed: false, CloseEvent: false, Comment: false, CompositionEvent: false, confirm: false, console: false, ConstantSourceNode: false, ConvolverNode: false, CountQueuingStrategy: false, createImageBitmap: false, Credential: false, CredentialsContainer: false, crypto: false, Crypto: false, CryptoKey: false, CSS: false, CSSConditionRule: false, CSSFontFaceRule: false, CSSGroupingRule: false, CSSImportRule: false, CSSKeyframeRule: false, CSSKeyframesRule: false, CSSMediaRule: false, CSSNamespaceRule: false, CSSPageRule: false, CSSRule: false, CSSRuleList: false, CSSStyleDeclaration: false, CSSStyleRule: false, CSSStyleSheet: false, CSSSupportsRule: false, CustomElementRegistry: false, customElements: false, CustomEvent: false, DataTransfer: false, DataTransferItem: false, DataTransferItemList: false, defaultstatus: false, defaultStatus: false, DelayNode: false, DeviceMotionEvent: false, DeviceOrientationEvent: false, devicePixelRatio: false, dispatchEvent: false, document: false, Document: false, DocumentFragment: false, DocumentType: false, DOMError: false, DOMException: false, DOMImplementation: false, DOMMatrix: false, DOMMatrixReadOnly: false, DOMParser: false, DOMPoint: false, DOMPointReadOnly: false, DOMQuad: false, DOMRect: false, DOMRectReadOnly: false, DOMStringList: false, DOMStringMap: false, DOMTokenList: false, DragEvent: false, DynamicsCompressorNode: false, Element: false, ErrorEvent: false, event: false, Event: false, EventSource: false, EventTarget: false, external: false, fetch: false, File: false, FileList: false, FileReader: false, find: false, focus: false, FocusEvent: false, FontFace: false, FontFaceSetLoadEvent: false, FormData: false, frameElement: false, frames: false, GainNode: false, Gamepad: false, GamepadButton: false, GamepadEvent: false, getComputedStyle: false, getSelection: false, HashChangeEvent: false, Headers: false, history: false, History: false, HTMLAllCollection: false, HTMLAnchorElement: false, HTMLAreaElement: false, HTMLAudioElement: false, HTMLBaseElement: false, HTMLBodyElement: false, HTMLBRElement: false, HTMLButtonElement: false, HTMLCanvasElement: false, HTMLCollection: false, HTMLContentElement: false, HTMLDataElement: false, HTMLDataListElement: false, HTMLDetailsElement: false, HTMLDialogElement: false, HTMLDirectoryElement: false, HTMLDivElement: false, HTMLDListElement: false, HTMLDocument: false, HTMLElement: false, HTMLEmbedElement: false, HTMLFieldSetElement: false, HTMLFontElement: false, HTMLFormControlsCollection: false, HTMLFormElement: false, HTMLFrameElement: false, HTMLFrameSetElement: false, HTMLHeadElement: false, HTMLHeadingElement: false, HTMLHRElement: false, HTMLHtmlElement: false, HTMLIFrameElement: false, HTMLImageElement: false, HTMLInputElement: false, HTMLLabelElement: false, HTMLLegendElement: false, HTMLLIElement: false, HTMLLinkElement: false, HTMLMapElement: false, HTMLMarqueeElement: false, HTMLMediaElement: false, HTMLMenuElement: false, HTMLMetaElement: false, HTMLMeterElement: false, HTMLModElement: false, HTMLObjectElement: false, HTMLOListElement: false, HTMLOptGroupElement: false, HTMLOptionElement: false, HTMLOptionsCollection: false, HTMLOutputElement: false, HTMLParagraphElement: false, HTMLParamElement: false, HTMLPictureElement: false, HTMLPreElement: false, HTMLProgressElement: false, HTMLQuoteElement: false, HTMLScriptElement: false, HTMLSelectElement: false, HTMLShadowElement: false, HTMLSlotElement: false, HTMLSourceElement: false, HTMLSpanElement: false, HTMLStyleElement: false, HTMLTableCaptionElement: false, HTMLTableCellElement: false, HTMLTableColElement: false, HTMLTableElement: false, HTMLTableRowElement: false, HTMLTableSectionElement: false, HTMLTemplateElement: false, HTMLTextAreaElement: false, HTMLTimeElement: false, HTMLTitleElement: false, HTMLTrackElement: false, HTMLUListElement: false, HTMLUnknownElement: false, HTMLVideoElement: false, IDBCursor: false, IDBCursorWithValue: false, IDBDatabase: false, IDBFactory: false, IDBIndex: false, IDBKeyRange: false, IDBObjectStore: false, IDBOpenDBRequest: false, IDBRequest: false, IDBTransaction: false, IDBVersionChangeEvent: false, IdleDeadline: false, IIRFilterNode: false, Image: false, ImageBitmap: false, ImageBitmapRenderingContext: false, ImageCapture: false, ImageData: false, indexedDB: false, innerHeight: false, innerWidth: false, InputEvent: false, IntersectionObserver: false, IntersectionObserverEntry: false, Intl: false, isSecureContext: false, KeyboardEvent: false, KeyframeEffect: false, KeyframeEffectReadOnly: false, length: false, localStorage: false, location: true, Location: false, locationbar: false, matchMedia: false, MediaDeviceInfo: false, MediaDevices: false, MediaElementAudioSourceNode: false, MediaEncryptedEvent: false, MediaError: false, MediaKeyMessageEvent: false, MediaKeySession: false, MediaKeyStatusMap: false, MediaKeySystemAccess: false, MediaList: false, MediaQueryList: false, MediaQueryListEvent: false, MediaRecorder: false, MediaSettingsRange: false, MediaSource: false, MediaStream: false, MediaStreamAudioDestinationNode: false, MediaStreamAudioSourceNode: false, MediaStreamEvent: false, MediaStreamTrack: false, MediaStreamTrackEvent: false, menubar: false, MessageChannel: false, MessageEvent: false, MessagePort: false, MIDIAccess: false, MIDIConnectionEvent: false, MIDIInput: false, MIDIInputMap: false, MIDIMessageEvent: false, MIDIOutput: false, MIDIOutputMap: false, MIDIPort: false, MimeType: false, MimeTypeArray: false, MouseEvent: false, moveBy: false, moveTo: false, MutationEvent: false, MutationObserver: false, MutationRecord: false, name: false, NamedNodeMap: false, NavigationPreloadManager: false, navigator: false, Navigator: false, NetworkInformation: false, Node: false, NodeFilter: false, NodeIterator: false, NodeList: false, Notification: false, OfflineAudioCompletionEvent: false, OfflineAudioContext: false, offscreenBuffering: false, OffscreenCanvas: true, onabort: true, onafterprint: true, onanimationend: true, onanimationiteration: true, onanimationstart: true, onappinstalled: true, onauxclick: true, onbeforeinstallprompt: true, onbeforeprint: true, onbeforeunload: true, onblur: true, oncancel: true, oncanplay: true, oncanplaythrough: true, onchange: true, onclick: true, onclose: true, oncontextmenu: true, oncuechange: true, ondblclick: true, ondevicemotion: true, ondeviceorientation: true, ondeviceorientationabsolute: true, ondrag: true, ondragend: true, ondragenter: true, ondragleave: true, ondragover: true, ondragstart: true, ondrop: true, ondurationchange: true, onemptied: true, onended: true, onerror: true, onfocus: true, ongotpointercapture: true, onhashchange: true, oninput: true, oninvalid: true, onkeydown: true, onkeypress: true, onkeyup: true, onlanguagechange: true, onload: true, onloadeddata: true, onloadedmetadata: true, onloadstart: true, onlostpointercapture: true, onmessage: true, onmessageerror: true, onmousedown: true, onmouseenter: true, onmouseleave: true, onmousemove: true, onmouseout: true, onmouseover: true, onmouseup: true, onmousewheel: true, onoffline: true, ononline: true, onpagehide: true, onpageshow: true, onpause: true, onplay: true, onplaying: true, onpointercancel: true, onpointerdown: true, onpointerenter: true, onpointerleave: true, onpointermove: true, onpointerout: true, onpointerover: true, onpointerup: true, onpopstate: true, onprogress: true, onratechange: true, onrejectionhandled: true, onreset: true, onresize: true, onscroll: true, onsearch: true, onseeked: true, onseeking: true, onselect: true, onstalled: true, onstorage: true, onsubmit: true, onsuspend: true, ontimeupdate: true, ontoggle: true, ontransitionend: true, onunhandledrejection: true, onunload: true, onvolumechange: true, onwaiting: true, onwheel: true, open: false, openDatabase: false, opener: false, Option: false, origin: false, OscillatorNode: false, outerHeight: false, outerWidth: false, PageTransitionEvent: false, pageXOffset: false, pageYOffset: false, PannerNode: false, parent: false, Path2D: false, PaymentAddress: false, PaymentRequest: false, PaymentRequestUpdateEvent: false, PaymentResponse: false, performance: false, Performance: false, PerformanceEntry: false, PerformanceLongTaskTiming: false, PerformanceMark: false, PerformanceMeasure: false, PerformanceNavigation: false, PerformanceNavigationTiming: false, PerformanceObserver: false, PerformanceObserverEntryList: false, PerformancePaintTiming: false, PerformanceResourceTiming: false, PerformanceTiming: false, PeriodicWave: false, Permissions: false, PermissionStatus: false, personalbar: false, PhotoCapabilities: false, Plugin: false, PluginArray: false, PointerEvent: false, PopStateEvent: false, postMessage: false, Presentation: false, PresentationAvailability: false, PresentationConnection: false, PresentationConnectionAvailableEvent: false, PresentationConnectionCloseEvent: false, PresentationConnectionList: false, PresentationReceiver: false, PresentationRequest: false, print: false, ProcessingInstruction: false, ProgressEvent: false, PromiseRejectionEvent: false, prompt: false, PushManager: false, PushSubscription: false, PushSubscriptionOptions: false, queueMicrotask: false, RadioNodeList: false, Range: false, ReadableStream: false, registerProcessor: false, RemotePlayback: false, removeEventListener: false, Request: false, requestAnimationFrame: false, requestIdleCallback: false, resizeBy: false, ResizeObserver: false, ResizeObserverEntry: false, resizeTo: false, Response: false, RTCCertificate: false, RTCDataChannel: false, RTCDataChannelEvent: false, RTCDtlsTransport: false, RTCIceCandidate: false, RTCIceGatherer: false, RTCIceTransport: false, RTCPeerConnection: false, RTCPeerConnectionIceEvent: false, RTCRtpContributingSource: false, RTCRtpReceiver: false, RTCRtpSender: false, RTCSctpTransport: false, RTCSessionDescription: false, RTCStatsReport: false, RTCTrackEvent: false, screen: false, Screen: false, screenLeft: false, ScreenOrientation: false, screenTop: false, screenX: false, screenY: false, ScriptProcessorNode: false, scroll: false, scrollbars: false, scrollBy: false, scrollTo: false, scrollX: false, scrollY: false, SecurityPolicyViolationEvent: false, Selection: false, self: false, ServiceWorker: false, ServiceWorkerContainer: false, ServiceWorkerRegistration: false, sessionStorage: false, setInterval: false, setTimeout: false, ShadowRoot: false, SharedWorker: false, SourceBuffer: false, SourceBufferList: false, speechSynthesis: false, SpeechSynthesisEvent: false, SpeechSynthesisUtterance: false, StaticRange: false, status: false, statusbar: false, StereoPannerNode: false, stop: false, Storage: false, StorageEvent: false, StorageManager: false, styleMedia: false, StyleSheet: false, StyleSheetList: false, SubtleCrypto: false, SVGAElement: false, SVGAngle: false, SVGAnimatedAngle: false, SVGAnimatedBoolean: false, SVGAnimatedEnumeration: false, SVGAnimatedInteger: false, SVGAnimatedLength: false, SVGAnimatedLengthList: false, SVGAnimatedNumber: false, SVGAnimatedNumberList: false, SVGAnimatedPreserveAspectRatio: false, SVGAnimatedRect: false, SVGAnimatedString: false, SVGAnimatedTransformList: false, SVGAnimateElement: false, SVGAnimateMotionElement: false, SVGAnimateTransformElement: false, SVGAnimationElement: false, SVGCircleElement: false, SVGClipPathElement: false, SVGComponentTransferFunctionElement: false, SVGDefsElement: false, SVGDescElement: false, SVGDiscardElement: false, SVGElement: false, SVGEllipseElement: false, SVGFEBlendElement: false, SVGFEColorMatrixElement: false, SVGFEComponentTransferElement: false, SVGFECompositeElement: false, SVGFEConvolveMatrixElement: false, SVGFEDiffuseLightingElement: false, SVGFEDisplacementMapElement: false, SVGFEDistantLightElement: false, SVGFEDropShadowElement: false, SVGFEFloodElement: false, SVGFEFuncAElement: false, SVGFEFuncBElement: false, SVGFEFuncGElement: false, SVGFEFuncRElement: false, SVGFEGaussianBlurElement: false, SVGFEImageElement: false, SVGFEMergeElement: false, SVGFEMergeNodeElement: false, SVGFEMorphologyElement: false, SVGFEOffsetElement: false, SVGFEPointLightElement: false, SVGFESpecularLightingElement: false, SVGFESpotLightElement: false, SVGFETileElement: false, SVGFETurbulenceElement: false, SVGFilterElement: false, SVGForeignObjectElement: false, SVGGElement: false, SVGGeometryElement: false, SVGGradientElement: false, SVGGraphicsElement: false, SVGImageElement: false, SVGLength: false, SVGLengthList: false, SVGLinearGradientElement: false, SVGLineElement: false, SVGMarkerElement: false, SVGMaskElement: false, SVGMatrix: false, SVGMetadataElement: false, SVGMPathElement: false, SVGNumber: false, SVGNumberList: false, SVGPathElement: false, SVGPatternElement: false, SVGPoint: false, SVGPointList: false, SVGPolygonElement: false, SVGPolylineElement: false, SVGPreserveAspectRatio: false, SVGRadialGradientElement: false, SVGRect: false, SVGRectElement: false, SVGScriptElement: false, SVGSetElement: false, SVGStopElement: false, SVGStringList: false, SVGStyleElement: false, SVGSVGElement: false, SVGSwitchElement: false, SVGSymbolElement: false, SVGTextContentElement: false, SVGTextElement: false, SVGTextPathElement: false, SVGTextPositioningElement: false, SVGTitleElement: false, SVGTransform: false, SVGTransformList: false, SVGTSpanElement: false, SVGUnitTypes: false, SVGUseElement: false, SVGViewElement: false, TaskAttributionTiming: false, Text: false, TextDecoder: false, TextEncoder: false, TextEvent: false, TextMetrics: false, TextTrack: false, TextTrackCue: false, TextTrackCueList: false, TextTrackList: false, TimeRanges: false, toolbar: false, top: false, Touch: false, TouchEvent: false, TouchList: false, TrackEvent: false, TransitionEvent: false, TreeWalker: false, UIEvent: false, URL: false, URLSearchParams: false, ValidityState: false, visualViewport: false, VisualViewport: false, VTTCue: false, WaveShaperNode: false, WebAssembly: false, WebGL2RenderingContext: false, WebGLActiveInfo: false, WebGLBuffer: false, WebGLContextEvent: false, WebGLFramebuffer: false, WebGLProgram: false, WebGLQuery: false, WebGLRenderbuffer: false, WebGLRenderingContext: false, WebGLSampler: false, WebGLShader: false, WebGLShaderPrecisionFormat: false, WebGLSync: false, WebGLTexture: false, WebGLTransformFeedback: false, WebGLUniformLocation: false, WebGLVertexArrayObject: false, WebSocket: false, WheelEvent: false, window: false, Window: false, Worker: false, WritableStream: false, XMLDocument: false, XMLHttpRequest: false, XMLHttpRequestEventTarget: false, XMLHttpRequestUpload: false, XMLSerializer: false, XPathEvaluator: false, XPathExpression: false, XPathResult: false, XSLTProcessor: false };
var Im = { addEventListener: false, applicationCache: false, atob: false, Blob: false, BroadcastChannel: false, btoa: false, Cache: false, caches: false, clearInterval: false, clearTimeout: false, close: true, console: false, fetch: false, FileReaderSync: false, FormData: false, Headers: false, IDBCursor: false, IDBCursorWithValue: false, IDBDatabase: false, IDBFactory: false, IDBIndex: false, IDBKeyRange: false, IDBObjectStore: false, IDBOpenDBRequest: false, IDBRequest: false, IDBTransaction: false, IDBVersionChangeEvent: false, ImageData: false, importScripts: true, indexedDB: false, location: false, MessageChannel: false, MessagePort: false, name: false, navigator: false, Notification: false, onclose: true, onconnect: true, onerror: true, onlanguagechange: true, onmessage: true, onoffline: true, ononline: true, onrejectionhandled: true, onunhandledrejection: true, performance: false, Performance: false, PerformanceEntry: false, PerformanceMark: false, PerformanceMeasure: false, PerformanceNavigation: false, PerformanceResourceTiming: false, PerformanceTiming: false, postMessage: true, Promise: false, queueMicrotask: false, removeEventListener: false, Request: false, Response: false, self: true, ServiceWorkerRegistration: false, setInterval: false, setTimeout: false, TextDecoder: false, TextEncoder: false, URL: false, URLSearchParams: false, WebSocket: false, Worker: false, WorkerGlobalScope: false, XMLHttpRequest: false };
var Bm = { __dirname: false, __filename: false, Buffer: false, clearImmediate: false, clearInterval: false, clearTimeout: false, console: false, exports: true, global: false, Intl: false, module: false, process: false, queueMicrotask: false, require: false, setImmediate: false, setInterval: false, setTimeout: false, TextDecoder: false, TextEncoder: false, URL: false, URLSearchParams: false };
var Om = { exports: true, global: false, module: false, require: false };
var Lm = { define: false, require: false };
var Nm = { after: false, afterEach: false, before: false, beforeEach: false, context: false, describe: false, it: false, mocha: false, run: false, setup: false, specify: false, suite: false, suiteSetup: false, suiteTeardown: false, teardown: false, test: false, xcontext: false, xdescribe: false, xit: false, xspecify: false };
var jm = { afterAll: false, afterEach: false, beforeAll: false, beforeEach: false, describe: false, expect: false, expectAsync: false, fail: false, fdescribe: false, fit: false, it: false, jasmine: false, pending: false, runs: false, spyOn: false, spyOnAllFunctions: false, spyOnProperty: false, waits: false, waitsFor: false, xdescribe: false, xit: false };
var Rm = { afterAll: false, afterEach: false, beforeAll: false, beforeEach: false, describe: false, expect: false, fdescribe: false, fit: false, it: false, jest: false, pit: false, require: false, test: false, xdescribe: false, xit: false, xtest: false };
var Mm = { asyncTest: false, deepEqual: false, equal: false, expect: false, module: false, notDeepEqual: false, notEqual: false, notOk: false, notPropEqual: false, notStrictEqual: false, ok: false, propEqual: false, QUnit: false, raises: false, start: false, stop: false, strictEqual: false, test: false, throws: false };
var Vm = { console: true, exports: true, phantom: true, require: true, WebPage: true };
var Um = { emit: false, exports: false, getRow: false, log: false, module: false, provides: false, require: false, respond: false, send: false, start: false, sum: false };
var qm = { defineClass: false, deserialize: false, gc: false, help: false, importClass: false, importPackage: false, java: false, load: false, loadClass: false, Packages: false, print: false, quit: false, readFile: false, readUrl: false, runCommand: false, seal: false, serialize: false, spawn: false, sync: false, toint32: false, version: false };
var Wm = { __DIR__: false, __FILE__: false, __LINE__: false, com: false, edu: false, exit: false, java: false, Java: false, javafx: false, JavaImporter: false, javax: false, JSAdapter: false, load: false, loadWithNewGlobal: false, org: false, Packages: false, print: false, quit: false };
var $m = { ActiveXObject: true, CollectGarbage: true, Debug: true, Enumerator: true, GetObject: true, RuntimeObject: true, ScriptEngine: true, ScriptEngineBuildVersion: true, ScriptEngineMajorVersion: true, ScriptEngineMinorVersion: true, VBArray: true, WScript: true, WSH: true, XDomainRequest: true };
var Gm = { $: false, jQuery: false };
var zm = { YAHOO: false, YAHOO_config: false, YUI: false, YUI_config: false };
var Hm = { cat: false, cd: false, chmod: false, config: false, cp: false, dirs: false, echo: false, env: false, error: false, exec: false, exit: false, find: false, grep: false, ln: false, ls: false, mkdir: false, mv: false, popd: false, pushd: false, pwd: false, rm: false, sed: false, set: false, target: false, tempdir: false, test: false, touch: false, which: false };
var Km = { $: false, $$: false, $A: false, $break: false, $continue: false, $F: false, $H: false, $R: false, $w: false, Abstract: false, Ajax: false, Autocompleter: false, Builder: false, Class: false, Control: false, Draggable: false, Draggables: false, Droppables: false, Effect: false, Element: false, Enumerable: false, Event: false, Field: false, Form: false, Hash: false, Insertion: false, ObjectRange: false, PeriodicalExecuter: false, Position: false, Prototype: false, Scriptaculous: false, Selector: false, Sortable: false, SortableObserver: false, Sound: false, Template: false, Toggle: false, Try: false };
var Jm = { _: false, $: false, Accounts: false, AccountsClient: false, AccountsCommon: false, AccountsServer: false, App: false, Assets: false, Blaze: false, check: false, Cordova: false, DDP: false, DDPRateLimiter: false, DDPServer: false, Deps: false, EJSON: false, Email: false, HTTP: false, Log: false, Match: false, Meteor: false, Mongo: false, MongoInternals: false, Npm: false, Package: false, Plugin: false, process: false, Random: false, ReactiveDict: false, ReactiveVar: false, Router: false, ServiceConfiguration: false, Session: false, share: false, Spacebars: false, Template: false, Tinytest: false, Tracker: false, UI: false, Utils: false, WebApp: false, WebAppInternals: false };
var Qm = { _isWindows: false, _rand: false, BulkWriteResult: false, cat: false, cd: false, connect: false, db: false, getHostName: false, getMemInfo: false, hostname: false, ISODate: false, listFiles: false, load: false, ls: false, md5sumFile: false, mkdir: false, Mongo: false, NumberInt: false, NumberLong: false, ObjectId: false, PlanCache: false, print: false, printjson: false, pwd: false, quit: false, removeFile: false, rs: false, sh: false, UUID: false, version: false, WriteResult: false };
var Xm = { $: false, Application: false, Automation: false, console: false, delay: false, Library: false, ObjC: false, ObjectSpecifier: false, Path: false, Progress: false, Ref: false };
var Ym = { addEventListener: false, applicationCache: false, atob: false, Blob: false, BroadcastChannel: false, btoa: false, Cache: false, caches: false, CacheStorage: false, clearInterval: false, clearTimeout: false, Client: false, clients: false, Clients: false, close: true, console: false, ExtendableEvent: false, ExtendableMessageEvent: false, fetch: false, FetchEvent: false, FileReaderSync: false, FormData: false, Headers: false, IDBCursor: false, IDBCursorWithValue: false, IDBDatabase: false, IDBFactory: false, IDBIndex: false, IDBKeyRange: false, IDBObjectStore: false, IDBOpenDBRequest: false, IDBRequest: false, IDBTransaction: false, IDBVersionChangeEvent: false, ImageData: false, importScripts: false, indexedDB: false, location: false, MessageChannel: false, MessagePort: false, name: false, navigator: false, Notification: false, onclose: true, onconnect: true, onerror: true, onfetch: true, oninstall: true, onlanguagechange: true, onmessage: true, onmessageerror: true, onnotificationclick: true, onnotificationclose: true, onoffline: true, ononline: true, onpush: true, onpushsubscriptionchange: true, onrejectionhandled: true, onsync: true, onunhandledrejection: true, performance: false, Performance: false, PerformanceEntry: false, PerformanceMark: false, PerformanceMeasure: false, PerformanceNavigation: false, PerformanceResourceTiming: false, PerformanceTiming: false, postMessage: true, Promise: false, queueMicrotask: false, registration: false, removeEventListener: false, Request: false, Response: false, self: false, ServiceWorker: false, ServiceWorkerContainer: false, ServiceWorkerGlobalScope: false, ServiceWorkerMessageEvent: false, ServiceWorkerRegistration: false, setInterval: false, setTimeout: false, skipWaiting: false, TextDecoder: false, TextEncoder: false, URL: false, URLSearchParams: false, WebSocket: false, WindowClient: false, Worker: false, WorkerGlobalScope: false, XMLHttpRequest: false };
var Zm = { advanceClock: false, fakeClearInterval: false, fakeClearTimeout: false, fakeSetInterval: false, fakeSetTimeout: false, resetTimeouts: false, waitsForPromise: false };
var eg = { andThen: false, click: false, currentPath: false, currentRouteName: false, currentURL: false, fillIn: false, find: false, findAll: false, findWithAssert: false, keyEvent: false, pauseTest: false, resumeTest: false, triggerEvent: false, visit: false, wait: false };
var tg = { $: false, $$: false, browser: false, by: false, By: false, DartObject: false, element: false, protractor: false };
var rg = { browser: false, chrome: false, opr: false };
var ng = { cloneInto: false, createObjectIn: false, exportFunction: false, GM: false, GM_addStyle: false, GM_deleteValue: false, GM_getResourceText: false, GM_getResourceURL: false, GM_getValue: false, GM_info: false, GM_listValues: false, GM_log: false, GM_openInTab: false, GM_registerMenuCommand: false, GM_setClipboard: false, GM_setValue: false, GM_xmlhttpRequest: false, unsafeWindow: false };
var ig = { $: false, $_: false, $$: false, $0: false, $1: false, $2: false, $3: false, $4: false, $x: false, chrome: false, clear: false, copy: false, debug: false, dir: false, dirxml: false, getEventListeners: false, inspect: false, keys: false, monitor: false, monitorEvents: false, profile: false, profileEnd: false, queryObjects: false, table: false, undebug: false, unmonitor: false, unmonitorEvents: false, values: false };
var ag = { builtin: Am, es5: wm, es2015: _m, es2017: Tm, browser: Pm, worker: Im, node: Bm, commonjs: Om, amd: Lm, mocha: Nm, jasmine: jm, jest: Rm, qunit: Mm, phantomjs: Vm, couch: Um, rhino: qm, nashorn: Wm, wsh: $m, jquery: Gm, yui: zm, shelljs: Hm, prototypejs: Km, meteor: Jm, mongo: Qm, applescript: Xm, serviceworker: Ym, atomtest: Zm, embertest: eg, protractor: tg, "shared-node-browser": { clearInterval: false, clearTimeout: false, console: false, setInterval: false, setTimeout: false, URL: false, URLSearchParams: false }, webextensions: rg, greasemonkey: ng, devtools: ig };
var og = n(Object.freeze({ __proto__: null, builtin: Am, es5: wm, es2015: _m, es2017: Tm, browser: Pm, worker: Im, node: Bm, commonjs: Om, amd: Lm, mocha: Nm, jasmine: jm, jest: Rm, qunit: Mm, phantomjs: Vm, couch: Um, rhino: qm, nashorn: Wm, wsh: $m, jquery: Gm, yui: zm, shelljs: Hm, prototypejs: Km, meteor: Jm, mongo: Qm, applescript: Xm, serviceworker: Ym, atomtest: Zm, embertest: eg, protractor: tg, webextensions: rg, greasemonkey: ng, devtools: ig, default: ag }));
var sg = 1e3;
var ug = 60 * sg;
var cg = 60 * ug;
var lg = 24 * cg;
var pg = 7 * lg;
var fg = 365.25 * lg;
var hg = function(e25, t3) {
  t3 = t3 || {};
  var r2 = i(e25);
  if ("string" === r2 && e25.length > 0) return function(e26) {
    if ((e26 = String(e26)).length > 100) return;
    var t4 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e26);
    if (!t4) return;
    var r3 = parseFloat(t4[1]);
    switch ((t4[2] || "ms").toLowerCase()) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return r3 * fg;
      case "weeks":
      case "week":
      case "w":
        return r3 * pg;
      case "days":
      case "day":
      case "d":
        return r3 * lg;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return r3 * cg;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return r3 * ug;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return r3 * sg;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return r3;
      default:
        return;
    }
  }(e25);
  if ("number" === r2 && isFinite(e25)) return t3.long ? function(e26) {
    var t4 = Math.abs(e26);
    if (t4 >= lg) return dg(e26, t4, lg, "day");
    if (t4 >= cg) return dg(e26, t4, cg, "hour");
    if (t4 >= ug) return dg(e26, t4, ug, "minute");
    if (t4 >= sg) return dg(e26, t4, sg, "second");
    return e26 + " ms";
  }(e25) : function(e26) {
    var t4 = Math.abs(e26);
    if (t4 >= lg) return Math.round(e26 / lg) + "d";
    if (t4 >= cg) return Math.round(e26 / cg) + "h";
    if (t4 >= ug) return Math.round(e26 / ug) + "m";
    if (t4 >= sg) return Math.round(e26 / sg) + "s";
    return e26 + "ms";
  }(e25);
  throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(e25));
};
function dg(e25, t3, r2, n2) {
  var i2 = t3 >= 1.5 * r2;
  return Math.round(e25 / r2) + " " + n2 + (i2 ? "s" : "");
}
var mg = function(e25) {
  function t3(e26) {
    for (var t4 = 0, n3 = 0; n3 < e26.length; n3++) t4 = (t4 << 5) - t4 + e26.charCodeAt(n3), t4 |= 0;
    return r2.colors[Math.abs(t4) % r2.colors.length];
  }
  function r2(e26) {
    var a3;
    function o2() {
      for (var e27 = arguments.length, t4 = new Array(e27), n3 = 0; n3 < e27; n3++) t4[n3] = arguments[n3];
      if (o2.enabled) {
        var i3 = o2, s2 = Number(/* @__PURE__ */ new Date()), u2 = s2 - (a3 || s2);
        i3.diff = u2, i3.prev = a3, i3.curr = s2, a3 = s2, t4[0] = r2.coerce(t4[0]), "string" != typeof t4[0] && t4.unshift("%O");
        var c2 = 0;
        t4[0] = t4[0].replace(/%([a-zA-Z%])/g, function(e28, n4) {
          if ("%%" === e28) return e28;
          c2++;
          var a4 = r2.formatters[n4];
          if ("function" == typeof a4) {
            var o3 = t4[c2];
            e28 = a4.call(i3, o3), t4.splice(c2, 1), c2--;
          }
          return e28;
        }), r2.formatArgs.call(i3, t4), (i3.log || r2.log).apply(i3, t4);
      }
    }
    return o2.namespace = e26, o2.enabled = r2.enabled(e26), o2.useColors = r2.useColors(), o2.color = t3(e26), o2.destroy = n2, o2.extend = i2, "function" == typeof r2.init && r2.init(o2), r2.instances.push(o2), o2;
  }
  function n2() {
    var e26 = r2.instances.indexOf(this);
    return -1 !== e26 && (r2.instances.splice(e26, 1), true);
  }
  function i2(e26, t4) {
    var n3 = r2(this.namespace + (void 0 === t4 ? ":" : t4) + e26);
    return n3.log = this.log, n3;
  }
  function a2(e26) {
    return e26.toString().substring(2, e26.toString().length - 2).replace(/\.\*\?$/, "*");
  }
  return r2.debug = r2, r2.default = r2, r2.coerce = function(e26) {
    if (e26 instanceof Error) return e26.stack || e26.message;
    return e26;
  }, r2.disable = function() {
    var e26 = [].concat(E(r2.names.map(a2)), E(r2.skips.map(a2).map(function(e27) {
      return "-" + e27;
    }))).join(",");
    return r2.enable(""), e26;
  }, r2.enable = function(e26) {
    var t4;
    r2.save(e26), r2.names = [], r2.skips = [];
    var n3 = ("string" == typeof e26 ? e26 : "").split(/[\s,]+/), i3 = n3.length;
    for (t4 = 0; t4 < i3; t4++) n3[t4] && ("-" === (e26 = n3[t4].replace(/\*/g, ".*?"))[0] ? r2.skips.push(new RegExp("^" + e26.substr(1) + "$")) : r2.names.push(new RegExp("^" + e26 + "$")));
    for (t4 = 0; t4 < r2.instances.length; t4++) {
      var a3 = r2.instances[t4];
      a3.enabled = r2.enabled(a3.namespace);
    }
  }, r2.enabled = function(e26) {
    if ("*" === e26[e26.length - 1]) return true;
    var t4, n3;
    for (t4 = 0, n3 = r2.skips.length; t4 < n3; t4++) if (r2.skips[t4].test(e26)) return false;
    for (t4 = 0, n3 = r2.names.length; t4 < n3; t4++) if (r2.names[t4].test(e26)) return true;
    return false;
  }, r2.humanize = hg, Object.keys(e25).forEach(function(t4) {
    r2[t4] = e25[t4];
  }), r2.instances = [], r2.names = [], r2.skips = [], r2.formatters = {}, r2.selectColor = t3, r2.enable(r2.load()), r2;
};
var gg = r(function(e25, t3) {
  t3.log = function() {
    var e26;
    return "object" === ("undefined" == typeof console ? "undefined" : i(console)) && console.log && (e26 = console).log.apply(e26, arguments);
  }, t3.formatArgs = function(t4) {
    if (t4[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + t4[0] + (this.useColors ? "%c " : " ") + "+" + e25.exports.humanize(this.diff), !this.useColors) return;
    var r2 = "color: " + this.color;
    t4.splice(1, 0, r2, "color: inherit");
    var n2 = 0, i2 = 0;
    t4[0].replace(/%[a-zA-Z%]/g, function(e26) {
      "%%" !== e26 && (n2++, "%c" === e26 && (i2 = n2));
    }), t4.splice(i2, 0, r2);
  }, t3.save = function(e26) {
    try {
      e26 ? t3.storage.setItem("debug", e26) : t3.storage.removeItem("debug");
    } catch (e27) {
    }
  }, t3.load = function() {
    var e26;
    try {
      e26 = t3.storage.getItem("debug");
    } catch (e27) {
    }
    !e26 && "undefined" != typeof process && "env" in process && (e26 = process.env.DEBUG);
    return e26;
  }, t3.useColors = function() {
    if ("undefined" != typeof window && window.process && ("renderer" === window.process.type || window.process.__nwjs)) return true;
    if ("undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) return false;
    return "undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }, t3.storage = function() {
    try {
      return localStorage;
    } catch (e26) {
    }
  }(), t3.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"], e25.exports = mg(t3), e25.exports.formatters.j = function(e26) {
    try {
      return JSON.stringify(e26);
    } catch (e27) {
      return "[UnexpectedJSONParseError]: " + e27.message;
    }
  };
});
gg.log, gg.formatArgs, gg.save, gg.load, gg.useColors, gg.storage, gg.colors;
function yg(e25, t3) {
  var r2 = t3.range[0], n2 = e25, i2 = false;
  do {
    i2 = false;
    var a2 = true, o2 = false, s2 = void 0;
    try {
      for (var u2, c2 = n2.childScopes[Symbol.iterator](); !(a2 = (u2 = c2.next()).done); a2 = true) {
        var l2 = u2.value, p2 = l2.block.range;
        if (p2[0] <= r2 && r2 < p2[1]) {
          n2 = l2, i2 = true;
          break;
        }
      }
    } catch (e26) {
      o2 = true, s2 = e26;
    } finally {
      try {
        a2 || null == c2.return || c2.return();
      } finally {
        if (o2) throw s2;
      }
    }
  } while (i2);
  return n2;
}
function vg(e25, t3) {
  var r2 = "", n2 = e25;
  for ("string" == typeof t3 ? r2 = t3 : (r2 = t3.name, n2 = yg(n2, t3)); null != n2; ) {
    var i2 = n2.set.get(r2);
    if (null != i2) return i2;
    n2 = n2.upper;
  }
  return null;
}
function xg(e25) {
  return !this(e25);
}
function bg(e25) {
  return xg.bind(e25);
}
function Eg(e25) {
  return "=>" === e25.value && "Punctuator" === e25.type;
}
function Cg(e25) {
  return "," === e25.value && "Punctuator" === e25.type;
}
function Sg(e25) {
  return ";" === e25.value && "Punctuator" === e25.type;
}
function kg(e25) {
  return ":" === e25.value && "Punctuator" === e25.type;
}
function Dg(e25) {
  return "(" === e25.value && "Punctuator" === e25.type;
}
function Fg(e25) {
  return ")" === e25.value && "Punctuator" === e25.type;
}
function Ag(e25) {
  return "[" === e25.value && "Punctuator" === e25.type;
}
function wg(e25) {
  return "]" === e25.value && "Punctuator" === e25.type;
}
function _g(e25) {
  return "{" === e25.value && "Punctuator" === e25.type;
}
function Tg(e25) {
  return "}" === e25.value && "Punctuator" === e25.type;
}
function Pg(e25) {
  return "Line" === e25.type || "Block" === e25.type || "Shebang" === e25.type;
}
var Ig = bg(Eg);
var Bg = bg(Cg);
var Og = bg(Sg);
var Lg = bg(kg);
var Ng = bg(Dg);
var jg = bg(Fg);
var Rg = bg(Ag);
var Mg = bg(wg);
var Vg = bg(_g);
var Ug = bg(Tg);
var qg = bg(Pg);
function Wg(e25, t3) {
  return e25.id ? t3.getTokenAfter(e25.id, Dg) : t3.getFirstToken(e25, Dg);
}
function $g(e25, t3) {
  var r2 = e25.parent, n2 = null, i2 = null;
  if ("ArrowFunctionExpression" === e25.type) {
    var a2 = t3.getTokenBefore(e25.body, Eg);
    n2 = a2.loc.start, i2 = a2.loc.end;
  } else "Property" === r2.type || "MethodDefinition" === r2.type ? (n2 = r2.loc.start, i2 = Wg(e25, t3).loc.start) : (n2 = e25.loc.start, i2 = Wg(e25, t3).loc.start);
  return { start: Object.assign({}, n2), end: Object.assign({}, i2) };
}
var Gg = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : "undefined" != typeof window ? window : "undefined" != typeof global ? global : {};
var zg = Object.freeze(/* @__PURE__ */ new Set(["Array", "ArrayBuffer", "BigInt", "BigInt64Array", "BigUint64Array", "Boolean", "DataView", "Date", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", "escape", "Float32Array", "Float64Array", "Function", "Infinity", "Int16Array", "Int32Array", "Int8Array", "isFinite", "isNaN", "isPrototypeOf", "JSON", "Map", "Math", "NaN", "Number", "Object", "parseFloat", "parseInt", "Promise", "Proxy", "Reflect", "RegExp", "Set", "String", "Symbol", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray", "undefined", "unescape", "WeakMap", "WeakSet"]));
var Hg = new Set([Array.isArray, "function" == typeof BigInt ? BigInt : void 0, Boolean, Date, Date.parse, decodeURI, decodeURIComponent, encodeURI, encodeURIComponent, escape, isFinite, isNaN, isPrototypeOf].concat(E(Object.getOwnPropertyNames(Math).map(function(e25) {
  return Math[e25];
}).filter(function(e25) {
  return "function" == typeof e25;
})), [Number, Number.isFinite, Number.isNaN, Number.parseFloat, Number.parseInt, Object, Object.entries, Object.is, Object.isExtensible, Object.isFrozen, Object.isSealed, Object.keys, Object.values, parseFloat, parseInt, RegExp, String, String.fromCharCode, String.fromCodePoint, String.raw, Symbol, Symbol.for, Symbol.keyFor, unescape]).filter(function(e25) {
  return "function" == typeof e25;
}));
var Kg = /* @__PURE__ */ new Set([Object.freeze, Object.preventExtensions, Object.seal]);
function Jg(e25, t3) {
  var r2 = function(e26, t4) {
    for (var r3 = e26; ("object" === i(r3) || "function" == typeof r3) && null !== r3; ) {
      var n2 = Object.getOwnPropertyDescriptor(r3, t4);
      if (n2) return n2;
      r3 = Object.getPrototypeOf(r3);
    }
    return null;
  }(e25, t3);
  return null != r2 && null != r2.get;
}
function Qg(e25, t3) {
  for (var r2 = [], n2 = 0; n2 < e25.length; ++n2) {
    var i2 = e25[n2];
    if (null == i2) r2.length = n2 + 1;
    else if ("SpreadElement" === i2.type) {
      var a2 = Yg(i2.argument, t3);
      if (null == a2) return null;
      r2.push.apply(r2, E(a2.value));
    } else {
      var o2 = Yg(i2, t3);
      if (null == o2) return null;
      r2.push(o2.value);
    }
  }
  return r2;
}
var Xg = Object.freeze({ ArrayExpression: function(e25, t3) {
  var r2 = Qg(e25.elements, t3);
  return null != r2 ? { value: r2 } : null;
}, AssignmentExpression: function(e25, t3) {
  return "=" === e25.operator ? Yg(e25.right, t3) : null;
}, BinaryExpression: function(e25, t3) {
  if ("in" === e25.operator || "instanceof" === e25.operator) return null;
  var r2 = Yg(e25.left, t3), n2 = Yg(e25.right, t3);
  if (null != r2 && null != n2) switch (e25.operator) {
    case "==":
      return { value: r2.value == n2.value };
    case "!=":
      return { value: r2.value != n2.value };
    case "===":
      return { value: r2.value === n2.value };
    case "!==":
      return { value: r2.value !== n2.value };
    case "<":
      return { value: r2.value < n2.value };
    case "<=":
      return { value: r2.value <= n2.value };
    case ">":
      return { value: r2.value > n2.value };
    case ">=":
      return { value: r2.value >= n2.value };
    case "<<":
      return { value: r2.value << n2.value };
    case ">>":
      return { value: r2.value >> n2.value };
    case ">>>":
      return { value: r2.value >>> n2.value };
    case "+":
      return { value: r2.value + n2.value };
    case "-":
      return { value: r2.value - n2.value };
    case "*":
      return { value: r2.value * n2.value };
    case "/":
      return { value: r2.value / n2.value };
    case "%":
      return { value: r2.value % n2.value };
    case "**":
      return { value: Math.pow(r2.value, n2.value) };
    case "|":
      return { value: r2.value | n2.value };
    case "^":
      return { value: r2.value ^ n2.value };
    case "&":
      return { value: r2.value & n2.value };
  }
  return null;
}, CallExpression: function(e25, t3) {
  var r2 = e25.callee, n2 = Qg(e25.arguments, t3);
  if (null != n2) if ("MemberExpression" === r2.type) {
    var i2 = Yg(r2.object, t3), a2 = r2.computed ? Yg(r2.property, t3) : { value: r2.property.name };
    if (null != i2 && null != a2) {
      var o2 = i2.value, s2 = a2.value;
      if (Hg.has(o2[s2])) return { value: o2[s2].apply(o2, E(n2)) };
      if (Kg.has(o2[s2])) return { value: n2[0] };
    }
  } else {
    var u2 = Yg(r2, t3);
    if (null != u2) {
      var c2 = u2.value;
      if (Hg.has(c2)) return { value: c2.apply(void 0, E(n2)) };
      if (Kg.has(c2)) return { value: n2[0] };
    }
  }
  return null;
}, ConditionalExpression: function(e25, t3) {
  var r2 = Yg(e25.test, t3);
  return null != r2 ? r2.value ? Yg(e25.consequent, t3) : Yg(e25.alternate, t3) : null;
}, ExpressionStatement: function(e25, t3) {
  return Yg(e25.expression, t3);
}, Identifier: function(e25, t3) {
  if (null != t3) {
    var r2 = vg(t3, e25);
    if (null != r2 && 0 === r2.defs.length && zg.has(r2.name) && r2.name in Gg) return { value: Gg[r2.name] };
    if (null != r2 && 1 === r2.defs.length) {
      var n2 = r2.defs[0];
      if (n2.parent && "const" === n2.parent.kind && "Identifier" === n2.node.id.type) return Yg(n2.node.init, t3);
    }
  }
  return null;
}, Literal: function(e25) {
  return null == e25.regex && null == e25.bigint || null != e25.value ? { value: e25.value } : null;
}, LogicalExpression: function(e25, t3) {
  var r2 = Yg(e25.left, t3);
  if (null != r2) {
    if ("||" === e25.operator && true === Boolean(r2.value) || "&&" === e25.operator && false === Boolean(r2.value)) return r2;
    var n2 = Yg(e25.right, t3);
    if (null != n2) return n2;
  }
  return null;
}, MemberExpression: function(e25, t3) {
  var r2 = Yg(e25.object, t3), n2 = e25.computed ? Yg(e25.property, t3) : { value: e25.property.name };
  return null == r2 || null == n2 || Jg(r2.value, n2.value) ? null : { value: r2.value[n2.value] };
}, NewExpression: function(e25, t3) {
  var r2 = Yg(e25.callee, t3), n2 = Qg(e25.arguments, t3);
  if (null != r2 && null != n2) {
    var i2 = r2.value;
    if (Hg.has(i2)) return { value: m(i2, E(n2)) };
  }
  return null;
}, ObjectExpression: function(e25, t3) {
  var r2 = {}, n2 = true, i2 = false, a2 = void 0;
  try {
    for (var o2, s2 = e25.properties[Symbol.iterator](); !(n2 = (o2 = s2.next()).done); n2 = true) {
      var u2 = o2.value;
      if ("Property" === u2.type) {
        if ("init" !== u2.kind) return null;
        var c2 = u2.computed ? Yg(u2.key, t3) : { value: u2.key.name }, l2 = Yg(u2.value, t3);
        if (null == c2 || null == l2) return null;
        r2[c2.value] = l2.value;
      } else {
        if ("SpreadElement" !== u2.type && "ExperimentalSpreadProperty" !== u2.type) return null;
        var p2 = Yg(u2.argument, t3);
        if (null == p2) return null;
        Object.assign(r2, p2.value);
      }
    }
  } catch (e26) {
    i2 = true, a2 = e26;
  } finally {
    try {
      n2 || null == s2.return || s2.return();
    } finally {
      if (i2) throw a2;
    }
  }
  return { value: r2 };
}, SequenceExpression: function(e25, t3) {
  return Yg(e25.expressions[e25.expressions.length - 1], t3);
}, TaggedTemplateExpression: function(e25, t3) {
  var r2 = Yg(e25.tag, t3), n2 = Qg(e25.quasi.expressions, t3);
  if (null != r2 && null != n2) {
    var i2 = r2.value, a2 = e25.quasi.quasis.map(function(e26) {
      return e26.value.cooked;
    });
    if (a2.raw = e25.quasi.quasis.map(function(e26) {
      return e26.value.raw;
    }), i2 === String.raw) return { value: i2.apply(void 0, [a2].concat(E(n2))) };
  }
  return null;
}, TemplateLiteral: function(e25, t3) {
  var r2 = Qg(e25.expressions, t3);
  if (null != r2) {
    for (var n2 = e25.quasis[0].value.cooked, i2 = 0; i2 < r2.length; ++i2) n2 += r2[i2], n2 += e25.quasis[i2 + 1].value.cooked;
    return { value: n2 };
  }
  return null;
}, UnaryExpression: function(e25, t3) {
  if ("delete" === e25.operator) return null;
  if ("void" === e25.operator) return { value: void 0 };
  var r2 = Yg(e25.argument, t3);
  if (null != r2) switch (e25.operator) {
    case "-":
      return { value: -r2.value };
    case "+":
      return { value: +r2.value };
    case "!":
      return { value: !r2.value };
    case "~":
      return { value: ~r2.value };
    case "typeof":
      return { value: i(r2.value) };
  }
  return null;
} });
function Yg(e25, t3) {
  return null != e25 && Object.hasOwnProperty.call(Xg, e25.type) ? Xg[e25.type](e25, t3) : null;
}
function Zg(e25) {
  var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
  try {
    return Yg(e25, t3);
  } catch (e26) {
    return null;
  }
}
function ey(e25) {
  var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
  if (e25 && "Literal" === e25.type && null === e25.value) {
    if (e25.regex) return "/".concat(e25.regex.pattern, "/").concat(e25.regex.flags);
    if (e25.bigint) return e25.bigint;
  }
  var r2 = Zg(e25, t3);
  return r2 && String(r2.value);
}
function ty(e25, t3) {
  switch (e25.type) {
    case "MemberExpression":
      return e25.computed ? ey(e25.property, t3) : e25.property.name;
    case "Property":
    case "MethodDefinition":
      return e25.computed ? ey(e25.key, t3) : "Literal" === e25.key.type ? String(e25.key.value) : e25.key.name;
  }
  return null;
}
function ry(e25) {
  var t3 = e25.parent, r2 = [];
  if ("MethodDefinition" === t3.type && t3.static && r2.push("static"), e25.async && r2.push("async"), e25.generator && r2.push("generator"), "ArrowFunctionExpression" === e25.type) r2.push("arrow", "function");
  else if ("Property" === t3.type || "MethodDefinition" === t3.type) {
    if ("constructor" === t3.kind) return "constructor";
    "get" === t3.kind ? r2.push("getter") : "set" === t3.kind ? r2.push("setter") : r2.push("method");
  } else r2.push("function");
  if (e25.id) r2.push("'".concat(e25.id.name, "'"));
  else {
    var n2 = ty(t3);
    n2 && r2.push("'".concat(n2, "'"));
  }
  return r2.join(" ");
}
var ny = Object.freeze(/* @__PURE__ */ new Set(["==", "!=", "<", "<=", ">", ">=", "<<", ">>", ">>>", "+", "-", "*", "/", "%", "|", "^", "&", "in"]));
var iy = Object.freeze(/* @__PURE__ */ new Set(["-", "+", "!", "~"]));
var ay = Object.freeze(Object.assign(/* @__PURE__ */ Object.create(null), { $visit: function(e25, t3, r2) {
  var n2 = e25.type;
  return "function" == typeof this[n2] ? this[n2](e25, t3, r2) : this.$visitChildren(e25, t3, r2);
}, $visitChildren: function(e25, t3, r2) {
  var n2 = e25.type, i2 = true, a2 = false, o2 = void 0;
  try {
    for (var s2, u2 = (r2[n2] || Lp.getKeys(e25))[Symbol.iterator](); !(i2 = (s2 = u2.next()).done); i2 = true) {
      var c2 = e25[s2.value];
      if (Array.isArray(c2)) {
        var l2 = true, p2 = false, f2 = void 0;
        try {
          for (var h2, d2 = c2[Symbol.iterator](); !(l2 = (h2 = d2.next()).done); l2 = true) {
            var m2 = h2.value;
            if (m2 && this.$visit(m2, t3, r2)) return true;
          }
        } catch (e26) {
          p2 = true, f2 = e26;
        } finally {
          try {
            l2 || null == d2.return || d2.return();
          } finally {
            if (p2) throw f2;
          }
        }
      } else if (c2 && this.$visit(c2, t3, r2)) return true;
    }
  } catch (e26) {
    a2 = true, o2 = e26;
  } finally {
    try {
      i2 || null == u2.return || u2.return();
    } finally {
      if (a2) throw o2;
    }
  }
  return false;
}, ArrowFunctionExpression: function() {
  return false;
}, AssignmentExpression: function() {
  return true;
}, AwaitExpression: function() {
  return true;
}, BinaryExpression: function(e25, t3, r2) {
  return !(!t3.considerImplicitTypeConversion || !ny.has(e25.operator) || "Literal" === e25.left.type && "Literal" === e25.right.type) || this.$visitChildren(e25, t3, r2);
}, CallExpression: function() {
  return true;
}, FunctionExpression: function() {
  return false;
}, ImportExpression: function() {
  return true;
}, MemberExpression: function(e25, t3, r2) {
  return !!t3.considerGetters || (!(!t3.considerImplicitTypeConversion || !e25.computed || "Literal" === e25.property.type) || this.$visitChildren(e25, t3, r2));
}, MethodDefinition: function(e25, t3, r2) {
  return !(!t3.considerImplicitTypeConversion || !e25.computed || "Literal" === e25.key.type) || this.$visitChildren(e25, t3, r2);
}, NewExpression: function() {
  return true;
}, Property: function(e25, t3, r2) {
  return !(!t3.considerImplicitTypeConversion || !e25.computed || "Literal" === e25.key.type) || this.$visitChildren(e25, t3, r2);
}, UnaryExpression: function(e25, t3, r2) {
  return "delete" === e25.operator || (!(!t3.considerImplicitTypeConversion || !iy.has(e25.operator) || "Literal" === e25.argument.type) || this.$visitChildren(e25, t3, r2));
}, UpdateExpression: function() {
  return true;
}, YieldExpression: function() {
  return true;
} }));
function oy(e25, t3) {
  var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n2 = r2.considerGetters, i2 = void 0 !== n2 && n2, a2 = r2.considerImplicitTypeConversion, o2 = void 0 !== a2 && a2;
  return ay.$visit(e25, { considerGetters: i2, considerImplicitTypeConversion: o2 }, t3.visitorKeys || Lp.KEYS);
}
function sy(e25, t3) {
  var r2 = e25.parent;
  switch (r2.type) {
    case "CallExpression":
    case "NewExpression":
      return 1 === r2.arguments.length && r2.arguments[0] === e25 ? t3.getTokenAfter(r2.callee, Dg) : null;
    case "DoWhileStatement":
      return r2.test === e25 ? t3.getTokenAfter(r2.body, Dg) : null;
    case "IfStatement":
    case "WhileStatement":
      return r2.test === e25 ? t3.getFirstToken(r2, 1) : null;
    case "ImportExpression":
      return r2.source === e25 ? t3.getFirstToken(r2, 1) : null;
    case "SwitchStatement":
      return r2.discriminant === e25 ? t3.getFirstToken(r2, 1) : null;
    case "WithStatement":
      return r2.object === e25 ? t3.getFirstToken(r2, 1) : null;
    default:
      return null;
  }
}
function uy(e25, t3, r2) {
  var n2, i2, a2, o2, s2;
  if ("number" == typeof e25) {
    if (i2 = t3, a2 = r2, !((n2 = 0 | e25) >= 1)) throw new TypeError("'times' should be a positive integer.");
  } else n2 = 1, i2 = e25, a2 = t3;
  if (null == i2) return false;
  o2 = s2 = i2;
  do {
    o2 = a2.getTokenBefore(o2), s2 = a2.getTokenAfter(s2);
  } while (null != o2 && null != s2 && Dg(o2) && Fg(s2) && o2 !== sy(i2, a2) && --n2 > 0);
  return 0 === n2;
}
var cy = /\$(?:[\$&'`]|[1-9][0-9]?)/g;
var ly = /* @__PURE__ */ new WeakMap();
function py(e25, t3) {
  for (var r2 = false, n2 = t3 - 1; n2 >= 0 && 92 === e25.charCodeAt(n2); --n2) r2 = !r2;
  return r2;
}
var fy = function() {
  function e25(t3) {
    var r2 = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).escaped, n2 = void 0 !== r2 && r2;
    if (a(this, e25), !(t3 instanceof RegExp)) throw new TypeError("'pattern' should be a RegExp instance.");
    if (!t3.flags.includes("g")) throw new Error("'pattern' should contains 'g' flag.");
    ly.set(this, { pattern: new RegExp(t3.source, t3.flags), escaped: Boolean(n2) });
  }
  return s(e25, [{ key: "execAll", value: regeneratorRuntime.mark(function e26(t3) {
    var r2, n2, i2, a2, o2;
    return regeneratorRuntime.wrap(function(e27) {
      for (; ; ) switch (e27.prev = e27.next) {
        case 0:
          r2 = ly.get(this), n2 = r2.pattern, i2 = r2.escaped, a2 = null, o2 = 0, n2.lastIndex = 0;
        case 4:
          if (null == (a2 = n2.exec(t3))) {
            e27.next = 12;
            break;
          }
          if (!i2 && py(t3, a2.index)) {
            e27.next = 10;
            break;
          }
          return o2 = n2.lastIndex, e27.next = 9, a2;
        case 9:
          n2.lastIndex = o2;
        case 10:
          e27.next = 4;
          break;
        case 12:
        case "end":
          return e27.stop();
      }
    }, e26, this);
  }) }, { key: "test", value: function(e26) {
    return !this.execAll(e26).next().done;
  } }, { key: Symbol.replace, value: function(e26, t3) {
    return "function" == typeof t3 ? function(e27, t4, r2) {
      var n2 = [], i2 = 0, a2 = true, o2 = false, s2 = void 0;
      try {
        for (var u2, c2 = e27.execAll(t4)[Symbol.iterator](); !(a2 = (u2 = c2.next()).done); a2 = true) {
          var l2 = u2.value;
          n2.push(t4.slice(i2, l2.index)), n2.push(String(r2.apply(void 0, E(l2).concat([l2.index, l2.input])))), i2 = l2.index + l2[0].length;
        }
      } catch (e28) {
        o2 = true, s2 = e28;
      } finally {
        try {
          a2 || null == c2.return || c2.return();
        } finally {
          if (o2) throw s2;
        }
      }
      return n2.push(t4.slice(i2)), n2.join("");
    }(this, String(e26), t3) : function(e27, t4, r2) {
      var n2 = [], i2 = 0, a2 = null;
      function o2(e28) {
        switch (e28) {
          case "$$":
            return "$";
          case "$&":
            return a2[0];
          case "$`":
            return t4.slice(0, a2.index);
          case "$'":
            return t4.slice(a2.index + a2[0].length);
          default:
            var r3 = e28.slice(1);
            return r3 in a2 ? a2[r3] : e28;
        }
      }
      var s2 = true, u2 = false, c2 = void 0;
      try {
        for (var l2, p2 = e27.execAll(t4)[Symbol.iterator](); !(s2 = (l2 = p2.next()).done); s2 = true) a2 = l2.value, n2.push(t4.slice(i2, a2.index)), n2.push(r2.replace(cy, o2)), i2 = a2.index + a2[0].length;
      } catch (e28) {
        u2 = true, c2 = e28;
      } finally {
        try {
          s2 || null == p2.return || p2.return();
        } finally {
          if (u2) throw c2;
        }
      }
      return n2.push(t4.slice(i2)), n2.join("");
    }(this, String(e26), String(t3));
  } }]), e25;
}();
var hy = /^(?:Import|Export(?:All|Default|Named))Declaration$/;
var dy = Function.call.bind(Object.hasOwnProperty);
var my = Symbol("read");
var gy = Symbol("call");
var yy = Symbol("construct");
var vy = Symbol("esm");
var xy = { require: u({}, gy, true) };
function by(e25) {
  return null == e25 || 0 !== e25.defs.length || e25.references.some(function(e26) {
    return e26.isWrite();
  });
}
function Ey(e25) {
  var t3 = e25.parent;
  switch (t3 && t3.type) {
    case "ConditionalExpression":
      return t3.consequent === e25 || t3.alternate === e25;
    case "LogicalExpression":
      return true;
    case "SequenceExpression":
      return t3.expressions[t3.expressions.length - 1] === e25;
    default:
      return false;
  }
}
var Cy = function() {
  function e25(t3) {
    var r2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n2 = r2.mode, i2 = void 0 === n2 ? "strict" : n2, o2 = r2.globalObjectNames, s2 = void 0 === o2 ? ["global", "self", "window"] : o2;
    a(this, e25), this.variableStack = [], this.globalScope = t3, this.mode = i2, this.globalObjectNames = s2.slice(0);
  }
  return s(e25, [{ key: "iterateGlobalReferences", value: regeneratorRuntime.mark(function e26(t3) {
    var r2, n2, i2, a2, o2, s2, u2, c2, l2, p2, f2, h2, d2, m2;
    return regeneratorRuntime.wrap(function(e27) {
      for (; ; ) switch (e27.prev = e27.next) {
        case 0:
          r2 = 0, n2 = Object.keys(t3);
        case 1:
          if (!(r2 < n2.length)) {
            e27.next = 12;
            break;
          }
          if (i2 = n2[r2], a2 = t3[i2], o2 = [i2], !by(s2 = this.globalScope.set.get(i2))) {
            e27.next = 8;
            break;
          }
          return e27.abrupt("continue", 9);
        case 8:
          return e27.delegateYield(this._iterateVariableReferences(s2, o2, a2, true), "t0", 9);
        case 9:
          r2++, e27.next = 1;
          break;
        case 12:
          u2 = true, c2 = false, l2 = void 0, e27.prev = 15, p2 = this.globalObjectNames[Symbol.iterator]();
        case 17:
          if (u2 = (f2 = p2.next()).done) {
            e27.next = 27;
            break;
          }
          if (h2 = f2.value, d2 = [], !by(m2 = this.globalScope.set.get(h2))) {
            e27.next = 23;
            break;
          }
          return e27.abrupt("continue", 24);
        case 23:
          return e27.delegateYield(this._iterateVariableReferences(m2, d2, t3, false), "t1", 24);
        case 24:
          u2 = true, e27.next = 17;
          break;
        case 27:
          e27.next = 33;
          break;
        case 29:
          e27.prev = 29, e27.t2 = e27.catch(15), c2 = true, l2 = e27.t2;
        case 33:
          e27.prev = 33, e27.prev = 34, u2 || null == p2.return || p2.return();
        case 36:
          if (e27.prev = 36, !c2) {
            e27.next = 39;
            break;
          }
          throw l2;
        case 39:
          return e27.finish(36);
        case 40:
          return e27.finish(33);
        case 41:
        case "end":
          return e27.stop();
      }
    }, e26, this, [[15, 29, 33, 41], [34, , 36, 40]]);
  }) }, { key: "iterateCjsReferences", value: regeneratorRuntime.mark(function e26(t3) {
    var r2, n2, i2, a2, o2, s2, u2, c2, l2;
    return regeneratorRuntime.wrap(function(e27) {
      for (; ; ) switch (e27.prev = e27.next) {
        case 0:
          r2 = true, n2 = false, i2 = void 0, e27.prev = 3, a2 = this.iterateGlobalReferences(xy)[Symbol.iterator]();
        case 5:
          if (r2 = (o2 = a2.next()).done) {
            e27.next = 19;
            break;
          }
          if (s2 = o2.value.node, null != (u2 = ey(s2.arguments[0])) && dy(t3, u2)) {
            e27.next = 10;
            break;
          }
          return e27.abrupt("continue", 16);
        case 10:
          if (c2 = t3[u2], l2 = [u2], !c2[my]) {
            e27.next = 15;
            break;
          }
          return e27.next = 15, { node: s2, path: l2, type: my, info: c2[my] };
        case 15:
          return e27.delegateYield(this._iteratePropertyReferences(s2, l2, c2), "t0", 16);
        case 16:
          r2 = true, e27.next = 5;
          break;
        case 19:
          e27.next = 25;
          break;
        case 21:
          e27.prev = 21, e27.t1 = e27.catch(3), n2 = true, i2 = e27.t1;
        case 25:
          e27.prev = 25, e27.prev = 26, r2 || null == a2.return || a2.return();
        case 28:
          if (e27.prev = 28, !n2) {
            e27.next = 31;
            break;
          }
          throw i2;
        case 31:
          return e27.finish(28);
        case 32:
          return e27.finish(25);
        case 33:
        case "end":
          return e27.stop();
      }
    }, e26, this, [[3, 21, 25, 33], [26, , 28, 32]]);
  }) }, { key: "iterateEsmReferences", value: regeneratorRuntime.mark(function e26(t3) {
    var r2, n2, i2, a2, o2, s2, u2, c2, l2, p2, f2, h2, d2, m2, g2, y2, v2, x2, b2, E2, C3, S3, k2, D2, F2, A2, w2, _2;
    return regeneratorRuntime.wrap(function(e27) {
      for (; ; ) switch (e27.prev = e27.next) {
        case 0:
          r2 = this.globalScope.block, n2 = true, i2 = false, a2 = void 0, e27.prev = 4, o2 = r2.body[Symbol.iterator]();
        case 6:
          if (n2 = (s2 = o2.next()).done) {
            e27.next = 92;
            break;
          }
          if (u2 = s2.value, hy.test(u2.type) && null != u2.source) {
            e27.next = 10;
            break;
          }
          return e27.abrupt("continue", 89);
        case 10:
          if (c2 = u2.source.value, dy(t3, c2)) {
            e27.next = 13;
            break;
          }
          return e27.abrupt("continue", 89);
        case 13:
          if (l2 = t3[c2], p2 = [c2], !l2[my]) {
            e27.next = 18;
            break;
          }
          return e27.next = 18, { node: u2, path: p2, type: my, info: l2[my] };
        case 18:
          if ("ExportAllDeclaration" !== u2.type) {
            e27.next = 31;
            break;
          }
          f2 = 0, h2 = Object.keys(l2);
        case 20:
          if (!(f2 < h2.length)) {
            e27.next = 29;
            break;
          }
          if (d2 = h2[f2], !(m2 = l2[d2])[my]) {
            e27.next = 26;
            break;
          }
          return e27.next = 26, { node: u2, path: p2.concat(d2), type: my, info: m2[my] };
        case 26:
          f2++, e27.next = 20;
          break;
        case 29:
          e27.next = 89;
          break;
        case 31:
          g2 = true, y2 = false, v2 = void 0, e27.prev = 34, x2 = u2.specifiers[Symbol.iterator]();
        case 36:
          if (g2 = (b2 = x2.next()).done) {
            e27.next = 75;
            break;
          }
          if (E2 = b2.value, C3 = dy(l2, vy), S3 = this._iterateImportReferences(E2, p2, C3 ? l2 : "legacy" === this.mode ? Object.assign({ default: l2 }, l2) : { default: l2 }), !C3) {
            e27.next = 44;
            break;
          }
          return e27.delegateYield(S3, "t0", 42);
        case 42:
          e27.next = 72;
          break;
        case 44:
          k2 = true, D2 = false, F2 = void 0, e27.prev = 47, A2 = S3[Symbol.iterator]();
        case 49:
          if (k2 = (w2 = A2.next()).done) {
            e27.next = 58;
            break;
          }
          if ((_2 = w2.value).path = _2.path.filter(Sy), !(_2.path.length >= 2 || _2.type !== my)) {
            e27.next = 55;
            break;
          }
          return e27.next = 55, _2;
        case 55:
          k2 = true, e27.next = 49;
          break;
        case 58:
          e27.next = 64;
          break;
        case 60:
          e27.prev = 60, e27.t1 = e27.catch(47), D2 = true, F2 = e27.t1;
        case 64:
          e27.prev = 64, e27.prev = 65, k2 || null == A2.return || A2.return();
        case 67:
          if (e27.prev = 67, !D2) {
            e27.next = 70;
            break;
          }
          throw F2;
        case 70:
          return e27.finish(67);
        case 71:
          return e27.finish(64);
        case 72:
          g2 = true, e27.next = 36;
          break;
        case 75:
          e27.next = 81;
          break;
        case 77:
          e27.prev = 77, e27.t2 = e27.catch(34), y2 = true, v2 = e27.t2;
        case 81:
          e27.prev = 81, e27.prev = 82, g2 || null == x2.return || x2.return();
        case 84:
          if (e27.prev = 84, !y2) {
            e27.next = 87;
            break;
          }
          throw v2;
        case 87:
          return e27.finish(84);
        case 88:
          return e27.finish(81);
        case 89:
          n2 = true, e27.next = 6;
          break;
        case 92:
          e27.next = 98;
          break;
        case 94:
          e27.prev = 94, e27.t3 = e27.catch(4), i2 = true, a2 = e27.t3;
        case 98:
          e27.prev = 98, e27.prev = 99, n2 || null == o2.return || o2.return();
        case 101:
          if (e27.prev = 101, !i2) {
            e27.next = 104;
            break;
          }
          throw a2;
        case 104:
          return e27.finish(101);
        case 105:
          return e27.finish(98);
        case 106:
        case "end":
          return e27.stop();
      }
    }, e26, this, [[4, 94, 98, 106], [34, 77, 81, 89], [47, 60, 64, 72], [65, , 67, 71], [82, , 84, 88], [99, , 101, 105]]);
  }) }, { key: "_iterateVariableReferences", value: regeneratorRuntime.mark(function e26(t3, r2, n2, i2) {
    var a2, o2, s2, u2, c2, l2, p2;
    return regeneratorRuntime.wrap(function(e27) {
      for (; ; ) switch (e27.prev = e27.next) {
        case 0:
          if (!this.variableStack.includes(t3)) {
            e27.next = 2;
            break;
          }
          return e27.abrupt("return");
        case 2:
          this.variableStack.push(t3), e27.prev = 3, a2 = true, o2 = false, s2 = void 0, e27.prev = 7, u2 = t3.references[Symbol.iterator]();
        case 9:
          if (a2 = (c2 = u2.next()).done) {
            e27.next = 21;
            break;
          }
          if ((l2 = c2.value).isRead()) {
            e27.next = 13;
            break;
          }
          return e27.abrupt("continue", 18);
        case 13:
          if (p2 = l2.identifier, !i2 || !n2[my]) {
            e27.next = 17;
            break;
          }
          return e27.next = 17, { node: p2, path: r2, type: my, info: n2[my] };
        case 17:
          return e27.delegateYield(this._iteratePropertyReferences(p2, r2, n2), "t0", 18);
        case 18:
          a2 = true, e27.next = 9;
          break;
        case 21:
          e27.next = 27;
          break;
        case 23:
          e27.prev = 23, e27.t1 = e27.catch(7), o2 = true, s2 = e27.t1;
        case 27:
          e27.prev = 27, e27.prev = 28, a2 || null == u2.return || u2.return();
        case 30:
          if (e27.prev = 30, !o2) {
            e27.next = 33;
            break;
          }
          throw s2;
        case 33:
          return e27.finish(30);
        case 34:
          return e27.finish(27);
        case 35:
          return e27.prev = 35, this.variableStack.pop(), e27.finish(35);
        case 38:
        case "end":
          return e27.stop();
      }
    }, e26, this, [[3, , 35, 38], [7, 23, 27, 35], [28, , 30, 34]]);
  }) }, { key: "_iteratePropertyReferences", value: regeneratorRuntime.mark(function e26(t3, r2, n2) {
    var i2, a2, o2, s2;
    return regeneratorRuntime.wrap(function(e27) {
      for (; ; ) switch (e27.prev = e27.next) {
        case 0:
          for (i2 = t3; Ey(i2); ) i2 = i2.parent;
          if ("MemberExpression" !== (a2 = i2.parent).type) {
            e27.next = 15;
            break;
          }
          if (a2.object !== i2) {
            e27.next = 14;
            break;
          }
          if (null != (o2 = ty(a2)) && dy(n2, o2)) {
            e27.next = 8;
            break;
          }
          return e27.abrupt("return");
        case 8:
          if (r2 = r2.concat(o2), !(s2 = n2[o2])[my]) {
            e27.next = 13;
            break;
          }
          return e27.next = 13, { node: a2, path: r2, type: my, info: s2[my] };
        case 13:
          return e27.delegateYield(this._iteratePropertyReferences(a2, r2, s2), "t0", 14);
        case 14:
          return e27.abrupt("return");
        case 15:
          if ("CallExpression" !== a2.type) {
            e27.next = 20;
            break;
          }
          if (a2.callee !== i2 || !n2[gy]) {
            e27.next = 19;
            break;
          }
          return e27.next = 19, { node: a2, path: r2, type: gy, info: n2[gy] };
        case 19:
          return e27.abrupt("return");
        case 20:
          if ("NewExpression" !== a2.type) {
            e27.next = 25;
            break;
          }
          if (a2.callee !== i2 || !n2[yy]) {
            e27.next = 24;
            break;
          }
          return e27.next = 24, { node: a2, path: r2, type: yy, info: n2[yy] };
        case 24:
          return e27.abrupt("return");
        case 25:
          if ("AssignmentExpression" !== a2.type) {
            e27.next = 30;
            break;
          }
          if (a2.right !== i2) {
            e27.next = 29;
            break;
          }
          return e27.delegateYield(this._iterateLhsReferences(a2.left, r2, n2), "t1", 28);
        case 28:
          return e27.delegateYield(this._iteratePropertyReferences(a2, r2, n2), "t2", 29);
        case 29:
          return e27.abrupt("return");
        case 30:
          if ("AssignmentPattern" !== a2.type) {
            e27.next = 34;
            break;
          }
          if (a2.right !== i2) {
            e27.next = 33;
            break;
          }
          return e27.delegateYield(this._iterateLhsReferences(a2.left, r2, n2), "t3", 33);
        case 33:
          return e27.abrupt("return");
        case 34:
          if ("VariableDeclarator" !== a2.type) {
            e27.next = 37;
            break;
          }
          if (a2.init !== i2) {
            e27.next = 37;
            break;
          }
          return e27.delegateYield(this._iterateLhsReferences(a2.id, r2, n2), "t4", 37);
        case 37:
        case "end":
          return e27.stop();
      }
    }, e26, this);
  }) }, { key: "_iterateLhsReferences", value: regeneratorRuntime.mark(function e26(t3, r2, n2) {
    var i2, a2, o2, s2, u2, c2, l2, p2, f2, h2;
    return regeneratorRuntime.wrap(function(e27) {
      for (; ; ) switch (e27.prev = e27.next) {
        case 0:
          if ("Identifier" !== t3.type) {
            e27.next = 5;
            break;
          }
          if (null == (i2 = vg(this.globalScope, t3))) {
            e27.next = 4;
            break;
          }
          return e27.delegateYield(this._iterateVariableReferences(i2, r2, n2, false), "t0", 4);
        case 4:
          return e27.abrupt("return");
        case 5:
          if ("ObjectPattern" !== t3.type) {
            e27.next = 40;
            break;
          }
          a2 = true, o2 = false, s2 = void 0, e27.prev = 9, u2 = t3.properties[Symbol.iterator]();
        case 11:
          if (a2 = (c2 = u2.next()).done) {
            e27.next = 25;
            break;
          }
          if (l2 = c2.value, null != (p2 = ty(l2)) && dy(n2, p2)) {
            e27.next = 16;
            break;
          }
          return e27.abrupt("continue", 22);
        case 16:
          if (f2 = r2.concat(p2), !(h2 = n2[p2])[my]) {
            e27.next = 21;
            break;
          }
          return e27.next = 21, { node: l2, path: f2, type: my, info: h2[my] };
        case 21:
          return e27.delegateYield(this._iterateLhsReferences(l2.value, f2, h2), "t1", 22);
        case 22:
          a2 = true, e27.next = 11;
          break;
        case 25:
          e27.next = 31;
          break;
        case 27:
          e27.prev = 27, e27.t2 = e27.catch(9), o2 = true, s2 = e27.t2;
        case 31:
          e27.prev = 31, e27.prev = 32, a2 || null == u2.return || u2.return();
        case 34:
          if (e27.prev = 34, !o2) {
            e27.next = 37;
            break;
          }
          throw s2;
        case 37:
          return e27.finish(34);
        case 38:
          return e27.finish(31);
        case 39:
          return e27.abrupt("return");
        case 40:
          if ("AssignmentPattern" !== t3.type) {
            e27.next = 42;
            break;
          }
          return e27.delegateYield(this._iterateLhsReferences(t3.left, r2, n2), "t3", 42);
        case 42:
        case "end":
          return e27.stop();
      }
    }, e26, this, [[9, 27, 31, 39], [32, , 34, 38]]);
  }) }, { key: "_iterateImportReferences", value: regeneratorRuntime.mark(function e26(t3, r2, n2) {
    var i2, a2, o2, s2, u2;
    return regeneratorRuntime.wrap(function(e27) {
      for (; ; ) switch (e27.prev = e27.next) {
        case 0:
          if ("ImportSpecifier" !== (i2 = t3.type) && "ImportDefaultSpecifier" !== i2) {
            e27.next = 12;
            break;
          }
          if (a2 = "ImportDefaultSpecifier" === i2 ? "default" : t3.imported.name, dy(n2, a2)) {
            e27.next = 5;
            break;
          }
          return e27.abrupt("return");
        case 5:
          if (r2 = r2.concat(a2), !(o2 = n2[a2])[my]) {
            e27.next = 10;
            break;
          }
          return e27.next = 10, { node: t3, path: r2, type: my, info: o2[my] };
        case 10:
          return e27.delegateYield(this._iterateVariableReferences(vg(this.globalScope, t3.local), r2, o2, false), "t0", 11);
        case 11:
          return e27.abrupt("return");
        case 12:
          if ("ImportNamespaceSpecifier" !== i2) {
            e27.next = 15;
            break;
          }
          return e27.delegateYield(this._iterateVariableReferences(vg(this.globalScope, t3.local), r2, n2, false), "t1", 14);
        case 14:
          return e27.abrupt("return");
        case 15:
          if ("ExportSpecifier" !== i2) {
            e27.next = 24;
            break;
          }
          if (s2 = t3.local.name, dy(n2, s2)) {
            e27.next = 19;
            break;
          }
          return e27.abrupt("return");
        case 19:
          if (r2 = r2.concat(s2), !(u2 = n2[s2])[my]) {
            e27.next = 24;
            break;
          }
          return e27.next = 24, { node: t3, path: r2, type: my, info: u2[my] };
        case 24:
        case "end":
          return e27.stop();
      }
    }, e26, this);
  }) }]), e25;
}();
function Sy(e25, t3) {
  return !(1 === t3 && "default" === e25);
}
Cy.READ = my, Cy.CALL = gy, Cy.CONSTRUCT = yy, Cy.ESM = vy;
var ky = { CALL: gy, CONSTRUCT: yy, ESM: vy, findVariable: vg, getFunctionHeadLocation: $g, getFunctionNameWithKind: ry, getInnermostScope: yg, getPropertyName: ty, getStaticValue: Zg, getStringIfConstant: ey, hasSideEffect: oy, isArrowToken: Eg, isClosingBraceToken: Tg, isClosingBracketToken: wg, isClosingParenToken: Fg, isColonToken: kg, isCommaToken: Cg, isCommentToken: Pg, isNotArrowToken: Ig, isNotClosingBraceToken: Ug, isNotClosingBracketToken: Mg, isNotClosingParenToken: jg, isNotColonToken: Lg, isNotCommaToken: Bg, isNotCommentToken: qg, isNotOpeningBraceToken: Vg, isNotOpeningBracketToken: Rg, isNotOpeningParenToken: Ng, isNotSemicolonToken: Og, isOpeningBraceToken: _g, isOpeningBracketToken: Ag, isOpeningParenToken: Dg, isParenthesized: uy, isSemicolonToken: Sg, PatternMatcher: fy, READ: my, ReferenceTracker: Cy };
var Dy = n(Object.freeze({ __proto__: null, default: ky, CALL: gy, CONSTRUCT: yy, ESM: vy, PatternMatcher: fy, READ: my, ReferenceTracker: Cy, findVariable: vg, getFunctionHeadLocation: $g, getFunctionNameWithKind: ry, getInnermostScope: yg, getPropertyName: ty, getStaticValue: Zg, getStringIfConstant: ey, hasSideEffect: oy, isArrowToken: Eg, isClosingBraceToken: Tg, isClosingBracketToken: wg, isClosingParenToken: Fg, isColonToken: kg, isCommaToken: Cg, isCommentToken: Pg, isNotArrowToken: Ig, isNotClosingBraceToken: Ug, isNotClosingBracketToken: Mg, isNotClosingParenToken: jg, isNotColonToken: Lg, isNotCommaToken: Bg, isNotCommentToken: qg, isNotOpeningBraceToken: Vg, isNotOpeningBracketToken: Rg, isNotOpeningParenToken: Ng, isNotSemicolonToken: Og, isOpeningBraceToken: _g, isOpeningBracketToken: Ag, isOpeningParenToken: Dg, isParenthesized: uy, isSemicolonToken: Sg }));
var Fy = r(function(e25, t3) {
  function r2(e26) {
    return e26 && "object" == i(e26) && "default" in e26 ? e26.default : e26;
  }
  var n2 = r2(Lp), o2 = r2(Dm), u2 = r2(Fm), c2 = r2(og), l2 = r2(gg), p2 = r2(Dy), f2 = /\r\n|[\n\r\u2028\u2029]/;
  var h2 = { breakableTypePattern: /^(?:(?:Do)?While|For(?:In|Of)?|Switch)Statement$/, lineBreakPattern: f2, createGlobalLinebreakMatcher: function() {
    return new RegExp(f2.source, "gu");
  }, shebangPattern: /^#!((?:[\0-\t\x0B\f\x0E-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)/ };
  var d2 = l2("eslint:traverser");
  function m2() {
  }
  var g2 = function() {
    function e26() {
      a(this, e26), this._current = null, this._parents = [], this._skipped = false, this._broken = false, this._visitorKeys = null, this._enter = null, this._leave = null;
    }
    return s(e26, [{ key: "current", value: function() {
      return this._current;
    } }, { key: "parents", value: function() {
      return this._parents.slice(0);
    } }, { key: "break", value: function() {
      this._broken = true;
    } }, { key: "skip", value: function() {
      this._skipped = true;
    } }, { key: "traverse", value: function(e27, t4) {
      this._current = null, this._parents = [], this._skipped = false, this._broken = false, this._visitorKeys = t4.visitorKeys || n2.KEYS, this._enter = t4.enter || m2, this._leave = t4.leave || m2, this._traverse(e27, null);
    } }, { key: "_traverse", value: function(e27, t4) {
      if (function(e28) {
        return null !== e28 && "object" == i(e28) && "string" == typeof e28.type;
      }(e27)) {
        if (this._current = e27, this._skipped = false, this._enter(e27, t4), !this._skipped && !this._broken) {
          var r3 = function(e28, t5) {
            var r4 = e28[t5.type];
            return r4 || (r4 = n2.getKeys(t5), d2('Unknown node type "%s": Estimated visitor keys %j', t5.type, r4)), r4;
          }(this._visitorKeys, e27);
          if (1 <= r3.length) {
            this._parents.push(e27);
            for (var a2 = 0; a2 < r3.length && !this._broken; ++a2) {
              var o3 = e27[r3[a2]];
              if (Array.isArray(o3)) for (var s2 = 0; s2 < o3.length && !this._broken; ++s2) this._traverse(o3[s2], e27);
              else this._traverse(o3, e27);
            }
            this._parents.pop();
          }
        }
        this._broken || this._leave(e27, t4), this._current = t4;
      }
    } }], [{ key: "getKeys", value: function(e27) {
      return n2.getKeys(e27);
    } }, { key: "traverse", value: function(t4, r3) {
      new e26().traverse(t4, r3);
    } }, { key: "DEFAULT_VISITOR_KEYS", get: function() {
      return n2.KEYS;
    } }]), e26;
  }();
  t3.Traverser = g2, t3.createCommonjsModule = function(e26, t4) {
    return e26(t4 = { exports: {} }, t4.exports), t4.exports;
  }, t3.espree = o2, t3.evk = n2, t3.getCjsExportFromNamespace = function(e26) {
    return e26 && e26.default || e26;
  }, t3.globals = c2, t3.lodash = u2, t3.require$$0 = p2, t3.require$$0$1 = h2, t3.require$$1 = l2;
});
var Ay = (Fy.Traverser, Fy.createCommonjsModule, Fy.espree, Fy.evk, Fy.getCjsExportFromNamespace, Fy.globals, Fy.lodash, Fy.require$$0, Fy.require$$0$1, Fy.require$$1, r(function(e25, t3) {
  !function(e26) {
    function t4() {
      for (var e27 = arguments.length, t5 = Array(e27), r3 = 0; r3 < e27; r3++) t5[r3] = arguments[r3];
      if (t5.length > 1) {
        t5[0] = t5[0].slice(0, -1);
        for (var n3 = t5.length - 1, i3 = 1; i3 < n3; ++i3) t5[i3] = t5[i3].slice(1, -1);
        return t5[n3] = t5[n3].slice(1), t5.join("");
      }
      return t5[0];
    }
    function r2(e27) {
      return "(?:" + e27 + ")";
    }
    function n2(e27) {
      return void 0 === e27 ? "undefined" : null === e27 ? "null" : Object.prototype.toString.call(e27).split(" ").pop().split("]").shift().toLowerCase();
    }
    function i2(e27) {
      return e27.toUpperCase();
    }
    function a2(e27) {
      var n3 = t4("[0-9]", "[A-Fa-f]"), i3 = r2(r2("%[EFef]" + n3 + "%" + n3 + n3 + "%" + n3 + n3) + "|" + r2("%[89A-Fa-f]" + n3 + "%" + n3 + n3) + "|" + r2("%" + n3 + n3)), a3 = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]", o3 = t4("[\\:\\/\\?\\#\\[\\]\\@]", a3), s3 = e27 ? "[\\uE000-\\uF8FF]" : "[]", u3 = t4("[A-Za-z]", "[0-9]", "[\\-\\.\\_\\~]", e27 ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]"), c3 = (r2("[A-Za-z]" + t4("[A-Za-z]", "[0-9]", "[\\+\\-\\.]") + "*"), r2(r2(i3 + "|" + t4(u3, a3, "[\\:]")) + "*"), r2(r2("25[0-5]") + "|" + r2("2[0-4][0-9]") + "|" + r2("1[0-9][0-9]") + "|" + r2("0?[1-9][0-9]") + "|0?0?[0-9]")), l3 = r2(c3 + "\\." + c3 + "\\." + c3 + "\\." + c3), p3 = r2(n3 + "{1,4}"), f3 = r2(r2(p3 + "\\:" + p3) + "|" + l3), h3 = r2(r2(p3 + "\\:") + "{6}" + f3), d3 = r2("\\:\\:" + r2(p3 + "\\:") + "{5}" + f3), m3 = r2(r2(p3) + "?\\:\\:" + r2(p3 + "\\:") + "{4}" + f3), g3 = r2(r2(r2(p3 + "\\:") + "{0,1}" + p3) + "?\\:\\:" + r2(p3 + "\\:") + "{3}" + f3), y3 = r2(r2(r2(p3 + "\\:") + "{0,2}" + p3) + "?\\:\\:" + r2(p3 + "\\:") + "{2}" + f3), v3 = r2(r2(r2(p3 + "\\:") + "{0,3}" + p3) + "?\\:\\:" + p3 + "\\:" + f3), x3 = r2(r2(r2(p3 + "\\:") + "{0,4}" + p3) + "?\\:\\:" + f3), b3 = r2(r2(r2(p3 + "\\:") + "{0,5}" + p3) + "?\\:\\:" + p3), E3 = r2(r2(r2(p3 + "\\:") + "{0,6}" + p3) + "?\\:\\:"), C4 = r2([h3, d3, m3, g3, y3, v3, x3, b3, E3].join("|")), S4 = r2(r2(u3 + "|" + i3) + "+"), k3 = (r2("[vV]" + n3 + "+\\." + t4(u3, a3, "[\\:]") + "+"), r2(r2(i3 + "|" + t4(u3, a3)) + "*"), r2(i3 + "|" + t4(u3, a3, "[\\:\\@]")));
      return r2(r2(i3 + "|" + t4(u3, a3, "[\\@]")) + "+"), r2(r2(k3 + "|" + t4("[\\/\\?]", s3)) + "*"), { NOT_SCHEME: new RegExp(t4("[^]", "[A-Za-z]", "[0-9]", "[\\+\\-\\.]"), "g"), NOT_USERINFO: new RegExp(t4("[^\\%\\:]", u3, a3), "g"), NOT_HOST: new RegExp(t4("[^\\%\\[\\]\\:]", u3, a3), "g"), NOT_PATH: new RegExp(t4("[^\\%\\/\\:\\@]", u3, a3), "g"), NOT_PATH_NOSCHEME: new RegExp(t4("[^\\%\\/\\@]", u3, a3), "g"), NOT_QUERY: new RegExp(t4("[^\\%]", u3, a3, "[\\:\\@\\/\\?]", s3), "g"), NOT_FRAGMENT: new RegExp(t4("[^\\%]", u3, a3, "[\\:\\@\\/\\?]"), "g"), ESCAPE: new RegExp(t4("[^]", u3, a3), "g"), UNRESERVED: new RegExp(u3, "g"), OTHER_CHARS: new RegExp(t4("[^\\%]", u3, o3), "g"), PCT_ENCODED: new RegExp(i3, "g"), IPV4ADDRESS: new RegExp("^(" + l3 + ")$"), IPV6ADDRESS: new RegExp("^\\[?(" + C4 + ")" + r2(r2("\\%25|\\%(?!" + n3 + "{2})") + "(" + S4 + ")") + "?\\]?$") };
    }
    var o2 = a2(false), s2 = a2(true), u2 = function(e27, t5) {
      if (Array.isArray(e27)) return e27;
      if (Symbol.iterator in Object(e27)) return function(e28, t6) {
        var r3 = [], n3 = true, i3 = false, a3 = void 0;
        try {
          for (var o3, s3 = e28[Symbol.iterator](); !(n3 = (o3 = s3.next()).done) && (r3.push(o3.value), !t6 || r3.length !== t6); n3 = true) ;
        } catch (e29) {
          i3 = true, a3 = e29;
        } finally {
          try {
            !n3 && s3.return && s3.return();
          } finally {
            if (i3) throw a3;
          }
        }
        return r3;
      }(e27, t5);
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }, c2 = 2147483647, l2 = /^xn--/, p2 = /[^\0-\x7E]/, f2 = /[\x2E\u3002\uFF0E\uFF61]/g, h2 = { overflow: "Overflow: input needs wider integers to process", "not-basic": "Illegal input >= 0x80 (not a basic code point)", "invalid-input": "Invalid input" }, d2 = Math.floor, m2 = String.fromCharCode;
    function g2(e27) {
      throw new RangeError(h2[e27]);
    }
    function y2(e27, t5) {
      var r3 = e27.split("@"), n3 = "";
      r3.length > 1 && (n3 = r3[0] + "@", e27 = r3[1]);
      var i3 = function(e28, t6) {
        for (var r4 = [], n4 = e28.length; n4--; ) r4[n4] = t6(e28[n4]);
        return r4;
      }((e27 = e27.replace(f2, ".")).split("."), t5).join(".");
      return n3 + i3;
    }
    function v2(e27) {
      for (var t5 = [], r3 = 0, n3 = e27.length; r3 < n3; ) {
        var i3 = e27.charCodeAt(r3++);
        if (i3 >= 55296 && i3 <= 56319 && r3 < n3) {
          var a3 = e27.charCodeAt(r3++);
          56320 == (64512 & a3) ? t5.push(((1023 & i3) << 10) + (1023 & a3) + 65536) : (t5.push(i3), r3--);
        } else t5.push(i3);
      }
      return t5;
    }
    var x2 = function(e27, t5) {
      return e27 + 22 + 75 * (e27 < 26) - ((0 != t5) << 5);
    }, b2 = function(e27, t5, r3) {
      var n3 = 0;
      for (e27 = r3 ? d2(e27 / 700) : e27 >> 1, e27 += d2(e27 / t5); e27 > 455; n3 += 36) e27 = d2(e27 / 35);
      return d2(n3 + 36 * e27 / (e27 + 38));
    }, E2 = function(e27) {
      var t5, r3 = [], n3 = e27.length, i3 = 0, a3 = 128, o3 = 72, s3 = e27.lastIndexOf("-");
      s3 < 0 && (s3 = 0);
      for (var u3 = 0; u3 < s3; ++u3) e27.charCodeAt(u3) >= 128 && g2("not-basic"), r3.push(e27.charCodeAt(u3));
      for (var l3 = s3 > 0 ? s3 + 1 : 0; l3 < n3; ) {
        for (var p3 = i3, f3 = 1, h3 = 36; ; h3 += 36) {
          l3 >= n3 && g2("invalid-input");
          var m3 = (t5 = e27.charCodeAt(l3++)) - 48 < 10 ? t5 - 22 : t5 - 65 < 26 ? t5 - 65 : t5 - 97 < 26 ? t5 - 97 : 36;
          (m3 >= 36 || m3 > d2((c2 - i3) / f3)) && g2("overflow"), i3 += m3 * f3;
          var y3 = h3 <= o3 ? 1 : h3 >= o3 + 26 ? 26 : h3 - o3;
          if (m3 < y3) break;
          var v3 = 36 - y3;
          f3 > d2(c2 / v3) && g2("overflow"), f3 *= v3;
        }
        var x3 = r3.length + 1;
        o3 = b2(i3 - p3, x3, 0 == p3), d2(i3 / x3) > c2 - a3 && g2("overflow"), a3 += d2(i3 / x3), i3 %= x3, r3.splice(i3++, 0, a3);
      }
      return String.fromCodePoint.apply(String, r3);
    }, C3 = function(e27) {
      var t5 = [], r3 = (e27 = v2(e27)).length, n3 = 128, i3 = 0, a3 = 72, o3 = true, s3 = false, u3 = void 0;
      try {
        for (var l3, p3 = e27[Symbol.iterator](); !(o3 = (l3 = p3.next()).done); o3 = true) {
          var f3 = l3.value;
          f3 < 128 && t5.push(m2(f3));
        }
      } catch (e28) {
        s3 = true, u3 = e28;
      } finally {
        try {
          !o3 && p3.return && p3.return();
        } finally {
          if (s3) throw u3;
        }
      }
      var h3 = t5.length, y3 = h3;
      for (h3 && t5.push("-"); y3 < r3; ) {
        var E3 = c2, C4 = true, S4 = false, k3 = void 0;
        try {
          for (var D3, F3 = e27[Symbol.iterator](); !(C4 = (D3 = F3.next()).done); C4 = true) {
            var A3 = D3.value;
            A3 >= n3 && A3 < E3 && (E3 = A3);
          }
        } catch (e28) {
          S4 = true, k3 = e28;
        } finally {
          try {
            !C4 && F3.return && F3.return();
          } finally {
            if (S4) throw k3;
          }
        }
        var w3 = y3 + 1;
        E3 - n3 > d2((c2 - i3) / w3) && g2("overflow"), i3 += (E3 - n3) * w3, n3 = E3;
        var _3 = true, T3 = false, P3 = void 0;
        try {
          for (var I3, B3 = e27[Symbol.iterator](); !(_3 = (I3 = B3.next()).done); _3 = true) {
            var O3 = I3.value;
            if (O3 < n3 && ++i3 > c2 && g2("overflow"), O3 == n3) {
              for (var L3 = i3, N3 = 36; ; N3 += 36) {
                var j3 = N3 <= a3 ? 1 : N3 >= a3 + 26 ? 26 : N3 - a3;
                if (L3 < j3) break;
                var R3 = L3 - j3, M3 = 36 - j3;
                t5.push(m2(x2(j3 + R3 % M3, 0))), L3 = d2(R3 / M3);
              }
              t5.push(m2(x2(L3, 0))), a3 = b2(i3, w3, y3 == h3), i3 = 0, ++y3;
            }
          }
        } catch (e28) {
          T3 = true, P3 = e28;
        } finally {
          try {
            !_3 && B3.return && B3.return();
          } finally {
            if (T3) throw P3;
          }
        }
        ++i3, ++n3;
      }
      return t5.join("");
    }, S3 = { version: "2.1.0", ucs2: { decode: v2, encode: function(e27) {
      return String.fromCodePoint.apply(String, function(e28) {
        if (Array.isArray(e28)) {
          for (var t5 = 0, r3 = Array(e28.length); t5 < e28.length; t5++) r3[t5] = e28[t5];
          return r3;
        }
        return Array.from(e28);
      }(e27));
    } }, decode: E2, encode: C3, toASCII: function(e27) {
      return y2(e27, function(e28) {
        return p2.test(e28) ? "xn--" + C3(e28) : e28;
      });
    }, toUnicode: function(e27) {
      return y2(e27, function(e28) {
        return l2.test(e28) ? E2(e28.slice(4).toLowerCase()) : e28;
      });
    } }, k2 = {};
    function D2(e27) {
      var t5 = e27.charCodeAt(0);
      return t5 < 16 ? "%0" + t5.toString(16).toUpperCase() : t5 < 128 ? "%" + t5.toString(16).toUpperCase() : t5 < 2048 ? "%" + (t5 >> 6 | 192).toString(16).toUpperCase() + "%" + (63 & t5 | 128).toString(16).toUpperCase() : "%" + (t5 >> 12 | 224).toString(16).toUpperCase() + "%" + (t5 >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (63 & t5 | 128).toString(16).toUpperCase();
    }
    function F2(e27) {
      for (var t5 = "", r3 = 0, n3 = e27.length; r3 < n3; ) {
        var i3 = parseInt(e27.substr(r3 + 1, 2), 16);
        if (i3 < 128) t5 += String.fromCharCode(i3), r3 += 3;
        else if (i3 >= 194 && i3 < 224) {
          if (n3 - r3 >= 6) {
            var a3 = parseInt(e27.substr(r3 + 4, 2), 16);
            t5 += String.fromCharCode((31 & i3) << 6 | 63 & a3);
          } else t5 += e27.substr(r3, 6);
          r3 += 6;
        } else if (i3 >= 224) {
          if (n3 - r3 >= 9) {
            var o3 = parseInt(e27.substr(r3 + 4, 2), 16), s3 = parseInt(e27.substr(r3 + 7, 2), 16);
            t5 += String.fromCharCode((15 & i3) << 12 | (63 & o3) << 6 | 63 & s3);
          } else t5 += e27.substr(r3, 9);
          r3 += 9;
        } else t5 += e27.substr(r3, 3), r3 += 3;
      }
      return t5;
    }
    function A2(e27, t5) {
      function r3(e28) {
        var r4 = F2(e28);
        return r4.match(t5.UNRESERVED) ? r4 : e28;
      }
      return e27.scheme && (e27.scheme = String(e27.scheme).replace(t5.PCT_ENCODED, r3).toLowerCase().replace(t5.NOT_SCHEME, "")), void 0 !== e27.userinfo && (e27.userinfo = String(e27.userinfo).replace(t5.PCT_ENCODED, r3).replace(t5.NOT_USERINFO, D2).replace(t5.PCT_ENCODED, i2)), void 0 !== e27.host && (e27.host = String(e27.host).replace(t5.PCT_ENCODED, r3).toLowerCase().replace(t5.NOT_HOST, D2).replace(t5.PCT_ENCODED, i2)), void 0 !== e27.path && (e27.path = String(e27.path).replace(t5.PCT_ENCODED, r3).replace(e27.scheme ? t5.NOT_PATH : t5.NOT_PATH_NOSCHEME, D2).replace(t5.PCT_ENCODED, i2)), void 0 !== e27.query && (e27.query = String(e27.query).replace(t5.PCT_ENCODED, r3).replace(t5.NOT_QUERY, D2).replace(t5.PCT_ENCODED, i2)), void 0 !== e27.fragment && (e27.fragment = String(e27.fragment).replace(t5.PCT_ENCODED, r3).replace(t5.NOT_FRAGMENT, D2).replace(t5.PCT_ENCODED, i2)), e27;
    }
    function w2(e27) {
      return e27.replace(/^0*(.*)/, "$1") || "0";
    }
    function _2(e27, t5) {
      var r3 = e27.match(t5.IPV4ADDRESS) || [], n3 = u2(r3, 2)[1];
      return n3 ? n3.split(".").map(w2).join(".") : e27;
    }
    function T2(e27, t5) {
      var r3 = e27.match(t5.IPV6ADDRESS) || [], n3 = u2(r3, 3), i3 = n3[1], a3 = n3[2];
      if (i3) {
        for (var o3 = i3.toLowerCase().split("::").reverse(), s3 = u2(o3, 2), c3 = s3[0], l3 = s3[1], p3 = l3 ? l3.split(":").map(w2) : [], f3 = c3.split(":").map(w2), h3 = t5.IPV4ADDRESS.test(f3[f3.length - 1]), d3 = h3 ? 7 : 8, m3 = f3.length - d3, g3 = Array(d3), y3 = 0; y3 < d3; ++y3) g3[y3] = p3[y3] || f3[m3 + y3] || "";
        h3 && (g3[d3 - 1] = _2(g3[d3 - 1], t5));
        var v3 = g3.reduce(function(e28, t6, r4) {
          if (!t6 || "0" === t6) {
            var n4 = e28[e28.length - 1];
            n4 && n4.index + n4.length === r4 ? n4.length++ : e28.push({ index: r4, length: 1 });
          }
          return e28;
        }, []).sort(function(e28, t6) {
          return t6.length - e28.length;
        })[0], x3 = void 0;
        if (v3 && v3.length > 1) {
          var b3 = g3.slice(0, v3.index), E3 = g3.slice(v3.index + v3.length);
          x3 = b3.join(":") + "::" + E3.join(":");
        } else x3 = g3.join(":");
        return a3 && (x3 += "%" + a3), x3;
      }
      return e27;
    }
    var P2 = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i, I2 = void 0 === "".match(/(){0}/)[1];
    function B2(e27) {
      var t5 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r3 = {}, n3 = false !== t5.iri ? s2 : o2;
      "suffix" === t5.reference && (e27 = (t5.scheme ? t5.scheme + ":" : "") + "//" + e27);
      var i3 = e27.match(P2);
      if (i3) {
        I2 ? (r3.scheme = i3[1], r3.userinfo = i3[3], r3.host = i3[4], r3.port = parseInt(i3[5], 10), r3.path = i3[6] || "", r3.query = i3[7], r3.fragment = i3[8], isNaN(r3.port) && (r3.port = i3[5])) : (r3.scheme = i3[1] || void 0, r3.userinfo = -1 !== e27.indexOf("@") ? i3[3] : void 0, r3.host = -1 !== e27.indexOf("//") ? i3[4] : void 0, r3.port = parseInt(i3[5], 10), r3.path = i3[6] || "", r3.query = -1 !== e27.indexOf("?") ? i3[7] : void 0, r3.fragment = -1 !== e27.indexOf("#") ? i3[8] : void 0, isNaN(r3.port) && (r3.port = e27.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? i3[4] : void 0)), r3.host && (r3.host = T2(_2(r3.host, n3), n3)), void 0 !== r3.scheme || void 0 !== r3.userinfo || void 0 !== r3.host || void 0 !== r3.port || r3.path || void 0 !== r3.query ? void 0 === r3.scheme ? r3.reference = "relative" : void 0 === r3.fragment ? r3.reference = "absolute" : r3.reference = "uri" : r3.reference = "same-document", t5.reference && "suffix" !== t5.reference && t5.reference !== r3.reference && (r3.error = r3.error || "URI is not a " + t5.reference + " reference.");
        var a3 = k2[(t5.scheme || r3.scheme || "").toLowerCase()];
        if (t5.unicodeSupport || a3 && a3.unicodeSupport) A2(r3, n3);
        else {
          if (r3.host && (t5.domainHost || a3 && a3.domainHost)) try {
            r3.host = S3.toASCII(r3.host.replace(n3.PCT_ENCODED, F2).toLowerCase());
          } catch (e28) {
            r3.error = r3.error || "Host's domain name can not be converted to ASCII via punycode: " + e28;
          }
          A2(r3, o2);
        }
        a3 && a3.parse && a3.parse(r3, t5);
      } else r3.error = r3.error || "URI can not be parsed.";
      return r3;
    }
    var O2 = /^\.\.?\//, L2 = /^\/\.(\/|$)/, N2 = /^\/\.\.(\/|$)/, j2 = /^\/?(?:.|\n)*?(?=\/|$)/;
    function R2(e27) {
      for (var t5 = []; e27.length; ) if (e27.match(O2)) e27 = e27.replace(O2, "");
      else if (e27.match(L2)) e27 = e27.replace(L2, "/");
      else if (e27.match(N2)) e27 = e27.replace(N2, "/"), t5.pop();
      else if ("." === e27 || ".." === e27) e27 = "";
      else {
        var r3 = e27.match(j2);
        if (!r3) throw new Error("Unexpected dot segment condition");
        var n3 = r3[0];
        e27 = e27.slice(n3.length), t5.push(n3);
      }
      return t5.join("");
    }
    function M2(e27) {
      var t5 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r3 = t5.iri ? s2 : o2, n3 = [], i3 = k2[(t5.scheme || e27.scheme || "").toLowerCase()];
      if (i3 && i3.serialize && i3.serialize(e27, t5), e27.host) {
        if (r3.IPV6ADDRESS.test(e27.host)) ;
        else if (t5.domainHost || i3 && i3.domainHost) try {
          e27.host = t5.iri ? S3.toUnicode(e27.host) : S3.toASCII(e27.host.replace(r3.PCT_ENCODED, F2).toLowerCase());
        } catch (r4) {
          e27.error = e27.error || "Host's domain name can not be converted to " + (t5.iri ? "Unicode" : "ASCII") + " via punycode: " + r4;
        }
      }
      A2(e27, r3), "suffix" !== t5.reference && e27.scheme && (n3.push(e27.scheme), n3.push(":"));
      var a3 = function(e28, t6) {
        var r4 = false !== t6.iri ? s2 : o2, n4 = [];
        return void 0 !== e28.userinfo && (n4.push(e28.userinfo), n4.push("@")), void 0 !== e28.host && n4.push(T2(_2(String(e28.host), r4), r4).replace(r4.IPV6ADDRESS, function(e29, t7, r5) {
          return "[" + t7 + (r5 ? "%25" + r5 : "") + "]";
        })), "number" == typeof e28.port && (n4.push(":"), n4.push(e28.port.toString(10))), n4.length ? n4.join("") : void 0;
      }(e27, t5);
      if (void 0 !== a3 && ("suffix" !== t5.reference && n3.push("//"), n3.push(a3), e27.path && "/" !== e27.path.charAt(0) && n3.push("/")), void 0 !== e27.path) {
        var u3 = e27.path;
        t5.absolutePath || i3 && i3.absolutePath || (u3 = R2(u3)), void 0 === a3 && (u3 = u3.replace(/^\/\//, "/%2F")), n3.push(u3);
      }
      return void 0 !== e27.query && (n3.push("?"), n3.push(e27.query)), void 0 !== e27.fragment && (n3.push("#"), n3.push(e27.fragment)), n3.join("");
    }
    function V2(e27, t5) {
      var r3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n3 = {};
      return arguments[3] || (e27 = B2(M2(e27, r3), r3), t5 = B2(M2(t5, r3), r3)), !(r3 = r3 || {}).tolerant && t5.scheme ? (n3.scheme = t5.scheme, n3.userinfo = t5.userinfo, n3.host = t5.host, n3.port = t5.port, n3.path = R2(t5.path || ""), n3.query = t5.query) : (void 0 !== t5.userinfo || void 0 !== t5.host || void 0 !== t5.port ? (n3.userinfo = t5.userinfo, n3.host = t5.host, n3.port = t5.port, n3.path = R2(t5.path || ""), n3.query = t5.query) : (t5.path ? ("/" === t5.path.charAt(0) ? n3.path = R2(t5.path) : (void 0 === e27.userinfo && void 0 === e27.host && void 0 === e27.port || e27.path ? e27.path ? n3.path = e27.path.slice(0, e27.path.lastIndexOf("/") + 1) + t5.path : n3.path = t5.path : n3.path = "/" + t5.path, n3.path = R2(n3.path)), n3.query = t5.query) : (n3.path = e27.path, void 0 !== t5.query ? n3.query = t5.query : n3.query = e27.query), n3.userinfo = e27.userinfo, n3.host = e27.host, n3.port = e27.port), n3.scheme = e27.scheme), n3.fragment = t5.fragment, n3;
    }
    function U2(e27, t5) {
      return e27 && e27.toString().replace(t5 && t5.iri ? s2.PCT_ENCODED : o2.PCT_ENCODED, F2);
    }
    var q2 = { scheme: "http", domainHost: true, parse: function(e27, t5) {
      return e27.host || (e27.error = e27.error || "HTTP URIs must have a host."), e27;
    }, serialize: function(e27, t5) {
      return e27.port !== ("https" !== String(e27.scheme).toLowerCase() ? 80 : 443) && "" !== e27.port || (e27.port = void 0), e27.path || (e27.path = "/"), e27;
    } }, W2 = { scheme: "https", domainHost: q2.domainHost, parse: q2.parse, serialize: q2.serialize }, $2 = {}, G2 = "[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]", z2 = "[0-9A-Fa-f]", H2 = r2(r2("%[EFef][0-9A-Fa-f]%" + z2 + z2 + "%" + z2 + z2) + "|" + r2("%[89A-Fa-f][0-9A-Fa-f]%" + z2 + z2) + "|" + r2("%" + z2 + z2)), K2 = t4("[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]", '[\\"\\\\]'), J2 = new RegExp(G2, "g"), Q2 = new RegExp(H2, "g"), X2 = new RegExp(t4("[^]", "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]", "[\\.]", '[\\"]', K2), "g"), Y2 = new RegExp(t4("[^]", G2, "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]"), "g"), Z2 = Y2;
    function ee2(e27) {
      var t5 = F2(e27);
      return t5.match(J2) ? t5 : e27;
    }
    var te2 = { scheme: "mailto", parse: function(e27, t5) {
      var r3 = e27, n3 = r3.to = r3.path ? r3.path.split(",") : [];
      if (r3.path = void 0, r3.query) {
        for (var i3 = false, a3 = {}, o3 = r3.query.split("&"), s3 = 0, u3 = o3.length; s3 < u3; ++s3) {
          var c3 = o3[s3].split("=");
          switch (c3[0]) {
            case "to":
              for (var l3 = c3[1].split(","), p3 = 0, f3 = l3.length; p3 < f3; ++p3) n3.push(l3[p3]);
              break;
            case "subject":
              r3.subject = U2(c3[1], t5);
              break;
            case "body":
              r3.body = U2(c3[1], t5);
              break;
            default:
              i3 = true, a3[U2(c3[0], t5)] = U2(c3[1], t5);
          }
        }
        i3 && (r3.headers = a3);
      }
      r3.query = void 0;
      for (var h3 = 0, d3 = n3.length; h3 < d3; ++h3) {
        var m3 = n3[h3].split("@");
        if (m3[0] = U2(m3[0]), t5.unicodeSupport) m3[1] = U2(m3[1], t5).toLowerCase();
        else try {
          m3[1] = S3.toASCII(U2(m3[1], t5).toLowerCase());
        } catch (e28) {
          r3.error = r3.error || "Email address's domain name can not be converted to ASCII via punycode: " + e28;
        }
        n3[h3] = m3.join("@");
      }
      return r3;
    }, serialize: function(e27, t5) {
      var r3, n3 = e27, a3 = null != (r3 = e27.to) ? r3 instanceof Array ? r3 : "number" != typeof r3.length || r3.split || r3.setInterval || r3.call ? [r3] : Array.prototype.slice.call(r3) : [];
      if (a3) {
        for (var o3 = 0, s3 = a3.length; o3 < s3; ++o3) {
          var u3 = String(a3[o3]), c3 = u3.lastIndexOf("@"), l3 = u3.slice(0, c3).replace(Q2, ee2).replace(Q2, i2).replace(X2, D2), p3 = u3.slice(c3 + 1);
          try {
            p3 = t5.iri ? S3.toUnicode(p3) : S3.toASCII(U2(p3, t5).toLowerCase());
          } catch (e28) {
            n3.error = n3.error || "Email address's domain name can not be converted to " + (t5.iri ? "Unicode" : "ASCII") + " via punycode: " + e28;
          }
          a3[o3] = l3 + "@" + p3;
        }
        n3.path = a3.join(",");
      }
      var f3 = e27.headers = e27.headers || {};
      e27.subject && (f3.subject = e27.subject), e27.body && (f3.body = e27.body);
      var h3 = [];
      for (var d3 in f3) f3[d3] !== $2[d3] && h3.push(d3.replace(Q2, ee2).replace(Q2, i2).replace(Y2, D2) + "=" + f3[d3].replace(Q2, ee2).replace(Q2, i2).replace(Z2, D2));
      return h3.length && (n3.query = h3.join("&")), n3;
    } }, re2 = /^([^\:]+)\:(.*)/, ne2 = { scheme: "urn", parse: function(e27, t5) {
      var r3 = e27.path && e27.path.match(re2), n3 = e27;
      if (r3) {
        var i3 = t5.scheme || n3.scheme || "urn", a3 = r3[1].toLowerCase(), o3 = r3[2], s3 = i3 + ":" + (t5.nid || a3), u3 = k2[s3];
        n3.nid = a3, n3.nss = o3, n3.path = void 0, u3 && (n3 = u3.parse(n3, t5));
      } else n3.error = n3.error || "URN can not be parsed.";
      return n3;
    }, serialize: function(e27, t5) {
      var r3 = t5.scheme || e27.scheme || "urn", n3 = e27.nid, i3 = r3 + ":" + (t5.nid || n3), a3 = k2[i3];
      a3 && (e27 = a3.serialize(e27, t5));
      var o3 = e27, s3 = e27.nss;
      return o3.path = (n3 || t5.nid) + ":" + s3, o3;
    } }, ie4 = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/, ae2 = { scheme: "urn:uuid", parse: function(e27, t5) {
      var r3 = e27;
      return r3.uuid = r3.nss, r3.nss = void 0, t5.tolerant || r3.uuid && r3.uuid.match(ie4) || (r3.error = r3.error || "UUID is not valid."), r3;
    }, serialize: function(e27, t5) {
      var r3 = e27;
      return r3.nss = (e27.uuid || "").toLowerCase(), r3;
    } };
    k2[q2.scheme] = q2, k2[W2.scheme] = W2, k2[te2.scheme] = te2, k2[ne2.scheme] = ne2, k2[ae2.scheme] = ae2, e26.SCHEMES = k2, e26.pctEncChar = D2, e26.pctDecChars = F2, e26.parse = B2, e26.removeDotSegments = R2, e26.serialize = M2, e26.resolveComponents = V2, e26.resolve = function(e27, t5, r3) {
      var n3 = function(e28, t6) {
        var r4 = e28;
        if (t6) for (var n4 in t6) r4[n4] = t6[n4];
        return r4;
      }({ scheme: "null" }, r3);
      return M2(V2(B2(e27, n3), B2(t5, n3), n3, true), n3);
    }, e26.normalize = function(e27, t5) {
      return "string" == typeof e27 ? e27 = M2(B2(e27, t5), t5) : "object" === n2(e27) && (e27 = B2(M2(e27, t5), t5)), e27;
    }, e26.equal = function(e27, t5, r3) {
      return "string" == typeof e27 ? e27 = M2(B2(e27, r3), r3) : "object" === n2(e27) && (e27 = M2(e27, r3)), "string" == typeof t5 ? t5 = M2(B2(t5, r3), r3) : "object" === n2(t5) && (t5 = M2(t5, r3)), e27 === t5;
    }, e26.escapeComponent = function(e27, t5) {
      return e27 && e27.toString().replace(t5 && t5.iri ? s2.ESCAPE : o2.ESCAPE, D2);
    }, e26.unescapeComponent = U2, Object.defineProperty(e26, "__esModule", { value: true });
  }(t3);
}));
t2(Ay);
var wy = Array.isArray;
var _y = Object.keys;
var Ty = Object.prototype.hasOwnProperty;
var Py = function e21(t3, r2) {
  if (t3 === r2) return true;
  if (t3 && r2 && "object" == i(t3) && "object" == i(r2)) {
    var n2, a2, o2, s2 = wy(t3), u2 = wy(r2);
    if (s2 && u2) {
      if ((a2 = t3.length) != r2.length) return false;
      for (n2 = a2; 0 != n2--; ) if (!e21(t3[n2], r2[n2])) return false;
      return true;
    }
    if (s2 != u2) return false;
    var c2 = t3 instanceof Date, l2 = r2 instanceof Date;
    if (c2 != l2) return false;
    if (c2 && l2) return t3.getTime() == r2.getTime();
    var p2 = t3 instanceof RegExp, f2 = r2 instanceof RegExp;
    if (p2 != f2) return false;
    if (p2 && f2) return t3.toString() == r2.toString();
    var h2 = _y(t3);
    if ((a2 = h2.length) !== _y(r2).length) return false;
    for (n2 = a2; 0 != n2--; ) if (!Ty.call(r2, h2[n2])) return false;
    for (n2 = a2; 0 != n2--; ) if (!e21(t3[o2 = h2[n2]], r2[o2])) return false;
    return true;
  }
  return t3 != t3 && r2 != r2;
};
var Iy = { copy: function(e25, t3) {
  for (var r2 in t3 = t3 || {}, e25) t3[r2] = e25[r2];
  return t3;
}, checkDataType: By, checkDataTypes: function(e25, t3) {
  switch (e25.length) {
    case 1:
      return By(e25[0], t3, true);
    default:
      var r2 = "", n2 = Ly(e25);
      for (var i2 in n2.array && n2.object && (r2 = n2.null ? "(" : "(!" + t3 + " || ", r2 += "typeof " + t3 + ' !== "object")', delete n2.null, delete n2.array, delete n2.object), n2.number && delete n2.integer, n2) r2 += (r2 ? " && " : "") + By(i2, t3, true);
      return r2;
  }
}, coerceToTypes: function(e25, t3) {
  if (Array.isArray(t3)) {
    for (var r2 = [], n2 = 0; n2 < t3.length; n2++) {
      var i2 = t3[n2];
      Oy[i2] ? r2[r2.length] = i2 : "array" === e25 && "array" === i2 && (r2[r2.length] = i2);
    }
    if (r2.length) return r2;
  } else {
    if (Oy[t3]) return [t3];
    if ("array" === e25 && "array" === t3) return ["array"];
  }
}, toHash: Ly, getProperty: Ry, escapeQuotes: My, equal: Py, ucs2length: function(e25) {
  for (var t3, r2 = 0, n2 = e25.length, i2 = 0; i2 < n2; ) r2++, (t3 = e25.charCodeAt(i2++)) >= 55296 && t3 <= 56319 && i2 < n2 && 56320 == (64512 & (t3 = e25.charCodeAt(i2))) && i2++;
  return r2;
}, varOccurences: function(e25, t3) {
  t3 += "[^0-9]";
  var r2 = e25.match(new RegExp(t3, "g"));
  return r2 ? r2.length : 0;
}, varReplace: function(e25, t3, r2) {
  return t3 += "([^0-9])", r2 = r2.replace(/\$/g, "$$$$"), e25.replace(new RegExp(t3, "g"), r2 + "$1");
}, cleanUpCode: function(e25) {
  return e25.replace(Vy, "").replace(Uy, "").replace(qy, "if (!($1))");
}, finalCleanUpCode: function(e25, t3) {
  var r2 = e25.match(Wy);
  r2 && 2 == r2.length && (e25 = t3 ? e25.replace(Gy, "").replace(Ky, Jy) : e25.replace($y, "").replace(zy, Hy));
  return (r2 = e25.match(Qy)) && 3 === r2.length ? e25.replace(Xy, "") : e25;
}, schemaHasRules: function(e25, t3) {
  if ("boolean" == typeof e25) return !e25;
  for (var r2 in e25) if (t3[r2]) return true;
}, schemaHasRulesExcept: function(e25, t3, r2) {
  if ("boolean" == typeof e25) return !e25 && "not" != r2;
  for (var n2 in e25) if (n2 != r2 && t3[n2]) return true;
}, schemaUnknownRules: function(e25, t3) {
  if ("boolean" == typeof e25) return;
  for (var r2 in e25) if (!t3[r2]) return r2;
}, toQuotedString: Yy, getPathExpr: function(e25, t3, r2, n2) {
  return tv(e25, r2 ? "'/' + " + t3 + (n2 ? "" : ".replace(/~/g, '~0').replace(/\\//g, '~1')") : n2 ? "'[' + " + t3 + " + ']'" : "'[\\'' + " + t3 + " + '\\']'");
}, getPath: function(e25, t3, r2) {
  var n2 = Yy(r2 ? "/" + rv(t3) : Ry(t3));
  return tv(e25, n2);
}, getData: function(e25, t3, r2) {
  var n2, i2, a2, o2;
  if ("" === e25) return "rootData";
  if ("/" == e25[0]) {
    if (!Zy.test(e25)) throw new Error("Invalid JSON-pointer: " + e25);
    i2 = e25, a2 = "rootData";
  } else {
    if (!(o2 = e25.match(ev))) throw new Error("Invalid JSON-pointer: " + e25);
    if (n2 = +o2[1], "#" == (i2 = o2[2])) {
      if (n2 >= t3) throw new Error("Cannot access property/index " + n2 + " levels up, current level is " + t3);
      return r2[t3 - n2];
    }
    if (n2 > t3) throw new Error("Cannot access data " + n2 + " levels up, current level is " + t3);
    if (a2 = "data" + (t3 - n2 || ""), !i2) return a2;
  }
  for (var s2 = a2, u2 = i2.split("/"), c2 = 0; c2 < u2.length; c2++) {
    var l2 = u2[c2];
    l2 && (a2 += Ry(nv(l2)), s2 += " && " + a2);
  }
  return s2;
}, unescapeFragment: function(e25) {
  return nv(decodeURIComponent(e25));
}, unescapeJsonPointer: nv, escapeFragment: function(e25) {
  return encodeURIComponent(rv(e25));
}, escapeJsonPointer: rv };
function By(e25, t3, r2) {
  var n2 = r2 ? " !== " : " === ", i2 = r2 ? " || " : " && ", a2 = r2 ? "!" : "", o2 = r2 ? "" : "!";
  switch (e25) {
    case "null":
      return t3 + n2 + "null";
    case "array":
      return a2 + "Array.isArray(" + t3 + ")";
    case "object":
      return "(" + a2 + t3 + i2 + "typeof " + t3 + n2 + '"object"' + i2 + o2 + "Array.isArray(" + t3 + "))";
    case "integer":
      return "(typeof " + t3 + n2 + '"number"' + i2 + o2 + "(" + t3 + " % 1)" + i2 + t3 + n2 + t3 + ")";
    default:
      return "typeof " + t3 + n2 + '"' + e25 + '"';
  }
}
var Oy = Ly(["string", "number", "integer", "boolean", "null"]);
function Ly(e25) {
  for (var t3 = {}, r2 = 0; r2 < e25.length; r2++) t3[e25[r2]] = true;
  return t3;
}
var Ny = /^[a-z$_][a-z$_0-9]*$/i;
var jy = /'|\\/g;
function Ry(e25) {
  return "number" == typeof e25 ? "[" + e25 + "]" : Ny.test(e25) ? "." + e25 : "['" + My(e25) + "']";
}
function My(e25) {
  return e25.replace(jy, "\\$&").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\f/g, "\\f").replace(/\t/g, "\\t");
}
var Vy = /else\s*{\s*}/g;
var Uy = /if\s*\([^)]+\)\s*\{\s*\}(?!\s*else)/g;
var qy = /if\s*\(([^)]+)\)\s*\{\s*\}\s*else(?!\s*if)/g;
var Wy = /[^v.]errors/g;
var $y = /var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g;
var Gy = /var errors = 0;|var vErrors = null;/g;
var zy = "return errors === 0;";
var Hy = "validate.errors = null; return true;";
var Ky = /if \(errors === 0\) return data;\s*else throw new ValidationError\(vErrors\);/;
var Jy = "return data;";
var Qy = /[^A-Za-z_$]rootData[^A-Za-z0-9_$]/g;
var Xy = /if \(rootData === undefined\) rootData = data;/;
function Yy(e25) {
  return "'" + My(e25) + "'";
}
var Zy = /^\/(?:[^~]|~0|~1)*$/;
var ev = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
function tv(e25, t3) {
  return '""' == e25 ? t3 : (e25 + " + " + t3).replace(/' \+ '/g, "");
}
function rv(e25) {
  return e25.replace(/~/g, "~0").replace(/\//g, "~1");
}
function nv(e25) {
  return e25.replace(/~1/g, "/").replace(/~0/g, "~");
}
var iv = function(e25) {
  Iy.copy(e25, this);
};
var av = r(function(e25) {
  var t3 = e25.exports = function(e26, r2, n2) {
    "function" == typeof r2 && (n2 = r2, r2 = {}), function e27(r3, n3, a2, o2, s2, u2, c2, l2, p2, f2) {
      if (o2 && "object" == i(o2) && !Array.isArray(o2)) {
        for (var h2 in n3(o2, s2, u2, c2, l2, p2, f2), o2) {
          var d2 = o2[h2];
          if (Array.isArray(d2)) {
            if (h2 in t3.arrayKeywords) for (var m2 = 0; m2 < d2.length; m2++) e27(r3, n3, a2, d2[m2], s2 + "/" + h2 + "/" + m2, u2, s2, h2, o2, m2);
          } else if (h2 in t3.propsKeywords) {
            if (d2 && "object" == i(d2)) for (var g2 in d2) e27(r3, n3, a2, d2[g2], s2 + "/" + h2 + "/" + g2.replace(/~/g, "~0").replace(/\//g, "~1"), u2, s2, h2, o2, g2);
          } else (h2 in t3.keywords || r3.allKeys && !(h2 in t3.skipKeywords)) && e27(r3, n3, a2, d2, s2 + "/" + h2, u2, s2, h2, o2);
        }
        a2(o2, s2, u2, c2, l2, p2, f2);
      }
    }(r2, "function" == typeof (n2 = r2.cb || n2) ? n2 : n2.pre || function() {
    }, n2.post || function() {
    }, e26, "", e26);
  };
  t3.keywords = { additionalItems: true, items: true, contains: true, additionalProperties: true, propertyNames: true, not: true }, t3.arrayKeywords = { items: true, allOf: true, anyOf: true, oneOf: true }, t3.propsKeywords = { definitions: true, properties: true, patternProperties: true, dependencies: true }, t3.skipKeywords = { default: true, enum: true, const: true, required: true, maximum: true, minimum: true, exclusiveMaximum: true, exclusiveMinimum: true, multipleOf: true, maxLength: true, minLength: true, pattern: true, format: true, maxItems: true, minItems: true, uniqueItems: true, maxProperties: true, minProperties: true };
});
var ov = sv;
function sv(e25, t3, r2) {
  var n2 = this._refs[r2];
  if ("string" == typeof n2) {
    if (!this._refs[n2]) return sv.call(this, e25, t3, n2);
    n2 = this._refs[n2];
  }
  if ((n2 = n2 || this._schemas[r2]) instanceof iv) return hv(n2.schema, this._opts.inlineRefs) ? n2.schema : n2.validate || this._compile(n2);
  var i2, a2, o2, s2 = uv.call(this, t3, r2);
  return s2 && (i2 = s2.schema, t3 = s2.root, o2 = s2.baseId), i2 instanceof iv ? a2 = i2.validate || e25.call(this, i2.schema, t3, void 0, o2) : void 0 !== i2 && (a2 = hv(i2, this._opts.inlineRefs) ? i2 : e25.call(this, i2, t3, void 0, o2)), a2;
}
function uv(e25, t3) {
  var r2 = Ay.parse(t3), n2 = mv(r2), i2 = dv(this._getId(e25.schema));
  if (0 === Object.keys(e25.schema).length || n2 !== i2) {
    var a2 = yv(n2), o2 = this._refs[a2];
    if ("string" == typeof o2) return cv.call(this, e25, o2, r2);
    if (o2 instanceof iv) o2.validate || this._compile(o2), e25 = o2;
    else {
      if (!((o2 = this._schemas[a2]) instanceof iv)) return;
      if (o2.validate || this._compile(o2), a2 == yv(t3)) return { schema: o2, root: e25, baseId: i2 };
      e25 = o2;
    }
    if (!e25.schema) return;
    i2 = dv(this._getId(e25.schema));
  }
  return pv.call(this, r2, i2, e25.schema, e25);
}
function cv(e25, t3, r2) {
  var n2 = uv.call(this, e25, t3);
  if (n2) {
    var i2 = n2.schema, a2 = n2.baseId;
    e25 = n2.root;
    var o2 = this._getId(i2);
    return o2 && (a2 = vv(a2, o2)), pv.call(this, r2, a2, i2, e25);
  }
}
sv.normalizeId = yv, sv.fullPath = dv, sv.url = vv, sv.ids = function(e25) {
  var t3 = yv(this._getId(e25)), r2 = { "": t3 }, n2 = { "": dv(t3, false) }, i2 = {}, a2 = this;
  return av(e25, { allKeys: true }, function(e26, t4, o2, s2, u2, c2, l2) {
    if ("" !== t4) {
      var p2 = a2._getId(e26), f2 = r2[s2], h2 = n2[s2] + "/" + u2;
      if (void 0 !== l2 && (h2 += "/" + ("number" == typeof l2 ? l2 : Iy.escapeFragment(l2))), "string" == typeof p2) {
        p2 = f2 = yv(f2 ? Ay.resolve(f2, p2) : p2);
        var d2 = a2._refs[p2];
        if ("string" == typeof d2 && (d2 = a2._refs[d2]), d2 && d2.schema) {
          if (!Py(e26, d2.schema)) throw new Error('id "' + p2 + '" resolves to more than one schema');
        } else if (p2 != yv(h2)) if ("#" == p2[0]) {
          if (i2[p2] && !Py(e26, i2[p2])) throw new Error('id "' + p2 + '" resolves to more than one schema');
          i2[p2] = e26;
        } else a2._refs[p2] = h2;
      }
      r2[t4] = f2, n2[t4] = h2;
    }
  }), i2;
}, sv.inlineRef = hv, sv.schema = uv;
var lv = Iy.toHash(["properties", "patternProperties", "enum", "dependencies", "definitions"]);
function pv(e25, t3, r2, n2) {
  if (e25.fragment = e25.fragment || "", "/" == e25.fragment.slice(0, 1)) {
    for (var i2 = e25.fragment.split("/"), a2 = 1; a2 < i2.length; a2++) {
      var o2 = i2[a2];
      if (o2) {
        if (void 0 === (r2 = r2[o2 = Iy.unescapeFragment(o2)])) break;
        var s2;
        if (!lv[o2] && ((s2 = this._getId(r2)) && (t3 = vv(t3, s2)), r2.$ref)) {
          var u2 = vv(t3, r2.$ref), c2 = uv.call(this, n2, u2);
          c2 && (r2 = c2.schema, n2 = c2.root, t3 = c2.baseId);
        }
      }
    }
    return void 0 !== r2 && r2 !== n2.schema ? { schema: r2, root: n2, baseId: t3 } : void 0;
  }
}
var fv = Iy.toHash(["type", "format", "pattern", "maxLength", "minLength", "maxProperties", "minProperties", "maxItems", "minItems", "maximum", "minimum", "uniqueItems", "multipleOf", "required", "enum"]);
function hv(e25, t3) {
  return false !== t3 && (void 0 === t3 || true === t3 ? function e26(t4) {
    var r2;
    if (Array.isArray(t4)) {
      for (var n2 = 0; n2 < t4.length; n2++) if ("object" == i(r2 = t4[n2]) && !e26(r2)) return false;
    } else for (var a2 in t4) {
      if ("$ref" == a2) return false;
      if ("object" == i(r2 = t4[a2]) && !e26(r2)) return false;
    }
    return true;
  }(e25) : t3 ? function e26(t4) {
    var r2, n2 = 0;
    if (Array.isArray(t4)) {
      for (var a2 = 0; a2 < t4.length; a2++) if ("object" == i(r2 = t4[a2]) && (n2 += e26(r2)), n2 == 1 / 0) return 1 / 0;
    } else for (var o2 in t4) {
      if ("$ref" == o2) return 1 / 0;
      if (fv[o2]) n2++;
      else if ("object" == i(r2 = t4[o2]) && (n2 += e26(r2) + 1), n2 == 1 / 0) return 1 / 0;
    }
    return n2;
  }(e25) <= t3 : void 0);
}
function dv(e25, t3) {
  return false !== t3 && (e25 = yv(e25)), mv(Ay.parse(e25));
}
function mv(e25) {
  return Ay.serialize(e25).split("#")[0] + "#";
}
var gv = /#\/?$/;
function yv(e25) {
  return e25 ? e25.replace(gv, "") : "";
}
function vv(e25, t3) {
  return t3 = yv(t3), Ay.resolve(e25, t3);
}
var xv = { Validation: Ev(function(e25) {
  this.message = "validation failed", this.errors = e25, this.ajv = this.validation = true;
}), MissingRef: Ev(bv) };
function bv(e25, t3, r2) {
  this.message = r2 || bv.message(e25, t3), this.missingRef = ov.url(e25, t3), this.missingSchema = ov.normalizeId(ov.fullPath(this.missingRef));
}
function Ev(e25) {
  return e25.prototype = Object.create(Error.prototype), e25.prototype.constructor = e25, e25;
}
bv.message = function(e25, t3) {
  return "can't resolve reference " + t3 + " from id " + e25;
};
var Cv = function(e25, t3) {
  t3 || (t3 = {}), "function" == typeof t3 && (t3 = { cmp: t3 });
  var r2 = "boolean" == typeof t3.cycles && t3.cycles, n2 = t3.cmp && /* @__PURE__ */ function(e26) {
    return function(t4) {
      return function(r3, n3) {
        var i2 = { key: r3, value: t4[r3] }, a3 = { key: n3, value: t4[n3] };
        return e26(i2, a3);
      };
    };
  }(t3.cmp), a2 = [];
  return function e26(t4) {
    if (t4 && t4.toJSON && "function" == typeof t4.toJSON && (t4 = t4.toJSON()), void 0 !== t4) {
      if ("number" == typeof t4) return isFinite(t4) ? "" + t4 : "null";
      if ("object" !== i(t4)) return JSON.stringify(t4);
      var o2, s2;
      if (Array.isArray(t4)) {
        for (s2 = "[", o2 = 0; o2 < t4.length; o2++) o2 && (s2 += ","), s2 += e26(t4[o2]) || "null";
        return s2 + "]";
      }
      if (null === t4) return "null";
      if (-1 !== a2.indexOf(t4)) {
        if (r2) return JSON.stringify("__cycle__");
        throw new TypeError("Converting circular structure to JSON");
      }
      var u2 = a2.push(t4) - 1, c2 = Object.keys(t4).sort(n2 && n2(t4));
      for (s2 = "", o2 = 0; o2 < c2.length; o2++) {
        var l2 = c2[o2], p2 = e26(t4[l2]);
        p2 && (s2 && (s2 += ","), s2 += JSON.stringify(l2) + ":" + p2);
      }
      return a2.splice(u2, 1), "{" + s2 + "}";
    }
  }(e25);
};
var Sv = function(e25, t3, r2) {
  var n2 = "", i2 = true === e25.schema.$async, a2 = e25.util.schemaHasRulesExcept(e25.schema, e25.RULES.all, "$ref"), o2 = e25.self._getId(e25.schema);
  if (e25.opts.strictKeywords) {
    var s2 = e25.util.schemaUnknownRules(e25.schema, e25.RULES.keywords);
    if (s2) {
      var u2 = "unknown keyword: " + s2;
      if ("log" !== e25.opts.strictKeywords) throw new Error(u2);
      e25.logger.warn(u2);
    }
  }
  if (e25.isTop && (n2 += " var validate = ", i2 && (e25.async = true, n2 += "async "), n2 += "function(data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; ", o2 && (e25.opts.sourceCode || e25.opts.processCode) && (n2 += " /*# sourceURL=" + o2 + " */ ")), "boolean" == typeof e25.schema || !a2 && !e25.schema.$ref) {
    var c2 = e25.level, l2 = e25.dataLevel, p2 = e25.schema["false schema"], f2 = e25.schemaPath + e25.util.getProperty("false schema"), h2 = e25.errSchemaPath + "/false schema", d2 = !e25.opts.allErrors, m2 = "data" + (l2 || ""), g2 = "valid" + c2;
    if (false === e25.schema) {
      e25.isTop ? d2 = true : n2 += " var " + g2 + " = false; ", (X2 = X2 || []).push(n2), n2 = "", false !== e25.createErrors ? (n2 += " { keyword: 'false schema' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(h2) + " , params: {} ", false !== e25.opts.messages && (n2 += " , message: 'boolean schema is false' "), e25.opts.verbose && (n2 += " , schema: false , parentSchema: validate.schema" + e25.schemaPath + " , data: " + m2 + " "), n2 += " } ") : n2 += " {} ";
      var y2 = n2;
      n2 = X2.pop(), !e25.compositeRule && d2 ? e25.async ? n2 += " throw new ValidationError([" + y2 + "]); " : n2 += " validate.errors = [" + y2 + "]; return false; " : n2 += " var err = " + y2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    } else e25.isTop ? n2 += i2 ? " return data; " : " validate.errors = null; return true; " : n2 += " var " + g2 + " = true; ";
    return e25.isTop && (n2 += " }; return validate; "), n2;
  }
  if (e25.isTop) {
    var v2 = e25.isTop;
    c2 = e25.level = 0, l2 = e25.dataLevel = 0, m2 = "data";
    if (e25.rootId = e25.resolve.fullPath(e25.self._getId(e25.root.schema)), e25.baseId = e25.baseId || e25.rootId, delete e25.isTop, e25.dataPathArr = [void 0], void 0 !== e25.schema.default && e25.opts.useDefaults && e25.opts.strictDefaults) {
      var x2 = "default is ignored in the schema root";
      if ("log" !== e25.opts.strictDefaults) throw new Error(x2);
      e25.logger.warn(x2);
    }
    n2 += " var vErrors = null; ", n2 += " var errors = 0;     ", n2 += " if (rootData === undefined) rootData = data; ";
  } else {
    c2 = e25.level, m2 = "data" + ((l2 = e25.dataLevel) || "");
    if (o2 && (e25.baseId = e25.resolve.url(e25.baseId, o2)), i2 && !e25.async) throw new Error("async schema in sync schema");
    n2 += " var errs_" + c2 + " = errors;";
  }
  g2 = "valid" + c2, d2 = !e25.opts.allErrors;
  var b2 = "", E2 = "", C3 = e25.schema.type, S3 = Array.isArray(C3);
  if (C3 && e25.opts.nullable && true === e25.schema.nullable && (S3 ? -1 == C3.indexOf("null") && (C3 = C3.concat("null")) : "null" != C3 && (C3 = [C3, "null"], S3 = true)), S3 && 1 == C3.length && (C3 = C3[0], S3 = false), e25.schema.$ref && a2) {
    if ("fail" == e25.opts.extendRefs) throw new Error('$ref: validation keywords used in schema at path "' + e25.errSchemaPath + '" (see option extendRefs)');
    true !== e25.opts.extendRefs && (a2 = false, e25.logger.warn('$ref: keywords ignored in schema at path "' + e25.errSchemaPath + '"'));
  }
  if (e25.schema.$comment && e25.opts.$comment && (n2 += " " + e25.RULES.all.$comment.code(e25, "$comment")), C3) {
    if (e25.opts.coerceTypes) var k2 = e25.util.coerceToTypes(e25.opts.coerceTypes, C3);
    var D2 = e25.RULES.types[C3];
    if (k2 || S3 || true === D2 || D2 && !Y2(D2)) {
      f2 = e25.schemaPath + ".type", h2 = e25.errSchemaPath + "/type", f2 = e25.schemaPath + ".type", h2 = e25.errSchemaPath + "/type";
      var F2 = S3 ? "checkDataTypes" : "checkDataType";
      if (n2 += " if (" + e25.util[F2](C3, m2, true) + ") { ", k2) {
        var A2 = "dataType" + c2, w2 = "coerced" + c2;
        n2 += " var " + A2 + " = typeof " + m2 + "; ", "array" == e25.opts.coerceTypes && (n2 += " if (" + A2 + " == 'object' && Array.isArray(" + m2 + ")) " + A2 + " = 'array'; "), n2 += " var " + w2 + " = undefined; ";
        var _2 = "", T2 = k2;
        if (T2) for (var P2, I2 = -1, B2 = T2.length - 1; I2 < B2; ) P2 = T2[I2 += 1], I2 && (n2 += " if (" + w2 + " === undefined) { ", _2 += "}"), "array" == e25.opts.coerceTypes && "array" != P2 && (n2 += " if (" + A2 + " == 'array' && " + m2 + ".length == 1) { " + w2 + " = " + m2 + " = " + m2 + "[0]; " + A2 + " = typeof " + m2 + ";  } "), "string" == P2 ? n2 += " if (" + A2 + " == 'number' || " + A2 + " == 'boolean') " + w2 + " = '' + " + m2 + "; else if (" + m2 + " === null) " + w2 + " = ''; " : "number" == P2 || "integer" == P2 ? (n2 += " if (" + A2 + " == 'boolean' || " + m2 + " === null || (" + A2 + " == 'string' && " + m2 + " && " + m2 + " == +" + m2 + " ", "integer" == P2 && (n2 += " && !(" + m2 + " % 1)"), n2 += ")) " + w2 + " = +" + m2 + "; ") : "boolean" == P2 ? n2 += " if (" + m2 + " === 'false' || " + m2 + " === 0 || " + m2 + " === null) " + w2 + " = false; else if (" + m2 + " === 'true' || " + m2 + " === 1) " + w2 + " = true; " : "null" == P2 ? n2 += " if (" + m2 + " === '' || " + m2 + " === 0 || " + m2 + " === false) " + w2 + " = null; " : "array" == e25.opts.coerceTypes && "array" == P2 && (n2 += " if (" + A2 + " == 'string' || " + A2 + " == 'number' || " + A2 + " == 'boolean' || " + m2 + " == null) " + w2 + " = [" + m2 + "]; ");
        n2 += " " + _2 + " if (" + w2 + " === undefined) {   ", (X2 = X2 || []).push(n2), n2 = "", false !== e25.createErrors ? (n2 += " { keyword: 'type' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(h2) + " , params: { type: '", n2 += S3 ? "" + C3.join(",") : "" + C3, n2 += "' } ", false !== e25.opts.messages && (n2 += " , message: 'should be ", n2 += S3 ? "" + C3.join(",") : "" + C3, n2 += "' "), e25.opts.verbose && (n2 += " , schema: validate.schema" + f2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + m2 + " "), n2 += " } ") : n2 += " {} ";
        y2 = n2;
        n2 = X2.pop(), !e25.compositeRule && d2 ? e25.async ? n2 += " throw new ValidationError([" + y2 + "]); " : n2 += " validate.errors = [" + y2 + "]; return false; " : n2 += " var err = " + y2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n2 += " } else {  ";
        var O2 = l2 ? "data" + (l2 - 1 || "") : "parentData";
        n2 += " " + m2 + " = " + w2 + "; ", l2 || (n2 += "if (" + O2 + " !== undefined)"), n2 += " " + O2 + "[" + (l2 ? e25.dataPathArr[l2] : "parentDataProperty") + "] = " + w2 + "; } ";
      } else {
        (X2 = X2 || []).push(n2), n2 = "", false !== e25.createErrors ? (n2 += " { keyword: 'type' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(h2) + " , params: { type: '", n2 += S3 ? "" + C3.join(",") : "" + C3, n2 += "' } ", false !== e25.opts.messages && (n2 += " , message: 'should be ", n2 += S3 ? "" + C3.join(",") : "" + C3, n2 += "' "), e25.opts.verbose && (n2 += " , schema: validate.schema" + f2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + m2 + " "), n2 += " } ") : n2 += " {} ";
        y2 = n2;
        n2 = X2.pop(), !e25.compositeRule && d2 ? e25.async ? n2 += " throw new ValidationError([" + y2 + "]); " : n2 += " validate.errors = [" + y2 + "]; return false; " : n2 += " var err = " + y2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      }
      n2 += " } ";
    }
  }
  if (e25.schema.$ref && !a2) n2 += " " + e25.RULES.all.$ref.code(e25, "$ref") + " ", d2 && (n2 += " } if (errors === ", n2 += v2 ? "0" : "errs_" + c2, n2 += ") { ", E2 += "}");
  else {
    var L2 = e25.RULES;
    if (L2) {
      for (var N2 = -1, j2 = L2.length - 1; N2 < j2; ) if (Y2(D2 = L2[N2 += 1])) {
        if (D2.type && (n2 += " if (" + e25.util.checkDataType(D2.type, m2) + ") { "), e25.opts.useDefaults) {
          if ("object" == D2.type && e25.schema.properties) {
            p2 = e25.schema.properties;
            var R2 = Object.keys(p2);
            if (R2) for (var M2, V2 = -1, U2 = R2.length - 1; V2 < U2; ) {
              if (void 0 !== ($2 = p2[M2 = R2[V2 += 1]]).default) {
                var q2 = m2 + e25.util.getProperty(M2);
                if (e25.compositeRule) {
                  if (e25.opts.strictDefaults) {
                    x2 = "default is ignored for: " + q2;
                    if ("log" !== e25.opts.strictDefaults) throw new Error(x2);
                    e25.logger.warn(x2);
                  }
                } else n2 += " if (" + q2 + " === undefined ", "empty" == e25.opts.useDefaults && (n2 += " || " + q2 + " === null || " + q2 + " === '' "), n2 += " ) " + q2 + " = ", "shared" == e25.opts.useDefaults ? n2 += " " + e25.useDefault($2.default) + " " : n2 += " " + JSON.stringify($2.default) + " ", n2 += "; ";
              }
            }
          } else if ("array" == D2.type && Array.isArray(e25.schema.items)) {
            var W2 = e25.schema.items;
            if (W2) {
              I2 = -1;
              for (var $2, G2 = W2.length - 1; I2 < G2; ) if (void 0 !== ($2 = W2[I2 += 1]).default) {
                q2 = m2 + "[" + I2 + "]";
                if (e25.compositeRule) {
                  if (e25.opts.strictDefaults) {
                    x2 = "default is ignored for: " + q2;
                    if ("log" !== e25.opts.strictDefaults) throw new Error(x2);
                    e25.logger.warn(x2);
                  }
                } else n2 += " if (" + q2 + " === undefined ", "empty" == e25.opts.useDefaults && (n2 += " || " + q2 + " === null || " + q2 + " === '' "), n2 += " ) " + q2 + " = ", "shared" == e25.opts.useDefaults ? n2 += " " + e25.useDefault($2.default) + " " : n2 += " " + JSON.stringify($2.default) + " ", n2 += "; ";
              }
            }
          }
        }
        var z2 = D2.rules;
        if (z2) {
          for (var H2, K2 = -1, J2 = z2.length - 1; K2 < J2; ) if (Z2(H2 = z2[K2 += 1])) {
            var Q2 = H2.code(e25, H2.keyword, D2.type);
            Q2 && (n2 += " " + Q2 + " ", d2 && (b2 += "}"));
          }
        }
        if (d2 && (n2 += " " + b2 + " ", b2 = ""), D2.type && (n2 += " } ", C3 && C3 === D2.type && !k2)) {
          n2 += " else { ";
          var X2;
          f2 = e25.schemaPath + ".type", h2 = e25.errSchemaPath + "/type";
          (X2 = X2 || []).push(n2), n2 = "", false !== e25.createErrors ? (n2 += " { keyword: 'type' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(h2) + " , params: { type: '", n2 += S3 ? "" + C3.join(",") : "" + C3, n2 += "' } ", false !== e25.opts.messages && (n2 += " , message: 'should be ", n2 += S3 ? "" + C3.join(",") : "" + C3, n2 += "' "), e25.opts.verbose && (n2 += " , schema: validate.schema" + f2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + m2 + " "), n2 += " } ") : n2 += " {} ";
          y2 = n2;
          n2 = X2.pop(), !e25.compositeRule && d2 ? e25.async ? n2 += " throw new ValidationError([" + y2 + "]); " : n2 += " validate.errors = [" + y2 + "]; return false; " : n2 += " var err = " + y2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n2 += " } ";
        }
        d2 && (n2 += " if (errors === ", n2 += v2 ? "0" : "errs_" + c2, n2 += ") { ", E2 += "}");
      }
    }
  }
  function Y2(e26) {
    for (var t4 = e26.rules, r3 = 0; r3 < t4.length; r3++) if (Z2(t4[r3])) return true;
  }
  function Z2(t4) {
    return void 0 !== e25.schema[t4.keyword] || t4.implements && function(t5) {
      for (var r3 = t5.implements, n3 = 0; n3 < r3.length; n3++) if (void 0 !== e25.schema[r3[n3]]) return true;
    }(t4);
  }
  return d2 && (n2 += " " + E2 + " "), v2 ? (i2 ? (n2 += " if (errors === 0) return data;           ", n2 += " else throw new ValidationError(vErrors); ") : (n2 += " validate.errors = vErrors; ", n2 += " return errors === 0;       "), n2 += " }; return validate;") : n2 += " var " + g2 + " = errors === errs_" + c2 + ";", n2 = e25.util.cleanUpCode(n2), v2 && (n2 = e25.util.finalCleanUpCode(n2, i2)), n2;
};
var kv = Iy.ucs2length;
var Dv = xv.Validation;
var Fv = function e22(t3, r2, n2, a2) {
  var o2 = this, s2 = this._opts, u2 = [void 0], c2 = {}, l2 = [], p2 = {}, f2 = [], h2 = {}, d2 = [];
  r2 = r2 || { schema: t3, refVal: u2, refs: c2 };
  var m2 = Av.call(this, t3, r2, a2), g2 = this._compilations[m2.index];
  if (m2.compiling) return g2.callValidate = function e25() {
    var t4 = g2.validate, r3 = t4.apply(this, arguments);
    return e25.errors = t4.errors, r3;
  };
  var y2 = this._formats, v2 = this.RULES;
  try {
    var x2 = E2(t3, r2, n2, a2);
    g2.validate = x2;
    var b2 = g2.callValidate;
    return b2 && (b2.schema = x2.schema, b2.errors = null, b2.refs = x2.refs, b2.refVal = x2.refVal, b2.root = x2.root, b2.$async = x2.$async, s2.sourceCode && (b2.source = x2.source)), x2;
  } finally {
    wv.call(this, t3, r2, a2);
  }
  function E2(t4, n3, i2, a3) {
    var p3 = !n3 || n3 && n3.schema == t4;
    if (n3.schema != r2.schema) return e22.call(o2, t4, n3, i2, a3);
    var h3, m3 = true === t4.$async, g3 = Sv({ isTop: true, schema: t4, isRoot: p3, baseId: a3, root: n3, schemaPath: "", errSchemaPath: "#", errorPath: '""', MissingRefError: xv.MissingRef, RULES: v2, validate: Sv, util: Iy, resolve: ov, resolveRef: C3, usePattern: D2, useDefault: F2, useCustomRule: A2, opts: s2, formats: y2, logger: o2.logger, self: o2 });
    g3 = Ov(u2, Iv) + Ov(l2, Tv) + Ov(f2, Pv) + Ov(d2, Bv) + g3, s2.processCode && (g3 = s2.processCode(g3));
    try {
      h3 = new Function("self", "RULES", "formats", "root", "refVal", "defaults", "customRules", "equal", "ucs2length", "ValidationError", g3)(o2, v2, y2, r2, u2, f2, d2, Py, kv, Dv), u2[0] = h3;
    } catch (e25) {
      throw o2.logger.error("Error compiling schema, function code:", g3), e25;
    }
    return h3.schema = t4, h3.errors = null, h3.refs = c2, h3.refVal = u2, h3.root = p3 ? h3 : n3, m3 && (h3.$async = true), true === s2.sourceCode && (h3.source = { code: g3, patterns: l2, defaults: f2 }), h3;
  }
  function C3(t4, i2, a3) {
    i2 = ov.url(t4, i2);
    var l3, p3, f3 = c2[i2];
    if (void 0 !== f3) return k2(l3 = u2[f3], p3 = "refVal[" + f3 + "]");
    if (!a3 && r2.refs) {
      var h3 = r2.refs[i2];
      if (void 0 !== h3) return k2(l3 = r2.refVal[h3], p3 = S3(i2, l3));
    }
    p3 = S3(i2);
    var d3 = ov.call(o2, E2, r2, i2);
    if (void 0 === d3) {
      var m3 = n2 && n2[i2];
      m3 && (d3 = ov.inlineRef(m3, s2.inlineRefs) ? m3 : e22.call(o2, m3, r2, n2, t4));
    }
    if (void 0 !== d3) return function(e25, t5) {
      var r3 = c2[e25];
      u2[r3] = t5;
    }(i2, d3), k2(d3, p3);
    !function(e25) {
      delete c2[e25];
    }(i2);
  }
  function S3(e25, t4) {
    var r3 = u2.length;
    return u2[r3] = t4, c2[e25] = r3, "refVal" + r3;
  }
  function k2(e25, t4) {
    return "object" == i(e25) || "boolean" == typeof e25 ? { code: t4, schema: e25, inline: true } : { code: t4, $async: e25 && !!e25.$async };
  }
  function D2(e25) {
    var t4 = p2[e25];
    return void 0 === t4 && (t4 = p2[e25] = l2.length, l2[t4] = e25), "pattern" + t4;
  }
  function F2(e25) {
    switch (i(e25)) {
      case "boolean":
      case "number":
        return "" + e25;
      case "string":
        return Iy.toQuotedString(e25);
      case "object":
        if (null === e25) return "null";
        var t4 = Cv(e25), r3 = h2[t4];
        return void 0 === r3 && (r3 = h2[t4] = f2.length, f2[r3] = e25), "default" + r3;
    }
  }
  function A2(e25, t4, r3, n3) {
    if (false !== o2._opts.validateSchema) {
      var i2 = e25.definition.dependencies;
      if (i2 && !i2.every(function(e26) {
        return Object.prototype.hasOwnProperty.call(r3, e26);
      })) throw new Error("parent schema must have all required keywords: " + i2.join(","));
      var a3 = e25.definition.validateSchema;
      if (a3) {
        if (!a3(t4)) {
          var u3 = "keyword schema is invalid: " + o2.errorsText(a3.errors);
          if ("log" != o2._opts.validateSchema) throw new Error(u3);
          o2.logger.error(u3);
        }
      }
    }
    var c3, l3 = e25.definition.compile, p3 = e25.definition.inline, f3 = e25.definition.macro;
    if (l3) c3 = l3.call(o2, t4, r3, n3);
    else if (f3) c3 = f3.call(o2, t4, r3, n3), false !== s2.validateSchema && o2.validateSchema(c3, true);
    else if (p3) c3 = p3.call(o2, n3, e25.keyword, t4, r3);
    else if (!(c3 = e25.definition.validate)) return;
    if (void 0 === c3) throw new Error('custom keyword "' + e25.keyword + '"failed to compile');
    var h3 = d2.length;
    return d2[h3] = c3, { code: "customRule" + h3, validate: c3 };
  }
};
function Av(e25, t3, r2) {
  var n2 = _v.call(this, e25, t3, r2);
  return n2 >= 0 ? { index: n2, compiling: true } : (n2 = this._compilations.length, this._compilations[n2] = { schema: e25, root: t3, baseId: r2 }, { index: n2, compiling: false });
}
function wv(e25, t3, r2) {
  var n2 = _v.call(this, e25, t3, r2);
  n2 >= 0 && this._compilations.splice(n2, 1);
}
function _v(e25, t3, r2) {
  for (var n2 = 0; n2 < this._compilations.length; n2++) {
    var i2 = this._compilations[n2];
    if (i2.schema == e25 && i2.root == t3 && i2.baseId == r2) return n2;
  }
  return -1;
}
function Tv(e25, t3) {
  return "var pattern" + e25 + " = new RegExp(" + Iy.toQuotedString(t3[e25]) + ");";
}
function Pv(e25) {
  return "var default" + e25 + " = defaults[" + e25 + "];";
}
function Iv(e25, t3) {
  return void 0 === t3[e25] ? "" : "var refVal" + e25 + " = refVal[" + e25 + "];";
}
function Bv(e25) {
  return "var customRule" + e25 + " = customRules[" + e25 + "];";
}
function Ov(e25, t3) {
  if (!e25.length) return "";
  for (var r2 = "", n2 = 0; n2 < e25.length; n2++) r2 += t3(n2, e25);
  return r2;
}
var Lv = r(function(e25) {
  var t3 = e25.exports = function() {
    this._cache = {};
  };
  t3.prototype.put = function(e26, t4) {
    this._cache[e26] = t4;
  }, t3.prototype.get = function(e26) {
    return this._cache[e26];
  }, t3.prototype.del = function(e26) {
    delete this._cache[e26];
  }, t3.prototype.clear = function() {
    this._cache = {};
  };
});
var Nv = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
var jv = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var Rv = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d:\d\d)?$/i;
var Mv = /^[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*$/i;
var Vv = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
var Uv = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i;
var qv = /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i;
var Wv = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
var $v = /^(?:\/(?:[^~/]|~0|~1)*)*$/;
var Gv = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
var zv = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;
var Hv = Kv;
function Kv(e25) {
  return e25 = "full" == e25 ? "full" : "fast", Iy.copy(Kv[e25]);
}
function Jv(e25) {
  var t3 = e25.match(Nv);
  if (!t3) return false;
  var r2 = +t3[1], n2 = +t3[2], i2 = +t3[3];
  return n2 >= 1 && n2 <= 12 && i2 >= 1 && i2 <= (2 == n2 && function(e26) {
    return e26 % 4 == 0 && (e26 % 100 != 0 || e26 % 400 == 0);
  }(r2) ? 29 : jv[n2]);
}
function Qv(e25, t3) {
  var r2 = e25.match(Rv);
  if (!r2) return false;
  var n2 = r2[1], i2 = r2[2], a2 = r2[3], o2 = r2[5];
  return (n2 <= 23 && i2 <= 59 && a2 <= 59 || 23 == n2 && 59 == i2 && 60 == a2) && (!t3 || o2);
}
Kv.fast = { date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/, time: /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)?$/i, "date-time": /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)$/i, uri: /^(?:[a-z][a-z0-9+-.]*:)(?:\/?\/)?[^\s]*$/i, "uri-reference": /^(?:(?:[a-z][a-z0-9+-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i, "uri-template": Uv, url: qv, email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i, hostname: Mv, ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/, ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i, regex: ex, uuid: Wv, "json-pointer": $v, "json-pointer-uri-fragment": Gv, "relative-json-pointer": zv }, Kv.full = { date: Jv, time: Qv, "date-time": function(e25) {
  var t3 = e25.split(Xv);
  return 2 == t3.length && Jv(t3[0]) && Qv(t3[1], true);
}, uri: function(e25) {
  return Yv.test(e25) && Vv.test(e25);
}, "uri-reference": /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i, "uri-template": Uv, url: qv, email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i, hostname: function(e25) {
  return e25.length <= 255 && Mv.test(e25);
}, ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/, ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i, regex: ex, uuid: Wv, "json-pointer": $v, "json-pointer-uri-fragment": Gv, "relative-json-pointer": zv };
var Xv = /t|\s/i;
var Yv = /\/|:/;
var Zv = /[^\\]\\Z/;
function ex(e25) {
  if (Zv.test(e25)) return false;
  try {
    return new RegExp(e25), true;
  } catch (e26) {
    return false;
  }
}
var tx = function(e25, t3, r2) {
  var n2, i2 = " ", a2 = e25.level, o2 = e25.dataLevel, s2 = e25.schema[t3], u2 = e25.schemaPath + e25.util.getProperty(t3), c2 = e25.errSchemaPath + "/" + t3, l2 = !e25.opts.allErrors, p2 = "data" + (o2 || ""), f2 = e25.opts.$data && s2 && s2.$data;
  f2 ? (i2 += " var schema" + a2 + " = " + e25.util.getData(s2.$data, o2, e25.dataPathArr) + "; ", n2 = "schema" + a2) : n2 = s2;
  var h2 = "maximum" == t3, d2 = h2 ? "exclusiveMaximum" : "exclusiveMinimum", m2 = e25.schema[d2], g2 = e25.opts.$data && m2 && m2.$data, y2 = h2 ? "<" : ">", v2 = h2 ? ">" : "<", x2 = void 0;
  if (g2) {
    var b2 = e25.util.getData(m2.$data, o2, e25.dataPathArr), E2 = "exclusive" + a2, C3 = "exclType" + a2, S3 = "exclIsNumber" + a2, k2 = "' + " + (A2 = "op" + a2) + " + '";
    i2 += " var schemaExcl" + a2 + " = " + b2 + "; ", i2 += " var " + E2 + "; var " + C3 + " = typeof " + (b2 = "schemaExcl" + a2) + "; if (" + C3 + " != 'boolean' && " + C3 + " != 'undefined' && " + C3 + " != 'number') { ";
    var D2;
    x2 = d2;
    (D2 = D2 || []).push(i2), i2 = "", false !== e25.createErrors ? (i2 += " { keyword: '" + (x2 || "_exclusiveLimit") + "' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: {} ", false !== e25.opts.messages && (i2 += " , message: '" + d2 + " should be boolean' "), e25.opts.verbose && (i2 += " , schema: validate.schema" + u2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), i2 += " } ") : i2 += " {} ";
    var F2 = i2;
    i2 = D2.pop(), !e25.compositeRule && l2 ? e25.async ? i2 += " throw new ValidationError([" + F2 + "]); " : i2 += " validate.errors = [" + F2 + "]; return false; " : i2 += " var err = " + F2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", i2 += " } else if ( ", f2 && (i2 += " (" + n2 + " !== undefined && typeof " + n2 + " != 'number') || "), i2 += " " + C3 + " == 'number' ? ( (" + E2 + " = " + n2 + " === undefined || " + b2 + " " + y2 + "= " + n2 + ") ? " + p2 + " " + v2 + "= " + b2 + " : " + p2 + " " + v2 + " " + n2 + " ) : ( (" + E2 + " = " + b2 + " === true) ? " + p2 + " " + v2 + "= " + n2 + " : " + p2 + " " + v2 + " " + n2 + " ) || " + p2 + " !== " + p2 + ") { var op" + a2 + " = " + E2 + " ? '" + y2 + "' : '" + y2 + "='; ", void 0 === s2 && (x2 = d2, c2 = e25.errSchemaPath + "/" + d2, n2 = b2, f2 = g2);
  } else {
    k2 = y2;
    if ((S3 = "number" == typeof m2) && f2) {
      var A2 = "'" + k2 + "'";
      i2 += " if ( ", f2 && (i2 += " (" + n2 + " !== undefined && typeof " + n2 + " != 'number') || "), i2 += " ( " + n2 + " === undefined || " + m2 + " " + y2 + "= " + n2 + " ? " + p2 + " " + v2 + "= " + m2 + " : " + p2 + " " + v2 + " " + n2 + " ) || " + p2 + " !== " + p2 + ") { ";
    } else {
      S3 && void 0 === s2 ? (E2 = true, x2 = d2, c2 = e25.errSchemaPath + "/" + d2, n2 = m2, v2 += "=") : (S3 && (n2 = Math[h2 ? "min" : "max"](m2, s2)), m2 === (!S3 || n2) ? (E2 = true, x2 = d2, c2 = e25.errSchemaPath + "/" + d2, v2 += "=") : (E2 = false, k2 += "="));
      A2 = "'" + k2 + "'";
      i2 += " if ( ", f2 && (i2 += " (" + n2 + " !== undefined && typeof " + n2 + " != 'number') || "), i2 += " " + p2 + " " + v2 + " " + n2 + " || " + p2 + " !== " + p2 + ") { ";
    }
  }
  x2 = x2 || t3, (D2 = D2 || []).push(i2), i2 = "", false !== e25.createErrors ? (i2 += " { keyword: '" + (x2 || "_limit") + "' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { comparison: " + A2 + ", limit: " + n2 + ", exclusive: " + E2 + " } ", false !== e25.opts.messages && (i2 += " , message: 'should be " + k2 + " ", i2 += f2 ? "' + " + n2 : n2 + "'"), e25.opts.verbose && (i2 += " , schema:  ", i2 += f2 ? "validate.schema" + u2 : "" + s2, i2 += "         , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), i2 += " } ") : i2 += " {} ";
  F2 = i2;
  return i2 = D2.pop(), !e25.compositeRule && l2 ? e25.async ? i2 += " throw new ValidationError([" + F2 + "]); " : i2 += " validate.errors = [" + F2 + "]; return false; " : i2 += " var err = " + F2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", i2 += " } ", l2 && (i2 += " else { "), i2;
};
var rx = function(e25, t3, r2) {
  var n2, i2 = " ", a2 = e25.level, o2 = e25.dataLevel, s2 = e25.schema[t3], u2 = e25.schemaPath + e25.util.getProperty(t3), c2 = e25.errSchemaPath + "/" + t3, l2 = !e25.opts.allErrors, p2 = "data" + (o2 || ""), f2 = e25.opts.$data && s2 && s2.$data;
  f2 ? (i2 += " var schema" + a2 + " = " + e25.util.getData(s2.$data, o2, e25.dataPathArr) + "; ", n2 = "schema" + a2) : n2 = s2, i2 += "if ( ", f2 && (i2 += " (" + n2 + " !== undefined && typeof " + n2 + " != 'number') || "), i2 += " " + p2 + ".length " + ("maxItems" == t3 ? ">" : "<") + " " + n2 + ") { ";
  var h2 = t3, d2 = d2 || [];
  d2.push(i2), i2 = "", false !== e25.createErrors ? (i2 += " { keyword: '" + (h2 || "_limitItems") + "' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { limit: " + n2 + " } ", false !== e25.opts.messages && (i2 += " , message: 'should NOT have ", i2 += "maxItems" == t3 ? "more" : "fewer", i2 += " than ", i2 += f2 ? "' + " + n2 + " + '" : "" + s2, i2 += " items' "), e25.opts.verbose && (i2 += " , schema:  ", i2 += f2 ? "validate.schema" + u2 : "" + s2, i2 += "         , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), i2 += " } ") : i2 += " {} ";
  var m2 = i2;
  return i2 = d2.pop(), !e25.compositeRule && l2 ? e25.async ? i2 += " throw new ValidationError([" + m2 + "]); " : i2 += " validate.errors = [" + m2 + "]; return false; " : i2 += " var err = " + m2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", i2 += "} ", l2 && (i2 += " else { "), i2;
};
var nx = function(e25, t3, r2) {
  var n2, i2 = " ", a2 = e25.level, o2 = e25.dataLevel, s2 = e25.schema[t3], u2 = e25.schemaPath + e25.util.getProperty(t3), c2 = e25.errSchemaPath + "/" + t3, l2 = !e25.opts.allErrors, p2 = "data" + (o2 || ""), f2 = e25.opts.$data && s2 && s2.$data;
  f2 ? (i2 += " var schema" + a2 + " = " + e25.util.getData(s2.$data, o2, e25.dataPathArr) + "; ", n2 = "schema" + a2) : n2 = s2;
  var h2 = "maxLength" == t3 ? ">" : "<";
  i2 += "if ( ", f2 && (i2 += " (" + n2 + " !== undefined && typeof " + n2 + " != 'number') || "), false === e25.opts.unicode ? i2 += " " + p2 + ".length " : i2 += " ucs2length(" + p2 + ") ", i2 += " " + h2 + " " + n2 + ") { ";
  var d2 = t3, m2 = m2 || [];
  m2.push(i2), i2 = "", false !== e25.createErrors ? (i2 += " { keyword: '" + (d2 || "_limitLength") + "' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { limit: " + n2 + " } ", false !== e25.opts.messages && (i2 += " , message: 'should NOT be ", i2 += "maxLength" == t3 ? "longer" : "shorter", i2 += " than ", i2 += f2 ? "' + " + n2 + " + '" : "" + s2, i2 += " characters' "), e25.opts.verbose && (i2 += " , schema:  ", i2 += f2 ? "validate.schema" + u2 : "" + s2, i2 += "         , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), i2 += " } ") : i2 += " {} ";
  var g2 = i2;
  return i2 = m2.pop(), !e25.compositeRule && l2 ? e25.async ? i2 += " throw new ValidationError([" + g2 + "]); " : i2 += " validate.errors = [" + g2 + "]; return false; " : i2 += " var err = " + g2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", i2 += "} ", l2 && (i2 += " else { "), i2;
};
var ix = function(e25, t3, r2) {
  var n2, i2 = " ", a2 = e25.level, o2 = e25.dataLevel, s2 = e25.schema[t3], u2 = e25.schemaPath + e25.util.getProperty(t3), c2 = e25.errSchemaPath + "/" + t3, l2 = !e25.opts.allErrors, p2 = "data" + (o2 || ""), f2 = e25.opts.$data && s2 && s2.$data;
  f2 ? (i2 += " var schema" + a2 + " = " + e25.util.getData(s2.$data, o2, e25.dataPathArr) + "; ", n2 = "schema" + a2) : n2 = s2, i2 += "if ( ", f2 && (i2 += " (" + n2 + " !== undefined && typeof " + n2 + " != 'number') || "), i2 += " Object.keys(" + p2 + ").length " + ("maxProperties" == t3 ? ">" : "<") + " " + n2 + ") { ";
  var h2 = t3, d2 = d2 || [];
  d2.push(i2), i2 = "", false !== e25.createErrors ? (i2 += " { keyword: '" + (h2 || "_limitProperties") + "' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { limit: " + n2 + " } ", false !== e25.opts.messages && (i2 += " , message: 'should NOT have ", i2 += "maxProperties" == t3 ? "more" : "fewer", i2 += " than ", i2 += f2 ? "' + " + n2 + " + '" : "" + s2, i2 += " properties' "), e25.opts.verbose && (i2 += " , schema:  ", i2 += f2 ? "validate.schema" + u2 : "" + s2, i2 += "         , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), i2 += " } ") : i2 += " {} ";
  var m2 = i2;
  return i2 = d2.pop(), !e25.compositeRule && l2 ? e25.async ? i2 += " throw new ValidationError([" + m2 + "]); " : i2 += " validate.errors = [" + m2 + "]; return false; " : i2 += " var err = " + m2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", i2 += "} ", l2 && (i2 += " else { "), i2;
};
var ax = { $ref: function(e25, t3, r2) {
  var n2, i2, a2 = " ", o2 = e25.level, s2 = e25.dataLevel, u2 = e25.schema[t3], c2 = e25.errSchemaPath + "/" + t3, l2 = !e25.opts.allErrors, p2 = "data" + (s2 || ""), f2 = "valid" + o2;
  if ("#" == u2 || "#/" == u2) e25.isRoot ? (n2 = e25.async, i2 = "validate") : (n2 = true === e25.root.schema.$async, i2 = "root.refVal[0]");
  else {
    var h2 = e25.resolveRef(e25.baseId, u2, e25.isRoot);
    if (void 0 === h2) {
      var d2 = e25.MissingRefError.message(e25.baseId, u2);
      if ("fail" == e25.opts.missingRefs) {
        e25.logger.error(d2), (v2 = v2 || []).push(a2), a2 = "", false !== e25.createErrors ? (a2 += " { keyword: '$ref' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { ref: '" + e25.util.escapeQuotes(u2) + "' } ", false !== e25.opts.messages && (a2 += " , message: 'can\\'t resolve reference " + e25.util.escapeQuotes(u2) + "' "), e25.opts.verbose && (a2 += " , schema: " + e25.util.toQuotedString(u2) + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), a2 += " } ") : a2 += " {} ";
        var m2 = a2;
        a2 = v2.pop(), !e25.compositeRule && l2 ? e25.async ? a2 += " throw new ValidationError([" + m2 + "]); " : a2 += " validate.errors = [" + m2 + "]; return false; " : a2 += " var err = " + m2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", l2 && (a2 += " if (false) { ");
      } else {
        if ("ignore" != e25.opts.missingRefs) throw new e25.MissingRefError(e25.baseId, u2, d2);
        e25.logger.warn(d2), l2 && (a2 += " if (true) { ");
      }
    } else if (h2.inline) {
      var g2 = e25.util.copy(e25);
      g2.level++;
      var y2 = "valid" + g2.level;
      g2.schema = h2.schema, g2.schemaPath = "", g2.errSchemaPath = u2, a2 += " " + e25.validate(g2).replace(/validate\.schema/g, h2.code) + " ", l2 && (a2 += " if (" + y2 + ") { ");
    } else n2 = true === h2.$async || e25.async && false !== h2.$async, i2 = h2.code;
  }
  if (i2) {
    var v2;
    (v2 = v2 || []).push(a2), a2 = "", e25.opts.passContext ? a2 += " " + i2 + ".call(this, " : a2 += " " + i2 + "( ", a2 += " " + p2 + ", (dataPath || '')", '""' != e25.errorPath && (a2 += " + " + e25.errorPath);
    var x2 = a2 += " , " + (s2 ? "data" + (s2 - 1 || "") : "parentData") + " , " + (s2 ? e25.dataPathArr[s2] : "parentDataProperty") + ", rootData)  ";
    if (a2 = v2.pop(), n2) {
      if (!e25.async) throw new Error("async schema referenced by sync schema");
      l2 && (a2 += " var " + f2 + "; "), a2 += " try { await " + x2 + "; ", l2 && (a2 += " " + f2 + " = true; "), a2 += " } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ", l2 && (a2 += " " + f2 + " = false; "), a2 += " } ", l2 && (a2 += " if (" + f2 + ") { ");
    } else a2 += " if (!" + x2 + ") { if (vErrors === null) vErrors = " + i2 + ".errors; else vErrors = vErrors.concat(" + i2 + ".errors); errors = vErrors.length; } ", l2 && (a2 += " else { ");
  }
  return a2;
}, allOf: function(e25, t3, r2) {
  var n2 = " ", a2 = e25.schema[t3], o2 = e25.schemaPath + e25.util.getProperty(t3), s2 = e25.errSchemaPath + "/" + t3, u2 = !e25.opts.allErrors, c2 = e25.util.copy(e25), l2 = "";
  c2.level++;
  var p2 = "valid" + c2.level, f2 = c2.baseId, h2 = true, d2 = a2;
  if (d2) for (var m2, g2 = -1, y2 = d2.length - 1; g2 < y2; ) m2 = d2[g2 += 1], (e25.opts.strictKeywords ? "object" == i(m2) && Object.keys(m2).length > 0 : e25.util.schemaHasRules(m2, e25.RULES.all)) && (h2 = false, c2.schema = m2, c2.schemaPath = o2 + "[" + g2 + "]", c2.errSchemaPath = s2 + "/" + g2, n2 += "  " + e25.validate(c2) + " ", c2.baseId = f2, u2 && (n2 += " if (" + p2 + ") { ", l2 += "}"));
  return u2 && (n2 += h2 ? " if (true) { " : " " + l2.slice(0, -1) + " "), n2 = e25.util.cleanUpCode(n2);
}, anyOf: function(e25, t3, r2) {
  var n2 = " ", a2 = e25.level, o2 = e25.dataLevel, s2 = e25.schema[t3], u2 = e25.schemaPath + e25.util.getProperty(t3), c2 = e25.errSchemaPath + "/" + t3, l2 = !e25.opts.allErrors, p2 = "data" + (o2 || ""), f2 = "valid" + a2, h2 = "errs__" + a2, d2 = e25.util.copy(e25), m2 = "";
  d2.level++;
  var g2 = "valid" + d2.level;
  if (s2.every(function(t4) {
    return e25.opts.strictKeywords ? "object" == i(t4) && Object.keys(t4).length > 0 : e25.util.schemaHasRules(t4, e25.RULES.all);
  })) {
    var y2 = d2.baseId;
    n2 += " var " + h2 + " = errors; var " + f2 + " = false;  ";
    var v2 = e25.compositeRule;
    e25.compositeRule = d2.compositeRule = true;
    var x2 = s2;
    if (x2) for (var b2, E2 = -1, C3 = x2.length - 1; E2 < C3; ) b2 = x2[E2 += 1], d2.schema = b2, d2.schemaPath = u2 + "[" + E2 + "]", d2.errSchemaPath = c2 + "/" + E2, n2 += "  " + e25.validate(d2) + " ", d2.baseId = y2, n2 += " " + f2 + " = " + f2 + " || " + g2 + "; if (!" + f2 + ") { ", m2 += "}";
    e25.compositeRule = d2.compositeRule = v2, n2 += " " + m2 + " if (!" + f2 + ") {   var err =   ", false !== e25.createErrors ? (n2 += " { keyword: 'anyOf' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: {} ", false !== e25.opts.messages && (n2 += " , message: 'should match some schema in anyOf' "), e25.opts.verbose && (n2 += " , schema: validate.schema" + u2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), n2 += " } ") : n2 += " {} ", n2 += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", !e25.compositeRule && l2 && (e25.async ? n2 += " throw new ValidationError(vErrors); " : n2 += " validate.errors = vErrors; return false; "), n2 += " } else {  errors = " + h2 + "; if (vErrors !== null) { if (" + h2 + ") vErrors.length = " + h2 + "; else vErrors = null; } ", e25.opts.allErrors && (n2 += " } "), n2 = e25.util.cleanUpCode(n2);
  } else l2 && (n2 += " if (true) { ");
  return n2;
}, $comment: function(e25, t3, r2) {
  var n2 = " ", i2 = e25.schema[t3], a2 = e25.errSchemaPath + "/" + t3, o2 = (e25.opts.allErrors, e25.util.toQuotedString(i2));
  return true === e25.opts.$comment ? n2 += " console.log(" + o2 + ");" : "function" == typeof e25.opts.$comment && (n2 += " self._opts.$comment(" + o2 + ", " + e25.util.toQuotedString(a2) + ", validate.root.schema);"), n2;
}, const: function(e25, t3, r2) {
  var n2 = " ", i2 = e25.level, a2 = e25.dataLevel, o2 = e25.schema[t3], s2 = e25.schemaPath + e25.util.getProperty(t3), u2 = e25.errSchemaPath + "/" + t3, c2 = !e25.opts.allErrors, l2 = "data" + (a2 || ""), p2 = "valid" + i2, f2 = e25.opts.$data && o2 && o2.$data;
  f2 && (n2 += " var schema" + i2 + " = " + e25.util.getData(o2.$data, a2, e25.dataPathArr) + "; "), f2 || (n2 += " var schema" + i2 + " = validate.schema" + s2 + ";"), n2 += "var " + p2 + " = equal(" + l2 + ", schema" + i2 + "); if (!" + p2 + ") {   ";
  var h2 = h2 || [];
  h2.push(n2), n2 = "", false !== e25.createErrors ? (n2 += " { keyword: 'const' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(u2) + " , params: { allowedValue: schema" + i2 + " } ", false !== e25.opts.messages && (n2 += " , message: 'should be equal to constant' "), e25.opts.verbose && (n2 += " , schema: validate.schema" + s2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + l2 + " "), n2 += " } ") : n2 += " {} ";
  var d2 = n2;
  return n2 = h2.pop(), !e25.compositeRule && c2 ? e25.async ? n2 += " throw new ValidationError([" + d2 + "]); " : n2 += " validate.errors = [" + d2 + "]; return false; " : n2 += " var err = " + d2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n2 += " }", c2 && (n2 += " else { "), n2;
}, contains: function(e25, t3, r2) {
  var n2 = " ", a2 = e25.level, o2 = e25.dataLevel, s2 = e25.schema[t3], u2 = e25.schemaPath + e25.util.getProperty(t3), c2 = e25.errSchemaPath + "/" + t3, l2 = !e25.opts.allErrors, p2 = "data" + (o2 || ""), f2 = "valid" + a2, h2 = "errs__" + a2, d2 = e25.util.copy(e25);
  d2.level++;
  var m2 = "valid" + d2.level, g2 = "i" + a2, y2 = d2.dataLevel = e25.dataLevel + 1, v2 = "data" + y2, x2 = e25.baseId, b2 = e25.opts.strictKeywords ? "object" == i(s2) && Object.keys(s2).length > 0 : e25.util.schemaHasRules(s2, e25.RULES.all);
  if (n2 += "var " + h2 + " = errors;var " + f2 + ";", b2) {
    var E2 = e25.compositeRule;
    e25.compositeRule = d2.compositeRule = true, d2.schema = s2, d2.schemaPath = u2, d2.errSchemaPath = c2, n2 += " var " + m2 + " = false; for (var " + g2 + " = 0; " + g2 + " < " + p2 + ".length; " + g2 + "++) { ", d2.errorPath = e25.util.getPathExpr(e25.errorPath, g2, e25.opts.jsonPointers, true);
    var C3 = p2 + "[" + g2 + "]";
    d2.dataPathArr[y2] = g2;
    var S3 = e25.validate(d2);
    d2.baseId = x2, e25.util.varOccurences(S3, v2) < 2 ? n2 += " " + e25.util.varReplace(S3, v2, C3) + " " : n2 += " var " + v2 + " = " + C3 + "; " + S3 + " ", n2 += " if (" + m2 + ") break; }  ", e25.compositeRule = d2.compositeRule = E2, n2 += "  if (!" + m2 + ") {";
  } else n2 += " if (" + p2 + ".length == 0) {";
  var k2 = k2 || [];
  k2.push(n2), n2 = "", false !== e25.createErrors ? (n2 += " { keyword: 'contains' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: {} ", false !== e25.opts.messages && (n2 += " , message: 'should contain a valid item' "), e25.opts.verbose && (n2 += " , schema: validate.schema" + u2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), n2 += " } ") : n2 += " {} ";
  var D2 = n2;
  return n2 = k2.pop(), !e25.compositeRule && l2 ? e25.async ? n2 += " throw new ValidationError([" + D2 + "]); " : n2 += " validate.errors = [" + D2 + "]; return false; " : n2 += " var err = " + D2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n2 += " } else { ", b2 && (n2 += "  errors = " + h2 + "; if (vErrors !== null) { if (" + h2 + ") vErrors.length = " + h2 + "; else vErrors = null; } "), e25.opts.allErrors && (n2 += " } "), n2 = e25.util.cleanUpCode(n2);
}, dependencies: function(e25, t3, r2) {
  var n2 = " ", a2 = e25.level, o2 = e25.dataLevel, s2 = e25.schema[t3], u2 = e25.schemaPath + e25.util.getProperty(t3), c2 = e25.errSchemaPath + "/" + t3, l2 = !e25.opts.allErrors, p2 = "data" + (o2 || ""), f2 = "errs__" + a2, h2 = e25.util.copy(e25), d2 = "";
  h2.level++;
  var m2 = "valid" + h2.level, g2 = {}, y2 = {}, v2 = e25.opts.ownProperties;
  for (C3 in s2) {
    var x2 = s2[C3], b2 = Array.isArray(x2) ? y2 : g2;
    b2[C3] = x2;
  }
  n2 += "var " + f2 + " = errors;";
  var E2 = e25.errorPath;
  for (var C3 in n2 += "var missing" + a2 + ";", y2) if ((b2 = y2[C3]).length) {
    if (n2 += " if ( " + p2 + e25.util.getProperty(C3) + " !== undefined ", v2 && (n2 += " && Object.prototype.hasOwnProperty.call(" + p2 + ", '" + e25.util.escapeQuotes(C3) + "') "), l2) {
      n2 += " && ( ";
      var S3 = b2;
      if (S3) for (var k2 = -1, D2 = S3.length - 1; k2 < D2; ) {
        P2 = S3[k2 += 1], k2 && (n2 += " || "), n2 += " ( ( " + (L2 = p2 + (O2 = e25.util.getProperty(P2))) + " === undefined ", v2 && (n2 += " || ! Object.prototype.hasOwnProperty.call(" + p2 + ", '" + e25.util.escapeQuotes(P2) + "') "), n2 += ") && (missing" + a2 + " = " + e25.util.toQuotedString(e25.opts.jsonPointers ? P2 : O2) + ") ) ";
      }
      n2 += ")) {  ";
      var F2 = "missing" + a2, A2 = "' + " + F2 + " + '";
      e25.opts._errorDataPathProperty && (e25.errorPath = e25.opts.jsonPointers ? e25.util.getPathExpr(E2, F2, true) : E2 + " + " + F2);
      var w2 = w2 || [];
      w2.push(n2), n2 = "", false !== e25.createErrors ? (n2 += " { keyword: 'dependencies' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { property: '" + e25.util.escapeQuotes(C3) + "', missingProperty: '" + A2 + "', depsCount: " + b2.length + ", deps: '" + e25.util.escapeQuotes(1 == b2.length ? b2[0] : b2.join(", ")) + "' } ", false !== e25.opts.messages && (n2 += " , message: 'should have ", 1 == b2.length ? n2 += "property " + e25.util.escapeQuotes(b2[0]) : n2 += "properties " + e25.util.escapeQuotes(b2.join(", ")), n2 += " when property " + e25.util.escapeQuotes(C3) + " is present' "), e25.opts.verbose && (n2 += " , schema: validate.schema" + u2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), n2 += " } ") : n2 += " {} ";
      var _2 = n2;
      n2 = w2.pop(), !e25.compositeRule && l2 ? e25.async ? n2 += " throw new ValidationError([" + _2 + "]); " : n2 += " validate.errors = [" + _2 + "]; return false; " : n2 += " var err = " + _2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    } else {
      n2 += " ) { ";
      var T2 = b2;
      if (T2) for (var P2, I2 = -1, B2 = T2.length - 1; I2 < B2; ) {
        P2 = T2[I2 += 1];
        var O2 = e25.util.getProperty(P2), L2 = (A2 = e25.util.escapeQuotes(P2), p2 + O2);
        e25.opts._errorDataPathProperty && (e25.errorPath = e25.util.getPath(E2, P2, e25.opts.jsonPointers)), n2 += " if ( " + L2 + " === undefined ", v2 && (n2 += " || ! Object.prototype.hasOwnProperty.call(" + p2 + ", '" + e25.util.escapeQuotes(P2) + "') "), n2 += ") {  var err =   ", false !== e25.createErrors ? (n2 += " { keyword: 'dependencies' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { property: '" + e25.util.escapeQuotes(C3) + "', missingProperty: '" + A2 + "', depsCount: " + b2.length + ", deps: '" + e25.util.escapeQuotes(1 == b2.length ? b2[0] : b2.join(", ")) + "' } ", false !== e25.opts.messages && (n2 += " , message: 'should have ", 1 == b2.length ? n2 += "property " + e25.util.escapeQuotes(b2[0]) : n2 += "properties " + e25.util.escapeQuotes(b2.join(", ")), n2 += " when property " + e25.util.escapeQuotes(C3) + " is present' "), e25.opts.verbose && (n2 += " , schema: validate.schema" + u2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), n2 += " } ") : n2 += " {} ", n2 += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ";
      }
    }
    n2 += " }   ", l2 && (d2 += "}", n2 += " else { ");
  }
  e25.errorPath = E2;
  var N2 = h2.baseId;
  for (var C3 in g2) {
    x2 = g2[C3];
    (e25.opts.strictKeywords ? "object" == i(x2) && Object.keys(x2).length > 0 : e25.util.schemaHasRules(x2, e25.RULES.all)) && (n2 += " " + m2 + " = true; if ( " + p2 + e25.util.getProperty(C3) + " !== undefined ", v2 && (n2 += " && Object.prototype.hasOwnProperty.call(" + p2 + ", '" + e25.util.escapeQuotes(C3) + "') "), n2 += ") { ", h2.schema = x2, h2.schemaPath = u2 + e25.util.getProperty(C3), h2.errSchemaPath = c2 + "/" + e25.util.escapeFragment(C3), n2 += "  " + e25.validate(h2) + " ", h2.baseId = N2, n2 += " }  ", l2 && (n2 += " if (" + m2 + ") { ", d2 += "}"));
  }
  return l2 && (n2 += "   " + d2 + " if (" + f2 + " == errors) {"), n2 = e25.util.cleanUpCode(n2);
}, enum: function(e25, t3, r2) {
  var n2 = " ", i2 = e25.level, a2 = e25.dataLevel, o2 = e25.schema[t3], s2 = e25.schemaPath + e25.util.getProperty(t3), u2 = e25.errSchemaPath + "/" + t3, c2 = !e25.opts.allErrors, l2 = "data" + (a2 || ""), p2 = "valid" + i2, f2 = e25.opts.$data && o2 && o2.$data;
  f2 && (n2 += " var schema" + i2 + " = " + e25.util.getData(o2.$data, a2, e25.dataPathArr) + "; ");
  var h2 = "i" + i2, d2 = "schema" + i2;
  f2 || (n2 += " var " + d2 + " = validate.schema" + s2 + ";"), n2 += "var " + p2 + ";", f2 && (n2 += " if (schema" + i2 + " === undefined) " + p2 + " = true; else if (!Array.isArray(schema" + i2 + ")) " + p2 + " = false; else {"), n2 += p2 + " = false;for (var " + h2 + "=0; " + h2 + "<" + d2 + ".length; " + h2 + "++) if (equal(" + l2 + ", " + d2 + "[" + h2 + "])) { " + p2 + " = true; break; }", f2 && (n2 += "  }  "), n2 += " if (!" + p2 + ") {   ";
  var m2 = m2 || [];
  m2.push(n2), n2 = "", false !== e25.createErrors ? (n2 += " { keyword: 'enum' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(u2) + " , params: { allowedValues: schema" + i2 + " } ", false !== e25.opts.messages && (n2 += " , message: 'should be equal to one of the allowed values' "), e25.opts.verbose && (n2 += " , schema: validate.schema" + s2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + l2 + " "), n2 += " } ") : n2 += " {} ";
  var g2 = n2;
  return n2 = m2.pop(), !e25.compositeRule && c2 ? e25.async ? n2 += " throw new ValidationError([" + g2 + "]); " : n2 += " validate.errors = [" + g2 + "]; return false; " : n2 += " var err = " + g2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n2 += " }", c2 && (n2 += " else { "), n2;
}, format: function(e25, t3, r2) {
  var n2 = " ", a2 = e25.level, o2 = e25.dataLevel, s2 = e25.schema[t3], u2 = e25.schemaPath + e25.util.getProperty(t3), c2 = e25.errSchemaPath + "/" + t3, l2 = !e25.opts.allErrors, p2 = "data" + (o2 || "");
  if (false === e25.opts.format) return l2 && (n2 += " if (true) { "), n2;
  var f2, h2 = e25.opts.$data && s2 && s2.$data;
  h2 ? (n2 += " var schema" + a2 + " = " + e25.util.getData(s2.$data, o2, e25.dataPathArr) + "; ", f2 = "schema" + a2) : f2 = s2;
  var d2 = e25.opts.unknownFormats, m2 = Array.isArray(d2);
  if (h2) {
    n2 += " var " + (g2 = "format" + a2) + " = formats[" + f2 + "]; var " + (y2 = "isObject" + a2) + " = typeof " + g2 + " == 'object' && !(" + g2 + " instanceof RegExp) && " + g2 + ".validate; var " + (v2 = "formatType" + a2) + " = " + y2 + " && " + g2 + ".type || 'string'; if (" + y2 + ") { ", e25.async && (n2 += " var async" + a2 + " = " + g2 + ".async; "), n2 += " " + g2 + " = " + g2 + ".validate; } if (  ", h2 && (n2 += " (" + f2 + " !== undefined && typeof " + f2 + " != 'string') || "), n2 += " (", "ignore" != d2 && (n2 += " (" + f2 + " && !" + g2 + " ", m2 && (n2 += " && self._opts.unknownFormats.indexOf(" + f2 + ") == -1 "), n2 += ") || "), n2 += " (" + g2 + " && " + v2 + " == '" + r2 + "' && !(typeof " + g2 + " == 'function' ? ", e25.async ? n2 += " (async" + a2 + " ? await " + g2 + "(" + p2 + ") : " + g2 + "(" + p2 + ")) " : n2 += " " + g2 + "(" + p2 + ") ", n2 += " : " + g2 + ".test(" + p2 + "))))) {";
  } else {
    var g2;
    if (!(g2 = e25.formats[s2])) {
      if ("ignore" == d2) return e25.logger.warn('unknown format "' + s2 + '" ignored in schema at path "' + e25.errSchemaPath + '"'), l2 && (n2 += " if (true) { "), n2;
      if (m2 && d2.indexOf(s2) >= 0) return l2 && (n2 += " if (true) { "), n2;
      throw new Error('unknown format "' + s2 + '" is used in schema at path "' + e25.errSchemaPath + '"');
    }
    var y2, v2 = (y2 = "object" == i(g2) && !(g2 instanceof RegExp) && g2.validate) && g2.type || "string";
    if (y2) {
      var x2 = true === g2.async;
      g2 = g2.validate;
    }
    if (v2 != r2) return l2 && (n2 += " if (true) { "), n2;
    if (x2) {
      if (!e25.async) throw new Error("async format in sync schema");
      n2 += " if (!(await " + (b2 = "formats" + e25.util.getProperty(s2) + ".validate") + "(" + p2 + "))) { ";
    } else {
      n2 += " if (! ";
      var b2 = "formats" + e25.util.getProperty(s2);
      y2 && (b2 += ".validate"), n2 += "function" == typeof g2 ? " " + b2 + "(" + p2 + ") " : " " + b2 + ".test(" + p2 + ") ", n2 += ") { ";
    }
  }
  var E2 = E2 || [];
  E2.push(n2), n2 = "", false !== e25.createErrors ? (n2 += " { keyword: 'format' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { format:  ", n2 += h2 ? "" + f2 : "" + e25.util.toQuotedString(s2), n2 += "  } ", false !== e25.opts.messages && (n2 += ` , message: 'should match format "`, n2 += h2 ? "' + " + f2 + " + '" : "" + e25.util.escapeQuotes(s2), n2 += `"' `), e25.opts.verbose && (n2 += " , schema:  ", n2 += h2 ? "validate.schema" + u2 : "" + e25.util.toQuotedString(s2), n2 += "         , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), n2 += " } ") : n2 += " {} ";
  var C3 = n2;
  return n2 = E2.pop(), !e25.compositeRule && l2 ? e25.async ? n2 += " throw new ValidationError([" + C3 + "]); " : n2 += " validate.errors = [" + C3 + "]; return false; " : n2 += " var err = " + C3 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n2 += " } ", l2 && (n2 += " else { "), n2;
}, if: function(e25, t3, r2) {
  var n2 = " ", a2 = e25.level, o2 = e25.dataLevel, s2 = e25.schema[t3], u2 = e25.schemaPath + e25.util.getProperty(t3), c2 = e25.errSchemaPath + "/" + t3, l2 = !e25.opts.allErrors, p2 = "data" + (o2 || ""), f2 = "valid" + a2, h2 = "errs__" + a2, d2 = e25.util.copy(e25);
  d2.level++;
  var m2 = "valid" + d2.level, g2 = e25.schema.then, y2 = e25.schema.else, v2 = void 0 !== g2 && (e25.opts.strictKeywords ? "object" == i(g2) && Object.keys(g2).length > 0 : e25.util.schemaHasRules(g2, e25.RULES.all)), x2 = void 0 !== y2 && (e25.opts.strictKeywords ? "object" == i(y2) && Object.keys(y2).length > 0 : e25.util.schemaHasRules(y2, e25.RULES.all)), b2 = d2.baseId;
  if (v2 || x2) {
    var E2;
    d2.createErrors = false, d2.schema = s2, d2.schemaPath = u2, d2.errSchemaPath = c2, n2 += " var " + h2 + " = errors; var " + f2 + " = true;  ";
    var C3 = e25.compositeRule;
    e25.compositeRule = d2.compositeRule = true, n2 += "  " + e25.validate(d2) + " ", d2.baseId = b2, d2.createErrors = true, n2 += "  errors = " + h2 + "; if (vErrors !== null) { if (" + h2 + ") vErrors.length = " + h2 + "; else vErrors = null; }  ", e25.compositeRule = d2.compositeRule = C3, v2 ? (n2 += " if (" + m2 + ") {  ", d2.schema = e25.schema.then, d2.schemaPath = e25.schemaPath + ".then", d2.errSchemaPath = e25.errSchemaPath + "/then", n2 += "  " + e25.validate(d2) + " ", d2.baseId = b2, n2 += " " + f2 + " = " + m2 + "; ", v2 && x2 ? n2 += " var " + (E2 = "ifClause" + a2) + " = 'then'; " : E2 = "'then'", n2 += " } ", x2 && (n2 += " else { ")) : n2 += " if (!" + m2 + ") { ", x2 && (d2.schema = e25.schema.else, d2.schemaPath = e25.schemaPath + ".else", d2.errSchemaPath = e25.errSchemaPath + "/else", n2 += "  " + e25.validate(d2) + " ", d2.baseId = b2, n2 += " " + f2 + " = " + m2 + "; ", v2 && x2 ? n2 += " var " + (E2 = "ifClause" + a2) + " = 'else'; " : E2 = "'else'", n2 += " } "), n2 += " if (!" + f2 + ") {   var err =   ", false !== e25.createErrors ? (n2 += " { keyword: 'if' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { failingKeyword: " + E2 + " } ", false !== e25.opts.messages && (n2 += ` , message: 'should match "' + ` + E2 + ` + '" schema' `), e25.opts.verbose && (n2 += " , schema: validate.schema" + u2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), n2 += " } ") : n2 += " {} ", n2 += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", !e25.compositeRule && l2 && (e25.async ? n2 += " throw new ValidationError(vErrors); " : n2 += " validate.errors = vErrors; return false; "), n2 += " }   ", l2 && (n2 += " else { "), n2 = e25.util.cleanUpCode(n2);
  } else l2 && (n2 += " if (true) { ");
  return n2;
}, items: function(e25, t3, r2) {
  var n2 = " ", a2 = e25.level, o2 = e25.dataLevel, s2 = e25.schema[t3], u2 = e25.schemaPath + e25.util.getProperty(t3), c2 = e25.errSchemaPath + "/" + t3, l2 = !e25.opts.allErrors, p2 = "data" + (o2 || ""), f2 = "valid" + a2, h2 = "errs__" + a2, d2 = e25.util.copy(e25), m2 = "";
  d2.level++;
  var g2 = "valid" + d2.level, y2 = "i" + a2, v2 = d2.dataLevel = e25.dataLevel + 1, x2 = "data" + v2, b2 = e25.baseId;
  if (n2 += "var " + h2 + " = errors;var " + f2 + ";", Array.isArray(s2)) {
    var E2 = e25.schema.additionalItems;
    if (false === E2) {
      n2 += " " + f2 + " = " + p2 + ".length <= " + s2.length + "; ";
      var C3 = c2;
      c2 = e25.errSchemaPath + "/additionalItems", n2 += "  if (!" + f2 + ") {   ";
      var S3 = S3 || [];
      S3.push(n2), n2 = "", false !== e25.createErrors ? (n2 += " { keyword: 'additionalItems' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { limit: " + s2.length + " } ", false !== e25.opts.messages && (n2 += " , message: 'should NOT have more than " + s2.length + " items' "), e25.opts.verbose && (n2 += " , schema: false , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), n2 += " } ") : n2 += " {} ";
      var k2 = n2;
      n2 = S3.pop(), !e25.compositeRule && l2 ? e25.async ? n2 += " throw new ValidationError([" + k2 + "]); " : n2 += " validate.errors = [" + k2 + "]; return false; " : n2 += " var err = " + k2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n2 += " } ", c2 = C3, l2 && (m2 += "}", n2 += " else { ");
    }
    var D2 = s2;
    if (D2) {
      for (var F2, A2 = -1, w2 = D2.length - 1; A2 < w2; ) if (F2 = D2[A2 += 1], e25.opts.strictKeywords ? "object" == i(F2) && Object.keys(F2).length > 0 : e25.util.schemaHasRules(F2, e25.RULES.all)) {
        n2 += " " + g2 + " = true; if (" + p2 + ".length > " + A2 + ") { ";
        var _2 = p2 + "[" + A2 + "]";
        d2.schema = F2, d2.schemaPath = u2 + "[" + A2 + "]", d2.errSchemaPath = c2 + "/" + A2, d2.errorPath = e25.util.getPathExpr(e25.errorPath, A2, e25.opts.jsonPointers, true), d2.dataPathArr[v2] = A2;
        var T2 = e25.validate(d2);
        d2.baseId = b2, e25.util.varOccurences(T2, x2) < 2 ? n2 += " " + e25.util.varReplace(T2, x2, _2) + " " : n2 += " var " + x2 + " = " + _2 + "; " + T2 + " ", n2 += " }  ", l2 && (n2 += " if (" + g2 + ") { ", m2 += "}");
      }
    }
    if ("object" == i(E2) && (e25.opts.strictKeywords ? "object" == i(E2) && Object.keys(E2).length > 0 : e25.util.schemaHasRules(E2, e25.RULES.all))) {
      d2.schema = E2, d2.schemaPath = e25.schemaPath + ".additionalItems", d2.errSchemaPath = e25.errSchemaPath + "/additionalItems", n2 += " " + g2 + " = true; if (" + p2 + ".length > " + s2.length + ") {  for (var " + y2 + " = " + s2.length + "; " + y2 + " < " + p2 + ".length; " + y2 + "++) { ", d2.errorPath = e25.util.getPathExpr(e25.errorPath, y2, e25.opts.jsonPointers, true);
      _2 = p2 + "[" + y2 + "]";
      d2.dataPathArr[v2] = y2;
      T2 = e25.validate(d2);
      d2.baseId = b2, e25.util.varOccurences(T2, x2) < 2 ? n2 += " " + e25.util.varReplace(T2, x2, _2) + " " : n2 += " var " + x2 + " = " + _2 + "; " + T2 + " ", l2 && (n2 += " if (!" + g2 + ") break; "), n2 += " } }  ", l2 && (n2 += " if (" + g2 + ") { ", m2 += "}");
    }
  } else if (e25.opts.strictKeywords ? "object" == i(s2) && Object.keys(s2).length > 0 : e25.util.schemaHasRules(s2, e25.RULES.all)) {
    d2.schema = s2, d2.schemaPath = u2, d2.errSchemaPath = c2, n2 += "  for (var " + y2 + " = 0; " + y2 + " < " + p2 + ".length; " + y2 + "++) { ", d2.errorPath = e25.util.getPathExpr(e25.errorPath, y2, e25.opts.jsonPointers, true);
    _2 = p2 + "[" + y2 + "]";
    d2.dataPathArr[v2] = y2;
    T2 = e25.validate(d2);
    d2.baseId = b2, e25.util.varOccurences(T2, x2) < 2 ? n2 += " " + e25.util.varReplace(T2, x2, _2) + " " : n2 += " var " + x2 + " = " + _2 + "; " + T2 + " ", l2 && (n2 += " if (!" + g2 + ") break; "), n2 += " }";
  }
  return l2 && (n2 += " " + m2 + " if (" + h2 + " == errors) {"), n2 = e25.util.cleanUpCode(n2);
}, maximum: tx, minimum: tx, maxItems: rx, minItems: rx, maxLength: nx, minLength: nx, maxProperties: ix, minProperties: ix, multipleOf: function(e25, t3, r2) {
  var n2, i2 = " ", a2 = e25.level, o2 = e25.dataLevel, s2 = e25.schema[t3], u2 = e25.schemaPath + e25.util.getProperty(t3), c2 = e25.errSchemaPath + "/" + t3, l2 = !e25.opts.allErrors, p2 = "data" + (o2 || ""), f2 = e25.opts.$data && s2 && s2.$data;
  f2 ? (i2 += " var schema" + a2 + " = " + e25.util.getData(s2.$data, o2, e25.dataPathArr) + "; ", n2 = "schema" + a2) : n2 = s2, i2 += "var division" + a2 + ";if (", f2 && (i2 += " " + n2 + " !== undefined && ( typeof " + n2 + " != 'number' || "), i2 += " (division" + a2 + " = " + p2 + " / " + n2 + ", ", e25.opts.multipleOfPrecision ? i2 += " Math.abs(Math.round(division" + a2 + ") - division" + a2 + ") > 1e-" + e25.opts.multipleOfPrecision + " " : i2 += " division" + a2 + " !== parseInt(division" + a2 + ") ", i2 += " ) ", f2 && (i2 += "  )  "), i2 += " ) {   ";
  var h2 = h2 || [];
  h2.push(i2), i2 = "", false !== e25.createErrors ? (i2 += " { keyword: 'multipleOf' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { multipleOf: " + n2 + " } ", false !== e25.opts.messages && (i2 += " , message: 'should be multiple of ", i2 += f2 ? "' + " + n2 : n2 + "'"), e25.opts.verbose && (i2 += " , schema:  ", i2 += f2 ? "validate.schema" + u2 : "" + s2, i2 += "         , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), i2 += " } ") : i2 += " {} ";
  var d2 = i2;
  return i2 = h2.pop(), !e25.compositeRule && l2 ? e25.async ? i2 += " throw new ValidationError([" + d2 + "]); " : i2 += " validate.errors = [" + d2 + "]; return false; " : i2 += " var err = " + d2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", i2 += "} ", l2 && (i2 += " else { "), i2;
}, not: function(e25, t3, r2) {
  var n2 = " ", a2 = e25.level, o2 = e25.dataLevel, s2 = e25.schema[t3], u2 = e25.schemaPath + e25.util.getProperty(t3), c2 = e25.errSchemaPath + "/" + t3, l2 = !e25.opts.allErrors, p2 = "data" + (o2 || ""), f2 = "errs__" + a2, h2 = e25.util.copy(e25);
  h2.level++;
  var d2 = "valid" + h2.level;
  if (e25.opts.strictKeywords ? "object" == i(s2) && Object.keys(s2).length > 0 : e25.util.schemaHasRules(s2, e25.RULES.all)) {
    h2.schema = s2, h2.schemaPath = u2, h2.errSchemaPath = c2, n2 += " var " + f2 + " = errors;  ";
    var m2, g2 = e25.compositeRule;
    e25.compositeRule = h2.compositeRule = true, h2.createErrors = false, h2.opts.allErrors && (m2 = h2.opts.allErrors, h2.opts.allErrors = false), n2 += " " + e25.validate(h2) + " ", h2.createErrors = true, m2 && (h2.opts.allErrors = m2), e25.compositeRule = h2.compositeRule = g2, n2 += " if (" + d2 + ") {   ";
    var y2 = y2 || [];
    y2.push(n2), n2 = "", false !== e25.createErrors ? (n2 += " { keyword: 'not' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: {} ", false !== e25.opts.messages && (n2 += " , message: 'should NOT be valid' "), e25.opts.verbose && (n2 += " , schema: validate.schema" + u2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), n2 += " } ") : n2 += " {} ";
    var v2 = n2;
    n2 = y2.pop(), !e25.compositeRule && l2 ? e25.async ? n2 += " throw new ValidationError([" + v2 + "]); " : n2 += " validate.errors = [" + v2 + "]; return false; " : n2 += " var err = " + v2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n2 += " } else {  errors = " + f2 + "; if (vErrors !== null) { if (" + f2 + ") vErrors.length = " + f2 + "; else vErrors = null; } ", e25.opts.allErrors && (n2 += " } ");
  } else n2 += "  var err =   ", false !== e25.createErrors ? (n2 += " { keyword: 'not' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: {} ", false !== e25.opts.messages && (n2 += " , message: 'should NOT be valid' "), e25.opts.verbose && (n2 += " , schema: validate.schema" + u2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), n2 += " } ") : n2 += " {} ", n2 += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", l2 && (n2 += " if (false) { ");
  return n2;
}, oneOf: function(e25, t3, r2) {
  var n2 = " ", a2 = e25.level, o2 = e25.dataLevel, s2 = e25.schema[t3], u2 = e25.schemaPath + e25.util.getProperty(t3), c2 = e25.errSchemaPath + "/" + t3, l2 = !e25.opts.allErrors, p2 = "data" + (o2 || ""), f2 = "valid" + a2, h2 = "errs__" + a2, d2 = e25.util.copy(e25), m2 = "";
  d2.level++;
  var g2 = "valid" + d2.level, y2 = d2.baseId, v2 = "prevValid" + a2, x2 = "passingSchemas" + a2;
  n2 += "var " + h2 + " = errors , " + v2 + " = false , " + f2 + " = false , " + x2 + " = null; ";
  var b2 = e25.compositeRule;
  e25.compositeRule = d2.compositeRule = true;
  var E2 = s2;
  if (E2) for (var C3, S3 = -1, k2 = E2.length - 1; S3 < k2; ) C3 = E2[S3 += 1], (e25.opts.strictKeywords ? "object" == i(C3) && Object.keys(C3).length > 0 : e25.util.schemaHasRules(C3, e25.RULES.all)) ? (d2.schema = C3, d2.schemaPath = u2 + "[" + S3 + "]", d2.errSchemaPath = c2 + "/" + S3, n2 += "  " + e25.validate(d2) + " ", d2.baseId = y2) : n2 += " var " + g2 + " = true; ", S3 && (n2 += " if (" + g2 + " && " + v2 + ") { " + f2 + " = false; " + x2 + " = [" + x2 + ", " + S3 + "]; } else { ", m2 += "}"), n2 += " if (" + g2 + ") { " + f2 + " = " + v2 + " = true; " + x2 + " = " + S3 + "; }";
  return e25.compositeRule = d2.compositeRule = b2, n2 += m2 + "if (!" + f2 + ") {   var err =   ", false !== e25.createErrors ? (n2 += " { keyword: 'oneOf' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { passingSchemas: " + x2 + " } ", false !== e25.opts.messages && (n2 += " , message: 'should match exactly one schema in oneOf' "), e25.opts.verbose && (n2 += " , schema: validate.schema" + u2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), n2 += " } ") : n2 += " {} ", n2 += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", !e25.compositeRule && l2 && (e25.async ? n2 += " throw new ValidationError(vErrors); " : n2 += " validate.errors = vErrors; return false; "), n2 += "} else {  errors = " + h2 + "; if (vErrors !== null) { if (" + h2 + ") vErrors.length = " + h2 + "; else vErrors = null; }", e25.opts.allErrors && (n2 += " } "), n2;
}, pattern: function(e25, t3, r2) {
  var n2, i2 = " ", a2 = e25.level, o2 = e25.dataLevel, s2 = e25.schema[t3], u2 = e25.schemaPath + e25.util.getProperty(t3), c2 = e25.errSchemaPath + "/" + t3, l2 = !e25.opts.allErrors, p2 = "data" + (o2 || ""), f2 = e25.opts.$data && s2 && s2.$data;
  f2 ? (i2 += " var schema" + a2 + " = " + e25.util.getData(s2.$data, o2, e25.dataPathArr) + "; ", n2 = "schema" + a2) : n2 = s2, i2 += "if ( ", f2 && (i2 += " (" + n2 + " !== undefined && typeof " + n2 + " != 'string') || "), i2 += " !" + (f2 ? "(new RegExp(" + n2 + "))" : e25.usePattern(s2)) + ".test(" + p2 + ") ) {   ";
  var h2 = h2 || [];
  h2.push(i2), i2 = "", false !== e25.createErrors ? (i2 += " { keyword: 'pattern' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { pattern:  ", i2 += f2 ? "" + n2 : "" + e25.util.toQuotedString(s2), i2 += "  } ", false !== e25.opts.messages && (i2 += ` , message: 'should match pattern "`, i2 += f2 ? "' + " + n2 + " + '" : "" + e25.util.escapeQuotes(s2), i2 += `"' `), e25.opts.verbose && (i2 += " , schema:  ", i2 += f2 ? "validate.schema" + u2 : "" + e25.util.toQuotedString(s2), i2 += "         , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), i2 += " } ") : i2 += " {} ";
  var d2 = i2;
  return i2 = h2.pop(), !e25.compositeRule && l2 ? e25.async ? i2 += " throw new ValidationError([" + d2 + "]); " : i2 += " validate.errors = [" + d2 + "]; return false; " : i2 += " var err = " + d2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", i2 += "} ", l2 && (i2 += " else { "), i2;
}, properties: function(e25, t3, r2) {
  var n2 = " ", a2 = e25.level, o2 = e25.dataLevel, s2 = e25.schema[t3], u2 = e25.schemaPath + e25.util.getProperty(t3), c2 = e25.errSchemaPath + "/" + t3, l2 = !e25.opts.allErrors, p2 = "data" + (o2 || ""), f2 = "errs__" + a2, h2 = e25.util.copy(e25), d2 = "";
  h2.level++;
  var m2 = "valid" + h2.level, g2 = "key" + a2, y2 = "idx" + a2, v2 = h2.dataLevel = e25.dataLevel + 1, x2 = "data" + v2, b2 = "dataProperties" + a2, E2 = Object.keys(s2 || {}), C3 = e25.schema.patternProperties || {}, S3 = Object.keys(C3), k2 = e25.schema.additionalProperties, D2 = E2.length || S3.length, F2 = false === k2, A2 = "object" == i(k2) && Object.keys(k2).length, w2 = e25.opts.removeAdditional, _2 = F2 || A2 || w2, T2 = e25.opts.ownProperties, P2 = e25.baseId, I2 = e25.schema.required;
  if (I2 && (!e25.opts.$data || !I2.$data) && I2.length < e25.opts.loopRequired) var B2 = e25.util.toHash(I2);
  if (n2 += "var " + f2 + " = errors;var " + m2 + " = true;", T2 && (n2 += " var " + b2 + " = undefined;"), _2) {
    if (n2 += T2 ? " " + b2 + " = " + b2 + " || Object.keys(" + p2 + "); for (var " + y2 + "=0; " + y2 + "<" + b2 + ".length; " + y2 + "++) { var " + g2 + " = " + b2 + "[" + y2 + "]; " : " for (var " + g2 + " in " + p2 + ") { ", D2) {
      if (n2 += " var isAdditional" + a2 + " = !(false ", E2.length) if (E2.length > 8) n2 += " || validate.schema" + u2 + ".hasOwnProperty(" + g2 + ") ";
      else {
        var O2 = E2;
        if (O2) for (var L2 = -1, N2 = O2.length - 1; L2 < N2; ) J2 = O2[L2 += 1], n2 += " || " + g2 + " == " + e25.util.toQuotedString(J2) + " ";
      }
      if (S3.length) {
        var j2 = S3;
        if (j2) for (var R2 = -1, M2 = j2.length - 1; R2 < M2; ) ae2 = j2[R2 += 1], n2 += " || " + e25.usePattern(ae2) + ".test(" + g2 + ") ";
      }
      n2 += " ); if (isAdditional" + a2 + ") { ";
    }
    if ("all" == w2) n2 += " delete " + p2 + "[" + g2 + "]; ";
    else {
      var V2 = e25.errorPath, U2 = "' + " + g2 + " + '";
      if (e25.opts._errorDataPathProperty && (e25.errorPath = e25.util.getPathExpr(e25.errorPath, g2, e25.opts.jsonPointers)), F2) if (w2) n2 += " delete " + p2 + "[" + g2 + "]; ";
      else {
        n2 += " " + m2 + " = false; ";
        var q2 = c2;
        c2 = e25.errSchemaPath + "/additionalProperties", (re2 = re2 || []).push(n2), n2 = "", false !== e25.createErrors ? (n2 += " { keyword: 'additionalProperties' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { additionalProperty: '" + U2 + "' } ", false !== e25.opts.messages && (n2 += " , message: '", e25.opts._errorDataPathProperty ? n2 += "is an invalid additional property" : n2 += "should NOT have additional properties", n2 += "' "), e25.opts.verbose && (n2 += " , schema: false , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), n2 += " } ") : n2 += " {} ";
        var W2 = n2;
        n2 = re2.pop(), !e25.compositeRule && l2 ? e25.async ? n2 += " throw new ValidationError([" + W2 + "]); " : n2 += " validate.errors = [" + W2 + "]; return false; " : n2 += " var err = " + W2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", c2 = q2, l2 && (n2 += " break; ");
      }
      else if (A2) if ("failing" == w2) {
        n2 += " var " + f2 + " = errors;  ";
        var $2 = e25.compositeRule;
        e25.compositeRule = h2.compositeRule = true, h2.schema = k2, h2.schemaPath = e25.schemaPath + ".additionalProperties", h2.errSchemaPath = e25.errSchemaPath + "/additionalProperties", h2.errorPath = e25.opts._errorDataPathProperty ? e25.errorPath : e25.util.getPathExpr(e25.errorPath, g2, e25.opts.jsonPointers);
        var G2 = p2 + "[" + g2 + "]";
        h2.dataPathArr[v2] = g2;
        var z2 = e25.validate(h2);
        h2.baseId = P2, e25.util.varOccurences(z2, x2) < 2 ? n2 += " " + e25.util.varReplace(z2, x2, G2) + " " : n2 += " var " + x2 + " = " + G2 + "; " + z2 + " ", n2 += " if (!" + m2 + ") { errors = " + f2 + "; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete " + p2 + "[" + g2 + "]; }  ", e25.compositeRule = h2.compositeRule = $2;
      } else {
        h2.schema = k2, h2.schemaPath = e25.schemaPath + ".additionalProperties", h2.errSchemaPath = e25.errSchemaPath + "/additionalProperties", h2.errorPath = e25.opts._errorDataPathProperty ? e25.errorPath : e25.util.getPathExpr(e25.errorPath, g2, e25.opts.jsonPointers);
        G2 = p2 + "[" + g2 + "]";
        h2.dataPathArr[v2] = g2;
        z2 = e25.validate(h2);
        h2.baseId = P2, e25.util.varOccurences(z2, x2) < 2 ? n2 += " " + e25.util.varReplace(z2, x2, G2) + " " : n2 += " var " + x2 + " = " + G2 + "; " + z2 + " ", l2 && (n2 += " if (!" + m2 + ") break; ");
      }
      e25.errorPath = V2;
    }
    D2 && (n2 += " } "), n2 += " }  ", l2 && (n2 += " if (" + m2 + ") { ", d2 += "}");
  }
  var H2 = e25.opts.useDefaults && !e25.compositeRule;
  if (E2.length) {
    var K2 = E2;
    if (K2) for (var J2, Q2 = -1, X2 = K2.length - 1; Q2 < X2; ) {
      var Y2 = s2[J2 = K2[Q2 += 1]];
      if (e25.opts.strictKeywords ? "object" == i(Y2) && Object.keys(Y2).length > 0 : e25.util.schemaHasRules(Y2, e25.RULES.all)) {
        var Z2 = e25.util.getProperty(J2), ee2 = (G2 = p2 + Z2, H2 && void 0 !== Y2.default);
        h2.schema = Y2, h2.schemaPath = u2 + Z2, h2.errSchemaPath = c2 + "/" + e25.util.escapeFragment(J2), h2.errorPath = e25.util.getPath(e25.errorPath, J2, e25.opts.jsonPointers), h2.dataPathArr[v2] = e25.util.toQuotedString(J2);
        z2 = e25.validate(h2);
        if (h2.baseId = P2, e25.util.varOccurences(z2, x2) < 2) {
          z2 = e25.util.varReplace(z2, x2, G2);
          var te2 = G2;
        } else {
          te2 = x2;
          n2 += " var " + x2 + " = " + G2 + "; ";
        }
        if (ee2) n2 += " " + z2 + " ";
        else {
          if (B2 && B2[J2]) {
            n2 += " if ( " + te2 + " === undefined ", T2 && (n2 += " || ! Object.prototype.hasOwnProperty.call(" + p2 + ", '" + e25.util.escapeQuotes(J2) + "') "), n2 += ") { " + m2 + " = false; ";
            V2 = e25.errorPath, q2 = c2;
            var re2, ne2 = e25.util.escapeQuotes(J2);
            e25.opts._errorDataPathProperty && (e25.errorPath = e25.util.getPath(V2, J2, e25.opts.jsonPointers)), c2 = e25.errSchemaPath + "/required", (re2 = re2 || []).push(n2), n2 = "", false !== e25.createErrors ? (n2 += " { keyword: 'required' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { missingProperty: '" + ne2 + "' } ", false !== e25.opts.messages && (n2 += " , message: '", e25.opts._errorDataPathProperty ? n2 += "is a required property" : n2 += "should have required property \\'" + ne2 + "\\'", n2 += "' "), e25.opts.verbose && (n2 += " , schema: validate.schema" + u2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), n2 += " } ") : n2 += " {} ";
            W2 = n2;
            n2 = re2.pop(), !e25.compositeRule && l2 ? e25.async ? n2 += " throw new ValidationError([" + W2 + "]); " : n2 += " validate.errors = [" + W2 + "]; return false; " : n2 += " var err = " + W2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", c2 = q2, e25.errorPath = V2, n2 += " } else { ";
          } else l2 ? (n2 += " if ( " + te2 + " === undefined ", T2 && (n2 += " || ! Object.prototype.hasOwnProperty.call(" + p2 + ", '" + e25.util.escapeQuotes(J2) + "') "), n2 += ") { " + m2 + " = true; } else { ") : (n2 += " if (" + te2 + " !== undefined ", T2 && (n2 += " &&   Object.prototype.hasOwnProperty.call(" + p2 + ", '" + e25.util.escapeQuotes(J2) + "') "), n2 += " ) { ");
          n2 += " " + z2 + " } ";
        }
      }
      l2 && (n2 += " if (" + m2 + ") { ", d2 += "}");
    }
  }
  if (S3.length) {
    var ie4 = S3;
    if (ie4) for (var ae2, oe2 = -1, se2 = ie4.length - 1; oe2 < se2; ) {
      Y2 = C3[ae2 = ie4[oe2 += 1]];
      if (e25.opts.strictKeywords ? "object" == i(Y2) && Object.keys(Y2).length > 0 : e25.util.schemaHasRules(Y2, e25.RULES.all)) {
        h2.schema = Y2, h2.schemaPath = e25.schemaPath + ".patternProperties" + e25.util.getProperty(ae2), h2.errSchemaPath = e25.errSchemaPath + "/patternProperties/" + e25.util.escapeFragment(ae2), n2 += T2 ? " " + b2 + " = " + b2 + " || Object.keys(" + p2 + "); for (var " + y2 + "=0; " + y2 + "<" + b2 + ".length; " + y2 + "++) { var " + g2 + " = " + b2 + "[" + y2 + "]; " : " for (var " + g2 + " in " + p2 + ") { ", n2 += " if (" + e25.usePattern(ae2) + ".test(" + g2 + ")) { ", h2.errorPath = e25.util.getPathExpr(e25.errorPath, g2, e25.opts.jsonPointers);
        G2 = p2 + "[" + g2 + "]";
        h2.dataPathArr[v2] = g2;
        z2 = e25.validate(h2);
        h2.baseId = P2, e25.util.varOccurences(z2, x2) < 2 ? n2 += " " + e25.util.varReplace(z2, x2, G2) + " " : n2 += " var " + x2 + " = " + G2 + "; " + z2 + " ", l2 && (n2 += " if (!" + m2 + ") break; "), n2 += " } ", l2 && (n2 += " else " + m2 + " = true; "), n2 += " }  ", l2 && (n2 += " if (" + m2 + ") { ", d2 += "}");
      }
    }
  }
  return l2 && (n2 += " " + d2 + " if (" + f2 + " == errors) {"), n2 = e25.util.cleanUpCode(n2);
}, propertyNames: function(e25, t3, r2) {
  var n2 = " ", a2 = e25.level, o2 = e25.dataLevel, s2 = e25.schema[t3], u2 = e25.schemaPath + e25.util.getProperty(t3), c2 = e25.errSchemaPath + "/" + t3, l2 = !e25.opts.allErrors, p2 = "data" + (o2 || ""), f2 = "errs__" + a2, h2 = e25.util.copy(e25);
  h2.level++;
  var d2 = "valid" + h2.level;
  if (n2 += "var " + f2 + " = errors;", e25.opts.strictKeywords ? "object" == i(s2) && Object.keys(s2).length > 0 : e25.util.schemaHasRules(s2, e25.RULES.all)) {
    h2.schema = s2, h2.schemaPath = u2, h2.errSchemaPath = c2;
    var m2 = "key" + a2, g2 = "idx" + a2, y2 = "i" + a2, v2 = "' + " + m2 + " + '", x2 = "data" + (h2.dataLevel = e25.dataLevel + 1), b2 = "dataProperties" + a2, E2 = e25.opts.ownProperties, C3 = e25.baseId;
    E2 && (n2 += " var " + b2 + " = undefined; "), n2 += E2 ? " " + b2 + " = " + b2 + " || Object.keys(" + p2 + "); for (var " + g2 + "=0; " + g2 + "<" + b2 + ".length; " + g2 + "++) { var " + m2 + " = " + b2 + "[" + g2 + "]; " : " for (var " + m2 + " in " + p2 + ") { ", n2 += " var startErrs" + a2 + " = errors; ";
    var S3 = m2, k2 = e25.compositeRule;
    e25.compositeRule = h2.compositeRule = true;
    var D2 = e25.validate(h2);
    h2.baseId = C3, e25.util.varOccurences(D2, x2) < 2 ? n2 += " " + e25.util.varReplace(D2, x2, S3) + " " : n2 += " var " + x2 + " = " + S3 + "; " + D2 + " ", e25.compositeRule = h2.compositeRule = k2, n2 += " if (!" + d2 + ") { for (var " + y2 + "=startErrs" + a2 + "; " + y2 + "<errors; " + y2 + "++) { vErrors[" + y2 + "].propertyName = " + m2 + "; }   var err =   ", false !== e25.createErrors ? (n2 += " { keyword: 'propertyNames' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { propertyName: '" + v2 + "' } ", false !== e25.opts.messages && (n2 += " , message: 'property name \\'" + v2 + "\\' is invalid' "), e25.opts.verbose && (n2 += " , schema: validate.schema" + u2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), n2 += " } ") : n2 += " {} ", n2 += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", !e25.compositeRule && l2 && (e25.async ? n2 += " throw new ValidationError(vErrors); " : n2 += " validate.errors = vErrors; return false; "), l2 && (n2 += " break; "), n2 += " } }";
  }
  return l2 && (n2 += "  if (" + f2 + " == errors) {"), n2 = e25.util.cleanUpCode(n2);
}, required: function(e25, t3, r2) {
  var n2 = " ", a2 = e25.level, o2 = e25.dataLevel, s2 = e25.schema[t3], u2 = e25.schemaPath + e25.util.getProperty(t3), c2 = e25.errSchemaPath + "/" + t3, l2 = !e25.opts.allErrors, p2 = "data" + (o2 || ""), f2 = "valid" + a2, h2 = e25.opts.$data && s2 && s2.$data;
  h2 && (n2 += " var schema" + a2 + " = " + e25.util.getData(s2.$data, o2, e25.dataPathArr) + "; ");
  var d2 = "schema" + a2;
  if (!h2) if (s2.length < e25.opts.loopRequired && e25.schema.properties && Object.keys(e25.schema.properties).length) {
    var m2 = [], g2 = s2;
    if (g2) for (var y2, v2 = -1, x2 = g2.length - 1; v2 < x2; ) {
      y2 = g2[v2 += 1];
      var b2 = e25.schema.properties[y2];
      b2 && (e25.opts.strictKeywords ? "object" == i(b2) && Object.keys(b2).length > 0 : e25.util.schemaHasRules(b2, e25.RULES.all)) || (m2[m2.length] = y2);
    }
  } else m2 = s2;
  if (h2 || m2.length) {
    var E2 = e25.errorPath, C3 = h2 || m2.length >= e25.opts.loopRequired, S3 = e25.opts.ownProperties;
    if (l2) if (n2 += " var missing" + a2 + "; ", C3) {
      h2 || (n2 += " var " + d2 + " = validate.schema" + u2 + "; ");
      var k2 = "' + " + (T2 = "schema" + a2 + "[" + (A2 = "i" + a2) + "]") + " + '";
      e25.opts._errorDataPathProperty && (e25.errorPath = e25.util.getPathExpr(E2, T2, e25.opts.jsonPointers)), n2 += " var " + f2 + " = true; ", h2 && (n2 += " if (schema" + a2 + " === undefined) " + f2 + " = true; else if (!Array.isArray(schema" + a2 + ")) " + f2 + " = false; else {"), n2 += " for (var " + A2 + " = 0; " + A2 + " < " + d2 + ".length; " + A2 + "++) { " + f2 + " = " + p2 + "[" + d2 + "[" + A2 + "]] !== undefined ", S3 && (n2 += " &&   Object.prototype.hasOwnProperty.call(" + p2 + ", " + d2 + "[" + A2 + "]) "), n2 += "; if (!" + f2 + ") break; } ", h2 && (n2 += "  }  "), n2 += "  if (!" + f2 + ") {   ", (_2 = _2 || []).push(n2), n2 = "", false !== e25.createErrors ? (n2 += " { keyword: 'required' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { missingProperty: '" + k2 + "' } ", false !== e25.opts.messages && (n2 += " , message: '", e25.opts._errorDataPathProperty ? n2 += "is a required property" : n2 += "should have required property \\'" + k2 + "\\'", n2 += "' "), e25.opts.verbose && (n2 += " , schema: validate.schema" + u2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), n2 += " } ") : n2 += " {} ";
      var D2 = n2;
      n2 = _2.pop(), !e25.compositeRule && l2 ? e25.async ? n2 += " throw new ValidationError([" + D2 + "]); " : n2 += " validate.errors = [" + D2 + "]; return false; " : n2 += " var err = " + D2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n2 += " } else { ";
    } else {
      n2 += " if ( ";
      var F2 = m2;
      if (F2) for (var A2 = -1, w2 = F2.length - 1; A2 < w2; ) {
        I2 = F2[A2 += 1], A2 && (n2 += " || "), n2 += " ( ( " + (N2 = p2 + (L2 = e25.util.getProperty(I2))) + " === undefined ", S3 && (n2 += " || ! Object.prototype.hasOwnProperty.call(" + p2 + ", '" + e25.util.escapeQuotes(I2) + "') "), n2 += ") && (missing" + a2 + " = " + e25.util.toQuotedString(e25.opts.jsonPointers ? I2 : L2) + ") ) ";
      }
      n2 += ") {  ";
      var _2;
      k2 = "' + " + (T2 = "missing" + a2) + " + '";
      e25.opts._errorDataPathProperty && (e25.errorPath = e25.opts.jsonPointers ? e25.util.getPathExpr(E2, T2, true) : E2 + " + " + T2), (_2 = _2 || []).push(n2), n2 = "", false !== e25.createErrors ? (n2 += " { keyword: 'required' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { missingProperty: '" + k2 + "' } ", false !== e25.opts.messages && (n2 += " , message: '", e25.opts._errorDataPathProperty ? n2 += "is a required property" : n2 += "should have required property \\'" + k2 + "\\'", n2 += "' "), e25.opts.verbose && (n2 += " , schema: validate.schema" + u2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), n2 += " } ") : n2 += " {} ";
      D2 = n2;
      n2 = _2.pop(), !e25.compositeRule && l2 ? e25.async ? n2 += " throw new ValidationError([" + D2 + "]); " : n2 += " validate.errors = [" + D2 + "]; return false; " : n2 += " var err = " + D2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n2 += " } else { ";
    }
    else if (C3) {
      h2 || (n2 += " var " + d2 + " = validate.schema" + u2 + "; ");
      var T2;
      k2 = "' + " + (T2 = "schema" + a2 + "[" + (A2 = "i" + a2) + "]") + " + '";
      e25.opts._errorDataPathProperty && (e25.errorPath = e25.util.getPathExpr(E2, T2, e25.opts.jsonPointers)), h2 && (n2 += " if (" + d2 + " && !Array.isArray(" + d2 + ")) {  var err =   ", false !== e25.createErrors ? (n2 += " { keyword: 'required' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { missingProperty: '" + k2 + "' } ", false !== e25.opts.messages && (n2 += " , message: '", e25.opts._errorDataPathProperty ? n2 += "is a required property" : n2 += "should have required property \\'" + k2 + "\\'", n2 += "' "), e25.opts.verbose && (n2 += " , schema: validate.schema" + u2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), n2 += " } ") : n2 += " {} ", n2 += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (" + d2 + " !== undefined) { "), n2 += " for (var " + A2 + " = 0; " + A2 + " < " + d2 + ".length; " + A2 + "++) { if (" + p2 + "[" + d2 + "[" + A2 + "]] === undefined ", S3 && (n2 += " || ! Object.prototype.hasOwnProperty.call(" + p2 + ", " + d2 + "[" + A2 + "]) "), n2 += ") {  var err =   ", false !== e25.createErrors ? (n2 += " { keyword: 'required' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { missingProperty: '" + k2 + "' } ", false !== e25.opts.messages && (n2 += " , message: '", e25.opts._errorDataPathProperty ? n2 += "is a required property" : n2 += "should have required property \\'" + k2 + "\\'", n2 += "' "), e25.opts.verbose && (n2 += " , schema: validate.schema" + u2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), n2 += " } ") : n2 += " {} ", n2 += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ", h2 && (n2 += "  }  ");
    } else {
      var P2 = m2;
      if (P2) for (var I2, B2 = -1, O2 = P2.length - 1; B2 < O2; ) {
        I2 = P2[B2 += 1];
        var L2 = e25.util.getProperty(I2), N2 = (k2 = e25.util.escapeQuotes(I2), p2 + L2);
        e25.opts._errorDataPathProperty && (e25.errorPath = e25.util.getPath(E2, I2, e25.opts.jsonPointers)), n2 += " if ( " + N2 + " === undefined ", S3 && (n2 += " || ! Object.prototype.hasOwnProperty.call(" + p2 + ", '" + e25.util.escapeQuotes(I2) + "') "), n2 += ") {  var err =   ", false !== e25.createErrors ? (n2 += " { keyword: 'required' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { missingProperty: '" + k2 + "' } ", false !== e25.opts.messages && (n2 += " , message: '", e25.opts._errorDataPathProperty ? n2 += "is a required property" : n2 += "should have required property \\'" + k2 + "\\'", n2 += "' "), e25.opts.verbose && (n2 += " , schema: validate.schema" + u2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), n2 += " } ") : n2 += " {} ", n2 += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ";
      }
    }
    e25.errorPath = E2;
  } else l2 && (n2 += " if (true) {");
  return n2;
}, uniqueItems: function(e25, t3, r2) {
  var n2, i2 = " ", a2 = e25.level, o2 = e25.dataLevel, s2 = e25.schema[t3], u2 = e25.schemaPath + e25.util.getProperty(t3), c2 = e25.errSchemaPath + "/" + t3, l2 = !e25.opts.allErrors, p2 = "data" + (o2 || ""), f2 = "valid" + a2, h2 = e25.opts.$data && s2 && s2.$data;
  if (h2 ? (i2 += " var schema" + a2 + " = " + e25.util.getData(s2.$data, o2, e25.dataPathArr) + "; ", n2 = "schema" + a2) : n2 = s2, (s2 || h2) && false !== e25.opts.uniqueItems) {
    h2 && (i2 += " var " + f2 + "; if (" + n2 + " === false || " + n2 + " === undefined) " + f2 + " = true; else if (typeof " + n2 + " != 'boolean') " + f2 + " = false; else { "), i2 += " var i = " + p2 + ".length , " + f2 + " = true , j; if (i > 1) { ";
    var d2 = e25.schema.items && e25.schema.items.type, m2 = Array.isArray(d2);
    if (!d2 || "object" == d2 || "array" == d2 || m2 && (d2.indexOf("object") >= 0 || d2.indexOf("array") >= 0)) i2 += " outer: for (;i--;) { for (j = i; j--;) { if (equal(" + p2 + "[i], " + p2 + "[j])) { " + f2 + " = false; break outer; } } } ";
    else {
      i2 += " var itemIndices = {}, item; for (;i--;) { var item = " + p2 + "[i]; ";
      var g2 = "checkDataType" + (m2 ? "s" : "");
      i2 += " if (" + e25.util[g2](d2, "item", true) + ") continue; ", m2 && (i2 += ` if (typeof item == 'string') item = '"' + item; `), i2 += " if (typeof itemIndices[item] == 'number') { " + f2 + " = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ";
    }
    i2 += " } ", h2 && (i2 += "  }  "), i2 += " if (!" + f2 + ") {   ";
    var y2 = y2 || [];
    y2.push(i2), i2 = "", false !== e25.createErrors ? (i2 += " { keyword: 'uniqueItems' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(c2) + " , params: { i: i, j: j } ", false !== e25.opts.messages && (i2 += " , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' "), e25.opts.verbose && (i2 += " , schema:  ", i2 += h2 ? "validate.schema" + u2 : "" + s2, i2 += "         , parentSchema: validate.schema" + e25.schemaPath + " , data: " + p2 + " "), i2 += " } ") : i2 += " {} ";
    var v2 = i2;
    i2 = y2.pop(), !e25.compositeRule && l2 ? e25.async ? i2 += " throw new ValidationError([" + v2 + "]); " : i2 += " validate.errors = [" + v2 + "]; return false; " : i2 += " var err = " + v2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", i2 += " } ", l2 && (i2 += " else { ");
  } else l2 && (i2 += " if (true) { ");
  return i2;
}, validate: Sv };
var ox = Iy.toHash;
var sx = function() {
  var e25 = [{ type: "number", rules: [{ maximum: ["exclusiveMaximum"] }, { minimum: ["exclusiveMinimum"] }, "multipleOf", "format"] }, { type: "string", rules: ["maxLength", "minLength", "pattern", "format"] }, { type: "array", rules: ["maxItems", "minItems", "items", "contains", "uniqueItems"] }, { type: "object", rules: ["maxProperties", "minProperties", "required", "dependencies", "propertyNames", { properties: ["additionalProperties", "patternProperties"] }] }, { rules: ["$ref", "const", "enum", "not", "anyOf", "oneOf", "allOf", "if"] }], t3 = ["type", "$comment"];
  return e25.all = ox(t3), e25.types = ox(["number", "integer", "string", "array", "object", "boolean", "null"]), e25.forEach(function(r2) {
    r2.rules = r2.rules.map(function(r3) {
      var n2;
      if ("object" == i(r3)) {
        var a2 = Object.keys(r3)[0];
        n2 = r3[a2], r3 = a2, n2.forEach(function(r4) {
          t3.push(r4), e25.all[r4] = true;
        });
      }
      return t3.push(r3), e25.all[r3] = { keyword: r3, code: ax[r3], implements: n2 };
    }), e25.all.$comment = { keyword: "$comment", code: ax.$comment }, r2.type && (e25.types[r2.type] = r2);
  }), e25.keywords = ox(t3.concat(["$schema", "$id", "id", "$data", "$async", "title", "description", "default", "definitions", "examples", "readOnly", "writeOnly", "contentMediaType", "contentEncoding", "additionalItems", "then", "else"])), e25.custom = {}, e25;
};
var ux = ["multipleOf", "maximum", "exclusiveMaximum", "minimum", "exclusiveMinimum", "maxLength", "minLength", "pattern", "additionalItems", "maxItems", "minItems", "uniqueItems", "maxProperties", "minProperties", "required", "additionalProperties", "enum", "format", "const"];
var cx = function(e25, t3) {
  for (var r2 = 0; r2 < t3.length; r2++) {
    e25 = JSON.parse(JSON.stringify(e25));
    var n2, i2 = t3[r2].split("/"), a2 = e25;
    for (n2 = 1; n2 < i2.length; n2++) a2 = a2[i2[n2]];
    for (n2 = 0; n2 < ux.length; n2++) {
      var o2 = ux[n2], s2 = a2[o2];
      s2 && (a2[o2] = { anyOf: [s2, { $ref: "https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#" }] });
    }
  }
  return e25;
};
var lx = xv.MissingRef;
var px = function e23(t3, r2, n2) {
  var i2 = this;
  if ("function" != typeof this._opts.loadSchema) throw new Error("options.loadSchema should be a function");
  "function" == typeof r2 && (n2 = r2, r2 = void 0);
  var a2 = o2(t3).then(function() {
    var e25 = i2._addSchema(t3, void 0, r2);
    return e25.validate || function e26(t4) {
      try {
        return i2._compile(t4);
      } catch (n3) {
        if (n3 instanceof lx) return function(n4) {
          var a3 = n4.missingSchema;
          if (c2(a3)) throw new Error("Schema " + a3 + " is loaded but " + n4.missingRef + " cannot be resolved");
          var s2 = i2._loadingSchemas[a3];
          s2 || (s2 = i2._loadingSchemas[a3] = i2._opts.loadSchema(a3)).then(u2, u2);
          return s2.then(function(e27) {
            if (!c2(a3)) return o2(e27).then(function() {
              c2(a3) || i2.addSchema(e27, a3, void 0, r2);
            });
          }).then(function() {
            return e26(t4);
          });
          function u2() {
            delete i2._loadingSchemas[a3];
          }
          function c2(e27) {
            return i2._refs[e27] || i2._schemas[e27];
          }
        }(n3);
        throw n3;
      }
    }(e25);
  });
  n2 && a2.then(function(e25) {
    n2(null, e25);
  }, n2);
  return a2;
  function o2(t4) {
    var r3 = t4.$schema;
    return r3 && !i2.getSchema(r3) ? e23.call(i2, { $ref: r3 }, true) : Promise.resolve();
  }
};
var fx = function(e25, t3, r2) {
  var n2, i2, a2 = " ", o2 = e25.level, s2 = e25.dataLevel, u2 = e25.schema[t3], c2 = e25.schemaPath + e25.util.getProperty(t3), l2 = e25.errSchemaPath + "/" + t3, p2 = !e25.opts.allErrors, f2 = "data" + (s2 || ""), h2 = "valid" + o2, d2 = "errs__" + o2, m2 = e25.opts.$data && u2 && u2.$data;
  m2 ? (a2 += " var schema" + o2 + " = " + e25.util.getData(u2.$data, s2, e25.dataPathArr) + "; ", i2 = "schema" + o2) : i2 = u2;
  var g2, y2, v2, x2, b2, E2 = "definition" + o2, C3 = this.definition, S3 = "";
  if (m2 && C3.$data) {
    b2 = "keywordValidate" + o2;
    var k2 = C3.validateSchema;
    a2 += " var " + E2 + " = RULES.custom['" + t3 + "'].definition; var " + b2 + " = " + E2 + ".validate;";
  } else {
    if (!(x2 = e25.useCustomRule(this, u2, e25.schema, e25))) return;
    i2 = "validate.schema" + c2, b2 = x2.code, g2 = C3.compile, y2 = C3.inline, v2 = C3.macro;
  }
  var D2 = b2 + ".errors", F2 = "i" + o2, A2 = "ruleErr" + o2, w2 = C3.async;
  if (w2 && !e25.async) throw new Error("async keyword in sync schema");
  if (y2 || v2 || (a2 += D2 + " = null;"), a2 += "var " + d2 + " = errors;var " + h2 + ";", m2 && C3.$data && (S3 += "}", a2 += " if (" + i2 + " === undefined) { " + h2 + " = true; } else { ", k2 && (S3 += "}", a2 += " " + h2 + " = " + E2 + ".validateSchema(" + i2 + "); if (" + h2 + ") { ")), y2) C3.statements ? a2 += " " + x2.validate + " " : a2 += " " + h2 + " = " + x2.validate + "; ";
  else if (v2) {
    var _2 = e25.util.copy(e25);
    S3 = "";
    _2.level++;
    var T2 = "valid" + _2.level;
    _2.schema = x2.validate, _2.schemaPath = "";
    var P2 = e25.compositeRule;
    e25.compositeRule = _2.compositeRule = true;
    var I2 = e25.validate(_2).replace(/validate\.schema/g, b2);
    e25.compositeRule = _2.compositeRule = P2, a2 += " " + I2;
  } else {
    (N2 = N2 || []).push(a2), a2 = "", a2 += "  " + b2 + ".call( ", e25.opts.passContext ? a2 += "this" : a2 += "self", g2 || false === C3.schema ? a2 += " , " + f2 + " " : a2 += " , " + i2 + " , " + f2 + " , validate.schema" + e25.schemaPath + " ", a2 += " , (dataPath || '')", '""' != e25.errorPath && (a2 += " + " + e25.errorPath);
    var B2 = s2 ? "data" + (s2 - 1 || "") : "parentData", O2 = s2 ? e25.dataPathArr[s2] : "parentDataProperty", L2 = a2 += " , " + B2 + " , " + O2 + " , rootData )  ";
    a2 = N2.pop(), false === C3.errors ? (a2 += " " + h2 + " = ", w2 && (a2 += "await "), a2 += L2 + "; ") : a2 += w2 ? " var " + (D2 = "customErrors" + o2) + " = null; try { " + h2 + " = await " + L2 + "; } catch (e) { " + h2 + " = false; if (e instanceof ValidationError) " + D2 + " = e.errors; else throw e; } " : " " + D2 + " = null; " + h2 + " = " + L2 + "; ";
  }
  if (C3.modifying && (a2 += " if (" + B2 + ") " + f2 + " = " + B2 + "[" + O2 + "];"), a2 += "" + S3, C3.valid) p2 && (a2 += " if (true) { ");
  else {
    var N2;
    a2 += " if ( ", void 0 === C3.valid ? (a2 += " !", a2 += v2 ? "" + T2 : "" + h2) : a2 += " " + !C3.valid + " ", a2 += ") { ", n2 = this.keyword, (N2 = N2 || []).push(a2), a2 = "", (N2 = N2 || []).push(a2), a2 = "", false !== e25.createErrors ? (a2 += " { keyword: '" + (n2 || "custom") + "' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(l2) + " , params: { keyword: '" + this.keyword + "' } ", false !== e25.opts.messages && (a2 += ` , message: 'should pass "` + this.keyword + `" keyword validation' `), e25.opts.verbose && (a2 += " , schema: validate.schema" + c2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + f2 + " "), a2 += " } ") : a2 += " {} ";
    var j2 = a2;
    a2 = N2.pop(), !e25.compositeRule && p2 ? e25.async ? a2 += " throw new ValidationError([" + j2 + "]); " : a2 += " validate.errors = [" + j2 + "]; return false; " : a2 += " var err = " + j2 + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    var R2 = a2;
    a2 = N2.pop(), y2 ? C3.errors ? "full" != C3.errors && (a2 += "  for (var " + F2 + "=" + d2 + "; " + F2 + "<errors; " + F2 + "++) { var " + A2 + " = vErrors[" + F2 + "]; if (" + A2 + ".dataPath === undefined) " + A2 + ".dataPath = (dataPath || '') + " + e25.errorPath + "; if (" + A2 + ".schemaPath === undefined) { " + A2 + '.schemaPath = "' + l2 + '"; } ', e25.opts.verbose && (a2 += " " + A2 + ".schema = " + i2 + "; " + A2 + ".data = " + f2 + "; "), a2 += " } ") : false === C3.errors ? a2 += " " + R2 + " " : (a2 += " if (" + d2 + " == errors) { " + R2 + " } else {  for (var " + F2 + "=" + d2 + "; " + F2 + "<errors; " + F2 + "++) { var " + A2 + " = vErrors[" + F2 + "]; if (" + A2 + ".dataPath === undefined) " + A2 + ".dataPath = (dataPath || '') + " + e25.errorPath + "; if (" + A2 + ".schemaPath === undefined) { " + A2 + '.schemaPath = "' + l2 + '"; } ', e25.opts.verbose && (a2 += " " + A2 + ".schema = " + i2 + "; " + A2 + ".data = " + f2 + "; "), a2 += " } } ") : v2 ? (a2 += "   var err =   ", false !== e25.createErrors ? (a2 += " { keyword: '" + (n2 || "custom") + "' , dataPath: (dataPath || '') + " + e25.errorPath + " , schemaPath: " + e25.util.toQuotedString(l2) + " , params: { keyword: '" + this.keyword + "' } ", false !== e25.opts.messages && (a2 += ` , message: 'should pass "` + this.keyword + `" keyword validation' `), e25.opts.verbose && (a2 += " , schema: validate.schema" + c2 + " , parentSchema: validate.schema" + e25.schemaPath + " , data: " + f2 + " "), a2 += " } ") : a2 += " {} ", a2 += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", !e25.compositeRule && p2 && (e25.async ? a2 += " throw new ValidationError(vErrors); " : a2 += " validate.errors = vErrors; return false; ")) : false === C3.errors ? a2 += " " + R2 + " " : (a2 += " if (Array.isArray(" + D2 + ")) { if (vErrors === null) vErrors = " + D2 + "; else vErrors = vErrors.concat(" + D2 + "); errors = vErrors.length;  for (var " + F2 + "=" + d2 + "; " + F2 + "<errors; " + F2 + "++) { var " + A2 + " = vErrors[" + F2 + "]; if (" + A2 + ".dataPath === undefined) " + A2 + ".dataPath = (dataPath || '') + " + e25.errorPath + ";  " + A2 + '.schemaPath = "' + l2 + '";  ', e25.opts.verbose && (a2 += " " + A2 + ".schema = " + i2 + "; " + A2 + ".data = " + f2 + "; "), a2 += " } } else { " + R2 + " } "), a2 += " } ", p2 && (a2 += " else { ");
  }
  return a2;
};
var hx = "http://json-schema.org/draft-07/schema#";
var dx = "http://json-schema.org/draft-07/schema#";
var mx = "Core schema meta-schema";
var gx = { schemaArray: { type: "array", minItems: 1, items: { $ref: "#" } }, nonNegativeInteger: { type: "integer", minimum: 0 }, nonNegativeIntegerDefault0: { allOf: [{ $ref: "#/definitions/nonNegativeInteger" }, { default: 0 }] }, simpleTypes: { enum: ["array", "boolean", "integer", "null", "number", "object", "string"] }, stringArray: { type: "array", items: { type: "string" }, uniqueItems: true, default: [] } };
var yx = ["object", "boolean"];
var vx = { $id: { type: "string", format: "uri-reference" }, $schema: { type: "string", format: "uri" }, $ref: { type: "string", format: "uri-reference" }, $comment: { type: "string" }, title: { type: "string" }, description: { type: "string" }, default: true, readOnly: { type: "boolean", default: false }, examples: { type: "array", items: true }, multipleOf: { type: "number", exclusiveMinimum: 0 }, maximum: { type: "number" }, exclusiveMaximum: { type: "number" }, minimum: { type: "number" }, exclusiveMinimum: { type: "number" }, maxLength: { $ref: "#/definitions/nonNegativeInteger" }, minLength: { $ref: "#/definitions/nonNegativeIntegerDefault0" }, pattern: { type: "string", format: "regex" }, additionalItems: { $ref: "#" }, items: { anyOf: [{ $ref: "#" }, { $ref: "#/definitions/schemaArray" }], default: true }, maxItems: { $ref: "#/definitions/nonNegativeInteger" }, minItems: { $ref: "#/definitions/nonNegativeIntegerDefault0" }, uniqueItems: { type: "boolean", default: false }, contains: { $ref: "#" }, maxProperties: { $ref: "#/definitions/nonNegativeInteger" }, minProperties: { $ref: "#/definitions/nonNegativeIntegerDefault0" }, required: { $ref: "#/definitions/stringArray" }, additionalProperties: { $ref: "#" }, definitions: { type: "object", additionalProperties: { $ref: "#" }, default: {} }, properties: { type: "object", additionalProperties: { $ref: "#" }, default: {} }, patternProperties: { type: "object", additionalProperties: { $ref: "#" }, propertyNames: { format: "regex" }, default: {} }, dependencies: { type: "object", additionalProperties: { anyOf: [{ $ref: "#" }, { $ref: "#/definitions/stringArray" }] } }, propertyNames: { $ref: "#" }, const: true, enum: { type: "array", items: true, minItems: 1, uniqueItems: true }, type: { anyOf: [{ $ref: "#/definitions/simpleTypes" }, { type: "array", items: { $ref: "#/definitions/simpleTypes" }, minItems: 1, uniqueItems: true }] }, format: { type: "string" }, contentMediaType: { type: "string" }, contentEncoding: { type: "string" }, if: { $ref: "#" }, then: { $ref: "#" }, else: { $ref: "#" }, allOf: { $ref: "#/definitions/schemaArray" }, anyOf: { $ref: "#/definitions/schemaArray" }, oneOf: { $ref: "#/definitions/schemaArray" }, not: { $ref: "#" } };
var xx = { $schema: hx, $id: dx, title: mx, definitions: gx, type: yx, properties: vx, default: true };
var bx = n(Object.freeze({ __proto__: null, $schema: hx, $id: dx, title: mx, definitions: gx, type: yx, properties: vx, default: xx }));
var Ex = { $id: "https://github.com/epoberezkin/ajv/blob/master/lib/definition_schema.js", definitions: { simpleTypes: bx.definitions.simpleTypes }, type: "object", dependencies: { schema: ["validate"], $data: ["validate"], statements: ["inline"], valid: { not: { required: ["macro"] } } }, properties: { type: bx.properties.type, schema: { type: "boolean" }, statements: { type: "boolean" }, dependencies: { type: "array", items: { type: "string" } }, metaSchema: { type: "object" }, modifying: { type: "boolean" }, valid: { type: "boolean" }, $data: { type: "boolean" }, async: { type: "boolean" }, errors: { anyOf: [{ type: "boolean" }, { const: "full" }] } } };
var Cx = /^[a-z_$][a-z0-9_$-]*$/i;
var Sx = function(e25, t3) {
  var r2 = this.RULES;
  if (r2.keywords[e25]) throw new Error("Keyword " + e25 + " is already defined");
  if (!Cx.test(e25)) throw new Error("Keyword " + e25 + " is not a valid identifier");
  if (t3) {
    this.validateKeyword(t3, true);
    var n2 = t3.type;
    if (Array.isArray(n2)) for (var i2 = 0; i2 < n2.length; i2++) o2(e25, n2[i2], t3);
    else o2(e25, n2, t3);
    var a2 = t3.metaSchema;
    a2 && (t3.$data && this._opts.$data && (a2 = { anyOf: [a2, { $ref: "https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#" }] }), t3.validateSchema = this.compile(a2, true));
  }
  function o2(e26, t4, n3) {
    for (var i3, a3 = 0; a3 < r2.length; a3++) {
      var o3 = r2[a3];
      if (o3.type == t4) {
        i3 = o3;
        break;
      }
    }
    i3 || (i3 = { type: t4, rules: [] }, r2.push(i3));
    var s2 = { keyword: e26, definition: n3, custom: true, code: fx, implements: n3.implements };
    i3.rules.push(s2), r2.custom[e26] = s2;
  }
  return r2.keywords[e25] = r2.all[e25] = true, this;
};
var kx = function(e25) {
  var t3 = this.RULES.custom[e25];
  return t3 ? t3.definition : this.RULES.keywords[e25] || false;
};
var Dx = function(e25) {
  var t3 = this.RULES;
  delete t3.keywords[e25], delete t3.all[e25], delete t3.custom[e25];
  for (var r2 = 0; r2 < t3.length; r2++) for (var n2 = t3[r2].rules, i2 = 0; i2 < n2.length; i2++) if (n2[i2].keyword == e25) {
    n2.splice(i2, 1);
    break;
  }
  return this;
};
var Fx = function e24(t3, r2) {
  e24.errors = null;
  var n2 = this._validateKeyword = this._validateKeyword || this.compile(Ex, true);
  if (n2(t3)) return true;
  if (e24.errors = n2.errors, r2) throw new Error("custom keyword definition is invalid: " + this.errorsText(n2.errors));
  return false;
};
var Ax = "http://json-schema.org/draft-07/schema#";
var wx = "https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#";
var _x = "Meta-schema for $data reference (JSON Schema extension proposal)";
var Tx = ["$data"];
var Px = { $data: { type: "string", anyOf: [{ format: "relative-json-pointer" }, { format: "json-pointer" }] } };
var Ix = { $schema: Ax, $id: wx, description: _x, type: "object", required: Tx, properties: Px, additionalProperties: false };
var Bx = n(Object.freeze({ __proto__: null, $schema: Ax, $id: wx, description: _x, type: "object", required: Tx, properties: Px, additionalProperties: false, default: Ix }));
var Ox = Rx;
Rx.prototype.validate = function(e25, t3) {
  var r2;
  if ("string" == typeof e25) {
    if (!(r2 = this.getSchema(e25))) throw new Error('no schema with key or ref "' + e25 + '"');
  } else {
    var n2 = this._addSchema(e25);
    r2 = n2.validate || this._compile(n2);
  }
  var i2 = r2(t3);
  true !== r2.$async && (this.errors = r2.errors);
  return i2;
}, Rx.prototype.compile = function(e25, t3) {
  var r2 = this._addSchema(e25, void 0, t3);
  return r2.validate || this._compile(r2);
}, Rx.prototype.addSchema = function(e25, t3, r2, n2) {
  if (Array.isArray(e25)) {
    for (var i2 = 0; i2 < e25.length; i2++) this.addSchema(e25[i2], void 0, r2, n2);
    return this;
  }
  var a2 = this._getId(e25);
  if (void 0 !== a2 && "string" != typeof a2) throw new Error("schema id must be string");
  return $x(this, t3 = ov.normalizeId(t3 || a2)), this._schemas[t3] = this._addSchema(e25, r2, n2, true), this;
}, Rx.prototype.addMetaSchema = function(e25, t3, r2) {
  return this.addSchema(e25, t3, r2, true), this;
}, Rx.prototype.validateSchema = function(e25, t3) {
  var r2 = e25.$schema;
  if (void 0 !== r2 && "string" != typeof r2) throw new Error("$schema must be a string");
  if (!(r2 = r2 || this._opts.defaultMeta || function(e26) {
    var t4 = e26._opts.meta;
    return e26._opts.defaultMeta = "object" == i(t4) ? e26._getId(t4) || t4 : e26.getSchema(Lx) ? Lx : void 0, e26._opts.defaultMeta;
  }(this))) return this.logger.warn("meta-schema not available"), this.errors = null, true;
  var n2 = this.validate(r2, e25);
  if (!n2 && t3) {
    var a2 = "schema is invalid: " + this.errorsText();
    if ("log" != this._opts.validateSchema) throw new Error(a2);
    this.logger.error(a2);
  }
  return n2;
}, Rx.prototype.getSchema = function(e25) {
  var t3 = Mx(this, e25);
  switch (i(t3)) {
    case "object":
      return t3.validate || this._compile(t3);
    case "string":
      return this.getSchema(t3);
    case "undefined":
      return function(e26, t4) {
        var r2 = ov.schema.call(e26, { schema: {} }, t4);
        if (r2) {
          var n2 = r2.schema, i2 = r2.root, a2 = r2.baseId, o2 = Fv.call(e26, n2, i2, void 0, a2);
          return e26._fragments[t4] = new iv({ ref: t4, fragment: true, schema: n2, root: i2, baseId: a2, validate: o2 }), o2;
        }
      }(this, e25);
  }
}, Rx.prototype.removeSchema = function(e25) {
  if (e25 instanceof RegExp) return Vx(this, this._schemas, e25), Vx(this, this._refs, e25), this;
  switch (i(e25)) {
    case "undefined":
      return Vx(this, this._schemas), Vx(this, this._refs), this._cache.clear(), this;
    case "string":
      var t3 = Mx(this, e25);
      return t3 && this._cache.del(t3.cacheKey), delete this._schemas[e25], delete this._refs[e25], this;
    case "object":
      var r2 = this._opts.serialize, n2 = r2 ? r2(e25) : e25;
      this._cache.del(n2);
      var a2 = this._getId(e25);
      a2 && (a2 = ov.normalizeId(a2), delete this._schemas[a2], delete this._refs[a2]);
  }
  return this;
}, Rx.prototype.addFormat = function(e25, t3) {
  "string" == typeof t3 && (t3 = new RegExp(t3));
  return this._formats[e25] = t3, this;
}, Rx.prototype.errorsText = function(e25, t3) {
  if (!(e25 = e25 || this.errors)) return "No errors";
  for (var r2 = void 0 === (t3 = t3 || {}).separator ? ", " : t3.separator, n2 = void 0 === t3.dataVar ? "data" : t3.dataVar, i2 = "", a2 = 0; a2 < e25.length; a2++) {
    var o2 = e25[a2];
    o2 && (i2 += n2 + o2.dataPath + " " + o2.message + r2);
  }
  return i2.slice(0, -r2.length);
}, Rx.prototype._addSchema = function(e25, t3, r2, n2) {
  if ("object" != i(e25) && "boolean" != typeof e25) throw new Error("schema should be object or boolean");
  var a2 = this._opts.serialize, o2 = a2 ? a2(e25) : e25, s2 = this._cache.get(o2);
  if (s2) return s2;
  n2 = n2 || false !== this._opts.addUsedSchema;
  var u2 = ov.normalizeId(this._getId(e25));
  u2 && n2 && $x(this, u2);
  var c2, l2 = false !== this._opts.validateSchema && !t3;
  l2 && !(c2 = u2 && u2 == ov.normalizeId(e25.$schema)) && this.validateSchema(e25, true);
  var p2 = ov.ids.call(this, e25), f2 = new iv({ id: u2, schema: e25, localRefs: p2, cacheKey: o2, meta: r2 });
  "#" != u2[0] && n2 && (this._refs[u2] = f2);
  this._cache.put(o2, f2), l2 && c2 && this.validateSchema(e25, true);
  return f2;
}, Rx.prototype._compile = function(e25, t3) {
  if (e25.compiling) return e25.validate = i2, i2.schema = e25.schema, i2.errors = null, i2.root = t3 || i2, true === e25.schema.$async && (i2.$async = true), i2;
  var r2, n2;
  e25.compiling = true, e25.meta && (r2 = this._opts, this._opts = this._metaOpts);
  try {
    n2 = Fv.call(this, e25.schema, t3, e25.localRefs);
  } catch (t4) {
    throw delete e25.validate, t4;
  } finally {
    e25.compiling = false, e25.meta && (this._opts = r2);
  }
  return e25.validate = n2, e25.refs = n2.refs, e25.refVal = n2.refVal, e25.root = n2.root, n2;
  function i2() {
    var t4 = e25.validate, r3 = t4.apply(this, arguments);
    return i2.errors = t4.errors, r3;
  }
}, Rx.prototype.compileAsync = px, Rx.prototype.addKeyword = Sx, Rx.prototype.getKeyword = kx, Rx.prototype.removeKeyword = Dx, Rx.prototype.validateKeyword = Fx, Rx.ValidationError = xv.Validation, Rx.MissingRefError = xv.MissingRef, Rx.$dataMetaSchema = cx;
var Lx = "http://json-schema.org/draft-07/schema";
var Nx = ["removeAdditional", "useDefaults", "coerceTypes", "strictDefaults"];
var jx = ["/properties"];
function Rx(e25) {
  if (!(this instanceof Rx)) return new Rx(e25);
  e25 = this._opts = Iy.copy(e25) || {}, function(e26) {
    var t3 = e26._opts.logger;
    if (false === t3) e26.logger = { log: Gx, warn: Gx, error: Gx };
    else {
      if (void 0 === t3 && (t3 = console), !("object" == i(t3) && t3.log && t3.warn && t3.error)) throw new Error("logger must implement log, warn and error methods");
      e26.logger = t3;
    }
  }(this), this._schemas = {}, this._refs = {}, this._fragments = {}, this._formats = Hv(e25.format), this._cache = e25.cache || new Lv(), this._loadingSchemas = {}, this._compilations = [], this.RULES = sx(), this._getId = function(e26) {
    switch (e26.schemaId) {
      case "auto":
        return Wx;
      case "id":
        return Ux;
      default:
        return qx;
    }
  }(e25), e25.loopRequired = e25.loopRequired || 1 / 0, "property" == e25.errorDataPath && (e25._errorDataPathProperty = true), void 0 === e25.serialize && (e25.serialize = Cv), this._metaOpts = function(e26) {
    for (var t3 = Iy.copy(e26._opts), r2 = 0; r2 < Nx.length; r2++) delete t3[Nx[r2]];
    return t3;
  }(this), e25.formats && function(e26) {
    for (var t3 in e26._opts.formats) {
      var r2 = e26._opts.formats[t3];
      e26.addFormat(t3, r2);
    }
  }(this), function(e26) {
    var t3;
    e26._opts.$data && (t3 = Bx, e26.addMetaSchema(t3, t3.$id, true));
    if (false === e26._opts.meta) return;
    var r2 = bx;
    e26._opts.$data && (r2 = cx(r2, jx));
    e26.addMetaSchema(r2, Lx, true), e26._refs["http://json-schema.org/schema"] = Lx;
  }(this), "object" == i(e25.meta) && this.addMetaSchema(e25.meta), e25.nullable && this.addKeyword("nullable", { metaSchema: { type: "boolean" } }), function(e26) {
    var t3 = e26._opts.schemas;
    if (!t3) return;
    if (Array.isArray(t3)) e26.addSchema(t3);
    else for (var r2 in t3) e26.addSchema(t3[r2], r2);
  }(this);
}
function Mx(e25, t3) {
  return t3 = ov.normalizeId(t3), e25._schemas[t3] || e25._refs[t3] || e25._fragments[t3];
}
function Vx(e25, t3, r2) {
  for (var n2 in t3) {
    var i2 = t3[n2];
    i2.meta || r2 && !r2.test(n2) || (e25._cache.del(i2.cacheKey), delete t3[n2]);
  }
}
function Ux(e25) {
  return e25.$id && this.logger.warn("schema $id ignored", e25.$id), e25.id;
}
function qx(e25) {
  return e25.id && this.logger.warn("schema id ignored", e25.id), e25.$id;
}
function Wx(e25) {
  if (e25.$id && e25.id && e25.$id != e25.id) throw new Error("schema $id is different from id");
  return e25.$id || e25.id;
}
function $x(e25, t3) {
  if (e25._schemas[t3] || e25._refs[t3]) throw new Error('schema with key or id "' + t3 + '" already exists');
}
function Gx() {
}
var zx;
var Hx = "http://json-schema.org/draft-04/schema#";
var Kx = "http://json-schema.org/draft-04/schema#";
var Jx = { schemaArray: { type: "array", minItems: 1, items: { $ref: "#" } }, positiveInteger: { type: "integer", minimum: 0 }, positiveIntegerDefault0: { allOf: [{ $ref: "#/definitions/positiveInteger" }, { default: 0 }] }, simpleTypes: { enum: ["array", "boolean", "integer", "null", "number", "object", "string"] }, stringArray: { type: "array", items: { type: "string" }, minItems: 1, uniqueItems: true } };
var Qx = { id: { type: "string" }, $schema: { type: "string" }, title: { type: "string" }, description: { type: "string" }, default: {}, multipleOf: { type: "number", minimum: 0, exclusiveMinimum: true }, maximum: { type: "number" }, exclusiveMaximum: { type: "boolean", default: false }, minimum: { type: "number" }, exclusiveMinimum: { type: "boolean", default: false }, maxLength: { $ref: "#/definitions/positiveInteger" }, minLength: { $ref: "#/definitions/positiveIntegerDefault0" }, pattern: { type: "string", format: "regex" }, additionalItems: { anyOf: [{ type: "boolean" }, { $ref: "#" }], default: {} }, items: { anyOf: [{ $ref: "#" }, { $ref: "#/definitions/schemaArray" }], default: {} }, maxItems: { $ref: "#/definitions/positiveInteger" }, minItems: { $ref: "#/definitions/positiveIntegerDefault0" }, uniqueItems: { type: "boolean", default: false }, maxProperties: { $ref: "#/definitions/positiveInteger" }, minProperties: { $ref: "#/definitions/positiveIntegerDefault0" }, required: { $ref: "#/definitions/stringArray" }, additionalProperties: { anyOf: [{ type: "boolean" }, { $ref: "#" }], default: {} }, definitions: { type: "object", additionalProperties: { $ref: "#" }, default: {} }, properties: { type: "object", additionalProperties: { $ref: "#" }, default: {} }, patternProperties: { type: "object", additionalProperties: { $ref: "#" }, default: {} }, dependencies: { type: "object", additionalProperties: { anyOf: [{ $ref: "#" }, { $ref: "#/definitions/stringArray" }] } }, enum: { type: "array", minItems: 1, uniqueItems: true }, type: { anyOf: [{ $ref: "#/definitions/simpleTypes" }, { type: "array", items: { $ref: "#/definitions/simpleTypes" }, minItems: 1, uniqueItems: true }] }, format: { type: "string" }, allOf: { $ref: "#/definitions/schemaArray" }, anyOf: { $ref: "#/definitions/schemaArray" }, oneOf: { $ref: "#/definitions/schemaArray" }, not: { $ref: "#" } };
var Xx = { exclusiveMaximum: ["maximum"], exclusiveMinimum: ["minimum"] };
var Yx = { id: Hx, $schema: Kx, description: "Core schema meta-schema", definitions: Jx, type: "object", properties: Qx, dependencies: Xx, default: {} };
var Zx = Object.freeze({ __proto__: null, id: Hx, $schema: Kx, description: "Core schema meta-schema", definitions: Jx, type: "object", properties: Qx, dependencies: Xx, default: Yx });
var eb = [].slice;
var tb = {}.toString;
zx = nb(function(e25, t3) {
  return e25.apply(null, t3);
});
var rb = { curry: function(e25) {
  return nb(e25);
}, flip: nb(function(e25, t3, r2) {
  return e25(r2, t3);
}), fix: function(e25) {
  return /* @__PURE__ */ function(t3) {
    return function() {
      return e25(t3(t3)).apply(null, arguments);
    };
  }(function(t3) {
    return function() {
      return e25(t3(t3)).apply(null, arguments);
    };
  });
}, apply: zx, over: nb(function(e25, t3, r2, n2) {
  return e25(t3(r2), t3(n2));
}), memoize: function(e25) {
  var t3;
  return t3 = {}, function() {
    var r2, n2, i2;
    return r2 = eb.call(arguments), n2 = function() {
      var e26, t4, n3, a2 = [];
      for (e26 = 0, n3 = (t4 = r2).length; e26 < n3; ++e26) i2 = t4[e26], a2.push(i2 + tb.call(i2).slice(8, -1));
      return a2;
    }().join(""), t3[n2] = n2 in t3 ? t3[n2] : e25.apply(null, r2);
  };
} };
function nb(e25, t3) {
  var r2;
  return function n2(i2) {
    return e25.length > 1 ? function() {
      var a2 = i2 ? i2.concat() : [];
      return r2 = t3 && r2 || this, a2.push.apply(a2, arguments) < e25.length && arguments.length ? n2.call(r2, a2) : e25.apply(r2, a2);
    } : e25;
  }();
}
var ib;
var ab;
var ob;
var sb;
var ub;
var cb;
var lb;
var pb;
var fb;
var hb;
var db;
var mb;
var gb;
var yb;
var vb;
var xb;
var bb;
var Eb;
var Cb;
var Sb;
var kb;
var Db;
var Fb;
var Ab;
var wb;
var _b;
var Tb;
var Pb;
var Ib;
var Bb;
var Ob;
var Lb;
var Nb;
var jb;
var Rb;
var Mb;
var Vb;
var Ub;
var qb;
var Wb;
var $b;
var Gb;
var zb;
var Hb;
var Kb;
var Jb;
var Qb;
var Xb;
var Yb;
var Zb;
var eE;
var tE;
var rE;
var nE;
var iE;
var aE;
var oE;
var sE;
var uE;
var cE;
var lE;
var pE;
var fE;
var hE;
var dE;
var mE;
var gE;
var yE;
var vE;
var xE = {}.toString;
var bE = [].slice;
ib = SE(function(e25, t3) {
  var r2, n2;
  for (r2 = 0, n2 = t3.length; r2 < n2; ++r2) e25(t3[r2]);
  return t3;
}), ab = SE(function(e25, t3) {
  var r2, n2, i2, a2 = [];
  for (r2 = 0, n2 = t3.length; r2 < n2; ++r2) i2 = t3[r2], a2.push(e25(i2));
  return a2;
}), ob = function(e25) {
  var t3, r2, n2, i2 = [];
  for (t3 = 0, r2 = e25.length; t3 < r2; ++t3) (n2 = e25[t3]) && i2.push(n2);
  return i2;
}, sb = SE(function(e25, t3) {
  var r2, n2, i2, a2 = [];
  for (r2 = 0, n2 = t3.length; r2 < n2; ++r2) e25(i2 = t3[r2]) && a2.push(i2);
  return a2;
}), ub = SE(function(e25, t3) {
  var r2, n2, i2, a2 = [];
  for (r2 = 0, n2 = t3.length; r2 < n2; ++r2) e25(i2 = t3[r2]) || a2.push(i2);
  return a2;
}), cb = SE(function(e25, t3) {
  var r2, n2, i2, a2, o2;
  for (r2 = [], n2 = [], i2 = 0, a2 = t3.length; i2 < a2; ++i2) (e25(o2 = t3[i2]) ? r2 : n2).push(o2);
  return [r2, n2];
}), lb = SE(function(e25, t3) {
  var r2, n2, i2;
  for (r2 = 0, n2 = t3.length; r2 < n2; ++r2) if (e25(i2 = t3[r2])) return i2;
}), pb = fb = function(e25) {
  return e25[0];
}, hb = function(e25) {
  if (e25.length) return e25.slice(1);
}, db = function(e25) {
  return e25[e25.length - 1];
}, mb = function(e25) {
  if (e25.length) return e25.slice(0, -1);
}, gb = function(e25) {
  return !e25.length;
}, yb = function(e25) {
  return e25.concat().reverse();
}, vb = function(e25) {
  var t3, r2, n2, i2;
  for (t3 = [], r2 = 0, n2 = e25.length; r2 < n2; ++r2) kE(i2 = e25[r2], t3) || t3.push(i2);
  return t3;
}, xb = SE(function(e25, t3) {
  var r2, n2, i2, a2, o2, s2 = [];
  for (r2 = [], n2 = 0, i2 = t3.length; n2 < i2; ++n2) kE(o2 = e25(a2 = t3[n2]), r2) || (r2.push(o2), s2.push(a2));
  return s2;
}), bb = Eb = SE(function(e25, t3, r2) {
  var n2, i2;
  for (n2 = 0, i2 = r2.length; n2 < i2; ++n2) t3 = e25(t3, r2[n2]);
  return t3;
}), Cb = Sb = SE(function(e25, t3) {
  return bb(e25, t3[0], t3.slice(1));
}), kb = SE(function(e25, t3, r2) {
  var n2;
  for (n2 = r2.length - 1; n2 >= 0; --n2) t3 = e25(r2[n2], t3);
  return t3;
}), Db = SE(function(e25, t3) {
  return kb(e25, t3[t3.length - 1], t3.slice(0, -1));
}), Fb = SE(function(e25, t3) {
  var r2, n2, i2;
  for (r2 = [], n2 = t3; null != (i2 = e25(n2)); ) r2.push(i2[0]), n2 = i2[1];
  return r2;
}), Ab = function(e25) {
  return [].concat.apply([], e25);
}, wb = SE(function(e25, t3) {
  var r2;
  return [].concat.apply([], function() {
    var n2, i2, a2, o2 = [];
    for (n2 = 0, a2 = (i2 = t3).length; n2 < a2; ++n2) r2 = i2[n2], o2.push(e25(r2));
    return o2;
  }());
}), _b = function(e25) {
  var t3;
  return [].concat.apply([], function() {
    var r2, n2, i2, a2 = [];
    for (r2 = 0, i2 = (n2 = e25).length; r2 < i2; ++r2) t3 = n2[r2], "Array" === xE.call(t3).slice(8, -1) ? a2.push(_b(t3)) : a2.push(t3);
    return a2;
  }());
}, Tb = function(e25) {
  var t3, r2, n2, i2, a2, o2, s2;
  t3 = bE.call(arguments, 1), r2 = [];
  e: for (n2 = 0, i2 = e25.length; n2 < i2; ++n2) {
    for (a2 = e25[n2], o2 = 0, s2 = t3.length; o2 < s2; ++o2) if (kE(a2, t3[o2])) continue e;
    r2.push(a2);
  }
  return r2;
}, Pb = function(e25) {
  var t3, r2, n2, i2, a2, o2, s2;
  t3 = bE.call(arguments, 1), r2 = [];
  e: for (n2 = 0, i2 = e25.length; n2 < i2; ++n2) {
    for (a2 = e25[n2], o2 = 0, s2 = t3.length; o2 < s2; ++o2) if (!kE(a2, t3[o2])) continue e;
    r2.push(a2);
  }
  return r2;
}, Ib = function() {
  var e25, t3, r2, n2, i2, a2, o2, s2;
  for (t3 = [], r2 = 0, n2 = (e25 = bE.call(arguments)).length; r2 < n2; ++r2) for (a2 = 0, o2 = (i2 = e25[r2]).length; a2 < o2; ++a2) kE(s2 = i2[a2], t3) || t3.push(s2);
  return t3;
}, Bb = SE(function(e25, t3) {
  var r2, n2, i2, a2;
  for (r2 = {}, n2 = 0, i2 = t3.length; n2 < i2; ++n2) (a2 = e25(t3[n2])) in r2 ? r2[a2] += 1 : r2[a2] = 1;
  return r2;
}), Ob = SE(function(e25, t3) {
  var r2, n2, i2, a2, o2;
  for (r2 = {}, n2 = 0, i2 = t3.length; n2 < i2; ++n2) (o2 = e25(a2 = t3[n2])) in r2 ? r2[o2].push(a2) : r2[o2] = [a2];
  return r2;
}), Lb = function(e25) {
  var t3, r2;
  for (t3 = 0, r2 = e25.length; t3 < r2; ++t3) if (!e25[t3]) return false;
  return true;
}, Nb = function(e25) {
  var t3, r2;
  for (t3 = 0, r2 = e25.length; t3 < r2; ++t3) if (e25[t3]) return true;
  return false;
}, jb = SE(function(e25, t3) {
  var r2, n2;
  for (r2 = 0, n2 = t3.length; r2 < n2; ++r2) if (e25(t3[r2])) return true;
  return false;
}), Rb = SE(function(e25, t3) {
  var r2, n2;
  for (r2 = 0, n2 = t3.length; r2 < n2; ++r2) if (!e25(t3[r2])) return false;
  return true;
}), Mb = function(e25) {
  return e25.concat().sort(function(e26, t3) {
    return e26 > t3 ? 1 : e26 < t3 ? -1 : 0;
  });
}, Vb = SE(function(e25, t3) {
  return t3.concat().sort(e25);
}), Ub = SE(function(e25, t3) {
  return t3.concat().sort(function(t4, r2) {
    return e25(t4) > e25(r2) ? 1 : e25(t4) < e25(r2) ? -1 : 0;
  });
}), qb = function(e25) {
  var t3, r2, n2;
  for (t3 = 0, r2 = 0, n2 = e25.length; r2 < n2; ++r2) t3 += e25[r2];
  return t3;
}, Wb = function(e25) {
  var t3, r2, n2;
  for (t3 = 1, r2 = 0, n2 = e25.length; r2 < n2; ++r2) t3 *= e25[r2];
  return t3;
}, $b = Gb = function(e25) {
  var t3, r2, n2;
  for (t3 = 0, r2 = 0, n2 = e25.length; r2 < n2; ++r2) t3 += e25[r2];
  return t3 / e25.length;
}, zb = function(e25) {
  var t3, r2, n2, i2, a2;
  for (t3 = e25[0], r2 = 0, i2 = (n2 = e25.slice(1)).length; r2 < i2; ++r2) (a2 = n2[r2]) > t3 && (t3 = a2);
  return t3;
}, Hb = function(e25) {
  var t3, r2, n2, i2, a2;
  for (t3 = e25[0], r2 = 0, i2 = (n2 = e25.slice(1)).length; r2 < i2; ++r2) (a2 = n2[r2]) < t3 && (t3 = a2);
  return t3;
}, Kb = SE(function(e25, t3) {
  var r2, n2, i2, a2, o2;
  for (r2 = t3[0], n2 = 0, a2 = (i2 = t3.slice(1)).length; n2 < a2; ++n2) e25(o2 = i2[n2]) > e25(r2) && (r2 = o2);
  return r2;
}), Jb = SE(function(e25, t3) {
  var r2, n2, i2, a2, o2;
  for (r2 = t3[0], n2 = 0, a2 = (i2 = t3.slice(1)).length; n2 < a2; ++n2) e25(o2 = i2[n2]) < e25(r2) && (r2 = o2);
  return r2;
}), Qb = Xb = SE(function(e25, t3, r2) {
  var n2, i2;
  return n2 = t3, [t3].concat(function() {
    var t4, a2, o2, s2 = [];
    for (t4 = 0, o2 = (a2 = r2).length; t4 < o2; ++t4) i2 = a2[t4], s2.push(n2 = e25(n2, i2));
    return s2;
  }());
}), Yb = Zb = SE(function(e25, t3) {
  if (t3.length) return Qb(e25, t3[0], t3.slice(1));
}), eE = SE(function(e25, t3, r2) {
  return r2 = r2.concat().reverse(), Qb(e25, t3, r2).reverse();
}), tE = SE(function(e25, t3) {
  if (t3.length) return t3 = t3.concat().reverse(), Qb(e25, t3[0], t3.slice(1)).reverse();
}), rE = SE(function(e25, t3, r2) {
  return r2.slice(e25, t3);
}), nE = SE(function(e25, t3) {
  return e25 <= 0 ? t3.slice(0, 0) : t3.slice(0, e25);
}), iE = SE(function(e25, t3) {
  return e25 <= 0 ? t3 : t3.slice(e25);
}), aE = SE(function(e25, t3) {
  return [nE(e25, t3), iE(e25, t3)];
}), oE = SE(function(e25, t3) {
  var r2, n2;
  if (!(r2 = t3.length)) return t3;
  for (n2 = 0; n2 < r2 && e25(t3[n2]); ) n2 += 1;
  return t3.slice(0, n2);
}), sE = SE(function(e25, t3) {
  var r2, n2;
  if (!(r2 = t3.length)) return t3;
  for (n2 = 0; n2 < r2 && e25(t3[n2]); ) n2 += 1;
  return t3.slice(n2);
}), uE = SE(function(e25, t3) {
  return [oE(e25, t3), sE(e25, t3)];
}), cE = SE(function(e25, t3) {
  return uE(/* @__PURE__ */ function() {
    var e26 = arguments;
    return function() {
      var t4, r2;
      for (r2 = e26[0].apply(this, arguments), t4 = 1; t4 < e26.length; ++t4) r2 = e26[t4](r2);
      return r2;
    };
  }(e25, DE), t3);
}), lE = SE(function(e25, t3) {
  var r2, n2, i2, a2, o2, s2;
  for (r2 = [], n2 = t3.length, i2 = 0, a2 = e25.length; i2 < a2 && (o2 = i2, s2 = e25[i2], o2 !== n2); ++i2) r2.push([s2, t3[o2]]);
  return r2;
}), pE = SE(function(e25, t3, r2) {
  var n2, i2, a2, o2, s2, u2;
  for (n2 = [], i2 = r2.length, a2 = 0, o2 = t3.length; a2 < o2 && (s2 = a2, u2 = t3[a2], s2 !== i2); ++a2) n2.push(e25(u2, r2[s2]));
  return n2;
}), fE = function() {
  var e25, t3, r2, n2, i2, a2, o2, s2, u2, c2 = [];
  for (t3 = void 0, r2 = 0, n2 = (e25 = bE.call(arguments)).length; r2 < n2; ++r2) t3 <= (a2 = (i2 = e25[r2]).length) || (t3 = a2);
  for (r2 = 0; r2 < t3; ++r2) {
    for (o2 = r2, s2 = [], u2 = 0, n2 = e25.length; u2 < n2; ++u2) i2 = e25[u2], s2.push(i2[o2]);
    c2.push(s2);
  }
  return c2;
}, hE = function(e25) {
  var t3, r2, n2, i2, a2, o2, s2, u2 = [];
  for (r2 = void 0, n2 = 0, i2 = (t3 = bE.call(arguments, 1)).length; n2 < i2; ++n2) r2 <= (o2 = (a2 = t3[n2]).length) || (r2 = o2);
  for (n2 = 0; n2 < r2; ++n2) s2 = n2, u2.push(e25.apply(null, c2()));
  return u2;
  function c2() {
    var e26, r3, n3, i3 = [];
    for (e26 = 0, n3 = (r3 = t3).length; e26 < n3; ++e26) a2 = r3[e26], i3.push(a2[s2]);
    return i3;
  }
}, dE = SE(function(e25, t3) {
  return e25 < 0 ? t3[t3.length + e25] : t3[e25];
}), mE = SE(function(e25, t3) {
  var r2, n2, i2;
  for (r2 = 0, n2 = t3.length; r2 < n2; ++r2) if (i2 = r2, t3[r2] === e25) return i2;
}), gE = SE(function(e25, t3) {
  var r2, n2, i2, a2 = [];
  for (r2 = 0, n2 = t3.length; r2 < n2; ++r2) i2 = r2, t3[r2] === e25 && a2.push(i2);
  return a2;
}), yE = SE(function(e25, t3) {
  var r2, n2, i2;
  for (r2 = 0, n2 = t3.length; r2 < n2; ++r2) if (i2 = r2, e25(t3[r2])) return i2;
}), vE = SE(function(e25, t3) {
  var r2, n2, i2, a2 = [];
  for (r2 = 0, n2 = t3.length; r2 < n2; ++r2) i2 = r2, e25(t3[r2]) && a2.push(i2);
  return a2;
});
var EE;
var CE = { each: ib, map: ab, filter: sb, compact: ob, reject: ub, partition: cb, find: lb, head: pb, first: fb, tail: hb, last: db, initial: mb, empty: gb, reverse: yb, difference: Tb, intersection: Pb, union: Ib, countBy: Bb, groupBy: Ob, fold: bb, fold1: Cb, foldl: Eb, foldl1: Sb, foldr: kb, foldr1: Db, unfoldr: Fb, andList: Lb, orList: Nb, any: jb, all: Rb, unique: vb, uniqueBy: xb, sort: Mb, sortWith: Vb, sortBy: Ub, sum: qb, product: Wb, mean: $b, average: Gb, concat: Ab, concatMap: wb, flatten: _b, maximum: zb, minimum: Hb, maximumBy: Kb, minimumBy: Jb, scan: Qb, scan1: Yb, scanl: Xb, scanl1: Zb, scanr: eE, scanr1: tE, slice: rE, take: nE, drop: iE, splitAt: aE, takeWhile: oE, dropWhile: sE, span: uE, breakList: cE, zip: lE, zipWith: pE, zipAll: fE, zipAllWith: hE, at: dE, elemIndex: mE, elemIndices: gE, findIndex: yE, findIndices: vE };
function SE(e25, t3) {
  var r2;
  return function n2(i2) {
    return e25.length > 1 ? function() {
      var a2 = i2 ? i2.concat() : [];
      return r2 = t3 && r2 || this, a2.push.apply(a2, arguments) < e25.length && arguments.length ? n2.call(r2, a2) : e25.apply(r2, a2);
    } : e25;
  }();
}
function kE(e25, t3) {
  for (var r2 = -1, n2 = t3.length >>> 0; ++r2 < n2; ) if (e25 === t3[r2]) return true;
  return false;
}
function DE(e25) {
  return !e25;
}
EE = function(e25) {
  var t3, r2, n2 = {};
  for (t3 in e25) (r2 = e25[t3]) && (n2[t3] = r2);
  return n2;
};
var FE = { values: function(e25) {
  var t3, r2, n2 = [];
  for (t3 in e25) r2 = e25[t3], n2.push(r2);
  return n2;
}, keys: function(e25) {
  var t3, r2 = [];
  for (t3 in e25) r2.push(t3);
  return r2;
}, pairsToObj: function(e25) {
  var t3, r2, n2, i2 = {};
  for (t3 = 0, r2 = e25.length; t3 < r2; ++t3) i2[(n2 = e25[t3])[0]] = n2[1];
  return i2;
}, objToPairs: function(e25) {
  var t3, r2, n2 = [];
  for (t3 in e25) r2 = e25[t3], n2.push([t3, r2]);
  return n2;
}, listsToObj: AE(function(e25, t3) {
  var r2, n2, i2, a2 = {};
  for (r2 = 0, n2 = e25.length; r2 < n2; ++r2) i2 = r2, a2[e25[r2]] = t3[i2];
  return a2;
}), objToLists: function(e25) {
  var t3, r2, n2, i2;
  for (n2 in t3 = [], r2 = [], e25) i2 = e25[n2], t3.push(n2), r2.push(i2);
  return [t3, r2];
}, empty: function(e25) {
  var t3;
  for (t3 in e25) return false;
  return true;
}, each: AE(function(e25, t3) {
  var r2;
  for (r2 in t3) e25(t3[r2]);
  return t3;
}), map: AE(function(e25, t3) {
  var r2, n2, i2 = {};
  for (r2 in t3) n2 = t3[r2], i2[r2] = e25(n2);
  return i2;
}), filter: AE(function(e25, t3) {
  var r2, n2, i2 = {};
  for (r2 in t3) e25(n2 = t3[r2]) && (i2[r2] = n2);
  return i2;
}), compact: EE, reject: AE(function(e25, t3) {
  var r2, n2, i2 = {};
  for (r2 in t3) e25(n2 = t3[r2]) || (i2[r2] = n2);
  return i2;
}), partition: AE(function(e25, t3) {
  var r2, n2, i2, a2;
  for (i2 in r2 = {}, n2 = {}, t3) (e25(a2 = t3[i2]) ? r2 : n2)[i2] = a2;
  return [r2, n2];
}), find: AE(function(e25, t3) {
  var r2, n2;
  for (r2 in t3) if (e25(n2 = t3[r2])) return n2;
}) };
function AE(e25, t3) {
  var r2;
  return function n2(i2) {
    return e25.length > 1 ? function() {
      var a2 = i2 ? i2.concat() : [];
      return r2 = t3 && r2 || this, a2.push.apply(a2, arguments) < e25.length && arguments.length ? n2.call(r2, a2) : e25.apply(r2, a2);
    } : e25;
  }();
}
var wE;
var _E;
var TE;
var PE;
var IE;
var BE;
var OE;
var LE;
var NE;
var jE;
var RE;
var ME;
var VE;
var UE;
var qE;
var WE;
var $E;
var GE;
var zE;
var HE;
var KE;
var JE;
var QE;
var XE;
var YE;
var ZE;
var eC;
var tC;
var rC;
var nC;
var iC;
var aC;
var oC = { split: sC(function(e25, t3) {
  return t3.split(e25);
}), join: sC(function(e25, t3) {
  return t3.join(e25);
}), lines: function(e25) {
  return e25.length ? e25.split("\n") : [];
}, unlines: function(e25) {
  return e25.join("\n");
}, words: function(e25) {
  return e25.length ? e25.split(/[ ]+/) : [];
}, unwords: function(e25) {
  return e25.join(" ");
}, chars: function(e25) {
  return e25.split("");
}, unchars: function(e25) {
  return e25.join("");
}, reverse: function(e25) {
  return e25.split("").reverse().join("");
}, repeat: sC(function(e25, t3) {
  var r2, n2;
  for (r2 = "", n2 = 0; n2 < e25; ++n2) r2 += t3;
  return r2;
}), capitalize: function(e25) {
  return e25.charAt(0).toUpperCase() + e25.slice(1);
}, camelize: function(e25) {
  return e25.replace(/[-_]+(.)?/g, function(e26, t3) {
    return (null != t3 ? t3 : "").toUpperCase();
  });
}, dasherize: function(e25) {
  return e25.replace(/([^-A-Z])([A-Z]+)/g, function(e26, t3, r2) {
    return t3 + "-" + (r2.length > 1 ? r2 : r2.toLowerCase());
  }).replace(/^([A-Z]+)/, function(e26, t3) {
    return t3.length > 1 ? t3 + "-" : t3.toLowerCase();
  });
} };
function sC(e25, t3) {
  var r2;
  return function n2(i2) {
    return e25.length > 1 ? function() {
      var a2 = i2 ? i2.concat() : [];
      return r2 = t3 && r2 || this, a2.push.apply(a2, arguments) < e25.length && arguments.length ? n2.call(r2, a2) : e25.apply(r2, a2);
    } : e25;
  }();
}
function uC(e25, t3) {
  var r2;
  return function n2(i2) {
    return e25.length > 1 ? function() {
      var a2 = i2 ? i2.concat() : [];
      return r2 = t3 && r2 || this, a2.push.apply(a2, arguments) < e25.length && arguments.length ? n2.call(r2, a2) : e25.apply(r2, a2);
    } : e25;
  }();
}
wE = uC(function(e25, t3) {
  return e25 > t3 ? e25 : t3;
}), _E = uC(function(e25, t3) {
  return e25 < t3 ? e25 : t3;
}), TE = function(e25) {
  return -e25;
}, PE = Math.abs, IE = function(e25) {
  return e25 < 0 ? -1 : e25 > 0 ? 1 : 0;
}, BE = uC(function(e25, t3) {
  return ~~(e25 / t3);
}), OE = uC(function(e25, t3) {
  return e25 % t3;
}), LE = uC(function(e25, t3) {
  return Math.floor(e25 / t3);
}), NE = uC(function(e25, t3) {
  var r2;
  return (e25 % (r2 = t3) + r2) % r2;
}), jE = function(e25) {
  return 1 / e25;
}, ME = 2 * (RE = Math.PI), VE = Math.exp, UE = Math.sqrt, qE = Math.log, WE = uC(function(e25, t3) {
  return Math.pow(e25, t3);
}), $E = Math.sin, GE = Math.tan, zE = Math.cos, HE = Math.asin, KE = Math.acos, JE = Math.atan, QE = uC(function(e25, t3) {
  return Math.atan2(e25, t3);
}), XE = function(e25) {
  return ~~e25;
}, YE = Math.round, ZE = Math.ceil, eC = Math.floor, tC = function(e25) {
  return e25 != e25;
}, rC = function(e25) {
  return e25 % 2 == 0;
}, nC = function(e25) {
  return e25 % 2 != 0;
}, iC = uC(function(e25, t3) {
  var r2;
  for (e25 = Math.abs(e25), t3 = Math.abs(t3); 0 !== t3; ) r2 = e25 % t3, e25 = t3, t3 = r2;
  return e25;
}), aC = uC(function(e25, t3) {
  return Math.abs(Math.floor(e25 / iC(e25, t3) * t3));
});
var cC;
var lC;
var pC;
var fC;
var hC;
var dC;
var mC;
var gC;
var yC;
var vC = {}.toString;
cC = rb, lC = CE, pC = FE, fC = oC, hC = { max: wE, min: _E, negate: TE, abs: PE, signum: IE, quot: BE, rem: OE, div: LE, mod: NE, recip: jE, pi: RE, tau: ME, exp: VE, sqrt: UE, ln: qE, pow: WE, sin: $E, tan: GE, cos: zE, acos: KE, asin: HE, atan: JE, atan2: QE, truncate: XE, round: YE, ceiling: ZE, floor: eC, isItNaN: tC, even: rC, odd: nC, gcd: iC, lcm: aC }, dC = function(e25) {
  return e25;
}, mC = bC(function(e25, t3) {
  return vC.call(t3).slice(8, -1) === e25;
}), gC = bC(function(e25, t3) {
  var r2, n2 = [];
  for (r2 = 0; r2 < e25; ++r2) n2.push(t3);
  return n2;
}), fC.empty = lC.empty, fC.slice = lC.slice, fC.take = lC.take, fC.drop = lC.drop, fC.splitAt = lC.splitAt, fC.takeWhile = lC.takeWhile, fC.dropWhile = lC.dropWhile, fC.span = lC.span, fC.breakStr = lC.breakList, (yC = { Func: cC, List: lC, Obj: pC, Str: fC, Num: hC, id: dC, isType: mC, replicate: gC }).each = lC.each, yC.map = lC.map, yC.filter = lC.filter, yC.compact = lC.compact, yC.reject = lC.reject, yC.partition = lC.partition, yC.find = lC.find, yC.head = lC.head, yC.first = lC.first, yC.tail = lC.tail, yC.last = lC.last, yC.initial = lC.initial, yC.empty = lC.empty, yC.reverse = lC.reverse, yC.difference = lC.difference, yC.intersection = lC.intersection, yC.union = lC.union, yC.countBy = lC.countBy, yC.groupBy = lC.groupBy, yC.fold = lC.fold, yC.foldl = lC.foldl, yC.fold1 = lC.fold1, yC.foldl1 = lC.foldl1, yC.foldr = lC.foldr, yC.foldr1 = lC.foldr1, yC.unfoldr = lC.unfoldr, yC.andList = lC.andList, yC.orList = lC.orList, yC.any = lC.any, yC.all = lC.all, yC.unique = lC.unique, yC.uniqueBy = lC.uniqueBy, yC.sort = lC.sort, yC.sortWith = lC.sortWith, yC.sortBy = lC.sortBy, yC.sum = lC.sum, yC.product = lC.product, yC.mean = lC.mean, yC.average = lC.average, yC.concat = lC.concat, yC.concatMap = lC.concatMap, yC.flatten = lC.flatten, yC.maximum = lC.maximum, yC.minimum = lC.minimum, yC.maximumBy = lC.maximumBy, yC.minimumBy = lC.minimumBy, yC.scan = lC.scan, yC.scanl = lC.scanl, yC.scan1 = lC.scan1, yC.scanl1 = lC.scanl1, yC.scanr = lC.scanr, yC.scanr1 = lC.scanr1, yC.slice = lC.slice, yC.take = lC.take, yC.drop = lC.drop, yC.splitAt = lC.splitAt, yC.takeWhile = lC.takeWhile, yC.dropWhile = lC.dropWhile, yC.span = lC.span, yC.breakList = lC.breakList, yC.zip = lC.zip, yC.zipWith = lC.zipWith, yC.zipAll = lC.zipAll, yC.zipAllWith = lC.zipAllWith, yC.at = lC.at, yC.elemIndex = lC.elemIndex, yC.elemIndices = lC.elemIndices, yC.findIndex = lC.findIndex, yC.findIndices = lC.findIndices, yC.apply = cC.apply, yC.curry = cC.curry, yC.flip = cC.flip, yC.fix = cC.fix, yC.over = cC.over, yC.split = fC.split, yC.join = fC.join, yC.lines = fC.lines, yC.unlines = fC.unlines, yC.words = fC.words, yC.unwords = fC.unwords, yC.chars = fC.chars, yC.unchars = fC.unchars, yC.repeat = fC.repeat, yC.capitalize = fC.capitalize, yC.camelize = fC.camelize, yC.dasherize = fC.dasherize, yC.values = pC.values, yC.keys = pC.keys, yC.pairsToObj = pC.pairsToObj, yC.objToPairs = pC.objToPairs, yC.listsToObj = pC.listsToObj, yC.objToLists = pC.objToLists, yC.max = hC.max, yC.min = hC.min, yC.negate = hC.negate, yC.abs = hC.abs, yC.signum = hC.signum, yC.quot = hC.quot, yC.rem = hC.rem, yC.div = hC.div, yC.mod = hC.mod, yC.recip = hC.recip, yC.pi = hC.pi, yC.tau = hC.tau, yC.exp = hC.exp, yC.sqrt = hC.sqrt, yC.ln = hC.ln, yC.pow = hC.pow, yC.sin = hC.sin, yC.tan = hC.tan, yC.cos = hC.cos, yC.acos = hC.acos, yC.asin = hC.asin, yC.atan = hC.atan, yC.atan2 = hC.atan2, yC.truncate = hC.truncate, yC.round = hC.round, yC.ceiling = hC.ceiling, yC.floor = hC.floor, yC.isItNaN = hC.isItNaN, yC.even = hC.even, yC.odd = hC.odd, yC.gcd = hC.gcd, yC.lcm = hC.lcm, yC.VERSION = "1.1.2";
var xC = yC;
function bC(e25, t3) {
  var r2;
  return function n2(i2) {
    return e25.length > 1 ? function() {
      var a2 = i2 ? i2.concat() : [];
      return r2 = t3 && r2 || this, a2.push.apply(a2, arguments) < e25.length && arguments.length ? n2.call(r2, a2) : e25.apply(r2, a2);
    } : e25;
  }();
}
var EC = r(function(t3) {
  (function() {
    var e25, r2, n2;
    function i2(e26, t4) {
      if (e26[0] === t4) return e26.shift();
      throw new Error("Expected '" + t4 + "', but got '" + e26[0] + "' instead in " + JSON.stringify(e26) + ".");
    }
    function a2(e26, t4) {
      if (e26[0] === t4) return e26.shift();
    }
    function o2(e26, t4, r3) {
      var n3, o3, s3, u3;
      for (n3 = t4[0], o3 = t4[1], r3 && i2(e26, n3), s3 = [], u3 = "," + (r3 ? o3 : ""); e26.length && r3 && e26[0] !== o3; ) s3.push(p2(e26, u3)), a2(e26, ",");
      return r3 && i2(e26, o3), s3;
    }
    function s2(e26, t4) {
      return o2(e26, ["[", "]"], t4);
    }
    function u2(e26, t4) {
      return o2(e26, ["(", ")"], t4);
    }
    function c2(e26, t4) {
      var r3, n3, o3;
      for (t4 && i2(e26, "{"), r3 = {}, n3 = "," + (t4 ? "}" : ""); e26.length && (!t4 || "}" !== e26[0]); ) o3 = l2(e26, ":"), i2(e26, ":"), r3[o3] = p2(e26, n3), a2(e26, ",");
      return t4 && i2(e26, "}"), r3;
    }
    function l2(e26, t4) {
      var r3;
      for (null == t4 && (t4 = ""), r3 = ""; e26.length && -1 === t4.indexOf(e26[0]); ) r3 += e26.shift();
      return r3;
    }
    function p2(e26, t4) {
      switch (e26[0]) {
        case "[":
          return s2(e26, true);
        case "(":
          return u2(e26, true);
        case "{":
          return c2(e26, true);
        default:
          return l2(e26, t4);
      }
    }
    function f2(e26) {
      return !e26;
    }
    e25 = xC.reject, r2 = /\[\]\(\)}{:,/.source, n2 = RegExp(`("(?:\\\\"|[^"])*")|('(?:\\\\'|[^'])*')|(/(?:\\\\/|[^/])*/[a-zA-Z]*)|(#.*#)|([` + r2 + "])|([^\\s" + r2 + "](?:\\s*[^\\s" + r2 + "]+)*)|\\s*"), t3.exports = function(t4, r3, i3) {
      var a3;
      if (null == i3 && (i3 = {}), !i3.explicit && 1 === t4.length && "String" === t4[0].type) return "'" + r3.replace(/\\'/g, "\\\\'") + "'";
      if (!(a3 = function(e26, t5, r4) {
        var n3, i4, a4, o3, l3, f3, h2, d2;
        return i4 = (n3 = t5[0]).type, a4 = n3.structure, o3 = e26.concat(), r4.explicit || 1 !== t5.length || (i4 || !a4) && "Array" !== i4 && "Object" !== i4 ? f3 = p2(e26) : (l3 = "array" === a4 || "Array" === i4 ? s2(e26, "[" === e26[0]) : "tuple" === a4 ? u2(e26, "(" === e26[0]) : c2(e26, "{" === e26[0]), f3 = e26.length ? p2("array" === a4 || "Array" === i4 ? ((h2 = o3).unshift("["), h2.push("]"), h2) : ((d2 = o3).unshift("("), d2.push(")"), d2)) : l3), f3;
      }(e25(f2, r3.split(n2)), t4, i3))) throw new Error("Error parsing '" + r3 + "'.");
      return a3;
    };
  }).call(e);
});
var CC = r(function(t3) {
  (function() {
    var e25, r2;
    function n2(e26) {
      var t4;
      if (null == (t4 = e26[0])) throw new Error("Unexpected end of input.");
      return t4;
    }
    function i2(t4) {
      var r3;
      if (r3 = n2(t4), !e25.test(r3)) throw new Error("Expected text, got '" + r3 + "' instead.");
      return t4.shift();
    }
    function a2(e26, t4) {
      var r3;
      if ((r3 = n2(e26)) !== t4) throw new Error("Expected '" + t4 + "', got '" + r3 + "' instead.");
      return e26.shift();
    }
    function o2(e26, t4) {
      return e26[0] === t4 ? e26.shift() : null;
    }
    function s2(e26) {
      var t4;
      return t4 = i2(e26), a2(e26, ":"), [t4, l2(e26)];
    }
    function u2(e26) {
      switch (e26[0]) {
        case "[":
          return function(e27) {
            var t4;
            if (a2(e27, "["), "]" === n2(e27)) throw new Error("Must specify type of Array - eg. [Type], got [] instead.");
            return t4 = l2(e27), a2(e27, "]"), { structure: "array", of: t4 };
          }(e26);
        case "(":
          return function(e27) {
            var t4;
            if (t4 = [], a2(e27, "("), ")" === n2(e27)) throw new Error("Tuple must be of at least length 1 - eg. (Type), got () instead.");
            for (; t4.push(l2(e27)), o2(e27, ","), ")" !== n2(e27); ) ;
            return a2(e27, ")"), { structure: "tuple", of: t4 };
          }(e26);
        case "{":
          return function(e27) {
            var t4, r3, i3, u3, c3;
            for (t4 = {}, a2(e27, "{"), r3 = false; ; ) {
              if (o2(e27, "...")) {
                r3 = true;
                break;
              }
              if (u3 = (i3 = s2(e27))[0], c3 = i3[1], t4[u3] = c3, o2(e27, ","), "}" === n2(e27)) break;
            }
            return a2(e27, "}"), { structure: "fields", of: t4, subset: r3 };
          }(e26);
      }
    }
    function c2(t4) {
      var r3, o3, s3, c3;
      if ((o3 = "*" === (r3 = n2(t4))) || e25.test(r3)) return s3 = o3 ? a2(t4, "*") : i2(t4), (c3 = u2(t4)) ? (c3.type = s3, c3) : { type: s3 };
      if (!(c3 = u2(t4))) throw new Error("Unexpected character: " + r3);
      return c3;
    }
    function l2(e26) {
      var t4, r3, i3, a3, s3;
      if ("::" === n2(e26)) throw new Error("No comment before comment separator '::' found.");
      for (null != (t4 = e26[1]) && "::" === t4 && (e26.shift(), e26.shift()), r3 = [], i3 = {}, "Maybe" === n2(e26) && (e26.shift(), r3 = [{ type: "Undefined" }, { type: "Null" }], i3 = { Undefined: true, Null: true }); i3[s3 = (a3 = c2(e26)).type] || r3.push(a3), i3[s3] = true, o2(e26, "|"); ) ;
      return r3;
    }
    e25 = /[\$\w]+/, r2 = RegExp("\\.\\.\\.|::|->|" + e25.source + "|\\S", "g"), t3.exports = function(e26) {
      var t4;
      if (!e26.length) throw new Error("No type specified.");
      if (function(e27, t5) {
        var r3 = -1, n3 = t5.length >>> 0;
        for (; ++r3 < n3; ) if (e27 === t5[r3]) return true;
        return false;
      }("->", t4 = e26.match(r2) || [])) throw new Error("Function types are not supported. To validate that something is a function, you may use 'Function'.");
      try {
        return l2(t4);
      } catch (r3) {
        throw new Error(r3.message + " - Remaining tokens: " + JSON.stringify(t4) + " - Initial input: '" + e26 + "'");
      }
    };
  }).call(e);
});
var SC = r(function(t3) {
  (function() {
    var e25, r2, n2, i2, a2, o2, s2, u2 = {}.toString;
    function c2(e26, t4) {
      if (!(e26 instanceof Object)) return false;
      switch (t4.structure) {
        case "fields":
          return function(e27, t5) {
            var r3, n3, i3, a3, o3, s3, u3;
            for (i3 in r3 = {}, n3 = 0, e27) r3[i3] = true, n3++;
            for (o3 in a3 = 0, s3 = t5.of) {
              if (u3 = s3[o3], !p2(e27[o3], u3)) return false;
              r3[o3] && a3++;
            }
            return t5.subset || n3 === a3;
          }(e26, t4);
        case "array":
          return function(e27, t5) {
            return n2(function(e28) {
              return p2(e28, t5.of);
            }, e27);
          }(e26, t4);
        case "tuple":
          return function(e27, t5) {
            var r3, n3, i3, a3, o3;
            for (r3 = 0, n3 = 0, a3 = (i3 = t5.of).length; n3 < a3; ++n3) {
              if (o3 = i3[n3], !p2(e27[r3], o3)) return false;
              r3++;
            }
            return e27.length <= r3;
          }(e26, t4);
      }
    }
    function l2(e26, t4) {
      var r3, n3, i3, l3;
      if (r3 = t4.type, n3 = t4.structure, r3) return "*" === r3 || ((i3 = s2[r3] || a2[r3]) ? i3.typeOf === u2.call(e26).slice(8, -1) && i3.validate(e26) : r3 === u2.call(e26).slice(8, -1) && (!n3 || c2(e26, t4)));
      if (n3) return (!(l3 = o2[n3]) || l3 === u2.call(e26).slice(8, -1)) && c2(e26, t4);
      throw new Error("No type defined. Input: " + e26 + ".");
    }
    function p2(e26, t4) {
      if ("Array" !== u2.call(t4).slice(8, -1)) throw new Error("Types must be in an array. Input: " + e26 + ".");
      return r2(function(t5) {
        return l2(e26, t5);
      }, t4);
    }
    r2 = (e25 = xC).any, n2 = e25.all, i2 = e25.isItNaN, a2 = { Number: { typeOf: "Number", validate: function(e26) {
      return !i2(e26);
    } }, NaN: { typeOf: "Number", validate: i2 }, Int: { typeOf: "Number", validate: function(e26) {
      return !i2(e26) && e26 % 1 == 0;
    } }, Float: { typeOf: "Number", validate: function(e26) {
      return !i2(e26);
    } }, Date: { typeOf: "Date", validate: function(e26) {
      return !i2(e26.getTime());
    } } }, o2 = { array: "Array", tuple: "Array" }, t3.exports = function(e26, t4, r3) {
      return null == r3 && (r3 = {}), s2 = r3.customTypes || {}, p2(t4, e26);
    };
  }).call(e);
});
var kC = r(function(t3) {
  (function() {
    var e25, r2, n2;
    e25 = CC, r2 = SC, n2 = function(t4, n3, i2) {
      return r2(e25(t4), n3, i2);
    }, t3.exports = { VERSION: "0.3.2", typeCheck: n2, parsedTypeCheck: r2, parseType: e25 };
  }).call(e);
});
var DC = (kC.VERSION, kC.typeCheck, kC.parsedTypeCheck, kC.parseType, r(function(t3) {
  (function() {
    var e25, r2, n2 = {}.toString;
    function i2(e26, t4, r3) {
      var i3, a3;
      return "Array" !== n2.call(e26).slice(8, -1) ? { type: "Nothing" } : (i3 = t4.of, { type: "Just", value: function() {
        var t5, n3, o3, u2 = [];
        for (t5 = 0, o3 = (n3 = e26).length; t5 < o3; ++t5) a3 = n3[t5], u2.push(s2(a3, i3, r3));
        return u2;
      }() });
    }
    function a2(e26, t4, r3) {
      var i3, a3, o3;
      return "Object" !== n2.call(e26).slice(8, -1) ? { type: "Nothing" } : (i3 = t4.of, { type: "Just", value: function() {
        var t5, n3 = {};
        for (a3 in t5 = e26) o3 = t5[a3], n3[s2(a3, [{ type: "String" }], r3)] = s2(o3, i3[a3] || [{ type: "*" }], r3);
        return n3;
      }() });
    }
    function o2(e26, t4, o3) {
      var u2, c2, l2, p2;
      if (u2 = t4.type, c2 = t4.structure, u2) {
        if (!(l2 = (null != (p2 = o3.customTypes[u2]) ? p2.cast : void 0) || r2[u2])) throw new Error("Type not defined: " + u2 + ".");
        return l2(e26, o3, s2);
      }
      switch (c2) {
        case "array":
          return i2(e26, t4, o3);
        case "tuple":
          return function(e27, t5, r3) {
            var i3, a3, o4, u3, c3, l3, p3;
            if ("Array" !== n2.call(e27).slice(8, -1)) return { type: "Nothing" };
            for (i3 = [], a3 = 0, o4 = 0, c3 = (u3 = t5.of).length; o4 < c3; ++o4) l3 = u3[o4], p3 = s2(e27[a3], l3, r3), "Undefined" !== n2.call(p3).slice(8, -1) && i3.push(p3), a3++;
            return e27.length <= a3 ? { type: "Just", value: i3 } : { type: "Nothing" };
          }(e26, t4, o3);
        case "fields":
          return a2(e26, t4, o3);
      }
    }
    function s2(t4, r3, n3) {
      var i3, a3, s3, u2, c2, l2;
      for (i3 = 0, a3 = r3.length; i3 < a3; ++i3) if (c2 = (u2 = o2(t4, s3 = r3[i3], n3)).type, l2 = u2.value, "Nothing" !== c2 && e25([s3], l2, { customTypes: n3.customTypes })) return l2;
      throw new Error("Value " + JSON.stringify(t4) + " does not type check against " + JSON.stringify(r3) + ".");
    }
    e25 = kC.parsedTypeCheck, r2 = { "*": function(e26, t4) {
      switch (n2.call(e26).slice(8, -1)) {
        case "Array":
          return o2(e26, { type: "Array" }, t4);
        case "Object":
          return o2(e26, { type: "Object" }, t4);
        default:
          return { type: "Just", value: s2(e26, [{ type: "Undefined" }, { type: "Null" }, { type: "NaN" }, { type: "Boolean" }, { type: "Number" }, { type: "Date" }, { type: "RegExp" }, { type: "Array" }, { type: "Object" }, { type: "String" }], (t4.explicit = true, t4)) };
      }
    }, Undefined: function(e26) {
      return "undefined" === e26 || void 0 === e26 ? { type: "Just", value: void 0 } : { type: "Nothing" };
    }, Null: function(e26) {
      return "null" === e26 ? { type: "Just", value: null } : { type: "Nothing" };
    }, NaN: function(e26) {
      function t4(t5) {
        return e26.apply(this, arguments);
      }
      return t4.toString = function() {
        return e26.toString();
      }, t4;
    }(function(e26) {
      return "NaN" === e26 ? { type: "Just", value: NaN } : { type: "Nothing" };
    }), Boolean: function(e26) {
      return "true" === e26 ? { type: "Just", value: true } : "false" === e26 ? { type: "Just", value: false } : { type: "Nothing" };
    }, Number: function(e26) {
      return { type: "Just", value: +e26 };
    }, Int: function(e26) {
      return { type: "Just", value: +e26 };
    }, Float: function(e26) {
      return { type: "Just", value: +e26 };
    }, Date: function(e26) {
      function t4(t5, r3) {
        return e26.apply(this, arguments);
      }
      return t4.toString = function() {
        return e26.toString();
      }, t4;
    }(function(e26, t4) {
      var r3;
      return (r3 = /^\#([\s\S]*)\#$/.exec(e26)) ? { type: "Just", value: new Date(+r3[1] || r3[1]) } : t4.explicit ? { type: "Nothing" } : { type: "Just", value: new Date(+e26 || e26) };
    }), RegExp: function(e26) {
      function t4(t5, r3) {
        return e26.apply(this, arguments);
      }
      return t4.toString = function() {
        return e26.toString();
      }, t4;
    }(function(e26, t4) {
      var r3;
      return (r3 = /^\/([\s\S]*)\/([gimy]*)$/.exec(e26)) ? { type: "Just", value: new RegExp(r3[1], r3[2]) } : t4.explicit ? { type: "Nothing" } : { type: "Just", value: new RegExp(e26) };
    }), Array: function(e26, t4) {
      return i2(e26, { of: [{ type: "*" }] }, t4);
    }, Object: function(e26, t4) {
      return a2(e26, { of: {} }, t4);
    }, String: function(e26) {
      var t4;
      return "String" !== n2.call(e26).slice(8, -1) ? { type: "Nothing" } : (t4 = e26.match(/^'([\s\S]*)'$/)) ? { type: "Just", value: t4[1].replace(/\\'/g, "'") } : (t4 = e26.match(/^"([\s\S]*)"$/)) ? { type: "Just", value: t4[1].replace(/\\"/g, '"') } : { type: "Just", value: e26 };
    } }, t3.exports = s2;
  }).call(e);
}));
var FC = r(function(t3) {
  (function() {
    var e25, r2, n2, i2, a2;
    e25 = EC, r2 = DC, n2 = kC.parseType, i2 = function(t4, n3, i3) {
      return null == i3 && (i3 = {}), null == i3.explicit && (i3.explicit = false), null == i3.customTypes && (i3.customTypes = {}), r2(e25(t4, n3, i3), t4, i3);
    }, a2 = function(e26, t4, r3) {
      return i2(n2(e26), t4, r3);
    }, t3.exports = { VERSION: "0.3.0", parse: a2, parsedTypeParse: i2 };
  }).call(e);
});
var AC = (FC.VERSION, FC.parse, FC.parsedTypeParse, r(function(t3) {
  var r2 = function() {
    function e25(e26) {
      return '"' + e26.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\x08/g, "\\b").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\f/g, "\\f").replace(/\r/g, "\\r").replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape) + '"';
    }
    var t4 = { parse: function(t5, r3) {
      var n2 = { start: function() {
        var e26, t6, r4, n3, a3, o3 = "start@" + i2, u3 = s2[o3];
        if (u3) return i2 = u3.nextPos, u3.result;
        n3 = i2, a3 = i2, null !== (e26 = c2()) && null !== (t6 = f2()) && null !== (r4 = c2()) ? e26 = [e26, t6, r4] : (e26 = null, i2 = a3);
        null !== e26 && (l3 = e26[1], e26 = 1 === l3.length ? l3[0] : { type: "matches", selectors: l3 });
        var l3;
        null === e26 && (i2 = n3);
        null === e26 && (n3 = i2, null !== (e26 = c2()) && (e26 = void 0), null === e26 && (i2 = n3));
        return s2[o3] = { nextPos: i2, result: e26 }, e26;
      }, _: c2, identifierName: l2, binaryOp: p2, selectors: f2, selector: h2, sequence: d2, atom: m2, wildcard: g2, identifier: y2, attr: v2, attrOps: x2, attrEqOps: b2, attrName: E2, attrValue: C3, string: S3, number: k2, path: D2, type: F2, regex: A2, field: w2, negation: _2, matches: T2, has: P2, firstChild: I2, lastChild: B2, nthChild: O2, nthLastChild: L2, class: N2 };
      if (void 0 !== r3) {
        if (void 0 === n2[r3]) throw new Error("Invalid rule name: " + e25(r3) + ".");
      } else r3 = "start";
      var i2 = 0, a2 = 0, o2 = [], s2 = {};
      function u2(e26) {
        i2 < a2 || (i2 > a2 && (a2 = i2, o2 = []), o2.push(e26));
      }
      function c2() {
        var e26, r4, n3 = "_@" + i2, a3 = s2[n3];
        if (a3) return i2 = a3.nextPos, a3.result;
        for (e26 = [], 32 === t5.charCodeAt(i2) ? (r4 = " ", i2++) : (r4 = null, u2('" "')); null !== r4; ) e26.push(r4), 32 === t5.charCodeAt(i2) ? (r4 = " ", i2++) : (r4 = null, u2('" "'));
        return s2[n3] = { nextPos: i2, result: e26 }, e26;
      }
      function l2() {
        var e26, r4, n3, a3 = "identifierName@" + i2, o3 = s2[a3];
        if (o3) return i2 = o3.nextPos, o3.result;
        if (n3 = i2, /^[^ [\],():#!=><~+.]/.test(t5.charAt(i2)) ? (r4 = t5.charAt(i2), i2++) : (r4 = null, u2("[^ [\\],():#!=><~+.]")), null !== r4) for (e26 = []; null !== r4; ) e26.push(r4), /^[^ [\],():#!=><~+.]/.test(t5.charAt(i2)) ? (r4 = t5.charAt(i2), i2++) : (r4 = null, u2("[^ [\\],():#!=><~+.]"));
        else e26 = null;
        return null !== e26 && (e26 = function(e27, t6) {
          return t6.join("");
        }(0, e26)), null === e26 && (i2 = n3), s2[a3] = { nextPos: i2, result: e26 }, e26;
      }
      function p2() {
        var e26, r4, n3, a3, o3, l3 = "binaryOp@" + i2, p3 = s2[l3];
        return p3 ? (i2 = p3.nextPos, p3.result) : (a3 = i2, o3 = i2, null !== (e26 = c2()) ? (62 === t5.charCodeAt(i2) ? (r4 = ">", i2++) : (r4 = null, u2('">"')), null !== r4 && null !== (n3 = c2()) ? e26 = [e26, r4, n3] : (e26 = null, i2 = o3)) : (e26 = null, i2 = o3), null !== e26 && (e26 = "child"), null === e26 && (i2 = a3), null === e26 && (a3 = i2, o3 = i2, null !== (e26 = c2()) ? (126 === t5.charCodeAt(i2) ? (r4 = "~", i2++) : (r4 = null, u2('"~"')), null !== r4 && null !== (n3 = c2()) ? e26 = [e26, r4, n3] : (e26 = null, i2 = o3)) : (e26 = null, i2 = o3), null !== e26 && (e26 = "sibling"), null === e26 && (i2 = a3), null === e26 && (a3 = i2, o3 = i2, null !== (e26 = c2()) ? (43 === t5.charCodeAt(i2) ? (r4 = "+", i2++) : (r4 = null, u2('"+"')), null !== r4 && null !== (n3 = c2()) ? e26 = [e26, r4, n3] : (e26 = null, i2 = o3)) : (e26 = null, i2 = o3), null !== e26 && (e26 = "adjacent"), null === e26 && (i2 = a3), null === e26 && (a3 = i2, o3 = i2, 32 === t5.charCodeAt(i2) ? (e26 = " ", i2++) : (e26 = null, u2('" "')), null !== e26 && null !== (r4 = c2()) ? e26 = [e26, r4] : (e26 = null, i2 = o3), null !== e26 && (e26 = "descendant"), null === e26 && (i2 = a3)))), s2[l3] = { nextPos: i2, result: e26 }, e26);
      }
      function f2() {
        var e26, r4, n3, a3, o3, l3, p3, f3, d3, m3 = "selectors@" + i2, g3 = s2[m3];
        if (g3) return i2 = g3.nextPos, g3.result;
        if (p3 = i2, f3 = i2, null !== (e26 = h2())) {
          for (r4 = [], d3 = i2, null !== (n3 = c2()) ? (44 === t5.charCodeAt(i2) ? (a3 = ",", i2++) : (a3 = null, u2('","')), null !== a3 && null !== (o3 = c2()) && null !== (l3 = h2()) ? n3 = [n3, a3, o3, l3] : (n3 = null, i2 = d3)) : (n3 = null, i2 = d3); null !== n3; ) r4.push(n3), d3 = i2, null !== (n3 = c2()) ? (44 === t5.charCodeAt(i2) ? (a3 = ",", i2++) : (a3 = null, u2('","')), null !== a3 && null !== (o3 = c2()) && null !== (l3 = h2()) ? n3 = [n3, a3, o3, l3] : (n3 = null, i2 = d3)) : (n3 = null, i2 = d3);
          null !== r4 ? e26 = [e26, r4] : (e26 = null, i2 = f3);
        } else e26 = null, i2 = f3;
        return null !== e26 && (e26 = function(e27, t6, r5) {
          return [t6].concat(r5.map(function(e28) {
            return e28[3];
          }));
        }(0, e26[0], e26[1])), null === e26 && (i2 = p3), s2[m3] = { nextPos: i2, result: e26 }, e26;
      }
      function h2() {
        var e26, t6, r4, n3, a3, o3, u3, c3, l3 = "selector@" + i2, f3 = s2[l3];
        if (f3) return i2 = f3.nextPos, f3.result;
        if (a3 = i2, o3 = i2, null !== (e26 = d2())) {
          for (t6 = [], u3 = i2, null !== (r4 = p2()) && null !== (n3 = d2()) ? r4 = [r4, n3] : (r4 = null, i2 = u3); null !== r4; ) t6.push(r4), u3 = i2, null !== (r4 = p2()) && null !== (n3 = d2()) ? r4 = [r4, n3] : (r4 = null, i2 = u3);
          null !== t6 ? e26 = [e26, t6] : (e26 = null, i2 = o3);
        } else e26 = null, i2 = o3;
        return null !== e26 && (c3 = e26[0], e26 = e26[1].reduce(function(e27, t7) {
          return { type: t7[0], left: e27, right: t7[1] };
        }, c3)), null === e26 && (i2 = a3), s2[l3] = { nextPos: i2, result: e26 }, e26;
      }
      function d2() {
        var e26, r4, n3, a3, o3, c3, l3, p3, f3 = "sequence@" + i2, h3 = s2[f3];
        if (h3) return i2 = h3.nextPos, h3.result;
        if (a3 = i2, o3 = i2, 33 === t5.charCodeAt(i2) ? (e26 = "!", i2++) : (e26 = null, u2('"!"')), null !== (e26 = null !== e26 ? e26 : "")) {
          if (null !== (n3 = m2())) for (r4 = []; null !== n3; ) r4.push(n3), n3 = m2();
          else r4 = null;
          null !== r4 ? e26 = [e26, r4] : (e26 = null, i2 = o3);
        } else e26 = null, i2 = o3;
        return null !== e26 && (c3 = e26[0], l3 = e26[1], p3 = 1 === l3.length ? l3[0] : { type: "compound", selectors: l3 }, c3 && (p3.subject = true), e26 = p3), null === e26 && (i2 = a3), s2[f3] = { nextPos: i2, result: e26 }, e26;
      }
      function m2() {
        var e26, t6 = "atom@" + i2, r4 = s2[t6];
        return r4 ? (i2 = r4.nextPos, r4.result) : (null === (e26 = g2()) && null === (e26 = y2()) && null === (e26 = v2()) && null === (e26 = w2()) && null === (e26 = _2()) && null === (e26 = T2()) && null === (e26 = P2()) && null === (e26 = I2()) && null === (e26 = B2()) && null === (e26 = O2()) && null === (e26 = L2()) && (e26 = N2()), s2[t6] = { nextPos: i2, result: e26 }, e26);
      }
      function g2() {
        var e26, r4, n3 = "wildcard@" + i2, a3 = s2[n3];
        return a3 ? (i2 = a3.nextPos, a3.result) : (r4 = i2, 42 === t5.charCodeAt(i2) ? (e26 = "*", i2++) : (e26 = null, u2('"*"')), null !== e26 && (e26 = { type: "wildcard", value: e26 }), null === e26 && (i2 = r4), s2[n3] = { nextPos: i2, result: e26 }, e26);
      }
      function y2() {
        var e26, r4, n3, a3, o3 = "identifier@" + i2, c3 = s2[o3];
        return c3 ? (i2 = c3.nextPos, c3.result) : (n3 = i2, a3 = i2, 35 === t5.charCodeAt(i2) ? (e26 = "#", i2++) : (e26 = null, u2('"#"')), null !== (e26 = null !== e26 ? e26 : "") && null !== (r4 = l2()) ? e26 = [e26, r4] : (e26 = null, i2 = a3), null !== e26 && (e26 = /* @__PURE__ */ function(e27, t6) {
          return { type: "identifier", value: t6 };
        }(0, e26[1])), null === e26 && (i2 = n3), s2[o3] = { nextPos: i2, result: e26 }, e26);
      }
      function v2() {
        var e26, r4, n3, a3, o3, l3, p3, f3 = "attr@" + i2, h3 = s2[f3];
        return h3 ? (i2 = h3.nextPos, h3.result) : (l3 = i2, p3 = i2, 91 === t5.charCodeAt(i2) ? (e26 = "[", i2++) : (e26 = null, u2('"["')), null !== e26 && null !== (r4 = c2()) && null !== (n3 = C3()) && null !== (a3 = c2()) ? (93 === t5.charCodeAt(i2) ? (o3 = "]", i2++) : (o3 = null, u2('"]"')), null !== o3 ? e26 = [e26, r4, n3, a3, o3] : (e26 = null, i2 = p3)) : (e26 = null, i2 = p3), null !== e26 && (e26 = e26[2]), null === e26 && (i2 = l3), s2[f3] = { nextPos: i2, result: e26 }, e26);
      }
      function x2() {
        var e26, r4, n3, a3, o3 = "attrOps@" + i2, c3 = s2[o3];
        return c3 ? (i2 = c3.nextPos, c3.result) : (n3 = i2, a3 = i2, /^[><!]/.test(t5.charAt(i2)) ? (e26 = t5.charAt(i2), i2++) : (e26 = null, u2("[><!]")), null !== (e26 = null !== e26 ? e26 : "") ? (61 === t5.charCodeAt(i2) ? (r4 = "=", i2++) : (r4 = null, u2('"="')), null !== r4 ? e26 = [e26, r4] : (e26 = null, i2 = a3)) : (e26 = null, i2 = a3), null !== e26 && (e26 = e26[0] + "="), null === e26 && (i2 = n3), null === e26 && (/^[><]/.test(t5.charAt(i2)) ? (e26 = t5.charAt(i2), i2++) : (e26 = null, u2("[><]"))), s2[o3] = { nextPos: i2, result: e26 }, e26);
      }
      function b2() {
        var e26, r4, n3, a3, o3 = "attrEqOps@" + i2, c3 = s2[o3];
        return c3 ? (i2 = c3.nextPos, c3.result) : (n3 = i2, a3 = i2, 33 === t5.charCodeAt(i2) ? (e26 = "!", i2++) : (e26 = null, u2('"!"')), null !== (e26 = null !== e26 ? e26 : "") ? (61 === t5.charCodeAt(i2) ? (r4 = "=", i2++) : (r4 = null, u2('"="')), null !== r4 ? e26 = [e26, r4] : (e26 = null, i2 = a3)) : (e26 = null, i2 = a3), null !== e26 && (e26 = e26[0] + "="), null === e26 && (i2 = n3), s2[o3] = { nextPos: i2, result: e26 }, e26);
      }
      function E2() {
        var e26, r4, n3, a3 = "attrName@" + i2, o3 = s2[a3];
        if (o3) return i2 = o3.nextPos, o3.result;
        if (n3 = i2, null === (r4 = l2()) && (46 === t5.charCodeAt(i2) ? (r4 = ".", i2++) : (r4 = null, u2('"."'))), null !== r4) for (e26 = []; null !== r4; ) e26.push(r4), null === (r4 = l2()) && (46 === t5.charCodeAt(i2) ? (r4 = ".", i2++) : (r4 = null, u2('"."')));
        else e26 = null;
        return null !== e26 && (e26 = function(e27, t6) {
          return t6.join("");
        }(0, e26)), null === e26 && (i2 = n3), s2[a3] = { nextPos: i2, result: e26 }, e26;
      }
      function C3() {
        var e26, t6, r4, n3, a3, o3, u3, l3 = "attrValue@" + i2, p3 = s2[l3];
        return p3 ? (i2 = p3.nextPos, p3.result) : (o3 = i2, u3 = i2, null !== (e26 = E2()) && null !== (t6 = c2()) && null !== (r4 = b2()) && null !== (n3 = c2()) ? (null === (a3 = F2()) && (a3 = A2()), null !== a3 ? e26 = [e26, t6, r4, n3, a3] : (e26 = null, i2 = u3)) : (e26 = null, i2 = u3), null !== e26 && (e26 = /* @__PURE__ */ function(e27, t7, r5, n4) {
          return { type: "attribute", name: t7, operator: r5, value: n4 };
        }(0, e26[0], e26[2], e26[4])), null === e26 && (i2 = o3), null === e26 && (o3 = i2, u3 = i2, null !== (e26 = E2()) && null !== (t6 = c2()) && null !== (r4 = x2()) && null !== (n3 = c2()) ? (null === (a3 = S3()) && null === (a3 = k2()) && (a3 = D2()), null !== a3 ? e26 = [e26, t6, r4, n3, a3] : (e26 = null, i2 = u3)) : (e26 = null, i2 = u3), null !== e26 && (e26 = /* @__PURE__ */ function(e27, t7, r5, n4) {
          return { type: "attribute", name: t7, operator: r5, value: n4 };
        }(0, e26[0], e26[2], e26[4])), null === e26 && (i2 = o3), null === e26 && (o3 = i2, null !== (e26 = E2()) && (e26 = /* @__PURE__ */ function(e27, t7) {
          return { type: "attribute", name: t7 };
        }(0, e26)), null === e26 && (i2 = o3))), s2[l3] = { nextPos: i2, result: e26 }, e26);
      }
      function S3() {
        var e26, r4, n3, a3, o3, c3, l3, p3, f3, h3, d3 = "string@" + i2, m3 = s2[d3];
        if (m3) return i2 = m3.nextPos, m3.result;
        if (o3 = i2, c3 = i2, 34 === t5.charCodeAt(i2) ? (e26 = '"', i2++) : (e26 = null, u2('"\\""')), null !== e26) {
          for (r4 = [], /^[^\\"]/.test(t5.charAt(i2)) ? (n3 = t5.charAt(i2), i2++) : (n3 = null, u2('[^\\\\"]')), null === n3 && (l3 = i2, p3 = i2, 92 === t5.charCodeAt(i2) ? (n3 = "\\", i2++) : (n3 = null, u2('"\\\\"')), null !== n3 ? (t5.length > i2 ? (a3 = t5.charAt(i2), i2++) : (a3 = null, u2("any character")), null !== a3 ? n3 = [n3, a3] : (n3 = null, i2 = p3)) : (n3 = null, i2 = p3), null !== n3 && (f3 = n3[0], h3 = n3[1], n3 = f3 + h3), null === n3 && (i2 = l3)); null !== n3; ) r4.push(n3), /^[^\\"]/.test(t5.charAt(i2)) ? (n3 = t5.charAt(i2), i2++) : (n3 = null, u2('[^\\\\"]')), null === n3 && (l3 = i2, p3 = i2, 92 === t5.charCodeAt(i2) ? (n3 = "\\", i2++) : (n3 = null, u2('"\\\\"')), null !== n3 ? (t5.length > i2 ? (a3 = t5.charAt(i2), i2++) : (a3 = null, u2("any character")), null !== a3 ? n3 = [n3, a3] : (n3 = null, i2 = p3)) : (n3 = null, i2 = p3), null !== n3 && (n3 = function(e27, t6, r5) {
            return t6 + r5;
          }(0, n3[0], n3[1])), null === n3 && (i2 = l3));
          null !== r4 ? (34 === t5.charCodeAt(i2) ? (n3 = '"', i2++) : (n3 = null, u2('"\\""')), null !== n3 ? e26 = [e26, r4, n3] : (e26 = null, i2 = c3)) : (e26 = null, i2 = c3);
        } else e26 = null, i2 = c3;
        if (null !== e26 && (e26 = function(e27, t6) {
          return { type: "literal", value: M2(t6.join("")) };
        }(0, e26[1])), null === e26 && (i2 = o3), null === e26) {
          if (o3 = i2, c3 = i2, 39 === t5.charCodeAt(i2) ? (e26 = "'", i2++) : (e26 = null, u2(`"'"`)), null !== e26) {
            for (r4 = [], /^[^\\']/.test(t5.charAt(i2)) ? (n3 = t5.charAt(i2), i2++) : (n3 = null, u2("[^\\\\']")), null === n3 && (l3 = i2, p3 = i2, 92 === t5.charCodeAt(i2) ? (n3 = "\\", i2++) : (n3 = null, u2('"\\\\"')), null !== n3 ? (t5.length > i2 ? (a3 = t5.charAt(i2), i2++) : (a3 = null, u2("any character")), null !== a3 ? n3 = [n3, a3] : (n3 = null, i2 = p3)) : (n3 = null, i2 = p3), null !== n3 && (n3 = function(e27, t6, r5) {
              return t6 + r5;
            }(0, n3[0], n3[1])), null === n3 && (i2 = l3)); null !== n3; ) r4.push(n3), /^[^\\']/.test(t5.charAt(i2)) ? (n3 = t5.charAt(i2), i2++) : (n3 = null, u2("[^\\\\']")), null === n3 && (l3 = i2, p3 = i2, 92 === t5.charCodeAt(i2) ? (n3 = "\\", i2++) : (n3 = null, u2('"\\\\"')), null !== n3 ? (t5.length > i2 ? (a3 = t5.charAt(i2), i2++) : (a3 = null, u2("any character")), null !== a3 ? n3 = [n3, a3] : (n3 = null, i2 = p3)) : (n3 = null, i2 = p3), null !== n3 && (n3 = function(e27, t6, r5) {
              return t6 + r5;
            }(0, n3[0], n3[1])), null === n3 && (i2 = l3));
            null !== r4 ? (39 === t5.charCodeAt(i2) ? (n3 = "'", i2++) : (n3 = null, u2(`"'"`)), null !== n3 ? e26 = [e26, r4, n3] : (e26 = null, i2 = c3)) : (e26 = null, i2 = c3);
          } else e26 = null, i2 = c3;
          null !== e26 && (e26 = function(e27, t6) {
            return { type: "literal", value: M2(t6.join("")) };
          }(0, e26[1])), null === e26 && (i2 = o3);
        }
        return s2[d3] = { nextPos: i2, result: e26 }, e26;
      }
      function k2() {
        var e26, r4, n3, a3, o3, c3, l3, p3, f3 = "number@" + i2, h3 = s2[f3];
        if (h3) return i2 = h3.nextPos, h3.result;
        for (a3 = i2, o3 = i2, c3 = i2, e26 = [], /^[0-9]/.test(t5.charAt(i2)) ? (r4 = t5.charAt(i2), i2++) : (r4 = null, u2("[0-9]")); null !== r4; ) e26.push(r4), /^[0-9]/.test(t5.charAt(i2)) ? (r4 = t5.charAt(i2), i2++) : (r4 = null, u2("[0-9]"));
        if (null !== e26 ? (46 === t5.charCodeAt(i2) ? (r4 = ".", i2++) : (r4 = null, u2('"."')), null !== r4 ? e26 = [e26, r4] : (e26 = null, i2 = c3)) : (e26 = null, i2 = c3), null !== (e26 = null !== e26 ? e26 : "")) {
          if (/^[0-9]/.test(t5.charAt(i2)) ? (n3 = t5.charAt(i2), i2++) : (n3 = null, u2("[0-9]")), null !== n3) for (r4 = []; null !== n3; ) r4.push(n3), /^[0-9]/.test(t5.charAt(i2)) ? (n3 = t5.charAt(i2), i2++) : (n3 = null, u2("[0-9]"));
          else r4 = null;
          null !== r4 ? e26 = [e26, r4] : (e26 = null, i2 = o3);
        } else e26 = null, i2 = o3;
        return null !== e26 && (l3 = e26[0], p3 = e26[1], e26 = { type: "literal", value: parseFloat((l3 ? l3.join("") : "") + p3.join("")) }), null === e26 && (i2 = a3), s2[f3] = { nextPos: i2, result: e26 }, e26;
      }
      function D2() {
        var e26, t6, r4 = "path@" + i2, n3 = s2[r4];
        return n3 ? (i2 = n3.nextPos, n3.result) : (t6 = i2, null !== (e26 = l2()) && (e26 = /* @__PURE__ */ function(e27, t7) {
          return { type: "literal", value: t7 };
        }(0, e26)), null === e26 && (i2 = t6), s2[r4] = { nextPos: i2, result: e26 }, e26);
      }
      function F2() {
        var e26, r4, n3, a3, o3, l3, p3, f3 = "type@" + i2, h3 = s2[f3];
        if (h3) return i2 = h3.nextPos, h3.result;
        if (l3 = i2, p3 = i2, "type(" === t5.substr(i2, 5) ? (e26 = "type(", i2 += 5) : (e26 = null, u2('"type("')), null !== e26) if (null !== (r4 = c2())) {
          if (/^[^ )]/.test(t5.charAt(i2)) ? (a3 = t5.charAt(i2), i2++) : (a3 = null, u2("[^ )]")), null !== a3) for (n3 = []; null !== a3; ) n3.push(a3), /^[^ )]/.test(t5.charAt(i2)) ? (a3 = t5.charAt(i2), i2++) : (a3 = null, u2("[^ )]"));
          else n3 = null;
          null !== n3 && null !== (a3 = c2()) ? (41 === t5.charCodeAt(i2) ? (o3 = ")", i2++) : (o3 = null, u2('")"')), null !== o3 ? e26 = [e26, r4, n3, a3, o3] : (e26 = null, i2 = p3)) : (e26 = null, i2 = p3);
        } else e26 = null, i2 = p3;
        else e26 = null, i2 = p3;
        return null !== e26 && (e26 = { type: "type", value: e26[2].join("") }), null === e26 && (i2 = l3), s2[f3] = { nextPos: i2, result: e26 }, e26;
      }
      function A2() {
        var e26, r4, n3, a3, o3, c3 = "regex@" + i2, l3 = s2[c3];
        if (l3) return i2 = l3.nextPos, l3.result;
        if (a3 = i2, o3 = i2, 47 === t5.charCodeAt(i2) ? (e26 = "/", i2++) : (e26 = null, u2('"/"')), null !== e26) {
          if (/^[^\/]/.test(t5.charAt(i2)) ? (n3 = t5.charAt(i2), i2++) : (n3 = null, u2("[^\\/]")), null !== n3) for (r4 = []; null !== n3; ) r4.push(n3), /^[^\/]/.test(t5.charAt(i2)) ? (n3 = t5.charAt(i2), i2++) : (n3 = null, u2("[^\\/]"));
          else r4 = null;
          null !== r4 ? (47 === t5.charCodeAt(i2) ? (n3 = "/", i2++) : (n3 = null, u2('"/"')), null !== n3 ? e26 = [e26, r4, n3] : (e26 = null, i2 = o3)) : (e26 = null, i2 = o3);
        } else e26 = null, i2 = o3;
        return null !== e26 && (e26 = function(e27, t6) {
          return { type: "regexp", value: new RegExp(t6.join("")) };
        }(0, e26[1])), null === e26 && (i2 = a3), s2[c3] = { nextPos: i2, result: e26 }, e26;
      }
      function w2() {
        var e26, r4, n3, a3, o3, c3, p3, f3, h3 = "field@" + i2, d3 = s2[h3];
        if (d3) return i2 = d3.nextPos, d3.result;
        if (c3 = i2, p3 = i2, 46 === t5.charCodeAt(i2) ? (e26 = ".", i2++) : (e26 = null, u2('"."')), null !== e26) if (null !== (r4 = l2())) {
          for (n3 = [], f3 = i2, 46 === t5.charCodeAt(i2) ? (a3 = ".", i2++) : (a3 = null, u2('"."')), null !== a3 && null !== (o3 = l2()) ? a3 = [a3, o3] : (a3 = null, i2 = f3); null !== a3; ) n3.push(a3), f3 = i2, 46 === t5.charCodeAt(i2) ? (a3 = ".", i2++) : (a3 = null, u2('"."')), null !== a3 && null !== (o3 = l2()) ? a3 = [a3, o3] : (a3 = null, i2 = f3);
          null !== n3 ? e26 = [e26, r4, n3] : (e26 = null, i2 = p3);
        } else e26 = null, i2 = p3;
        else e26 = null, i2 = p3;
        return null !== e26 && (e26 = function(e27, t6, r5) {
          return { type: "field", name: r5.reduce(function(e28, t7) {
            return e28 + t7[0] + t7[1];
          }, t6) };
        }(0, e26[1], e26[2])), null === e26 && (i2 = c3), s2[h3] = { nextPos: i2, result: e26 }, e26;
      }
      function _2() {
        var e26, r4, n3, a3, o3, l3, p3, h3 = "negation@" + i2, d3 = s2[h3];
        return d3 ? (i2 = d3.nextPos, d3.result) : (l3 = i2, p3 = i2, ":not(" === t5.substr(i2, 5) ? (e26 = ":not(", i2 += 5) : (e26 = null, u2('":not("')), null !== e26 && null !== (r4 = c2()) && null !== (n3 = f2()) && null !== (a3 = c2()) ? (41 === t5.charCodeAt(i2) ? (o3 = ")", i2++) : (o3 = null, u2('")"')), null !== o3 ? e26 = [e26, r4, n3, a3, o3] : (e26 = null, i2 = p3)) : (e26 = null, i2 = p3), null !== e26 && (e26 = { type: "not", selectors: e26[2] }), null === e26 && (i2 = l3), s2[h3] = { nextPos: i2, result: e26 }, e26);
      }
      function T2() {
        var e26, r4, n3, a3, o3, l3, p3, h3 = "matches@" + i2, d3 = s2[h3];
        return d3 ? (i2 = d3.nextPos, d3.result) : (l3 = i2, p3 = i2, ":matches(" === t5.substr(i2, 9) ? (e26 = ":matches(", i2 += 9) : (e26 = null, u2('":matches("')), null !== e26 && null !== (r4 = c2()) && null !== (n3 = f2()) && null !== (a3 = c2()) ? (41 === t5.charCodeAt(i2) ? (o3 = ")", i2++) : (o3 = null, u2('")"')), null !== o3 ? e26 = [e26, r4, n3, a3, o3] : (e26 = null, i2 = p3)) : (e26 = null, i2 = p3), null !== e26 && (e26 = { type: "matches", selectors: e26[2] }), null === e26 && (i2 = l3), s2[h3] = { nextPos: i2, result: e26 }, e26);
      }
      function P2() {
        var e26, r4, n3, a3, o3, l3, p3, h3 = "has@" + i2, d3 = s2[h3];
        return d3 ? (i2 = d3.nextPos, d3.result) : (l3 = i2, p3 = i2, ":has(" === t5.substr(i2, 5) ? (e26 = ":has(", i2 += 5) : (e26 = null, u2('":has("')), null !== e26 && null !== (r4 = c2()) && null !== (n3 = f2()) && null !== (a3 = c2()) ? (41 === t5.charCodeAt(i2) ? (o3 = ")", i2++) : (o3 = null, u2('")"')), null !== o3 ? e26 = [e26, r4, n3, a3, o3] : (e26 = null, i2 = p3)) : (e26 = null, i2 = p3), null !== e26 && (e26 = { type: "has", selectors: e26[2] }), null === e26 && (i2 = l3), s2[h3] = { nextPos: i2, result: e26 }, e26);
      }
      function I2() {
        var e26, r4, n3 = "firstChild@" + i2, a3 = s2[n3];
        return a3 ? (i2 = a3.nextPos, a3.result) : (r4 = i2, ":first-child" === t5.substr(i2, 12) ? (e26 = ":first-child", i2 += 12) : (e26 = null, u2('":first-child"')), null !== e26 && (e26 = j2(1)), null === e26 && (i2 = r4), s2[n3] = { nextPos: i2, result: e26 }, e26);
      }
      function B2() {
        var e26, r4, n3 = "lastChild@" + i2, a3 = s2[n3];
        return a3 ? (i2 = a3.nextPos, a3.result) : (r4 = i2, ":last-child" === t5.substr(i2, 11) ? (e26 = ":last-child", i2 += 11) : (e26 = null, u2('":last-child"')), null !== e26 && (e26 = R2(1)), null === e26 && (i2 = r4), s2[n3] = { nextPos: i2, result: e26 }, e26);
      }
      function O2() {
        var e26, r4, n3, a3, o3, l3, p3, f3, h3 = "nthChild@" + i2, d3 = s2[h3];
        if (d3) return i2 = d3.nextPos, d3.result;
        if (l3 = i2, p3 = i2, ":nth-child(" === t5.substr(i2, 11) ? (e26 = ":nth-child(", i2 += 11) : (e26 = null, u2('":nth-child("')), null !== e26) if (null !== (r4 = c2())) {
          if (/^[0-9]/.test(t5.charAt(i2)) ? (a3 = t5.charAt(i2), i2++) : (a3 = null, u2("[0-9]")), null !== a3) for (n3 = []; null !== a3; ) n3.push(a3), /^[0-9]/.test(t5.charAt(i2)) ? (a3 = t5.charAt(i2), i2++) : (a3 = null, u2("[0-9]"));
          else n3 = null;
          null !== n3 && null !== (a3 = c2()) ? (41 === t5.charCodeAt(i2) ? (o3 = ")", i2++) : (o3 = null, u2('")"')), null !== o3 ? e26 = [e26, r4, n3, a3, o3] : (e26 = null, i2 = p3)) : (e26 = null, i2 = p3);
        } else e26 = null, i2 = p3;
        else e26 = null, i2 = p3;
        return null !== e26 && (f3 = e26[2], e26 = j2(parseInt(f3.join(""), 10))), null === e26 && (i2 = l3), s2[h3] = { nextPos: i2, result: e26 }, e26;
      }
      function L2() {
        var e26, r4, n3, a3, o3, l3, p3, f3, h3 = "nthLastChild@" + i2, d3 = s2[h3];
        if (d3) return i2 = d3.nextPos, d3.result;
        if (l3 = i2, p3 = i2, ":nth-last-child(" === t5.substr(i2, 16) ? (e26 = ":nth-last-child(", i2 += 16) : (e26 = null, u2('":nth-last-child("')), null !== e26) if (null !== (r4 = c2())) {
          if (/^[0-9]/.test(t5.charAt(i2)) ? (a3 = t5.charAt(i2), i2++) : (a3 = null, u2("[0-9]")), null !== a3) for (n3 = []; null !== a3; ) n3.push(a3), /^[0-9]/.test(t5.charAt(i2)) ? (a3 = t5.charAt(i2), i2++) : (a3 = null, u2("[0-9]"));
          else n3 = null;
          null !== n3 && null !== (a3 = c2()) ? (41 === t5.charCodeAt(i2) ? (o3 = ")", i2++) : (o3 = null, u2('")"')), null !== o3 ? e26 = [e26, r4, n3, a3, o3] : (e26 = null, i2 = p3)) : (e26 = null, i2 = p3);
        } else e26 = null, i2 = p3;
        else e26 = null, i2 = p3;
        return null !== e26 && (f3 = e26[2], e26 = R2(parseInt(f3.join(""), 10))), null === e26 && (i2 = l3), s2[h3] = { nextPos: i2, result: e26 }, e26;
      }
      function N2() {
        var e26, r4, n3, a3, o3 = "class@" + i2, c3 = s2[o3];
        return c3 ? (i2 = c3.nextPos, c3.result) : (n3 = i2, a3 = i2, 58 === t5.charCodeAt(i2) ? (e26 = ":", i2++) : (e26 = null, u2('":"')), null !== e26 ? ("statement" === t5.substr(i2, 9).toLowerCase() ? (r4 = t5.substr(i2, 9), i2 += 9) : (r4 = null, u2('"statement"')), null === r4 && ("expression" === t5.substr(i2, 10).toLowerCase() ? (r4 = t5.substr(i2, 10), i2 += 10) : (r4 = null, u2('"expression"')), null === r4 && ("declaration" === t5.substr(i2, 11).toLowerCase() ? (r4 = t5.substr(i2, 11), i2 += 11) : (r4 = null, u2('"declaration"')), null === r4 && ("function" === t5.substr(i2, 8).toLowerCase() ? (r4 = t5.substr(i2, 8), i2 += 8) : (r4 = null, u2('"function"')), null === r4 && ("pattern" === t5.substr(i2, 7).toLowerCase() ? (r4 = t5.substr(i2, 7), i2 += 7) : (r4 = null, u2('"pattern"')))))), null !== r4 ? e26 = [e26, r4] : (e26 = null, i2 = a3)) : (e26 = null, i2 = a3), null !== e26 && (e26 = { type: "class", name: e26[1] }), null === e26 && (i2 = n3), s2[o3] = { nextPos: i2, result: e26 }, e26);
      }
      function j2(e26) {
        return { type: "nth-child", index: { type: "literal", value: e26 } };
      }
      function R2(e26) {
        return { type: "nth-last-child", index: { type: "literal", value: e26 } };
      }
      function M2(e26) {
        return e26.replace(/\\(.)/g, function(e27, t6) {
          switch (t6) {
            case "a":
              return "a";
            case "b":
              return "\b";
            case "f":
              return "\f";
            case "n":
              return "\n";
            case "r":
              return "\r";
            case "t":
              return "	";
            case "v":
              return "\v";
            default:
              return t6;
          }
        });
      }
      var V2 = n2[r3]();
      if (null === V2 || i2 !== t5.length) {
        var U2 = Math.max(i2, a2), q2 = U2 < t5.length ? t5.charAt(U2) : null, W2 = function() {
          for (var e26 = 1, r4 = 1, n3 = false, o3 = 0; o3 < Math.max(i2, a2); o3++) {
            var s3 = t5.charAt(o3);
            "\n" === s3 ? (n3 || e26++, r4 = 1, n3 = false) : "\r" === s3 || "\u2028" === s3 || "\u2029" === s3 ? (e26++, r4 = 1, n3 = true) : (r4++, n3 = false);
          }
          return { line: e26, column: r4 };
        }();
        throw new this.SyntaxError(function(e26) {
          e26.sort();
          for (var t6 = null, r4 = [], n3 = 0; n3 < e26.length; n3++) e26[n3] !== t6 && (r4.push(e26[n3]), t6 = e26[n3]);
          return r4;
        }(o2), q2, U2, W2.line, W2.column);
      }
      return V2;
    }, toSource: function() {
      return this._source;
    }, SyntaxError: function(t5, r3, n2, i2, a2) {
      this.name = "SyntaxError", this.expected = t5, this.found = r3, this.message = function(t6, r4) {
        var n3;
        switch (t6.length) {
          case 0:
            n3 = "end of input";
            break;
          case 1:
            n3 = t6[0];
            break;
          default:
            n3 = t6.slice(0, t6.length - 1).join(", ") + " or " + t6[t6.length - 1];
        }
        return "Expected " + n3 + " but " + (r4 ? e25(r4) : "end of input") + " found.";
      }(t5, r3), this.offset = n2, this.line = i2, this.column = a2;
    } };
    return t4.SyntaxError.prototype = Error.prototype, t4;
  }();
  t3.exports ? t3.exports = r2 : e.esquery = r2;
}));
var wC = r(function(e25) {
  !function() {
    var t3 = Zu, r2 = AC, n2 = Array.isArray || function(e26) {
      return "[object Array]" === {}.toString.call(e26);
    }, a2 = {}, o2 = {};
    function s2() {
      function e26(t4, r3, i2) {
        var a3, o3, s4;
        if (0 === i2.length) return t4 === r3;
        if (null == r3) return false;
        if (a3 = r3[i2[0]], o3 = i2.slice(1), n2(a3)) {
          for (s4 = 0, l = a3.length; s4 < l; ++s4) if (e26(t4, a3[s4], o3)) return true;
          return false;
        }
        return e26(t4, a3, o3);
      }
      function s3(r3, n3, l2) {
        var f3, h3, d3, m2;
        if (!n3) return true;
        if (!r3) return false;
        switch (l2 || (l2 = []), n3.type) {
          case "wildcard":
            return true;
          case "identifier":
            return n3.value.toLowerCase() === r3.type.toLowerCase();
          case "field":
            return e26(r3, l2[(f3 = n3.name.split(".")).length - 1], f3);
          case "matches":
            for (h3 = 0, d3 = n3.selectors.length; h3 < d3; ++h3) if (s3(r3, n3.selectors[h3], l2)) return true;
            return false;
          case "compound":
            for (h3 = 0, d3 = n3.selectors.length; h3 < d3; ++h3) if (!s3(r3, n3.selectors[h3], l2)) return false;
            return true;
          case "not":
            for (h3 = 0, d3 = n3.selectors.length; h3 < d3; ++h3) if (s3(r3, n3.selectors[h3], l2)) return false;
            return true;
          case "has":
            var g2, y2 = [];
            for (h3 = 0, d3 = n3.selectors.length; h3 < d3; ++h3) g2 = [], t3.traverse(r3, { enter: function(e27, t4) {
              null != t4 && g2.unshift(t4), s3(e27, n3.selectors[h3], g2) && y2.push(e27);
            }, leave: function() {
              g2.shift();
            } });
            return 0 !== y2.length;
          case "child":
            return !!s3(r3, n3.right, l2) && s3(l2[0], n3.left, l2.slice(1));
          case "descendant":
            if (s3(r3, n3.right, l2)) {
              for (h3 = 0, d3 = l2.length; h3 < d3; ++h3) if (s3(l2[h3], n3.left, l2.slice(h3 + 1))) return true;
            }
            return false;
          case "attribute":
            switch (m2 = function(e27, t4) {
              var r4, n4 = t4.split(".");
              for (r4 = 0; r4 < n4.length; r4++) {
                if (null == e27) return e27;
                e27 = e27[n4[r4]];
              }
              return e27;
            }(r3, n3.name), n3.operator) {
              case null:
              case void 0:
                return null != m2;
              case "=":
                switch (n3.value.type) {
                  case "regexp":
                    return "string" == typeof m2 && n3.value.value.test(m2);
                  case "literal":
                    return "" + n3.value.value == "" + m2;
                  case "type":
                    return n3.value.value === i(m2);
                }
              case "!=":
                switch (n3.value.type) {
                  case "regexp":
                    return !n3.value.value.test(m2);
                  case "literal":
                    return "" + n3.value.value != "" + m2;
                  case "type":
                    return n3.value.value !== i(m2);
                }
              case "<=":
                return m2 <= n3.value.value;
              case "<":
                return m2 < n3.value.value;
              case ">":
                return m2 > n3.value.value;
              case ">=":
                return m2 >= n3.value.value;
            }
          case "sibling":
            return s3(r3, n3.right, l2) && u2(r3, n3.left, l2, a2) || n3.left.subject && s3(r3, n3.left, l2) && u2(r3, n3.right, l2, o2);
          case "adjacent":
            return s3(r3, n3.right, l2) && c2(r3, n3.left, l2, a2) || n3.right.subject && s3(r3, n3.left, l2) && c2(r3, n3.right, l2, o2);
          case "nth-child":
            return s3(r3, n3.right, l2) && p2(r3, l2, function(e27) {
              return n3.index.value - 1;
            });
          case "nth-last-child":
            return s3(r3, n3.right, l2) && p2(r3, l2, function(e27) {
              return e27 - n3.index.value;
            });
          case "class":
            if (!r3.type) return false;
            switch (n3.name.toLowerCase()) {
              case "statement":
                if ("Statement" === r3.type.slice(-9)) return true;
              case "declaration":
                return "Declaration" === r3.type.slice(-11);
              case "pattern":
                if ("Pattern" === r3.type.slice(-7)) return true;
              case "expression":
                return "Expression" === r3.type.slice(-10) || "Literal" === r3.type.slice(-7) || "Identifier" === r3.type && (0 === l2.length || "MetaProperty" !== l2[0].type) || "MetaProperty" === r3.type;
              case "function":
                return "Function" === r3.type.slice(0, 8) || "ArrowFunctionExpression" === r3.type;
            }
            throw new Error("Unknown class name: " + n3.name);
        }
        throw new Error("Unknown selector type: " + n3.type);
      }
      function u2(e27, r3, i2, o3) {
        var u3, c3, l2, p3, f3, h3, d3, m2, g2 = i2[0];
        if (!g2) return false;
        for (p3 = 0, f3 = (l2 = t3.VisitorKeys[g2.type]).length; p3 < f3; ++p3) if (u3 = g2[l2[p3]], n2(u3)) {
          if ((c3 = u3.indexOf(e27)) < 0) continue;
          for (o3 === a2 ? (d3 = 0, m2 = c3) : (d3 = c3 + 1, m2 = u3.length), h3 = d3; h3 < m2; ++h3) if (s3(u3[h3], r3, i2)) return true;
        }
        return false;
      }
      function c2(e27, r3, i2, u3) {
        var c3, l2, p3, f3, h3, d3 = i2[0];
        if (!d3) return false;
        for (p3 = 0, f3 = (l2 = t3.VisitorKeys[d3.type]).length; p3 < f3; ++p3) if (c3 = d3[l2[p3]], n2(c3)) {
          if ((h3 = c3.indexOf(e27)) < 0) continue;
          if (u3 === a2 && h3 > 0 && s3(c3[h3 - 1], r3, i2)) return true;
          if (u3 === o2 && h3 < c3.length - 1 && s3(c3[h3 + 1], r3, i2)) return true;
        }
        return false;
      }
      function p2(e27, r3, i2) {
        var a3, o3, s4, u3, c3, l2 = r3[0];
        if (!l2) return false;
        for (s4 = 0, u3 = (o3 = t3.VisitorKeys[l2.type]).length; s4 < u3; ++s4) if (a3 = l2[o3[s4]], n2(a3) && (c3 = a3.indexOf(e27)) >= 0 && c3 === i2(a3.length)) return true;
        return false;
      }
      function f2(e27, r3) {
        var n3, a3, o3, u3, c3, l2 = [], p3 = [];
        return r3 ? (n3 = function e28(t4, r4) {
          var n4, a4;
          if (null == t4 || "object" != i(t4)) return [];
          for (a4 in null == r4 && (r4 = t4), n4 = t4.subject ? [r4] : [], t4) ({}).hasOwnProperty.call(t4, a4) && [].push.apply(n4, e28(t4[a4], "left" === a4 ? t4[a4] : r4));
          return n4;
        }(r3), t3.traverse(e27, { enter: function(e28, t4) {
          if (null != t4 && l2.unshift(t4), s3(e28, r3, l2)) if (n3.length) for (a3 = 0, o3 = n3.length; a3 < o3; ++a3) for (s3(e28, n3[a3], l2) && p3.push(e28), u3 = 0, c3 = l2.length; u3 < c3; ++u3) s3(l2[u3], n3[a3], l2.slice(u3 + 1)) && p3.push(l2[u3]);
          else p3.push(e28);
        }, leave: function() {
          l2.shift();
        } }), p3) : p3;
      }
      function h2(e27) {
        return r2.parse(e27);
      }
      function d2(e27, t4) {
        return f2(e27, h2(t4));
      }
      return d2.parse = h2, d2.match = f2, d2.matches = s3, d2.query = d2;
    }
    e25.exports ? e25.exports = s2() : this.esquery = s2();
  }();
});
var _C = n(Zx);
function TC(e25) {
  return e25 && "object" == i(e25) && "default" in e25 ? e25.default : e25;
}
var PC = TC(Ws);
var IC = TC(Qc);
var BC = TC(Cu);
var OC = TC(Ox);
var LC = TC(_C);
var NC = TC(Pu);
var jC = TC(FC);
var RC = TC(wC);
var MC;
var VC = function(e25, t3) {
  for (var r2 = {}, n2 = 0, i2 = Object.entries(e25); n2 < i2.length; n2++) {
    var a2 = b(i2[n2], 2), o2 = a2[0], s2 = a2[1];
    Object.hasOwnProperty.call(t3, o2) || (r2[o2] = s2);
  }
  return r2;
}(Fy.globals.es2015, Fy.globals.es5);
var UC = { Atomics: false, SharedArrayBuffer: false };
var qC = new Map(Object.entries({ builtin: { globals: Fy.globals.es5 }, es6: { globals: VC, parserOptions: { ecmaVersion: 6 } }, es2015: { globals: VC, parserOptions: { ecmaVersion: 6 } }, es2017: { globals: p({}, VC, {}, UC), parserOptions: { ecmaVersion: 8 } }, es2020: { globals: p({}, VC, {}, UC, {}, { BigInt: false, BigInt64Array: false, BigUint64Array: false }), parserOptions: { ecmaVersion: 11 } }, browser: { globals: Fy.globals.browser }, node: { globals: Fy.globals.node, parserOptions: { ecmaFeatures: { globalReturn: true } } }, "shared-node-browser": { globals: Fy.globals["shared-node-browser"] }, worker: { globals: Fy.globals.worker }, serviceworker: { globals: Fy.globals.serviceworker }, commonjs: { globals: Fy.globals.commonjs, parserOptions: { ecmaFeatures: { globalReturn: true } } }, amd: { globals: Fy.globals.amd }, mocha: { globals: Fy.globals.mocha }, jasmine: { globals: Fy.globals.jasmine }, jest: { globals: Fy.globals.jest }, phantomjs: { globals: Fy.globals.phantomjs }, jquery: { globals: Fy.globals.jquery }, qunit: { globals: Fy.globals.qunit }, prototypejs: { globals: Fy.globals.prototypejs }, shelljs: { globals: Fy.globals.shelljs }, meteor: { globals: Fy.globals.meteor }, mongo: { globals: Fy.globals.mongo }, protractor: { globals: Fy.globals.protractor }, applescript: { globals: Fy.globals.applescript }, nashorn: { globals: Fy.globals.nashorn }, atomtest: { globals: Fy.globals.atomtest }, embertest: { globals: Fy.globals.embertest }, webextensions: { globals: Fy.globals.webextensions }, greasemonkey: { globals: Fy.globals.greasemonkey } }));
var WC = "eslint@6.7.1";
var $C = "sha512-UWzBS79pNcsDSxgxbdjkmzn/B6BhsXMfUaOHnNwyE8nD+Q6pyT96ow2MccVayUTV4yMid4qLhMiQaywctRkBLA==";
var GC = {};
var zC = { type: "range", registry: true, raw: "eslint@^6.0.0", name: "eslint", escapedName: "eslint", rawSpec: "^6.0.0", saveSpec: null, fetchSpec: "^6.0.0" };
var HC = ["#DEV:/"];
var KC = "https://registry.npmjs.org/eslint/-/eslint-6.7.1.tgz";
var JC = "269ccccec3ef60ab32358a44d147ac209154b919";
var QC = "/home/runner/work/eslint4b/eslint4b";
var XC = { name: "Nicholas C. Zakas", email: "nicholas+npm@nczconsulting.com" };
var YC = { eslint: "./bin/eslint.js" };
var ZC = { url: "https://github.com/eslint/eslint/issues/" };
var eS = { "@babel/code-frame": "^7.0.0", ajv: "^6.10.0", chalk: "^2.1.0", "cross-spawn": "^6.0.5", debug: "^4.0.1", doctrine: "^3.0.0", "eslint-scope": "^5.0.0", "eslint-utils": "^1.4.3", "eslint-visitor-keys": "^1.1.0", espree: "^6.1.2", esquery: "^1.0.1", esutils: "^2.0.2", "file-entry-cache": "^5.0.1", "functional-red-black-tree": "^1.0.1", "glob-parent": "^5.0.0", globals: "^12.1.0", ignore: "^4.0.6", "import-fresh": "^3.0.0", imurmurhash: "^0.1.4", inquirer: "^7.0.0", "is-glob": "^4.0.0", "js-yaml": "^3.13.1", "json-stable-stringify-without-jsonify": "^1.0.1", levn: "^0.3.0", lodash: "^4.17.14", minimatch: "^3.0.4", mkdirp: "^0.5.1", "natural-compare": "^1.4.0", optionator: "^0.8.3", progress: "^2.0.0", regexpp: "^2.0.1", semver: "^6.1.2", "strip-ansi": "^5.2.0", "strip-json-comments": "^3.0.1", table: "^5.2.3", "text-table": "^0.2.0", "v8-compile-cache": "^2.0.3" };
var tS = "An AST-based pattern checker for JavaScript.";
var rS = { "@babel/core": "^7.4.3", "@babel/preset-env": "^7.4.3", acorn: "^7.1.0", "babel-loader": "^8.0.5", chai: "^4.0.1", cheerio: "^0.22.0", "common-tags": "^1.8.0", "core-js": "^3.1.3", dateformat: "^3.0.3", ejs: "^2.6.1", eslint: "file:.", "eslint-config-eslint": "file:packages/eslint-config-eslint", "eslint-plugin-eslint-plugin": "^2.0.1", "eslint-plugin-internal-rules": "file:tools/internal-rules", "eslint-plugin-jsdoc": "^15.9.5", "eslint-plugin-node": "^9.0.0", "eslint-release": "^1.2.0", eslump: "^2.0.0", esprima: "^4.0.1", glob: "^7.1.3", jsdoc: "^3.5.5", karma: "^4.0.1", "karma-chrome-launcher": "^2.2.0", "karma-mocha": "^1.3.0", "karma-mocha-reporter": "^2.2.3", "karma-webpack": "^4.0.0-rc.6", leche: "^2.2.3", "lint-staged": "^8.1.5", "load-perf": "^0.2.0", markdownlint: "^0.15.0", "markdownlint-cli": "^0.17.0", "metro-memory-fs": "^0.54.1", mocha: "^6.1.2", "mocha-junit-reporter": "^1.23.0", "npm-license": "^0.3.3", nyc: "^14.1.1", proxyquire: "^2.0.1", puppeteer: "^1.18.0", recast: "^0.18.1", "regenerator-runtime": "^0.13.2", shelljs: "^0.8.2", sinon: "^7.3.2", temp: "^0.9.0", webpack: "^4.35.0", "webpack-cli": "^3.3.5", yorkie: "^2.0.0" };
var nS = { node: "^8.10.0 || ^10.13.0 || >=11.10.1" };
var iS = ["LICENSE", "README.md", "bin", "conf", "lib", "messages"];
var aS = "https://opencollective.com/eslint";
var oS = { "pre-commit": "lint-staged" };
var sS = ["ast", "lint", "javascript", "ecmascript", "espree"];
var uS = { type: "git", url: "git+https://github.com/eslint/eslint.git" };
var cS = { docs: "node Makefile.js docs", fix: "node Makefile.js lint -- fix", fuzz: "node Makefile.js fuzz", "generate-alpharelease": "node Makefile.js generatePrerelease -- alpha", "generate-betarelease": "node Makefile.js generatePrerelease -- beta", "generate-rcrelease": "node Makefile.js generatePrerelease -- rc", "generate-release": "node Makefile.js generateRelease", gensite: "node Makefile.js gensite", lint: "node Makefile.js lint", perf: "node Makefile.js perf", "publish-release": "node Makefile.js publishRelease", test: "node Makefile.js test", "test:cli": "mocha", webpack: "node Makefile.js webpack" };
var lS = { _from: "eslint@^6.0.0", _id: WC, _inBundle: false, _integrity: $C, _location: "/eslint", _phantomChildren: GC, _requested: zC, _requiredBy: HC, _resolved: KC, _shasum: JC, _spec: "eslint@^6.0.0", _where: QC, author: XC, bin: YC, bugs: ZC, bundleDependencies: false, dependencies: eS, deprecated: false, description: tS, devDependencies: rS, engines: nS, files: iS, funding: aS, gitHooks: oS, homepage: "https://eslint.org", keywords: sS, license: "MIT", "lint-staged": { "*.js": ["eslint --fix", "git add"], "*.md": "markdownlint" }, main: "./lib/api.js", name: "eslint", repository: uS, scripts: cS, version: "6.7.1" };
var pS = Object.freeze({ __proto__: null, _from: "eslint@^6.0.0", _id: WC, _inBundle: false, _integrity: $C, _location: "/eslint", _phantomChildren: GC, _requested: zC, _requiredBy: HC, _resolved: KC, _shasum: JC, _spec: "eslint@^6.0.0", _where: QC, author: XC, bin: YC, bugs: ZC, bundleDependencies: false, dependencies: eS, deprecated: false, description: tS, devDependencies: rS, engines: nS, files: iS, funding: aS, gitHooks: oS, homepage: "https://eslint.org", keywords: sS, license: "MIT", main: "./lib/api.js", name: "eslint", repository: uS, scripts: cS, version: "6.7.1", default: lS });
var fS = Fy.createCommonjsModule(function(e25) {
  var t3 = ["off", "warn", "error"], r2 = t3.reduce(function(e26, t4, r3) {
    return e26[t4] = r3, e26;
  }, {}), n2 = [0, 1, 2, "off", "warn", "error"];
  e25.exports = { getRuleSeverity: function(e26) {
    var t4 = Array.isArray(e26) ? e26[0] : e26;
    return 0 === t4 || 1 === t4 || 2 === t4 ? t4 : "string" == typeof t4 && r2[t4.toLowerCase()] || 0;
  }, normalizeToStrings: function(e26) {
    e26.rules && Object.keys(e26.rules).forEach(function(r3) {
      var n3 = e26.rules[r3];
      "number" == typeof n3 ? e26.rules[r3] = t3[n3] || t3[0] : Array.isArray(n3) && "number" == typeof n3[0] && (n3[0] = t3[n3[0]] || t3[0]);
    });
  }, isErrorSeverity: function(t4) {
    return 2 === e25.exports.getRuleSeverity(t4);
  }, isValidSeverity: function(e26) {
    var t4 = Array.isArray(e26) ? e26[0] : e26;
    return "string" == typeof t4 && (t4 = t4.toLowerCase()), -1 !== n2.indexOf(t4);
  }, isEverySeverityValid: function(e26) {
    var t4 = this;
    return Object.keys(e26).every(function(r3) {
      return t4.isValidSeverity(e26[r3]);
    });
  }, normalizeConfigGlobal: function(e26) {
    switch (e26) {
      case "off":
        return "off";
      case true:
      case "true":
      case "writeable":
      case "writable":
        return "writable";
      case null:
      case false:
      case "false":
      case "readable":
      case "readonly":
        return "readonly";
      default:
        throw new Error("'".concat(e26, "' is not a valid configuration for a global (use 'readonly', 'writable', or 'off')"));
    }
  } };
});
var hS = (fS.getRuleSeverity, fS.normalizeToStrings, fS.isErrorSeverity, fS.isValidSeverity, fS.isEverySeverityValid, fS.normalizeConfigGlobal, { env: { type: "object" }, extends: { $ref: "#/definitions/stringOrStrings" }, globals: { type: "object" }, overrides: { type: "array", items: { $ref: "#/definitions/overrideConfig" }, additionalItems: false }, parser: { type: ["string", "null"] }, parserOptions: { type: "object" }, plugins: { type: "array" }, processor: { type: "string" }, rules: { type: "object" }, settings: { type: "object" }, noInlineConfig: { type: "boolean" }, reportUnusedDisableDirectives: { type: "boolean" }, ecmaFeatures: { type: "object" } });
var dS = { definitions: { stringOrStrings: { oneOf: [{ type: "string" }, { type: "array", items: { type: "string" }, additionalItems: false }] }, stringOrStringsRequired: { oneOf: [{ type: "string" }, { type: "array", items: { type: "string" }, additionalItems: false, minItems: 1 }] }, objectConfig: { type: "object", properties: p({ root: { type: "boolean" }, ignorePatterns: { $ref: "#/definitions/stringOrStrings" } }, hS), additionalProperties: false }, overrideConfig: { type: "object", properties: p({ excludedFiles: { $ref: "#/definitions/stringOrStrings" }, files: { $ref: "#/definitions/stringOrStringsRequired" } }, hS), required: ["files"], additionalProperties: false } }, $ref: "#/definitions/objectConfig" };
var mS = /* @__PURE__ */ new Map();
var gS = function() {
  var e25 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t3 = new OC(p({ meta: false, useDefaults: true, validateSchema: false, missingRefs: "ignore", verbose: true, schemaId: "auto" }, e25));
  return t3.addMetaSchema(LC), t3._opts.defaultMeta = LC.id, t3;
}();
var yS = /* @__PURE__ */ new WeakMap();
var vS = Function.prototype;
var xS = { ESLINT_LEGACY_ECMAFEATURES: "The 'ecmaFeatures' config file property is deprecated, and has no effect." };
var bS = { error: 2, warn: 1, off: 0 };
function ES(e25) {
  if (!e25) return null;
  var t3 = e25.schema || e25.meta && e25.meta.schema;
  return Array.isArray(t3) ? t3.length ? { type: "array", items: t3, minItems: 0, maxItems: t3.length } : { type: "array", minItems: 0, maxItems: 0 } : t3 || null;
}
function CS(e25, t3, r2) {
  var n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
  try {
    0 !== function(e26) {
      var t4 = Array.isArray(e26) ? e26[0] : e26, r3 = "string" == typeof t4 ? bS[t4.toLowerCase()] : t4;
      if (0 === r3 || 1 === r3 || 2 === r3) return r3;
      throw new Error("	Severity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '".concat(BC.inspect(t4).replace(/'/g, '"').replace(/\n/g, ""), "').\n"));
    }(r2) && function(e26, t4) {
      if (!yS.has(e26)) {
        var r3 = ES(e26);
        r3 && yS.set(e26, gS.compile(r3));
      }
      var n3 = yS.get(e26);
      if (n3 && (n3(t4), n3.errors)) throw new Error(n3.errors.map(function(e27) {
        return "	Value ".concat(JSON.stringify(e27.data), " ").concat(e27.message, ".\n");
      }).join(""));
    }(e25, Array.isArray(r2) ? r2.slice(1) : []);
  } catch (e26) {
    var i2 = 'Configuration for rule "'.concat(t3, '" is invalid:\n').concat(e26.message);
    throw "string" == typeof n2 ? new Error("".concat(n2, ":\n	").concat(i2)) : new Error(i2);
  }
}
function SS(e25, t3) {
  var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : vS;
  e25 && Object.keys(e25).forEach(function(e26) {
    if (!(r2(e26) || qC.get(e26) || null)) throw new Error("".concat(t3, ':\n	Environment key "').concat(e26, '" is unknown\n'));
  });
}
function kS(e25, t3) {
  var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : vS;
  e25 && Object.keys(e25).forEach(function(n2) {
    CS(r2(n2) || mS.get(n2) || null, n2, e25[n2], t3);
  });
}
function DS(e25) {
  var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
  e25 && Object.entries(e25).forEach(function(e26) {
    var r2 = b(e26, 2), n2 = r2[0], i2 = r2[1];
    try {
      fS.normalizeConfigGlobal(i2);
    } catch (i3) {
      throw new Error("ESLint configuration of global '".concat(n2, "' in ").concat(t3, " is invalid:\n").concat(i3.message));
    }
  });
}
function FS(e25, t3, r2) {
  if (e25 && !r2(e25)) throw new Error("ESLint configuration of processor in '".concat(t3, "' is invalid: '").concat(e25, "' was not found."));
}
var AS = Fy.lodash.memoize(function(e25, t3) {
  var r2 = PC.relative(process.cwd(), e25), n2 = xS[t3];
  process.emitWarning("".concat(n2, ' (found in "').concat(r2, '")'), "DeprecationWarning", t3);
});
function wS(e25) {
  var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
  if (!(MC = MC || gS.compile(dS))(e25)) throw new Error("ESLint configuration in ".concat(t3, " is invalid:\n").concat(function(e26) {
    return e26.map(function(e27) {
      if ("additionalProperties" === e27.keyword) {
        var t4 = e27.dataPath.length ? "".concat(e27.dataPath.slice(1), ".").concat(e27.params.additionalProperty) : e27.params.additionalProperty;
        return 'Unexpected top-level property "'.concat(t4, '"');
      }
      if ("type" === e27.keyword) {
        var r2 = e27.dataPath.slice(1), n2 = Array.isArray(e27.schema) ? e27.schema.join("/") : e27.schema, i2 = JSON.stringify(e27.data);
        return 'Property "'.concat(r2, '" is the wrong type (expected ').concat(n2, " but got `").concat(i2, "`)");
      }
      var a2 = "." === e27.dataPath[0] ? e27.dataPath.slice(1) : e27.dataPath;
      return '"'.concat(a2, '" ').concat(e27.message, ". Value: ").concat(JSON.stringify(e27.data));
    }).map(function(e27) {
      return "	- ".concat(e27, ".\n");
    }).join("");
  }(MC.errors)));
  Object.hasOwnProperty.call(e25, "ecmaFeatures") && AS(t3, "ESLINT_LEGACY_ECMAFEATURES");
}
var _S = /* @__PURE__ */ new WeakSet();
var TS = { getRuleOptionsSchema: ES, validate: function(e25, t3, r2, n2) {
  wS(e25, t3), kS(e25.rules, t3, r2), SS(e25.env, t3, n2), DS(e25.globals, t3);
  var i2 = true, a2 = false, o2 = void 0;
  try {
    for (var s2, u2 = (e25.overrides || [])[Symbol.iterator](); !(i2 = (s2 = u2.next()).done); i2 = true) {
      var c2 = s2.value;
      kS(c2.rules, t3, r2), SS(c2.env, t3, n2), DS(e25.globals, t3);
    }
  } catch (e26) {
    a2 = true, o2 = e26;
  } finally {
    try {
      i2 || null == u2.return || u2.return();
    } finally {
      if (a2) throw o2;
    }
  }
}, validateConfigArray: function(e25) {
  var t3 = Map.prototype.get.bind(e25.pluginEnvironments), r2 = Map.prototype.get.bind(e25.pluginProcessors), n2 = Map.prototype.get.bind(e25.pluginRules), i2 = true, a2 = false, o2 = void 0;
  try {
    for (var s2, u2 = e25[Symbol.iterator](); !(i2 = (s2 = u2.next()).done); i2 = true) {
      var c2 = s2.value;
      _S.has(c2) || (_S.add(c2), SS(c2.env, c2.name, t3), DS(c2.globals, c2.name), FS(c2.processor, c2.name, r2), kS(c2.rules, c2.name, n2));
    }
  } catch (e26) {
    a2 = true, o2 = e26;
  } finally {
    try {
      i2 || null == u2.return || u2.return();
    } finally {
      if (a2) throw o2;
    }
  }
}, validateConfigSchema: wS, validateRuleOptions: CS };
var PS = function() {
  function e25() {
    a(this, e25), this.current = null;
  }
  return s(e25, [{ key: "getOneToken", value: function() {
    return this.moveNext() ? this.current : null;
  } }, { key: "getAllTokens", value: function() {
    for (var e26 = []; this.moveNext(); ) e26.push(this.current);
    return e26;
  } }, { key: "moveNext", value: function() {
    throw new Error("Not implemented.");
  } }]), e25;
}();
function IS(e25) {
  return e25.range[0];
}
var BS = { search: function(e25, t3) {
  return Fy.lodash.sortedIndexBy(e25, { range: [t3] }, IS);
}, getFirstIndex: function(e25, t3, r2) {
  if (r2 in t3) return t3[r2];
  if (r2 - 1 in t3) {
    var n2 = t3[r2 - 1], i2 = 0 <= n2 && n2 < e25.length ? e25[n2] : null;
    return i2 && i2.range[0] >= r2 ? n2 : n2 + 1;
  }
  return 0;
}, getLastIndex: function(e25, t3, r2) {
  if (r2 in t3) return t3[r2] - 1;
  if (r2 - 1 in t3) {
    var n2 = t3[r2 - 1], i2 = 0 <= n2 && n2 < e25.length ? e25[n2] : null;
    return i2 && i2.range[1] > r2 ? n2 - 1 : n2;
  }
  return e25.length - 1;
} };
var OS = function(e25) {
  function t3(e26, r2, n2, i2, o2) {
    var s2;
    return a(this, t3), (s2 = v(this, h(t3).call(this))).tokens = e26, s2.comments = r2, s2.tokenIndex = BS.getLastIndex(e26, n2, o2), s2.commentIndex = BS.search(r2, o2) - 1, s2.border = i2, s2;
  }
  return f(t3, PS), s(t3, [{ key: "moveNext", value: function() {
    var e26 = 0 <= this.tokenIndex ? this.tokens[this.tokenIndex] : null, t4 = 0 <= this.commentIndex ? this.comments[this.commentIndex] : null;
    return e26 && (!t4 || e26.range[1] > t4.range[1]) ? (this.current = e26, this.tokenIndex -= 1) : t4 ? (this.current = t4, this.commentIndex -= 1) : this.current = null, !!this.current && (-1 === this.border || this.current.range[0] >= this.border);
  } }]), t3;
}();
var LS = function(e25) {
  function t3(e26, r2, n2, i2, o2) {
    var s2;
    return a(this, t3), (s2 = v(this, h(t3).call(this))).tokens = e26, s2.index = BS.getLastIndex(e26, n2, o2), s2.indexEnd = BS.getFirstIndex(e26, n2, i2), s2;
  }
  return f(t3, PS), s(t3, [{ key: "moveNext", value: function() {
    return !!(this.index >= this.indexEnd) && (this.current = this.tokens[this.index], this.index -= 1, true);
  } }, { key: "getOneToken", value: function() {
    return this.index >= this.indexEnd ? this.tokens[this.index] : null;
  } }]), t3;
}();
var NS = function(e25) {
  function t3(e26) {
    var r2;
    return a(this, t3), (r2 = v(this, h(t3).call(this))).cursor = e26, r2;
  }
  return f(t3, PS), s(t3, [{ key: "moveNext", value: function() {
    var e26 = this.cursor.moveNext();
    return this.current = this.cursor.current, e26;
  } }]), t3;
}();
var jS = function(e25) {
  function t3(e26, r2) {
    var n2;
    return a(this, t3), (n2 = v(this, h(t3).call(this, e26))).predicate = r2, n2;
  }
  return f(t3, NS), s(t3, [{ key: "moveNext", value: function() {
    for (var e26 = this.predicate; x(h(t3.prototype), "moveNext", this).call(this); ) if (e26(this.current)) return true;
    return false;
  } }]), t3;
}();
var RS = function(e25) {
  function t3(e26, r2, n2, i2, o2) {
    var s2;
    return a(this, t3), (s2 = v(this, h(t3).call(this))).tokens = e26, s2.comments = r2, s2.tokenIndex = BS.getFirstIndex(e26, n2, i2), s2.commentIndex = BS.search(r2, i2), s2.border = o2, s2;
  }
  return f(t3, PS), s(t3, [{ key: "moveNext", value: function() {
    var e26 = this.tokenIndex < this.tokens.length ? this.tokens[this.tokenIndex] : null, t4 = this.commentIndex < this.comments.length ? this.comments[this.commentIndex] : null;
    return e26 && (!t4 || e26.range[0] < t4.range[0]) ? (this.current = e26, this.tokenIndex += 1) : t4 ? (this.current = t4, this.commentIndex += 1) : this.current = null, !!this.current && (-1 === this.border || this.current.range[1] <= this.border);
  } }]), t3;
}();
var MS = function(e25) {
  function t3(e26, r2, n2, i2, o2) {
    var s2;
    return a(this, t3), (s2 = v(this, h(t3).call(this))).tokens = e26, s2.index = BS.getFirstIndex(e26, n2, i2), s2.indexEnd = BS.getLastIndex(e26, n2, o2), s2;
  }
  return f(t3, PS), s(t3, [{ key: "moveNext", value: function() {
    return !!(this.index <= this.indexEnd) && (this.current = this.tokens[this.index], this.index += 1, true);
  } }, { key: "getOneToken", value: function() {
    return this.index <= this.indexEnd ? this.tokens[this.index] : null;
  } }, { key: "getAllTokens", value: function() {
    return this.tokens.slice(this.index, this.indexEnd + 1);
  } }]), t3;
}();
var VS = function(e25) {
  function t3(e26, r2) {
    var n2;
    return a(this, t3), (n2 = v(this, h(t3).call(this, e26))).count = r2, n2;
  }
  return f(t3, NS), s(t3, [{ key: "moveNext", value: function() {
    return !!(0 < this.count) && (this.count -= 1, x(h(t3.prototype), "moveNext", this).call(this));
  } }]), t3;
}();
var US = function(e25) {
  function t3(e26, r2) {
    var n2;
    return a(this, t3), (n2 = v(this, h(t3).call(this, e26))).count = r2, n2;
  }
  return f(t3, NS), s(t3, [{ key: "moveNext", value: function() {
    for (; 0 < this.count; ) if (this.count -= 1, !x(h(t3.prototype), "moveNext", this).call(this)) return false;
    return x(h(t3.prototype), "moveNext", this).call(this);
  } }]), t3;
}();
var qS = function() {
  function e25(t3, r2) {
    a(this, e25), this.TokenCursor = t3, this.TokenCommentCursor = r2;
  }
  return s(e25, [{ key: "createBaseCursor", value: function(e26, t3, r2, n2, i2, a2) {
    return new (a2 ? this.TokenCommentCursor : this.TokenCursor)(e26, t3, r2, n2, i2);
  } }, { key: "createCursor", value: function(e26, t3, r2, n2, i2, a2, o2, s2, u2) {
    var c2 = this.createBaseCursor(e26, t3, r2, n2, i2, a2);
    return o2 && (c2 = new jS(c2, o2)), 1 <= s2 && (c2 = new US(c2, s2)), 0 <= u2 && (c2 = new VS(c2, u2)), c2;
  } }]), e25;
}();
var WS = { forward: new qS(MS, RS), backward: new qS(LS, OS) };
var $S = function(e25) {
  function t3(e26, r2, n2, i2, o2, s2, u2) {
    var c2;
    return a(this, t3), (c2 = v(this, h(t3).call(this, e26, r2, n2, i2, o2))).index = Math.max(0, c2.index - s2), c2.indexEnd = Math.min(e26.length - 1, c2.indexEnd + u2), c2;
  }
  return f(t3, MS), t3;
}();
var GS = Fy.require$$0.isCommentToken;
var zS = Symbol("tokens");
var HS = Symbol("comments");
var KS = Symbol("indexMap");
function JS(e25, t3, r2, n2, i2, a2, o2) {
  var s2 = false, u2 = 0, c2 = null;
  return "number" == typeof o2 ? u2 = 0 | o2 : "function" == typeof o2 ? c2 = o2 : o2 && (s2 = !!o2.includeComments, u2 = 0 | o2.skip, c2 = o2.filter || null), NC(0 <= u2, "options.skip should be zero or a positive integer."), NC(!c2 || "function" == typeof c2, "options.filter should be a function."), e25.createCursor(t3, r2, n2, i2, a2, s2, c2, u2, -1);
}
function QS(e25, t3, r2, n2, i2, a2, o2) {
  var s2 = false, u2 = 0, c2 = false, l2 = null;
  return "number" == typeof o2 ? (u2 = 0 | o2, c2 = true) : "function" == typeof o2 ? l2 = o2 : o2 && (s2 = !!o2.includeComments, u2 = 0 | o2.count, c2 = "number" == typeof o2.count, l2 = o2.filter || null), NC(0 <= u2, "options.count should be zero or a positive integer."), NC(!l2 || "function" == typeof l2, "options.filter should be a function."), e25.createCursor(t3, r2, n2, i2, a2, s2, l2, 0, c2 ? u2 : -1);
}
function XS(e25, t3, r2, n2, i2, a2, o2) {
  return void 0 === a2 && void 0 === o2 ? new MS(e25, t3, r2, n2, i2) : "number" == typeof a2 || void 0 === a2 ? new $S(e25, t3, r2, n2, i2, 0 | a2, 0 | o2) : QS(WS.forward, e25, t3, r2, n2, i2, a2);
}
function YS(e25) {
  for (var t3 = [], r2 = e25.getOneToken(); r2 && GS(r2); ) t3.push(r2), r2 = e25.getOneToken();
  return t3;
}
var ZS = function() {
  function e25(t3, r2) {
    a(this, e25), this[zS] = t3, this[HS] = r2, this[KS] = function(e26, t4) {
      for (var r3 = Number.MAX_SAFE_INTEGER, n2 = /* @__PURE__ */ Object.create(null), i2 = 0, a2 = 0, o2 = 0, s2 = null; i2 < e26.length || a2 < t4.length; ) {
        for (o2 = a2 < t4.length ? t4[a2].range[0] : r3; i2 < e26.length && (s2 = e26[i2].range)[0] < o2; ) n2[s2[0]] = i2, n2[s2[1] - 1] = i2, i2 += 1;
        for (o2 = i2 < e26.length ? e26[i2].range[0] : r3; a2 < t4.length && (s2 = t4[a2].range)[0] < o2; ) n2[s2[0]] = i2, n2[s2[1] - 1] = i2, a2 += 1;
      }
      return n2;
    }(t3, r2);
  }
  return s(e25, [{ key: "getTokenByRangeStart", value: function(e26, t3) {
    var r2 = t3 && t3.includeComments, n2 = WS.forward.createBaseCursor(this[zS], this[HS], this[KS], e26, -1, r2).getOneToken();
    return n2 && n2.range[0] === e26 ? n2 : null;
  } }, { key: "getFirstToken", value: function(e26, t3) {
    return JS(WS.forward, this[zS], this[HS], this[KS], e26.range[0], e26.range[1], t3).getOneToken();
  } }, { key: "getLastToken", value: function(e26, t3) {
    return JS(WS.backward, this[zS], this[HS], this[KS], e26.range[0], e26.range[1], t3).getOneToken();
  } }, { key: "getTokenBefore", value: function(e26, t3) {
    return JS(WS.backward, this[zS], this[HS], this[KS], -1, e26.range[0], t3).getOneToken();
  } }, { key: "getTokenAfter", value: function(e26, t3) {
    return JS(WS.forward, this[zS], this[HS], this[KS], e26.range[1], -1, t3).getOneToken();
  } }, { key: "getFirstTokenBetween", value: function(e26, t3, r2) {
    return JS(WS.forward, this[zS], this[HS], this[KS], e26.range[1], t3.range[0], r2).getOneToken();
  } }, { key: "getLastTokenBetween", value: function(e26, t3, r2) {
    return JS(WS.backward, this[zS], this[HS], this[KS], e26.range[1], t3.range[0], r2).getOneToken();
  } }, { key: "getTokenOrCommentBefore", value: function(e26, t3) {
    return this.getTokenBefore(e26, { includeComments: true, skip: t3 });
  } }, { key: "getTokenOrCommentAfter", value: function(e26, t3) {
    return this.getTokenAfter(e26, { includeComments: true, skip: t3 });
  } }, { key: "getFirstTokens", value: function(e26, t3) {
    return QS(WS.forward, this[zS], this[HS], this[KS], e26.range[0], e26.range[1], t3).getAllTokens();
  } }, { key: "getLastTokens", value: function(e26, t3) {
    return QS(WS.backward, this[zS], this[HS], this[KS], e26.range[0], e26.range[1], t3).getAllTokens().reverse();
  } }, { key: "getTokensBefore", value: function(e26, t3) {
    return QS(WS.backward, this[zS], this[HS], this[KS], -1, e26.range[0], t3).getAllTokens().reverse();
  } }, { key: "getTokensAfter", value: function(e26, t3) {
    return QS(WS.forward, this[zS], this[HS], this[KS], e26.range[1], -1, t3).getAllTokens();
  } }, { key: "getFirstTokensBetween", value: function(e26, t3, r2) {
    return QS(WS.forward, this[zS], this[HS], this[KS], e26.range[1], t3.range[0], r2).getAllTokens();
  } }, { key: "getLastTokensBetween", value: function(e26, t3, r2) {
    return QS(WS.backward, this[zS], this[HS], this[KS], e26.range[1], t3.range[0], r2).getAllTokens().reverse();
  } }, { key: "getTokens", value: function(e26, t3, r2) {
    return XS(this[zS], this[HS], this[KS], e26.range[0], e26.range[1], t3, r2).getAllTokens();
  } }, { key: "getTokensBetween", value: function(e26, t3, r2) {
    return XS(this[zS], this[HS], this[KS], e26.range[1], t3.range[0], r2, r2).getAllTokens();
  } }, { key: "commentsExistBetween", value: function(e26, t3) {
    var r2 = BS.search(this[HS], e26.range[1]);
    return r2 < this[HS].length && this[HS][r2].range[1] <= t3.range[0];
  } }, { key: "getCommentsBefore", value: function(e26) {
    return YS(QS(WS.backward, this[zS], this[HS], this[KS], -1, e26.range[0], { includeComments: true })).reverse();
  } }, { key: "getCommentsAfter", value: function(e26) {
    return YS(QS(WS.forward, this[zS], this[HS], this[KS], e26.range[1], -1, { includeComments: true }));
  } }, { key: "getCommentsInside", value: function(e26) {
    return this.getTokens(e26, { includeComments: true, filter: GS });
  } }]), e25;
}();
var ek = Fy.require$$0.isCommentToken;
var tk = { SourceCode: function(e25) {
  function t3(e26, r2) {
    var n2, o2, s2, u2, c2, l2;
    a(this, t3), "string" == typeof e26 ? (o2 = e26, s2 = r2) : "object" == i(e26) && null !== e26 && (o2 = e26.text, s2 = e26.ast, u2 = e26.parserServices, c2 = e26.scopeManager, l2 = e26.visitorKeys), function(e27) {
      if (!e27.tokens) throw new Error("AST is missing the tokens array.");
      if (!e27.comments) throw new Error("AST is missing the comments array.");
      if (!e27.loc) throw new Error("AST is missing location information.");
      if (!e27.range) throw new Error("AST is missing range information");
    }(s2), (n2 = v(this, h(t3).call(this, s2.tokens, s2.comments))).hasBOM = 65279 === o2.charCodeAt(0), n2.text = n2.hasBOM ? o2.slice(1) : o2, n2.ast = s2, n2.parserServices = u2 || {}, n2.scopeManager = c2 || null, n2.visitorKeys = l2 || Fy.Traverser.DEFAULT_VISITOR_KEYS;
    var p2 = n2.text.match(Fy.require$$0$1.shebangPattern);
    p2 && s2.comments.length && s2.comments[0].value === p2[1] && (s2.comments[0].type = "Shebang"), n2.tokensAndComments = function(e27, t4) {
      for (var r3 = [], n3 = 0, i2 = 0; n3 < e27.length || i2 < t4.length; ) i2 >= t4.length || n3 < e27.length && e27[n3].range[0] < t4[i2].range[0] ? r3.push(e27[n3++]) : r3.push(t4[i2++]);
      return r3;
    }(s2.tokens, s2.comments), n2.lines = [], n2.lineStartIndices = [0];
    for (var f2, d2 = Fy.require$$0$1.createGlobalLinebreakMatcher(); f2 = d2.exec(n2.text); ) n2.lines.push(n2.text.slice(n2.lineStartIndices[n2.lineStartIndices.length - 1], f2.index)), n2.lineStartIndices.push(f2.index + f2[0].length);
    return n2.lines.push(n2.text.slice(n2.lineStartIndices[n2.lineStartIndices.length - 1])), n2._commentCache = /* @__PURE__ */ new WeakMap(), Object.freeze(y(n2)), Object.freeze(n2.lines), n2;
  }
  return f(t3, ZS), s(t3, [{ key: "getText", value: function(e26, t4, r2) {
    return e26 ? this.text.slice(Math.max(e26.range[0] - (t4 || 0), 0), e26.range[1] + (r2 || 0)) : this.text;
  } }, { key: "getLines", value: function() {
    return this.lines;
  } }, { key: "getAllComments", value: function() {
    return this.ast.comments;
  } }, { key: "getComments", value: function(e26) {
    if (this._commentCache.has(e26)) return this._commentCache.get(e26);
    var t4 = { leading: [], trailing: [] };
    if ("Program" === e26.type) 0 === e26.body.length && (t4.leading = e26.comments);
    else {
      (("BlockStatement" === e26.type || "ClassBody" === e26.type) && 0 === e26.body.length || "ObjectExpression" === e26.type && 0 === e26.properties.length || "ArrayExpression" === e26.type && 0 === e26.elements.length || "SwitchStatement" === e26.type && 0 === e26.cases.length) && (t4.trailing = this.getTokens(e26, { includeComments: true, filter: ek }));
      for (var r2 = this.getTokenBefore(e26, { includeComments: true }); r2 && ek(r2) && !(e26.parent && r2.start < e26.parent.start); ) t4.leading.push(r2), r2 = this.getTokenBefore(r2, { includeComments: true });
      for (t4.leading.reverse(), r2 = this.getTokenAfter(e26, { includeComments: true }); r2 && ek(r2) && !(e26.parent && r2.end > e26.parent.end); ) t4.trailing.push(r2), r2 = this.getTokenAfter(r2, { includeComments: true });
    }
    return this._commentCache.set(e26, t4), t4;
  } }, { key: "getJSDocComment", value: function(e26) {
    var t4 = this, r2 = function(e27) {
      var r3 = t4.getTokenBefore(e27, { includeComments: true });
      return r3 && ek(r3) && "Block" === r3.type && "*" === r3.value.charAt(0) && 1 >= e27.loc.start.line - r3.loc.end.line ? r3 : null;
    }, n2 = e26.parent;
    switch (e26.type) {
      case "ClassDeclaration":
      case "FunctionDeclaration":
        return r2(function(e27) {
          return "ExportDefaultDeclaration" === e27.type || "ExportNamedDeclaration" === e27.type || "ExportAllDeclaration" === e27.type || "ExportSpecifier" === e27.type;
        }(n2) ? n2 : e26);
      case "ClassExpression":
        return r2(n2.parent);
      case "ArrowFunctionExpression":
      case "FunctionExpression":
        if ("CallExpression" !== n2.type && "NewExpression" !== n2.type) {
          for (; !this.getCommentsBefore(n2).length && !/Function/.test(n2.type) && "MethodDefinition" !== n2.type && "Property" !== n2.type && (n2 = n2.parent); ) ;
          if (n2 && "FunctionDeclaration" !== n2.type && "Program" !== n2.type) return r2(n2);
        }
        return r2(e26);
      default:
        return null;
    }
  } }, { key: "getNodeByRangeIndex", value: function(e26) {
    var t4 = null;
    return Fy.Traverser.traverse(this.ast, { visitorKeys: this.visitorKeys, enter: function(r2) {
      r2.range[0] <= e26 && e26 < r2.range[1] ? t4 = r2 : this.skip();
    }, leave: function(e27) {
      e27 === t4 && this.break();
    } }), t4;
  } }, { key: "isSpaceBetween", value: function(e26, t4) {
    if (function(e27, t5) {
      return e27.range[0] <= t5.range[0] && e27.range[1] >= t5.range[0] || t5.range[0] <= e27.range[0] && t5.range[1] >= e27.range[0];
    }(e26, t4)) return false;
    for (var r2 = b(e26.range[1] <= t4.range[0] ? [e26, t4] : [t4, e26], 2), n2 = r2[0], i2 = r2[1], a2 = this.getLastToken(n2) || n2, o2 = this.getFirstToken(i2) || i2, s2 = a2; s2 !== o2; ) {
      var u2 = this.getTokenAfter(s2, { includeComments: true });
      if (s2.range[1] !== u2.range[0]) return true;
      s2 = u2;
    }
    return false;
  } }, { key: "isSpaceBetweenTokens", value: function() {
    return this.isSpaceBetween.apply(this, arguments);
  } }, { key: "getLocFromIndex", value: function(e26) {
    if ("number" != typeof e26) throw new TypeError("Expected `index` to be a number.");
    if (0 > e26 || e26 > this.text.length) throw new RangeError("Index out of range (requested index ".concat(e26, ", but source text has length ").concat(this.text.length, ")."));
    if (e26 === this.text.length) return { line: this.lines.length, column: this.lines[this.lines.length - 1].length };
    var t4 = Fy.lodash.sortedLastIndex(this.lineStartIndices, e26);
    return { line: t4, column: e26 - this.lineStartIndices[t4 - 1] };
  } }, { key: "getIndexFromLoc", value: function(e26) {
    if ("object" != i(e26) || "number" != typeof e26.line || "number" != typeof e26.column) throw new TypeError("Expected `loc` to be an object with numeric `line` and `column` properties.");
    if (0 >= e26.line) throw new RangeError("Line number out of range (line ".concat(e26.line, " requested). Line numbers should be 1-based."));
    if (e26.line > this.lineStartIndices.length) throw new RangeError("Line number out of range (line ".concat(e26.line, " requested, but only ").concat(this.lineStartIndices.length, " lines present)."));
    var t4 = this.lineStartIndices[e26.line - 1], r2 = e26.line === this.lineStartIndices.length ? this.text.length : this.lineStartIndices[e26.line], n2 = t4 + e26.column;
    if (e26.line === this.lineStartIndices.length && n2 > r2 || e26.line < this.lineStartIndices.length && n2 >= r2) throw new RangeError("Column number out of range (column ".concat(e26.column, " requested, but the length of line ").concat(e26.line, " is ").concat(r2 - t4, ")."));
    return n2;
  } }], [{ key: "splitLines", value: function(e26) {
    return e26.split(Fy.require$$0$1.createGlobalLinebreakMatcher());
  } }]), t3;
}() };
var rk = Fy.require$$1("eslint:code-path");
function nk(e25) {
  return e25.id + (e25.reachable ? "" : "!");
}
var ik = { enabled: rk.enabled, dump: rk, dumpState: rk.enabled ? function(e25, t3, r2) {
  for (var n2 = 0; n2 < t3.currentSegments.length; ++n2) {
    var i2 = t3.currentSegments[n2].internal;
    r2 ? i2.exitNodes.push(e25) : i2.nodes.push(e25);
  }
  rk(["".concat(t3.currentSegments.map(nk).join(","), ")"), "".concat(e25.type).concat(r2 ? ":exit" : "")].join(" "));
} : rk, dumpDot: rk.enabled ? function(e25) {
  var t3 = '\ndigraph {\nnode[shape=box,style="rounded,filled",fillcolor=white];\ninitial[label="",shape=circle,style=filled,fillcolor=black,width=0.25,height=0.25];\n';
  0 < e25.returnedSegments.length && (t3 += 'final[label="",shape=doublecircle,style=filled,fillcolor=black,width=0.25,height=0.25];\n'), 0 < e25.thrownSegments.length && (t3 += 'thrown[label="\u2718",shape=circle,width=0.3,height=0.3,fixedsize];\n');
  var r2 = /* @__PURE__ */ Object.create(null), n2 = this.makeDotArrows(e25, r2);
  for (var i2 in r2) {
    var a2 = r2[i2];
    t3 += "".concat(i2, "["), t3 += a2.reachable ? 'label="' : 'style="rounded,dashed,filled",fillcolor="#FF9800",label="<<unreachable>>\\n', t3 += 0 < a2.internal.nodes.length || 0 < a2.internal.exitNodes.length ? [].concat(a2.internal.nodes.map(function(e26) {
      switch (e26.type) {
        case "Identifier":
          return "".concat(e26.type, " (").concat(e26.name, ")");
        case "Literal":
          return "".concat(e26.type, " (").concat(e26.value, ")");
        default:
          return e26.type;
      }
    }), a2.internal.exitNodes.map(function(e26) {
      switch (e26.type) {
        case "Identifier":
          return "".concat(e26.type, ":exit (").concat(e26.name, ")");
        case "Literal":
          return "".concat(e26.type, ":exit (").concat(e26.value, ")");
        default:
          return "".concat(e26.type, ":exit");
      }
    })).join("\\n") : "????", t3 += '"];\n';
  }
  t3 += "".concat(n2, "\n"), rk("DOT", t3 += "}");
} : rk, makeDotArrows: function(e25, t3) {
  for (var r2 = [[e25.initialSegment, 0]], n2 = t3 || /* @__PURE__ */ Object.create(null), i2 = e25.initialSegment.id, a2 = "initial->".concat(e25.initialSegment.id); 0 < r2.length; ) {
    var o2 = r2.pop(), s2 = o2[0], u2 = o2[1];
    if (!n2[s2.id] || 0 !== u2) {
      n2[s2.id] = s2;
      var c2 = s2.allNextSegments[u2];
      c2 && (a2 += i2 === s2.id ? "->".concat(c2.id) : ";\n".concat(s2.id, "->").concat(c2.id), i2 = c2.id, r2.unshift([s2, 1 + u2]), r2.push([c2, 0]));
    }
  }
  return e25.returnedSegments.forEach(function(e26) {
    a2 += i2 === e26.id ? "->final" : ";\n".concat(e26.id, "->final"), i2 = null;
  }), e25.thrownSegments.forEach(function(e26) {
    a2 += i2 === e26.id ? "->thrown" : ";\n".concat(e26.id, "->thrown"), i2 = null;
  }), "".concat(a2, ";");
} };
function ak(e25) {
  return e25.reachable;
}
var ok = function() {
  function e25(t3, r2, n2) {
    a(this, e25), this.id = t3, this.nextSegments = [], this.prevSegments = r2.filter(ak), this.allNextSegments = [], this.allPrevSegments = r2, this.reachable = n2, Object.defineProperty(this, "internal", { value: { used: false, loopedPrevSegments: [] } }), ik.enabled && (this.internal.nodes = [], this.internal.exitNodes = []);
  }
  return s(e25, [{ key: "isLoopedPrevSegment", value: function(e26) {
    return -1 !== this.internal.loopedPrevSegments.indexOf(e26);
  } }], [{ key: "newRoot", value: function(t3) {
    return new e25(t3, [], true);
  } }, { key: "newNext", value: function(t3, r2) {
    return new e25(t3, e25.flattenUnusedSegments(r2), r2.some(ak));
  } }, { key: "newUnreachable", value: function(t3, r2) {
    var n2 = new e25(t3, e25.flattenUnusedSegments(r2), false);
    return e25.markUsed(n2), n2;
  } }, { key: "newDisconnected", value: function(t3, r2) {
    return new e25(t3, [], r2.some(ak));
  } }, { key: "markUsed", value: function(e26) {
    var t3;
    if (!e26.internal.used) if (e26.internal.used = true, e26.reachable) for (t3 = 0; t3 < e26.allPrevSegments.length; ++t3) {
      var r2 = e26.allPrevSegments[t3];
      r2.allNextSegments.push(e26), r2.nextSegments.push(e26);
    }
    else for (t3 = 0; t3 < e26.allPrevSegments.length; ++t3) e26.allPrevSegments[t3].allNextSegments.push(e26);
  } }, { key: "markPrevSegmentAsLooped", value: function(e26, t3) {
    e26.internal.loopedPrevSegments.push(t3);
  } }, { key: "flattenUnusedSegments", value: function(e26) {
    for (var t3 = /* @__PURE__ */ Object.create(null), r2 = [], n2 = 0; n2 < e26.length; ++n2) {
      var i2 = e26[n2];
      if (!t3[i2.id]) if (i2.internal.used) t3[i2.id] = true, r2.push(i2);
      else for (var a2 = 0; a2 < i2.allPrevSegments.length; ++a2) {
        var o2 = i2.allPrevSegments[a2];
        t3[o2.id] || (t3[o2.id] = true, r2.push(o2));
      }
    }
    return r2;
  } }]), e25;
}();
function sk(e25) {
  return e25.reachable;
}
function uk(e25, t3, r2, n2) {
  for (var i2 = e25.segmentsList, a2 = 0 <= t3 ? t3 : i2.length + t3, o2 = 0 <= r2 ? r2 : i2.length + r2, s2 = [], u2 = 0; u2 < e25.count; ++u2) {
    for (var c2 = [], l2 = a2; l2 <= o2; ++l2) c2.push(i2[l2][u2]);
    s2.push(n2(e25.idGenerator.next(), c2));
  }
  return s2;
}
function ck(e25, t3) {
  for (var r2 = t3; r2.length > e25.count; ) {
    for (var n2 = [], i2 = 0, a2 = 0 | r2.length / 2; i2 < a2; ++i2) n2.push(ok.newNext(e25.idGenerator.next(), [r2[i2], r2[i2 + a2]]));
    r2 = n2;
  }
  return r2;
}
var lk = function() {
  function e25(t3, r2, n2) {
    a(this, e25), this.idGenerator = t3, this.upper = r2, this.count = n2, this.segmentsList = [];
  }
  return s(e25, [{ key: "makeNext", value: function(e26, t3) {
    return uk(this, e26, t3, ok.newNext);
  } }, { key: "makeUnreachable", value: function(e26, t3) {
    return uk(this, e26, t3, ok.newUnreachable);
  } }, { key: "makeDisconnected", value: function(e26, t3) {
    return uk(this, e26, t3, ok.newDisconnected);
  } }, { key: "add", value: function(e26) {
    NC(e26.length >= this.count, "".concat(e26.length, " >= ").concat(this.count)), this.segmentsList.push(ck(this, e26));
  } }, { key: "replaceHead", value: function(e26) {
    NC(e26.length >= this.count, "".concat(e26.length, " >= ").concat(this.count)), this.segmentsList.splice(-1, 1, ck(this, e26));
  } }, { key: "addAll", value: function(e26) {
    NC(e26.count === this.count);
    for (var t3 = e26.segmentsList, r2 = 0; r2 < t3.length; ++r2) this.segmentsList.push(t3[r2]);
  } }, { key: "clear", value: function() {
    this.segmentsList = [];
  } }, { key: "head", get: function() {
    var e26 = this.segmentsList;
    return 0 === e26.length ? [] : e26[e26.length - 1];
  } }, { key: "empty", get: function() {
    return 0 === this.segmentsList.length;
  } }, { key: "reachable", get: function() {
    var e26 = this.head;
    return 0 < e26.length && e26.some(sk);
  } }], [{ key: "newRoot", value: function(t3) {
    var r2 = new e25(t3, null, 1);
    return r2.add([ok.newRoot(t3.next())]), r2;
  } }, { key: "newEmpty", value: function(t3, r2) {
    return new e25(t3.idGenerator, t3, (r2 ? 2 : 1) * t3.count);
  } }]), e25;
}();
function pk(e25, t3, r2, n2) {
  for (var i2 = 0; i2 < n2.length; ++i2) {
    var a2 = n2[i2];
    e25.push(a2), -1 === t3.indexOf(a2) && r2.push(a2);
  }
}
function fk(e25) {
  for (var t3 = e25.tryContext; t3; ) {
    if (t3.hasFinalizer && "finally" !== t3.position) return t3;
    t3 = t3.upper;
  }
  return e25;
}
function hk(e25) {
  for (var t3 = e25.tryContext; t3; ) {
    if ("try" === t3.position || t3.hasFinalizer && "catch" === t3.position) return t3;
    t3 = t3.upper;
  }
  return e25;
}
function dk(e25, t3) {
  e25.splice(e25.indexOf(t3), 1);
}
function mk(e25, t3, r2) {
  for (var n2 = ok.flattenUnusedSegments(t3), i2 = ok.flattenUnusedSegments(r2), a2 = Math.min(n2.length, i2.length), o2 = 0; o2 < a2; ++o2) {
    var s2 = n2[o2], u2 = i2[o2];
    u2.reachable && s2.nextSegments.push(u2), s2.reachable && u2.prevSegments.push(s2), s2.allNextSegments.push(u2), u2.allPrevSegments.push(s2), 2 <= u2.allPrevSegments.length && ok.markPrevSegmentAsLooped(u2, s2), e25.notifyLooped(s2, u2);
  }
}
function gk(e25, t3, r2) {
  t3.processed || (t3.trueForkContext.add(r2), t3.falseForkContext.add(r2)), true !== e25.test && e25.brokenForkContext.addAll(t3.falseForkContext), e25.endOfTestSegments = t3.trueForkContext.makeNext(0, -1);
}
var yk = function() {
  function e25(t3, r2) {
    a(this, e25), this.idGenerator = t3, this.notifyLooped = r2, this.forkContext = lk.newRoot(t3), this.choiceContext = null, this.switchContext = null, this.tryContext = null, this.loopContext = null, this.breakContext = null, this.currentSegments = [], this.initialSegment = this.forkContext.head[0];
    var n2 = this.finalSegments = [], i2 = this.returnedForkContext = [], o2 = this.thrownForkContext = [];
    i2.add = pk.bind(null, i2, o2, n2), o2.add = pk.bind(null, o2, i2, n2);
  }
  return s(e25, [{ key: "pushForkContext", value: function(e26) {
    return this.forkContext = lk.newEmpty(this.forkContext, e26), this.forkContext;
  } }, { key: "popForkContext", value: function() {
    var e26 = this.forkContext;
    return this.forkContext = e26.upper, this.forkContext.replaceHead(e26.makeNext(0, -1)), e26;
  } }, { key: "forkPath", value: function() {
    this.forkContext.add(this.parentForkContext.makeNext(-1, -1));
  } }, { key: "forkBypassPath", value: function() {
    this.forkContext.add(this.parentForkContext.head);
  } }, { key: "pushChoiceContext", value: function(e26, t3) {
    this.choiceContext = { upper: this.choiceContext, kind: e26, isForkingAsResult: t3, trueForkContext: lk.newEmpty(this.forkContext), falseForkContext: lk.newEmpty(this.forkContext), processed: false };
  } }, { key: "popChoiceContext", value: function() {
    var e26 = this.choiceContext;
    this.choiceContext = e26.upper;
    var t3 = this.forkContext, r2 = t3.head;
    switch (e26.kind) {
      case "&&":
      case "||":
        if (e26.processed || (e26.trueForkContext.add(r2), e26.falseForkContext.add(r2)), e26.isForkingAsResult) {
          var n2 = this.choiceContext;
          return n2.trueForkContext.addAll(e26.trueForkContext), n2.falseForkContext.addAll(e26.falseForkContext), n2.processed = true, e26;
        }
        break;
      case "test":
        e26.processed ? (e26.falseForkContext.clear(), e26.falseForkContext.add(r2)) : (e26.trueForkContext.clear(), e26.trueForkContext.add(r2));
        break;
      case "loop":
        return e26;
      default:
        throw new Error("unreachable");
    }
    var i2 = e26.trueForkContext;
    return i2.addAll(e26.falseForkContext), t3.replaceHead(i2.makeNext(0, -1)), e26;
  } }, { key: "makeLogicalRight", value: function() {
    var e26 = this.choiceContext, t3 = this.forkContext;
    if (e26.processed) {
      var r2 = "&&" === e26.kind ? e26.trueForkContext : e26.falseForkContext;
      t3.replaceHead(r2.makeNext(0, -1)), r2.clear(), e26.processed = false;
    } else "&&" === e26.kind ? e26.falseForkContext.add(t3.head) : e26.trueForkContext.add(t3.head), t3.replaceHead(t3.makeNext(-1, -1));
  } }, { key: "makeIfConsequent", value: function() {
    var e26 = this.choiceContext, t3 = this.forkContext;
    e26.processed || (e26.trueForkContext.add(t3.head), e26.falseForkContext.add(t3.head)), e26.processed = false, t3.replaceHead(e26.trueForkContext.makeNext(0, -1));
  } }, { key: "makeIfAlternate", value: function() {
    var e26 = this.choiceContext, t3 = this.forkContext;
    e26.trueForkContext.clear(), e26.trueForkContext.add(t3.head), e26.processed = true, t3.replaceHead(e26.falseForkContext.makeNext(0, -1));
  } }, { key: "pushSwitchContext", value: function(e26, t3) {
    this.switchContext = { upper: this.switchContext, hasCase: e26, defaultSegments: null, defaultBodySegments: null, foundDefault: false, lastIsDefault: false, countForks: 0 }, this.pushBreakContext(true, t3);
  } }, { key: "popSwitchContext", value: function() {
    var e26 = this.switchContext;
    this.switchContext = e26.upper;
    var t3 = this.forkContext, r2 = this.popBreakContext().brokenForkContext;
    if (0 !== e26.countForks) {
      var n2 = t3.head;
      this.forkBypassPath();
      var i2 = t3.head;
      r2.add(n2), e26.lastIsDefault || (e26.defaultBodySegments ? (function(e27, t4) {
        for (var r3 = 0; r3 < e27.length; ++r3) {
          var n3 = e27[r3], i3 = t4[r3];
          dk(n3.nextSegments, i3), dk(n3.allNextSegments, i3), dk(i3.prevSegments, n3), dk(i3.allPrevSegments, n3);
        }
      }(e26.defaultSegments, e26.defaultBodySegments), mk(this, i2, e26.defaultBodySegments)) : r2.add(i2));
      for (var a2 = 0; a2 < e26.countForks; ++a2) this.forkContext = this.forkContext.upper;
      this.forkContext.replaceHead(r2.makeNext(0, -1));
    } else r2.empty || (r2.add(t3.makeNext(-1, -1)), t3.replaceHead(r2.makeNext(0, -1)));
  } }, { key: "makeSwitchCaseBody", value: function(e26, t3) {
    var r2 = this.switchContext;
    if (r2.hasCase) {
      var n2 = this.forkContext, i2 = this.pushForkContext();
      i2.add(n2.makeNext(0, -1)), t3 ? (r2.defaultSegments = n2.head, e26 ? r2.foundDefault = true : r2.defaultBodySegments = i2.head) : !e26 && r2.foundDefault && (r2.foundDefault = false, r2.defaultBodySegments = i2.head), r2.lastIsDefault = t3, r2.countForks += 1;
    }
  } }, { key: "pushTryContext", value: function(e26) {
    this.tryContext = { upper: this.tryContext, position: "try", hasFinalizer: e26, returnedForkContext: e26 ? lk.newEmpty(this.forkContext) : null, thrownForkContext: lk.newEmpty(this.forkContext), lastOfTryIsReachable: false, lastOfCatchIsReachable: false };
  } }, { key: "popTryContext", value: function() {
    var e26 = this.tryContext;
    if (this.tryContext = e26.upper, "catch" !== e26.position) {
      var t3 = e26.returnedForkContext, r2 = e26.thrownForkContext;
      if (!t3.empty || !r2.empty) {
        var n2 = this.forkContext.head;
        this.forkContext = this.forkContext.upper;
        var i2 = n2.slice(0, 0 | n2.length / 2), a2 = n2.slice(0 | n2.length / 2);
        t3.empty || fk(this).returnedForkContext.add(a2), r2.empty || hk(this).thrownForkContext.add(a2), this.forkContext.replaceHead(i2), e26.lastOfTryIsReachable || e26.lastOfCatchIsReachable || this.forkContext.makeUnreachable();
      }
    } else this.popForkContext();
  } }, { key: "makeCatchBlock", value: function() {
    var e26 = this.tryContext, t3 = this.forkContext, r2 = e26.thrownForkContext;
    e26.position = "catch", e26.thrownForkContext = lk.newEmpty(t3), e26.lastOfTryIsReachable = t3.reachable, r2.add(t3.head);
    var n2 = r2.makeNext(0, -1);
    this.pushForkContext(), this.forkBypassPath(), this.forkContext.add(n2);
  } }, { key: "makeFinallyBlock", value: function() {
    var e26 = this.tryContext, t3 = this.forkContext, r2 = e26.returnedForkContext, n2 = e26.thrownForkContext, i2 = t3.head;
    if ("catch" === e26.position ? (this.popForkContext(), t3 = this.forkContext, e26.lastOfCatchIsReachable = t3.reachable) : e26.lastOfTryIsReachable = t3.reachable, e26.position = "finally", !r2.empty || !n2.empty) {
      for (var a2 = t3.makeNext(-1, -1), o2 = 0; o2 < t3.count; ++o2) {
        for (var s2 = [i2[o2]], u2 = 0; u2 < r2.segmentsList.length; ++u2) s2.push(r2.segmentsList[u2][o2]);
        for (var c2 = 0; c2 < n2.segmentsList.length; ++c2) s2.push(n2.segmentsList[c2][o2]);
        a2.push(ok.newNext(this.idGenerator.next(), s2));
      }
      this.pushForkContext(true), this.forkContext.add(a2);
    }
  } }, { key: "makeFirstThrowablePathInTryBlock", value: function() {
    var e26 = this.forkContext;
    if (e26.reachable) {
      var t3 = hk(this);
      t3 !== this && "try" === t3.position && t3.thrownForkContext.empty && (t3.thrownForkContext.add(e26.head), e26.replaceHead(e26.makeNext(-1, -1)));
    }
  } }, { key: "pushLoopContext", value: function(e26, t3) {
    var r2 = this.forkContext, n2 = this.pushBreakContext(true, t3);
    switch (e26) {
      case "WhileStatement":
        this.pushChoiceContext("loop", false), this.loopContext = { upper: this.loopContext, type: e26, label: t3, test: void 0, continueDestSegments: null, brokenForkContext: n2.brokenForkContext };
        break;
      case "DoWhileStatement":
        this.pushChoiceContext("loop", false), this.loopContext = { upper: this.loopContext, type: e26, label: t3, test: void 0, entrySegments: null, continueForkContext: lk.newEmpty(r2), brokenForkContext: n2.brokenForkContext };
        break;
      case "ForStatement":
        this.pushChoiceContext("loop", false), this.loopContext = { upper: this.loopContext, type: e26, label: t3, test: void 0, endOfInitSegments: null, testSegments: null, endOfTestSegments: null, updateSegments: null, endOfUpdateSegments: null, continueDestSegments: null, brokenForkContext: n2.brokenForkContext };
        break;
      case "ForInStatement":
      case "ForOfStatement":
        this.loopContext = { upper: this.loopContext, type: e26, label: t3, prevSegments: null, leftSegments: null, endOfLeftSegments: null, continueDestSegments: null, brokenForkContext: n2.brokenForkContext };
        break;
      default:
        throw new Error('unknown type: "'.concat(e26, '"'));
    }
  } }, { key: "popLoopContext", value: function() {
    var e26 = this.loopContext;
    this.loopContext = e26.upper;
    var t3 = this.forkContext, r2 = this.popBreakContext().brokenForkContext;
    switch (e26.type) {
      case "WhileStatement":
      case "ForStatement":
        this.popChoiceContext(), mk(this, t3.head, e26.continueDestSegments);
        break;
      case "DoWhileStatement":
        var n2 = this.popChoiceContext();
        n2.processed || (n2.trueForkContext.add(t3.head), n2.falseForkContext.add(t3.head)), true !== e26.test && r2.addAll(n2.falseForkContext);
        for (var i2 = n2.trueForkContext.segmentsList, a2 = 0; a2 < i2.length; ++a2) mk(this, i2[a2], e26.entrySegments);
        break;
      case "ForInStatement":
      case "ForOfStatement":
        r2.add(t3.head), mk(this, t3.head, e26.leftSegments);
        break;
      default:
        throw new Error("unreachable");
    }
    r2.empty ? t3.replaceHead(t3.makeUnreachable(-1, -1)) : t3.replaceHead(r2.makeNext(0, -1));
  } }, { key: "makeWhileTest", value: function(e26) {
    var t3 = this.loopContext, r2 = this.forkContext, n2 = r2.makeNext(0, -1);
    t3.test = e26, t3.continueDestSegments = n2, r2.replaceHead(n2);
  } }, { key: "makeWhileBody", value: function() {
    var e26 = this.loopContext, t3 = this.choiceContext, r2 = this.forkContext;
    t3.processed || (t3.trueForkContext.add(r2.head), t3.falseForkContext.add(r2.head)), true !== e26.test && e26.brokenForkContext.addAll(t3.falseForkContext), r2.replaceHead(t3.trueForkContext.makeNext(0, -1));
  } }, { key: "makeDoWhileBody", value: function() {
    var e26 = this.loopContext, t3 = this.forkContext, r2 = t3.makeNext(-1, -1);
    e26.entrySegments = r2, t3.replaceHead(r2);
  } }, { key: "makeDoWhileTest", value: function(e26) {
    var t3 = this.loopContext, r2 = this.forkContext;
    if (t3.test = e26, !t3.continueForkContext.empty) {
      t3.continueForkContext.add(r2.head);
      var n2 = t3.continueForkContext.makeNext(0, -1);
      r2.replaceHead(n2);
    }
  } }, { key: "makeForTest", value: function(e26) {
    var t3 = this.loopContext, r2 = this.forkContext, n2 = r2.head, i2 = r2.makeNext(-1, -1);
    t3.test = e26, t3.endOfInitSegments = n2, t3.continueDestSegments = t3.testSegments = i2, r2.replaceHead(i2);
  } }, { key: "makeForUpdate", value: function() {
    var e26 = this.loopContext, t3 = this.choiceContext, r2 = this.forkContext;
    e26.testSegments ? gk(e26, t3, r2.head) : e26.endOfInitSegments = r2.head;
    var n2 = r2.makeDisconnected(-1, -1);
    e26.continueDestSegments = e26.updateSegments = n2, r2.replaceHead(n2);
  } }, { key: "makeForBody", value: function() {
    var e26 = this.loopContext, t3 = this.choiceContext, r2 = this.forkContext;
    e26.updateSegments ? (e26.endOfUpdateSegments = r2.head, e26.testSegments && mk(this, e26.endOfUpdateSegments, e26.testSegments)) : e26.testSegments ? gk(e26, t3, r2.head) : e26.endOfInitSegments = r2.head;
    var n2 = e26.endOfTestSegments;
    if (!n2) {
      var i2 = lk.newEmpty(r2);
      i2.add(e26.endOfInitSegments), e26.endOfUpdateSegments && i2.add(e26.endOfUpdateSegments), n2 = i2.makeNext(0, -1);
    }
    e26.continueDestSegments = e26.continueDestSegments || n2, r2.replaceHead(n2);
  } }, { key: "makeForInOfLeft", value: function() {
    var e26 = this.loopContext, t3 = this.forkContext, r2 = t3.makeDisconnected(-1, -1);
    e26.prevSegments = t3.head, e26.leftSegments = e26.continueDestSegments = r2, t3.replaceHead(r2);
  } }, { key: "makeForInOfRight", value: function() {
    var e26 = this.loopContext, t3 = this.forkContext, r2 = lk.newEmpty(t3);
    r2.add(e26.prevSegments);
    var n2 = r2.makeNext(-1, -1);
    e26.endOfLeftSegments = t3.head, t3.replaceHead(n2);
  } }, { key: "makeForInOfBody", value: function() {
    var e26 = this.loopContext, t3 = this.forkContext, r2 = lk.newEmpty(t3);
    r2.add(e26.endOfLeftSegments);
    var n2 = r2.makeNext(-1, -1);
    mk(this, t3.head, e26.leftSegments), e26.brokenForkContext.add(t3.head), t3.replaceHead(n2);
  } }, { key: "pushBreakContext", value: function(e26, t3) {
    return this.breakContext = { upper: this.breakContext, breakable: e26, label: t3, brokenForkContext: lk.newEmpty(this.forkContext) }, this.breakContext;
  } }, { key: "popBreakContext", value: function() {
    var e26 = this.breakContext, t3 = this.forkContext;
    if (this.breakContext = e26.upper, !e26.breakable) {
      var r2 = e26.brokenForkContext;
      r2.empty || (r2.add(t3.head), t3.replaceHead(r2.makeNext(0, -1)));
    }
    return e26;
  } }, { key: "makeBreak", value: function(e26) {
    var t3 = this.forkContext;
    if (t3.reachable) {
      var r2 = function(e27, t4) {
        for (var r3 = e27.breakContext; r3; ) {
          if (t4 ? r3.label === t4 : r3.breakable) return r3;
          r3 = r3.upper;
        }
        return null;
      }(this, e26);
      r2 && r2.brokenForkContext.add(t3.head), t3.replaceHead(t3.makeUnreachable(-1, -1));
    }
  } }, { key: "makeContinue", value: function(e26) {
    var t3 = this.forkContext;
    if (t3.reachable) {
      var r2 = function(e27, t4) {
        if (!t4) return e27.loopContext;
        for (var r3 = e27.loopContext; r3; ) {
          if (r3.label === t4) return r3;
          r3 = r3.upper;
        }
        return null;
      }(this, e26);
      r2 && (r2.continueDestSegments ? (mk(this, t3.head, r2.continueDestSegments), ("ForInStatement" === r2.type || "ForOfStatement" === r2.type) && r2.brokenForkContext.add(t3.head)) : r2.continueForkContext.add(t3.head)), t3.replaceHead(t3.makeUnreachable(-1, -1));
    }
  } }, { key: "makeReturn", value: function() {
    var e26 = this.forkContext;
    e26.reachable && (fk(this).returnedForkContext.add(e26.head), e26.replaceHead(e26.makeUnreachable(-1, -1)));
  } }, { key: "makeThrow", value: function() {
    var e26 = this.forkContext;
    e26.reachable && (hk(this).thrownForkContext.add(e26.head), e26.replaceHead(e26.makeUnreachable(-1, -1)));
  } }, { key: "makeFinal", value: function() {
    var e26 = this.currentSegments;
    0 < e26.length && e26[0].reachable && this.returnedForkContext.add(e26);
  } }, { key: "headSegments", get: function() {
    return this.forkContext.head;
  } }, { key: "parentForkContext", get: function() {
    var e26 = this.forkContext;
    return e26 && e26.upper;
  } }]), e25;
}();
var vk = function() {
  function e25(t3) {
    a(this, e25), this.prefix = t3 + "", this.n = 0;
  }
  return s(e25, [{ key: "next", value: function() {
    return this.n = 0 | 1 + this.n, 0 > this.n && (this.n = 1), this.prefix + this.n;
  } }]), e25;
}();
var xk = function() {
  function e25(t3, r2, n2) {
    a(this, e25), this.id = t3, this.upper = r2, this.childCodePaths = [], Object.defineProperty(this, "internal", { value: new yk(new vk("".concat(t3, "_")), n2) }), r2 && r2.childCodePaths.push(this);
  }
  return s(e25, [{ key: "traverseSegments", value: function(e26, t3) {
    function r2(e27) {
      return p2[e27.id] || l2.isLoopedPrevSegment(e27);
    }
    var n2, i2;
    "function" == typeof e26 ? (i2 = e26, n2 = {}) : (n2 = e26 || {}, i2 = t3);
    for (var a2 = n2.first || this.internal.initialSegment, o2 = n2.last, s2 = null, u2 = 0, c2 = 0, l2 = null, p2 = /* @__PURE__ */ Object.create(null), f2 = [[a2, 0]], h2 = null, d2 = false, m2 = { skip: function() {
      1 >= f2.length ? d2 = true : h2 = f2[f2.length - 2][0];
    }, break: function() {
      d2 = true;
    } }; 0 < f2.length; ) {
      if (s2 = f2[f2.length - 1], l2 = s2[0], 0 === (u2 = s2[1])) {
        if (p2[l2.id]) {
          f2.pop();
          continue;
        }
        if (l2 !== a2 && 0 < l2.prevSegments.length && !l2.prevSegments.every(r2)) {
          f2.pop();
          continue;
        }
        if (h2 && -1 !== l2.prevSegments.indexOf(h2) && (h2 = null), p2[l2.id] = true, !h2 && (i2.call(this, l2, m2), l2 === o2 && m2.skip(), d2)) break;
      }
      u2 < (c2 = l2.nextSegments.length - 1) ? (s2[1] += 1, f2.push([l2.nextSegments[u2], 0])) : u2 === c2 ? (s2[0] = l2.nextSegments[u2], s2[1] = 0) : f2.pop();
    }
  } }, { key: "initialSegment", get: function() {
    return this.internal.initialSegment;
  } }, { key: "finalSegments", get: function() {
    return this.internal.finalSegments;
  } }, { key: "returnedSegments", get: function() {
    return this.internal.returnedForkContext;
  } }, { key: "thrownSegments", get: function() {
    return this.internal.thrownForkContext;
  } }, { key: "currentSegments", get: function() {
    return this.internal.currentSegments;
  } }], [{ key: "getState", value: function(e26) {
    return e26.internal;
  } }]), e25;
}();
var bk = Fy.require$$0$1.breakableTypePattern;
function Ek(e25) {
  return !!e25.test;
}
function Ck(e25) {
  return "&&" === e25 || "||" === e25;
}
function Sk(e25) {
  return "LabeledStatement" === e25.parent.type ? e25.parent.label.name : null;
}
function kk(e25) {
  return "Literal" === e25.type ? !!e25.value : void 0;
}
function Dk(e25, t3) {
  var r2, n2, i2, a2 = e25.codePath, o2 = xk.getState(a2), s2 = o2.currentSegments, u2 = o2.headSegments, c2 = Math.max(s2.length, u2.length);
  for (r2 = 0; r2 < c2; ++r2) (n2 = s2[r2]) !== (i2 = u2[r2]) && n2 && (ik.dump("onCodePathSegmentEnd ".concat(n2.id)), n2.reachable && e25.emitter.emit("onCodePathSegmentEnd", n2, t3));
  for (o2.currentSegments = u2, r2 = 0; r2 < c2; ++r2) (n2 = s2[r2]) !== (i2 = u2[r2]) && i2 && (ik.dump("onCodePathSegmentStart ".concat(i2.id)), ok.markUsed(i2), i2.reachable && e25.emitter.emit("onCodePathSegmentStart", i2, t3));
}
function Fk(e25, t3) {
  var r2 = e25.codePath, n2 = r2 && xk.getState(r2), i2 = t3.parent;
  switch (t3.type) {
    case "Program":
    case "FunctionDeclaration":
    case "FunctionExpression":
    case "ArrowFunctionExpression":
      r2 && (Dk(e25, t3), ik.dumpState(t3, n2, false)), r2 = e25.codePath = new xk(e25.idGenerator.next(), r2, e25.onLooped), n2 = xk.getState(r2), ik.dump("onCodePathStart ".concat(r2.id)), e25.emitter.emit("onCodePathStart", r2, t3);
      break;
    case "LogicalExpression":
      Ck(t3.operator) && n2.pushChoiceContext(t3.operator, function(e26) {
        var t4 = e26.parent;
        switch (t4.type) {
          case "ConditionalExpression":
          case "IfStatement":
          case "WhileStatement":
          case "DoWhileStatement":
          case "ForStatement":
            return t4.test === e26;
          case "LogicalExpression":
            return Ck(t4.operator);
          default:
            return false;
        }
      }(t3));
      break;
    case "ConditionalExpression":
    case "IfStatement":
      n2.pushChoiceContext("test", false);
      break;
    case "SwitchStatement":
      n2.pushSwitchContext(t3.cases.some(Ek), Sk(t3));
      break;
    case "TryStatement":
      n2.pushTryContext(!!t3.finalizer);
      break;
    case "SwitchCase":
      i2.discriminant !== t3 && i2.cases[0] !== t3 && n2.forkPath();
      break;
    case "WhileStatement":
    case "DoWhileStatement":
    case "ForStatement":
    case "ForInStatement":
    case "ForOfStatement":
      n2.pushLoopContext(t3.type, Sk(t3));
      break;
    case "LabeledStatement":
      bk.test(t3.body.type) || n2.pushBreakContext(false, t3.label.name);
  }
  Dk(e25, t3), ik.dumpState(t3, n2, false);
}
function Ak(e25, t3) {
  switch (t3.type) {
    case "Program":
    case "FunctionDeclaration":
    case "FunctionExpression":
    case "ArrowFunctionExpression":
      var r2 = e25.codePath;
      xk.getState(r2).makeFinal(), function(e26, t4) {
        for (var r3 = xk.getState(e26.codePath), n2 = r3.currentSegments, i2 = 0; i2 < n2.length; ++i2) {
          var a2 = n2[i2];
          ik.dump("onCodePathSegmentEnd ".concat(a2.id)), a2.reachable && e26.emitter.emit("onCodePathSegmentEnd", a2, t4);
        }
        r3.currentSegments = [];
      }(e25, t3), ik.dump("onCodePathEnd ".concat(r2.id)), e25.emitter.emit("onCodePathEnd", r2, t3), ik.dumpDot(r2), (r2 = e25.codePath = e25.codePath.upper) && ik.dumpState(t3, xk.getState(r2), true);
  }
}
var wk = function() {
  function e25(t3) {
    a(this, e25), this.original = t3, this.emitter = t3.emitter, this.codePath = null, this.idGenerator = new vk("s"), this.currentNode = null, this.onLooped = this.onLooped.bind(this);
  }
  return s(e25, [{ key: "enterNode", value: function(e26) {
    this.currentNode = e26, e26.parent && function(e27, t3) {
      var r2 = e27.codePath, n2 = xk.getState(r2), i2 = t3.parent;
      switch (i2.type) {
        case "LogicalExpression":
          i2.right === t3 && Ck(i2.operator) && n2.makeLogicalRight();
          break;
        case "ConditionalExpression":
        case "IfStatement":
          i2.consequent === t3 ? n2.makeIfConsequent() : i2.alternate === t3 && n2.makeIfAlternate();
          break;
        case "SwitchCase":
          i2.consequent[0] === t3 && n2.makeSwitchCaseBody(false, !i2.test);
          break;
        case "TryStatement":
          i2.handler === t3 ? n2.makeCatchBlock() : i2.finalizer === t3 && n2.makeFinallyBlock();
          break;
        case "WhileStatement":
          i2.test === t3 ? n2.makeWhileTest(kk(t3)) : (NC(i2.body === t3), n2.makeWhileBody());
          break;
        case "DoWhileStatement":
          i2.body === t3 ? n2.makeDoWhileBody() : (NC(i2.test === t3), n2.makeDoWhileTest(kk(t3)));
          break;
        case "ForStatement":
          i2.test === t3 ? n2.makeForTest(kk(t3)) : i2.update === t3 ? n2.makeForUpdate() : i2.body === t3 && n2.makeForBody();
          break;
        case "ForInStatement":
        case "ForOfStatement":
          i2.left === t3 ? n2.makeForInOfLeft() : i2.right === t3 ? n2.makeForInOfRight() : (NC(i2.body === t3), n2.makeForInOfBody());
          break;
        case "AssignmentPattern":
          i2.right === t3 && (n2.pushForkContext(), n2.forkBypassPath(), n2.forkPath());
      }
    }(this, e26), Fk(this, e26), this.original.enterNode(e26), this.currentNode = null;
  } }, { key: "leaveNode", value: function(e26) {
    this.currentNode = e26, function(e27, t3) {
      var r2 = e27.codePath, n2 = xk.getState(r2), i2 = false;
      switch (t3.type) {
        case "IfStatement":
        case "ConditionalExpression":
          n2.popChoiceContext();
          break;
        case "LogicalExpression":
          Ck(t3.operator) && n2.popChoiceContext();
          break;
        case "SwitchStatement":
          n2.popSwitchContext();
          break;
        case "SwitchCase":
          0 === t3.consequent.length && n2.makeSwitchCaseBody(true, !t3.test), n2.forkContext.reachable && (i2 = true);
          break;
        case "TryStatement":
          n2.popTryContext();
          break;
        case "BreakStatement":
          Dk(e27, t3), n2.makeBreak(t3.label && t3.label.name), i2 = true;
          break;
        case "ContinueStatement":
          Dk(e27, t3), n2.makeContinue(t3.label && t3.label.name), i2 = true;
          break;
        case "ReturnStatement":
          Dk(e27, t3), n2.makeReturn(), i2 = true;
          break;
        case "ThrowStatement":
          Dk(e27, t3), n2.makeThrow(), i2 = true;
          break;
        case "Identifier":
          (function(e28) {
            var t4 = e28.parent;
            switch (t4.type) {
              case "LabeledStatement":
              case "BreakStatement":
              case "ContinueStatement":
              case "ArrayPattern":
              case "RestElement":
              case "ImportSpecifier":
              case "ImportDefaultSpecifier":
              case "ImportNamespaceSpecifier":
              case "CatchClause":
                return false;
              case "FunctionDeclaration":
              case "FunctionExpression":
              case "ArrowFunctionExpression":
              case "ClassDeclaration":
              case "ClassExpression":
              case "VariableDeclarator":
                return t4.id !== e28;
              case "Property":
              case "MethodDefinition":
                return t4.key !== e28 || t4.computed || t4.shorthand;
              case "AssignmentPattern":
                return t4.key !== e28;
              default:
                return true;
            }
          })(t3) && (n2.makeFirstThrowablePathInTryBlock(), i2 = true);
          break;
        case "CallExpression":
        case "ImportExpression":
        case "MemberExpression":
        case "NewExpression":
          n2.makeFirstThrowablePathInTryBlock();
          break;
        case "WhileStatement":
        case "DoWhileStatement":
        case "ForStatement":
        case "ForInStatement":
        case "ForOfStatement":
          n2.popLoopContext();
          break;
        case "AssignmentPattern":
          n2.popForkContext();
          break;
        case "LabeledStatement":
          bk.test(t3.body.type) || n2.popBreakContext();
      }
      i2 || Dk(e27, t3), ik.dumpState(t3, n2, true);
    }(this, e26), this.original.leaveNode(e26), Ak(this, e26), this.currentNode = null;
  } }, { key: "onLooped", value: function(e26, t3) {
    e26.reachable && t3.reachable && (ik.dump("onCodePathSegmentLoop ".concat(e26.id, " -> ").concat(t3.id)), this.emitter.emit("onCodePathSegmentLoop", e26, t3, this.currentNode));
  } }]), e25;
}();
function _k(e25, t3) {
  return e25.line - t3.line || e25.column - t3.column;
}
function Tk(e25) {
  var t3 = [], r2 = 0, n2 = null, i2 = /* @__PURE__ */ new Map(), a2 = /* @__PURE__ */ new Set(), o2 = /* @__PURE__ */ new Set(), s2 = true, u2 = false, c2 = void 0;
  try {
    for (var l2, p2 = e25.problems[Symbol.iterator](); !(s2 = (l2 = p2.next()).done); s2 = true) {
      for (var f2 = l2.value; r2 < e25.directives.length && 0 >= _k(e25.directives[r2], f2); ) {
        var h2 = e25.directives[r2++];
        switch (h2.type) {
          case "disable":
            null === h2.ruleId ? (n2 = h2, i2.clear(), a2.clear()) : n2 ? (a2.delete(h2.ruleId), i2.set(h2.ruleId, h2)) : i2.set(h2.ruleId, h2);
            break;
          case "enable":
            null === h2.ruleId ? (n2 = null, i2.clear()) : n2 ? (a2.add(h2.ruleId), i2.delete(h2.ruleId)) : i2.delete(h2.ruleId);
        }
      }
      i2.has(f2.ruleId) ? o2.add(i2.get(f2.ruleId)) : n2 && !a2.has(f2.ruleId) ? o2.add(n2) : t3.push(f2);
    }
  } catch (e26) {
    u2 = true, c2 = e26;
  } finally {
    try {
      s2 || null == p2.return || p2.return();
    } finally {
      if (u2) throw c2;
    }
  }
  return { problems: t3, unusedDisableDirectives: e25.directives.filter(function(e26) {
    return "disable" === e26.type && !o2.has(e26);
  }).map(function(t4) {
    return { ruleId: null, message: t4.ruleId ? "Unused eslint-disable directive (no problems were reported from '".concat(t4.ruleId, "').") : "Unused eslint-disable directive (no problems were reported).", line: t4.unprocessedDirective.line, column: t4.unprocessedDirective.column, severity: "warn" === e25.reportUnusedDisableDirectives ? 1 : 2, nodeType: null };
  }) };
}
var Pk = Fy.require$$1("eslint:config-comment-parser");
var Ik = function() {
  function e25() {
    a(this, e25);
  }
  return s(e25, [{ key: "parseStringConfig", value: function(e26, t3) {
    Pk("Parsing String config");
    var r2 = {};
    return e26.replace(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*([,:])[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*/g, "$1").split(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]|,+/).forEach(function(e27) {
      if (e27) {
        var n2 = b(e27.split(":"), 2), i2 = n2[0], a2 = n2[1], o2 = void 0 === a2 ? null : a2;
        r2[i2] = { value: o2, comment: t3 };
      }
    }), r2;
  } }, { key: "parseJsonConfig", value: function(e26, t3) {
    Pk("Parsing JSON config");
    var r2 = {};
    try {
      if (r2 = jC.parse("Object", e26) || {}, fS.isEverySeverityValid(r2)) return { success: true, config: r2 };
    } catch (e27) {
      Pk("Levn parsing failed; falling back to manual parsing.");
    }
    r2 = {};
    var n2 = e26.replace(/([\x2D\/-9A-Za-z]+):/g, '"$1":').replace(/(\]|[0-9])[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+(?=")/, "$1,");
    try {
      r2 = JSON.parse("{".concat(n2, "}"));
    } catch (e27) {
      return Pk("Manual parsing failed."), { success: false, error: { ruleId: null, fatal: true, severity: 2, message: "Failed to parse JSON from '".concat(n2, "': ").concat(e27.message), line: t3.start.line, column: t3.start.column + 1 } };
    }
    return { success: true, config: r2 };
  } }, { key: "parseListConfig", value: function(e26) {
    Pk("Parsing list config");
    var t3 = {};
    return e26.replace(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*,[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*/g, ",").split(/,+/).forEach(function(e27) {
      var r2 = e27.trim();
      r2 && (t3[r2] = true);
    }), t3;
  } }]), e25;
}();
function Bk(e25) {
  switch (e25.type) {
    case "identifier":
      return [e25.value];
    case "matches":
      var t3, r2 = e25.selectors.map(Bk);
      return r2.every(Boolean) ? (t3 = Fy.lodash).union.apply(t3, E(r2)) : null;
    case "compound":
      var n2, i2 = e25.selectors.map(Bk).filter(function(e26) {
        return e26;
      });
      return i2.length ? (n2 = Fy.lodash).intersection.apply(n2, E(i2)) : null;
    case "child":
    case "descendant":
    case "sibling":
    case "adjacent":
      return Bk(e25.right);
    default:
      return null;
  }
}
function Ok(e25) {
  switch (e25.type) {
    case "child":
    case "descendant":
    case "sibling":
    case "adjacent":
      return Ok(e25.left) + Ok(e25.right);
    case "compound":
    case "not":
    case "matches":
      return e25.selectors.reduce(function(e26, t3) {
        return e26 + Ok(t3);
      }, 0);
    case "attribute":
    case "field":
    case "nth-child":
    case "nth-last-child":
      return 1;
    default:
      return 0;
  }
}
function Lk(e25) {
  switch (e25.type) {
    case "child":
    case "descendant":
    case "sibling":
    case "adjacent":
      return Lk(e25.left) + Lk(e25.right);
    case "compound":
    case "not":
    case "matches":
      return e25.selectors.reduce(function(e26, t3) {
        return e26 + Lk(t3);
      }, 0);
    case "identifier":
      return 1;
    default:
      return 0;
  }
}
function Nk(e25, t3) {
  return e25.attributeCount - t3.attributeCount || e25.identifierCount - t3.identifierCount || (e25.rawSelector <= t3.rawSelector ? -1 : 1);
}
var jk = Fy.lodash.memoize(function(e25) {
  var t3 = function(e26) {
    try {
      return RC.parse(e26.replace(/:exit$/, ""));
    } catch (t4) {
      if ("number" == typeof t4.offset) throw new SyntaxError('Syntax error in selector "'.concat(e26, '" at position ').concat(t4.offset, ": ").concat(t4.message));
      throw t4;
    }
  }(e25);
  return { rawSelector: e25, isExit: e25.endsWith(":exit"), parsedSelector: t3, listenerTypes: Bk(t3), attributeCount: Ok(t3), identifierCount: Lk(t3) };
});
var Rk = function() {
  function e25(t3) {
    var r2 = this;
    a(this, e25), this.emitter = t3, this.currentAncestry = [], this.enterSelectorsByNodeType = /* @__PURE__ */ new Map(), this.exitSelectorsByNodeType = /* @__PURE__ */ new Map(), this.anyTypeEnterSelectors = [], this.anyTypeExitSelectors = [], t3.eventNames().forEach(function(e26) {
      var t4 = jk(e26);
      if (t4.listenerTypes) {
        var n2 = t4.isExit ? r2.exitSelectorsByNodeType : r2.enterSelectorsByNodeType;
        t4.listenerTypes.forEach(function(e27) {
          n2.has(e27) || n2.set(e27, []), n2.get(e27).push(t4);
        });
      } else {
        (t4.isExit ? r2.anyTypeExitSelectors : r2.anyTypeEnterSelectors).push(t4);
      }
    }), this.anyTypeEnterSelectors.sort(Nk), this.anyTypeExitSelectors.sort(Nk), this.enterSelectorsByNodeType.forEach(function(e26) {
      return e26.sort(Nk);
    }), this.exitSelectorsByNodeType.forEach(function(e26) {
      return e26.sort(Nk);
    });
  }
  return s(e25, [{ key: "applySelector", value: function(e26, t3) {
    RC.matches(e26, t3.parsedSelector, this.currentAncestry) && this.emitter.emit(t3.rawSelector, e26);
  } }, { key: "applySelectors", value: function(e26, t3) {
    for (var r2 = (t3 ? this.exitSelectorsByNodeType : this.enterSelectorsByNodeType).get(e26.type) || [], n2 = t3 ? this.anyTypeExitSelectors : this.anyTypeEnterSelectors, i2 = 0, a2 = 0; i2 < r2.length || a2 < n2.length; ) i2 >= r2.length || a2 < n2.length && 0 > Nk(n2[a2], r2[i2]) ? this.applySelector(e26, n2[a2++]) : this.applySelector(e26, r2[i2++]);
  } }, { key: "enterNode", value: function(e26) {
    e26.parent && this.currentAncestry.unshift(e26.parent), this.applySelectors(e26, false);
  } }, { key: "leaveNode", value: function(e26) {
    this.applySelectors(e26, true), this.currentAncestry.shift();
  } }]), e25;
}();
function Mk(e25, t3) {
  return { range: [e25, e25], text: t3 };
}
var Vk = Object.freeze({ insertTextAfter: function(e25, t3) {
  return this.insertTextAfterRange(e25.range, t3);
}, insertTextAfterRange: function(e25, t3) {
  return Mk(e25[1], t3);
}, insertTextBefore: function(e25, t3) {
  return this.insertTextBeforeRange(e25.range, t3);
}, insertTextBeforeRange: function(e25, t3) {
  return Mk(e25[0], t3);
}, replaceText: function(e25, t3) {
  return this.replaceTextRange(e25.range, t3);
}, replaceTextRange: function(e25, t3) {
  return { range: e25, text: t3 };
}, remove: function(e25) {
  return this.removeRange(e25.range);
}, removeRange: function(e25) {
  return { range: e25, text: "" };
} });
var Uk = function(e25, t3) {
  return t3 ? e25.replace(/\{\{((?:[\0-z\|~-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+?)\}\}/g, function(e26, r2) {
    var n2 = r2.trim();
    return n2 in t3 ? t3[n2] : e26;
  }) : e25;
};
function qk() {
  return 1 === arguments.length ? Object.assign({}, arguments.length <= 0 ? void 0 : arguments[0]) : "string" == typeof (arguments.length <= 1 ? void 0 : arguments[1]) ? { node: arguments.length <= 0 ? void 0 : arguments[0], message: arguments.length <= 1 ? void 0 : arguments[1], data: arguments.length <= 2 ? void 0 : arguments[2], fix: arguments.length <= 3 ? void 0 : arguments[3] } : { node: arguments.length <= 0 ? void 0 : arguments[0], loc: arguments.length <= 1 ? void 0 : arguments[1], message: arguments.length <= 2 ? void 0 : arguments[2], data: arguments.length <= 3 ? void 0 : arguments[3], fix: arguments.length <= 4 ? void 0 : arguments[4] };
}
function Wk(e25) {
  e25.node ? NC("object" == i(e25.node), "Node must be an object") : NC(e25.loc, "Node must be provided when reporting error if location is not provided");
}
function $k(e25) {
  return e25.loc ? e25.loc.start ? e25.loc : { start: e25.loc, end: null } : e25.node.loc;
}
function Gk(e25, t3) {
  return e25.range[0] - t3.range[0] || e25.range[1] - t3.range[1];
}
function zk(e25, t3) {
  if ("function" != typeof e25.fix) return null;
  var r2 = e25.fix(Vk);
  return r2 && Symbol.iterator in r2 ? function(e26, t4) {
    var r3 = Math.max;
    if (0 === e26.length) return null;
    if (1 === e26.length) return e26[0];
    e26.sort(Gk);
    var n2 = t4.text, i2 = e26[0].range[0], a2 = e26[e26.length - 1].range[1], o2 = "", s2 = Number.MIN_SAFE_INTEGER, u2 = true, c2 = false, l2 = void 0;
    try {
      for (var p2, f2 = e26[Symbol.iterator](); !(u2 = (p2 = f2.next()).done); u2 = true) {
        var h2 = p2.value;
        NC(h2.range[0] >= s2, "Fix objects must not be overlapped in a report."), 0 <= h2.range[0] && (o2 += n2.slice(r3(0, i2, s2), h2.range[0])), o2 += h2.text, s2 = h2.range[1];
      }
    } catch (e27) {
      c2 = true, l2 = e27;
    } finally {
      try {
        u2 || null == f2.return || f2.return();
      } finally {
        if (c2) throw l2;
      }
    }
    return { range: [i2, a2], text: o2 += n2.slice(r3(0, i2, s2), a2) };
  }(Array.from(r2), t3) : r2;
}
function Hk(e25, t3, r2) {
  return e25.suggest && Array.isArray(e25.suggest) ? e25.suggest.map(function(e26) {
    var n2 = e26.desc || r2[e26.messageId];
    return p({}, e26, { desc: Uk(n2, e26.data), fix: zk(e26, t3) });
  }) : [];
}
function Kk(e25) {
  var t3 = { ruleId: e25.ruleId, severity: e25.severity, message: e25.message, line: e25.loc.start.line, column: e25.loc.start.column + 1, nodeType: e25.node && e25.node.type || null };
  return e25.messageId && (t3.messageId = e25.messageId), e25.loc.end && (t3.endLine = e25.loc.end.line, t3.endColumn = e25.loc.end.column + 1), e25.fix && (t3.fix = e25.fix), e25.suggestions && 0 < e25.suggestions.length && (t3.suggestions = e25.suggestions), t3;
}
function Jk(e25, t3) {
  e25 && Array.isArray(e25) && e25.forEach(function(e26) {
    if (e26.messageId) {
      var r2 = e26.messageId;
      if (!t3) throw new TypeError("context.report() called with a suggest option with a messageId '".concat(r2, "', but no messages were present in the rule metadata."));
      if (!t3[r2]) throw new TypeError("context.report() called with a suggest option with a messageId '".concat(r2, "' which is not present in the 'messages' config: ").concat(JSON.stringify(t3, null, 2)));
      if (e26.desc) throw new TypeError("context.report() called with a suggest option that defines both a 'messageId' and an 'desc'. Please only pass one.");
    } else if (!e26.desc) throw new TypeError("context.report() called with a suggest option that doesn't have either a `desc` or `messageId`");
    if ("function" != typeof e26.fix) throw new TypeError("context.report() called with a suggest option without a fix function. See: ".concat(e26));
  });
}
var Qk = function(e25) {
  return function() {
    var t3, r2 = qk.apply(void 0, arguments), n2 = e25.messageIds;
    if (Wk(r2), r2.messageId) {
      if (!n2) throw new TypeError("context.report() called with a messageId, but no messages were present in the rule metadata.");
      var i2 = r2.messageId;
      if (r2.message) throw new TypeError("context.report() called with a message and a messageId. Please only pass one.");
      if (!n2 || !Object.prototype.hasOwnProperty.call(n2, i2)) throw new TypeError("context.report() called with a messageId of '".concat(i2, "' which is not present in the 'messages' config: ").concat(JSON.stringify(n2, null, 2)));
      t3 = n2[i2];
    } else {
      if (!r2.message) throw new TypeError("Missing `message` property in report() call; add a message that describes the linting problem.");
      t3 = r2.message;
    }
    return Jk(r2.suggest, n2), Kk({ ruleId: e25.ruleId, severity: e25.severity, node: r2.node, message: Uk(t3, r2.data), messageId: r2.messageId, loc: $k(r2), fix: e25.disableFixes ? null : zk(r2, e25.sourceCode), suggestions: e25.disableFixes ? [] : Hk(r2, e25.sourceCode, n2) });
  };
};
var Xk = function() {
  function e25() {
    a(this, e25), this._rules = /* @__PURE__ */ Object.create(null);
  }
  return s(e25, [{ key: "define", value: function(e26, t3) {
    this._rules[e26] = function(e27) {
      return "function" == typeof e27 ? Object.assign({ create: e27 }, e27) : e27;
    }(t3);
  } }, { key: "get", value: function(e26) {
    return "string" == typeof this._rules[e26] && this.define(e26, null), this._rules[e26] ? this._rules[e26] : mS.has(e26) ? mS.get(e26) : null;
  } }, { key: Symbol.iterator, value: regeneratorRuntime.mark(function e26() {
    var t3, r2, n2;
    return regeneratorRuntime.wrap(function(e27) {
      for (; ; ) switch (e27.prev = e27.next) {
        case 0:
          return e27.delegateYield(mS, "t0", 1);
        case 1:
          t3 = 0, r2 = Object.keys(this._rules);
        case 2:
          if (!(t3 < r2.length)) {
            e27.next = 9;
            break;
          }
          return n2 = r2[t3], e27.next = 6, [n2, this.get(n2)];
        case 6:
          t3++, e27.next = 2;
          break;
        case 9:
        case "end":
          return e27.stop();
      }
    }, e26, this);
  }) }]), e25;
}();
var Yk = function() {
  var e25 = /* @__PURE__ */ Object.create(null);
  return Object.freeze({ on: function(t3, r2) {
    t3 in e25 ? e25[t3].push(r2) : e25[t3] = [r2];
  }, emit: function(t3) {
    for (var r2 = arguments.length, n2 = new Array(r2 > 1 ? r2 - 1 : 0), i2 = 1; i2 < r2; i2++) n2[i2 - 1] = arguments[i2];
    t3 in e25 && e25[t3].forEach(function(e26) {
      return e26.apply(void 0, n2);
    });
  }, eventNames: function() {
    return Object.keys(e25);
  } });
};
var Zk = Fy.require$$1("eslint:source-code-fixer");
var eD = "\uFEFF";
function tD(e25, t3) {
  return e25.fix.range[0] - t3.fix.range[0] || e25.fix.range[1] - t3.fix.range[1];
}
function rD(e25, t3) {
  return e25.line - t3.line || e25.column - t3.column;
}
function nD() {
  Object.freeze(this);
}
nD.applyFixes = function(e25, t3, r2) {
  function n2(e26) {
    var t4 = e26.fix, r3 = t4.range[0], n3 = t4.range[1];
    return c2 >= r3 || r3 > n3 ? (a2.push(e26), false) : ((0 > r3 && 0 <= n3 || 0 === r3 && t4.text.startsWith(eD)) && (l2 = ""), l2 += u2.slice(i2(0, c2), i2(0, r3)), l2 += t4.text, c2 = n3, true);
  }
  var i2 = Math.max;
  if (Zk("Applying fixes"), false === r2) return Zk("shouldFix parameter was false, not attempting fixes"), { fixed: false, messages: t3, output: e25 };
  var a2 = [], o2 = [], s2 = e25.startsWith(eD) ? eD : "", u2 = s2 ? e25.slice(1) : e25, c2 = Number.NEGATIVE_INFINITY, l2 = s2;
  if (t3.forEach(function(e26) {
    Object.prototype.hasOwnProperty.call(e26, "fix") ? o2.push(e26) : a2.push(e26);
  }), o2.length) {
    Zk("Found fixes to apply");
    var p2 = false, f2 = true, h2 = false, d2 = void 0;
    try {
      for (var m2, g2 = o2.sort(tD)[Symbol.iterator](); !(f2 = (m2 = g2.next()).done); f2 = true) {
        var y2 = m2.value;
        "function" != typeof r2 || r2(y2) ? (n2(y2), p2 = true) : a2.push(y2);
      }
    } catch (e26) {
      h2 = true, d2 = e26;
    } finally {
      try {
        f2 || null == g2.return || g2.return();
      } finally {
        if (h2) throw d2;
      }
    }
    return l2 += u2.slice(i2(0, c2)), { fixed: p2, messages: a2.sort(rD), output: l2 };
  }
  return Zk("No fixes to apply"), { fixed: false, messages: t3, output: s2 + u2 };
};
var iD = nD;
var aD = { "generator-star": ["generator-star-spacing"], "global-strict": ["strict"], "no-arrow-condition": ["no-confusing-arrow", "no-constant-condition"], "no-comma-dangle": ["comma-dangle"], "no-empty-class": ["no-empty-character-class"], "no-empty-label": ["no-labels"], "no-extra-strict": ["strict"], "no-reserved-keys": ["quote-props"], "no-space-before-semi": ["semi-spacing"], "no-wrap-func": ["no-extra-parens"], "space-after-function-name": ["space-before-function-paren"], "space-after-keywords": ["keyword-spacing"], "space-before-function-parentheses": ["space-before-function-paren"], "space-before-keywords": ["keyword-spacing"], "space-in-brackets": ["object-curly-spacing", "array-bracket-spacing", "computed-property-spacing"], "space-return-throw-case": ["keyword-spacing"], "space-unary-word-ops": ["space-unary-ops"], "spaced-line-comment": ["spaced-comment"] };
var oD = { rules: aD };
var sD = Object.freeze({ __proto__: null, rules: aD, default: oD });
var uD = Fy.getCjsExportFromNamespace(pS);
var cD = Fy.getCjsExportFromNamespace(sD);
var lD = tk.SourceCode;
var pD = Fy.require$$1("eslint:linter");
var fD = new Ik();
var hD = { start: { line: 1, column: 0 }, end: { line: 1, column: 1 } };
function dD(e25) {
  var t3 = e25.ruleId, r2 = void 0 === t3 ? null : t3, n2 = e25.loc, i2 = void 0 === n2 ? hD : n2, a2 = e25.message, o2 = void 0 === a2 ? function(e26) {
    return Object.prototype.hasOwnProperty.call(cD.rules, e26) ? "Rule '".concat(e26, "' was removed and replaced by: ").concat(cD.rules[e26].join(", ")) : "Definition for rule '".concat(e26, "' was not found.");
  }(e25.ruleId) : a2, s2 = e25.severity, u2 = void 0 === s2 ? 2 : s2;
  return { ruleId: r2, message: o2, line: i2.start.line, column: i2.start.column + 1, endLine: i2.end.line, endColumn: i2.end.column + 1, severity: u2, nodeType: null };
}
function mD(e25, t3, r2, n2) {
  var i2 = {}, a2 = /* @__PURE__ */ Object.create(null), o2 = {}, s2 = [], u2 = [];
  return t3.comments.filter(function(e26) {
    return "Shebang" !== e26.type;
  }).forEach(function(e26) {
    var t4 = e26.value.trim(), c2 = /^(eslint(?:\x2Denv|\x2Denable|\x2Ddisable(?:(?:\x2Dnext)?\x2Dline)?)?|exported|globals?)(?:[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]|$)/.exec(t4);
    if (c2) {
      var l2 = c2[1], p2 = /^eslint\x2Ddisable\x2D(next\x2D)?line$/.test(l2);
      if ("Line" !== e26.type || p2) {
        if (n2) {
          var f2 = "Block" === e26.type ? "/*".concat(l2, "*/") : "//".concat(l2);
          return void s2.push(dD({ ruleId: null, message: "'".concat(f2, "' has no effect because you have 'noInlineConfig' setting in ").concat(n2, "."), loc: e26.loc, severity: 1 }));
        }
        if (p2 && e26.loc.start.line !== e26.loc.end.line) return void s2.push(dD({ ruleId: null, message: "".concat(l2, " comment should not span multiple lines."), loc: e26.loc }));
        var h2 = t4.slice(c2.index + l2.length);
        switch (l2) {
          case "eslint-disable":
          case "eslint-enable":
          case "eslint-disable-next-line":
          case "eslint-disable-line":
            var d2 = function(e27) {
              var t5 = e27.type, r3 = e27.loc, n3 = e27.value, i3 = e27.ruleMapper, a3 = Object.keys(fD.parseListConfig(n3)), o3 = a3.length ? a3 : [null], s3 = { directives: [], directiveProblems: [] }, u3 = true, c3 = false, l3 = void 0;
              try {
                for (var p3, f3 = o3[Symbol.iterator](); !(u3 = (p3 = f3.next()).done); u3 = true) {
                  var h3 = p3.value;
                  null === h3 || null !== i3(h3) ? s3.directives.push({ type: t5, line: r3.start.line, column: r3.start.column + 1, ruleId: h3 }) : s3.directiveProblems.push(dD({ ruleId: h3, loc: r3 }));
                }
              } catch (e28) {
                c3 = true, l3 = e28;
              } finally {
                try {
                  u3 || null == f3.return || f3.return();
                } finally {
                  if (c3) throw l3;
                }
              }
              return s3;
            }({ type: l2.slice(7), loc: e26.loc, value: h2, ruleMapper: r2 }), m2 = d2.directives, g2 = d2.directiveProblems;
            u2.push.apply(u2, E(m2)), s2.push.apply(s2, E(g2));
            break;
          case "exported":
            Object.assign(o2, fD.parseStringConfig(h2, e26));
            break;
          case "globals":
          case "global":
            for (var y2 = 0, v2 = Object.entries(fD.parseStringConfig(h2, e26)); y2 < v2.length; y2++) {
              var x2 = b(v2[y2], 2), C3 = x2[0], S3 = x2[1].value, k2 = void 0;
              try {
                k2 = fS.normalizeConfigGlobal(S3);
              } catch (t5) {
                s2.push(dD({ ruleId: null, loc: e26.loc, message: t5.message }));
                continue;
              }
              a2[C3] ? (a2[C3].comments.push(e26), a2[C3].value = k2) : a2[C3] = { comments: [e26], value: k2 };
            }
            break;
          case "eslint":
            var D2 = fD.parseJsonConfig(h2, e26.loc);
            D2.success ? Object.keys(D2.config).forEach(function(t5) {
              var n3 = r2(t5), a3 = D2.config[t5];
              if (null !== n3) {
                try {
                  TS.validateRuleOptions(n3, t5, a3);
                } catch (r3) {
                  return void s2.push(dD({ ruleId: t5, message: r3.message, loc: e26.loc }));
                }
                i2[t5] = a3;
              } else s2.push(dD({ ruleId: t5, loc: e26.loc }));
            }) : s2.push(D2.error);
        }
      }
    }
  }), { configuredRules: i2, enabledGlobals: a2, exportedVariables: o2, problems: s2, disableDirectives: u2 };
}
var gD = /\/\*[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*eslint\x2Denv[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+?)\*\//g;
function yD(e25) {
  var t3 = e25.split(PC.sep), r2 = t3.lastIndexOf("<text>");
  return -1 === r2 ? e25 : t3.slice(r2).join(PC.sep);
}
function vD(e25) {
  return Array.isArray(e25) ? e25.slice(1) : [];
}
function xD(e25, t3, r2) {
  var n2 = t3.ecmaFeatures || {}, i2 = t3.ecmaVersion || 5;
  return IC.analyze(e25, { ignoreEval: true, nodejsScope: n2.globalReturn, impliedStrict: n2.impliedStrict, ecmaVersion: i2, sourceType: t3.sourceType || "script", childVisitorKeys: r2 || Fy.evk.KEYS, fallback: Fy.Traverser.getKeys });
}
function bD(e25, t3) {
  for (var r2 = "Program" !== t3.type, n2 = t3; n2; n2 = n2.parent) {
    var i2 = e25.acquire(n2, r2);
    if (i2) return "function-expression-name" === i2.type ? i2.childScopes[0] : i2;
  }
  return e25.scopes[0];
}
var ED = { getSource: "getText", getSourceLines: "getLines", getAllComments: "getAllComments", getNodeByRangeIndex: "getNodeByRangeIndex", getComments: "getComments", getCommentsBefore: "getCommentsBefore", getCommentsAfter: "getCommentsAfter", getCommentsInside: "getCommentsInside", getJSDocComment: "getJSDocComment", getFirstToken: "getFirstToken", getFirstTokens: "getFirstTokens", getLastToken: "getLastToken", getLastTokens: "getLastTokens", getTokenAfter: "getTokenAfter", getTokenBefore: "getTokenBefore", getTokenByRangeStart: "getTokenByRangeStart", getTokens: "getTokens", getTokensAfter: "getTokensAfter", getTokensBefore: "getTokensBefore", getTokensBetween: "getTokensBetween" };
var CD = Object.freeze(Object.keys(ED).reduce(function(e25, t3) {
  return Object.assign(e25, u({}, t3, function() {
    var e26;
    return (e26 = this.getSourceCode())[ED[t3]].apply(e26, arguments);
  }));
}, {}));
function SD(e25, t3, r2, n2, i2, a2, o2, s2, u2) {
  var c2 = Yk(), l2 = [], p2 = e25.ast;
  Fy.Traverser.traverse(e25.ast, { enter: function(e26, t4) {
    e26.parent = t4, l2.push({ isEntering: true, node: e26 });
  }, leave: function(e26) {
    l2.push({ isEntering: false, node: e26 });
  }, visitorKeys: e25.visitorKeys });
  var f2 = Object.freeze(Object.assign(Object.create(CD), { getAncestors: function() {
    return function(e26) {
      for (var t4 = [], r3 = e26.parent; r3; r3 = r3.parent) t4.push(r3);
      return t4.reverse();
    }(p2);
  }, getDeclaredVariables: e25.scopeManager.getDeclaredVariables.bind(e25.scopeManager), getCwd: function() {
    return u2;
  }, getFilename: function() {
    return o2;
  }, getScope: function() {
    return bD(e25.scopeManager, p2);
  }, getSourceCode: function() {
    return e25;
  }, markVariableAsUsed: function(t4) {
    return function(e26, t5, r3, n3) {
      for (var i3 = r3.ecmaFeatures && r3.ecmaFeatures.globalReturn || "module" === r3.sourceType, a3 = bD(e26, t5), o3 = "global" === a3.type && i3 ? a3.childScopes[0] : a3; o3; o3 = o3.upper) {
        var s3 = o3.variables.find(function(e27) {
          return e27.name === n3;
        });
        if (s3) return s3.eslintUsed = true, true;
      }
      return false;
    }(e25.scopeManager, p2, n2, t4);
  }, parserOptions: n2, parserPath: i2, parserServices: e25.parserServices, settings: a2 })), h2 = [];
  Object.keys(t3).forEach(function(n3) {
    var i3 = fS.getRuleSeverity(t3[n3]);
    if (0 !== i3) {
      var a3 = r2(n3);
      if (null !== a3) {
        var o3 = a3.meta && a3.meta.messages, u3 = null, l3 = Object.freeze(Object.assign(Object.create(f2), { id: n3, options: vD(t3[n3]), report: function() {
          null === u3 && (u3 = Qk({ ruleId: n3, severity: i3, sourceCode: e25, messageIds: o3, disableFixes: s2 }));
          var t4 = u3.apply(void 0, arguments);
          if (t4.fix && a3.meta && !a3.meta.fixable) throw new Error("Fixable rules should export a `meta.fixable` property.");
          h2.push(t4);
        } })), p3 = function(e26, t4) {
          try {
            return e26.create(t4);
          } catch (e27) {
            throw e27.message = "Error while loading rule '".concat(t4.id, "': ").concat(e27.message), e27;
          }
        }(a3, l3);
        Object.keys(p3).forEach(function(e26) {
          c2.on(e26, p3[e26]);
        });
      } else h2.push(dD({ ruleId: n3 }));
    }
  });
  var d2 = new wk(new Rk(c2));
  return l2.forEach(function(e26) {
    p2 = e26.node;
    try {
      e26.isEntering ? d2.enterNode(p2) : d2.leaveNode(p2);
    } catch (e27) {
      throw e27.currentNode = p2, e27;
    }
  }), h2;
}
function kD(e25, t3) {
  return e25.lastConfigArray && e25.lastConfigArray.pluginRules.get(t3) || e25.ruleMap.get(t3);
}
function DD(e25) {
  return e25 || ("object" == ("undefined" == typeof process ? "undefined" : i(process)) ? process.cwd() : void 0);
}
var FD = /* @__PURE__ */ new WeakMap();
var AD = { linter_1: { Linter: { Linter: function() {
  function e25() {
    var t3 = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).cwd;
    a(this, e25), FD.set(this, { cwd: DD(t3), lastConfigArray: null, lastSourceCode: null, parserMap: /* @__PURE__ */ new Map([["espree", Fy.espree]]), ruleMap: new Xk() }), this.version = uD.version;
  }
  return s(e25, [{ key: "_verifyWithoutProcessors", value: function(e26, t3, r2) {
    var n2, a2 = FD.get(this), o2 = t3 || {}, s2 = function(e27, t4) {
      var r3 = true === t4.noInlineConfig, n3 = false === e27.allowInlineConfig, i2 = t4.configNameOfNoInlineConfig ? " (".concat(t4.configNameOfNoInlineConfig, ")") : "", a3 = e27.reportUnusedDisableDirectives;
      return "boolean" == typeof a3 && (a3 = a3 ? "error" : "off"), "string" != typeof a3 && (a3 = t4.reportUnusedDisableDirectives ? "warn" : "off"), { filename: yD(e27.filename || "<input>"), allowInlineConfig: !n3, warnInlineConfig: r3 && !n3 ? "your config".concat(i2) : null, reportUnusedDisableDirectives: a3, disableFixes: !!e27.disableFixes };
    }(r2, o2);
    "string" == typeof e26 ? (a2.lastSourceCode = null, n2 = e26) : (a2.lastSourceCode = e26, n2 = e26.text);
    var u2 = "espree", c2 = Fy.espree;
    if ("object" == i(o2.parser) && null !== o2.parser) u2 = o2.parser.filePath, c2 = o2.parser.definition;
    else if ("string" == typeof o2.parser) {
      if (!a2.parserMap.has(o2.parser)) return [{ ruleId: null, fatal: true, severity: 2, message: "Configured parser '".concat(o2.parser, "' was not found."), line: 0, column: 0 }];
      u2 = o2.parser, c2 = a2.parserMap.get(o2.parser);
    }
    var l2 = s2.allowInlineConfig && !s2.warnInlineConfig ? function(e27) {
      var t4, r3;
      for (gD.lastIndex = 0; t4 = gD.exec(e27); ) r3 = Object.assign(r3 || {}, fD.parseListConfig(t4[1]));
      return r3;
    }(n2) : {}, p2 = Object.assign({ builtin: true }, o2.env, l2), f2 = Object.keys(p2).filter(function(e27) {
      return p2[e27];
    }).map(function(e27) {
      return function(e28, t4) {
        return e28.lastConfigArray && e28.lastConfigArray.pluginEnvironments.get(t4) || qC.get(t4) || null;
      }(a2, e27);
    }).filter(function(e27) {
      return e27;
    }), h2 = function(e27, t4, r3) {
      var n3 = r3.filter(function(e28) {
        return e28.parserOptions;
      }).reduce(function(e28, t5) {
        return Fy.lodash.merge(e28, t5.parserOptions);
      }, {}), i2 = Fy.lodash.merge(n3, t4 || {});
      return "module" === i2.sourceType && (i2.ecmaFeatures = Object.assign({}, i2.ecmaFeatures, { globalReturn: false })), i2.ecmaVersion = function(e28) {
        return 2015 <= e28 ? e28 - 2009 : e28;
      }(i2.ecmaVersion), i2;
    }(0, o2.parserOptions || {}, f2), d2 = function(e27, t4) {
      return Object.assign.apply(Object, [{}].concat(E(t4.filter(function(e28) {
        return e28.globals;
      }).map(function(e28) {
        return e28.globals;
      })), [e27]));
    }(o2.globals || {}, f2), m2 = o2.settings || {};
    if (a2.lastSourceCode) a2.lastSourceCode.scopeManager || (a2.lastSourceCode = new lD({ text: a2.lastSourceCode.text, ast: a2.lastSourceCode.ast, parserServices: a2.lastSourceCode.parserServices, visitorKeys: a2.lastSourceCode.visitorKeys, scopeManager: xD(a2.lastSourceCode.ast, h2) }));
    else {
      var g2 = function(e27, t4, r3, n3) {
        var i2 = function(e28) {
          return 65279 === e28.charCodeAt(0) ? e28.slice(1) : e28;
        }(e27).replace(Fy.require$$0$1.shebangPattern, function(e28, t5) {
          return "//".concat(t5);
        }), a3 = Object.assign({}, r3, { loc: true, range: true, raw: true, tokens: true, comment: true, eslintVisitorKeys: true, eslintScopeManager: true, filePath: n3 });
        try {
          var o3 = "function" == typeof t4.parseForESLint ? t4.parseForESLint(i2, a3) : { ast: t4.parse(i2, a3) }, s3 = o3.ast, u3 = o3.services || {}, c3 = o3.visitorKeys || Fy.evk.KEYS, l3 = o3.scopeManager || xD(s3, a3, c3);
          return { success: true, sourceCode: new lD({ text: e27, ast: s3, parserServices: u3, scopeManager: l3, visitorKeys: c3 }) };
        } catch (e28) {
          var p3 = "Parsing error: ".concat(e28.message.replace(/^line [0-9]+:/i, "").trim());
          return pD("%s\n%s", p3, e28.stack), { success: false, error: { ruleId: null, fatal: true, severity: 2, message: p3, line: e28.lineNumber, column: e28.column } };
        }
      }(n2, c2, h2, s2.filename);
      if (!g2.success) return [g2.error];
      a2.lastSourceCode = g2.sourceCode;
    }
    var y2 = a2.lastSourceCode, v2 = s2.allowInlineConfig ? mD(s2.filename, y2.ast, function(e27) {
      return kD(a2, e27);
    }, s2.warnInlineConfig) : { configuredRules: {}, enabledGlobals: {}, exportedVariables: {}, problems: [], disableDirectives: [] };
    !function(e27, t4, r3) {
      var n3 = r3.exportedVariables, i2 = r3.enabledGlobals, a3 = true, o3 = false, s3 = void 0;
      try {
        for (var u3, c3 = new Set([].concat(E(Object.keys(t4)), E(Object.keys(i2))))[Symbol.iterator](); !(a3 = (u3 = c3.next()).done); a3 = true) {
          var l3 = u3.value, p3 = void 0 === t4[l3] ? void 0 : fS.normalizeConfigGlobal(t4[l3]), f3 = i2[l3] && i2[l3].value || p3, h3 = i2[l3] && i2[l3].comments;
          if ("off" !== f3) {
            var d3 = e27.set.get(l3);
            d3 || (d3 = new IC.Variable(l3, e27), e27.variables.push(d3), e27.set.set(l3, d3)), d3.eslintImplicitGlobalSetting = p3, d3.eslintExplicitGlobal = void 0 !== h3, d3.eslintExplicitGlobalComments = h3, d3.writeable = "writable" === f3;
          }
        }
      } catch (e28) {
        o3 = true, s3 = e28;
      } finally {
        try {
          a3 || null == c3.return || c3.return();
        } finally {
          if (o3) throw s3;
        }
      }
      Object.keys(n3).forEach(function(t5) {
        var r4 = e27.set.get(t5);
        r4 && (r4.eslintUsed = true);
      }), e27.through = e27.through.filter(function(t5) {
        var r4 = t5.identifier.name, n4 = e27.set.get(r4);
        return !n4 || (t5.resolved = n4, n4.references.push(t5), false);
      });
    }(y2.scopeManager.scopes[0], d2, { exportedVariables: v2.exportedVariables, enabledGlobals: v2.enabledGlobals });
    var x2, b2 = Object.assign({}, o2.rules, v2.configuredRules);
    try {
      x2 = SD(y2, b2, function(e27) {
        return kD(a2, e27);
      }, h2, u2, m2, s2.filename, s2.disableFixes, a2.cwd);
    } catch (e27) {
      if (e27.message += "\nOccurred while linting ".concat(s2.filename), pD("An error occurred while traversing"), pD("Filename:", s2.filename), e27.currentNode) {
        var C3 = e27.currentNode.loc.start.line;
        pD("Line:", C3), e27.message += ":".concat(C3);
      }
      throw pD("Parser Options:", h2), pD("Parser Path:", u2), pD("Settings:", m2), e27;
    }
    return function(e27) {
      var t4 = e27.directives, r3 = e27.problems, n3 = e27.reportUnusedDisableDirectives, i2 = void 0 === n3 ? "off" : n3, a3 = t4.filter(function(e28) {
        return "disable" === e28.type || "enable" === e28.type;
      }).map(function(e28) {
        return Object.assign({}, e28, { unprocessedDirective: e28 });
      }).sort(_k), o3 = Fy.lodash.flatMap(t4, function(e28) {
        switch (e28.type) {
          case "disable":
          case "enable":
            return [];
          case "disable-line":
            return [{ type: "disable", line: e28.line, column: 1, ruleId: e28.ruleId, unprocessedDirective: e28 }, { type: "enable", line: e28.line + 1, column: 0, ruleId: e28.ruleId, unprocessedDirective: e28 }];
          case "disable-next-line":
            return [{ type: "disable", line: e28.line + 1, column: 1, ruleId: e28.ruleId, unprocessedDirective: e28 }, { type: "enable", line: e28.line + 2, column: 0, ruleId: e28.ruleId, unprocessedDirective: e28 }];
          default:
            throw new TypeError("Unrecognized directive type '".concat(e28.type, "'"));
        }
      }).sort(_k), s3 = Tk({ problems: r3, directives: a3, reportUnusedDisableDirectives: i2 }), u3 = Tk({ problems: s3.problems, directives: o3, reportUnusedDisableDirectives: i2 });
      return "off" === i2 ? u3.problems : u3.problems.concat(s3.unusedDisableDirectives).concat(u3.unusedDisableDirectives).sort(_k);
    }({ directives: v2.disableDirectives, problems: x2.concat(v2.problems).sort(function(e27, t4) {
      return e27.line - t4.line || e27.column - t4.column;
    }), reportUnusedDisableDirectives: s2.reportUnusedDisableDirectives });
  } }, { key: "verify", value: function(e26, t3, r2) {
    pD("Verify");
    var n2 = "string" == typeof r2 ? { filename: r2 } : r2 || {};
    return t3 && "function" == typeof t3.extractConfig ? this._verifyWithConfigArray(e26, t3, n2) : n2.preprocess || n2.postprocess ? this._verifyWithProcessor(e26, t3, n2) : this._verifyWithoutProcessors(e26, t3, n2);
  } }, { key: "_verifyWithConfigArray", value: function(e26, t3, r2) {
    pD("With ConfigArray: %s", r2.filename), FD.get(this).lastConfigArray = t3;
    var n2 = t3.extractConfig(r2.filename), i2 = n2.processor && t3.pluginProcessors.get(n2.processor);
    if (i2) {
      pD("Apply the processor: %o", n2.processor);
      var a2 = i2.preprocess, o2 = i2.postprocess, s2 = i2.supportsAutofix, u2 = r2.disableFixes || !s2;
      return this._verifyWithProcessor(e26, n2, p({}, r2, { disableFixes: u2, postprocess: o2, preprocess: a2 }), t3);
    }
    return this._verifyWithoutProcessors(e26, n2, r2);
  } }, { key: "_verifyWithProcessor", value: function(e26, t3, r2, n2) {
    var a2 = this, o2 = r2.filename || "<input>", s2 = yD(o2), u2 = function(e27) {
      return "object" == i(e27) ? (e27.hasBOM ? "\uFEFF" : "") + e27.text : e27 + "";
    }(e26), c2 = r2.preprocess || function(e27) {
      return [e27];
    }, l2 = r2.postprocess || Fy.lodash.flatten, f2 = r2.filterCodeBlock || function(e27) {
      return e27.endsWith(".js");
    }, h2 = PC.extname(o2);
    return l2(c2(u2, s2).map(function(e27, i2) {
      if (pD("A code block was found: %o", e27.filename || "(unnamed)"), "string" == typeof e27) return a2._verifyWithoutProcessors(e27, t3, r2);
      var s3 = e27.text, u3 = PC.join(o2, "".concat(i2, "_").concat(e27.filename));
      return f2(u3, s3) ? n2 && PC.extname(u3) !== h2 ? (pD("Resolving configuration again because the file extension was changed."), a2._verifyWithConfigArray(s3, n2, p({}, r2, { filename: u3 }))) : a2._verifyWithoutProcessors(s3, t3, p({}, r2, { filename: u3 })) : (pD("This code block was skipped."), []);
    }), s2);
  } }, { key: "getSourceCode", value: function() {
    return FD.get(this).lastSourceCode;
  } }, { key: "defineRule", value: function(e26, t3) {
    FD.get(this).ruleMap.define(e26, t3);
  } }, { key: "defineRules", value: function(e26) {
    var t3 = this;
    Object.getOwnPropertyNames(e26).forEach(function(r2) {
      t3.defineRule(r2, e26[r2]);
    });
  } }, { key: "getRules", value: function() {
    var e26 = FD.get(this), t3 = e26.lastConfigArray, r2 = e26.ruleMap;
    return new Map(regeneratorRuntime.mark(function e27() {
      return regeneratorRuntime.wrap(function(e28) {
        for (; ; ) switch (e28.prev = e28.next) {
          case 0:
            return e28.delegateYield(r2, "t0", 1);
          case 1:
            if (e28.t1 = t3, !e28.t1) {
              e28.next = 4;
              break;
            }
            return e28.delegateYield(t3.pluginRules, "t2", 4);
          case 4:
          case "end":
            return e28.stop();
        }
      }, e27);
    })());
  } }, { key: "defineParser", value: function(e26, t3) {
    FD.get(this).parserMap.set(e26, t3);
  } }, { key: "verifyAndFix", value: function(e26, t3, r2) {
    var n2, i2 = [], a2 = false, o2 = 0, s2 = e26, u2 = r2 && r2.filename || "".concat(e26.slice(0, 10), "..."), c2 = !(r2 && void 0 !== r2.fix) || r2.fix;
    do {
      if (o2++, pD("Linting code for ".concat(u2, " (pass ").concat(o2, ")")), i2 = this.verify(s2, t3, r2), pD("Generating fixed text for ".concat(u2, " (pass ").concat(o2, ")")), n2 = iD.applyFixes(s2, i2, c2), 1 === i2.length && i2[0].fatal) break;
      a2 = a2 || n2.fixed, s2 = n2.output;
    } while (n2.fixed && o2 < 10);
    return n2.fixed && (n2.messages = this.verify(s2, t3, r2)), n2.fixed = a2, n2.output = s2, n2;
  } }], [{ key: "version", get: function() {
    return uD.version;
  } }]), e25;
}(), getLinterInternalSlots: function(e25) {
  return FD.get(e25);
} }.Linter, SourceCodeFixer: iD, interpolate: Uk }.Linter };
var wD = r(function(e25) {
  !function() {
    function t3(e26) {
      if (null == e26) return false;
      switch (e26.type) {
        case "BlockStatement":
        case "BreakStatement":
        case "ContinueStatement":
        case "DebuggerStatement":
        case "DoWhileStatement":
        case "EmptyStatement":
        case "ExpressionStatement":
        case "ForInStatement":
        case "ForStatement":
        case "IfStatement":
        case "LabeledStatement":
        case "ReturnStatement":
        case "SwitchStatement":
        case "ThrowStatement":
        case "TryStatement":
        case "VariableDeclaration":
        case "WhileStatement":
        case "WithStatement":
          return true;
      }
      return false;
    }
    function r2(e26) {
      switch (e26.type) {
        case "IfStatement":
          return null != e26.alternate ? e26.alternate : e26.consequent;
        case "LabeledStatement":
        case "ForStatement":
        case "ForInStatement":
        case "WhileStatement":
        case "WithStatement":
          return e26.body;
      }
      return null;
    }
    e25.exports = { isExpression: function(e26) {
      if (null == e26) return false;
      switch (e26.type) {
        case "ArrayExpression":
        case "AssignmentExpression":
        case "BinaryExpression":
        case "CallExpression":
        case "ConditionalExpression":
        case "FunctionExpression":
        case "Identifier":
        case "Literal":
        case "LogicalExpression":
        case "MemberExpression":
        case "NewExpression":
        case "ObjectExpression":
        case "SequenceExpression":
        case "ThisExpression":
        case "UnaryExpression":
        case "UpdateExpression":
          return true;
      }
      return false;
    }, isStatement: t3, isIterationStatement: function(e26) {
      if (null == e26) return false;
      switch (e26.type) {
        case "DoWhileStatement":
        case "ForInStatement":
        case "ForStatement":
        case "WhileStatement":
          return true;
      }
      return false;
    }, isSourceElement: function(e26) {
      return t3(e26) || null != e26 && "FunctionDeclaration" === e26.type;
    }, isProblematicIfStatement: function(e26) {
      var t4;
      if ("IfStatement" !== e26.type) return false;
      if (null == e26.alternate) return false;
      t4 = e26.consequent;
      do {
        if ("IfStatement" === t4.type && null == t4.alternate) return true;
        t4 = r2(t4);
      } while (t4);
      return false;
    }, trailingStatement: r2 };
  }();
});
var _D = (wD.isExpression, wD.isStatement, wD.isIterationStatement, wD.isSourceElement, wD.isProblematicIfStatement, wD.trailingStatement, r(function(e25) {
  !function() {
    var t3, r2, n2, i2, a2, o2;
    function s2(e26) {
      return e26 <= 65535 ? String.fromCharCode(e26) : String.fromCharCode(Math.floor((e26 - 65536) / 1024) + 55296) + String.fromCharCode((e26 - 65536) % 1024 + 56320);
    }
    for (r2 = { NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/, NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/ }, t3 = { NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/, NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/ }, n2 = [5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288, 65279], i2 = new Array(128), o2 = 0; o2 < 128; ++o2) i2[o2] = o2 >= 97 && o2 <= 122 || o2 >= 65 && o2 <= 90 || 36 === o2 || 95 === o2;
    for (a2 = new Array(128), o2 = 0; o2 < 128; ++o2) a2[o2] = o2 >= 97 && o2 <= 122 || o2 >= 65 && o2 <= 90 || o2 >= 48 && o2 <= 57 || 36 === o2 || 95 === o2;
    e25.exports = { isDecimalDigit: function(e26) {
      return 48 <= e26 && e26 <= 57;
    }, isHexDigit: function(e26) {
      return 48 <= e26 && e26 <= 57 || 97 <= e26 && e26 <= 102 || 65 <= e26 && e26 <= 70;
    }, isOctalDigit: function(e26) {
      return e26 >= 48 && e26 <= 55;
    }, isWhiteSpace: function(e26) {
      return 32 === e26 || 9 === e26 || 11 === e26 || 12 === e26 || 160 === e26 || e26 >= 5760 && n2.indexOf(e26) >= 0;
    }, isLineTerminator: function(e26) {
      return 10 === e26 || 13 === e26 || 8232 === e26 || 8233 === e26;
    }, isIdentifierStartES5: function(e26) {
      return e26 < 128 ? i2[e26] : r2.NonAsciiIdentifierStart.test(s2(e26));
    }, isIdentifierPartES5: function(e26) {
      return e26 < 128 ? a2[e26] : r2.NonAsciiIdentifierPart.test(s2(e26));
    }, isIdentifierStartES6: function(e26) {
      return e26 < 128 ? i2[e26] : t3.NonAsciiIdentifierStart.test(s2(e26));
    }, isIdentifierPartES6: function(e26) {
      return e26 < 128 ? a2[e26] : t3.NonAsciiIdentifierPart.test(s2(e26));
    } };
  }();
}));
var TD = (_D.isDecimalDigit, _D.isHexDigit, _D.isOctalDigit, _D.isWhiteSpace, _D.isLineTerminator, _D.isIdentifierStartES5, _D.isIdentifierPartES5, _D.isIdentifierStartES6, _D.isIdentifierPartES6, r(function(e25) {
  !function() {
    var t3 = _D;
    function r2(e26, t4) {
      return !(!t4 && "yield" === e26) && n2(e26, t4);
    }
    function n2(e26, t4) {
      if (t4 && function(e27) {
        switch (e27) {
          case "implements":
          case "interface":
          case "package":
          case "private":
          case "protected":
          case "public":
          case "static":
          case "let":
            return true;
          default:
            return false;
        }
      }(e26)) return true;
      switch (e26.length) {
        case 2:
          return "if" === e26 || "in" === e26 || "do" === e26;
        case 3:
          return "var" === e26 || "for" === e26 || "new" === e26 || "try" === e26;
        case 4:
          return "this" === e26 || "else" === e26 || "case" === e26 || "void" === e26 || "with" === e26 || "enum" === e26;
        case 5:
          return "while" === e26 || "break" === e26 || "catch" === e26 || "throw" === e26 || "const" === e26 || "yield" === e26 || "class" === e26 || "super" === e26;
        case 6:
          return "return" === e26 || "typeof" === e26 || "delete" === e26 || "switch" === e26 || "export" === e26 || "import" === e26;
        case 7:
          return "default" === e26 || "finally" === e26 || "extends" === e26;
        case 8:
          return "function" === e26 || "continue" === e26 || "debugger" === e26;
        case 10:
          return "instanceof" === e26;
        default:
          return false;
      }
    }
    function i2(e26, t4) {
      return "null" === e26 || "true" === e26 || "false" === e26 || r2(e26, t4);
    }
    function a2(e26, t4) {
      return "null" === e26 || "true" === e26 || "false" === e26 || n2(e26, t4);
    }
    function o2(e26) {
      var r3, n3, i3;
      if (0 === e26.length) return false;
      if (i3 = e26.charCodeAt(0), !t3.isIdentifierStartES5(i3)) return false;
      for (r3 = 1, n3 = e26.length; r3 < n3; ++r3) if (i3 = e26.charCodeAt(r3), !t3.isIdentifierPartES5(i3)) return false;
      return true;
    }
    function s2(e26) {
      var r3, n3, i3, a3, o3;
      if (0 === e26.length) return false;
      for (o3 = t3.isIdentifierStartES6, r3 = 0, n3 = e26.length; r3 < n3; ++r3) {
        if (55296 <= (i3 = e26.charCodeAt(r3)) && i3 <= 56319) {
          if (++r3 >= n3) return false;
          if (!(56320 <= (a3 = e26.charCodeAt(r3)) && a3 <= 57343)) return false;
          i3 = 1024 * (i3 - 55296) + (a3 - 56320) + 65536;
        }
        if (!o3(i3)) return false;
        o3 = t3.isIdentifierPartES6;
      }
      return true;
    }
    e25.exports = { isKeywordES5: r2, isKeywordES6: n2, isReservedWordES5: i2, isReservedWordES6: a2, isRestrictedWord: function(e26) {
      return "eval" === e26 || "arguments" === e26;
    }, isIdentifierNameES5: o2, isIdentifierNameES6: s2, isIdentifierES5: function(e26, t4) {
      return o2(e26) && !i2(e26, t4);
    }, isIdentifierES6: function(e26, t4) {
      return s2(e26) && !a2(e26, t4);
    } };
  }();
}));
var PD = (TD.isKeywordES5, TD.isKeywordES6, TD.isReservedWordES5, TD.isReservedWordES6, TD.isRestrictedWord, TD.isIdentifierNameES5, TD.isIdentifierNameES6, TD.isIdentifierES5, TD.isIdentifierES6, r(function(e25, t3) {
  t3.ast = wD, t3.code = _D, t3.keyword = TD;
}));
var ID = (PD.ast, PD.code, PD.keyword, function(e25) {
  return new MD(e25 || HD, null);
});
var BD = 0;
var OD = 1;
function LD(e25, t3, r2, n2, i2, a2) {
  this._color = e25, this.key = t3, this.value = r2, this.left = n2, this.right = i2, this._count = a2;
}
function ND(e25) {
  return new LD(e25._color, e25.key, e25.value, e25.left, e25.right, e25._count);
}
function jD(e25, t3) {
  return new LD(e25, t3.key, t3.value, t3.left, t3.right, t3._count);
}
function RD(e25) {
  e25._count = 1 + (e25.left ? e25.left._count : 0) + (e25.right ? e25.right._count : 0);
}
function MD(e25, t3) {
  this._compare = e25, this.root = t3;
}
var VD = MD.prototype;
function UD(e25, t3) {
  var r2;
  if (t3.left && (r2 = UD(e25, t3.left))) return r2;
  return (r2 = e25(t3.key, t3.value)) || (t3.right ? UD(e25, t3.right) : void 0);
}
function qD(e25, t3, r2, n2) {
  if (t3(e25, n2.key) <= 0) {
    var i2;
    if (n2.left) {
      if (i2 = qD(e25, t3, r2, n2.left)) return i2;
    }
    if (i2 = r2(n2.key, n2.value)) return i2;
  }
  if (n2.right) return qD(e25, t3, r2, n2.right);
}
function WD(e25, t3, r2, n2, i2) {
  var a2, o2 = r2(e25, i2.key), s2 = r2(t3, i2.key);
  if (o2 <= 0) {
    if (i2.left && (a2 = WD(e25, t3, r2, n2, i2.left))) return a2;
    if (s2 > 0 && (a2 = n2(i2.key, i2.value))) return a2;
  }
  if (s2 > 0 && i2.right) return WD(e25, t3, r2, n2, i2.right);
}
function $D(e25, t3) {
  this.tree = e25, this._stack = t3;
}
Object.defineProperty(VD, "keys", { get: function() {
  var e25 = [];
  return this.forEach(function(t3, r2) {
    e25.push(t3);
  }), e25;
} }), Object.defineProperty(VD, "values", { get: function() {
  var e25 = [];
  return this.forEach(function(t3, r2) {
    e25.push(r2);
  }), e25;
} }), Object.defineProperty(VD, "length", { get: function() {
  return this.root ? this.root._count : 0;
} }), VD.insert = function(e25, t3) {
  for (var r2 = this._compare, n2 = this.root, i2 = [], a2 = []; n2; ) {
    var o2 = r2(e25, n2.key);
    i2.push(n2), a2.push(o2), n2 = o2 <= 0 ? n2.left : n2.right;
  }
  i2.push(new LD(BD, e25, t3, null, null, 1));
  for (var s2 = i2.length - 2; s2 >= 0; --s2) {
    n2 = i2[s2];
    a2[s2] <= 0 ? i2[s2] = new LD(n2._color, n2.key, n2.value, i2[s2 + 1], n2.right, n2._count + 1) : i2[s2] = new LD(n2._color, n2.key, n2.value, n2.left, i2[s2 + 1], n2._count + 1);
  }
  for (s2 = i2.length - 1; s2 > 1; --s2) {
    var u2 = i2[s2 - 1];
    n2 = i2[s2];
    if (u2._color === OD || n2._color === OD) break;
    var c2 = i2[s2 - 2];
    if (c2.left === u2) if (u2.left === n2) {
      if (!(l2 = c2.right) || l2._color !== BD) {
        if (c2._color = BD, c2.left = u2.right, u2._color = OD, u2.right = c2, i2[s2 - 2] = u2, i2[s2 - 1] = n2, RD(c2), RD(u2), s2 >= 3) (p2 = i2[s2 - 3]).left === c2 ? p2.left = u2 : p2.right = u2;
        break;
      }
      u2._color = OD, c2.right = jD(OD, l2), c2._color = BD, s2 -= 1;
    } else {
      if (!(l2 = c2.right) || l2._color !== BD) {
        if (u2.right = n2.left, c2._color = BD, c2.left = n2.right, n2._color = OD, n2.left = u2, n2.right = c2, i2[s2 - 2] = n2, i2[s2 - 1] = u2, RD(c2), RD(u2), RD(n2), s2 >= 3) (p2 = i2[s2 - 3]).left === c2 ? p2.left = n2 : p2.right = n2;
        break;
      }
      u2._color = OD, c2.right = jD(OD, l2), c2._color = BD, s2 -= 1;
    }
    else if (u2.right === n2) {
      if (!(l2 = c2.left) || l2._color !== BD) {
        if (c2._color = BD, c2.right = u2.left, u2._color = OD, u2.left = c2, i2[s2 - 2] = u2, i2[s2 - 1] = n2, RD(c2), RD(u2), s2 >= 3) (p2 = i2[s2 - 3]).right === c2 ? p2.right = u2 : p2.left = u2;
        break;
      }
      u2._color = OD, c2.left = jD(OD, l2), c2._color = BD, s2 -= 1;
    } else {
      var l2;
      if (!(l2 = c2.left) || l2._color !== BD) {
        var p2;
        if (u2.left = n2.right, c2._color = BD, c2.right = n2.left, n2._color = OD, n2.right = u2, n2.left = c2, i2[s2 - 2] = n2, i2[s2 - 1] = u2, RD(c2), RD(u2), RD(n2), s2 >= 3) (p2 = i2[s2 - 3]).right === c2 ? p2.right = n2 : p2.left = n2;
        break;
      }
      u2._color = OD, c2.left = jD(OD, l2), c2._color = BD, s2 -= 1;
    }
  }
  return i2[0]._color = OD, new MD(r2, i2[0]);
}, VD.forEach = function(e25, t3, r2) {
  if (this.root) switch (arguments.length) {
    case 1:
      return UD(e25, this.root);
    case 2:
      return qD(t3, this._compare, e25, this.root);
    case 3:
      if (this._compare(t3, r2) >= 0) return;
      return WD(t3, r2, this._compare, e25, this.root);
  }
}, Object.defineProperty(VD, "begin", { get: function() {
  for (var e25 = [], t3 = this.root; t3; ) e25.push(t3), t3 = t3.left;
  return new $D(this, e25);
} }), Object.defineProperty(VD, "end", { get: function() {
  for (var e25 = [], t3 = this.root; t3; ) e25.push(t3), t3 = t3.right;
  return new $D(this, e25);
} }), VD.at = function(e25) {
  if (e25 < 0) return new $D(this, []);
  for (var t3 = this.root, r2 = []; ; ) {
    if (r2.push(t3), t3.left) {
      if (e25 < t3.left._count) {
        t3 = t3.left;
        continue;
      }
      e25 -= t3.left._count;
    }
    if (!e25) return new $D(this, r2);
    if (e25 -= 1, !t3.right) break;
    if (e25 >= t3.right._count) break;
    t3 = t3.right;
  }
  return new $D(this, []);
}, VD.ge = function(e25) {
  for (var t3 = this._compare, r2 = this.root, n2 = [], i2 = 0; r2; ) {
    var a2 = t3(e25, r2.key);
    n2.push(r2), a2 <= 0 && (i2 = n2.length), r2 = a2 <= 0 ? r2.left : r2.right;
  }
  return n2.length = i2, new $D(this, n2);
}, VD.gt = function(e25) {
  for (var t3 = this._compare, r2 = this.root, n2 = [], i2 = 0; r2; ) {
    var a2 = t3(e25, r2.key);
    n2.push(r2), a2 < 0 && (i2 = n2.length), r2 = a2 < 0 ? r2.left : r2.right;
  }
  return n2.length = i2, new $D(this, n2);
}, VD.lt = function(e25) {
  for (var t3 = this._compare, r2 = this.root, n2 = [], i2 = 0; r2; ) {
    var a2 = t3(e25, r2.key);
    n2.push(r2), a2 > 0 && (i2 = n2.length), r2 = a2 <= 0 ? r2.left : r2.right;
  }
  return n2.length = i2, new $D(this, n2);
}, VD.le = function(e25) {
  for (var t3 = this._compare, r2 = this.root, n2 = [], i2 = 0; r2; ) {
    var a2 = t3(e25, r2.key);
    n2.push(r2), a2 >= 0 && (i2 = n2.length), r2 = a2 < 0 ? r2.left : r2.right;
  }
  return n2.length = i2, new $D(this, n2);
}, VD.find = function(e25) {
  for (var t3 = this._compare, r2 = this.root, n2 = []; r2; ) {
    var i2 = t3(e25, r2.key);
    if (n2.push(r2), 0 === i2) return new $D(this, n2);
    r2 = i2 <= 0 ? r2.left : r2.right;
  }
  return new $D(this, []);
}, VD.remove = function(e25) {
  var t3 = this.find(e25);
  return t3 ? t3.remove() : this;
}, VD.get = function(e25) {
  for (var t3 = this._compare, r2 = this.root; r2; ) {
    var n2 = t3(e25, r2.key);
    if (0 === n2) return r2.value;
    r2 = n2 <= 0 ? r2.left : r2.right;
  }
};
var GD = $D.prototype;
function zD(e25, t3) {
  e25.key = t3.key, e25.value = t3.value, e25.left = t3.left, e25.right = t3.right, e25._color = t3._color, e25._count = t3._count;
}
function HD(e25, t3) {
  return e25 < t3 ? -1 : e25 > t3 ? 1 : 0;
}
Object.defineProperty(GD, "valid", { get: function() {
  return this._stack.length > 0;
} }), Object.defineProperty(GD, "node", { get: function() {
  return this._stack.length > 0 ? this._stack[this._stack.length - 1] : null;
}, enumerable: true }), GD.clone = function() {
  return new $D(this.tree, this._stack.slice());
}, GD.remove = function() {
  var e25 = this._stack;
  if (0 === e25.length) return this.tree;
  var t3 = new Array(e25.length), r2 = e25[e25.length - 1];
  t3[t3.length - 1] = new LD(r2._color, r2.key, r2.value, r2.left, r2.right, r2._count);
  for (var n2 = e25.length - 2; n2 >= 0; --n2) {
    (r2 = e25[n2]).left === e25[n2 + 1] ? t3[n2] = new LD(r2._color, r2.key, r2.value, t3[n2 + 1], r2.right, r2._count) : t3[n2] = new LD(r2._color, r2.key, r2.value, r2.left, t3[n2 + 1], r2._count);
  }
  if ((r2 = t3[t3.length - 1]).left && r2.right) {
    var i2 = t3.length;
    for (r2 = r2.left; r2.right; ) t3.push(r2), r2 = r2.right;
    var a2 = t3[i2 - 1];
    t3.push(new LD(r2._color, a2.key, a2.value, r2.left, r2.right, r2._count)), t3[i2 - 1].key = r2.key, t3[i2 - 1].value = r2.value;
    for (n2 = t3.length - 2; n2 >= i2; --n2) r2 = t3[n2], t3[n2] = new LD(r2._color, r2.key, r2.value, r2.left, t3[n2 + 1], r2._count);
    t3[i2 - 1].left = t3[i2];
  }
  if ((r2 = t3[t3.length - 1])._color === BD) {
    var o2 = t3[t3.length - 2];
    o2.left === r2 ? o2.left = null : o2.right === r2 && (o2.right = null), t3.pop();
    for (n2 = 0; n2 < t3.length; ++n2) t3[n2]._count--;
    return new MD(this.tree._compare, t3[0]);
  }
  if (r2.left || r2.right) {
    r2.left ? zD(r2, r2.left) : r2.right && zD(r2, r2.right), r2._color = OD;
    for (n2 = 0; n2 < t3.length - 1; ++n2) t3[n2]._count--;
    return new MD(this.tree._compare, t3[0]);
  }
  if (1 === t3.length) return new MD(this.tree._compare, null);
  for (n2 = 0; n2 < t3.length; ++n2) t3[n2]._count--;
  var s2 = t3[t3.length - 2];
  return function(e26) {
    for (var t4, r3, n3, i3, a3 = e26.length - 1; a3 >= 0; --a3) {
      if (t4 = e26[a3], 0 === a3) return void (t4._color = OD);
      if ((r3 = e26[a3 - 1]).left === t4) {
        if ((n3 = r3.right).right && n3.right._color === BD) {
          if (i3 = (n3 = r3.right = ND(n3)).right = ND(n3.right), r3.right = n3.left, n3.left = r3, n3.right = i3, n3._color = r3._color, t4._color = OD, r3._color = OD, i3._color = OD, RD(r3), RD(n3), a3 > 1) (o3 = e26[a3 - 2]).left === r3 ? o3.left = n3 : o3.right = n3;
          return void (e26[a3 - 1] = n3);
        }
        if (n3.left && n3.left._color === BD) {
          if (i3 = (n3 = r3.right = ND(n3)).left = ND(n3.left), r3.right = i3.left, n3.left = i3.right, i3.left = r3, i3.right = n3, i3._color = r3._color, r3._color = OD, n3._color = OD, t4._color = OD, RD(r3), RD(n3), RD(i3), a3 > 1) (o3 = e26[a3 - 2]).left === r3 ? o3.left = i3 : o3.right = i3;
          return void (e26[a3 - 1] = i3);
        }
        if (n3._color === OD) {
          if (r3._color === BD) return r3._color = OD, void (r3.right = jD(BD, n3));
          r3.right = jD(BD, n3);
          continue;
        }
        n3 = ND(n3), r3.right = n3.left, n3.left = r3, n3._color = r3._color, r3._color = BD, RD(r3), RD(n3), a3 > 1 && ((o3 = e26[a3 - 2]).left === r3 ? o3.left = n3 : o3.right = n3), e26[a3 - 1] = n3, e26[a3] = r3, a3 + 1 < e26.length ? e26[a3 + 1] = t4 : e26.push(t4), a3 += 2;
      } else {
        if ((n3 = r3.left).left && n3.left._color === BD) {
          if (i3 = (n3 = r3.left = ND(n3)).left = ND(n3.left), r3.left = n3.right, n3.right = r3, n3.left = i3, n3._color = r3._color, t4._color = OD, r3._color = OD, i3._color = OD, RD(r3), RD(n3), a3 > 1) (o3 = e26[a3 - 2]).right === r3 ? o3.right = n3 : o3.left = n3;
          return void (e26[a3 - 1] = n3);
        }
        if (n3.right && n3.right._color === BD) {
          if (i3 = (n3 = r3.left = ND(n3)).right = ND(n3.right), r3.left = i3.right, n3.right = i3.left, i3.right = r3, i3.left = n3, i3._color = r3._color, r3._color = OD, n3._color = OD, t4._color = OD, RD(r3), RD(n3), RD(i3), a3 > 1) (o3 = e26[a3 - 2]).right === r3 ? o3.right = i3 : o3.left = i3;
          return void (e26[a3 - 1] = i3);
        }
        if (n3._color === OD) {
          if (r3._color === BD) return r3._color = OD, void (r3.left = jD(BD, n3));
          r3.left = jD(BD, n3);
          continue;
        }
        var o3;
        n3 = ND(n3), r3.left = n3.right, n3.right = r3, n3._color = r3._color, r3._color = BD, RD(r3), RD(n3), a3 > 1 && ((o3 = e26[a3 - 2]).right === r3 ? o3.right = n3 : o3.left = n3), e26[a3 - 1] = n3, e26[a3] = r3, a3 + 1 < e26.length ? e26[a3 + 1] = t4 : e26.push(t4), a3 += 2;
      }
    }
  }(t3), s2.left === r2 ? s2.left = null : s2.right = null, new MD(this.tree._compare, t3[0]);
}, Object.defineProperty(GD, "key", { get: function() {
  if (this._stack.length > 0) return this._stack[this._stack.length - 1].key;
}, enumerable: true }), Object.defineProperty(GD, "value", { get: function() {
  if (this._stack.length > 0) return this._stack[this._stack.length - 1].value;
}, enumerable: true }), Object.defineProperty(GD, "index", { get: function() {
  var e25 = 0, t3 = this._stack;
  if (0 === t3.length) {
    var r2 = this.tree.root;
    return r2 ? r2._count : 0;
  }
  t3[t3.length - 1].left && (e25 = t3[t3.length - 1].left._count);
  for (var n2 = t3.length - 2; n2 >= 0; --n2) t3[n2 + 1] === t3[n2].right && (++e25, t3[n2].left && (e25 += t3[n2].left._count));
  return e25;
}, enumerable: true }), GD.next = function() {
  var e25 = this._stack;
  if (0 !== e25.length) {
    var t3 = e25[e25.length - 1];
    if (t3.right) for (t3 = t3.right; t3; ) e25.push(t3), t3 = t3.left;
    else for (e25.pop(); e25.length > 0 && e25[e25.length - 1].right === t3; ) t3 = e25[e25.length - 1], e25.pop();
  }
}, Object.defineProperty(GD, "hasNext", { get: function() {
  var e25 = this._stack;
  if (0 === e25.length) return false;
  if (e25[e25.length - 1].right) return true;
  for (var t3 = e25.length - 1; t3 > 0; --t3) if (e25[t3 - 1].left === e25[t3]) return true;
  return false;
} }), GD.update = function(e25) {
  var t3 = this._stack;
  if (0 === t3.length) throw new Error("Can't update empty node!");
  var r2 = new Array(t3.length), n2 = t3[t3.length - 1];
  r2[r2.length - 1] = new LD(n2._color, n2.key, e25, n2.left, n2.right, n2._count);
  for (var i2 = t3.length - 2; i2 >= 0; --i2) (n2 = t3[i2]).left === t3[i2 + 1] ? r2[i2] = new LD(n2._color, n2.key, n2.value, r2[i2 + 1], n2.right, n2._count) : r2[i2] = new LD(n2._color, n2.key, n2.value, n2.left, r2[i2 + 1], n2._count);
  return new MD(this.tree._compare, r2[0]);
}, GD.prev = function() {
  var e25 = this._stack;
  if (0 !== e25.length) {
    var t3 = e25[e25.length - 1];
    if (t3.left) for (t3 = t3.left; t3; ) e25.push(t3), t3 = t3.right;
    else for (e25.pop(); e25.length > 0 && e25[e25.length - 1].left === t3; ) t3 = e25[e25.length - 1], e25.pop();
  }
}, Object.defineProperty(GD, "hasPrev", { get: function() {
  var e25 = this._stack;
  if (0 === e25.length) return false;
  if (e25[e25.length - 1].left) return true;
  for (var t3 = e25.length - 1; t3 > 0; --t3) if (e25[t3 - 1].right === e25[t3]) return true;
  return false;
} });
var KD = Object.freeze({});
function JD(e25) {
  return !(e25 < 48) && (e25 < 58 || !(e25 < 65) && (e25 < 91 || (95 === e25 || !(e25 < 97) && (e25 < 123 || (QD(e25) || function(e26) {
    if (e26 < 7376) return e26 < 3458 ? e26 < 2691 ? e26 < 2363 ? e26 < 1770 ? e26 < 1479 ? 183 === e26 || !(e26 < 768) && (e26 < 880 || (903 === e26 || !(e26 < 1155) && (e26 < 1160 || !(e26 < 1425) && (e26 < 1470 || (1471 === e26 || !(e26 < 1473) && (e26 < 1475 || !(e26 < 1476) && e26 < 1478)))))) : 1479 === e26 || !(e26 < 1552) && (e26 < 1563 || !(e26 < 1611) && (e26 < 1632 || !(e26 < 1632) && (e26 < 1642 || (1648 === e26 || !(e26 < 1750) && (e26 < 1757 || !(e26 < 1759) && (e26 < 1765 || !(e26 < 1767) && e26 < 1769)))))) : e26 < 2070 ? !(e26 < 1770) && (e26 < 1774 || !(e26 < 1776) && (e26 < 1786 || (1809 === e26 || !(e26 < 1840) && (e26 < 1867 || !(e26 < 1958) && (e26 < 1969 || !(e26 < 1984) && (e26 < 1994 || !(e26 < 2027) && (e26 < 2036 || 2045 === e26))))))) : e26 < 2074 || !(e26 < 2075) && (e26 < 2084 || !(e26 < 2085) && (e26 < 2088 || !(e26 < 2089) && (e26 < 2094 || !(e26 < 2137) && (e26 < 2140 || !(e26 < 2259) && (e26 < 2274 || !(e26 < 2275) && (e26 < 2307 || (2307 === e26 || 2362 === e26))))))) : e26 < 2509 ? e26 < 2402 ? 2363 === e26 || (2364 === e26 || !(e26 < 2366) && (e26 < 2369 || !(e26 < 2369) && (e26 < 2377 || !(e26 < 2377) && (e26 < 2381 || (2381 === e26 || !(e26 < 2382) && (e26 < 2384 || !(e26 < 2385) && e26 < 2392)))))) : e26 < 2404 || !(e26 < 2406) && (e26 < 2416 || (2433 === e26 || !(e26 < 2434) && (e26 < 2436 || (2492 === e26 || !(e26 < 2494) && (e26 < 2497 || !(e26 < 2497) && (e26 < 2501 || !(e26 < 2503) && (e26 < 2505 || !(e26 < 2507) && e26 < 2509))))))) : e26 < 2622 ? 2509 === e26 || (2519 === e26 || !(e26 < 2530) && (e26 < 2532 || !(e26 < 2534) && (e26 < 2544 || (2558 === e26 || !(e26 < 2561) && (e26 < 2563 || (2563 === e26 || 2620 === e26)))))) : e26 < 2625 || !(e26 < 2625) && (e26 < 2627 || !(e26 < 2631) && (e26 < 2633 || !(e26 < 2635) && (e26 < 2638 || (2641 === e26 || !(e26 < 2662) && (e26 < 2672 || !(e26 < 2672) && (e26 < 2674 || (2677 === e26 || !(e26 < 2689) && e26 < 2691))))))) : e26 < 3072 ? e26 < 2881 ? e26 < 2786 ? 2691 === e26 || (2748 === e26 || !(e26 < 2750) && (e26 < 2753 || !(e26 < 2753) && (e26 < 2758 || !(e26 < 2759) && (e26 < 2761 || (2761 === e26 || !(e26 < 2763) && (e26 < 2765 || 2765 === e26)))))) : e26 < 2788 || !(e26 < 2790) && (e26 < 2800 || !(e26 < 2810) && (e26 < 2816 || (2817 === e26 || !(e26 < 2818) && (e26 < 2820 || (2876 === e26 || (2878 === e26 || (2879 === e26 || 2880 === e26))))))) : e26 < 2946 ? !(e26 < 2881) && (e26 < 2885 || !(e26 < 2887) && (e26 < 2889 || !(e26 < 2891) && (e26 < 2893 || (2893 === e26 || (2902 === e26 || (2903 === e26 || !(e26 < 2914) && (e26 < 2916 || !(e26 < 2918) && e26 < 2928))))))) : 2946 === e26 || !(e26 < 3006) && (e26 < 3008 || (3008 === e26 || !(e26 < 3009) && (e26 < 3011 || !(e26 < 3014) && (e26 < 3017 || !(e26 < 3018) && (e26 < 3021 || (3021 === e26 || (3031 === e26 || !(e26 < 3046) && e26 < 3056))))))) : e26 < 3271 ? e26 < 3170 ? 3072 === e26 || !(e26 < 3073) && (e26 < 3076 || (3076 === e26 || !(e26 < 3134) && (e26 < 3137 || !(e26 < 3137) && (e26 < 3141 || !(e26 < 3142) && (e26 < 3145 || !(e26 < 3146) && (e26 < 3150 || !(e26 < 3157) && e26 < 3159)))))) : e26 < 3172 || !(e26 < 3174) && (e26 < 3184 || (3201 === e26 || !(e26 < 3202) && (e26 < 3204 || (3260 === e26 || (3262 === e26 || (3263 === e26 || !(e26 < 3264) && (e26 < 3269 || 3270 === e26))))))) : e26 < 3387 ? !(e26 < 3271) && (e26 < 3273 || !(e26 < 3274) && (e26 < 3276 || !(e26 < 3276) && (e26 < 3278 || !(e26 < 3285) && (e26 < 3287 || !(e26 < 3298) && (e26 < 3300 || !(e26 < 3302) && (e26 < 3312 || !(e26 < 3328) && (e26 < 3330 || !(e26 < 3330) && e26 < 3332))))))) : e26 < 3389 || !(e26 < 3390) && (e26 < 3393 || !(e26 < 3393) && (e26 < 3397 || !(e26 < 3398) && (e26 < 3401 || !(e26 < 3402) && (e26 < 3405 || (3405 === e26 || (3415 === e26 || !(e26 < 3426) && (e26 < 3428 || !(e26 < 3430) && e26 < 3440))))))) : e26 < 6112 ? e26 < 4152 ? e26 < 3864 ? e26 < 3633 ? !(e26 < 3458) && (e26 < 3460 || (3530 === e26 || !(e26 < 3535) && (e26 < 3538 || !(e26 < 3538) && (e26 < 3541 || (3542 === e26 || !(e26 < 3544) && (e26 < 3552 || !(e26 < 3558) && (e26 < 3568 || !(e26 < 3570) && e26 < 3572))))))) : 3633 === e26 || !(e26 < 3636) && (e26 < 3643 || !(e26 < 3655) && (e26 < 3663 || !(e26 < 3664) && (e26 < 3674 || (3761 === e26 || !(e26 < 3764) && (e26 < 3770 || !(e26 < 3771) && (e26 < 3773 || !(e26 < 3784) && (e26 < 3790 || !(e26 < 3792) && e26 < 3802))))))) : e26 < 3968 ? !(e26 < 3864) && (e26 < 3866 || !(e26 < 3872) && (e26 < 3882 || (3893 === e26 || (3895 === e26 || (3897 === e26 || !(e26 < 3902) && (e26 < 3904 || !(e26 < 3953) && (e26 < 3967 || 3967 === e26))))))) : e26 < 3973 || !(e26 < 3974) && (e26 < 3976 || !(e26 < 3981) && (e26 < 3992 || !(e26 < 3993) && (e26 < 4029 || (4038 === e26 || !(e26 < 4139) && (e26 < 4141 || !(e26 < 4141) && (e26 < 4145 || (4145 === e26 || !(e26 < 4146) && e26 < 4152))))))) : e26 < 4240 ? e26 < 4194 ? 4152 === e26 || !(e26 < 4153) && (e26 < 4155 || !(e26 < 4155) && (e26 < 4157 || !(e26 < 4157) && (e26 < 4159 || !(e26 < 4160) && (e26 < 4170 || !(e26 < 4182) && (e26 < 4184 || !(e26 < 4184) && (e26 < 4186 || !(e26 < 4190) && e26 < 4193)))))) : e26 < 4197 || !(e26 < 4199) && (e26 < 4206 || !(e26 < 4209) && (e26 < 4213 || (4226 === e26 || !(e26 < 4227) && (e26 < 4229 || !(e26 < 4229) && (e26 < 4231 || !(e26 < 4231) && (e26 < 4237 || (4237 === e26 || 4239 === e26))))))) : e26 < 6002 ? !(e26 < 4240) && (e26 < 4250 || !(e26 < 4250) && (e26 < 4253 || (4253 === e26 || !(e26 < 4957) && (e26 < 4960 || !(e26 < 4969) && (e26 < 4978 || !(e26 < 5906) && (e26 < 5909 || !(e26 < 5938) && (e26 < 5941 || !(e26 < 5970) && e26 < 5972))))))) : e26 < 6004 || !(e26 < 6068) && (e26 < 6070 || (6070 === e26 || !(e26 < 6071) && (e26 < 6078 || !(e26 < 6078) && (e26 < 6086 || (6086 === e26 || !(e26 < 6087) && (e26 < 6089 || !(e26 < 6089) && (e26 < 6100 || 6109 === e26))))))) : e26 < 6916 ? e26 < 6683 ? e26 < 6448 ? !(e26 < 6112) && (e26 < 6122 || !(e26 < 6155) && (e26 < 6158 || !(e26 < 6160) && (e26 < 6170 || (6313 === e26 || !(e26 < 6432) && (e26 < 6435 || !(e26 < 6435) && (e26 < 6439 || !(e26 < 6439) && (e26 < 6441 || !(e26 < 6441) && e26 < 6444))))))) : e26 < 6450 || (6450 === e26 || !(e26 < 6451) && (e26 < 6457 || !(e26 < 6457) && (e26 < 6460 || !(e26 < 6470) && (e26 < 6480 || !(e26 < 6608) && (e26 < 6618 || (6618 === e26 || !(e26 < 6679) && (e26 < 6681 || !(e26 < 6681) && e26 < 6683))))))) : e26 < 6755 ? 6683 === e26 || (6741 === e26 || (6742 === e26 || (6743 === e26 || !(e26 < 6744) && (e26 < 6751 || (6752 === e26 || (6753 === e26 || 6754 === e26)))))) : e26 < 6757 || !(e26 < 6757) && (e26 < 6765 || !(e26 < 6765) && (e26 < 6771 || !(e26 < 6771) && (e26 < 6781 || (6783 === e26 || !(e26 < 6784) && (e26 < 6794 || !(e26 < 6800) && (e26 < 6810 || !(e26 < 6832) && (e26 < 6846 || !(e26 < 6912) && e26 < 6916))))))) : e26 < 7082 ? e26 < 6979 ? 6916 === e26 || (6964 === e26 || (6965 === e26 || !(e26 < 6966) && (e26 < 6971 || (6971 === e26 || (6972 === e26 || !(e26 < 6973) && (e26 < 6978 || 6978 === e26)))))) : e26 < 6981 || !(e26 < 6992) && (e26 < 7002 || !(e26 < 7019) && (e26 < 7028 || !(e26 < 7040) && (e26 < 7042 || (7042 === e26 || (7073 === e26 || !(e26 < 7074) && (e26 < 7078 || !(e26 < 7078) && (e26 < 7080 || !(e26 < 7080) && e26 < 7082))))))) : e26 < 7150 ? 7082 === e26 || !(e26 < 7083) && (e26 < 7086 || !(e26 < 7088) && (e26 < 7098 || (7142 === e26 || (7143 === e26 || !(e26 < 7144) && (e26 < 7146 || !(e26 < 7146) && (e26 < 7149 || 7149 === e26)))))) : 7150 === e26 || !(e26 < 7151) && (e26 < 7154 || !(e26 < 7154) && (e26 < 7156 || !(e26 < 7204) && (e26 < 7212 || !(e26 < 7212) && (e26 < 7220 || !(e26 < 7220) && (e26 < 7222 || !(e26 < 7222) && (e26 < 7224 || !(e26 < 7232) && (e26 < 7242 || !(e26 < 7248) && e26 < 7258)))))));
    if (e26 < 70206) return e26 < 43703 ? e26 < 43188 ? e26 < 11647 ? e26 < 7416 ? !(e26 < 7376) && (e26 < 7379 || !(e26 < 7380) && (e26 < 7393 || (7393 === e26 || !(e26 < 7394) && (e26 < 7401 || (7405 === e26 || !(e26 < 7410) && (e26 < 7412 || (7412 === e26 || 7415 === e26))))))) : e26 < 7418 || !(e26 < 7616) && (e26 < 7674 || !(e26 < 7675) && (e26 < 7680 || !(e26 < 8255) && (e26 < 8257 || (8276 === e26 || !(e26 < 8400) && (e26 < 8413 || (8417 === e26 || !(e26 < 8421) && (e26 < 8433 || !(e26 < 11503) && e26 < 11506))))))) : e26 < 42654 ? 11647 === e26 || !(e26 < 11744) && (e26 < 11776 || !(e26 < 12330) && (e26 < 12334 || !(e26 < 12334) && (e26 < 12336 || !(e26 < 12441) && (e26 < 12443 || !(e26 < 42528) && (e26 < 42538 || (42607 === e26 || !(e26 < 42612) && e26 < 42622)))))) : e26 < 42656 || !(e26 < 42736) && (e26 < 42738 || (43010 === e26 || (43014 === e26 || (43019 === e26 || !(e26 < 43043) && (e26 < 43045 || !(e26 < 43045) && (e26 < 43047 || (43047 === e26 || !(e26 < 43136) && e26 < 43138))))))) : e26 < 43472 ? e26 < 43346 ? !(e26 < 43188) && (e26 < 43204 || !(e26 < 43204) && (e26 < 43206 || !(e26 < 43216) && (e26 < 43226 || !(e26 < 43232) && (e26 < 43250 || (43263 === e26 || !(e26 < 43264) && (e26 < 43274 || !(e26 < 43302) && (e26 < 43310 || !(e26 < 43335) && e26 < 43346))))))) : e26 < 43348 || !(e26 < 43392) && (e26 < 43395 || (43395 === e26 || (43443 === e26 || !(e26 < 43444) && (e26 < 43446 || !(e26 < 43446) && (e26 < 43450 || !(e26 < 43450) && (e26 < 43452 || (43452 === e26 || !(e26 < 43453) && e26 < 43457))))))) : e26 < 43587 ? !(e26 < 43472) && (e26 < 43482 || (43493 === e26 || !(e26 < 43504) && (e26 < 43514 || !(e26 < 43561) && (e26 < 43567 || !(e26 < 43567) && (e26 < 43569 || !(e26 < 43569) && (e26 < 43571 || !(e26 < 43571) && (e26 < 43573 || !(e26 < 43573) && e26 < 43575))))))) : 43587 === e26 || (43596 === e26 || (43597 === e26 || !(e26 < 43600) && (e26 < 43610 || (43643 === e26 || (43644 === e26 || (43645 === e26 || (43696 === e26 || !(e26 < 43698) && e26 < 43701))))))) : e26 < 68912 ? e26 < 65024 ? e26 < 44003 ? !(e26 < 43703) && (e26 < 43705 || !(e26 < 43710) && (e26 < 43712 || (43713 === e26 || (43755 === e26 || !(e26 < 43756) && (e26 < 43758 || !(e26 < 43758) && (e26 < 43760 || (43765 === e26 || 43766 === e26))))))) : e26 < 44005 || (44005 === e26 || !(e26 < 44006) && (e26 < 44008 || (44008 === e26 || !(e26 < 44009) && (e26 < 44011 || (44012 === e26 || (44013 === e26 || !(e26 < 44016) && (e26 < 44026 || 64286 === e26))))))) : e26 < 66422 ? !(e26 < 65024) && (e26 < 65040 || !(e26 < 65056) && (e26 < 65072 || !(e26 < 65075) && (e26 < 65077 || !(e26 < 65101) && (e26 < 65104 || !(e26 < 65296) && (e26 < 65306 || (65343 === e26 || (66045 === e26 || 66272 === e26))))))) : e26 < 66427 || !(e26 < 66720) && (e26 < 66730 || !(e26 < 68097) && (e26 < 68100 || !(e26 < 68101) && (e26 < 68103 || !(e26 < 68108) && (e26 < 68112 || !(e26 < 68152) && (e26 < 68155 || (68159 === e26 || !(e26 < 68325) && (e26 < 68327 || !(e26 < 68900) && e26 < 68904))))))) : e26 < 69933 ? e26 < 69762 ? !(e26 < 68912) && (e26 < 68922 || !(e26 < 69446) && (e26 < 69457 || (69632 === e26 || (69633 === e26 || (69634 === e26 || !(e26 < 69688) && (e26 < 69703 || !(e26 < 69734) && (e26 < 69744 || !(e26 < 69759) && e26 < 69762))))))) : 69762 === e26 || !(e26 < 69808) && (e26 < 69811 || !(e26 < 69811) && (e26 < 69815 || !(e26 < 69815) && (e26 < 69817 || !(e26 < 69817) && (e26 < 69819 || !(e26 < 69872) && (e26 < 69882 || !(e26 < 69888) && (e26 < 69891 || !(e26 < 69927) && (e26 < 69932 || 69932 === e26))))))) : e26 < 70079 ? !(e26 < 69933) && (e26 < 69941 || !(e26 < 69942) && (e26 < 69952 || !(e26 < 69957) && (e26 < 69959 || (70003 === e26 || !(e26 < 70016) && (e26 < 70018 || (70018 === e26 || !(e26 < 70067) && (e26 < 70070 || !(e26 < 70070) && e26 < 70079))))))) : e26 < 70081 || !(e26 < 70089) && (e26 < 70093 || !(e26 < 70096) && (e26 < 70106 || !(e26 < 70188) && (e26 < 70191 || !(e26 < 70191) && (e26 < 70194 || !(e26 < 70194) && (e26 < 70196 || (70196 === e26 || (70197 === e26 || !(e26 < 70198) && e26 < 70200)))))));
    if (e26 < 72243) return e26 < 71087 ? e26 < 70709 ? e26 < 70462 ? 70206 === e26 || (70367 === e26 || !(e26 < 70368) && (e26 < 70371 || !(e26 < 70371) && (e26 < 70379 || !(e26 < 70384) && (e26 < 70394 || !(e26 < 70400) && (e26 < 70402 || !(e26 < 70402) && (e26 < 70404 || !(e26 < 70459) && e26 < 70461)))))) : e26 < 70464 || (70464 === e26 || !(e26 < 70465) && (e26 < 70469 || !(e26 < 70471) && (e26 < 70473 || !(e26 < 70475) && (e26 < 70478 || (70487 === e26 || !(e26 < 70498) && (e26 < 70500 || !(e26 < 70502) && (e26 < 70509 || !(e26 < 70512) && e26 < 70517))))))) : e26 < 70832 ? !(e26 < 70709) && (e26 < 70712 || !(e26 < 70712) && (e26 < 70720 || !(e26 < 70720) && (e26 < 70722 || !(e26 < 70722) && (e26 < 70725 || (70725 === e26 || (70726 === e26 || !(e26 < 70736) && (e26 < 70746 || 70750 === e26))))))) : e26 < 70835 || !(e26 < 70835) && (e26 < 70841 || (70841 === e26 || (70842 === e26 || !(e26 < 70843) && (e26 < 70847 || !(e26 < 70847) && (e26 < 70849 || (70849 === e26 || !(e26 < 70850) && (e26 < 70852 || !(e26 < 70864) && e26 < 70874))))))) : e26 < 71342 ? e26 < 71219 ? !(e26 < 71087) && (e26 < 71090 || !(e26 < 71090) && (e26 < 71094 || !(e26 < 71096) && (e26 < 71100 || !(e26 < 71100) && (e26 < 71102 || (71102 === e26 || !(e26 < 71103) && (e26 < 71105 || !(e26 < 71132) && (e26 < 71134 || !(e26 < 71216) && e26 < 71219))))))) : e26 < 71227 || !(e26 < 71227) && (e26 < 71229 || (71229 === e26 || (71230 === e26 || !(e26 < 71231) && (e26 < 71233 || !(e26 < 71248) && (e26 < 71258 || (71339 === e26 || (71340 === e26 || 71341 === e26))))))) : e26 < 71462 ? !(e26 < 71342) && (e26 < 71344 || !(e26 < 71344) && (e26 < 71350 || (71350 === e26 || (71351 === e26 || !(e26 < 71360) && (e26 < 71370 || !(e26 < 71453) && (e26 < 71456 || !(e26 < 71456) && (e26 < 71458 || !(e26 < 71458) && e26 < 71462))))))) : 71462 === e26 || !(e26 < 71463) && (e26 < 71468 || !(e26 < 71472) && (e26 < 71482 || !(e26 < 71724) && (e26 < 71727 || !(e26 < 71727) && (e26 < 71736 || (71736 === e26 || !(e26 < 71737) && (e26 < 71739 || !(e26 < 71904) && (e26 < 71914 || !(e26 < 72193) && e26 < 72203)))))));
    if (e26 < 73111) return e26 < 72873 ? e26 < 72343 ? !(e26 < 72243) && (e26 < 72249 || (72249 === e26 || !(e26 < 72251) && (e26 < 72255 || (72263 === e26 || !(e26 < 72273) && (e26 < 72279 || !(e26 < 72279) && (e26 < 72281 || !(e26 < 72281) && (e26 < 72284 || !(e26 < 72330) && e26 < 72343))))))) : 72343 === e26 || !(e26 < 72344) && (e26 < 72346 || (72751 === e26 || !(e26 < 72752) && (e26 < 72759 || !(e26 < 72760) && (e26 < 72766 || (72766 === e26 || (72767 === e26 || !(e26 < 72784) && (e26 < 72794 || !(e26 < 72850) && e26 < 72872))))))) : e26 < 73020 ? 72873 === e26 || !(e26 < 72874) && (e26 < 72881 || (72881 === e26 || !(e26 < 72882) && (e26 < 72884 || (72884 === e26 || !(e26 < 72885) && (e26 < 72887 || !(e26 < 73009) && (e26 < 73015 || 73018 === e26)))))) : e26 < 73022 || !(e26 < 73023) && (e26 < 73030 || (73031 === e26 || !(e26 < 73040) && (e26 < 73050 || !(e26 < 73098) && (e26 < 73103 || !(e26 < 73104) && (e26 < 73106 || !(e26 < 73107) && (e26 < 73109 || (73109 === e26 || 73110 === e26)))))));
    if (e26 < 119362) return e26 < 94033 ? 73111 === e26 || !(e26 < 73120) && (e26 < 73130 || !(e26 < 73459) && (e26 < 73461 || !(e26 < 73461) && (e26 < 73463 || !(e26 < 92768) && (e26 < 92778 || !(e26 < 92912) && (e26 < 92917 || !(e26 < 92976) && (e26 < 92983 || !(e26 < 93008) && e26 < 93018)))))) : e26 < 94079 || !(e26 < 94095) && (e26 < 94099 || !(e26 < 113821) && (e26 < 113823 || !(e26 < 119141) && (e26 < 119143 || !(e26 < 119143) && (e26 < 119146 || !(e26 < 119149) && (e26 < 119155 || !(e26 < 119163) && (e26 < 119171 || !(e26 < 119173) && (e26 < 119180 || !(e26 < 119210) && e26 < 119214)))))));
    if (e26 < 122880) return !(e26 < 119362) && (e26 < 119365 || !(e26 < 120782) && (e26 < 120832 || !(e26 < 121344) && (e26 < 121399 || !(e26 < 121403) && (e26 < 121453 || (121461 === e26 || (121476 === e26 || !(e26 < 121499) && (e26 < 121504 || !(e26 < 121505) && e26 < 121520)))))));
    return e26 < 122887 || !(e26 < 122888) && (e26 < 122905 || !(e26 < 122907) && (e26 < 122914 || !(e26 < 122915) && (e26 < 122917 || !(e26 < 122918) && (e26 < 122923 || !(e26 < 125136) && (e26 < 125143 || !(e26 < 125252) && (e26 < 125259 || !(e26 < 125264) && (e26 < 125274 || !(e26 < 917760) && e26 < 918e3)))))));
  }(e25))))));
}
function QD(e25) {
  return e25 < 12449 ? e25 < 3776 ? e25 < 2613 ? e25 < 1765 ? e25 < 890 ? e25 < 660 ? e25 < 248 ? 170 === e25 || (181 === e25 || (186 === e25 || !(e25 < 192) && (e25 < 215 || !(e25 < 216) && e25 < 247))) : e25 < 443 || (443 === e25 || !(e25 < 444) && (e25 < 448 || !(e25 < 448) && (e25 < 452 || !(e25 < 452) && e25 < 660))) : e25 < 748 ? 660 === e25 || !(e25 < 661) && (e25 < 688 || !(e25 < 688) && (e25 < 706 || !(e25 < 710) && (e25 < 722 || !(e25 < 736) && e25 < 741))) : 748 === e25 || (750 === e25 || !(e25 < 880) && (e25 < 884 || (884 === e25 || !(e25 < 886) && e25 < 888))) : e25 < 1329 ? e25 < 908 ? 890 === e25 || !(e25 < 891) && (e25 < 894 || (895 === e25 || (902 === e25 || !(e25 < 904) && e25 < 907))) : 908 === e25 || !(e25 < 910) && (e25 < 930 || !(e25 < 931) && (e25 < 1014 || !(e25 < 1015) && (e25 < 1154 || !(e25 < 1162) && e25 < 1328))) : e25 < 1568 ? !(e25 < 1329) && (e25 < 1367 || (1369 === e25 || !(e25 < 1376) && (e25 < 1417 || !(e25 < 1488) && (e25 < 1515 || !(e25 < 1519) && e25 < 1523)))) : e25 < 1600 || (1600 === e25 || !(e25 < 1601) && (e25 < 1611 || !(e25 < 1646) && (e25 < 1648 || !(e25 < 1649) && (e25 < 1748 || 1749 === e25)))) : e25 < 2384 ? e25 < 2042 ? e25 < 1810 ? !(e25 < 1765) && (e25 < 1767 || !(e25 < 1774) && (e25 < 1776 || !(e25 < 1786) && (e25 < 1789 || (1791 === e25 || 1808 === e25)))) : e25 < 1840 || !(e25 < 1869) && (e25 < 1958 || (1969 === e25 || !(e25 < 1994) && (e25 < 2027 || !(e25 < 2036) && e25 < 2038))) : e25 < 2112 ? 2042 === e25 || !(e25 < 2048) && (e25 < 2070 || (2074 === e25 || (2084 === e25 || 2088 === e25))) : e25 < 2137 || !(e25 < 2144) && (e25 < 2155 || !(e25 < 2208) && (e25 < 2229 || !(e25 < 2230) && (e25 < 2238 || !(e25 < 2308) && (e25 < 2362 || 2365 === e25)))) : e25 < 2493 ? e25 < 2447 ? 2384 === e25 || !(e25 < 2392) && (e25 < 2402 || (2417 === e25 || !(e25 < 2418) && (e25 < 2433 || !(e25 < 2437) && e25 < 2445))) : e25 < 2449 || !(e25 < 2451) && (e25 < 2473 || !(e25 < 2474) && (e25 < 2481 || (2482 === e25 || !(e25 < 2486) && e25 < 2490))) : e25 < 2556 ? 2493 === e25 || (2510 === e25 || !(e25 < 2524) && (e25 < 2526 || !(e25 < 2527) && (e25 < 2530 || !(e25 < 2544) && e25 < 2546))) : 2556 === e25 || !(e25 < 2565) && (e25 < 2571 || !(e25 < 2575) && (e25 < 2577 || !(e25 < 2579) && (e25 < 2601 || !(e25 < 2602) && (e25 < 2609 || !(e25 < 2610) && e25 < 2612)))) : e25 < 3168 ? e25 < 2877 ? e25 < 2741 ? e25 < 2693 ? !(e25 < 2613) && (e25 < 2615 || !(e25 < 2616) && (e25 < 2618 || !(e25 < 2649) && (e25 < 2653 || (2654 === e25 || !(e25 < 2674) && e25 < 2677)))) : e25 < 2702 || !(e25 < 2703) && (e25 < 2706 || !(e25 < 2707) && (e25 < 2729 || !(e25 < 2730) && (e25 < 2737 || !(e25 < 2738) && e25 < 2740))) : e25 < 2821 ? !(e25 < 2741) && (e25 < 2746 || (2749 === e25 || (2768 === e25 || !(e25 < 2784) && (e25 < 2786 || 2809 === e25)))) : e25 < 2829 || !(e25 < 2831) && (e25 < 2833 || !(e25 < 2835) && (e25 < 2857 || !(e25 < 2858) && (e25 < 2865 || !(e25 < 2866) && (e25 < 2868 || !(e25 < 2869) && e25 < 2874)))) : e25 < 2974 ? e25 < 2949 ? 2877 === e25 || !(e25 < 2908) && (e25 < 2910 || !(e25 < 2911) && (e25 < 2914 || (2929 === e25 || 2947 === e25))) : e25 < 2955 || !(e25 < 2958) && (e25 < 2961 || !(e25 < 2962) && (e25 < 2966 || !(e25 < 2969) && (e25 < 2971 || 2972 === e25))) : e25 < 3077 ? !(e25 < 2974) && (e25 < 2976 || !(e25 < 2979) && (e25 < 2981 || !(e25 < 2984) && (e25 < 2987 || !(e25 < 2990) && (e25 < 3002 || 3024 === e25)))) : e25 < 3085 || !(e25 < 3086) && (e25 < 3089 || !(e25 < 3090) && (e25 < 3113 || !(e25 < 3114) && (e25 < 3130 || (3133 === e25 || !(e25 < 3160) && e25 < 3163)))) : e25 < 3507 ? e25 < 3313 ? e25 < 3242 ? !(e25 < 3168) && (e25 < 3170 || (3200 === e25 || !(e25 < 3205) && (e25 < 3213 || !(e25 < 3214) && (e25 < 3217 || !(e25 < 3218) && e25 < 3241)))) : e25 < 3252 || !(e25 < 3253) && (e25 < 3258 || (3261 === e25 || (3294 === e25 || !(e25 < 3296) && e25 < 3298))) : e25 < 3406 ? !(e25 < 3313) && (e25 < 3315 || !(e25 < 3333) && (e25 < 3341 || !(e25 < 3342) && (e25 < 3345 || !(e25 < 3346) && (e25 < 3387 || 3389 === e25)))) : 3406 === e25 || !(e25 < 3412) && (e25 < 3415 || !(e25 < 3423) && (e25 < 3426 || !(e25 < 3450) && (e25 < 3456 || !(e25 < 3461) && (e25 < 3479 || !(e25 < 3482) && e25 < 3506)))) : e25 < 3722 ? e25 < 3648 ? !(e25 < 3507) && (e25 < 3516 || (3517 === e25 || !(e25 < 3520) && (e25 < 3527 || !(e25 < 3585) && (e25 < 3633 || !(e25 < 3634) && e25 < 3636)))) : e25 < 3654 || (3654 === e25 || !(e25 < 3713) && (e25 < 3715 || (3716 === e25 || !(e25 < 3719) && e25 < 3721))) : e25 < 3749 ? 3722 === e25 || (3725 === e25 || !(e25 < 3732) && (e25 < 3736 || !(e25 < 3737) && (e25 < 3744 || !(e25 < 3745) && e25 < 3748))) : 3749 === e25 || (3751 === e25 || !(e25 < 3754) && (e25 < 3756 || !(e25 < 3757) && (e25 < 3761 || !(e25 < 3762) && (e25 < 3764 || 3773 === e25)))) : e25 < 7401 ? e25 < 5743 ? e25 < 4349 ? e25 < 4186 ? e25 < 3913 ? !(e25 < 3776) && (e25 < 3781 || (3782 === e25 || !(e25 < 3804) && (e25 < 3808 || (3840 === e25 || !(e25 < 3904) && e25 < 3912)))) : e25 < 3949 || !(e25 < 3976) && (e25 < 3981 || !(e25 < 4096) && (e25 < 4139 || (4159 === e25 || !(e25 < 4176) && e25 < 4182))) : e25 < 4238 ? !(e25 < 4186) && (e25 < 4190 || (4193 === e25 || !(e25 < 4197) && (e25 < 4199 || !(e25 < 4206) && (e25 < 4209 || !(e25 < 4213) && e25 < 4226)))) : 4238 === e25 || !(e25 < 4256) && (e25 < 4294 || (4295 === e25 || (4301 === e25 || !(e25 < 4304) && (e25 < 4347 || 4348 === e25)))) : e25 < 4792 ? e25 < 4698 ? !(e25 < 4349) && (e25 < 4352 || !(e25 < 4352) && (e25 < 4681 || !(e25 < 4682) && (e25 < 4686 || !(e25 < 4688) && (e25 < 4695 || 4696 === e25)))) : e25 < 4702 || !(e25 < 4704) && (e25 < 4745 || !(e25 < 4746) && (e25 < 4750 || !(e25 < 4752) && (e25 < 4785 || !(e25 < 4786) && e25 < 4790))) : e25 < 4882 ? !(e25 < 4792) && (e25 < 4799 || (4800 === e25 || !(e25 < 4802) && (e25 < 4806 || !(e25 < 4808) && (e25 < 4823 || !(e25 < 4824) && e25 < 4881)))) : e25 < 4886 || !(e25 < 4888) && (e25 < 4955 || !(e25 < 4992) && (e25 < 5008 || !(e25 < 5024) && (e25 < 5110 || !(e25 < 5112) && (e25 < 5118 || !(e25 < 5121) && e25 < 5741)))) : e25 < 6320 ? e25 < 5998 ? e25 < 5888 ? !(e25 < 5743) && (e25 < 5760 || !(e25 < 5761) && (e25 < 5787 || !(e25 < 5792) && (e25 < 5867 || !(e25 < 5870) && (e25 < 5873 || !(e25 < 5873) && e25 < 5881)))) : e25 < 5901 || !(e25 < 5902) && (e25 < 5906 || !(e25 < 5920) && (e25 < 5938 || !(e25 < 5952) && (e25 < 5970 || !(e25 < 5984) && e25 < 5997))) : e25 < 6211 ? !(e25 < 5998) && (e25 < 6001 || !(e25 < 6016) && (e25 < 6068 || (6103 === e25 || (6108 === e25 || !(e25 < 6176) && e25 < 6211)))) : 6211 === e25 || !(e25 < 6212) && (e25 < 6265 || !(e25 < 6272) && (e25 < 6277 || !(e25 < 6277) && (e25 < 6279 || !(e25 < 6279) && (e25 < 6313 || 6314 === e25)))) : e25 < 6981 ? e25 < 6576 ? !(e25 < 6320) && (e25 < 6390 || !(e25 < 6400) && (e25 < 6431 || !(e25 < 6480) && (e25 < 6510 || !(e25 < 6512) && (e25 < 6517 || !(e25 < 6528) && e25 < 6572)))) : e25 < 6602 || !(e25 < 6656) && (e25 < 6679 || !(e25 < 6688) && (e25 < 6741 || (6823 === e25 || !(e25 < 6917) && e25 < 6964))) : e25 < 7245 ? !(e25 < 6981) && (e25 < 6988 || !(e25 < 7043) && (e25 < 7073 || !(e25 < 7086) && (e25 < 7088 || !(e25 < 7098) && (e25 < 7142 || !(e25 < 7168) && e25 < 7204)))) : e25 < 7248 || !(e25 < 7258) && (e25 < 7288 || !(e25 < 7288) && (e25 < 7294 || !(e25 < 7296) && (e25 < 7305 || !(e25 < 7312) && (e25 < 7355 || !(e25 < 7357) && e25 < 7360)))) : e25 < 8495 ? e25 < 8130 ? e25 < 7960 ? e25 < 7531 ? !(e25 < 7401) && (e25 < 7405 || !(e25 < 7406) && (e25 < 7410 || !(e25 < 7413) && (e25 < 7415 || !(e25 < 7424) && (e25 < 7468 || !(e25 < 7468) && e25 < 7531)))) : e25 < 7544 || (7544 === e25 || !(e25 < 7545) && (e25 < 7579 || !(e25 < 7579) && (e25 < 7616 || !(e25 < 7680) && e25 < 7958))) : e25 < 8027 ? !(e25 < 7960) && (e25 < 7966 || !(e25 < 7968) && (e25 < 8006 || !(e25 < 8008) && (e25 < 8014 || !(e25 < 8016) && (e25 < 8024 || 8025 === e25)))) : 8027 === e25 || (8029 === e25 || !(e25 < 8031) && (e25 < 8062 || !(e25 < 8064) && (e25 < 8117 || !(e25 < 8118) && (e25 < 8125 || 8126 === e25)))) : e25 < 8450 ? e25 < 8178 ? !(e25 < 8130) && (e25 < 8133 || !(e25 < 8134) && (e25 < 8141 || !(e25 < 8144) && (e25 < 8148 || !(e25 < 8150) && (e25 < 8156 || !(e25 < 8160) && e25 < 8173)))) : e25 < 8181 || !(e25 < 8182) && (e25 < 8189 || (8305 === e25 || (8319 === e25 || !(e25 < 8336) && e25 < 8349))) : e25 < 8473 ? 8450 === e25 || (8455 === e25 || !(e25 < 8458) && (e25 < 8468 || (8469 === e25 || 8472 === e25))) : e25 < 8478 || (8484 === e25 || (8486 === e25 || (8488 === e25 || !(e25 < 8490) && (e25 < 8494 || 8494 === e25)))) : e25 < 11648 ? e25 < 11312 ? e25 < 8526 ? !(e25 < 8495) && (e25 < 8501 || !(e25 < 8501) && (e25 < 8505 || (8505 === e25 || !(e25 < 8508) && (e25 < 8512 || !(e25 < 8517) && e25 < 8522)))) : 8526 === e25 || !(e25 < 8544) && (e25 < 8579 || !(e25 < 8579) && (e25 < 8581 || !(e25 < 8581) && (e25 < 8585 || !(e25 < 11264) && e25 < 11311))) : e25 < 11506 ? !(e25 < 11312) && (e25 < 11359 || !(e25 < 11360) && (e25 < 11388 || !(e25 < 11388) && (e25 < 11390 || !(e25 < 11390) && (e25 < 11493 || !(e25 < 11499) && e25 < 11503)))) : e25 < 11508 || !(e25 < 11520) && (e25 < 11558 || (11559 === e25 || (11565 === e25 || !(e25 < 11568) && (e25 < 11624 || 11631 === e25)))) : e25 < 12294 ? e25 < 11712 ? !(e25 < 11648) && (e25 < 11671 || !(e25 < 11680) && (e25 < 11687 || !(e25 < 11688) && (e25 < 11695 || !(e25 < 11696) && (e25 < 11703 || !(e25 < 11704) && e25 < 11711)))) : e25 < 11719 || !(e25 < 11720) && (e25 < 11727 || !(e25 < 11728) && (e25 < 11735 || !(e25 < 11736) && (e25 < 11743 || 12293 === e25))) : e25 < 12347 ? 12294 === e25 || (12295 === e25 || !(e25 < 12321) && (e25 < 12330 || !(e25 < 12337) && (e25 < 12342 || !(e25 < 12344) && e25 < 12347))) : 12347 === e25 || (12348 === e25 || !(e25 < 12353) && (e25 < 12439 || !(e25 < 12443) && (e25 < 12445 || !(e25 < 12445) && (e25 < 12447 || 12447 === e25)))) : e25 < 68448 ? e25 < 55216 ? e25 < 43138 ? e25 < 42623 ? e25 < 40981 ? e25 < 12704 ? !(e25 < 12449) && (e25 < 12539 || !(e25 < 12540) && (e25 < 12543 || (12543 === e25 || !(e25 < 12549) && (e25 < 12592 || !(e25 < 12593) && e25 < 12687)))) : e25 < 12731 || !(e25 < 12784) && (e25 < 12800 || !(e25 < 13312) && (e25 < 19894 || !(e25 < 19968) && (e25 < 40944 || !(e25 < 40960) && e25 < 40981))) : e25 < 42508 ? 40981 === e25 || !(e25 < 40982) && (e25 < 42125 || !(e25 < 42192) && (e25 < 42232 || !(e25 < 42232) && (e25 < 42238 || !(e25 < 42240) && e25 < 42508))) : 42508 === e25 || !(e25 < 42512) && (e25 < 42528 || !(e25 < 42538) && (e25 < 42540 || !(e25 < 42560) && (e25 < 42606 || 42606 === e25))) : e25 < 42891 ? e25 < 42775 ? 42623 === e25 || !(e25 < 42624) && (e25 < 42652 || !(e25 < 42652) && (e25 < 42654 || !(e25 < 42656) && (e25 < 42726 || !(e25 < 42726) && e25 < 42736))) : e25 < 42784 || !(e25 < 42786) && (e25 < 42864 || (42864 === e25 || !(e25 < 42865) && (e25 < 42888 || 42888 === e25))) : e25 < 43002 ? !(e25 < 42891) && (e25 < 42895 || (42895 === e25 || !(e25 < 42896) && (e25 < 42938 || (42999 === e25 || !(e25 < 43e3) && e25 < 43002)))) : 43002 === e25 || !(e25 < 43003) && (e25 < 43010 || !(e25 < 43011) && (e25 < 43014 || !(e25 < 43015) && (e25 < 43019 || !(e25 < 43020) && (e25 < 43043 || !(e25 < 43072) && e25 < 43124)))) : e25 < 43697 ? e25 < 43494 ? e25 < 43312 ? !(e25 < 43138) && (e25 < 43188 || !(e25 < 43250) && (e25 < 43256 || (43259 === e25 || !(e25 < 43261) && (e25 < 43263 || !(e25 < 43274) && e25 < 43302)))) : e25 < 43335 || !(e25 < 43360) && (e25 < 43389 || !(e25 < 43396) && (e25 < 43443 || (43471 === e25 || !(e25 < 43488) && e25 < 43493))) : e25 < 43588 ? 43494 === e25 || !(e25 < 43495) && (e25 < 43504 || !(e25 < 43514) && (e25 < 43519 || !(e25 < 43520) && (e25 < 43561 || !(e25 < 43584) && e25 < 43587))) : e25 < 43596 || !(e25 < 43616) && (e25 < 43632 || (43632 === e25 || !(e25 < 43633) && (e25 < 43639 || (43642 === e25 || !(e25 < 43646) && e25 < 43696)))) : e25 < 43777 ? e25 < 43739 ? 43697 === e25 || !(e25 < 43701) && (e25 < 43703 || !(e25 < 43705) && (e25 < 43710 || (43712 === e25 || 43714 === e25))) : e25 < 43741 || (43741 === e25 || !(e25 < 43744) && (e25 < 43755 || (43762 === e25 || !(e25 < 43763) && e25 < 43765))) : e25 < 43824 ? !(e25 < 43777) && (e25 < 43783 || !(e25 < 43785) && (e25 < 43791 || !(e25 < 43793) && (e25 < 43799 || !(e25 < 43808) && (e25 < 43815 || !(e25 < 43816) && e25 < 43823)))) : e25 < 43867 || !(e25 < 43868) && (e25 < 43872 || !(e25 < 43872) && (e25 < 43878 || !(e25 < 43888) && (e25 < 43968 || !(e25 < 43968) && (e25 < 44003 || !(e25 < 44032) && e25 < 55204)))) : e25 < 66349 ? e25 < 65345 ? e25 < 64318 ? e25 < 64275 ? !(e25 < 55216) && (e25 < 55239 || !(e25 < 55243) && (e25 < 55292 || !(e25 < 63744) && (e25 < 64110 || !(e25 < 64112) && (e25 < 64218 || !(e25 < 64256) && e25 < 64263)))) : e25 < 64280 || (64285 === e25 || !(e25 < 64287) && (e25 < 64297 || !(e25 < 64298) && (e25 < 64311 || !(e25 < 64312) && e25 < 64317))) : e25 < 64848 ? 64318 === e25 || !(e25 < 64320) && (e25 < 64322 || !(e25 < 64323) && (e25 < 64325 || !(e25 < 64326) && (e25 < 64434 || !(e25 < 64467) && e25 < 64830))) : e25 < 64912 || !(e25 < 64914) && (e25 < 64968 || !(e25 < 65008) && (e25 < 65020 || !(e25 < 65136) && (e25 < 65141 || !(e25 < 65142) && (e25 < 65277 || !(e25 < 65313) && e25 < 65339)))) : e25 < 65536 ? e25 < 65440 ? !(e25 < 65345) && (e25 < 65371 || !(e25 < 65382) && (e25 < 65392 || (65392 === e25 || !(e25 < 65393) && (e25 < 65438 || !(e25 < 65438) && e25 < 65440)))) : e25 < 65471 || !(e25 < 65474) && (e25 < 65480 || !(e25 < 65482) && (e25 < 65488 || !(e25 < 65490) && (e25 < 65496 || !(e25 < 65498) && e25 < 65501))) : e25 < 65616 ? !(e25 < 65536) && (e25 < 65548 || !(e25 < 65549) && (e25 < 65575 || !(e25 < 65576) && (e25 < 65595 || !(e25 < 65596) && (e25 < 65598 || !(e25 < 65599) && e25 < 65614)))) : e25 < 65630 || !(e25 < 65664) && (e25 < 65787 || !(e25 < 65856) && (e25 < 65909 || !(e25 < 66176) && (e25 < 66205 || !(e25 < 66208) && (e25 < 66257 || !(e25 < 66304) && e25 < 66336)))) : e25 < 67639 ? e25 < 66640 ? e25 < 66432 ? !(e25 < 66349) && (e25 < 66369 || (66369 === e25 || !(e25 < 66370) && (e25 < 66378 || (66378 === e25 || !(e25 < 66384) && e25 < 66422)))) : e25 < 66462 || !(e25 < 66464) && (e25 < 66500 || !(e25 < 66504) && (e25 < 66512 || !(e25 < 66513) && (e25 < 66518 || !(e25 < 66560) && e25 < 66640))) : e25 < 67072 ? !(e25 < 66640) && (e25 < 66718 || !(e25 < 66736) && (e25 < 66772 || !(e25 < 66776) && (e25 < 66812 || !(e25 < 66816) && (e25 < 66856 || !(e25 < 66864) && e25 < 66916)))) : e25 < 67383 || !(e25 < 67392) && (e25 < 67414 || !(e25 < 67424) && (e25 < 67432 || !(e25 < 67584) && (e25 < 67590 || (67592 === e25 || !(e25 < 67594) && e25 < 67638)))) : e25 < 68030 ? e25 < 67808 ? !(e25 < 67639) && (e25 < 67641 || (67644 === e25 || !(e25 < 67647) && (e25 < 67670 || !(e25 < 67680) && (e25 < 67703 || !(e25 < 67712) && e25 < 67743)))) : e25 < 67827 || !(e25 < 67828) && (e25 < 67830 || !(e25 < 67840) && (e25 < 67862 || !(e25 < 67872) && (e25 < 67898 || !(e25 < 67968) && e25 < 68024))) : e25 < 68192 ? !(e25 < 68030) && (e25 < 68032 || (68096 === e25 || !(e25 < 68112) && (e25 < 68116 || !(e25 < 68117) && (e25 < 68120 || !(e25 < 68121) && e25 < 68150)))) : e25 < 68221 || !(e25 < 68224) && (e25 < 68253 || !(e25 < 68288) && (e25 < 68296 || !(e25 < 68297) && (e25 < 68325 || !(e25 < 68352) && (e25 < 68406 || !(e25 < 68416) && e25 < 68438)))) : e25 < 93760 ? e25 < 71040 ? e25 < 70163 ? e25 < 69763 ? e25 < 68864 ? !(e25 < 68448) && (e25 < 68467 || !(e25 < 68480) && (e25 < 68498 || !(e25 < 68608) && (e25 < 68681 || !(e25 < 68736) && (e25 < 68787 || !(e25 < 68800) && e25 < 68851)))) : e25 < 68900 || !(e25 < 69376) && (e25 < 69405 || (69415 === e25 || !(e25 < 69424) && (e25 < 69446 || !(e25 < 69635) && e25 < 69688))) : e25 < 70006 ? !(e25 < 69763) && (e25 < 69808 || !(e25 < 69840) && (e25 < 69865 || !(e25 < 69891) && (e25 < 69927 || (69956 === e25 || !(e25 < 69968) && e25 < 70003)))) : 70006 === e25 || !(e25 < 70019) && (e25 < 70067 || !(e25 < 70081) && (e25 < 70085 || (70106 === e25 || (70108 === e25 || !(e25 < 70144) && e25 < 70162)))) : e25 < 70442 ? e25 < 70303 ? !(e25 < 70163) && (e25 < 70188 || !(e25 < 70272) && (e25 < 70279 || (70280 === e25 || !(e25 < 70282) && (e25 < 70286 || !(e25 < 70287) && e25 < 70302)))) : e25 < 70313 || !(e25 < 70320) && (e25 < 70367 || !(e25 < 70405) && (e25 < 70413 || !(e25 < 70415) && (e25 < 70417 || !(e25 < 70419) && e25 < 70441))) : e25 < 70493 ? !(e25 < 70442) && (e25 < 70449 || !(e25 < 70450) && (e25 < 70452 || !(e25 < 70453) && (e25 < 70458 || (70461 === e25 || 70480 === e25)))) : e25 < 70498 || !(e25 < 70656) && (e25 < 70709 || !(e25 < 70727) && (e25 < 70731 || !(e25 < 70784) && (e25 < 70832 || !(e25 < 70852) && (e25 < 70854 || 70855 === e25)))) : e25 < 72960 ? e25 < 72203 ? e25 < 71424 ? !(e25 < 71040) && (e25 < 71087 || !(e25 < 71128) && (e25 < 71132 || !(e25 < 71168) && (e25 < 71216 || (71236 === e25 || !(e25 < 71296) && e25 < 71339)))) : e25 < 71451 || !(e25 < 71680) && (e25 < 71724 || !(e25 < 71840) && (e25 < 71904 || (71935 === e25 || 72192 === e25))) : e25 < 72349 ? !(e25 < 72203) && (e25 < 72243 || (72250 === e25 || (72272 === e25 || !(e25 < 72284) && (e25 < 72324 || !(e25 < 72326) && e25 < 72330)))) : 72349 === e25 || !(e25 < 72384) && (e25 < 72441 || !(e25 < 72704) && (e25 < 72713 || !(e25 < 72714) && (e25 < 72751 || (72768 === e25 || !(e25 < 72818) && e25 < 72848)))) : e25 < 74752 ? e25 < 73063 ? !(e25 < 72960) && (e25 < 72967 || !(e25 < 72968) && (e25 < 72970 || !(e25 < 72971) && (e25 < 73009 || (73030 === e25 || !(e25 < 73056) && e25 < 73062)))) : e25 < 73065 || !(e25 < 73066) && (e25 < 73098 || (73112 === e25 || !(e25 < 73440) && (e25 < 73459 || !(e25 < 73728) && e25 < 74650))) : e25 < 92736 ? !(e25 < 74752) && (e25 < 74863 || !(e25 < 74880) && (e25 < 75076 || !(e25 < 77824) && (e25 < 78895 || !(e25 < 82944) && (e25 < 83527 || !(e25 < 92160) && e25 < 92729)))) : e25 < 92767 || !(e25 < 92880) && (e25 < 92910 || !(e25 < 92928) && (e25 < 92976 || !(e25 < 92992) && (e25 < 92996 || !(e25 < 93027) && (e25 < 93048 || !(e25 < 93053) && e25 < 93072)))) : e25 < 120772 ? e25 < 119997 ? e25 < 113776 ? e25 < 94208 ? !(e25 < 93760) && (e25 < 93824 || !(e25 < 93952) && (e25 < 94021 || (94032 === e25 || !(e25 < 94099) && (e25 < 94112 || !(e25 < 94176) && e25 < 94178)))) : e25 < 100338 || !(e25 < 100352) && (e25 < 101107 || !(e25 < 110592) && (e25 < 110879 || !(e25 < 110960) && (e25 < 111356 || !(e25 < 113664) && e25 < 113771))) : e25 < 119966 ? !(e25 < 113776) && (e25 < 113789 || !(e25 < 113792) && (e25 < 113801 || !(e25 < 113808) && (e25 < 113818 || !(e25 < 119808) && (e25 < 119893 || !(e25 < 119894) && e25 < 119965)))) : e25 < 119968 || (119970 === e25 || !(e25 < 119973) && (e25 < 119975 || !(e25 < 119977) && (e25 < 119981 || !(e25 < 119982) && (e25 < 119994 || 119995 === e25)))) : e25 < 120146 ? e25 < 120094 ? !(e25 < 119997) && (e25 < 120004 || !(e25 < 120005) && (e25 < 120070 || !(e25 < 120071) && (e25 < 120075 || !(e25 < 120077) && (e25 < 120085 || !(e25 < 120086) && e25 < 120093)))) : e25 < 120122 || !(e25 < 120123) && (e25 < 120127 || !(e25 < 120128) && (e25 < 120133 || (120134 === e25 || !(e25 < 120138) && e25 < 120145))) : e25 < 120598 ? !(e25 < 120146) && (e25 < 120486 || !(e25 < 120488) && (e25 < 120513 || !(e25 < 120514) && (e25 < 120539 || !(e25 < 120540) && (e25 < 120571 || !(e25 < 120572) && e25 < 120597)))) : e25 < 120629 || !(e25 < 120630) && (e25 < 120655 || !(e25 < 120656) && (e25 < 120687 || !(e25 < 120688) && (e25 < 120713 || !(e25 < 120714) && (e25 < 120745 || !(e25 < 120746) && e25 < 120771)))) : e25 < 126555 ? e25 < 126521 ? e25 < 126497 ? !(e25 < 120772) && (e25 < 120780 || !(e25 < 124928) && (e25 < 125125 || !(e25 < 125184) && (e25 < 125252 || !(e25 < 126464) && (e25 < 126468 || !(e25 < 126469) && e25 < 126496)))) : e25 < 126499 || (126500 === e25 || (126503 === e25 || !(e25 < 126505) && (e25 < 126515 || !(e25 < 126516) && e25 < 126520))) : e25 < 126539 ? 126521 === e25 || (126523 === e25 || (126530 === e25 || (126535 === e25 || 126537 === e25))) : 126539 === e25 || !(e25 < 126541) && (e25 < 126544 || !(e25 < 126545) && (e25 < 126547 || (126548 === e25 || (126551 === e25 || 126553 === e25)))) : e25 < 126592 ? e25 < 126567 ? 126555 === e25 || (126557 === e25 || (126559 === e25 || !(e25 < 126561) && (e25 < 126563 || 126564 === e25))) : e25 < 126571 || !(e25 < 126572) && (e25 < 126579 || !(e25 < 126580) && (e25 < 126584 || !(e25 < 126585) && (e25 < 126589 || 126590 === e25))) : e25 < 131072 ? !(e25 < 126592) && (e25 < 126602 || !(e25 < 126603) && (e25 < 126620 || !(e25 < 126625) && (e25 < 126628 || !(e25 < 126629) && (e25 < 126634 || !(e25 < 126635) && e25 < 126652)))) : e25 < 173783 || !(e25 < 173824) && (e25 < 177973 || !(e25 < 177984) && (e25 < 178206 || !(e25 < 178208) && (e25 < 183970 || !(e25 < 183984) && (e25 < 191457 || !(e25 < 194560) && e25 < 195102))));
}
var XD = { $LONE: /* @__PURE__ */ new Set(["ASCII", "ASCII_Hex_Digit", "AHex", "Alphabetic", "Alpha", "Any", "Assigned", "Bidi_Control", "Bidi_C", "Bidi_Mirrored", "Bidi_M", "Case_Ignorable", "CI", "Cased", "Changes_When_Casefolded", "CWCF", "Changes_When_Casemapped", "CWCM", "Changes_When_Lowercased", "CWL", "Changes_When_NFKC_Casefolded", "CWKCF", "Changes_When_Titlecased", "CWT", "Changes_When_Uppercased", "CWU", "Dash", "Default_Ignorable_Code_Point", "DI", "Deprecated", "Dep", "Diacritic", "Dia", "Emoji", "Emoji_Component", "Emoji_Modifier", "Emoji_Modifier_Base", "Emoji_Presentation", "Extender", "Ext", "Grapheme_Base", "Gr_Base", "Grapheme_Extend", "Gr_Ext", "Hex_Digit", "Hex", "IDS_Binary_Operator", "IDSB", "IDS_Trinary_Operator", "IDST", "ID_Continue", "IDC", "ID_Start", "IDS", "Ideographic", "Ideo", "Join_Control", "Join_C", "Logical_Order_Exception", "LOE", "Lowercase", "Lower", "Math", "Noncharacter_Code_Point", "NChar", "Pattern_Syntax", "Pat_Syn", "Pattern_White_Space", "Pat_WS", "Quotation_Mark", "QMark", "Radical", "Regional_Indicator", "RI", "Sentence_Terminal", "STerm", "Soft_Dotted", "SD", "Terminal_Punctuation", "Term", "Unified_Ideograph", "UIdeo", "Uppercase", "Upper", "Variation_Selector", "VS", "White_Space", "space", "XID_Continue", "XIDC", "XID_Start", "XIDS"]), General_Category: /* @__PURE__ */ new Set(["Cased_Letter", "LC", "Close_Punctuation", "Pe", "Connector_Punctuation", "Pc", "Control", "Cc", "cntrl", "Currency_Symbol", "Sc", "Dash_Punctuation", "Pd", "Decimal_Number", "Nd", "digit", "Enclosing_Mark", "Me", "Final_Punctuation", "Pf", "Format", "Cf", "Initial_Punctuation", "Pi", "Letter", "L", "Letter_Number", "Nl", "Line_Separator", "Zl", "Lowercase_Letter", "Ll", "Mark", "M", "Combining_Mark", "Math_Symbol", "Sm", "Modifier_Letter", "Lm", "Modifier_Symbol", "Sk", "Nonspacing_Mark", "Mn", "Number", "N", "Open_Punctuation", "Ps", "Other", "C", "Other_Letter", "Lo", "Other_Number", "No", "Other_Punctuation", "Po", "Other_Symbol", "So", "Paragraph_Separator", "Zp", "Private_Use", "Co", "Punctuation", "P", "punct", "Separator", "Z", "Space_Separator", "Zs", "Spacing_Mark", "Mc", "Surrogate", "Cs", "Symbol", "S", "Titlecase_Letter", "Lt", "Unassigned", "Cn", "Uppercase_Letter", "Lu"]), Script: /* @__PURE__ */ new Set(["Adlam", "Adlm", "Ahom", "Anatolian_Hieroglyphs", "Hluw", "Arabic", "Arab", "Armenian", "Armn", "Avestan", "Avst", "Balinese", "Bali", "Bamum", "Bamu", "Bassa_Vah", "Bass", "Batak", "Batk", "Bengali", "Beng", "Bhaiksuki", "Bhks", "Bopomofo", "Bopo", "Brahmi", "Brah", "Braille", "Brai", "Buginese", "Bugi", "Buhid", "Buhd", "Canadian_Aboriginal", "Cans", "Carian", "Cari", "Caucasian_Albanian", "Aghb", "Chakma", "Cakm", "Cham", "Cherokee", "Cher", "Common", "Zyyy", "Coptic", "Copt", "Qaac", "Cuneiform", "Xsux", "Cypriot", "Cprt", "Cyrillic", "Cyrl", "Deseret", "Dsrt", "Devanagari", "Deva", "Duployan", "Dupl", "Egyptian_Hieroglyphs", "Egyp", "Elbasan", "Elba", "Ethiopic", "Ethi", "Georgian", "Geor", "Glagolitic", "Glag", "Gothic", "Goth", "Grantha", "Gran", "Greek", "Grek", "Gujarati", "Gujr", "Gurmukhi", "Guru", "Han", "Hani", "Hangul", "Hang", "Hanunoo", "Hano", "Hatran", "Hatr", "Hebrew", "Hebr", "Hiragana", "Hira", "Imperial_Aramaic", "Armi", "Inherited", "Zinh", "Qaai", "Inscriptional_Pahlavi", "Phli", "Inscriptional_Parthian", "Prti", "Javanese", "Java", "Kaithi", "Kthi", "Kannada", "Knda", "Katakana", "Kana", "Kayah_Li", "Kali", "Kharoshthi", "Khar", "Khmer", "Khmr", "Khojki", "Khoj", "Khudawadi", "Sind", "Lao", "Laoo", "Latin", "Latn", "Lepcha", "Lepc", "Limbu", "Limb", "Linear_A", "Lina", "Linear_B", "Linb", "Lisu", "Lycian", "Lyci", "Lydian", "Lydi", "Mahajani", "Mahj", "Malayalam", "Mlym", "Mandaic", "Mand", "Manichaean", "Mani", "Marchen", "Marc", "Masaram_Gondi", "Gonm", "Meetei_Mayek", "Mtei", "Mende_Kikakui", "Mend", "Meroitic_Cursive", "Merc", "Meroitic_Hieroglyphs", "Mero", "Miao", "Plrd", "Modi", "Mongolian", "Mong", "Mro", "Mroo", "Multani", "Mult", "Myanmar", "Mymr", "Nabataean", "Nbat", "New_Tai_Lue", "Talu", "Newa", "Nko", "Nkoo", "Nushu", "Nshu", "Ogham", "Ogam", "Ol_Chiki", "Olck", "Old_Hungarian", "Hung", "Old_Italic", "Ital", "Old_North_Arabian", "Narb", "Old_Permic", "Perm", "Old_Persian", "Xpeo", "Old_South_Arabian", "Sarb", "Old_Turkic", "Orkh", "Oriya", "Orya", "Osage", "Osge", "Osmanya", "Osma", "Pahawh_Hmong", "Hmng", "Palmyrene", "Palm", "Pau_Cin_Hau", "Pauc", "Phags_Pa", "Phag", "Phoenician", "Phnx", "Psalter_Pahlavi", "Phlp", "Rejang", "Rjng", "Runic", "Runr", "Samaritan", "Samr", "Saurashtra", "Saur", "Sharada", "Shrd", "Shavian", "Shaw", "Siddham", "Sidd", "SignWriting", "Sgnw", "Sinhala", "Sinh", "Sora_Sompeng", "Sora", "Soyombo", "Soyo", "Sundanese", "Sund", "Syloti_Nagri", "Sylo", "Syriac", "Syrc", "Tagalog", "Tglg", "Tagbanwa", "Tagb", "Tai_Le", "Tale", "Tai_Tham", "Lana", "Tai_Viet", "Tavt", "Takri", "Takr", "Tamil", "Taml", "Tangut", "Tang", "Telugu", "Telu", "Thaana", "Thaa", "Thai", "Tibetan", "Tibt", "Tifinagh", "Tfng", "Tirhuta", "Tirh", "Ugaritic", "Ugar", "Vai", "Vaii", "Warang_Citi", "Wara", "Yi", "Yiii", "Zanabazar_Square", "Zanb"]) };
XD.gc = XD.General_Category, XD.sc = XD.Script_Extensions = XD.scx = XD.Script;
var YD = 10;
var ZD = 13;
var eF = 36;
var tF = 40;
var rF = 41;
var nF = 42;
var iF = 43;
var aF = 46;
var oF = 48;
var sF = 55;
var uF = 57;
var cF = 63;
var lF = 65;
var pF = 70;
var fF = 90;
var hF = 95;
var dF = 97;
var mF = 102;
var gF = 122;
var yF = 91;
var vF = 92;
var xF = 93;
var bF = 94;
var EF = 123;
var CF = 124;
var SF = 125;
var kF = 8204;
var DF = 8205;
var FF = 8232;
var AF = 8233;
var wF = 0;
var _F = 1114111;
function TF(e25) {
  return e25 >= lF && e25 <= fF || e25 >= dF && e25 <= gF;
}
function PF(e25) {
  return e25 >= oF && e25 <= uF;
}
function IF(e25) {
  return e25 >= oF && e25 <= uF || e25 >= lF && e25 <= pF || e25 >= dF && e25 <= mF;
}
function BF(e25) {
  return e25 === YD || e25 === ZD || e25 === FF || e25 === AF;
}
function OF(e25) {
  return e25 >= dF && e25 <= mF ? e25 - dF + 10 : e25 >= lF && e25 <= pF ? e25 - lF + 10 : e25 - oF;
}
var LF = { at: function(e25, t3, r2) {
  return r2 < t3 ? e25.charCodeAt(r2) : -1;
}, width: function(e25) {
  return 1;
} };
var NF = { at: function(e25, t3, r2) {
  return r2 < t3 ? e25.codePointAt(r2) : -1;
}, width: function(e25) {
  return e25 > 65535 ? 2 : 1;
} };
var jF = function() {
  function e25() {
    a(this, e25), this._impl = LF, this._s = "", this._i = 0, this._end = 0, this._cp1 = -1, this._w1 = 1, this._cp2 = -1, this._w2 = 1, this._cp3 = -1, this._w3 = 1, this._cp4 = -1;
  }
  return s(e25, [{ key: "reset", value: function(e26, t3, r2, n2) {
    this._impl = n2 ? NF : LF, this._s = e26, this._end = r2, this.rewind(t3);
  } }, { key: "rewind", value: function(e26) {
    var t3 = this._impl;
    this._i = e26, this._cp1 = t3.at(this._s, this._end, e26), this._w1 = t3.width(this._cp1), this._cp2 = t3.at(this._s, this._end, e26 + this._w1), this._w2 = t3.width(this._cp2), this._cp3 = t3.at(this._s, this._end, e26 + this._w1 + this._w2), this._w3 = t3.width(this._cp3), this._cp4 = t3.at(this._s, this._end, e26 + this._w1 + this._w2 + this._w3);
  } }, { key: "advance", value: function() {
    if (-1 !== this._cp1) {
      var e26 = this._impl;
      this._i += this._w1, this._cp1 = this._cp2, this._w1 = this._w2, this._cp2 = this._cp3, this._w2 = e26.width(this._cp2), this._cp3 = this._cp4, this._w3 = e26.width(this._cp3), this._cp4 = e26.at(this._s, this._end, this._i + this._w1 + this._w2 + this._w3);
    }
  } }, { key: "eat", value: function(e26) {
    return this._cp1 === e26 && (this.advance(), true);
  } }, { key: "eat2", value: function(e26, t3) {
    return this._cp1 === e26 && this._cp2 === t3 && (this.advance(), this.advance(), true);
  } }, { key: "eat3", value: function(e26, t3, r2) {
    return this._cp1 === e26 && this._cp2 === t3 && this._cp3 === r2 && (this.advance(), this.advance(), this.advance(), true);
  } }, { key: "source", get: function() {
    return this._s;
  } }, { key: "index", get: function() {
    return this._i;
  } }, { key: "currentCodePoint", get: function() {
    return this._cp1;
  } }, { key: "nextCodePoint", get: function() {
    return this._cp2;
  } }, { key: "nextCodePoint2", get: function() {
    return this._cp3;
  } }, { key: "nextCodePoint3", get: function() {
    return this._cp4;
  } }]), e25;
}();
var RF = function(e25) {
  function t3(e26, r2, n2, i2) {
    var o2;
    return a(this, t3), e26 && ("/" !== e26[0] && (e26 = "/".concat(e26, "/").concat(r2 ? "u" : "")), e26 = ": ".concat(e26)), (o2 = v(this, h(t3).call(this, "Invalid regular expression".concat(e26, ": ").concat(i2)))).index = n2, o2;
  }
  return f(t3, g(SyntaxError)), t3;
}();
function MF(e25) {
  return e25 === bF || e25 === eF || e25 === vF || e25 === aF || e25 === nF || e25 === iF || e25 === cF || e25 === tF || e25 === rF || e25 === yF || e25 === xF || e25 === EF || e25 === SF || e25 === CF;
}
function VF(e25) {
  return function(e26) {
    return !(e26 < 65) && (e26 < 91 || !(e26 < 97) && (e26 < 123 || QD(e26)));
  }(e25) || e25 === eF || e25 === hF;
}
function UF(e25) {
  return TF(e25) || e25 === hF;
}
function qF(e25, t3) {
  return XD.hasOwnProperty(e25) && XD[e25].has(t3);
}
var WF = function() {
  function e25(t3) {
    a(this, e25), this._reader = new jF(), this._uFlag = false, this._nFlag = false, this._lastIntValue = 0, this._lastMinValue = 0, this._lastMaxValue = 0, this._lastStrValue = "", this._lastKeyValue = "", this._lastValValue = "", this._lastAssertionIsQuantifiable = false, this._numCapturingParens = 0, this._groupNames = /* @__PURE__ */ new Set(), this._backreferenceNames = /* @__PURE__ */ new Set(), this._options = t3 || {};
  }
  return s(e25, [{ key: "validateLiteral", value: function(e26) {
    var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e26.length;
    if (this._uFlag = this._nFlag = false, this.reset(e26, t3, r2), this.onLiteralEnter(t3), this.eat(47) && this.eatRegExpBody() && this.eat(47)) {
      var n2 = this.index, i2 = -1 !== e26.indexOf("u", n2);
      this.validateFlags(e26, n2, r2), this.validatePattern(e26, t3 + 1, n2 - 1, i2);
    } else if (t3 >= r2) this.raise("Empty");
    else {
      var a2 = String.fromCodePoint(this.currentCodePoint);
      this.raise("Unexpected character '".concat(a2, "'"));
    }
    this.onLiteralLeave(t3, r2);
  } }, { key: "validateFlags", value: function(e26) {
    for (var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e26.length, n2 = /* @__PURE__ */ new Set(), i2 = false, a2 = false, o2 = false, s2 = false, u2 = false, c2 = false, l2 = t3; l2 < r2; ++l2) {
      var p2 = e26.charCodeAt(l2);
      n2.has(p2) && this.raise("Duplicated flag '".concat(e26[l2], "'")), n2.add(p2), 103 === p2 ? i2 = true : 105 === p2 ? a2 = true : 109 === p2 ? o2 = true : 117 === p2 && this.ecmaVersion >= 2015 ? u2 = true : 121 === p2 && this.ecmaVersion >= 2015 ? s2 = true : 115 === p2 && this.ecmaVersion >= 2018 ? c2 = true : this.raise("Invalid flag '".concat(e26[l2], "'"));
    }
    this.onFlags(t3, r2, i2, a2, o2, u2, s2, c2);
  } }, { key: "validatePattern", value: function(e26) {
    var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e26.length, n2 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
    this._uFlag = n2 && this.ecmaVersion >= 2015, this._nFlag = n2 && this.ecmaVersion >= 2018, this.reset(e26, t3, r2), this.pattern(), !this._nFlag && this.ecmaVersion >= 2018 && this._groupNames.size > 0 && (this._nFlag = true, this.rewind(t3), this.pattern());
  } }, { key: "onLiteralEnter", value: function(e26) {
    this._options.onLiteralEnter && this._options.onLiteralEnter(e26);
  } }, { key: "onLiteralLeave", value: function(e26, t3) {
    this._options.onLiteralLeave && this._options.onLiteralLeave(e26, t3);
  } }, { key: "onFlags", value: function(e26, t3, r2, n2, i2, a2, o2, s2) {
    this._options.onFlags && this._options.onFlags(e26, t3, r2, n2, i2, a2, o2, s2);
  } }, { key: "onPatternEnter", value: function(e26) {
    this._options.onPatternEnter && this._options.onPatternEnter(e26);
  } }, { key: "onPatternLeave", value: function(e26, t3) {
    this._options.onPatternLeave && this._options.onPatternLeave(e26, t3);
  } }, { key: "onDisjunctionEnter", value: function(e26) {
    this._options.onDisjunctionEnter && this._options.onDisjunctionEnter(e26);
  } }, { key: "onDisjunctionLeave", value: function(e26, t3) {
    this._options.onDisjunctionLeave && this._options.onDisjunctionLeave(e26, t3);
  } }, { key: "onAlternativeEnter", value: function(e26, t3) {
    this._options.onAlternativeEnter && this._options.onAlternativeEnter(e26, t3);
  } }, { key: "onAlternativeLeave", value: function(e26, t3, r2) {
    this._options.onAlternativeLeave && this._options.onAlternativeLeave(e26, t3, r2);
  } }, { key: "onGroupEnter", value: function(e26) {
    this._options.onGroupEnter && this._options.onGroupEnter(e26);
  } }, { key: "onGroupLeave", value: function(e26, t3) {
    this._options.onGroupLeave && this._options.onGroupLeave(e26, t3);
  } }, { key: "onCapturingGroupEnter", value: function(e26, t3) {
    this._options.onCapturingGroupEnter && this._options.onCapturingGroupEnter(e26, t3);
  } }, { key: "onCapturingGroupLeave", value: function(e26, t3, r2) {
    this._options.onCapturingGroupLeave && this._options.onCapturingGroupLeave(e26, t3, r2);
  } }, { key: "onQuantifier", value: function(e26, t3, r2, n2, i2) {
    this._options.onQuantifier && this._options.onQuantifier(e26, t3, r2, n2, i2);
  } }, { key: "onLookaroundAssertionEnter", value: function(e26, t3, r2) {
    this._options.onLookaroundAssertionEnter && this._options.onLookaroundAssertionEnter(e26, t3, r2);
  } }, { key: "onLookaroundAssertionLeave", value: function(e26, t3, r2, n2) {
    this._options.onLookaroundAssertionLeave && this._options.onLookaroundAssertionLeave(e26, t3, r2, n2);
  } }, { key: "onEdgeAssertion", value: function(e26, t3, r2) {
    this._options.onEdgeAssertion && this._options.onEdgeAssertion(e26, t3, r2);
  } }, { key: "onWordBoundaryAssertion", value: function(e26, t3, r2, n2) {
    this._options.onWordBoundaryAssertion && this._options.onWordBoundaryAssertion(e26, t3, r2, n2);
  } }, { key: "onAnyCharacterSet", value: function(e26, t3, r2) {
    this._options.onAnyCharacterSet && this._options.onAnyCharacterSet(e26, t3, r2);
  } }, { key: "onEscapeCharacterSet", value: function(e26, t3, r2, n2) {
    this._options.onEscapeCharacterSet && this._options.onEscapeCharacterSet(e26, t3, r2, n2);
  } }, { key: "onUnicodePropertyCharacterSet", value: function(e26, t3, r2, n2, i2, a2) {
    this._options.onUnicodePropertyCharacterSet && this._options.onUnicodePropertyCharacterSet(e26, t3, r2, n2, i2, a2);
  } }, { key: "onCharacter", value: function(e26, t3, r2) {
    this._options.onCharacter && this._options.onCharacter(e26, t3, r2);
  } }, { key: "onBackreference", value: function(e26, t3, r2) {
    this._options.onBackreference && this._options.onBackreference(e26, t3, r2);
  } }, { key: "onCharacterClassEnter", value: function(e26, t3) {
    this._options.onCharacterClassEnter && this._options.onCharacterClassEnter(e26, t3);
  } }, { key: "onCharacterClassLeave", value: function(e26, t3, r2) {
    this._options.onCharacterClassLeave && this._options.onCharacterClassLeave(e26, t3, r2);
  } }, { key: "onCharacterClassRange", value: function(e26, t3, r2, n2) {
    this._options.onCharacterClassRange && this._options.onCharacterClassRange(e26, t3, r2, n2);
  } }, { key: "reset", value: function(e26, t3, r2) {
    this._reader.reset(e26, t3, r2, this._uFlag);
  } }, { key: "rewind", value: function(e26) {
    this._reader.rewind(e26);
  } }, { key: "advance", value: function() {
    this._reader.advance();
  } }, { key: "eat", value: function(e26) {
    return this._reader.eat(e26);
  } }, { key: "eat2", value: function(e26, t3) {
    return this._reader.eat2(e26, t3);
  } }, { key: "eat3", value: function(e26, t3, r2) {
    return this._reader.eat3(e26, t3, r2);
  } }, { key: "raise", value: function(e26) {
    throw new RF(this.source, this._uFlag, this.index, e26);
  } }, { key: "eatRegExpBody", value: function() {
    for (var e26 = this.index, t3 = false, r2 = false; ; ) {
      var n2 = this.currentCodePoint;
      if (-1 === n2 || BF(n2)) {
        var i2 = t3 ? "character class" : "regular expression";
        this.raise("Unterminated ".concat(i2));
      }
      if (r2) r2 = false;
      else if (n2 === vF) r2 = true;
      else if (n2 === yF) t3 = true;
      else if (n2 === xF) t3 = false;
      else if (47 === n2 && !t3 || n2 === nF && this.index === e26) break;
      this.advance();
    }
    return this.index !== e26;
  } }, { key: "pattern", value: function() {
    var e26 = this.index;
    this._numCapturingParens = this.countCapturingParens(), this._groupNames.clear(), this._backreferenceNames.clear(), this.onPatternEnter(e26), this.disjunction();
    var t3 = this.currentCodePoint;
    if (-1 !== this.currentCodePoint) {
      t3 === rF && this.raise("Unmatched ')'"), t3 === vF && this.raise("\\ at end of pattern"), t3 !== xF && t3 !== SF || this.raise("Lone quantifier brackets");
      var r2 = String.fromCodePoint(t3);
      this.raise("Unexpected character '".concat(r2, "'"));
    }
    var n2 = true, i2 = false, a2 = void 0;
    try {
      for (var o2, s2 = this._backreferenceNames[Symbol.iterator](); !(n2 = (o2 = s2.next()).done); n2 = true) {
        var u2 = o2.value;
        this._groupNames.has(u2) || this.raise("Invalid named capture referenced");
      }
    } catch (e27) {
      i2 = true, a2 = e27;
    } finally {
      try {
        n2 || null == s2.return || s2.return();
      } finally {
        if (i2) throw a2;
      }
    }
    this.onPatternLeave(e26, this.index);
  } }, { key: "countCapturingParens", value: function() {
    for (var e26 = this.index, t3 = false, r2 = false, n2 = 0, i2 = 0; -1 !== (i2 = this.currentCodePoint); ) r2 ? r2 = false : i2 === vF ? r2 = true : i2 === yF ? t3 = true : i2 === xF ? t3 = false : i2 !== tF || t3 || this.nextCodePoint === cF && (60 !== this.nextCodePoint2 || 61 === this.nextCodePoint3 || 33 === this.nextCodePoint3) || (n2 += 1), this.advance();
    return this.rewind(e26), n2;
  } }, { key: "disjunction", value: function() {
    var e26 = this.index, t3 = 0;
    for (this.onDisjunctionEnter(e26), this.alternative(t3++); this.eat(CF); ) this.alternative(t3++);
    this.eatQuantifier(true) && this.raise("Nothing to repeat"), this.eat(EF) && this.raise("Lone quantifier brackets"), this.onDisjunctionLeave(e26, this.index);
  } }, { key: "alternative", value: function(e26) {
    var t3 = this.index;
    for (this.onAlternativeEnter(t3, e26); -1 !== this.currentCodePoint && this.eatTerm(); ) ;
    this.onAlternativeLeave(t3, this.index, e26);
  } }, { key: "eatTerm", value: function() {
    return this.eatAssertion() ? (this._lastAssertionIsQuantifiable && this.eatQuantifier(), true) : !(this.strict ? !this.eatAtom() : !this.eatExtendedAtom()) && (this.eatQuantifier(), true);
  } }, { key: "eatAssertion", value: function() {
    var e26 = this.index;
    if (this._lastAssertionIsQuantifiable = false, this.eat(bF)) return this.onEdgeAssertion(e26, this.index, "start"), true;
    if (this.eat(eF)) return this.onEdgeAssertion(e26, this.index, "end"), true;
    if (this.eat2(vF, 66)) return this.onWordBoundaryAssertion(e26, this.index, "word", true), true;
    if (this.eat2(vF, 98)) return this.onWordBoundaryAssertion(e26, this.index, "word", false), true;
    if (this.eat2(tF, cF)) {
      var t3 = this.ecmaVersion >= 2018 && this.eat(60), r2 = false;
      if (this.eat(61) || (r2 = this.eat(33))) {
        var n2 = t3 ? "lookbehind" : "lookahead";
        return this.onLookaroundAssertionEnter(e26, n2, r2), this.disjunction(), this.eat(rF) || this.raise("Unterminated group"), this._lastAssertionIsQuantifiable = !t3 && !this.strict, this.onLookaroundAssertionLeave(e26, this.index, n2, r2), true;
      }
      this.rewind(e26);
    }
    return false;
  } }, { key: "eatQuantifier", value: function() {
    var e26 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t3 = this.index, r2 = 0, n2 = 0, i2 = false;
    if (this.eat(nF)) r2 = 0, n2 = Number.POSITIVE_INFINITY;
    else if (this.eat(iF)) r2 = 1, n2 = Number.POSITIVE_INFINITY;
    else if (this.eat(cF)) r2 = 0, n2 = 1;
    else {
      if (!this.eatBracedQuantifier(e26)) return false;
      r2 = this._lastMinValue, n2 = this._lastMaxValue;
    }
    return i2 = !this.eat(cF), e26 || this.onQuantifier(t3, this.index, r2, n2, i2), true;
  } }, { key: "eatBracedQuantifier", value: function(e26) {
    var t3 = this.index;
    if (this.eat(EF)) {
      if (this._lastMinValue = 0, this._lastMaxValue = Number.POSITIVE_INFINITY, this.eatDecimalDigits() && (this._lastMinValue = this._lastMaxValue = this._lastIntValue, this.eat(44) && (this._lastMaxValue = this.eatDecimalDigits() ? this._lastIntValue : Number.POSITIVE_INFINITY), this.eat(SF))) return !e26 && this._lastMaxValue < this._lastMinValue && this.raise("numbers out of order in {} quantifier"), true;
      !e26 && this.strict && this.raise("Incomplete quantifier"), this.rewind(t3);
    }
    return false;
  } }, { key: "eatAtom", value: function() {
    return this.eatPatternCharacter() || this.eatDot() || this.eatReverseSolidusAtomEscape() || this.eatCharacterClass() || this.eatUncapturingGroup() || this.eatCapturingGroup();
  } }, { key: "eatDot", value: function() {
    return !!this.eat(aF) && (this.onAnyCharacterSet(this.index - 1, this.index, "any"), true);
  } }, { key: "eatReverseSolidusAtomEscape", value: function() {
    var e26 = this.index;
    if (this.eat(vF)) {
      if (this.eatAtomEscape()) return true;
      this.rewind(e26);
    }
    return false;
  } }, { key: "eatUncapturingGroup", value: function() {
    var e26 = this.index;
    return !!this.eat3(tF, cF, 58) && (this.onGroupEnter(e26), this.disjunction(), this.eat(rF) || this.raise("Unterminated group"), this.onGroupLeave(e26, this.index), true);
  } }, { key: "eatCapturingGroup", value: function() {
    var e26 = this.index;
    if (this.eat(tF)) {
      this._lastStrValue = "", this.ecmaVersion >= 2018 ? this.groupSpecifier() : this.currentCodePoint === cF && this.raise("Invalid group");
      var t3 = this._lastStrValue || null;
      return this.onCapturingGroupEnter(e26, t3), this.disjunction(), this.eat(rF) || this.raise("Unterminated group"), this.onCapturingGroupLeave(e26, this.index, t3), true;
    }
    return false;
  } }, { key: "eatExtendedAtom", value: function() {
    return this.eatDot() || this.eatReverseSolidusAtomEscape() || this.eatReverseSolidusFollowedByC() || this.eatCharacterClass() || this.eatUncapturingGroup() || this.eatCapturingGroup() || this.eatInvalidBracedQuantifier() || this.eatExtendedPatternCharacter();
  } }, { key: "eatReverseSolidusFollowedByC", value: function() {
    return this.currentCodePoint === vF && 99 === this.nextCodePoint && (this._lastIntValue = this.currentCodePoint, this.advance(), this.onCharacter(this.index - 1, this.index, vF), true);
  } }, { key: "eatInvalidBracedQuantifier", value: function() {
    return this.eatBracedQuantifier(true) && this.raise("Nothing to repeat"), false;
  } }, { key: "eatSyntaxCharacter", value: function() {
    return !!MF(this.currentCodePoint) && (this._lastIntValue = this.currentCodePoint, this.advance(), true);
  } }, { key: "eatPatternCharacter", value: function() {
    var e26 = this.index, t3 = this.currentCodePoint;
    return -1 !== t3 && !MF(t3) && (this.advance(), this.onCharacter(e26, this.index, t3), true);
  } }, { key: "eatExtendedPatternCharacter", value: function() {
    var e26 = this.index, t3 = this.currentCodePoint;
    return -1 !== t3 && t3 !== bF && t3 !== eF && t3 !== vF && t3 !== aF && t3 !== nF && t3 !== iF && t3 !== cF && t3 !== tF && t3 !== rF && t3 !== yF && t3 !== CF && (this.advance(), this.onCharacter(e26, this.index, t3), true);
  } }, { key: "groupSpecifier", value: function() {
    if (this._lastStrValue = "", this.eat(cF)) {
      if (this.eatGroupName()) {
        if (!this._groupNames.has(this._lastStrValue)) return void this._groupNames.add(this._lastStrValue);
        this.raise("Duplicate capture group name");
      }
      this.raise("Invalid group");
    }
  } }, { key: "eatGroupName", value: function() {
    if (this._lastStrValue = "", this.eat(60)) {
      if (this.eatRegExpIdentifierName() && this.eat(62)) return true;
      this.raise("Invalid capture group name");
    }
    return false;
  } }, { key: "eatRegExpIdentifierName", value: function() {
    if (this._lastStrValue = "", this.eatRegExpIdentifierStart()) {
      for (this._lastStrValue += String.fromCodePoint(this._lastIntValue); this.eatRegExpIdentifierPart(); ) this._lastStrValue += String.fromCodePoint(this._lastIntValue);
      return true;
    }
    return false;
  } }, { key: "eatRegExpIdentifierStart", value: function() {
    var e26 = this.index, t3 = this.currentCodePoint;
    return this.advance(), t3 === vF && this.eatRegExpUnicodeEscapeSequence() && (t3 = this._lastIntValue), VF(t3) ? (this._lastIntValue = t3, true) : (this.index !== e26 && this.rewind(e26), false);
  } }, { key: "eatRegExpIdentifierPart", value: function() {
    var e26 = this.index, t3 = this.currentCodePoint;
    return this.advance(), t3 === vF && this.eatRegExpUnicodeEscapeSequence() && (t3 = this._lastIntValue), function(e27) {
      return JD(e27) || e27 === eF || e27 === hF || e27 === kF || e27 === DF;
    }(t3) ? (this._lastIntValue = t3, true) : (this.index !== e26 && this.rewind(e26), false);
  } }, { key: "eatAtomEscape", value: function() {
    return !!(this.eatBackreference() || this.eatCharacterClassEscape() || this.eatCharacterEscape() || this._nFlag && this.eatKGroupName()) || ((this.strict || this._uFlag) && this.raise("Invalid escape"), false);
  } }, { key: "eatBackreference", value: function() {
    var e26 = this.index;
    if (this.eatDecimalEscape()) {
      var t3 = this._lastIntValue;
      if (t3 <= this._numCapturingParens) return this.onBackreference(e26 - 1, this.index, t3), true;
      this.strict && this.raise("Invalid escape"), this.rewind(e26);
    }
    return false;
  } }, { key: "eatKGroupName", value: function() {
    var e26 = this.index;
    if (this.eat(107)) {
      if (this.eatGroupName()) {
        var t3 = this._lastStrValue;
        return this._backreferenceNames.add(t3), this.onBackreference(e26 - 1, this.index, t3), true;
      }
      this.raise("Invalid named reference");
    }
    return false;
  } }, { key: "eatCharacterEscape", value: function() {
    var e26 = this.index;
    return !!(this.eatControlEscape() || this.eatCControlLetter() || this.eatZero() || this.eatHexEscapeSequence() || this.eatRegExpUnicodeEscapeSequence() || !this.strict && this.eatLegacyOctalEscapeSequence() || this.eatIdentityEscape()) && (this.onCharacter(e26 - 1, this.index, this._lastIntValue), true);
  } }, { key: "eatCControlLetter", value: function() {
    var e26 = this.index;
    if (this.eat(99)) {
      if (this.eatControlLetter()) return true;
      this.rewind(e26);
    }
    return false;
  } }, { key: "eatZero", value: function() {
    return this.currentCodePoint === oF && !PF(this.nextCodePoint) && (this._lastIntValue = 0, this.advance(), true);
  } }, { key: "eatControlEscape", value: function() {
    return this.eat(116) ? (this._lastIntValue = 9, true) : this.eat(110) ? (this._lastIntValue = YD, true) : this.eat(118) ? (this._lastIntValue = 11, true) : this.eat(mF) ? (this._lastIntValue = 12, true) : !!this.eat(114) && (this._lastIntValue = ZD, true);
  } }, { key: "eatControlLetter", value: function() {
    var e26 = this.currentCodePoint;
    return !!TF(e26) && (this.advance(), this._lastIntValue = e26 % 32, true);
  } }, { key: "eatRegExpUnicodeEscapeSequence", value: function() {
    var e26 = this.index;
    if (this.eat(117)) {
      if (this.eatFixedHexDigits(4)) {
        var t3 = this._lastIntValue;
        if (this._uFlag && t3 >= 55296 && t3 <= 56319) {
          var r2 = this.index;
          if (this.eat(vF) && this.eat(117) && this.eatFixedHexDigits(4)) {
            var n2 = this._lastIntValue;
            if (n2 >= 56320 && n2 <= 57343) return this._lastIntValue = 1024 * (t3 - 55296) + (n2 - 56320) + 65536, true;
          }
          this.rewind(r2), this._lastIntValue = t3;
        }
        return true;
      }
      if (this._uFlag && this.eat(EF) && this.eatHexDigits() && this.eat(SF) && function(e27) {
        return e27 >= wF && e27 <= _F;
      }(this._lastIntValue)) return true;
      (this.strict || this._uFlag) && this.raise("Invalid unicode escape"), this.rewind(e26);
    }
    return false;
  } }, { key: "eatIdentityEscape", value: function() {
    return this._uFlag ? !!this.eatSyntaxCharacter() || !!this.eat(47) && (this._lastIntValue = 47, true) : !!this.isValidIdentityEscape(this.currentCodePoint) && (this._lastIntValue = this.currentCodePoint, this.advance(), true);
  } }, { key: "isValidIdentityEscape", value: function(e26) {
    return -1 !== e26 && (this.strict ? !JD(e26) : 99 !== e26 && (!this._nFlag || 107 !== e26));
  } }, { key: "eatDecimalEscape", value: function() {
    this._lastIntValue = 0;
    var e26 = this.currentCodePoint;
    if (e26 >= 49 && e26 <= uF) {
      do {
        this._lastIntValue = 10 * this._lastIntValue + (e26 - oF), this.advance();
      } while ((e26 = this.currentCodePoint) >= oF && e26 <= uF);
      return true;
    }
    return false;
  } }, { key: "eatCharacterClassEscape", value: function() {
    var e26 = this.index;
    if (this.eat(100)) return this._lastIntValue = -1, this.onEscapeCharacterSet(e26 - 1, this.index, "digit", false), true;
    if (this.eat(68)) return this._lastIntValue = -1, this.onEscapeCharacterSet(e26 - 1, this.index, "digit", true), true;
    if (this.eat(115)) return this._lastIntValue = -1, this.onEscapeCharacterSet(e26 - 1, this.index, "space", false), true;
    if (this.eat(83)) return this._lastIntValue = -1, this.onEscapeCharacterSet(e26 - 1, this.index, "space", true), true;
    if (this.eat(119)) return this._lastIntValue = -1, this.onEscapeCharacterSet(e26 - 1, this.index, "word", false), true;
    if (this.eat(87)) return this._lastIntValue = -1, this.onEscapeCharacterSet(e26 - 1, this.index, "word", true), true;
    var t3 = false;
    if (this._uFlag && this.ecmaVersion >= 2018 && (this.eat(112) || (t3 = this.eat(80)))) {
      if (this._lastIntValue = -1, this.eat(EF) && this.eatUnicodePropertyValueExpression() && this.eat(SF)) return this.onUnicodePropertyCharacterSet(e26 - 1, this.index, "property", this._lastKeyValue, this._lastValValue || null, t3), true;
      this.raise("Invalid property name");
    }
    return false;
  } }, { key: "eatUnicodePropertyValueExpression", value: function() {
    var e26 = this.index;
    if (this.eatUnicodePropertyName() && this.eat(61) && (this._lastKeyValue = this._lastStrValue, this.eatUnicodePropertyValue())) {
      if (this._lastValValue = this._lastStrValue, qF(this._lastKeyValue, this._lastValValue)) return true;
      this.raise("Invalid property name");
    }
    if (this.rewind(e26), this.eatLoneUnicodePropertyNameOrValue()) {
      var t3 = this._lastStrValue;
      if (qF("General_Category", t3)) return this._lastKeyValue = "General_Category", this._lastValValue = t3, true;
      if (function(e27) {
        return XD.$LONE.has(e27);
      }(t3)) return this._lastKeyValue = t3, this._lastValValue = "", true;
      this.raise("Invalid property name");
    }
    return false;
  } }, { key: "eatUnicodePropertyName", value: function() {
    for (this._lastStrValue = ""; UF(this.currentCodePoint); ) this._lastStrValue += String.fromCodePoint(this.currentCodePoint), this.advance();
    return "" !== this._lastStrValue;
  } }, { key: "eatUnicodePropertyValue", value: function() {
    for (this._lastStrValue = ""; UF(e26 = this.currentCodePoint) || PF(e26); ) this._lastStrValue += String.fromCodePoint(this.currentCodePoint), this.advance();
    var e26;
    return "" !== this._lastStrValue;
  } }, { key: "eatLoneUnicodePropertyNameOrValue", value: function() {
    return this.eatUnicodePropertyValue();
  } }, { key: "eatCharacterClass", value: function() {
    var e26 = this.index;
    if (this.eat(yF)) {
      var t3 = this.eat(bF);
      return this.onCharacterClassEnter(e26, t3), this.classRanges(), this.eat(xF) || this.raise("Unterminated character class"), this.onCharacterClassLeave(e26, this.index, t3), true;
    }
    return false;
  } }, { key: "classRanges", value: function() {
    for (var e26 = this.index; this.eatClassAtom(); ) {
      var t3 = this._lastIntValue, r2 = this.index;
      if (this.eat(45) && (this.onCharacter(r2, this.index, 45), this.eatClassAtom())) {
        var n2 = this._lastIntValue;
        -1 === t3 || -1 === n2 ? this.strict && this.raise("Invalid character class") : t3 > n2 ? this.raise("Range out of order in character class") : this.onCharacterClassRange(e26, this.index, t3, n2);
      }
      e26 = this.index;
    }
  } }, { key: "eatClassAtom", value: function() {
    var e26 = this.index;
    if (this.eat(vF)) {
      if (this.eatClassEscape()) return true;
      this._uFlag && this.raise("Invalid escape"), this.rewind(e26);
    }
    var t3 = this.currentCodePoint;
    return -1 !== t3 && t3 !== xF && (this.advance(), this._lastIntValue = t3, this.onCharacter(e26, this.index, t3), true);
  } }, { key: "eatClassEscape", value: function() {
    var e26 = this.index;
    if (this.eat(98)) return this._lastIntValue = 8, this.onCharacter(e26 - 1, this.index, 8), true;
    if (this._uFlag && this.eat(45)) return this._lastIntValue = 45, this.onCharacter(e26 - 1, this.index, 45), true;
    if (!this._uFlag && this.eat(99)) {
      if (this.eatClassControlLetter()) return this.onCharacter(e26 - 1, this.index, this._lastIntValue), true;
      this.rewind(e26);
    }
    return this.eatCharacterClassEscape() || this.eatCharacterEscape();
  } }, { key: "eatClassControlLetter", value: function() {
    var e26 = this.currentCodePoint;
    return !(!PF(e26) && e26 !== hF) && (this.advance(), this._lastIntValue = e26 % 32, true);
  } }, { key: "eatHexEscapeSequence", value: function() {
    var e26 = this.index;
    if (this.eat(120)) {
      if (this.eatFixedHexDigits(2)) return true;
      this._uFlag && this.raise("Invalid escape"), this.rewind(e26);
    }
    return false;
  } }, { key: "eatDecimalDigits", value: function() {
    var e26 = this.index;
    for (this._lastIntValue = 0; PF(this.currentCodePoint); ) this._lastIntValue = 10 * this._lastIntValue + OF(this.currentCodePoint), this.advance();
    return this.index !== e26;
  } }, { key: "eatHexDigits", value: function() {
    var e26 = this.index;
    for (this._lastIntValue = 0; IF(this.currentCodePoint); ) this._lastIntValue = 16 * this._lastIntValue + OF(this.currentCodePoint), this.advance();
    return this.index !== e26;
  } }, { key: "eatLegacyOctalEscapeSequence", value: function() {
    if (this.eatOctalDigit()) {
      var e26 = this._lastIntValue;
      if (this.eatOctalDigit()) {
        var t3 = this._lastIntValue;
        e26 <= 3 && this.eatOctalDigit() ? this._lastIntValue = 64 * e26 + 8 * t3 + this._lastIntValue : this._lastIntValue = 8 * e26 + t3;
      } else this._lastIntValue = e26;
      return true;
    }
    return false;
  } }, { key: "eatOctalDigit", value: function() {
    var e26 = this.currentCodePoint;
    return function(e27) {
      return e27 >= oF && e27 <= sF;
    }(e26) ? (this.advance(), this._lastIntValue = e26 - oF, true) : (this._lastIntValue = 0, false);
  } }, { key: "eatFixedHexDigits", value: function(e26) {
    var t3 = this.index;
    this._lastIntValue = 0;
    for (var r2 = 0; r2 < e26; ++r2) {
      var n2 = this.currentCodePoint;
      if (!IF(n2)) return this.rewind(t3), false;
      this._lastIntValue = 16 * this._lastIntValue + OF(n2), this.advance();
    }
    return true;
  } }, { key: "strict", get: function() {
    return Boolean(this._options.strict || this._uFlag);
  } }, { key: "ecmaVersion", get: function() {
    return this._options.ecmaVersion || 2018;
  } }, { key: "source", get: function() {
    return this._reader.source;
  } }, { key: "index", get: function() {
    return this._reader.index;
  } }, { key: "currentCodePoint", get: function() {
    return this._reader.currentCodePoint;
  } }, { key: "nextCodePoint", get: function() {
    return this._reader.nextCodePoint;
  } }, { key: "nextCodePoint2", get: function() {
    return this._reader.nextCodePoint2;
  } }, { key: "nextCodePoint3", get: function() {
    return this._reader.nextCodePoint3;
  } }]), e25;
}();
var $F = {};
var GF = {};
var zF = {};
var HF = function() {
  function e25(t3) {
    a(this, e25), this._node = $F, this._flags = GF, this._backreferences = [], this._capturingGroups = [], this.source = "", this.strict = Boolean(t3 && t3.strict), this.ecmaVersion = t3 && t3.ecmaVersion || 2018;
  }
  return s(e25, [{ key: "onFlags", value: function(e26, t3, r2, n2, i2, a2, o2, s2) {
    this._flags = { type: "Flags", parent: null, start: e26, end: t3, raw: this.source.slice(e26, t3), global: r2, ignoreCase: n2, multiline: i2, unicode: a2, sticky: o2, dotAll: s2 };
  } }, { key: "onPatternEnter", value: function(e26) {
    this._node = { type: "Pattern", parent: null, start: e26, end: e26, raw: "", alternatives: [] }, this._backreferences.length = 0, this._capturingGroups.length = 0;
  } }, { key: "onPatternLeave", value: function(e26, t3) {
    var r2 = this;
    this._node.end = t3, this._node.raw = this.source.slice(e26, t3);
    var n2 = true, i2 = false, a2 = void 0;
    try {
      for (var o2, s2 = function() {
        var e27 = o2.value, t4 = e27.ref, n3 = "number" == typeof t4 ? r2._capturingGroups[t4 - 1] : r2._capturingGroups.find(function(e28) {
          return e28.name === t4;
        });
        e27.resolved = n3, n3.references.push(e27);
      }, u2 = this._backreferences[Symbol.iterator](); !(n2 = (o2 = u2.next()).done); n2 = true) s2();
    } catch (e27) {
      i2 = true, a2 = e27;
    } finally {
      try {
        n2 || null == u2.return || u2.return();
      } finally {
        if (i2) throw a2;
      }
    }
  } }, { key: "onAlternativeEnter", value: function(e26) {
    var t3 = this._node;
    if ("Assertion" !== t3.type && "CapturingGroup" !== t3.type && "Group" !== t3.type && "Pattern" !== t3.type) throw new Error("UnknownError");
    this._node = { type: "Alternative", parent: t3, start: e26, end: e26, raw: "", elements: [] }, t3.alternatives.push(this._node);
  } }, { key: "onAlternativeLeave", value: function(e26, t3) {
    var r2 = this._node;
    if ("Alternative" !== r2.type) throw new Error("UnknownError");
    r2.end = t3, r2.raw = this.source.slice(e26, t3), this._node = r2.parent;
  } }, { key: "onGroupEnter", value: function(e26) {
    var t3 = this._node;
    if ("Alternative" !== t3.type) throw new Error("UnknownError");
    this._node = { type: "Group", parent: t3, start: e26, end: e26, raw: "", alternatives: [] }, t3.elements.push(this._node);
  } }, { key: "onGroupLeave", value: function(e26, t3) {
    var r2 = this._node;
    if ("Group" !== r2.type || "Alternative" !== r2.parent.type) throw new Error("UnknownError");
    r2.end = t3, r2.raw = this.source.slice(e26, t3), this._node = r2.parent;
  } }, { key: "onCapturingGroupEnter", value: function(e26, t3) {
    var r2 = this._node;
    if ("Alternative" !== r2.type) throw new Error("UnknownError");
    this._node = { type: "CapturingGroup", parent: r2, start: e26, end: e26, raw: "", name: t3, alternatives: [], references: [] }, r2.elements.push(this._node), this._capturingGroups.push(this._node);
  } }, { key: "onCapturingGroupLeave", value: function(e26, t3) {
    var r2 = this._node;
    if ("CapturingGroup" !== r2.type || "Alternative" !== r2.parent.type) throw new Error("UnknownError");
    r2.end = t3, r2.raw = this.source.slice(e26, t3), this._node = r2.parent;
  } }, { key: "onQuantifier", value: function(e26, t3, r2, n2, i2) {
    var a2 = this._node;
    if ("Alternative" !== a2.type) throw new Error("UnknownError");
    var o2 = a2.elements.pop();
    if (null == o2 || "Quantifier" === o2.type || "Assertion" === o2.type && "lookahead" !== o2.kind) throw new Error("UnknownError");
    var s2 = { type: "Quantifier", parent: a2, start: o2.start, end: t3, raw: this.source.slice(o2.start, t3), min: r2, max: n2, greedy: i2, element: o2 };
    a2.elements.push(s2), o2.parent = s2;
  } }, { key: "onLookaroundAssertionEnter", value: function(e26, t3, r2) {
    var n2 = this._node;
    if ("Alternative" !== n2.type) throw new Error("UnknownError");
    this._node = { type: "Assertion", parent: n2, start: e26, end: e26, raw: "", kind: t3, negate: r2, alternatives: [] }, n2.elements.push(this._node);
  } }, { key: "onLookaroundAssertionLeave", value: function(e26, t3) {
    var r2 = this._node;
    if ("Assertion" !== r2.type || "Alternative" !== r2.parent.type) throw new Error("UnknownError");
    r2.end = t3, r2.raw = this.source.slice(e26, t3), this._node = r2.parent;
  } }, { key: "onEdgeAssertion", value: function(e26, t3, r2) {
    var n2 = this._node;
    if ("Alternative" !== n2.type) throw new Error("UnknownError");
    n2.elements.push({ type: "Assertion", parent: n2, start: e26, end: t3, raw: this.source.slice(e26, t3), kind: r2 });
  } }, { key: "onWordBoundaryAssertion", value: function(e26, t3, r2, n2) {
    var i2 = this._node;
    if ("Alternative" !== i2.type) throw new Error("UnknownError");
    i2.elements.push({ type: "Assertion", parent: i2, start: e26, end: t3, raw: this.source.slice(e26, t3), kind: r2, negate: n2 });
  } }, { key: "onAnyCharacterSet", value: function(e26, t3, r2) {
    var n2 = this._node;
    if ("Alternative" !== n2.type) throw new Error("UnknownError");
    n2.elements.push({ type: "CharacterSet", parent: n2, start: e26, end: t3, raw: this.source.slice(e26, t3), kind: r2 });
  } }, { key: "onEscapeCharacterSet", value: function(e26, t3, r2, n2) {
    var i2 = this._node;
    if ("Alternative" !== i2.type && "CharacterClass" !== i2.type) throw new Error("UnknownError");
    i2.elements.push({ type: "CharacterSet", parent: i2, start: e26, end: t3, raw: this.source.slice(e26, t3), kind: r2, negate: n2 });
  } }, { key: "onUnicodePropertyCharacterSet", value: function(e26, t3, r2, n2, i2, a2) {
    var o2 = this._node;
    if ("Alternative" !== o2.type && "CharacterClass" !== o2.type) throw new Error("UnknownError");
    o2.elements.push({ type: "CharacterSet", parent: o2, start: e26, end: t3, raw: this.source.slice(e26, t3), kind: r2, key: n2, value: i2, negate: a2 });
  } }, { key: "onCharacter", value: function(e26, t3, r2) {
    var n2 = this._node;
    if ("Alternative" !== n2.type && "CharacterClass" !== n2.type) throw new Error("UnknownError");
    n2.elements.push({ type: "Character", parent: n2, start: e26, end: t3, raw: this.source.slice(e26, t3), value: r2 });
  } }, { key: "onBackreference", value: function(e26, t3, r2) {
    var n2 = this._node;
    if ("Alternative" !== n2.type) throw new Error("UnknownError");
    var i2 = { type: "Backreference", parent: n2, start: e26, end: t3, raw: this.source.slice(e26, t3), ref: r2, resolved: zF };
    n2.elements.push(i2), this._backreferences.push(i2);
  } }, { key: "onCharacterClassEnter", value: function(e26, t3) {
    var r2 = this._node;
    if ("Alternative" !== r2.type) throw new Error("UnknownError");
    this._node = { type: "CharacterClass", parent: r2, start: e26, end: e26, raw: "", negate: t3, elements: [] }, r2.elements.push(this._node);
  } }, { key: "onCharacterClassLeave", value: function(e26, t3) {
    var r2 = this._node;
    if ("CharacterClass" !== r2.type || "Alternative" !== r2.parent.type) throw new Error("UnknownError");
    r2.end = t3, r2.raw = this.source.slice(e26, t3), this._node = r2.parent;
  } }, { key: "onCharacterClassRange", value: function(e26, t3) {
    var r2 = this._node;
    if ("CharacterClass" !== r2.type) throw new Error("UnknownError");
    var n2 = r2.elements, i2 = n2.pop(), a2 = n2.pop(), o2 = n2.pop();
    if (!o2 || !i2 || !a2 || "Character" !== o2.type || "Character" !== i2.type || "Character" !== a2.type || 45 !== a2.value) throw new Error("UnknownError");
    var s2 = { type: "CharacterClassRange", parent: r2, start: e26, end: t3, raw: this.source.slice(e26, t3), min: o2, max: i2 };
    o2.parent = s2, i2.parent = s2, n2.push(s2);
  } }, { key: "pattern", get: function() {
    if ("Pattern" !== this._node.type) throw new Error("UnknownError");
    return this._node;
  } }, { key: "flags", get: function() {
    if ("Flags" !== this._flags.type) throw new Error("UnknownError");
    return this._flags;
  } }]), e25;
}();
var KF = function() {
  function e25(t3) {
    a(this, e25), this._state = new HF(t3), this._validator = new WF(this._state);
  }
  return s(e25, [{ key: "parseLiteral", value: function(e26) {
    var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e26.length;
    this._state.source = e26, this._validator.validateLiteral(e26, t3, r2);
    var n2 = this._state.pattern, i2 = this._state.flags, a2 = { type: "RegExpLiteral", parent: null, start: t3, end: r2, raw: e26, pattern: n2, flags: i2 };
    return n2.parent = a2, i2.parent = a2, a2;
  } }, { key: "parseFlags", value: function(e26) {
    var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e26.length;
    return this._state.source = e26, this._validator.validateFlags(e26, t3, r2), this._state.flags;
  } }, { key: "parsePattern", value: function(e26) {
    var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e26.length, n2 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
    return this._state.source = e26, this._validator.validatePattern(e26, t3, r2, n2), this._state.pattern;
  } }]), e25;
}();
var JF = function() {
  function e25(t3) {
    a(this, e25), this._handlers = t3;
  }
  return s(e25, [{ key: "visit", value: function(e26) {
    switch (e26.type) {
      case "Alternative":
        this.visitAlternative(e26);
        break;
      case "Assertion":
        this.visitAssertion(e26);
        break;
      case "Backreference":
        this.visitBackreference(e26);
        break;
      case "CapturingGroup":
        this.visitCapturingGroup(e26);
        break;
      case "Character":
        this.visitCharacter(e26);
        break;
      case "CharacterClass":
        this.visitCharacterClass(e26);
        break;
      case "CharacterClassRange":
        this.visitCharacterClassRange(e26);
        break;
      case "CharacterSet":
        this.visitCharacterSet(e26);
        break;
      case "Flags":
        this.visitFlags(e26);
        break;
      case "Group":
        this.visitGroup(e26);
        break;
      case "Pattern":
        this.visitPattern(e26);
        break;
      case "Quantifier":
        this.visitQuantifier(e26);
        break;
      case "RegExpLiteral":
        this.visitRegExpLiteral(e26);
        break;
      default:
        throw new Error("Unknown type: ".concat(e26.type));
    }
  } }, { key: "visitAlternative", value: function(e26) {
    this._handlers.onAlternativeEnter && this._handlers.onAlternativeEnter(e26), e26.elements.forEach(this.visit, this), this._handlers.onAlternativeLeave && this._handlers.onAlternativeLeave(e26);
  } }, { key: "visitAssertion", value: function(e26) {
    this._handlers.onAssertionEnter && this._handlers.onAssertionEnter(e26), "lookahead" !== e26.kind && "lookbehind" !== e26.kind || e26.alternatives.forEach(this.visit, this), this._handlers.onAssertionLeave && this._handlers.onAssertionLeave(e26);
  } }, { key: "visitBackreference", value: function(e26) {
    this._handlers.onBackreferenceEnter && this._handlers.onBackreferenceEnter(e26), this._handlers.onBackreferenceLeave && this._handlers.onBackreferenceLeave(e26);
  } }, { key: "visitCapturingGroup", value: function(e26) {
    this._handlers.onCapturingGroupEnter && this._handlers.onCapturingGroupEnter(e26), e26.alternatives.forEach(this.visit, this), this._handlers.onCapturingGroupLeave && this._handlers.onCapturingGroupLeave(e26);
  } }, { key: "visitCharacter", value: function(e26) {
    this._handlers.onCharacterEnter && this._handlers.onCharacterEnter(e26), this._handlers.onCharacterLeave && this._handlers.onCharacterLeave(e26);
  } }, { key: "visitCharacterClass", value: function(e26) {
    this._handlers.onCharacterClassEnter && this._handlers.onCharacterClassEnter(e26), e26.elements.forEach(this.visit, this), this._handlers.onCharacterClassLeave && this._handlers.onCharacterClassLeave(e26);
  } }, { key: "visitCharacterClassRange", value: function(e26) {
    this._handlers.onCharacterClassRangeEnter && this._handlers.onCharacterClassRangeEnter(e26), this.visitCharacter(e26.min), this.visitCharacter(e26.max), this._handlers.onCharacterClassRangeLeave && this._handlers.onCharacterClassRangeLeave(e26);
  } }, { key: "visitCharacterSet", value: function(e26) {
    this._handlers.onCharacterSetEnter && this._handlers.onCharacterSetEnter(e26), this._handlers.onCharacterSetLeave && this._handlers.onCharacterSetLeave(e26);
  } }, { key: "visitFlags", value: function(e26) {
    this._handlers.onFlagsEnter && this._handlers.onFlagsEnter(e26), this._handlers.onFlagsLeave && this._handlers.onFlagsLeave(e26);
  } }, { key: "visitGroup", value: function(e26) {
    this._handlers.onGroupEnter && this._handlers.onGroupEnter(e26), e26.alternatives.forEach(this.visit, this), this._handlers.onGroupLeave && this._handlers.onGroupLeave(e26);
  } }, { key: "visitPattern", value: function(e26) {
    this._handlers.onPatternEnter && this._handlers.onPatternEnter(e26), e26.alternatives.forEach(this.visit, this), this._handlers.onPatternLeave && this._handlers.onPatternLeave(e26);
  } }, { key: "visitQuantifier", value: function(e26) {
    this._handlers.onQuantifierEnter && this._handlers.onQuantifierEnter(e26), this.visit(e26.element), this._handlers.onQuantifierLeave && this._handlers.onQuantifierLeave(e26);
  } }, { key: "visitRegExpLiteral", value: function(e26) {
    this._handlers.onRegExpLiteralEnter && this._handlers.onRegExpLiteralEnter(e26), this.visitPattern(e26.pattern), this.visitFlags(e26.flags), this._handlers.onRegExpLiteralLeave && this._handlers.onRegExpLiteralLeave(e26);
  } }]), e25;
}();
var QF = Object.freeze({ __proto__: null, AST: KD, RegExpParser: KF, RegExpValidator: WF, parseRegExpLiteral: function(e25, t3) {
  return new KF(t3).parseLiteral(String(e25));
}, validateRegExpLiteral: function(e25, t3) {
  return new WF(t3).validateLiteral(e25);
}, visitRegExpAST: function(e25, t3) {
  new JF(t3).visit(e25);
} });
function XF(e25) {
  return Array.isArray(e25) ? e25 : [e25];
}
var YF = /^\s+$/;
var ZF = /^\\!/;
var eA = /^\\#/;
var tA = "undefined" != typeof Symbol ? Symbol.for("node-ignore") : "node-ignore";
var rA = function(e25, t3, r2) {
  return Object.defineProperty(e25, t3, { value: r2 });
};
var nA = /([0-z])-([0-z])/g;
var iA = [[/\\?\s+$/, function(e25) {
  return 0 === e25.indexOf("\\") ? " " : "";
}], [/\\\s/g, function() {
  return " ";
}], [/[\\^$.|*+(){]/g, function(e25) {
  return "\\".concat(e25);
}], [/\[([^\]/]*)($|\])/g, function(e25, t3, r2) {
  return "]" === r2 ? "[".concat(t3.replace(nA, function(e26, t4, r3) {
    return t4.charCodeAt(0) <= r3.charCodeAt(0) ? e26 : "";
  }), "]") : "\\".concat(e25);
}], [/(?!\\)\?/g, function() {
  return "[^/]";
}], [/^\//, function() {
  return "^";
}], [/\//g, function() {
  return "\\/";
}], [/^\^*\\\*\\\*\\\//, function() {
  return "^(?:.*\\/)?";
}]];
var aA = [[/^(?=[^^])/, function() {
  return /\/(?!$)/.test(this) ? "^" : "(?:^|\\/)";
}], [/\\\/\\\*\\\*(?=\\\/|$)/g, function(e25, t3, r2) {
  return t3 + 6 < r2.length ? "(?:\\/[^\\/]+)*" : "\\/.+";
}], [/(^|[^\\]+)\\\*(?=.+)/g, function(e25, t3) {
  return "".concat(t3, "[^\\/]*");
}], [/(\^|\\\/)?\\\*$/, function(e25, t3) {
  var r2 = t3 ? "".concat(t3, "[^/]+") : "[^/]*";
  return "".concat(r2, "(?=$|\\/$)");
}], [/\\\\\\/g, function() {
  return "\\";
}]];
var oA = [].concat(iA, [[/(?:[^*/])$/, function(e25) {
  return "".concat(e25, "(?=$|\\/)");
}]], aA);
var sA = [].concat(iA, [[/(?:[^*])$/, function(e25) {
  return "".concat(e25, "(?=$|\\/$)");
}]], aA);
var uA = /* @__PURE__ */ Object.create(null);
var cA = function(e25, t3) {
  var r2 = e25, n2 = false;
  return 0 === e25.indexOf("!") && (n2 = true, e25 = e25.substr(1)), { origin: r2, pattern: e25 = e25.replace(ZF, "!").replace(eA, "#"), negative: n2, regex: function(e26, t4, r3) {
    var n3 = uA[e26];
    if (n3) return n3;
    var i2 = (t4 ? sA : oA).reduce(function(t5, r4) {
      return t5.replace(r4[0], r4[1].bind(e26));
    }, e26);
    return uA[e26] = r3 ? new RegExp(i2, "i") : new RegExp(i2);
  }(e25, n2, t3) };
};
var lA = function() {
  function e25() {
    var t3 = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).ignorecase, r2 = void 0 === t3 || t3;
    a(this, e25), this._rules = [], this._ignorecase = r2, rA(this, tA, true), this._initCache();
  }
  return s(e25, [{ key: "_initCache", value: function() {
    this._cache = /* @__PURE__ */ Object.create(null);
  } }, { key: "add", value: function(e26) {
    return this._added = false, "string" == typeof e26 && (e26 = e26.split(/\r?\n/g)), XF(e26).forEach(this._addPattern, this), this._added && this._initCache(), this;
  } }, { key: "addPattern", value: function(e26) {
    return this.add(e26);
  } }, { key: "_addPattern", value: function(e26) {
    if (e26 && e26[tA]) return this._rules = this._rules.concat(e26._rules), void (this._added = true);
    if (function(e27) {
      return e27 && "string" == typeof e27 && !YF.test(e27) && 0 !== e27.indexOf("#");
    }(e26)) {
      var t3 = cA(e26, this._ignorecase);
      this._added = true, this._rules.push(t3);
    }
  } }, { key: "filter", value: function(e26) {
    var t3 = this;
    return XF(e26).filter(function(e27) {
      return t3._filter(e27);
    });
  } }, { key: "createFilter", value: function() {
    var e26 = this;
    return function(t3) {
      return e26._filter(t3);
    };
  } }, { key: "ignores", value: function(e26) {
    return !this._filter(e26);
  } }, { key: "_filter", value: function(e26, t3) {
    return !!e26 && (e26 in this._cache ? this._cache[e26] : (t3 || (t3 = e26.split("/")), t3.pop(), this._cache[e26] = t3.length ? this._filter(t3.join("/") + "/", t3) && this._test(e26) : this._test(e26)));
  } }, { key: "_test", value: function(e26) {
    var t3 = 0;
    return this._rules.forEach(function(r2) {
      t3 ^ r2.negative || (t3 = r2.negative ^ r2.regex.test(e26));
    }), !t3;
  } }]), e25;
}();
if ("undefined" != typeof process && (process.env && process.env.IGNORE_TEST_WIN32 || "win32" === process.platform)) {
  pA = lA.prototype._filter;
  lA.prototype._filter = function(e25, t3) {
    var r2;
    return e25 = /^\\\\\?\\/.test(r2 = e25) || /[^\x00-\x80]+/.test(r2) ? r2 : r2.replace(/\\/g, "/"), pA.call(this, e25, t3);
  };
}
var pA;
var fA = r(function(e25) {
  var t3 = function(e26, t4) {
    var r2, n2, i2 = 1, a2 = 0, o2 = 0, s2 = String.alphabet;
    function u2(e27, t5, n3) {
      if (n3) {
        for (r2 = t5; (n3 = u2(e27, r2)) < 76 && n3 > 65; ) ++r2;
        return +e27.slice(t5 - 1, r2);
      }
      return (n3 = s2 && s2.indexOf(e27.charAt(t5))) > -1 ? n3 + 76 : (n3 = e27.charCodeAt(t5) || 0) < 45 || n3 > 127 ? n3 : n3 < 46 ? 65 : n3 < 48 ? n3 - 1 : n3 < 58 ? n3 + 18 : n3 < 65 ? n3 - 11 : n3 < 91 ? n3 + 11 : n3 < 97 ? n3 - 37 : n3 < 123 ? n3 + 5 : n3 - 63;
    }
    if ((e26 += "") != (t4 += "")) {
      for (; i2; ) if (n2 = u2(e26, a2++), i2 = u2(t4, o2++), n2 < 76 && i2 < 76 && n2 > 66 && i2 > 66 && (n2 = u2(e26, a2, a2), i2 = u2(t4, o2, a2 = r2), o2 = r2), n2 != i2) return n2 < i2 ? -1 : 1;
    }
    return 0;
  };
  try {
    e25.exports = t3;
  } catch (e26) {
    String.naturalCompare = t3;
  }
});
var hA = "https://github.com/eslint/doctrine";
var dA = { node: ">=6.0.0" };
var mA = { lib: "./lib" };
var gA = ["lib"];
var yA = [{ name: "Nicholas C. Zakas", email: "nicholas+npm@nczconsulting.com", web: "https://www.nczonline.net" }, { name: "Yusuke Suzuki", email: "utatane.tea@gmail.com", web: "https://github.com/Constellation" }];
var vA = { coveralls: "^3.0.1", dateformat: "^1.0.11", eslint: "^1.10.3", "eslint-release": "^1.0.0", linefix: "^0.1.1", mocha: "^3.4.2", "npm-license": "^0.3.1", nyc: "^10.3.2", semver: "^5.0.3", shelljs: "^0.5.3", "shelljs-nodecli": "^0.1.1", should: "^5.0.1" };
var xA = { pretest: "npm run lint", test: "nyc mocha", coveralls: "nyc report --reporter=text-lcov | coveralls", lint: "eslint lib/", "generate-release": "eslint-generate-release", "generate-alpharelease": "eslint-generate-prerelease alpha", "generate-betarelease": "eslint-generate-prerelease beta", "generate-rcrelease": "eslint-generate-prerelease rc", "publish-release": "eslint-publish-release" };
var bA = { esutils: "^2.0.2" };
var EA = { name: "doctrine", description: "JSDoc parser", homepage: hA, main: "lib/doctrine.js", version: "3.0.0", engines: dA, directories: mA, files: gA, maintainers: yA, repository: "eslint/doctrine", devDependencies: vA, license: "Apache-2.0", scripts: xA, dependencies: bA };
var CA = n(Object.freeze({ __proto__: null, name: "doctrine", description: "JSDoc parser", homepage: hA, main: "lib/doctrine.js", version: "3.0.0", engines: dA, directories: mA, files: gA, maintainers: yA, repository: "eslint/doctrine", devDependencies: vA, license: "Apache-2.0", scripts: xA, dependencies: bA, default: EA }));
var SA = r(function(e25, t3) {
  !function() {
    var e26, r2;
    function n2(e27) {
      this.name = "DoctrineError", this.message = e27;
    }
    e26 = CA.version, t3.VERSION = e26, n2.prototype = ((r2 = function() {
    }).prototype = Error.prototype, new r2()), n2.prototype.constructor = n2, t3.DoctrineError = n2, t3.throwError = function(e27) {
      throw new n2(e27);
    }, t3.assert = Pu;
  }();
});
var kA = (SA.VERSION, SA.DoctrineError, SA.throwError, SA.assert, r(function(e25, t3) {
  !function() {
    var e26, r2, n2, i2, a2, o2, s2, u2, c2, l2, p2, f2;
    function h2(e27) {
      return -1 === "><(){}[],:*|?!=".indexOf(String.fromCharCode(e27)) && !c2.code.isWhiteSpace(e27) && !c2.code.isLineTerminator(e27);
    }
    function d2(e27, t4, r3, n3) {
      this._previous = e27, this._index = t4, this._token = r3, this._value = n3;
    }
    function m2(e27, t4) {
      return f2 && (e27.range = [t4[0] + p2, t4[1] + p2]), e27;
    }
    function g2() {
      var e27 = n2.charAt(a2);
      return a2 += 1, e27;
    }
    function y2(e27) {
      var t4, r3, o3, s3 = 0;
      for (r3 = "u" === e27 ? 4 : 2, t4 = 0; t4 < r3; ++t4) {
        if (!(a2 < i2 && c2.code.isHexDigit(n2.charCodeAt(a2)))) return "";
        o3 = g2(), s3 = 16 * s3 + "0123456789abcdef".indexOf(o3.toLowerCase());
      }
      return String.fromCharCode(s3);
    }
    function v2() {
      var e27, t4;
      if (e27 = "", 46 !== (t4 = n2.charCodeAt(a2))) {
        if (e27 = g2(), t4 = n2.charCodeAt(a2), "0" === e27) {
          if (120 === t4 || 88 === t4) {
            for (e27 += g2(); a2 < i2 && (t4 = n2.charCodeAt(a2), c2.code.isHexDigit(t4)); ) e27 += g2();
            return e27.length <= 2 && l2.throwError("unexpected token"), a2 < i2 && (t4 = n2.charCodeAt(a2), c2.code.isIdentifierStartES5(t4) && l2.throwError("unexpected token")), u2 = parseInt(e27, 16), r2.NUMBER;
          }
          if (c2.code.isOctalDigit(t4)) {
            for (e27 += g2(); a2 < i2 && (t4 = n2.charCodeAt(a2), c2.code.isOctalDigit(t4)); ) e27 += g2();
            return a2 < i2 && (t4 = n2.charCodeAt(a2), (c2.code.isIdentifierStartES5(t4) || c2.code.isDecimalDigit(t4)) && l2.throwError("unexpected token")), u2 = parseInt(e27, 8), r2.NUMBER;
          }
          c2.code.isDecimalDigit(t4) && l2.throwError("unexpected token");
        }
        for (; a2 < i2 && (t4 = n2.charCodeAt(a2), c2.code.isDecimalDigit(t4)); ) e27 += g2();
      }
      if (46 === t4) for (e27 += g2(); a2 < i2 && (t4 = n2.charCodeAt(a2), c2.code.isDecimalDigit(t4)); ) e27 += g2();
      if (101 === t4 || 69 === t4) if (e27 += g2(), 43 !== (t4 = n2.charCodeAt(a2)) && 45 !== t4 || (e27 += g2()), t4 = n2.charCodeAt(a2), c2.code.isDecimalDigit(t4)) for (e27 += g2(); a2 < i2 && (t4 = n2.charCodeAt(a2), c2.code.isDecimalDigit(t4)); ) e27 += g2();
      else l2.throwError("unexpected token");
      return a2 < i2 && (t4 = n2.charCodeAt(a2), c2.code.isIdentifierStartES5(t4) && l2.throwError("unexpected token")), u2 = parseFloat(e27), r2.NUMBER;
    }
    function x2() {
      var e27;
      for (o2 = a2; a2 < i2 && c2.code.isWhiteSpace(n2.charCodeAt(a2)); ) g2();
      if (a2 >= i2) return s2 = r2.EOF;
      switch (e27 = n2.charCodeAt(a2)) {
        case 39:
        case 34:
          return s2 = function() {
            var e28, t4, o3, s3, p3, f3 = "";
            for (e28 = n2.charAt(a2), ++a2; a2 < i2; ) {
              if ((t4 = g2()) === e28) {
                e28 = "";
                break;
              }
              if ("\\" === t4) if (t4 = g2(), c2.code.isLineTerminator(t4.charCodeAt(0))) "\r" === t4 && 10 === n2.charCodeAt(a2) && ++a2;
              else switch (t4) {
                case "n":
                  f3 += "\n";
                  break;
                case "r":
                  f3 += "\r";
                  break;
                case "t":
                  f3 += "	";
                  break;
                case "u":
                case "x":
                  p3 = a2, (s3 = y2(t4)) ? f3 += s3 : (a2 = p3, f3 += t4);
                  break;
                case "b":
                  f3 += "\b";
                  break;
                case "f":
                  f3 += "\f";
                  break;
                case "v":
                  f3 += "\v";
                  break;
                default:
                  c2.code.isOctalDigit(t4.charCodeAt(0)) ? (o3 = "01234567".indexOf(t4), a2 < i2 && c2.code.isOctalDigit(n2.charCodeAt(a2)) && (o3 = 8 * o3 + "01234567".indexOf(g2()), "0123".indexOf(t4) >= 0 && a2 < i2 && c2.code.isOctalDigit(n2.charCodeAt(a2)) && (o3 = 8 * o3 + "01234567".indexOf(g2()))), f3 += String.fromCharCode(o3)) : f3 += t4;
              }
              else {
                if (c2.code.isLineTerminator(t4.charCodeAt(0))) break;
                f3 += t4;
              }
            }
            return "" !== e28 && l2.throwError("unexpected quote"), u2 = f3, r2.STRING;
          }();
        case 58:
          return g2(), s2 = r2.COLON;
        case 44:
          return g2(), s2 = r2.COMMA;
        case 40:
          return g2(), s2 = r2.LPAREN;
        case 41:
          return g2(), s2 = r2.RPAREN;
        case 91:
          return g2(), s2 = r2.LBRACK;
        case 93:
          return g2(), s2 = r2.RBRACK;
        case 123:
          return g2(), s2 = r2.LBRACE;
        case 125:
          return g2(), s2 = r2.RBRACE;
        case 46:
          if (a2 + 1 < i2) {
            if (60 === (e27 = n2.charCodeAt(a2 + 1))) return g2(), g2(), s2 = r2.DOT_LT;
            if (46 === e27 && a2 + 2 < i2 && 46 === n2.charCodeAt(a2 + 2)) return g2(), g2(), g2(), s2 = r2.REST;
            if (c2.code.isDecimalDigit(e27)) return s2 = v2();
          }
          return s2 = r2.ILLEGAL;
        case 60:
          return g2(), s2 = r2.LT;
        case 62:
          return g2(), s2 = r2.GT;
        case 42:
          return g2(), s2 = r2.STAR;
        case 124:
          return g2(), s2 = r2.PIPE;
        case 63:
          return g2(), s2 = r2.QUESTION;
        case 33:
          return g2(), s2 = r2.BANG;
        case 61:
          return g2(), s2 = r2.EQUAL;
        case 45:
          return s2 = v2();
        default:
          return c2.code.isDecimalDigit(e27) ? s2 = v2() : (l2.assert(h2(e27)), s2 = function() {
            for (u2 = g2(); a2 < i2 && h2(n2.charCodeAt(a2)); ) {
              if (46 === n2.charCodeAt(a2)) {
                if (a2 + 1 >= i2) return r2.ILLEGAL;
                if (60 === n2.charCodeAt(a2 + 1)) break;
              }
              u2 += g2();
            }
            return r2.NAME;
          }());
      }
    }
    function b2(e27, t4) {
      l2.assert(s2 === e27, t4 || "consumed token not matched"), x2();
    }
    function E2(e27, t4) {
      s2 !== e27 && l2.throwError(t4 || "unexpected token"), x2();
    }
    function C3() {
      var t4, n3, i3 = o2;
      return n3 = u2, t4 = s2 === r2.NAME || s2 === r2.STRING ? (x2(), n3) : s2 === r2.NUMBER ? (b2(r2.NUMBER), String(n3)) : void l2.throwError("unexpected token"), s2 === r2.COLON ? (b2(r2.COLON), m2({ type: e26.FieldType, key: t4, value: A2() }, [i3, o2])) : m2({ type: e26.FieldType, key: t4, value: null }, [i3, o2]);
    }
    function S3() {
      var t4, n3, i3 = a2 - u2.length;
      return t4 = function() {
        var t5 = u2, n4 = a2 - t5.length;
        return E2(r2.NAME), s2 !== r2.COLON || "module" !== t5 && "external" !== t5 && "event" !== t5 || (b2(r2.COLON), t5 += ":" + u2, E2(r2.NAME)), m2({ type: e26.NameExpression, name: t5 }, [n4, o2]);
      }(), s2 === r2.DOT_LT || s2 === r2.LT ? (x2(), n3 = function() {
        var e27 = [];
        for (e27.push(w2()); s2 === r2.COMMA; ) b2(r2.COMMA), e27.push(w2());
        return e27;
      }(), E2(r2.GT), m2({ type: e26.TypeApplication, expression: t4, applications: n3 }, [i3, o2])) : t4;
    }
    function k2() {
      for (var t4, n3, i3, u3 = [], c3 = false, p3 = false, f3 = a2 - 3; s2 !== r2.RPAREN; ) s2 === r2.REST && (b2(r2.REST), p3 = true), n3 = o2, (t4 = A2()).type === e26.NameExpression && s2 === r2.COLON && (i3 = o2 - t4.name.length, b2(r2.COLON), t4 = m2({ type: e26.ParameterType, name: t4.name, expression: A2() }, [i3, o2])), s2 === r2.EQUAL ? (b2(r2.EQUAL), t4 = m2({ type: e26.OptionalType, expression: t4 }, [n3, o2]), c3 = true) : c3 && l2.throwError("unexpected token"), p3 && (t4 = m2({ type: e26.RestType, expression: t4 }, [f3, o2])), u3.push(t4), s2 !== r2.RPAREN && E2(r2.COMMA);
      return u3;
    }
    function D2() {
      var t4, n3, i3, c3, p3, f3 = a2 - u2.length;
      return l2.assert(s2 === r2.NAME && "function" === u2, "FunctionType should start with 'function'"), b2(r2.NAME), E2(r2.LPAREN), t4 = false, i3 = [], n3 = null, s2 !== r2.RPAREN && (s2 !== r2.NAME || "this" !== u2 && "new" !== u2 ? i3 = k2() : (t4 = "new" === u2, b2(r2.NAME), E2(r2.COLON), n3 = S3(), s2 === r2.COMMA && (b2(r2.COMMA), i3 = k2()))), E2(r2.RPAREN), c3 = null, s2 === r2.COLON && (b2(r2.COLON, "ResultType should start with :"), c3 = s2 === r2.NAME && "void" === u2 ? (b2(r2.NAME), { type: e26.VoidLiteral }) : A2()), p3 = m2({ type: e26.FunctionType, params: i3, result: c3 }, [f3, o2]), n3 && (p3.this = n3, t4 && (p3.new = true)), p3;
    }
    function F2() {
      var t4, n3;
      switch (s2) {
        case r2.STAR:
          return b2(r2.STAR), m2({ type: e26.AllLiteral }, [o2 - 1, o2]);
        case r2.LPAREN:
          return function() {
            var t5, n4 = a2 - 1;
            if (b2(r2.LPAREN, "UnionType should start with ("), t5 = [], s2 !== r2.RPAREN) for (; t5.push(A2()), s2 !== r2.RPAREN; ) E2(r2.PIPE);
            return b2(r2.RPAREN, "UnionType should end with )"), m2({ type: e26.UnionType, elements: t5 }, [n4, o2]);
          }();
        case r2.LBRACK:
          return function() {
            var t5, n4, i3 = a2 - 1;
            for (b2(r2.LBRACK, "ArrayType should start with ["), t5 = []; s2 !== r2.RBRACK; ) {
              if (s2 === r2.REST) {
                n4 = a2 - 3, b2(r2.REST), t5.push(m2({ type: e26.RestType, expression: A2() }, [n4, o2]));
                break;
              }
              t5.push(A2()), s2 !== r2.RBRACK && E2(r2.COMMA);
            }
            return E2(r2.RBRACK), m2({ type: e26.ArrayType, elements: t5 }, [i3, o2]);
          }();
        case r2.LBRACE:
          return function() {
            var t5, n4, i3 = a2 - 1;
            if (b2(r2.LBRACE, "RecordType should start with {"), t5 = [], s2 === r2.COMMA) b2(r2.COMMA);
            else for (; s2 !== r2.RBRACE; ) t5.push(C3()), s2 !== r2.RBRACE && E2(r2.COMMA);
            return n4 = a2, E2(r2.RBRACE), m2({ type: e26.RecordType, fields: t5 }, [i3, n4]);
          }();
        case r2.NAME:
          if (n3 = a2 - u2.length, "null" === u2) return b2(r2.NAME), m2({ type: e26.NullLiteral }, [n3, o2]);
          if ("undefined" === u2) return b2(r2.NAME), m2({ type: e26.UndefinedLiteral }, [n3, o2]);
          if ("true" === u2 || "false" === u2) return b2(r2.NAME), m2({ type: e26.BooleanLiteralType, value: "true" === u2 }, [n3, o2]);
          if (t4 = d2.save(), "function" === u2) try {
            return D2();
          } catch (e27) {
            t4.restore();
          }
          return S3();
        case r2.STRING:
          return x2(), m2({ type: e26.StringLiteralType, value: u2 }, [o2 - u2.length - 2, o2]);
        case r2.NUMBER:
          return x2(), m2({ type: e26.NumericLiteralType, value: u2 }, [o2 - String(u2).length, o2]);
        default:
          l2.throwError("unexpected token");
      }
    }
    function A2() {
      var t4, n3;
      return s2 === r2.QUESTION ? (n3 = a2 - 1, b2(r2.QUESTION), s2 === r2.COMMA || s2 === r2.EQUAL || s2 === r2.RBRACE || s2 === r2.RPAREN || s2 === r2.PIPE || s2 === r2.EOF || s2 === r2.RBRACK || s2 === r2.GT ? m2({ type: e26.NullableLiteral }, [n3, o2]) : m2({ type: e26.NullableType, expression: F2(), prefix: true }, [n3, o2])) : s2 === r2.BANG ? (n3 = a2 - 1, b2(r2.BANG), m2({ type: e26.NonNullableType, expression: F2(), prefix: true }, [n3, o2])) : (n3 = o2, t4 = F2(), s2 === r2.BANG ? (b2(r2.BANG), m2({ type: e26.NonNullableType, expression: t4, prefix: false }, [n3, o2])) : s2 === r2.QUESTION ? (b2(r2.QUESTION), m2({ type: e26.NullableType, expression: t4, prefix: false }, [n3, o2])) : s2 === r2.LBRACK ? (b2(r2.LBRACK), E2(r2.RBRACK, "expected an array-style type declaration (" + u2 + "[])"), m2({ type: e26.TypeApplication, expression: m2({ type: e26.NameExpression, name: "Array" }, [n3, o2]), applications: [t4] }, [n3, o2])) : t4);
    }
    function w2() {
      var t4, n3;
      if (t4 = A2(), s2 !== r2.PIPE) return t4;
      for (n3 = [t4], b2(r2.PIPE); n3.push(A2()), s2 === r2.PIPE; ) b2(r2.PIPE);
      return m2({ type: e26.UnionType, elements: n3 }, [0, a2]);
    }
    c2 = PD, l2 = SA, e26 = { NullableLiteral: "NullableLiteral", AllLiteral: "AllLiteral", NullLiteral: "NullLiteral", UndefinedLiteral: "UndefinedLiteral", VoidLiteral: "VoidLiteral", UnionType: "UnionType", ArrayType: "ArrayType", RecordType: "RecordType", FieldType: "FieldType", FunctionType: "FunctionType", ParameterType: "ParameterType", RestType: "RestType", NonNullableType: "NonNullableType", OptionalType: "OptionalType", NullableType: "NullableType", NameExpression: "NameExpression", TypeApplication: "TypeApplication", StringLiteralType: "StringLiteralType", NumericLiteralType: "NumericLiteralType", BooleanLiteralType: "BooleanLiteralType" }, r2 = { ILLEGAL: 0, DOT_LT: 1, REST: 2, LT: 3, GT: 4, LPAREN: 5, RPAREN: 6, LBRACE: 7, RBRACE: 8, LBRACK: 9, RBRACK: 10, COMMA: 11, COLON: 12, STAR: 13, PIPE: 14, QUESTION: 15, BANG: 16, EQUAL: 17, NAME: 18, STRING: 19, NUMBER: 20, EOF: 21 }, d2.prototype.restore = function() {
      o2 = this._previous, a2 = this._index, s2 = this._token, u2 = this._value;
    }, d2.save = function() {
      return new d2(o2, a2, s2, u2);
    }, t3.parseType = function(e27, t4) {
      var u3;
      return i2 = (n2 = e27).length, a2 = 0, o2 = 0, f2 = t4 && t4.range, p2 = t4 && t4.startIndex || 0, x2(), u3 = w2(), t4 && t4.midstream ? { expression: u3, index: o2 } : (s2 !== r2.EOF && l2.throwError("not reach to EOF"), u3);
    }, t3.parseParamType = function(t4, u3) {
      var c3;
      return i2 = (n2 = t4).length, a2 = 0, o2 = 0, f2 = u3 && u3.range, p2 = u3 && u3.startIndex || 0, x2(), c3 = function() {
        var t5;
        return s2 === r2.REST ? (b2(r2.REST), m2({ type: e26.RestType, expression: w2() }, [0, a2])) : (t5 = w2(), s2 === r2.EQUAL ? (b2(r2.EQUAL), m2({ type: e26.OptionalType, expression: t5 }, [0, a2])) : t5);
      }(), u3 && u3.midstream ? { expression: c3, index: o2 } : (s2 !== r2.EOF && l2.throwError("not reach to EOF"), c3);
    }, t3.stringify = function(t4, r3) {
      return null == r3 && (r3 = {}), function t5(r4, n3, i3) {
        var a3, o3, s3;
        switch (r4.type) {
          case e26.NullableLiteral:
            a3 = "?";
            break;
          case e26.AllLiteral:
            a3 = "*";
            break;
          case e26.NullLiteral:
            a3 = "null";
            break;
          case e26.UndefinedLiteral:
            a3 = "undefined";
            break;
          case e26.VoidLiteral:
            a3 = "void";
            break;
          case e26.UnionType:
            for (a3 = i3 ? "" : "(", o3 = 0, s3 = r4.elements.length; o3 < s3; ++o3) a3 += t5(r4.elements[o3], n3), o3 + 1 !== s3 && (a3 += n3 ? "|" : " | ");
            i3 || (a3 += ")");
            break;
          case e26.ArrayType:
            for (a3 = "[", o3 = 0, s3 = r4.elements.length; o3 < s3; ++o3) a3 += t5(r4.elements[o3], n3), o3 + 1 !== s3 && (a3 += n3 ? "," : ", ");
            a3 += "]";
            break;
          case e26.RecordType:
            for (a3 = "{", o3 = 0, s3 = r4.fields.length; o3 < s3; ++o3) a3 += t5(r4.fields[o3], n3), o3 + 1 !== s3 && (a3 += n3 ? "," : ", ");
            a3 += "}";
            break;
          case e26.FieldType:
            a3 = r4.value ? r4.key + (n3 ? ":" : ": ") + t5(r4.value, n3) : r4.key;
            break;
          case e26.FunctionType:
            for (a3 = n3 ? "function(" : "function (", r4.this && (r4.new ? a3 += n3 ? "new:" : "new: " : a3 += n3 ? "this:" : "this: ", a3 += t5(r4.this, n3), 0 !== r4.params.length && (a3 += n3 ? "," : ", ")), o3 = 0, s3 = r4.params.length; o3 < s3; ++o3) a3 += t5(r4.params[o3], n3), o3 + 1 !== s3 && (a3 += n3 ? "," : ", ");
            a3 += ")", r4.result && (a3 += (n3 ? ":" : ": ") + t5(r4.result, n3));
            break;
          case e26.ParameterType:
            a3 = r4.name + (n3 ? ":" : ": ") + t5(r4.expression, n3);
            break;
          case e26.RestType:
            a3 = "...", r4.expression && (a3 += t5(r4.expression, n3));
            break;
          case e26.NonNullableType:
            a3 = r4.prefix ? "!" + t5(r4.expression, n3) : t5(r4.expression, n3) + "!";
            break;
          case e26.OptionalType:
            a3 = t5(r4.expression, n3) + "=";
            break;
          case e26.NullableType:
            a3 = r4.prefix ? "?" + t5(r4.expression, n3) : t5(r4.expression, n3) + "?";
            break;
          case e26.NameExpression:
            a3 = r4.name;
            break;
          case e26.TypeApplication:
            for (a3 = t5(r4.expression, n3) + ".<", o3 = 0, s3 = r4.applications.length; o3 < s3; ++o3) a3 += t5(r4.applications[o3], n3), o3 + 1 !== s3 && (a3 += n3 ? "," : ", ");
            a3 += ">";
            break;
          case e26.StringLiteralType:
            a3 = '"' + r4.value + '"';
            break;
          case e26.NumericLiteralType:
          case e26.BooleanLiteralType:
            a3 = String(r4.value);
            break;
          default:
            l2.throwError("Unknown type " + r4.type);
        }
        return a3;
      }(t4, r3.compact, r3.topLevel);
    }, t3.Syntax = e26;
  }();
}));
var DA = (kA.parseType, kA.parseParamType, kA.stringify, kA.Syntax, r(function(e25, t3) {
  !function() {
    var e26, r2, n2, i2, a2, o2;
    function s2(e27, t4, r3) {
      return e27.slice(t4, r3);
    }
    function u2(e27) {
      return "param" === e27 || "argument" === e27 || "arg" === e27;
    }
    function c2(e27) {
      return "return" === e27 || "returns" === e27;
    }
    function l2(e27) {
      return "property" === e27 || "prop" === e27;
    }
    function p2(e27) {
      return u2(e27) || l2(e27) || "alias" === e27 || "this" === e27 || "mixes" === e27 || "requires" === e27;
    }
    function f2(e27) {
      return l2(e27) || u2(e27);
    }
    function h2(e27) {
      return u2(e27) || c2(e27) || "define" === e27 || "enum" === e27 || "implements" === e27 || "this" === e27 || "type" === e27 || "typedef" === e27 || l2(e27);
    }
    i2 = PD, e26 = kA, r2 = SA, o2 = Object.prototype.hasOwnProperty, a2 = function(e27, t4) {
      return o2.call(e27, t4);
    };
    var d2 = "[ \\f\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]", m2 = "(" + d2 + "*(?:\\*" + d2 + "?)?)(.+|[\r\n\u2028\u2029])";
    function g2(e27) {
      return e27.replace(/^\/\*\*?/, "").replace(/\*\/$/, "").replace(new RegExp(m2, "g"), "$2").replace(/\s*$/, "");
    }
    !function(t4) {
      var n3, o3, d3, y2, v2, x2, b2, E2, C3;
      function S3() {
        var e27 = v2.charCodeAt(o3);
        return o3 += 1, !i2.code.isLineTerminator(e27) || 13 === e27 && 10 === v2.charCodeAt(o3) || (d3 += 1), String.fromCharCode(e27);
      }
      function k2(t5, n4, a3) {
        for (var s3, u3, c3, l3, p3 = false; o3 < n4; ) {
          if (s3 = v2.charCodeAt(o3), !i2.code.isWhiteSpace(s3)) {
            if (123 === s3) {
              S3();
              break;
            }
            p3 = true;
            break;
          }
          S3();
        }
        if (p3) return null;
        for (u3 = 1, c3 = ""; o3 < n4; ) if (s3 = v2.charCodeAt(o3), i2.code.isLineTerminator(s3)) S3();
        else {
          if (125 === s3) {
            if (0 === (u3 -= 1)) {
              S3();
              break;
            }
          } else 123 === s3 && (u3 += 1);
          "" === c3 && (l3 = o3), c3 += S3();
        }
        return 0 !== u3 ? r2.throwError("Braces are not balanced") : f2(t5) ? e26.parseParamType(c3, { startIndex: w2(l3), range: a3 }) : e26.parseType(c3, { startIndex: w2(l3), range: a3 });
      }
      function D2(e27) {
        var t5;
        if (!i2.code.isIdentifierStartES5(v2.charCodeAt(o3)) && !v2[o3].match(/[0-9]/)) return null;
        for (t5 = S3(); o3 < e27 && i2.code.isIdentifierPartES5(v2.charCodeAt(o3)); ) t5 += S3();
        return t5;
      }
      function F2(e27) {
        for (; o3 < e27 && (i2.code.isWhiteSpace(v2.charCodeAt(o3)) || i2.code.isLineTerminator(v2.charCodeAt(o3))); ) S3();
      }
      function A2(e27, t5, r3) {
        var n4, a3, s3 = "";
        if (F2(e27), o3 >= e27) return null;
        if (91 === v2.charCodeAt(o3)) {
          if (!t5) return null;
          n4 = true, s3 = S3();
        }
        if (s3 += D2(e27), r3) for (58 !== v2.charCodeAt(o3) || "module" !== s3 && "external" !== s3 && "event" !== s3 || (s3 += S3(), s3 += D2(e27)), 91 === v2.charCodeAt(o3) && 93 === v2.charCodeAt(o3 + 1) && (s3 += S3(), s3 += S3()); 46 === v2.charCodeAt(o3) || 47 === v2.charCodeAt(o3) || 35 === v2.charCodeAt(o3) || 45 === v2.charCodeAt(o3) || 126 === v2.charCodeAt(o3); ) s3 += S3(), s3 += D2(e27);
        if (n4) {
          if (F2(e27), 61 === v2.charCodeAt(o3)) {
            var u3;
            s3 += S3(), F2(e27);
            for (var c3 = 1; o3 < e27; ) {
              if (u3 = v2.charCodeAt(o3), i2.code.isWhiteSpace(u3) && (a3 || (F2(e27), u3 = v2.charCodeAt(o3))), 39 === u3 && (a3 ? "'" === a3 && (a3 = "") : a3 = "'"), 34 === u3 && (a3 ? '"' === a3 && (a3 = "") : a3 = '"'), 91 === u3) c3++;
              else if (93 === u3 && 0 == --c3) break;
              s3 += S3();
            }
          }
          if (F2(e27), o3 >= e27 || 93 !== v2.charCodeAt(o3)) return null;
          s3 += S3();
        }
        return s3;
      }
      function w2(e27) {
        return v2 === x2 ? e27 : function(e28, t5) {
          for (var r3, n4 = e28.replace(/^\/\*\*?/, ""), i3 = 0, a3 = new RegExp(m2, "g"); r3 = a3.exec(n4); ) if (i3 += r3[1].length, r3.index + r3[0].length > t5 + i3) return t5 + i3 + e28.length - n4.length;
          return e28.replace(/\*\/$/, "").replace(/\s*$/, "").length;
        }(x2, e27);
      }
      function _2(e27, t5) {
        this._options = e27, this._title = t5.toLowerCase(), this._tag = { title: t5, description: null }, this._options.lineNumbers && (this._tag.lineNumber = d3), this._first = o3 - t5.length - 1, this._last = 0, this._extra = {};
      }
      function T2(e27) {
        var t5, n4;
        if (!function() {
          for (; o3 < y2 && 64 !== v2.charCodeAt(o3); ) S3();
          return !(o3 >= y2) && (r2.assert(64 === v2.charCodeAt(o3)), true);
        }()) return null;
        for (n4 = (t5 = new _2(e27, function() {
          var e28, t6 = "";
          for (S3(); o3 < y2 && ((e28 = v2.charCodeAt(o3)) >= 97 && e28 <= 122 || e28 >= 65 && e28 <= 90 || e28 >= 48 && e28 <= 57); ) t6 += S3();
          return t6;
        }())).parse(); o3 < t5._last; ) S3();
        return n4;
      }
      _2.prototype.addError = function(e27) {
        var t5 = Array.prototype.slice.call(arguments, 1), n4 = e27.replace(/%(\d)/g, function(e28, n5) {
          return r2.assert(n5 < t5.length, "Message reference must be in range"), t5[n5];
        });
        return this._tag.errors || (this._tag.errors = []), C3 && r2.throwError(n4), this._tag.errors.push(n4), b2;
      }, _2.prototype.parseType = function() {
        if (h2(this._title)) try {
          if (this._tag.type = k2(this._title, this._last, this._options.range), !(this._tag.type || u2(this._title) || c2(this._title) || this.addError("Missing or invalid tag type"))) return false;
        } catch (e27) {
          if (this._tag.type = null, !this.addError(e27.message)) return false;
        }
        else if (function(e27) {
          return h2(e27) || "throws" === e27 || "const" === e27 || "constant" === e27 || "namespace" === e27 || "member" === e27 || "var" === e27 || "module" === e27 || "constructor" === e27 || "class" === e27 || "extends" === e27 || "augments" === e27 || "public" === e27 || "private" === e27 || "protected" === e27;
        }(this._title)) try {
          this._tag.type = k2(this._title, this._last, this._options.range);
        } catch (e27) {
        }
        return true;
      }, _2.prototype._parseNamePath = function(e27) {
        var t5;
        return !!((t5 = A2(this._last, E2 && f2(this._title), true)) || e27 || this.addError("Missing or invalid tag name")) && (this._tag.name = t5, true);
      }, _2.prototype.parseNamePath = function() {
        return this._parseNamePath(false);
      }, _2.prototype.parseNamePathOptional = function() {
        return this._parseNamePath(true);
      }, _2.prototype.parseName = function() {
        var e27, t5;
        if (function(e28) {
          return p2(e28) || "const" === e28 || "constant" === e28;
        }(this._title)) if (this._tag.name = A2(this._last, E2 && f2(this._title), function(e28) {
          return l2(e28) || u2(e28);
        }(this._title)), this._tag.name) "[" === (t5 = this._tag.name).charAt(0) && "]" === t5.charAt(t5.length - 1) && ((e27 = t5.substring(1, t5.length - 1).split("=")).length > 1 && (this._tag.default = e27.slice(1).join("=")), this._tag.name = e27[0], this._tag.type && "OptionalType" !== this._tag.type.type && (this._tag.type = { type: "OptionalType", expression: this._tag.type }));
        else {
          if (!p2(this._title)) return true;
          if (u2(this._title) && this._tag.type && this._tag.type.name) this._extra.name = this._tag.type, this._tag.name = this._tag.type.name, this._tag.type = null;
          else if (!this.addError("Missing or invalid tag name")) return false;
        }
        return true;
      }, _2.prototype.parseDescription = function() {
        var e27 = s2(v2, o3, this._last).trim();
        return e27 && (/^-\s+/.test(e27) && (e27 = e27.substring(2)), this._tag.description = e27), true;
      }, _2.prototype.parseCaption = function() {
        var e27 = s2(v2, o3, this._last).trim(), t5 = e27.indexOf("<caption>"), r3 = e27.indexOf("</caption>");
        return t5 >= 0 && r3 >= 0 ? (this._tag.caption = e27.substring(t5 + "<caption>".length, r3).trim(), this._tag.description = e27.substring(r3 + "</caption>".length).trim()) : this._tag.description = e27, true;
      }, _2.prototype.parseKind = function() {
        var e27, t5;
        return t5 = { class: true, constant: true, event: true, external: true, file: true, function: true, member: true, mixin: true, module: true, namespace: true, typedef: true }, e27 = s2(v2, o3, this._last).trim(), this._tag.kind = e27, !(!a2(t5, e27) && !this.addError("Invalid kind name '%0'", e27));
      }, _2.prototype.parseAccess = function() {
        var e27;
        return e27 = s2(v2, o3, this._last).trim(), this._tag.access = e27, !("private" !== e27 && "protected" !== e27 && "public" !== e27 && !this.addError("Invalid access name '%0'", e27));
      }, _2.prototype.parseThis = function() {
        var e27 = s2(v2, o3, this._last).trim();
        return e27 && "{" === e27.charAt(0) ? this.parseType() && "NameExpression" === this._tag.type.type || "UnionType" === this._tag.type.type ? (this._tag.name = this._tag.type.name, true) : this.addError("Invalid name for this") : this.parseNamePath();
      }, _2.prototype.parseVariation = function() {
        var e27, t5;
        return t5 = s2(v2, o3, this._last).trim(), e27 = parseFloat(t5, 10), this._tag.variation = e27, !(isNaN(e27) && !this.addError("Invalid variation '%0'", t5));
      }, _2.prototype.ensureEnd = function() {
        var e27 = s2(v2, o3, this._last).trim();
        return !(e27 && !this.addError("Unknown content '%0'", e27));
      }, _2.prototype.epilogue = function() {
        var e27;
        return e27 = this._tag.description, !(f2(this._title) && !this._tag.type && e27 && "[" === e27.charAt(0) && (this._tag.type = this._extra.name, this._tag.name || (this._tag.name = void 0), !E2 && !this.addError("Missing or invalid tag name")));
      }, n3 = { access: ["parseAccess"], alias: ["parseNamePath", "ensureEnd"], augments: ["parseType", "parseNamePathOptional", "ensureEnd"], constructor: ["parseType", "parseNamePathOptional", "ensureEnd"], class: ["parseType", "parseNamePathOptional", "ensureEnd"], extends: ["parseType", "parseNamePathOptional", "ensureEnd"], example: ["parseCaption"], deprecated: ["parseDescription"], global: ["ensureEnd"], inner: ["ensureEnd"], instance: ["ensureEnd"], kind: ["parseKind"], mixes: ["parseNamePath", "ensureEnd"], mixin: ["parseNamePathOptional", "ensureEnd"], member: ["parseType", "parseNamePathOptional", "ensureEnd"], method: ["parseNamePathOptional", "ensureEnd"], module: ["parseType", "parseNamePathOptional", "ensureEnd"], func: ["parseNamePathOptional", "ensureEnd"], function: ["parseNamePathOptional", "ensureEnd"], var: ["parseType", "parseNamePathOptional", "ensureEnd"], name: ["parseNamePath", "ensureEnd"], namespace: ["parseType", "parseNamePathOptional", "ensureEnd"], private: ["parseType", "parseDescription"], protected: ["parseType", "parseDescription"], public: ["parseType", "parseDescription"], readonly: ["ensureEnd"], requires: ["parseNamePath", "ensureEnd"], since: ["parseDescription"], static: ["ensureEnd"], summary: ["parseDescription"], this: ["parseThis", "ensureEnd"], todo: ["parseDescription"], typedef: ["parseType", "parseNamePathOptional"], variation: ["parseVariation"], version: ["parseDescription"] }, _2.prototype.parse = function() {
        var e27, t5, r3;
        if (!this._title && !this.addError("Missing or invalid title")) return null;
        for (this._last = function() {
          var e28, t6, r4 = o3;
          for (t6 = false; r4 < y2; ) {
            if (e28 = v2.charCodeAt(r4), !i2.code.isLineTerminator(e28) || 13 === e28 && 10 === v2.charCodeAt(r4 + 1)) {
              if (t6) {
                if (64 === e28) break;
                i2.code.isWhiteSpace(e28) || (t6 = false);
              }
            } else t6 = true;
            r4 += 1;
          }
          return r4;
        }(this._title), this._options.range && (this._tag.range = [this._first, v2.slice(0, this._last).replace(/\s*$/, "").length].map(w2)), e27 = 0, t5 = (r3 = a2(n3, this._title) ? n3[this._title] : ["parseType", "parseName", "parseDescription", "epilogue"]).length; e27 < t5; ++e27) if (!this[r3[e27]]()) return null;
        return this._tag;
      }, t4.parse = function(e27, t5) {
        var n4, a3, s3, u3, c3, l3 = [];
        if (void 0 === t5 && (t5 = {}), v2 = "boolean" == typeof t5.unwrap && t5.unwrap ? g2(e27) : e27, x2 = e27, t5.tags) if (Array.isArray(t5.tags)) for (s3 = {}, u3 = 0, c3 = t5.tags.length; u3 < c3; u3++) "string" == typeof t5.tags[u3] ? s3[t5.tags[u3]] = true : r2.throwError('Invalid "tags" parameter: ' + t5.tags);
        else r2.throwError('Invalid "tags" parameter: ' + t5.tags);
        for (y2 = v2.length, o3 = 0, d3 = 0, b2 = t5.recoverable, E2 = t5.sloppy, C3 = t5.strict, a3 = function(e28) {
          var t6, r3, n5 = "";
          for (r3 = true; o3 < y2 && (t6 = v2.charCodeAt(o3), !r3 || 64 !== t6); ) i2.code.isLineTerminator(t6) ? r3 = true : r3 && !i2.code.isWhiteSpace(t6) && (r3 = false), n5 += S3();
          return e28 ? n5 : n5.trim();
        }(t5.preserveWhitespace); n4 = T2(t5); ) s3 && !s3.hasOwnProperty(n4.title) || l3.push(n4);
        return { description: a3, tags: l3 };
      };
    }(n2 = {}), t3.version = r2.VERSION, t3.parse = n2.parse, t3.parseType = e26.parseType, t3.parseParamType = e26.parseParamType, t3.unwrapComment = g2, t3.Syntax = function(e27) {
      var t4, r3 = {};
      for (t4 in e27) e27.hasOwnProperty(t4) && (r3[t4] = e27[t4]);
      return r3;
    }(e26.Syntax), t3.Error = r2.DoctrineError, t3.type = { Syntax: t3.Syntax, parseType: e26.parseType, parseParamType: e26.parseParamType, stringify: e26.stringify };
  }();
}));
var FA = (DA.version, DA.parse, DA.parseType, DA.parseParamType, DA.unwrapComment, DA.Syntax, DA.Error, DA.type, n(QF));
var AA = regeneratorRuntime.mark(eI);
function wA(e25) {
  return e25 && "object" == i(e25) && "default" in e25 ? e25.default : e25;
}
var _A = wA(PD);
var TA = wA(ID);
var PA = wA(FA);
var IA = wA(function(e25) {
  return new lA(e25);
});
var BA = wA(fA);
var OA = wA(DA);
var LA = Fy.createCommonjsModule(function(e25) {
  function t3(e26, t4, r3) {
    var n3 = e26.identifier, i3 = 0 === t4 || r3[t4 - 1].identifier !== n3;
    return n3 && false === e26.init && e26.isWrite() && i3;
  }
  function r2(e26) {
    return e26[0] !== e26[0].toLocaleLowerCase();
  }
  function n2(e26) {
    return e26.id && r2(e26.id.name);
  }
  function i2(e26) {
    for (var t4 = e26; t4; t4 = t4.parent) if (P2.test(t4.type)) return t4;
    return null;
  }
  function a2(e26) {
    return !(!e26 || !P2.test(e26.type));
  }
  function o2(e26) {
    return !(!e26 || !I2.test(e26.type));
  }
  function s2(t4) {
    return e25.exports.isNullLiteral(t4) || "Identifier" === t4.type && "undefined" === t4.name || "UnaryExpression" === t4.type && "void" === t4.operator;
  }
  function u2(e26) {
    return "CallExpression" === e26.parent.type && e26.parent.callee === e26;
  }
  function c2(e26) {
    return "MemberExpression" === e26.type && "Identifier" === e26.object.type && "Reflect" === e26.object.name && "Identifier" === e26.property.type && "apply" === e26.property.name && false === e26.computed;
  }
  function l2(e26) {
    return "MemberExpression" === e26.type && "Identifier" === e26.object.type && B2.test(e26.object.name) && "Identifier" === e26.property.type && "from" === e26.property.name && false === e26.computed;
  }
  function p2(e26) {
    for (var t4 = e26; "MemberExpression" === t4.type && !t4.computed; t4 = t4.property) if ("Identifier" === t4.property.type) return O2.test(t4.property.name);
    return false;
  }
  function f2(e26) {
    return function(t4) {
      return !e26(t4);
    };
  }
  function h2(e26, t4) {
    var r3 = t4.getJSDocComment(e26);
    return !(!r3 || !N2.test(r3.value)) || t4.getCommentsBefore(e26).some(function(e27) {
      return N2.test(e27.value);
    });
  }
  function d2(e26) {
    return "=>" === e26.value && "Punctuator" === e26.type;
  }
  function m2(e26) {
    return "," === e26.value && "Punctuator" === e26.type;
  }
  function g2(e26) {
    return "." === e26.value && "Punctuator" === e26.type;
  }
  function y2(e26) {
    return ";" === e26.value && "Punctuator" === e26.type;
  }
  function v2(e26) {
    return ":" === e26.value && "Punctuator" === e26.type;
  }
  function x2(e26) {
    return "(" === e26.value && "Punctuator" === e26.type;
  }
  function b2(e26) {
    return ")" === e26.value && "Punctuator" === e26.type;
  }
  function E2(e26) {
    return "[" === e26.value && "Punctuator" === e26.type;
  }
  function C3(e26) {
    return "]" === e26.value && "Punctuator" === e26.type;
  }
  function S3(e26) {
    return "{" === e26.value && "Punctuator" === e26.type;
  }
  function k2(e26) {
    return "}" === e26.value && "Punctuator" === e26.type;
  }
  function D2(e26, t4) {
    return e26.id ? t4.getTokenAfter(e26.id, x2) : t4.getFirstToken(e26, x2);
  }
  var F2 = Fy.require$$0$1, A2 = F2.breakableTypePattern, w2 = F2.createGlobalLinebreakMatcher, _2 = F2.lineBreakPattern, T2 = F2.shebangPattern, P2 = /^(?:Function(?:Declaration|Expression)|ArrowFunctionExpression)$/, I2 = /^(?:DoWhile|For|ForIn|ForOf|While)Statement$/, B2 = /Array$/, O2 = /^(?:every|filter|find|findIndex|forEach|map|some)$/, L2 = /^(?:bind|call|apply)$/, N2 = /^[\t-\r \*\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*@this/m, j2 = /* @__PURE__ */ new Set(["\r\n", "\r", "\n", "\u2028", "\u2029"]), R2 = /* @__PURE__ */ new Set(["Program", "BlockStatement", "SwitchCase"]), M2 = /^(0|[1-9][0-9]*)$/, V2 = /^(?:(?:[\0-\[\]-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])|\\(?:[\0-\/8-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])|\\0(?![0-9]))*\\(?:[1-7]|0[0-9])/;
  e25.exports = { COMMENTS_IGNORE_PATTERN: /^[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*(?:eslint|jshint[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+|jslint[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+|istanbul[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+|globals?[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+|exported[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+|jscs)/, LINEBREAKS: j2, LINEBREAK_MATCHER: _2, SHEBANG_MATCHER: T2, STATEMENT_LIST_PARENTS: R2, isTokenOnSameLine: function(e26, t4) {
    return e26.loc.end.line === t4.loc.start.line;
  }, isNullOrUndefined: s2, isCallee: u2, isES5Constructor: n2, getUpperFunction: i2, isFunction: a2, isLoop: o2, isInLoop: function(e26) {
    for (var t4 = e26; t4 && !a2(t4); t4 = t4.parent) if (o2(t4)) return true;
    return false;
  }, isArrayFromMethod: l2, isParenthesised: function(e26, t4) {
    var r3 = e26.getTokenBefore(t4), n3 = e26.getTokenAfter(t4);
    return !(!r3 || !n3) && "(" === r3.value && r3.range[1] <= t4.range[0] && ")" === n3.value && n3.range[0] >= t4.range[1];
  }, createGlobalLinebreakMatcher: w2, equalTokens: function(e26, t4, r3) {
    var n3 = r3.getTokens(e26), i3 = r3.getTokens(t4);
    if (n3.length !== i3.length) return false;
    for (var a3 = 0; a3 < n3.length; ++a3) if (n3[a3].type !== i3[a3].type || n3[a3].value !== i3[a3].value) return false;
    return true;
  }, isArrowToken: d2, isClosingBraceToken: k2, isClosingBracketToken: C3, isClosingParenToken: b2, isColonToken: v2, isCommaToken: m2, isCommentToken: function(e26) {
    return "Line" === e26.type || "Block" === e26.type || "Shebang" === e26.type;
  }, isDotToken: g2, isKeywordToken: function(e26) {
    return "Keyword" === e26.type;
  }, isNotClosingBraceToken: f2(k2), isNotClosingBracketToken: f2(C3), isNotClosingParenToken: f2(b2), isNotColonToken: f2(v2), isNotCommaToken: f2(m2), isNotDotToken: f2(g2), isNotOpeningBraceToken: f2(S3), isNotOpeningBracketToken: f2(E2), isNotOpeningParenToken: f2(x2), isNotSemicolonToken: f2(y2), isOpeningBraceToken: S3, isOpeningBracketToken: E2, isOpeningParenToken: x2, isSemicolonToken: y2, isStringLiteral: function(e26) {
    return "Literal" === e26.type && "string" == typeof e26.value || "TemplateLiteral" === e26.type;
  }, isBreakableStatement: function(e26) {
    return A2.test(e26.type);
  }, getModifyingReferences: function(e26) {
    return e26.filter(t3);
  }, isSurroundedBy: function(e26, t4) {
    return e26[0] === t4 && e26[e26.length - 1] === t4;
  }, isDirectiveComment: function(e26) {
    var t4 = e26.value.trim();
    return "Line" === e26.type && 0 === t4.indexOf("eslint-") || "Block" === e26.type && (0 === t4.indexOf("global ") || 0 === t4.indexOf("eslint ") || 0 === t4.indexOf("eslint-"));
  }, getTrailingStatement: _A.ast.trailingStatement, getVariableByName: function(e26, t4) {
    for (var r3 = e26; r3; ) {
      var n3 = r3.set.get(t4);
      if (n3) return n3;
      r3 = r3.upper;
    }
    return null;
  }, isDefaultThisBinding: function(e26, t4) {
    var a3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, o3 = a3.capIsConstructor, f3 = void 0 === o3 || o3;
    if (f3 && n2(e26) || h2(e26, t4)) return false;
    for (var d3 = null === e26.id, m3 = e26; m3; ) {
      var g3 = m3.parent;
      switch (g3.type) {
        case "LogicalExpression":
        case "ConditionalExpression":
          m3 = g3;
          break;
        case "ReturnStatement":
          var y3 = i2(g3);
          if (null === y3 || !u2(y3)) return true;
          m3 = y3.parent;
          break;
        case "ArrowFunctionExpression":
          if (m3 !== g3.body || !u2(g3)) return true;
          m3 = g3.parent;
          break;
        case "Property":
        case "MethodDefinition":
          return g3.value !== m3;
        case "AssignmentExpression":
        case "AssignmentPattern":
          return "MemberExpression" !== g3.left.type && !(f3 && d3 && "Identifier" === g3.left.type && r2(g3.left.name));
        case "VariableDeclarator":
          return !(f3 && d3 && g3.init === m3 && "Identifier" === g3.id.type && r2(g3.id.name));
        case "MemberExpression":
          return g3.object !== m3 || "Identifier" !== g3.property.type || !L2.test(g3.property.name) || !u2(g3) || 0 === g3.parent.arguments.length || s2(g3.parent.arguments[0]);
        case "CallExpression":
          return c2(g3.callee) ? 3 !== g3.arguments.length || g3.arguments[0] !== m3 || s2(g3.arguments[1]) : l2(g3.callee) ? 3 !== g3.arguments.length || g3.arguments[1] !== m3 || s2(g3.arguments[2]) : !p2(g3.callee) || 2 !== g3.arguments.length || g3.arguments[0] !== m3 || s2(g3.arguments[1]);
        default:
          return true;
      }
    }
    return true;
  }, getPrecedence: function(e26) {
    switch (e26.type) {
      case "SequenceExpression":
        return 0;
      case "AssignmentExpression":
      case "ArrowFunctionExpression":
      case "YieldExpression":
        return 1;
      case "ConditionalExpression":
        return 3;
      case "LogicalExpression":
        switch (e26.operator) {
          case "||":
            return 4;
          case "&&":
            return 5;
        }
      case "BinaryExpression":
        switch (e26.operator) {
          case "|":
            return 6;
          case "^":
            return 7;
          case "&":
            return 8;
          case "==":
          case "!=":
          case "===":
          case "!==":
            return 9;
          case "<":
          case "<=":
          case ">":
          case ">=":
          case "in":
          case "instanceof":
            return 10;
          case "<<":
          case ">>":
          case ">>>":
            return 11;
          case "+":
          case "-":
            return 12;
          case "*":
          case "/":
          case "%":
            return 13;
          case "**":
            return 15;
        }
      case "UnaryExpression":
      case "AwaitExpression":
        return 16;
      case "UpdateExpression":
        return 17;
      case "CallExpression":
      case "ImportExpression":
        return 18;
      case "NewExpression":
        return 19;
      default:
        return 20;
    }
  }, isEmptyBlock: function(e26) {
    return !(!e26 || "BlockStatement" !== e26.type || 0 !== e26.body.length);
  }, isEmptyFunction: function(t4) {
    return a2(t4) && e25.exports.isEmptyBlock(t4.body);
  }, getStaticPropertyName: function(e26) {
    var t4;
    switch (e26 && e26.type) {
      case "Property":
      case "MethodDefinition":
        t4 = e26.key;
        break;
      case "MemberExpression":
        t4 = e26.property;
    }
    switch (t4 && t4.type) {
      case "Literal":
        return t4.value + "";
      case "TemplateLiteral":
        if (0 === t4.expressions.length && 1 === t4.quasis.length) return t4.quasis[0].value.cooked;
        break;
      case "Identifier":
        if (!e26.computed) return t4.name;
    }
    return null;
  }, getDirectivePrologue: function(e26) {
    var t4 = [];
    if ("Program" === e26.type || "FunctionDeclaration" === e26.type || "FunctionExpression" === e26.type || "ArrowFunctionExpression" === e26.type && "BlockStatement" === e26.body.type) {
      var r3 = "Program" === e26.type ? e26.body : e26.body.body, n3 = true, i3 = false, a3 = void 0;
      try {
        for (var o3, s3 = r3[Symbol.iterator](); !(n3 = (o3 = s3.next()).done); n3 = true) {
          var u3 = o3.value;
          if ("ExpressionStatement" !== u3.type || "Literal" !== u3.expression.type) break;
          t4.push(u3);
        }
      } catch (e27) {
        i3 = true, a3 = e27;
      } finally {
        try {
          n3 || null == s3.return || s3.return();
        } finally {
          if (i3) throw a3;
        }
      }
    }
    return t4;
  }, isDecimalInteger: function(e26) {
    return "Literal" === e26.type && "number" == typeof e26.value && M2.test(e26.raw);
  }, isDecimalIntegerNumericToken: function(e26) {
    return "Numeric" === e26.type && M2.test(e26.value);
  }, getFunctionNameWithKind: function(t4) {
    var r3 = t4.parent, n3 = [];
    if ("MethodDefinition" === r3.type && r3.static && n3.push("static"), t4.async && n3.push("async"), t4.generator && n3.push("generator"), "ArrowFunctionExpression" === t4.type) n3.push("arrow", "function");
    else if ("Property" === r3.type || "MethodDefinition" === r3.type) {
      if ("constructor" === r3.kind) return "constructor";
      "get" === r3.kind ? n3.push("getter") : "set" === r3.kind ? n3.push("setter") : n3.push("method");
    } else n3.push("function");
    if (t4.id) n3.push("'".concat(t4.id.name, "'"));
    else {
      var i3 = e25.exports.getStaticPropertyName(r3);
      null !== i3 && n3.push("'".concat(i3, "'"));
    }
    return n3.join(" ");
  }, getFunctionHeadLoc: function(e26, t4) {
    var r3 = e26.parent, n3 = null, i3 = null;
    if ("ArrowFunctionExpression" === e26.type) {
      var a3 = t4.getTokenBefore(e26.body, d2);
      n3 = a3.loc.start, i3 = a3.loc.end;
    } else "Property" === r3.type || "MethodDefinition" === r3.type ? (n3 = r3.loc.start, i3 = D2(e26, t4).loc.start) : (n3 = e26.loc.start, i3 = D2(e26, t4).loc.start);
    return { start: Object.assign({}, n3), end: Object.assign({}, i3) };
  }, getNextLocation: function(e26, t4) {
    var r3 = e26.getIndexFromLoc(t4);
    return r3 + 1 > e26.text.length ? null : e26.getLocFromIndex(r3 + 1);
  }, getParenthesisedText: function(e26, t4) {
    for (var r3 = e26.getFirstToken(t4), n3 = e26.getLastToken(t4); e26.getTokenBefore(r3) && "Punctuator" === e26.getTokenBefore(r3).type && "(" === e26.getTokenBefore(r3).value && e26.getTokenAfter(n3) && "Punctuator" === e26.getTokenAfter(n3).type && ")" === e26.getTokenAfter(n3).value; ) r3 = e26.getTokenBefore(r3), n3 = e26.getTokenAfter(n3);
    return e26.getText().slice(r3.range[0], n3.range[1]);
  }, couldBeError: function(t4) {
    switch (t4.type) {
      case "Identifier":
      case "CallExpression":
      case "NewExpression":
      case "MemberExpression":
      case "TaggedTemplateExpression":
      case "YieldExpression":
      case "AwaitExpression":
        return true;
      case "AssignmentExpression":
        return e25.exports.couldBeError(t4.right);
      case "SequenceExpression":
        var r3 = t4.expressions;
        return 0 !== r3.length && e25.exports.couldBeError(r3[r3.length - 1]);
      case "LogicalExpression":
        return e25.exports.couldBeError(t4.left) || e25.exports.couldBeError(t4.right);
      case "ConditionalExpression":
        return e25.exports.couldBeError(t4.consequent) || e25.exports.couldBeError(t4.alternate);
      default:
        return false;
    }
  }, isNullLiteral: function(e26) {
    return "Literal" === e26.type && null === e26.value && !e26.regex && !e26.bigint;
  }, canTokensBeAdjacent: function(e26, t4) {
    var r3;
    if ("string" == typeof e26) {
      var n3 = Fy.espree.tokenize(e26, { ecmaVersion: 2015 });
      r3 = n3[n3.length - 1];
    } else r3 = e26;
    var i3 = "string" == typeof t4 ? Fy.espree.tokenize(t4, { ecmaVersion: 2015 })[0] : t4;
    if ("Punctuator" === r3.type || "Punctuator" === i3.type) {
      if ("Punctuator" === r3.type && "Punctuator" === i3.type) {
        var a3 = /* @__PURE__ */ new Set(["+", "++"]), o3 = /* @__PURE__ */ new Set(["-", "--"]);
        return !(a3.has(r3.value) && a3.has(i3.value) || o3.has(r3.value) && o3.has(i3.value));
      }
      return true;
    }
    return "String" === r3.type || "String" === i3.type || "Template" === r3.type || "Template" === i3.type || !("Numeric" === r3.type || "Numeric" !== i3.type || !i3.value.startsWith("."));
  }, getNameLocationInGlobalDirectiveComment: function(e26, t4, r3) {
    var n3 = new RegExp("[\\s,]".concat(Fy.lodash.escapeRegExp(r3), "(?:$|[\\s,:])"), "gu");
    n3.lastIndex = t4.value.indexOf("global") + 6;
    var i3 = n3.exec(t4.value);
    return e26.getLocFromIndex(t4.range[0] + 2 + (i3 ? i3.index + 1 : 0));
  }, hasOctalEscapeSequence: function(e26) {
    return V2.test(e26);
  } };
});
LA.COMMENTS_IGNORE_PATTERN, LA.LINEBREAKS, LA.LINEBREAK_MATCHER, LA.SHEBANG_MATCHER, LA.STATEMENT_LIST_PARENTS, LA.isTokenOnSameLine, LA.isNullOrUndefined, LA.isCallee, LA.isES5Constructor, LA.getUpperFunction, LA.isFunction, LA.isLoop, LA.isInLoop, LA.isArrayFromMethod, LA.isParenthesised, LA.createGlobalLinebreakMatcher, LA.equalTokens, LA.isArrowToken, LA.isClosingBraceToken, LA.isClosingBracketToken, LA.isClosingParenToken, LA.isColonToken, LA.isCommaToken, LA.isCommentToken, LA.isDotToken, LA.isKeywordToken, LA.isNotClosingBraceToken, LA.isNotClosingBracketToken, LA.isNotClosingParenToken, LA.isNotColonToken, LA.isNotCommaToken, LA.isNotDotToken, LA.isNotOpeningBraceToken, LA.isNotOpeningBracketToken, LA.isNotOpeningParenToken, LA.isNotSemicolonToken, LA.isOpeningBraceToken, LA.isOpeningBracketToken, LA.isOpeningParenToken, LA.isSemicolonToken, LA.isStringLiteral, LA.isBreakableStatement, LA.getModifyingReferences, LA.isSurroundedBy, LA.isDirectiveComment, LA.getTrailingStatement, LA.getVariableByName, LA.isDefaultThisBinding, LA.getPrecedence, LA.isEmptyBlock, LA.isEmptyFunction, LA.getStaticPropertyName, LA.getDirectivePrologue, LA.isDecimalInteger, LA.isDecimalIntegerNumericToken, LA.getFunctionNameWithKind, LA.getFunctionHeadLoc, LA.getNextLocation, LA.getParenthesisedText, LA.couldBeError, LA.isNullLiteral, LA.canTokensBeAdjacent, LA.getNameLocationInGlobalDirectiveComment, LA.hasOctalEscapeSequence;
function NA(e25) {
  return "get" === e25.kind || "set" === e25.kind;
}
function jA(e25, t3) {
  return "Identifier" === e25.type && e25.name === t3;
}
function RA(e25, t3, r2, n2) {
  var i2 = e25.parent;
  return "CallExpression" === i2.type && "MemberExpression" === i2.callee.type && false === i2.callee.computed && jA(i2.callee.object, r2) && jA(i2.callee.property, n2) && i2.arguments[t3] === e25;
}
var MA = { meta: { type: "suggestion", docs: { description: "enforce getter and setter pairs in objects and classes", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/accessor-pairs" }, schema: [{ type: "object", properties: { getWithoutSet: { type: "boolean", default: false }, setWithoutGet: { type: "boolean", default: true }, enforceForClassMembers: { type: "boolean", default: false } }, additionalProperties: false }], messages: { missingGetterInPropertyDescriptor: "Getter is not present in property descriptor.", missingSetterInPropertyDescriptor: "Setter is not present in property descriptor.", missingGetterInObjectLiteral: "Getter is not present for {{ name }}.", missingSetterInObjectLiteral: "Setter is not present for {{ name }}.", missingGetterInClass: "Getter is not present for class {{ name }}.", missingSetterInClass: "Setter is not present for class {{ name }}." } }, create: function(e25) {
  function t3(t4, r3) {
    "Property" === t4.type ? e25.report({ node: t4, messageId: "".concat(r3, "InObjectLiteral"), loc: LA.getFunctionHeadLoc(t4.value, l2), data: { name: LA.getFunctionNameWithKind(t4.value) } }) : "MethodDefinition" === t4.type ? e25.report({ node: t4, messageId: "".concat(r3, "InClass"), loc: LA.getFunctionHeadLoc(t4.value, l2), data: { name: LA.getFunctionNameWithKind(t4.value) } }) : e25.report({ node: t4, messageId: "".concat(r3, "InPropertyDescriptor") });
  }
  function r2(e26, r3) {
    var n3 = true, i3 = false, a3 = void 0;
    try {
      for (var o3, s3 = e26[Symbol.iterator](); !(n3 = (o3 = s3.next()).done); n3 = true) {
        t3(o3.value, r3);
      }
    } catch (e27) {
      i3 = true, a3 = e27;
    } finally {
      try {
        n3 || null == s3.return || s3.return();
      } finally {
        if (i3) throw a3;
      }
    }
  }
  function n2(e26) {
    var t4 = LA.getStaticPropertyName(e26);
    return { key: null === t4 ? l2.getTokens(e26.key) : t4, getters: "get" === e26.kind ? [e26] : [], setters: "set" === e26.kind ? [e26] : [] };
  }
  function i2(e26, t4) {
    var r3, n3, i3 = e26.find(function(e27) {
      return function(e28, t5) {
        return "string" == typeof e28 && "string" == typeof t5 ? e28 == t5 : !(!Array.isArray(e28) || !Array.isArray(t5)) && function(e29, t6) {
          if (e29.length !== t6.length) return false;
          for (var r4 = 0; r4 < e29.length; r4++) {
            var n4 = e29[r4], i4 = t6[r4];
            if (n4.type !== i4.type || n4.value !== i4.value) return false;
          }
          return true;
        }(e28, t5);
      }(e27.key, t4.key);
    });
    return i3 ? ((r3 = i3.getters).push.apply(r3, E(t4.getters)), (n3 = i3.setters).push.apply(n3, E(t4.setters))) : e26.push(t4), e26;
  }
  function a2(e26) {
    var t4 = e26.filter(NA).map(n2).reduce(i2, []), a3 = true, o3 = false, c3 = void 0;
    try {
      for (var l3, p3 = t4[Symbol.iterator](); !(a3 = (l3 = p3.next()).done); a3 = true) {
        var f2 = l3.value, h2 = f2.getters, d2 = f2.setters;
        u2 && d2.length && !h2.length && r2(d2, "missingGetter"), s2 && h2.length && !d2.length && r2(h2, "missingSetter");
      }
    } catch (e27) {
      o3 = true, c3 = e27;
    } finally {
      try {
        a3 || null == p3.return || p3.return();
      } finally {
        if (o3) throw c3;
      }
    }
  }
  var o2 = e25.options[0] || {}, s2 = true === o2.getWithoutSet, u2 = false !== o2.setWithoutGet, c2 = true === o2.enforceForClassMembers, l2 = e25.getSourceCode(), p2 = {};
  return (u2 || s2) && (p2.ObjectExpression = function(e26) {
    (function(e27) {
      a2(e27.properties.filter(function(e28) {
        return "Property" === e28.type;
      }));
    })(e26), function(e27) {
      if (RA(e27, 2, "Object", "defineProperty") || RA(e27, 2, "Reflect", "defineProperty")) return true;
      var t4 = e27.parent.parent;
      return "ObjectExpression" === t4.type && (RA(t4, 1, "Object", "create") || RA(t4, 1, "Object", "defineProperties"));
    }(e26) && function(e27) {
      var r3 = e27.properties.filter(function(e28) {
        return "Property" === e28.type && "init" === e28.kind && !e28.computed;
      }).map(function(e28) {
        return e28.key.name;
      }), n3 = r3.includes("get"), i3 = r3.includes("set");
      u2 && i3 && !n3 && t3(e27, "missingGetter"), s2 && n3 && !i3 && t3(e27, "missingSetter");
    }(e26);
  }, c2 && (p2.ClassBody = function(e26) {
    var t4 = e26.body.filter(function(e27) {
      return "MethodDefinition" === e27.type;
    });
    a2(t4.filter(function(e27) {
      return e27.static;
    })), a2(t4.filter(function(e27) {
      return !e27.static;
    }));
  })), p2;
} };
var VA = { meta: { type: "layout", docs: { description: "enforce linebreaks after opening and before closing array brackets", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/array-bracket-newline" }, fixable: "whitespace", schema: [{ oneOf: [{ enum: ["always", "never", "consistent"] }, { type: "object", properties: { multiline: { type: "boolean" }, minItems: { type: ["integer", "null"], minimum: 0 } }, additionalProperties: false }] }], messages: { unexpectedOpeningLinebreak: "There should be no linebreak after '['.", unexpectedClosingLinebreak: "There should be no linebreak before ']'.", missingOpeningLinebreak: "A linebreak is required after '['.", missingClosingLinebreak: "A linebreak is required before ']'." } }, create: function(e25) {
  function t3(e26) {
    var t4 = function(e27) {
      var t5 = false, r3 = false, i3 = 0;
      return e27 ? "consistent" === e27 ? (t5 = true, i3 = n2) : "always" === e27 || 0 === e27.minItems ? i3 = 0 : "never" === e27 ? i3 = n2 : (r3 = !!e27.multiline, i3 = e27.minItems || n2) : (t5 = false, r3 = true, i3 = n2), { consistent: t5, multiline: r3, minItems: i3 };
    }(e26);
    return { ArrayExpression: t4, ArrayPattern: t4 };
  }
  function r2(r3) {
    var n3 = r3.elements, a2 = t3(e25.options[0])[r3.type], o2 = i2.getFirstToken(r3), s2 = i2.getLastToken(r3), u2 = i2.getTokenAfter(o2, { includeComments: true }), c2 = i2.getTokenBefore(s2, { includeComments: true }), l2 = i2.getTokenAfter(o2), p2 = i2.getTokenBefore(s2);
    n3.length >= a2.minItems || a2.multiline && 0 < n3.length && u2.loc.start.line !== c2.loc.end.line || 0 === n3.length && "Block" === u2.type && u2.loc.start.line !== c2.loc.end.line && u2 === c2 || a2.consistent && o2.loc.end.line !== l2.loc.start.line ? (LA.isTokenOnSameLine(o2, l2) && function(t4, r4) {
      e25.report({ node: t4, loc: r4.loc, messageId: "missingOpeningLinebreak", fix: function(e26) {
        return e26.insertTextAfter(r4, "\n");
      } });
    }(r3, o2), LA.isTokenOnSameLine(p2, s2) && function(t4, r4) {
      e25.report({ node: t4, loc: r4.loc, messageId: "missingClosingLinebreak", fix: function(e26) {
        return e26.insertTextBefore(r4, "\n");
      } });
    }(r3, s2)) : (!LA.isTokenOnSameLine(o2, l2) && function(t4, r4) {
      e25.report({ node: t4, loc: r4.loc, messageId: "unexpectedOpeningLinebreak", fix: function(e26) {
        var t5 = i2.getTokenAfter(r4, { includeComments: true });
        return LA.isCommentToken(t5) ? null : e26.removeRange([r4.range[1], t5.range[0]]);
      } });
    }(r3, o2), !LA.isTokenOnSameLine(p2, s2) && function(t4, r4) {
      e25.report({ node: t4, loc: r4.loc, messageId: "unexpectedClosingLinebreak", fix: function(e26) {
        var t5 = i2.getTokenBefore(r4, { includeComments: true });
        return LA.isCommentToken(t5) ? null : e26.removeRange([t5.range[1], r4.range[0]]);
      } });
    }(r3, s2));
  }
  var n2 = Number.POSITIVE_INFINITY, i2 = e25.getSourceCode();
  return { ArrayPattern: r2, ArrayExpression: r2 };
} };
var UA = { meta: { type: "layout", docs: { description: "enforce consistent spacing inside array brackets", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/array-bracket-spacing" }, fixable: "whitespace", schema: [{ enum: ["always", "never"] }, { type: "object", properties: { singleValue: { type: "boolean" }, objectsInArrays: { type: "boolean" }, arraysInArrays: { type: "boolean" } }, additionalProperties: false }], messages: { unexpectedSpaceAfter: "There should be no space after '{{tokenValue}}'.", unexpectedSpaceBefore: "There should be no space before '{{tokenValue}}'.", missingSpaceAfter: "A space is required after '{{tokenValue}}'.", missingSpaceBefore: "A space is required before '{{tokenValue}}'." } }, create: function(e25) {
  function t3(t4) {
    return !!e25.options[1] && e25.options[1][t4] === !c2;
  }
  function r2(t4, r3) {
    e25.report({ node: t4, loc: r3.loc.start, messageId: "unexpectedSpaceAfter", data: { tokenValue: r3.value }, fix: function(e26) {
      var t5 = l2.getTokenAfter(r3);
      return e26.removeRange([r3.range[1], t5.range[0]]);
    } });
  }
  function n2(t4, r3) {
    e25.report({ node: t4, loc: r3.loc.start, messageId: "unexpectedSpaceBefore", data: { tokenValue: r3.value }, fix: function(e26) {
      var t5 = l2.getTokenBefore(r3);
      return e26.removeRange([t5.range[1], r3.range[0]]);
    } });
  }
  function i2(t4, r3) {
    e25.report({ node: t4, loc: r3.loc.start, messageId: "missingSpaceAfter", data: { tokenValue: r3.value }, fix: function(e26) {
      return e26.insertTextAfter(r3, " ");
    } });
  }
  function a2(t4, r3) {
    e25.report({ node: t4, loc: r3.loc.start, messageId: "missingSpaceBefore", data: { tokenValue: r3.value }, fix: function(e26) {
      return e26.insertTextBefore(r3, " ");
    } });
  }
  function o2(e26) {
    return e26 && ("ObjectExpression" === e26.type || "ObjectPattern" === e26.type);
  }
  function s2(e26) {
    return e26 && ("ArrayExpression" === e26.type || "ArrayPattern" === e26.type);
  }
  function u2(e26) {
    if (!p2.spaced || 0 !== e26.elements.length) {
      var t4 = l2.getFirstToken(e26), u3 = l2.getFirstToken(e26, 1), c3 = e26.typeAnnotation ? l2.getTokenBefore(e26.typeAnnotation) : l2.getLastToken(e26), f2 = l2.getTokenBefore(c3), h2 = e26.elements[0], d2 = e26.elements[e26.elements.length - 1], m2 = p2.objectsInArraysException && o2(h2) || p2.arraysInArraysException && s2(h2) || p2.singleElementException && 1 === e26.elements.length ? !p2.spaced : p2.spaced, g2 = p2.objectsInArraysException && o2(d2) || p2.arraysInArraysException && s2(d2) || p2.singleElementException && 1 === e26.elements.length ? !p2.spaced : p2.spaced;
      LA.isTokenOnSameLine(t4, u3) && (m2 && !l2.isSpaceBetweenTokens(t4, u3) && i2(e26, t4), !m2 && l2.isSpaceBetweenTokens(t4, u3) && r2(e26, t4)), t4 !== f2 && LA.isTokenOnSameLine(f2, c3) && (g2 && !l2.isSpaceBetweenTokens(f2, c3) && a2(e26, c3), !g2 && l2.isSpaceBetweenTokens(f2, c3) && n2(e26, c3));
    }
  }
  var c2 = "always" === e25.options[0], l2 = e25.getSourceCode(), p2 = { spaced: c2, singleElementException: t3("singleValue"), objectsInArraysException: t3("objectsInArrays"), arraysInArraysException: t3("arraysInArrays") };
  return { ArrayPattern: u2, ArrayExpression: u2 };
} };
var qA = /^(?:Arrow)?FunctionExpression$/;
var WA = /^(?:every|filter|find(?:Index)?|map|reduce(?:Right)?|some|sort)$/;
function $A(e25) {
  return e25.reachable;
}
function GA(e25, t3) {
  return "ArrowFunctionExpression" === e25.type ? t3.getTokenBefore(e25.body) : e25.id || e25;
}
function zA(e25) {
  return "MemberExpression" === e25.type && WA.test(LA.getStaticPropertyName(e25) || "");
}
function HA(e25) {
  for (var t3 = e25; t3; ) {
    var r2 = t3.parent;
    switch (r2.type) {
      case "LogicalExpression":
      case "ConditionalExpression":
        t3 = r2;
        break;
      case "ReturnStatement":
        var n2 = LA.getUpperFunction(r2);
        if (null === n2 || !LA.isCallee(n2)) return false;
        t3 = n2.parent;
        break;
      case "CallExpression":
        return LA.isArrayFromMethod(r2.callee) ? 2 <= r2.arguments.length && r2.arguments[1] === t3 : !!zA(r2.callee) && 1 <= r2.arguments.length && r2.arguments[0] === t3;
      default:
        return false;
    }
  }
  return false;
}
var KA = { meta: { type: "problem", docs: { description: "enforce `return` statements in callbacks of array methods", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/array-callback-return" }, schema: [{ type: "object", properties: { allowImplicit: { type: "boolean", default: false } }, additionalProperties: false }], messages: { expectedAtEnd: "Expected to return a value at the end of {{name}}.", expectedInside: "Expected to return a value in {{name}}.", expectedReturnValue: "{{name}} expected a return value." } }, create: function(e25) {
  function t3(t4) {
    n2.shouldCheck && n2.codePath.currentSegments.some($A) && e25.report({ node: t4, loc: GA(t4, e25.getSourceCode()).loc.start, messageId: n2.hasReturn ? "expectedAtEnd" : "expectedInside", data: { name: LA.getFunctionNameWithKind(n2.node) } });
  }
  var r2 = e25.options[0] || { allowImplicit: false }, n2 = { upper: null, codePath: null, hasReturn: false, shouldCheck: false, node: null };
  return { onCodePathStart: function(e26, t4) {
    n2 = { upper: n2, codePath: e26, hasReturn: false, shouldCheck: qA.test(t4.type) && "BlockStatement" === t4.body.type && HA(t4) && !t4.async && !t4.generator, node: t4 };
  }, onCodePathEnd: function() {
    n2 = n2.upper;
  }, ReturnStatement: function(t4) {
    n2.shouldCheck && (n2.hasReturn = true, !r2.allowImplicit && !t4.argument && e25.report({ node: t4, messageId: "expectedReturnValue", data: { name: Fy.lodash.upperFirst(LA.getFunctionNameWithKind(n2.node)) } }));
  }, "FunctionExpression:exit": t3, "ArrowFunctionExpression:exit": t3 };
} };
var JA = { meta: { type: "layout", docs: { description: "enforce line breaks after each array element", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/array-element-newline" }, fixable: "whitespace", schema: [{ oneOf: [{ enum: ["always", "never", "consistent"] }, { type: "object", properties: { multiline: { type: "boolean" }, minItems: { type: ["integer", "null"], minimum: 0 } }, additionalProperties: false }] }], messages: { unexpectedLineBreak: "There should be no linebreak here.", missingLineBreak: "There should be a linebreak after this element." } }, create: function(e25) {
  function t3(e26) {
    var t4 = function(e27) {
      var t5, r3 = false, n3 = false, i3 = e27 || "always";
      return i3 && "always" !== i3 && 0 !== i3.minItems ? "never" === i3 ? t5 = a2 : "consistent" === i3 ? (r3 = true, t5 = a2) : (n3 = !!i3.multiline, t5 = i3.minItems || a2) : t5 = 0, { consistent: r3, multiline: n3, minItems: t5 };
    }(e26);
    return { ArrayExpression: t4, ArrayPattern: t4 };
  }
  function r2(t4) {
    var r3 = o2.getTokenBefore(t4, { includeComments: true });
    e25.report({ loc: { start: r3.loc.end, end: t4.loc.start }, messageId: "unexpectedLineBreak", fix: function(e26) {
      if (LA.isCommentToken(r3)) return null;
      if (!LA.isTokenOnSameLine(r3, t4)) return e26.replaceTextRange([r3.range[1], t4.range[0]], " ");
      var n3 = o2.getTokenBefore(r3, { includeComments: true });
      return LA.isCommentToken(n3) ? null : e26.replaceTextRange([n3.range[1], r3.range[0]], "");
    } });
  }
  function n2(t4) {
    var r3 = o2.getTokenBefore(t4, { includeComments: true });
    e25.report({ loc: { start: r3.loc.end, end: t4.loc.start }, messageId: "missingLineBreak", fix: function(e26) {
      return e26.replaceTextRange([r3.range[1], t4.range[0]], "\n");
    } });
  }
  function i2(i3) {
    var a3 = i3.elements, s2 = t3(e25.options[0])[i3.type], u2 = false;
    s2.multiline && (u2 = a3.filter(function(e26) {
      return null !== e26;
    }).some(function(e26) {
      return e26.loc.start.line !== e26.loc.end.line;
    }));
    var c2 = i3.elements.map(function(e26, t4) {
      var r3 = a3[t4 - 1];
      if (0 === t4 || null === e26 || null === r3) return false;
      var n3 = o2.getFirstTokenBetween(r3, e26, LA.isCommaToken), i4 = o2.getTokenBefore(n3), s3 = o2.getTokenAfter(n3);
      return !LA.isTokenOnSameLine(i4, s3);
    }).filter(function(e26) {
      return true === e26;
    }).length, l2 = a3.length >= s2.minItems || s2.multiline && u2 || s2.consistent && 0 < c2 && c2 < i3.elements.length;
    a3.forEach(function(e26, t4) {
      var i4 = a3[t4 - 1];
      if (0 !== t4 && null !== e26 && null !== i4) {
        var s3 = o2.getFirstTokenBetween(i4, e26, LA.isCommaToken), u3 = o2.getTokenBefore(s3), c3 = o2.getTokenAfter(s3);
        l2 ? LA.isTokenOnSameLine(u3, c3) && n2(c3) : !LA.isTokenOnSameLine(u3, c3) && r2(c3);
      }
    });
  }
  var a2 = Number.POSITIVE_INFINITY, o2 = e25.getSourceCode();
  return { ArrayPattern: i2, ArrayExpression: i2 };
} };
var QA = { meta: { type: "suggestion", docs: { description: "require braces around arrow function bodies", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/arrow-body-style" }, schema: { anyOf: [{ type: "array", items: [{ enum: ["always", "never"] }], minItems: 0, maxItems: 1 }, { type: "array", items: [{ enum: ["as-needed"] }, { type: "object", properties: { requireReturnForObjectLiteral: { type: "boolean" } }, additionalProperties: false }], minItems: 0, maxItems: 2 }] }, fixable: "code", messages: { unexpectedOtherBlock: "Unexpected block statement surrounding arrow body.", unexpectedEmptyBlock: "Unexpected block statement surrounding arrow body; put a value of `undefined` immediately after the `=>`.", unexpectedObjectBlock: "Unexpected block statement surrounding arrow body; parenthesize the returned value and move it immediately after the `=>`.", unexpectedSingleBlock: "Unexpected block statement surrounding arrow body; move the returned value immediately after the `=>`.", expectedBlock: "Expected block statement surrounding arrow body." } }, create: function(e25) {
  var t3 = e25.options, r2 = "always" === t3[0], n2 = !t3[0] || "as-needed" === t3[0], i2 = "never" === t3[0], a2 = t3[1] && t3[1].requireReturnForObjectLiteral, o2 = e25.getSourceCode();
  return { "ArrowFunctionExpression:exit": function(t4) {
    var s2 = t4.body;
    if ("BlockStatement" === s2.type) {
      var u2, c2 = s2.body;
      if (1 !== c2.length && !i2) return;
      if (n2 && a2 && "ReturnStatement" === c2[0].type && c2[0].argument && "ObjectExpression" === c2[0].argument.type) return;
      if (i2 || n2 && "ReturnStatement" === c2[0].type) u2 = 0 === c2.length ? "unexpectedEmptyBlock" : 1 < c2.length ? "unexpectedOtherBlock" : null === c2[0].argument ? "unexpectedSingleBlock" : LA.isOpeningBraceToken(o2.getFirstToken(c2[0], { skip: 1 })) ? "unexpectedObjectBlock" : "unexpectedSingleBlock", e25.report({ node: t4, loc: s2.loc.start, messageId: u2, fix: function(e26) {
        var t5 = [];
        if (1 !== c2.length || "ReturnStatement" !== c2[0].type || !c2[0].argument || function(e27) {
          return e27 && "Punctuator" === e27.type && /^[\(\+\x2D\/\[`]/.test(e27.value);
        }(o2.getTokenAfter(s2))) return t5;
        var r3 = o2.getFirstToken(s2), n3 = o2.getLastToken(s2), i3 = o2.getFirstToken(c2[0], 1), a3 = o2.getLastToken(c2[0]);
        return o2.commentsExistBetween(r3, i3) || o2.commentsExistBetween(a3, n3) ? t5.push(e26.remove(r3), e26.remove(n3), e26.remove(o2.getTokenAfter(r3))) : t5.push(e26.removeRange([r3.range[0], i3.range[0]]), e26.removeRange([a3.range[1], n3.range[1]])), (LA.isOpeningBraceToken(i3) || "SequenceExpression" === c2[0].argument.type) && t5.push(e26.insertTextBefore(i3, "("), e26.insertTextAfter(a3, ")")), LA.isSemicolonToken(a3) && t5.push(e26.remove(a3)), t5;
      } });
    } else (r2 || n2 && a2 && "ObjectExpression" === s2.type) && e25.report({ node: t4, loc: s2.loc.start, messageId: "expectedBlock", fix: function(e26) {
      var r3 = [], n3 = o2.getTokenBefore(s2, LA.isArrowToken), i3 = o2.getTokenAfter(n3), a3 = o2.getLastToken(t4), u3 = LA.isOpeningParenToken(i3) && LA.isOpeningBraceToken(o2.getTokenAfter(i3));
      return r3.push(e26.insertTextBefore(i3, "{return "), e26.insertTextAfter(a3, "}")), u3 && r3.push(e26.remove(i3), e26.remove(function(e27) {
        for (var t5 = o2.getNodeByRangeIndex(e27.range[1]); !LA.isParenthesised(o2, t5); ) t5 = t5.parent;
        return o2.getTokenAfter(t5);
      }(i3))), r3;
    } });
  } };
} };
function XA(e25) {
  return { start: e25.params[0].loc.start, end: e25.params[e25.params.length - 1].loc.end };
}
var YA = { meta: { type: "layout", docs: { description: "require parentheses around arrow function arguments", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/arrow-parens" }, fixable: "code", schema: [{ enum: ["always", "as-needed"] }, { type: "object", properties: { requireForBlockBody: { type: "boolean", default: false } }, additionalProperties: false }], messages: { unexpectedParens: "Unexpected parentheses around single function argument.", expectedParens: "Expected parentheses around arrow function argument.", unexpectedParensInline: "Unexpected parentheses around single function argument having a body with no curly braces.", expectedParensBlock: "Expected parentheses around arrow function argument having a body with curly braces." } }, create: function(e25) {
  var t3 = "as-needed" === e25.options[0], r2 = t3 && e25.options[1] && true === e25.options[1].requireForBlockBody, n2 = e25.getSourceCode();
  return { ArrowFunctionExpression: function(i2) {
    function a2(e26) {
      var t4 = n2.getTokenAfter(s2), r3 = n2.getTokenAfter(t4, LA.isClosingParenToken), i3 = o2 ? n2.getTokenBefore(s2) : null, a3 = i3 && i3.range[1] === s2.range[0];
      return e26.replaceTextRange([s2.range[0], r3.range[1]], "".concat(a3 ? " " : "").concat(t4.value));
    }
    var o2 = i2.async, s2 = n2.getFirstToken(i2, o2 ? 1 : 0);
    !r2 || 1 !== i2.params.length || "Identifier" !== i2.params[0].type || i2.params[0].typeAnnotation || "BlockStatement" === i2.body.type || i2.returnType ? r2 && "BlockStatement" === i2.body.type ? LA.isOpeningParenToken(s2) || e25.report({ node: i2, messageId: "expectedParensBlock", loc: XA(i2), fix: function(e26) {
      return e26.replaceText(s2, "(".concat(s2.value, ")"));
    } }) : !t3 || 1 !== i2.params.length || "Identifier" !== i2.params[0].type || i2.params[0].typeAnnotation || i2.returnType ? "Identifier" === s2.type && ")" !== n2.getTokenAfter(s2).value && e25.report({ node: i2, messageId: "expectedParens", loc: XA(i2), fix: function(e26) {
      return e26.replaceText(s2, "(".concat(s2.value, ")"));
    } }) : LA.isOpeningParenToken(s2) && e25.report({ node: i2, messageId: "unexpectedParens", loc: XA(i2), fix: a2 }) : LA.isOpeningParenToken(s2) && e25.report({ node: i2, messageId: "unexpectedParensInline", loc: XA(i2), fix: a2 });
  } };
} };
var ZA = { meta: { type: "layout", docs: { description: "enforce consistent spacing before and after the arrow in arrow functions", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/arrow-spacing" }, fixable: "whitespace", schema: [{ type: "object", properties: { before: { type: "boolean", default: true }, after: { type: "boolean", default: true } }, additionalProperties: false }], messages: { expectedBefore: "Missing space before =>.", unexpectedBefore: "Unexpected space before =>.", expectedAfter: "Missing space after =>.", unexpectedAfter: "Unexpected space after =>." } }, create: function(e25) {
  function t3(e26) {
    var t4 = n2.getTokenBefore(e26.body, LA.isArrowToken);
    return { before: n2.getTokenBefore(t4), arrow: t4, after: n2.getTokenAfter(t4) };
  }
  var r2 = Object.assign({}, e25.options[0]);
  r2.before = false !== r2.before, r2.after = false !== r2.after;
  var n2 = e25.getSourceCode();
  return { ArrowFunctionExpression: function(n3) {
    var i2 = t3(n3), a2 = function(e26) {
      return { before: e26.arrow.range[0] - e26.before.range[1], after: e26.after.range[0] - e26.arrow.range[1] };
    }(i2);
    r2.before ? 0 === a2.before && e25.report({ node: i2.before, messageId: "expectedBefore", fix: function(e26) {
      return e26.insertTextBefore(i2.arrow, " ");
    } }) : 0 < a2.before && e25.report({ node: i2.before, messageId: "unexpectedBefore", fix: function(e26) {
      return e26.removeRange([i2.before.range[1], i2.arrow.range[0]]);
    } }), r2.after ? 0 === a2.after && e25.report({ node: i2.after, messageId: "expectedAfter", fix: function(e26) {
      return e26.insertTextAfter(i2.arrow, " ");
    } }) : 0 < a2.after && e25.report({ node: i2.after, messageId: "unexpectedAfter", fix: function(e26) {
      return e26.removeRange([i2.arrow.range[1], i2.after.range[0]]);
    } });
  } };
} };
var ew = { meta: { type: "layout", docs: { description: "disallow or enforce spaces inside of blocks after opening block and before closing block", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/block-spacing" }, fixable: "whitespace", schema: [{ enum: ["always", "never"] }], messages: { missing: "Requires a space {{location}} '{{token}}'.", extra: "Unexpected space(s) {{location}} '{{token}}'." } }, create: function(e25) {
  function t3(e26, t4) {
    return !LA.isTokenOnSameLine(e26, t4) || a2.isSpaceBetweenTokens(e26, t4) === n2;
  }
  function r2(r3) {
    var o2 = function(e26) {
      return "SwitchStatement" === e26.type ? 0 < e26.cases.length ? a2.getTokenBefore(e26.cases[0]) : a2.getLastToken(e26, 1) : a2.getFirstToken(e26);
    }(r3), s2 = a2.getLastToken(r3), u2 = a2.getTokenAfter(o2, { includeComments: true }), c2 = a2.getTokenBefore(s2, { includeComments: true });
    "Punctuator" === o2.type && "{" === o2.value && "Punctuator" === s2.type && "}" === s2.value && u2 !== s2 && (n2 || "Line" !== u2.type) && (!t3(o2, u2) && e25.report({ node: r3, loc: o2.loc.start, messageId: i2, data: { location: "after", token: o2.value }, fix: function(e26) {
      return n2 ? e26.insertTextBefore(u2, " ") : e26.removeRange([o2.range[1], u2.range[0]]);
    } }), !t3(c2, s2) && e25.report({ node: r3, loc: s2.loc.start, messageId: i2, data: { location: "before", token: s2.value }, fix: function(e26) {
      return n2 ? e26.insertTextAfter(c2, " ") : e26.removeRange([c2.range[1], s2.range[0]]);
    } }));
  }
  var n2 = "never" !== e25.options[0], i2 = n2 ? "missing" : "extra", a2 = e25.getSourceCode();
  return { BlockStatement: r2, SwitchStatement: r2 };
} };
var tw = { meta: { type: "layout", docs: { description: "enforce consistent brace style for blocks", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/brace-style" }, schema: [{ enum: ["1tbs", "stroustrup", "allman"] }, { type: "object", properties: { allowSingleLine: { type: "boolean", default: false } }, additionalProperties: false }], fixable: "whitespace", messages: { nextLineOpen: "Opening curly brace does not appear on the same line as controlling statement.", sameLineOpen: "Opening curly brace appears on the same line as controlling statement.", blockSameLine: "Statement inside of curly braces should be on next line.", nextLineClose: "Closing curly brace does not appear on the same line as the subsequent block.", singleLineClose: "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.", sameLineClose: "Closing curly brace appears on the same line as the subsequent block." } }, create: function(e25) {
  function t3(e26, t4) {
    var r3 = [e26.range[1], t4.range[0]];
    return o2.text.slice(r3[0], r3[1]).trim() ? null : function(e27) {
      return e27.replaceTextRange(r3, " ");
    };
  }
  function r2(r3, n3) {
    var s2 = o2.getTokenBefore(r3), u2 = o2.getTokenAfter(r3), c2 = o2.getTokenBefore(n3), l2 = a2.allowSingleLine && LA.isTokenOnSameLine(r3, n3);
    "allman" === i2 || LA.isTokenOnSameLine(s2, r3) || e25.report({ node: r3, messageId: "nextLineOpen", fix: t3(s2, r3) }), "allman" === i2 && LA.isTokenOnSameLine(s2, r3) && !l2 && e25.report({ node: r3, messageId: "sameLineOpen", fix: function(e26) {
      return e26.insertTextBefore(r3, "\n");
    } }), LA.isTokenOnSameLine(r3, u2) && u2 !== n3 && !l2 && e25.report({ node: r3, messageId: "blockSameLine", fix: function(e26) {
      return e26.insertTextAfter(r3, "\n");
    } }), c2 !== r3 && !l2 && LA.isTokenOnSameLine(c2, n3) && e25.report({ node: n3, messageId: "singleLineClose", fix: function(e26) {
      return e26.insertTextBefore(n3, "\n");
    } });
  }
  function n2(r3) {
    var n3 = o2.getTokenAfter(r3);
    "1tbs" !== i2 || LA.isTokenOnSameLine(r3, n3) || e25.report({ node: r3, messageId: "nextLineClose", fix: t3(r3, n3) }), "1tbs" !== i2 && LA.isTokenOnSameLine(r3, n3) && e25.report({ node: r3, messageId: "sameLineClose", fix: function(e26) {
      return e26.insertTextAfter(r3, "\n");
    } });
  }
  var i2 = e25.options[0] || "1tbs", a2 = e25.options[1] || {}, o2 = e25.getSourceCode();
  return { BlockStatement: function(e26) {
    LA.STATEMENT_LIST_PARENTS.has(e26.parent.type) || r2(o2.getFirstToken(e26), o2.getLastToken(e26));
  }, ClassBody: function(e26) {
    r2(o2.getFirstToken(e26), o2.getLastToken(e26));
  }, SwitchStatement: function(e26) {
    var t4 = o2.getLastToken(e26);
    r2(o2.getTokenBefore(e26.cases.length ? e26.cases[0] : t4), t4);
  }, IfStatement: function(e26) {
    "BlockStatement" === e26.consequent.type && e26.alternate && n2(o2.getLastToken(e26.consequent));
  }, TryStatement: function(e26) {
    n2(o2.getLastToken(e26.block)), e26.handler && e26.finalizer && n2(o2.getLastToken(e26.handler.body));
  } };
} };
var rw = { meta: { type: "suggestion", docs: { description: "enforce camelcase naming convention", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/camelcase" }, schema: [{ type: "object", properties: { ignoreDestructuring: { type: "boolean", default: false }, ignoreImports: { type: "boolean", default: false }, properties: { enum: ["always", "never"] }, allow: { type: "array", items: [{ type: "string" }], minItems: 0, uniqueItems: true } }, additionalProperties: false }], messages: { notCamelCase: "Identifier '{{name}}' is not in camel case." } }, create: function(e25) {
  function t3(e26) {
    return e26.includes("_") && e26 !== e26.toUpperCase();
  }
  function r2(e26) {
    return u2.some(function(t4) {
      return e26 === t4 || e26.match(new RegExp(t4, "u"));
    });
  }
  function n2(t4) {
    c2.includes(t4) || (c2.push(t4), e25.report({ node: t4, messageId: "notCamelCase", data: { name: t4.name } }));
  }
  var i2 = e25.options[0] || {}, a2 = i2.properties || "", o2 = i2.ignoreDestructuring, s2 = i2.ignoreImports, u2 = i2.allow || [];
  "always" !== a2 && "never" !== a2 && (a2 = "always");
  var c2 = [], l2 = /* @__PURE__ */ new Set(["CallExpression", "NewExpression"]);
  return { Identifier: function(e26) {
    var i3 = e26.name, u3 = t3(i3.replace(/^_+|_+$/g, "")), c3 = "MemberExpression" === e26.parent.type ? e26.parent.parent : e26.parent;
    if (!r2(i3)) if ("MemberExpression" === e26.parent.type) {
      if ("never" === a2) return;
      "Identifier" === e26.parent.object.type && e26.parent.object.name === e26.name && u3 ? n2(e26) : "AssignmentExpression" === c3.type && u3 && ("MemberExpression" !== c3.right.type || "MemberExpression" === c3.left.type && c3.left.property.name === e26.name) && n2(e26);
    } else if ("Property" === e26.parent.type || "AssignmentPattern" === e26.parent.type) {
      if (e26.parent.parent && "ObjectPattern" === e26.parent.parent.type) {
        e26.parent.shorthand && e26.parent.value.left && u3 && n2(e26);
        var p2 = e26.parent.key.name === e26.parent.value.name;
        if (t3(i3) && e26.parent.computed && n2(e26), e26.parent.key === e26 && e26.parent.value !== e26) return;
        e26.parent.value.name && u3 && (!p2 || !o2) && n2(e26);
      }
      if ("never" === a2 || o2 && function(e27) {
        for (var t4 = e27; t4; ) {
          var r3 = t4.parent;
          if (r3 && "Property" === r3.type && r3.computed && r3.key === t4) return false;
          if ("ObjectPattern" === t4.type) return true;
          t4 = r3;
        }
        return false;
      }(e26)) return;
      !u3 || l2.has(c3.type) || e26.parent.right === e26 || n2(e26);
    } else if (["ImportSpecifier", "ImportNamespaceSpecifier", "ImportDefaultSpecifier"].includes(e26.parent.type)) {
      if ("ImportSpecifier" === e26.parent.type && s2) return;
      e26.parent.local && e26.parent.local.name === e26.name && u3 && n2(e26);
    } else u3 && !l2.has(c3.type) && n2(e26);
  } };
} };
var nw = /[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|(?:\uD800(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF])|(?:\uD801(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67])|(?:\uD802(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91])|(?:\uD803(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDC48])|(?:\uD804(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61])|(?:\uD805(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA])|(?:\uD806(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8])|(?:\uD808(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDF98])|(?:[\uD80C\uD840-\uD868\uD86A-\uD86C](?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])|(?:\uD80D(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDC2E])|(?:\uD81A(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F])|(?:\uD81B(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDF00-\uDF44\uDF50\uDF93-\uDF9F])|(?:\uD82C(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDC00\uDC01])|(?:\uD82F(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99])|(?:\uD835(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB])|(?:\uD83A(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDCC4])|(?:\uD83B(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB])|(?:\uD869(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDED6\uDF00-\uDFFF])|(?:\uD86D(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDF34\uDF40-\uDFFF])|(?:\uD86E(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDC1D])|(?:\uD87E(?![\uDC00-\uDFFF]))(?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDE1D])/;
var iw = LA.COMMENTS_IGNORE_PATTERN;
var aw = /[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]/g;
var ow = /^[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*(?:[\0-\x08\x0E-\x1F!"\$-\.0-9;->@-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+:\/\/(?:[\0-"\$->@-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/;
var sw = { type: "object", properties: { ignorePattern: { type: "string" }, ignoreInlineComments: { type: "boolean" }, ignoreConsecutiveComments: { type: "boolean" } }, additionalProperties: false };
var uw = { ignorePattern: "", ignoreInlineComments: false, ignoreConsecutiveComments: false };
function cw(e25, t3) {
  return Object.assign({}, uw, e25[t3] || e25);
}
var lw = { meta: { type: "suggestion", docs: { description: "enforce or disallow capitalization of the first letter of a comment", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/capitalized-comments" }, fixable: "code", schema: [{ enum: ["always", "never"] }, { oneOf: [sw, { type: "object", properties: { line: sw, block: sw }, additionalProperties: false }] }], messages: { unexpectedLowercaseComment: "Comments should not begin with a lowercase character.", unexpectedUppercaseComment: "Comments should not begin with an uppercase character." } }, create: function(e25) {
  function t3(e26) {
    var t4 = s2.getTokenBefore(e26, { includeComments: true }), r3 = s2.getTokenAfter(e26, { includeComments: true });
    return !(!t4 || !r3 || e26.loc.start.line !== t4.loc.end.line || e26.loc.end.line !== r3.loc.start.line);
  }
  function r2(e26) {
    var t4 = s2.getTokenBefore(e26, { includeComments: true });
    return !(!t4 || -1 === ["Block", "Line"].indexOf(t4.type));
  }
  function n2(e26, n3) {
    if (iw.test(e26.value)) return true;
    var i3 = e26.value.replace(/\*/g, "");
    if (n3.ignorePatternRegExp && n3.ignorePatternRegExp.test(i3)) return true;
    if (n3.ignoreInlineComments && t3(e26)) return true;
    if (n3.ignoreConsecutiveComments && r2(e26)) return true;
    if (ow.test(i3)) return true;
    var o3 = i3.replace(aw, "");
    if (0 === o3.length) return true;
    var s3 = o3[0];
    if (!nw.test(s3)) return true;
    var u2 = s3 !== s3.toLocaleLowerCase(), c2 = s3 !== s3.toLocaleUpperCase();
    return !("always" === a2 && c2 || "never" === a2 && u2);
  }
  function i2(t4) {
    var r3 = o2[t4.type];
    if (!n2(t4, r3)) {
      var i3 = "always" === a2 ? "unexpectedLowercaseComment" : "unexpectedUppercaseComment";
      e25.report({ node: null, loc: t4.loc, messageId: i3, fix: function(e26) {
        var r4 = t4.value.match(nw);
        return e26.replaceTextRange([t4.range[0] + r4.index + 2, t4.range[0] + r4.index + 3], "always" === a2 ? r4[0].toLocaleUpperCase() : r4[0].toLocaleLowerCase());
      } });
    }
  }
  var a2 = e25.options[0] || "always", o2 = function() {
    var e26 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    return { Line: cw(e26, "line"), Block: cw(e26, "block") };
  }(e25.options[1]), s2 = e25.getSourceCode();
  return function(e26) {
    Object.keys(e26).forEach(function(t4) {
      var r3 = e26[t4].ignorePattern;
      if (r3) {
        var n3 = RegExp("^\\s*(?:".concat(r3, ")"), "u");
        e26[t4].ignorePatternRegExp = n3;
      }
    });
  }(o2), { Program: function() {
    s2.getAllComments().filter(function(e26) {
      return "Shebang" !== e26.type;
    }).forEach(i2);
  } };
} };
var pw = { meta: { type: "suggestion", docs: { description: "enforce that class methods utilize `this`", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/class-methods-use-this" }, schema: [{ type: "object", properties: { exceptMethods: { type: "array", items: { type: "string" } } }, additionalProperties: false }], messages: { missingThis: "Expected 'this' to be used by class {{name}}." } }, create: function(e25) {
  function t3() {
    s2.push(false);
  }
  function r2(e26) {
    return function(e27) {
      return !e27.static && "constructor" !== e27.kind && "MethodDefinition" === e27.type;
    }(e26) && (e26.computed || !o2.has(e26.key.name));
  }
  function n2(t4) {
    var n3 = s2.pop();
    r2(t4.parent) && !n3 && e25.report({ node: t4, messageId: "missingThis", data: { name: LA.getFunctionNameWithKind(t4) } });
  }
  function i2() {
    s2.length && (s2[s2.length - 1] = true);
  }
  var a2 = Object.assign({}, e25.options[0]), o2 = new Set(a2.exceptMethods || []), s2 = [];
  return { FunctionDeclaration: t3, "FunctionDeclaration:exit": n2, FunctionExpression: t3, "FunctionExpression:exit": n2, ThisExpression: i2, Super: i2 };
} };
var fw = Object.freeze({ arrays: "never", objects: "never", imports: "never", exports: "never", functions: "never" });
var hw = { meta: { type: "layout", docs: { description: "require or disallow trailing commas", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/comma-dangle" }, fixable: "code", schema: { definitions: { value: { enum: ["always-multiline", "always", "never", "only-multiline"] }, valueWithIgnore: { enum: ["always-multiline", "always", "ignore", "never", "only-multiline"] } }, type: "array", items: [{ oneOf: [{ $ref: "#/definitions/value" }, { type: "object", properties: { arrays: { $ref: "#/definitions/valueWithIgnore" }, objects: { $ref: "#/definitions/valueWithIgnore" }, imports: { $ref: "#/definitions/valueWithIgnore" }, exports: { $ref: "#/definitions/valueWithIgnore" }, functions: { $ref: "#/definitions/valueWithIgnore" } }, additionalProperties: false }] }] }, messages: { unexpected: "Unexpected trailing comma.", missing: "Missing trailing comma." } }, create: function(e25) {
  function t3(e26) {
    switch (e26.type) {
      case "ObjectExpression":
      case "ObjectPattern":
        return Fy.lodash.last(e26.properties);
      case "ArrayExpression":
      case "ArrayPattern":
        return Fy.lodash.last(e26.elements);
      case "ImportDeclaration":
      case "ExportNamedDeclaration":
        return Fy.lodash.last(e26.specifiers);
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "ArrowFunctionExpression":
        return Fy.lodash.last(e26.params);
      case "CallExpression":
      case "NewExpression":
        return Fy.lodash.last(e26.arguments);
      default:
        return null;
    }
  }
  function r2(e26, t4) {
    switch (e26.type) {
      case "ObjectExpression":
      case "ArrayExpression":
      case "CallExpression":
      case "NewExpression":
        return u2.getLastToken(e26, 1);
      default:
        var r3 = u2.getTokenAfter(t4);
        return LA.isCommaToken(r3) ? r3 : u2.getLastToken(t4);
    }
  }
  function n2(e26) {
    var n3 = t3(e26);
    if (!n3) return false;
    var i2 = r2(e26, n3);
    return u2.getTokenAfter(i2).loc.end.line !== i2.loc.end.line;
  }
  function a2(n3) {
    var i2 = t3(n3);
    if (i2 && ("ImportDeclaration" !== n3.type || "ImportSpecifier" === i2.type)) {
      var a3 = r2(n3, i2);
      LA.isCommaToken(a3) && e25.report({ node: i2, loc: a3.loc, messageId: "unexpected", fix: function(e26) {
        return e26.remove(a3);
      } });
    }
  }
  function o2(n3) {
    var i2 = t3(n3);
    if (i2 && ("ImportDeclaration" !== n3.type || "ImportSpecifier" === i2.type)) if (function(e26) {
      return "RestElement" !== e26.type && "RestProperty" !== e26.type && "ExperimentalRestProperty" !== e26.type;
    }(i2)) {
      var o3 = r2(n3, i2);
      "," !== o3.value && e25.report({ node: i2, loc: { start: o3.loc.end, end: LA.getNextLocation(u2, o3.loc.end) }, messageId: "missing", fix: function(e26) {
        return e26.insertTextAfter(o3, ",");
      } });
    } else a2(n3);
  }
  var s2 = function(e26, t4) {
    return "string" == typeof e26 ? { arrays: e26, objects: e26, imports: e26, exports: e26, functions: !t4 || 8 > t4 ? "ignore" : e26 } : "object" == i(e26) && null !== e26 ? { arrays: e26.arrays || fw.arrays, objects: e26.objects || fw.objects, imports: e26.imports || fw.imports, exports: e26.exports || fw.exports, functions: e26.functions || fw.functions } : fw;
  }(e25.options[0], e25.parserOptions.ecmaVersion), u2 = e25.getSourceCode(), c2 = { always: o2, "always-multiline": function(e26) {
    n2(e26) ? o2(e26) : a2(e26);
  }, "only-multiline": function(e26) {
    n2(e26) || a2(e26);
  }, never: a2, ignore: Fy.lodash.noop };
  return { ObjectExpression: c2[s2.objects], ObjectPattern: c2[s2.objects], ArrayExpression: c2[s2.arrays], ArrayPattern: c2[s2.arrays], ImportDeclaration: c2[s2.imports], ExportNamedDeclaration: c2[s2.exports], FunctionDeclaration: c2[s2.functions], FunctionExpression: c2[s2.functions], ArrowFunctionExpression: c2[s2.functions], CallExpression: c2[s2.functions], NewExpression: c2[s2.functions] };
} };
var dw = { meta: { type: "layout", docs: { description: "enforce consistent spacing before and after commas", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/comma-spacing" }, fixable: "whitespace", schema: [{ type: "object", properties: { before: { type: "boolean", default: false }, after: { type: "boolean", default: true } }, additionalProperties: false }], messages: { missing: "A space is required {{loc}} ','.", unexpected: "There should be no space {{loc}} ','." } }, create: function(e25) {
  function t3(t4, r3, n3) {
    e25.report({ node: t4, fix: function(e26) {
      return o2[r3] ? "before" === r3 ? e26.insertTextBefore(t4, " ") : e26.insertTextAfter(t4, " ") : ("before" === r3 ? (i3 = n3.range[1], a3 = t4.range[0]) : (i3 = t4.range[1], a3 = n3.range[0]), e26.replaceTextRange([i3, a3], ""));
      var i3, a3;
    }, messageId: o2[r3] ? "missing" : "unexpected", data: { loc: r3 } });
  }
  function r2(e26, r3) {
    e26.left && LA.isTokenOnSameLine(e26.left, e26.comma) && o2.before !== i2.isSpaceBetweenTokens(e26.left, e26.comma) && t3(r3, "before", e26.left), e26.right && LA.isClosingParenToken(e26.right) || e26.right && !o2.after && "Line" === e26.right.type || e26.right && LA.isTokenOnSameLine(e26.comma, e26.right) && o2.after !== i2.isSpaceBetweenTokens(e26.comma, e26.right) && t3(r3, "after", e26.right);
  }
  function n2(e26) {
    var t4 = i2.getFirstToken(e26);
    e26.elements.forEach(function(e27) {
      var r3;
      null === e27 ? (r3 = i2.getTokenAfter(t4), LA.isCommaToken(r3) && s2.push(r3)) : r3 = i2.getTokenAfter(e27), t4 = r3;
    });
  }
  var i2 = e25.getSourceCode(), a2 = i2.tokensAndComments, o2 = { before: !!e25.options[0] && e25.options[0].before, after: !e25.options[0] || e25.options[0].after }, s2 = [];
  return { "Program:exit": function() {
    a2.forEach(function(e26, t4) {
      if (LA.isCommaToken(e26) && (!e26 || "JSXText" !== e26.type)) {
        var n3 = a2[t4 - 1], i3 = a2[t4 + 1];
        r2({ comma: e26, left: LA.isCommaToken(n3) || -1 < s2.indexOf(e26) ? null : n3, right: LA.isCommaToken(i3) ? null : i3 }, e26);
      }
    });
  }, ArrayExpression: n2, ArrayPattern: n2 };
} };
var mw = { meta: { type: "layout", docs: { description: "enforce consistent comma style", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/comma-style" }, fixable: "code", schema: [{ enum: ["first", "last"] }, { type: "object", properties: { exceptions: { type: "object", additionalProperties: { type: "boolean" } } }, additionalProperties: false }], messages: { unexpectedLineBeforeAndAfterComma: "Bad line breaking before and after ','.", expectedCommaFirst: "',' should be placed first.", expectedCommaLast: "',' should be placed last." } }, create: function(e25) {
  function t3(e26, t4, r3, n3) {
    var i3 = a2.text.slice(t4.range[1], r3.range[0]) + a2.text.slice(r3.range[1], n3.range[0]), o3 = [t4.range[1], n3.range[0]];
    return function(t5) {
      return t5.replaceTextRange(o3, function(e27, t6) {
        return "between" === e27 ? ",".concat(t6.replace(LA.LINEBREAK_MATCHER, "")) : "first" === e27 ? "".concat(t6, ",") : "last" === e27 ? ",".concat(t6) : "";
      }(e26, i3));
    };
  }
  function r2(r3, n3, o3, s3) {
    if (LA.isTokenOnSameLine(n3, o3) && LA.isTokenOnSameLine(r3, n3)) ;
    else if (LA.isTokenOnSameLine(n3, o3) || LA.isTokenOnSameLine(r3, n3)) "first" !== i2 || LA.isTokenOnSameLine(n3, o3) ? "last" === i2 && LA.isTokenOnSameLine(n3, o3) && e25.report({ node: s3, loc: { line: n3.loc.end.line, column: n3.loc.end.column }, messageId: "expectedCommaLast", fix: t3(i2, r3, n3, o3) }) : e25.report({ node: s3, messageId: "expectedCommaFirst", fix: t3(i2, r3, n3, o3) });
    else {
      var u3 = a2.getCommentsAfter(n3)[0], c3 = u3 && "Block" === u3.type && LA.isTokenOnSameLine(n3, u3) ? i2 : "between";
      e25.report({ node: s3, loc: { line: n3.loc.end.line, column: n3.loc.start.column }, messageId: "unexpectedLineBeforeAndAfterComma", fix: t3(c3, r3, n3, o3) });
    }
  }
  function n2(e26, t4) {
    var n3 = e26[t4], i3 = "ArrayExpression" === e26.type || "ArrayPattern" === e26.type;
    if (1 < n3.length || i3) {
      var o3 = a2.getFirstToken(e26);
      if (n3.forEach(function(e27) {
        var t5 = e27 ? a2.getTokenBefore(e27) : o3, n4 = e27 ? a2.getFirstToken(e27) : a2.getTokenAfter(t5);
        if (LA.isCommaToken(t5) && r2(o3, t5, n4, e27 || n4), e27) {
          var i4 = a2.getTokenAfter(e27, LA.isNotClosingParenToken);
          o3 = i4 ? a2.getTokenBefore(i4) : a2.ast.tokens[a2.ast.tokens.length - 1];
        }
      }), i3) {
        var s3 = a2.getLastToken(e26), u3 = a2.getTokenBefore(s3);
        LA.isCommaToken(u3) && r2(a2.getTokenBefore(u3), u3, s3, s3);
      }
    }
  }
  var i2 = e25.options[0] || "last", a2 = e25.getSourceCode(), o2 = { ArrayPattern: true, ArrowFunctionExpression: true, CallExpression: true, FunctionDeclaration: true, FunctionExpression: true, ImportDeclaration: true, ObjectPattern: true, NewExpression: true };
  if (2 === e25.options.length && Object.prototype.hasOwnProperty.call(e25.options[1], "exceptions")) for (var s2 = Object.keys(e25.options[1].exceptions), u2 = 0; u2 < s2.length; u2++) o2[s2[u2]] = e25.options[1].exceptions[s2[u2]];
  var c2 = {};
  return o2.VariableDeclaration || (c2.VariableDeclaration = function(e26) {
    n2(e26, "declarations");
  }), o2.ObjectExpression || (c2.ObjectExpression = function(e26) {
    n2(e26, "properties");
  }), o2.ObjectPattern || (c2.ObjectPattern = function(e26) {
    n2(e26, "properties");
  }), o2.ArrayExpression || (c2.ArrayExpression = function(e26) {
    n2(e26, "elements");
  }), o2.ArrayPattern || (c2.ArrayPattern = function(e26) {
    n2(e26, "elements");
  }), o2.FunctionDeclaration || (c2.FunctionDeclaration = function(e26) {
    n2(e26, "params");
  }), o2.FunctionExpression || (c2.FunctionExpression = function(e26) {
    n2(e26, "params");
  }), o2.ArrowFunctionExpression || (c2.ArrowFunctionExpression = function(e26) {
    n2(e26, "params");
  }), o2.CallExpression || (c2.CallExpression = function(e26) {
    n2(e26, "arguments");
  }), o2.ImportDeclaration || (c2.ImportDeclaration = function(e26) {
    n2(e26, "specifiers");
  }), o2.NewExpression || (c2.NewExpression = function(e26) {
    n2(e26, "arguments");
  }), c2;
} };
var gw = { meta: { type: "suggestion", docs: { description: "enforce a maximum cyclomatic complexity allowed in a program", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/complexity" }, schema: [{ oneOf: [{ type: "integer", minimum: 0 }, { type: "object", properties: { maximum: { type: "integer", minimum: 0 }, max: { type: "integer", minimum: 0 } }, additionalProperties: false }] }], messages: { complex: "{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}." } }, create: function(e25) {
  function t3() {
    s2.push(1);
  }
  function r2(t4) {
    var r3 = Fy.lodash.upperFirst(LA.getFunctionNameWithKind(t4)), n3 = s2.pop();
    n3 > o2 && e25.report({ node: t4, messageId: "complex", data: { name: r3, complexity: n3, max: o2 } });
  }
  function n2() {
    s2.length && s2[s2.length - 1]++;
  }
  var a2 = e25.options[0], o2 = 20;
  "object" == i(a2) && (Object.prototype.hasOwnProperty.call(a2, "maximum") || Object.prototype.hasOwnProperty.call(a2, "max")) ? o2 = a2.maximum || a2.max : "number" == typeof a2 && (o2 = a2);
  var s2 = [];
  return { FunctionDeclaration: t3, FunctionExpression: t3, ArrowFunctionExpression: t3, "FunctionDeclaration:exit": r2, "FunctionExpression:exit": r2, "ArrowFunctionExpression:exit": r2, CatchClause: n2, ConditionalExpression: n2, LogicalExpression: n2, ForStatement: n2, ForInStatement: n2, ForOfStatement: n2, IfStatement: n2, SwitchCase: function(e26) {
    e26.test && n2();
  }, WhileStatement: n2, DoWhileStatement: n2 };
} };
var yw = { meta: { type: "layout", docs: { description: "enforce consistent spacing inside computed property brackets", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/computed-property-spacing" }, fixable: "whitespace", schema: [{ enum: ["always", "never"] }, { type: "object", properties: { enforceForClassMembers: { type: "boolean", default: false } }, additionalProperties: false }], messages: { unexpectedSpaceBefore: "There should be no space before '{{tokenValue}}'.", unexpectedSpaceAfter: "There should be no space after '{{tokenValue}}'.", missingSpaceBefore: "A space is required before '{{tokenValue}}'.", missingSpaceAfter: "A space is required after '{{tokenValue}}'." } }, create: function(e25) {
  function t3(t4, r3, n3) {
    e25.report({ node: t4, loc: r3.loc.start, messageId: "unexpectedSpaceAfter", data: { tokenValue: r3.value }, fix: function(e26) {
      return e26.removeRange([r3.range[1], n3.range[0]]);
    } });
  }
  function r2(t4, r3, n3) {
    e25.report({ node: t4, loc: r3.loc.start, messageId: "unexpectedSpaceBefore", data: { tokenValue: r3.value }, fix: function(e26) {
      return e26.removeRange([n3.range[1], r3.range[0]]);
    } });
  }
  function n2(t4, r3) {
    e25.report({ node: t4, loc: r3.loc.start, messageId: "missingSpaceAfter", data: { tokenValue: r3.value }, fix: function(e26) {
      return e26.insertTextAfter(r3, " ");
    } });
  }
  function i2(t4, r3) {
    e25.report({ node: t4, loc: r3.loc.start, messageId: "missingSpaceBefore", data: { tokenValue: r3.value }, fix: function(e26) {
      return e26.insertTextBefore(r3, " ");
    } });
  }
  function a2(e26) {
    return function(a3) {
      if (a3.computed) {
        var u3 = a3[e26], c3 = o2.getTokenBefore(u3, LA.isOpeningBracketToken), l2 = o2.getTokenAfter(c3, { includeComments: true }), p2 = o2.getTokenAfter(u3, LA.isClosingBracketToken), f2 = o2.getTokenBefore(p2, { includeComments: true });
        LA.isTokenOnSameLine(c3, l2) && (s2 ? !o2.isSpaceBetweenTokens(c3, l2) && LA.isTokenOnSameLine(c3, l2) && n2(a3, c3) : o2.isSpaceBetweenTokens(c3, l2) && t3(a3, c3, l2)), LA.isTokenOnSameLine(f2, p2) && (s2 ? !o2.isSpaceBetweenTokens(f2, p2) && LA.isTokenOnSameLine(f2, p2) && i2(a3, p2) : o2.isSpaceBetweenTokens(f2, p2) && r2(a3, p2, f2));
      }
    };
  }
  var o2 = e25.getSourceCode(), s2 = "always" === e25.options[0], u2 = e25.options[1] && e25.options[1].enforceForClassMembers, c2 = { Property: a2("key"), MemberExpression: a2("property") };
  return u2 && (c2.MethodDefinition = a2("key")), c2;
} };
function vw(e25) {
  return !e25.reachable;
}
var xw = { meta: { type: "suggestion", docs: { description: "require `return` statements to either always or never specify values", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/consistent-return" }, schema: [{ type: "object", properties: { treatUndefinedAsUnspecified: { type: "boolean", default: false } }, additionalProperties: false }], messages: { missingReturn: "Expected to return a value at the end of {{name}}.", missingReturnValue: "{{name}} expected a return value.", unexpectedReturnValue: "{{name}} expected no return value." } }, create: function(e25) {
  function t3(t4) {
    var r3, i2;
    !n2.hasReturnValue || n2.codePath.currentSegments.every(vw) || LA.isES5Constructor(t4) || function(e26) {
      return "FunctionExpression" === e26.type && e26.parent && "MethodDefinition" === e26.parent.type && "constructor" === e26.parent.kind;
    }(t4) || ("Program" === t4.type ? (r3 = { line: 1, column: 0 }, i2 = "program") : r3 = "ArrowFunctionExpression" === t4.type ? e25.getSourceCode().getTokenBefore(t4.body, LA.isArrowToken).loc.start : "MethodDefinition" === t4.parent.type || "Property" === t4.parent.type && t4.parent.method ? t4.parent.key.loc.start : (t4.id || t4).loc.start, !i2 && (i2 = LA.getFunctionNameWithKind(t4)), e25.report({ node: t4, loc: r3, messageId: "missingReturn", data: { name: i2 } }));
  }
  var r2 = true === (e25.options[0] || {}).treatUndefinedAsUnspecified, n2 = null;
  return { onCodePathStart: function(e26, t4) {
    n2 = { upper: n2, codePath: e26, hasReturn: false, hasReturnValue: false, messageId: "", node: t4 };
  }, onCodePathEnd: function() {
    n2 = n2.upper;
  }, ReturnStatement: function(t4) {
    var i2 = t4.argument, a2 = !!i2;
    r2 && a2 && (a2 = !function(e26, t5) {
      return "Identifier" === e26.type && e26.name === t5;
    }(i2, "undefined") && "void" !== i2.operator), n2.hasReturn ? n2.hasReturnValue !== a2 && e25.report({ node: t4, messageId: n2.messageId, data: n2.data }) : (n2.hasReturn = true, n2.hasReturnValue = a2, n2.messageId = a2 ? "missingReturnValue" : "unexpectedReturnValue", n2.data = { name: "Program" === n2.node.type ? "Program" : Fy.lodash.upperFirst(LA.getFunctionNameWithKind(n2.node)) });
  }, "Program:exit": t3, "FunctionDeclaration:exit": t3, "FunctionExpression:exit": t3, "ArrowFunctionExpression:exit": t3 };
} };
function bw(e25) {
  return e25.reachable;
}
function Ew(e25) {
  if (!e25) return false;
  switch (e25.type) {
    case "ClassExpression":
    case "FunctionExpression":
    case "ThisExpression":
    case "MemberExpression":
    case "CallExpression":
    case "NewExpression":
    case "YieldExpression":
    case "TaggedTemplateExpression":
    case "MetaProperty":
      return true;
    case "Identifier":
      return "undefined" !== e25.name;
    case "AssignmentExpression":
      return Ew(e25.right);
    case "LogicalExpression":
      return Ew(e25.left) || Ew(e25.right);
    case "ConditionalExpression":
      return Ew(e25.alternate) || Ew(e25.consequent);
    case "SequenceExpression":
      return Ew(e25.expressions[e25.expressions.length - 1]);
    default:
      return false;
  }
}
var Cw = { meta: { type: "problem", docs: { description: "require `super()` calls in constructors", category: "ECMAScript 6", recommended: true, url: "https://eslint.org/docs/rules/constructor-super" }, schema: [], messages: { missingSome: "Lacked a call of 'super()' in some code paths.", missingAll: "Expected to call 'super()'.", duplicate: "Unexpected duplicate 'super()'.", badSuper: "Unexpected 'super()' because 'super' is not a constructor.", unexpected: "Unexpected 'super()'." } }, create: function(e25) {
  function t3(e26) {
    return e26.reachable && i2[e26.id].calledInSomePaths;
  }
  function r2(e26) {
    return !(1 !== e26.nextSegments.length || !e26.nextSegments[0].isLoopedPrevSegment(e26)) || e26.reachable && i2[e26.id].calledInEveryPaths;
  }
  var n2 = null, i2 = /* @__PURE__ */ Object.create(null);
  return { onCodePathStart: function(e26, t4) {
    if (function(e27) {
      return "FunctionExpression" === e27.type && "MethodDefinition" === e27.parent.type && "constructor" === e27.parent.kind;
    }(t4)) {
      var r3 = t4.parent.parent.parent.superClass;
      n2 = { upper: n2, isConstructor: true, hasExtends: !!r3, superIsConstructor: Ew(r3), codePath: e26 };
    } else n2 = { upper: n2, isConstructor: false, hasExtends: false, superIsConstructor: false, codePath: e26 };
  }, onCodePathEnd: function(i3, a2) {
    var o2 = n2.hasExtends;
    if (n2 = n2.upper, o2) {
      var s2 = i3.returnedSegments, u2 = s2.every(r2), c2 = s2.some(t3);
      u2 || e25.report({ messageId: c2 ? "missingSome" : "missingAll", node: a2.parent });
    }
  }, onCodePathSegmentStart: function(e26) {
    if (n2 && n2.isConstructor && n2.hasExtends) {
      var a2 = i2[e26.id] = { calledInSomePaths: false, calledInEveryPaths: false, validNodes: [] }, o2 = e26.prevSegments;
      0 < o2.length && (a2.calledInSomePaths = o2.some(t3), a2.calledInEveryPaths = o2.every(r2));
    }
  }, onCodePathSegmentLoop: function(a2, o2) {
    if (n2 && n2.isConstructor && n2.hasExtends) {
      var s2 = 2 <= o2.prevSegments.length;
      n2.codePath.traverseSegments({ first: o2, last: a2 }, function(n3) {
        var a3 = i2[n3.id], o3 = n3.prevSegments;
        if (a3.calledInSomePaths = o3.some(t3), a3.calledInEveryPaths = o3.every(r2), a3.calledInSomePaths || s2) {
          var u2 = a3.validNodes;
          a3.validNodes = [];
          for (var c2 = 0; c2 < u2.length; ++c2) {
            var l2 = u2[c2];
            e25.report({ messageId: "duplicate", node: l2 });
          }
        }
      });
    }
  }, "CallExpression:exit": function(t4) {
    if (n2 && n2.isConstructor && "Super" === t4.callee.type) if (n2.hasExtends) {
      for (var r3 = n2.codePath.currentSegments, a2 = false, o2 = null, s2 = 0; s2 < r3.length; ++s2) {
        var u2 = r3[s2];
        u2.reachable && (o2 = i2[u2.id], a2 = a2 || o2.calledInSomePaths, o2.calledInSomePaths = o2.calledInEveryPaths = true);
      }
      o2 && (a2 ? e25.report({ messageId: "duplicate", node: t4 }) : n2.superIsConstructor ? o2.validNodes.push(t4) : e25.report({ messageId: "badSuper", node: t4 }));
    } else n2.codePath.currentSegments.some(bw) && e25.report({ messageId: "unexpected", node: t4 });
  }, ReturnStatement: function(e26) {
    if (n2 && n2.isConstructor && n2.hasExtends && e26.argument) for (var t4 = n2.codePath.currentSegments, r3 = 0; r3 < t4.length; ++r3) {
      var a2 = t4[r3];
      if (a2.reachable) {
        var o2 = i2[a2.id];
        o2.calledInSomePaths = o2.calledInEveryPaths = true;
      }
    }
  }, "Program:exit": function() {
    i2 = /* @__PURE__ */ Object.create(null);
  } };
} };
var Sw = { meta: { type: "suggestion", docs: { description: "enforce consistent brace style for all control statements", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/curly" }, schema: { anyOf: [{ type: "array", items: [{ enum: ["all"] }], minItems: 0, maxItems: 1 }, { type: "array", items: [{ enum: ["multi", "multi-line", "multi-or-nest"] }, { enum: ["consistent"] }], minItems: 0, maxItems: 2 }] }, fixable: "code", messages: { missingCurlyAfter: "Expected { after '{{name}}'.", missingCurlyAfterCondition: "Expected { after '{{name}}' condition.", unexpectedCurlyAfter: "Unnecessary { after '{{name}}'.", unexpectedCurlyAfterCondition: "Unnecessary { after '{{name}}' condition." } }, create: function(e25) {
  function t3(e26) {
    if ("EmptyStatement" === e26.type) return true;
    var t4 = l2.getFirstToken(e26), r3 = l2.getLastToken(e26), n3 = LA.isSemicolonToken(r3) ? l2.getTokenBefore(r3) : r3;
    return t4.loc.start.line === n3.loc.end.line;
  }
  function r2(e26) {
    return "VariableDeclaration" === e26.type ? "const" === e26.kind || "let" === e26.kind : "FunctionDeclaration" === e26.type || "ClassDeclaration" === e26.type;
  }
  function n2(e26) {
    return "else" === e26.value && "Keyword" === e26.type;
  }
  function i2(e26) {
    return e26.alternate && l2.getFirstTokenBetween(e26.consequent, e26.alternate, n2);
  }
  function a2(n3, a3, c3, p2) {
    var f2 = "BlockStatement" === a3.type, h2 = null;
    if ("IfStatement" === n3.type && n3.consequent === a3 && function(e26) {
      if (e26.alternate && "BlockStatement" === e26.consequent.type) {
        if (2 <= e26.consequent.body.length) return true;
        for (var t4 = e26.consequent.body[0]; t4; t4 = LA.getTrailingStatement(t4)) if ("IfStatement" === t4.type && !t4.alternate) return true;
      }
      return false;
    }(n3)) h2 = true;
    else if (o2) f2 && 1 === a3.body.length && !r2(a3.body[0]) && (h2 = false);
    else if (s2) (function(e26) {
      var t4 = l2.getTokenBefore(e26), r3 = l2.getLastToken(e26), n4 = LA.isSemicolonToken(r3) ? l2.getTokenBefore(r3) : r3;
      return t4.loc.start.line === n4.loc.end.line;
    })(a3) || (h2 = true);
    else if (u2) if (f2 && 1 === a3.body.length && t3(a3.body[0])) {
      var d2 = l2.getCommentsBefore(a3.body[0]);
      h2 = !!r2(a3.body[0]) || 0 < d2.length;
    } else t3(a3) || (h2 = true);
    else h2 = true;
    return { actual: f2, expected: h2, check: function() {
      null !== this.expected && this.expected !== this.actual && (this.expected ? e25.report({ node: n3, loc: ("else" === c3 ? i2(n3) : n3).loc.start, messageId: p2 && p2.condition ? "missingCurlyAfterCondition" : "missingCurlyAfter", data: { name: c3 }, fix: function(e26) {
        return e26.replaceText(a3, "{".concat(l2.getText(a3), "}"));
      } }) : e25.report({ node: n3, loc: ("else" === c3 ? i2(n3) : n3).loc.start, messageId: p2 && p2.condition ? "unexpectedCurlyAfterCondition" : "unexpectedCurlyAfter", data: { name: c3 }, fix: function(e26) {
        var t4 = "DoWhileStatement" === n3.type && l2.getTokenBefore(a3).range[1] === a3.range[0] && !LA.canTokensBeAdjacent("do", l2.getFirstToken(a3, { skip: 1 })), r3 = l2.getFirstToken(a3), i3 = l2.getLastToken(a3), o3 = l2.getTokenBefore(i3);
        if (function(e27) {
          var t5 = l2.getTokenBefore(e27), r4 = l2.getTokenAfter(e27), n4 = l2.getNodeByRangeIndex(t5.range[0]);
          return !(LA.isSemicolonToken(t5) || !r4 || "BlockStatement" === n4.type && "FunctionExpression" !== n4.parent.type && "ArrowFunctionExpression" !== n4.parent.type || t5.loc.end.line !== r4.loc.start.line && !/^[\(\+\x2D\/\[`]/.test(r4.value) && ("Punctuator" !== t5.type || "++" !== t5.value && "--" !== t5.value));
        }(i3)) return null;
        var s3 = l2.getText().slice(r3.range[1], o3.range[0]) + l2.getText(o3) + l2.getText().slice(o3.range[1], i3.range[0]);
        return e26.replaceText(a3, (t4 ? " " : "") + s3);
      } }));
    } };
  }
  var o2 = "multi" === e25.options[0], s2 = "multi-line" === e25.options[0], u2 = "multi-or-nest" === e25.options[0], c2 = "consistent" === e25.options[1], l2 = e25.getSourceCode();
  return { IfStatement: function(e26) {
    "IfStatement" !== e26.parent.type && function(e27) {
      for (var t4 = [], r3 = e27; r3; r3 = r3.alternate) if (t4.push(a2(r3, r3.consequent, "if", { condition: true })), r3.alternate && "IfStatement" !== r3.alternate.type) {
        t4.push(a2(r3, r3.alternate, "else"));
        break;
      }
      if (c2) {
        var n3 = t4.some(function(e28) {
          return null === e28.expected ? e28.actual : e28.expected;
        });
        t4.forEach(function(e28) {
          e28.expected = n3;
        });
      }
      return t4;
    }(e26).forEach(function(e27) {
      e27.check();
    });
  }, WhileStatement: function(e26) {
    a2(e26, e26.body, "while", { condition: true }).check();
  }, DoWhileStatement: function(e26) {
    a2(e26, e26.body, "do").check();
  }, ForStatement: function(e26) {
    a2(e26, e26.body, "for", { condition: true }).check();
  }, ForInStatement: function(e26) {
    a2(e26, e26.body, "for-in").check();
  }, ForOfStatement: function(e26) {
    a2(e26, e26.body, "for-of").check();
  } };
} };
var kw = /^no default$/i;
var Dw = { meta: { type: "suggestion", docs: { description: "require `default` cases in `switch` statements", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/default-case" }, schema: [{ type: "object", properties: { commentPattern: { type: "string" } }, additionalProperties: false }], messages: { missingDefaultCase: "Expected a default case." } }, create: function(e25) {
  function t3(e26) {
    return e26[e26.length - 1];
  }
  var r2 = e25.options[0] || {}, n2 = r2.commentPattern ? new RegExp(r2.commentPattern, "u") : kw, i2 = e25.getSourceCode();
  return { SwitchStatement: function(r3) {
    if (r3.cases.length && !r3.cases.some(function(e26) {
      return null === e26.test;
    })) {
      var a2, o2 = t3(r3.cases), s2 = i2.getCommentsAfter(o2);
      s2.length && (a2 = t3(s2)), a2 && n2.test(a2.value.trim()) || e25.report({ node: r3, messageId: "missingDefaultCase" });
    }
  } };
} };
var Fw = { meta: { type: "layout", docs: { description: "enforce consistent newlines before and after dots", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/dot-location" }, schema: [{ enum: ["object", "property"] }], fixable: "code", messages: { expectedDotAfterObject: "Expected dot to be on same line as object.", expectedDotBeforeProperty: "Expected dot to be on same line as property." } }, create: function(e25) {
  function t3(t4) {
    var r3 = t4.property, a2 = i2.getTokenBefore(r3), o2 = i2.getTokenBefore(a2), s2 = i2.getText().slice(o2.range[1], a2.range[0]), u2 = i2.getText().slice(a2.range[1], r3.range[0]);
    if (n2) {
      if (!LA.isTokenOnSameLine(o2, a2)) {
        var c2 = LA.isDecimalIntegerNumericToken(o2) ? " " : "";
        e25.report({ node: t4, loc: a2.loc, messageId: "expectedDotAfterObject", fix: function(e26) {
          return e26.replaceTextRange([o2.range[1], r3.range[0]], "".concat(c2, ".").concat(s2).concat(u2));
        } });
      }
    } else LA.isTokenOnSameLine(a2, r3) || e25.report({ node: t4, loc: a2.loc, messageId: "expectedDotBeforeProperty", fix: function(e26) {
      return e26.replaceTextRange([o2.range[1], r3.range[0]], "".concat(s2).concat(u2, "."));
    } });
  }
  var r2 = e25.options[0], n2 = "object" === r2 || !r2, i2 = e25.getSourceCode();
  return { MemberExpression: function(e26) {
    e26.computed || t3(e26);
  } };
} };
var Aw = ["abstract", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "double", "else", "enum", "export", "extends", "false", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "long", "native", "new", "null", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", "transient", "true", "try", "typeof", "var", "void", "volatile", "while", "with"];
var ww = /^[\$A-Z_a-z][\$0-9A-Z_a-z]*$/;
var _w = /* @__PURE__ */ new Set(["string", "boolean"]);
var Tw = { meta: { type: "suggestion", docs: { description: "enforce dot notation whenever possible", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/dot-notation" }, schema: [{ type: "object", properties: { allowKeywords: { type: "boolean", default: true }, allowPattern: { type: "string", default: "" } }, additionalProperties: false }], fixable: "code", messages: { useDot: "[{{key}}] is better written in dot notation.", useBrackets: ".{{key}} is a syntax error." } }, create: function(e25) {
  function t3(t4, n3) {
    if (ww.test(n3) && (a2 || -1 === Aw.indexOf(n3 + "")) && (!r2 || !r2.test(n3))) {
      var i2 = "Literal" === t4.property.type ? JSON.stringify(n3) : "`".concat(n3, "`");
      e25.report({ node: t4.property, messageId: "useDot", data: { key: i2 }, fix: function(e26) {
        var r3 = o2.getTokenAfter(t4.object, LA.isOpeningBracketToken), i3 = o2.getLastToken(t4);
        if (o2.getFirstTokenBetween(r3, i3, { includeComments: true, filter: LA.isCommentToken })) return null;
        var a3 = o2.getTokenAfter(i3), s2 = a3 && i3.range[1] === a3.range[0] && !LA.canTokensBeAdjacent(n3 + "", a3), u2 = LA.isDecimalInteger(t4.object) ? " " : "", c2 = s2 ? " " : "";
        return e26.replaceTextRange([r3.range[0], i3.range[1]], "".concat(u2, ".").concat(n3).concat(c2));
      } });
    }
  }
  var r2, n2 = e25.options[0] || {}, a2 = void 0 === n2.allowKeywords || n2.allowKeywords, o2 = e25.getSourceCode();
  return n2.allowPattern && (r2 = new RegExp(n2.allowPattern, "u")), { MemberExpression: function(r3) {
    r3.computed && "Literal" === r3.property.type && (_w.has(i(r3.property.value)) || LA.isNullLiteral(r3.property)) && t3(r3, r3.property.value), r3.computed && "TemplateLiteral" === r3.property.type && 0 === r3.property.expressions.length && t3(r3, r3.property.quasis[0].value.cooked), a2 || r3.computed || -1 === Aw.indexOf(r3.property.name + "") || e25.report({ node: r3.property, messageId: "useBrackets", data: { key: r3.property.name }, fix: function(e26) {
      var t4 = o2.getTokenBefore(r3.property), n3 = o2.text.slice(t4.range[1], r3.property.range[0]);
      return n3.trim() ? null : "Identifier" === r3.object.type && "let" === r3.object.name ? null : e26.replaceTextRange([t4.range[0], r3.property.range[1]], "[".concat(n3, '"').concat(r3.property.name, '"]'));
    } });
  } };
} };
var Pw = { meta: { type: "layout", docs: { description: "require or disallow newline at the end of files", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/eol-last" }, fixable: "whitespace", schema: [{ enum: ["always", "never", "unix", "windows"] }], messages: { missing: "Newline required at end of file but not found.", unexpected: "Newline not allowed at end of file." } }, create: function(e25) {
  return { Program: function(t3) {
    var r2 = e25.getSourceCode(), n2 = r2.getText(), i2 = { column: Fy.lodash.last(r2.lines).length, line: r2.lines.length }, a2 = Fy.lodash.endsWith(n2, "\n");
    if (n2.length) {
      var o2 = e25.options[0] || "always", s2 = false;
      "unix" === o2 && (o2 = "always"), "windows" === o2 && (o2 = "always", s2 = true), "always" !== o2 || a2 ? "never" === o2 && a2 && e25.report({ node: t3, loc: i2, messageId: "unexpected", fix: function(e26) {
        var t4 = /(?:\r?\n)+$/.exec(r2.text).index, n3 = r2.text.length;
        return e26.replaceTextRange([t4, n3], "");
      } }) : e25.report({ node: t3, loc: i2, messageId: "missing", fix: function(e26) {
        return e26.insertTextAfterRange([0, n2.length], s2 ? "\r".concat("\n") : "\n");
      } });
    }
  } };
} };
var Iw = { meta: { type: "suggestion", docs: { description: "require the use of `===` and `!==`", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/eqeqeq" }, schema: { anyOf: [{ type: "array", items: [{ enum: ["always"] }, { type: "object", properties: { null: { enum: ["always", "never", "ignore"] } }, additionalProperties: false }], additionalItems: false }, { type: "array", items: [{ enum: ["smart", "allow-null"] }], additionalItems: false }] }, fixable: "code", messages: { unexpected: "Expected '{{expectedOperator}}' and instead saw '{{actualOperator}}'." } }, create: function(e25) {
  function t3(e26) {
    return "UnaryExpression" === e26.type && "typeof" === e26.operator;
  }
  function r2(e26) {
    return t3(e26.left) || t3(e26.right);
  }
  function n2(e26) {
    return "Literal" === e26.left.type && "Literal" === e26.right.type && i(e26.left.value) == i(e26.right.value);
  }
  function a2(t4, i2) {
    var a3 = u2.getFirstTokenBetween(t4.left, t4.right, function(e26) {
      return e26.value === t4.operator;
    });
    e25.report({ node: t4, loc: a3.loc, messageId: "unexpected", data: { expectedOperator: i2, actualOperator: t4.operator }, fix: function(e26) {
      return r2(t4) || n2(t4) ? e26.replaceText(a3, i2) : null;
    } });
  }
  var o2 = e25.options[0] || "always", s2 = e25.options[1] || {}, u2 = e25.getSourceCode(), c2 = "always" === o2 ? s2.null || "always" : "ignore";
  return { BinaryExpression: function(e26) {
    var t4 = function(e27) {
      return LA.isNullLiteral(e27.right) || LA.isNullLiteral(e27.left);
    }(e26);
    return "==" !== e26.operator && "!=" !== e26.operator ? void ("never" === c2 && t4 && a2(e26, e26.operator.slice(0, -1))) : void ("smart" === o2 && (r2(e26) || n2(e26) || t4) || !("always" === c2) && t4 || a2(e26, "".concat(e26.operator, "=")));
  } };
} };
var Bw = { meta: { type: "layout", docs: { description: "require or disallow spacing between function identifiers and their invocations", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/func-call-spacing" }, fixable: "whitespace", schema: { anyOf: [{ type: "array", items: [{ enum: ["never"] }], minItems: 0, maxItems: 1 }, { type: "array", items: [{ enum: ["always"] }, { type: "object", properties: { allowNewlines: { type: "boolean" } }, additionalProperties: false }], minItems: 0, maxItems: 2 }] }, messages: { unexpected: "Unexpected newline between function name and paren.", missing: "Missing space between function name and paren." } }, create: function(e25) {
  function t3(t4, i3, o2) {
    var s2 = a2.slice(i3.range[1], o2.range[0]).replace(/\/\*(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?\*\//g, ""), u2 = /[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]/.test(s2), c2 = u2 && LA.LINEBREAK_MATCHER.test(s2);
    r2 && u2 ? e25.report({ node: t4, loc: i3.loc.start, messageId: "unexpected", fix: function(e26) {
      return c2 ? null : e26.removeRange([i3.range[1], o2.range[0]]);
    } }) : r2 || u2 ? !r2 && !n2 && c2 && e25.report({ node: t4, loc: i3.loc.start, messageId: "unexpected", fix: function(e26) {
      return e26.replaceTextRange([i3.range[1], o2.range[0]], " ");
    } }) : e25.report({ node: t4, loc: i3.loc.start, messageId: "missing", fix: function(e26) {
      return e26.insertTextBefore(o2, " ");
    } });
  }
  var r2 = "always" !== e25.options[0], n2 = !r2 && e25.options[1] && e25.options[1].allowNewlines, i2 = e25.getSourceCode(), a2 = i2.getText();
  return { "CallExpression, NewExpression": function(e26) {
    var r3 = i2.getLastToken(e26), n3 = i2.getLastToken(e26.callee), a3 = i2.getFirstTokenBetween(n3, r3, LA.isOpeningParenToken), o2 = a3 && i2.getTokenBefore(a3);
    a3 && a3.range[1] < e26.range[1] && t3(e26, o2, a3);
  }, ImportExpression: function(e26) {
    var r3 = i2.getFirstToken(e26);
    t3(e26, r3, i2.getTokenAfter(r3));
  } };
} };
function Ow(e25, t3) {
  return 6 <= t3 ? _A.keyword.isIdentifierES6(e25) : _A.keyword.isIdentifierES5(e25);
}
var Lw = { type: "object", properties: { considerPropertyDescriptor: { type: "boolean" }, includeCommonJSModuleExports: { type: "boolean" } }, additionalProperties: false };
var Nw = { meta: { type: "suggestion", docs: { description: "require function names to match the name of the variable or property to which they are assigned", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/func-name-matching" }, schema: { anyOf: [{ type: "array", additionalItems: false, items: [{ enum: ["always", "never"] }, Lw] }, { type: "array", additionalItems: false, items: [Lw] }] }, messages: { matchProperty: "Function name `{{funcName}}` should match property name `{{name}}`.", matchVariable: "Function name `{{funcName}}` should match variable name `{{name}}`.", notMatchProperty: "Function name `{{funcName}}` should not match property name `{{name}}`.", notMatchVariable: "Function name `{{funcName}}` should not match variable name `{{name}}`." } }, create: function(e25) {
  function t3(e26, t4, r3) {
    return !!r3 && "CallExpression" === r3.type && "MemberExpression" === r3.callee.type && r3.callee.object.name === e26 && r3.callee.property.name === t4;
  }
  function r2(e26, t4) {
    return "always" === s2 && e26 !== t4 || "never" === s2 && e26 === t4;
  }
  function n2(t4, r3, n3, i2) {
    var a3;
    a3 = "always" === s2 && i2 ? "matchProperty" : "always" === s2 ? "matchVariable" : i2 ? "notMatchProperty" : "notMatchVariable", e25.report({ node: t4, messageId: a3, data: { name: r3, funcName: n3 } });
  }
  function a2(e26) {
    return "Literal" === e26.type && "string" == typeof e26.value;
  }
  var o2 = ("object" == i(e25.options[0]) ? e25.options[0] : e25.options[1]) || {}, s2 = "string" == typeof e25.options[0] ? e25.options[0] : "always", u2 = o2.considerPropertyDescriptor, c2 = o2.includeCommonJSModuleExports, l2 = e25.parserOptions && e25.parserOptions.ecmaVersion ? e25.parserOptions.ecmaVersion : 5;
  return { VariableDeclarator: function(e26) {
    !e26.init || "FunctionExpression" !== e26.init.type || "Identifier" !== e26.id.type || e26.init.id && r2(e26.id.name, e26.init.id.name) && n2(e26, e26.id.name, e26.init.id.name, false);
  }, AssignmentExpression: function(e26) {
    if (!("FunctionExpression" !== e26.right.type || e26.left.computed && "Literal" !== e26.left.property.type || !c2 && function(e27) {
      if ("MemberExpression" === e27.type && "Identifier" === e27.object.type && "module" === e27.object.name) {
        if ("Identifier" === e27.property.type && "exports" === e27.property.name) return true;
        if ("Literal" === e27.property.type && "exports" === e27.property.value) return true;
      }
      return false;
    }(e26.left) || "Identifier" !== e26.left.type && "MemberExpression" !== e26.left.type)) {
      var t4 = "MemberExpression" === e26.left.type, i2 = t4 ? LA.getStaticPropertyName(e26.left) : e26.left.name;
      e26.right.id && Ow(i2) && r2(i2, e26.right.id.name) && n2(e26, i2, e26.right.id.name, t4);
    }
  }, Property: function(e26) {
    if ("FunctionExpression" === e26.value.type && e26.value.id && (!e26.computed || a2(e26.key))) {
      if ("Identifier" === e26.key.type) {
        var i2 = e26.value.id.name, o3 = e26.key.name;
        if (u2 && "value" === o3) if (t3("Object", "defineProperty", e26.parent.parent) || t3("Reflect", "defineProperty", e26.parent.parent)) {
          var s3 = e26.parent.parent.arguments[1];
          a2(s3) && r2(s3.value, i2) && n2(e26, s3.value, i2, true);
        } else t3("Object", "defineProperties", e26.parent.parent.parent.parent) ? (o3 = e26.parent.parent.key.name, !e26.parent.parent.computed && r2(o3, i2) && n2(e26, o3, i2, true)) : t3("Object", "create", e26.parent.parent.parent.parent) ? (o3 = e26.parent.parent.key.name, !e26.parent.parent.computed && r2(o3, i2) && n2(e26, o3, i2, true)) : r2(o3, i2) && n2(e26, o3, i2, true);
        else r2(o3, i2) && n2(e26, o3, i2, true);
        return;
      }
      a2(e26.key) && Ow(e26.key.value, l2) && r2(e26.key.value, e26.value.id.name) && n2(e26, e26.key.value, e26.value.id.name, true);
    }
  } };
} };
var jw = { meta: { type: "suggestion", docs: { description: "require or disallow named `function` expressions", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/func-names" }, schema: { definitions: { value: { enum: ["always", "as-needed", "never"] } }, items: [{ $ref: "#/definitions/value" }, { type: "object", properties: { generators: { $ref: "#/definitions/value" } }, additionalProperties: false }] }, messages: { unnamed: "Unexpected unnamed {{name}}.", named: "Unexpected named {{name}}." } }, create: function(e25) {
  function t3(e26) {
    var t4 = e26.parent;
    return "MethodDefinition" === t4.type || "Property" === t4.type && (t4.method || "get" === t4.kind || "set" === t4.kind);
  }
  function r2(t4) {
    e25.report({ node: t4, messageId: "unnamed", loc: LA.getFunctionHeadLoc(t4, i2), data: { name: LA.getFunctionNameWithKind(t4) } });
  }
  function n2(t4) {
    e25.report({ node: t4, messageId: "named", loc: LA.getFunctionHeadLoc(t4, i2), data: { name: LA.getFunctionNameWithKind(t4) } });
  }
  var i2 = e25.getSourceCode();
  return { "FunctionExpression:exit": function(i3) {
    var a2 = e25.getDeclaredVariables(i3)[0];
    if (!(function(e26) {
      return e26 && "FunctionName" === e26.defs[0].type;
    }(a2) && 0 < a2.references.length)) {
      var o2 = !(!i3.id || !i3.id.name), s2 = function(t4) {
        return t4.generator && 1 < e25.options.length && e25.options[1].generators ? e25.options[1].generators : e25.options[0] || "always";
      }(i3);
      "never" === s2 ? o2 && n2(i3) : "as-needed" === s2 ? !o2 && !function(e26) {
        var r3 = e26.parent;
        return t3(e26) || "VariableDeclarator" === r3.type && "Identifier" === r3.id.type && r3.init === e26 || "Property" === r3.type && r3.value === e26 || "AssignmentExpression" === r3.type && "Identifier" === r3.left.type && r3.right === e26 || "ExportDefaultDeclaration" === r3.type && r3.declaration === e26 || "AssignmentPattern" === r3.type && r3.right === e26;
      }(i3) && r2(i3) : !o2 && !t3(i3) && r2(i3);
    }
  } };
} };
var Rw = { meta: { type: "layout", docs: { description: "enforce consistent line breaks inside function parentheses", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/function-paren-newline" }, fixable: "whitespace", schema: [{ oneOf: [{ enum: ["always", "never", "consistent", "multiline", "multiline-arguments"] }, { type: "object", properties: { minItems: { type: "integer", minimum: 0 } }, additionalProperties: false }] }], messages: { expectedBefore: "Expected newline before ')'.", expectedAfter: "Expected newline after '('.", expectedBetween: "Expected newline between arguments/params.", unexpectedBefore: "Unexpected newline before ')'.", unexpectedAfter: "Unexpected newline after '('." } }, create: function(e25) {
  function t3(e26, t4) {
    return p2 && 1 === e26.length ? t4 : l2 || p2 ? e26.some(function(t5, r3) {
      return r3 !== e26.length - 1 && t5.loc.end.line !== e26[r3 + 1].loc.start.line;
    }) : f2 ? t4 : e26.length >= o2;
  }
  function r2(r3, n3) {
    var i2 = r3.leftParen, a3 = r3.rightParen, o3 = s2.getTokenAfter(i2), u2 = s2.getTokenBefore(a3), c3 = !LA.isTokenOnSameLine(i2, o3), l3 = !LA.isTokenOnSameLine(u2, a3), p3 = t3(n3, c3);
    c3 && !p3 ? e25.report({ node: i2, messageId: "unexpectedAfter", fix: function(e26) {
      return s2.getText().slice(i2.range[1], o3.range[0]).trim() ? null : e26.removeRange([i2.range[1], o3.range[0]]);
    } }) : !c3 && p3 && e25.report({ node: i2, messageId: "expectedAfter", fix: function(e26) {
      return e26.insertTextAfter(i2, "\n");
    } }), l3 && !p3 ? e25.report({ node: a3, messageId: "unexpectedBefore", fix: function(e26) {
      return s2.getText().slice(u2.range[1], a3.range[0]).trim() ? null : e26.removeRange([u2.range[1], a3.range[0]]);
    } }) : !l3 && p3 && e25.report({ node: a3, messageId: "expectedBefore", fix: function(e26) {
      return e26.insertTextBefore(a3, "\n");
    } });
  }
  function n2(r3, n3) {
    for (var i2 = r3.leftParen, a3 = s2.getTokenAfter(i2), o3 = !LA.isTokenOnSameLine(i2, a3), u2 = t3(n3, o3), c3 = function(t4) {
      var r4 = n3[t4], i3 = n3[t4 + 1];
      !(r4.loc.end.line !== i3.loc.start.line) && u2 && e25.report({ node: r4, messageId: "expectedBetween", fix: function(e26) {
        return e26.insertTextBefore(i3, "\n");
      } });
    }, l3 = 0; l3 <= n3.length - 2; l3++) c3(l3);
  }
  function a2(e26) {
    switch (e26.type) {
      case "NewExpression":
        if (!(e26.arguments.length || LA.isOpeningParenToken(s2.getLastToken(e26, { skip: 1 })) && LA.isClosingParenToken(s2.getLastToken(e26)))) return null;
      case "CallExpression":
        return { leftParen: s2.getTokenAfter(e26.callee, LA.isOpeningParenToken), rightParen: s2.getLastToken(e26) };
      case "FunctionDeclaration":
      case "FunctionExpression":
        var t4 = s2.getFirstToken(e26, LA.isOpeningParenToken);
        return { leftParen: t4, rightParen: e26.params.length ? s2.getTokenAfter(e26.params[e26.params.length - 1], LA.isClosingParenToken) : s2.getTokenAfter(t4) };
      case "ArrowFunctionExpression":
        var r3 = s2.getFirstToken(e26);
        return LA.isOpeningParenToken(r3) ? { leftParen: r3, rightParen: s2.getTokenBefore(e26.body, LA.isClosingParenToken) } : null;
      case "ImportExpression":
        return { leftParen: s2.getFirstToken(e26, 1), rightParen: s2.getLastToken(e26) };
      default:
        throw new TypeError("unexpected node with type ".concat(e26.type));
    }
  }
  var o2, s2 = e25.getSourceCode(), c2 = e25.options[0] || "multiline", l2 = "multiline" === c2, p2 = "multiline-arguments" === c2, f2 = "consistent" === c2;
  return o2 = "object" == i(c2) ? c2.minItems : "always" === c2 ? 0 : "never" === c2 ? 1 / 0 : null, u({}, ["ArrowFunctionExpression", "CallExpression", "FunctionDeclaration", "FunctionExpression", "ImportExpression", "NewExpression"], function(e26) {
    var t4, i2 = a2(e26);
    t4 = "ImportExpression" === e26.type ? [e26.source] : LA.isFunction(e26) ? e26.params : e26.arguments, i2 && (r2(i2, t4), p2 && n2(i2, t4));
  });
} };
var Mw = { oneOf: [{ enum: ["before", "after", "both", "neither"] }, { type: "object", properties: { before: { type: "boolean" }, after: { type: "boolean" } }, additionalProperties: false }] };
var Vw = { meta: { type: "layout", docs: { description: "enforce consistent spacing around `*` operators in generator functions", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/generator-star-spacing" }, fixable: "whitespace", schema: [{ oneOf: [{ enum: ["before", "after", "both", "neither"] }, { type: "object", properties: { before: { type: "boolean" }, after: { type: "boolean" }, named: Mw, anonymous: Mw, method: Mw }, additionalProperties: false }] }], messages: { missingBefore: "Missing space before *.", missingAfter: "Missing space after *.", unexpectedBefore: "Unexpected space before *.", unexpectedAfter: "Unexpected space after *." } }, create: function(e25) {
  function t3(e26, t4) {
    return e26 ? "string" == typeof e26 ? o2[e26] : Object.assign({}, t4, e26) : t4;
  }
  function r2(e26) {
    return "*" === e26.value && "Punctuator" === e26.type;
  }
  function n2(e26) {
    return u2.getFirstToken(e26.parent.method || "MethodDefinition" === e26.parent.type ? e26.parent : e26, r2);
  }
  function i2(t4, r3, n3, i3) {
    if (!!(i3.range[0] - n3.range[1]) !== s2[t4][r3]) {
      var a3 = "*" === n3.value, o3 = s2[t4][r3], u3 = a3 ? n3 : i3, c2 = "".concat(o3 ? "missing" : "unexpected").concat(function(e26) {
        return e26[0].toUpperCase() + e26.slice(1);
      }(r3));
      e25.report({ node: u3, messageId: c2, fix: function(e26) {
        return o3 ? a3 ? e26.insertTextAfter(u3, " ") : e26.insertTextBefore(u3, " ") : e26.removeRange([n3.range[1], i3.range[0]]);
      } });
    }
  }
  function a2(e26) {
    if (e26.generator) {
      var t4 = n2(e26), r3 = u2.getTokenBefore(t4), a3 = u2.getTokenAfter(t4), o3 = "named";
      "MethodDefinition" === e26.parent.type || "Property" === e26.parent.type && e26.parent.method ? o3 = "method" : !e26.id && (o3 = "anonymous"), "method" == o3 && t4 === u2.getFirstToken(e26.parent) || i2(o3, "before", r3, t4), i2(o3, "after", t4, a3);
    }
  }
  var o2 = { before: { before: true, after: false }, after: { before: false, after: true }, both: { before: true, after: true }, neither: { before: false, after: false } }, s2 = function(e26) {
    var r3 = t3(e26, o2.before);
    return { named: t3(e26.named, r3), anonymous: t3(e26.anonymous, r3), method: t3(e26.method, r3) };
  }(e25.options[0] || {}), u2 = e25.getSourceCode();
  return { FunctionDeclaration: a2, FunctionExpression: a2 };
} };
var Uw = /^(?:Arrow)?FunctionExpression$/;
function qw(e25) {
  return e25.reachable;
}
function Ww(e25) {
  return e25.id || e25;
}
var $w = { meta: { type: "problem", docs: { description: "enforce `return` statements in getters", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/getter-return" }, fixable: null, schema: [{ type: "object", properties: { allowImplicit: { type: "boolean", default: false } }, additionalProperties: false }], messages: { expected: "Expected to return a value in {{name}}.", expectedAlways: "Expected {{name}} to always return a value." } }, create: function(e25) {
  function t3(t4) {
    i2.shouldCheck && i2.codePath.currentSegments.some(qw) && e25.report({ node: t4, loc: Ww(t4).loc.start, messageId: i2.hasReturn ? "expectedAlways" : "expected", data: { name: LA.getFunctionNameWithKind(i2.node) } });
  }
  function r2(e26) {
    var t4 = e26.parent;
    if (Uw.test(e26.type) && "BlockStatement" === e26.body.type) {
      if ("get" === t4.kind) return true;
      if ("Property" === t4.type && "get" === LA.getStaticPropertyName(t4) && "ObjectExpression" === t4.parent.type) {
        if ("CallExpression" === t4.parent.parent.type && "defineProperty" === LA.getStaticPropertyName(t4.parent.parent.callee)) return true;
        if ("Property" === t4.parent.parent.type && "ObjectExpression" === t4.parent.parent.parent.type && "CallExpression" === t4.parent.parent.parent.parent.type && "defineProperties" === LA.getStaticPropertyName(t4.parent.parent.parent.parent.callee)) return true;
      }
    }
    return false;
  }
  var n2 = e25.options[0] || { allowImplicit: false }, i2 = { upper: null, codePath: null, hasReturn: false, shouldCheck: false, node: null };
  return { onCodePathStart: function(e26, t4) {
    i2 = { upper: i2, codePath: e26, hasReturn: false, shouldCheck: r2(t4), node: t4 };
  }, onCodePathEnd: function() {
    i2 = i2.upper;
  }, ReturnStatement: function(t4) {
    i2.shouldCheck && (i2.hasReturn = true, !n2.allowImplicit && !t4.argument && e25.report({ node: t4, messageId: "expected", data: { name: LA.getFunctionNameWithKind(i2.node) } }));
  }, "FunctionExpression:exit": t3, "ArrowFunctionExpression:exit": t3 };
} };
var Gw = ["AssignmentExpression", "VariableDeclarator", "MemberExpression", "ExpressionStatement", "CallExpression", "ConditionalExpression", "Program", "VariableDeclaration"];
var zw = { meta: { type: "suggestion", docs: { description: "require `require()` calls to be placed at top-level module scope", category: "Node.js and CommonJS", recommended: false, url: "https://eslint.org/docs/rules/global-require" }, schema: [], messages: { unexpected: "Unexpected require()." } }, create: function(e25) {
  return { CallExpression: function(t3) {
    var r2 = e25.getScope();
    "require" !== t3.callee.name || function(e26, t4) {
      var r3 = function(e27, t5) {
        var r4 = e27.references.filter(function(e28) {
          return e28.identifier.range[0] === t5.range[0] && e28.identifier.range[1] === t5.range[1];
        });
        return 1 === r4.length ? r4[0] : null;
      }(e26, t4);
      return r3 && r3.resolved && 0 < r3.resolved.defs.length;
    }(r2, t3.callee) || (e25.getAncestors().every(function(e26) {
      return -1 < Gw.indexOf(e26.type);
    }) || e25.report({ node: t3, messageId: "unexpected" }));
  } };
} };
function Hw(e25) {
  return "get" === e25.kind || "set" === e25.kind;
}
var Kw = { meta: { type: "suggestion", docs: { description: "require grouped accessor pairs in object literals and classes", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/grouped-accessor-pairs" }, schema: [{ enum: ["anyOrder", "getBeforeSet", "setBeforeGet"] }], messages: { notGrouped: "Accessor pair {{ formerName }} and {{ latterName }} should be grouped.", invalidOrder: "Expected {{ latterName }} to be before {{ formerName }}." } }, create: function(e25) {
  function t3(t4, r3, n3) {
    e25.report({ node: n3, messageId: t4, loc: LA.getFunctionHeadLoc(n3.value, o2), data: { formerName: LA.getFunctionNameWithKind(r3.value), latterName: LA.getFunctionNameWithKind(n3.value) } });
  }
  function r2(e26) {
    var t4 = LA.getStaticPropertyName(e26);
    return { key: null === t4 ? o2.getTokens(e26.key) : t4, getters: "get" === e26.kind ? [e26] : [], setters: "set" === e26.kind ? [e26] : [] };
  }
  function n2(e26, t4) {
    var r3, n3, i3 = e26.find(function(e27) {
      return function(e28, t5) {
        return "string" == typeof e28 && "string" == typeof t5 ? e28 == t5 : !(!Array.isArray(e28) || !Array.isArray(t5)) && function(e29, t6) {
          if (e29.length !== t6.length) return false;
          for (var r4 = 0; r4 < e29.length; r4++) {
            var n4 = e29[r4], i4 = t6[r4];
            if (n4.type !== i4.type || n4.value !== i4.value) return false;
          }
          return true;
        }(e28, t5);
      }(e27.key, t4.key);
    });
    return i3 ? ((r3 = i3.getters).push.apply(r3, E(t4.getters)), (n3 = i3.setters).push.apply(n3, E(t4.setters))) : e26.push(t4), e26;
  }
  function i2(e26, i3) {
    var o3 = e26.filter(i3).filter(Hw).map(r2).reduce(n2, []), s2 = true, u2 = false, c2 = void 0;
    try {
      for (var l2, p2 = o3[Symbol.iterator](); !(s2 = (l2 = p2.next()).done); s2 = true) {
        var f2 = l2.value, h2 = f2.getters, d2 = f2.setters;
        if (1 === h2.length && 1 === d2.length) {
          var m2 = b(h2, 1)[0], g2 = b(d2, 1)[0], y2 = e26.indexOf(m2), v2 = e26.indexOf(g2), x2 = y2 < v2 ? m2 : g2, E2 = y2 < v2 ? g2 : m2;
          1 < Math.abs(y2 - v2) ? t3("notGrouped", x2, E2) : ("getBeforeSet" === a2 && y2 > v2 || "setBeforeGet" === a2 && y2 < v2) && t3("invalidOrder", x2, E2);
        }
      }
    } catch (e27) {
      u2 = true, c2 = e27;
    } finally {
      try {
        s2 || null == p2.return || p2.return();
      } finally {
        if (u2) throw c2;
      }
    }
  }
  var a2 = e25.options[0] || "anyOrder", o2 = e25.getSourceCode();
  return { ObjectExpression: function(e26) {
    i2(e26.properties, function(e27) {
      return "Property" === e27.type;
    });
  }, ClassBody: function(e26) {
    i2(e26.body, function(e27) {
      return "MethodDefinition" === e27.type && !e27.static;
    }), i2(e26.body, function(e27) {
      return "MethodDefinition" === e27.type && e27.static;
    });
  } };
} };
var Jw = { meta: { type: "suggestion", docs: { description: "require error handling in callbacks", category: "Node.js and CommonJS", recommended: false, url: "https://eslint.org/docs/rules/handle-callback-err" }, schema: [{ type: "string" }], messages: { expected: "Expected error to be handled." } }, create: function(e25) {
  function t3(e26) {
    return function(e27) {
      return "^" === e27[0];
    }(n2) ? new RegExp(n2, "u").test(e26) : e26 === n2;
  }
  function r2(r3) {
    var n3 = function(e26) {
      return e26.variables.filter(function(e27) {
        return e27.defs[0] && "Parameter" === e27.defs[0].type;
      });
    }(e25.getScope())[0];
    n3 && t3(n3.name) && 0 === n3.references.length && e25.report({ node: r3, messageId: "expected" });
  }
  var n2 = e25.options[0] || "err";
  return { FunctionDeclaration: r2, FunctionExpression: r2, ArrowFunctionExpression: r2 };
} };
var Qw = { meta: { type: "suggestion", docs: { description: "require identifiers to match a specified regular expression", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/id-match" }, schema: [{ type: "string" }, { type: "object", properties: { properties: { type: "boolean", default: false }, onlyDeclarations: { type: "boolean", default: false }, ignoreDestructuring: { type: "boolean", default: false } } }], messages: { notMatch: "Identifier '{{name}}' does not match the pattern '{{pattern}}'." } }, create: function(e25) {
  function t3(e26) {
    return !a2.test(e26);
  }
  function r2(e26, r3) {
    return (!u2 || f2.has(e26.type)) && !p2.has(e26.type) && t3(r3);
  }
  function n2(t4) {
    l2.has(t4) || (e25.report({ node: t4, messageId: "notMatch", data: { name: t4.name, pattern: i2 } }), l2.set(t4, true));
  }
  var i2 = e25.options[0] || "^.+$", a2 = new RegExp(i2, "u"), o2 = e25.options[1] || {}, s2 = !!o2.properties, u2 = !!o2.onlyDeclarations, c2 = !!o2.ignoreDestructuring, l2 = /* @__PURE__ */ new Map(), p2 = /* @__PURE__ */ new Set(["CallExpression", "NewExpression"]), f2 = /* @__PURE__ */ new Set(["FunctionDeclaration", "VariableDeclarator"]), h2 = /* @__PURE__ */ new Set(["ImportSpecifier", "ImportNamespaceSpecifier", "ImportDefaultSpecifier"]);
  return { Identifier: function(e26) {
    var i3 = e26.name, a3 = e26.parent, o3 = "MemberExpression" === a3.type ? a3.parent : a3;
    if ("MemberExpression" === a3.type) {
      if (!s2) return;
      "Identifier" === a3.object.type && a3.object.name === i3 ? t3(i3) && n2(e26) : "AssignmentExpression" === o3.type && "MemberExpression" === o3.left.type && o3.left.property.name === e26.name ? t3(i3) && n2(e26) : "AssignmentExpression" === o3.type && "MemberExpression" !== o3.right.type && t3(i3) && n2(e26);
    } else if ("Property" === a3.type || "AssignmentPattern" === a3.type) {
      if (a3.parent && "ObjectPattern" === a3.parent.type) {
        a3.shorthand && a3.value.left && t3(i3) && n2(e26);
        var u3 = a3.key.name === a3.value.name;
        if (!u3 && a3.key === e26) return;
        a3.value.name && t3(i3) && (!u3 || !c2) && n2(e26);
      }
      if (!s2 || c2 && function(e27) {
        for (var t4 = e27.parent; t4; ) {
          if ("ObjectPattern" === t4.type) return true;
          t4 = t4.parent;
        }
        return false;
      }(e26)) return;
      a3.right !== e26 && r2(o3, i3) && n2(e26);
    } else h2.has(a3.type) ? a3.local && a3.local.name === e26.name && t3(i3) && n2(e26) : r2(o3, i3) && n2(e26);
  } };
} };
var Xw = LA.isCommentToken;
var Yw = LA.isNotOpeningParenToken;
var Zw = { meta: { type: "layout", docs: { description: "enforce the location of arrow function bodies", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/implicit-arrow-linebreak" }, fixable: "whitespace", schema: [{ enum: ["beside", "below"] }], messages: { expected: "Expected a linebreak before this expression.", unexpected: "Expected no linebreak before this expression." } }, create: function(e25) {
  function t3(t4) {
    if ("BlockStatement" !== t4.body.type) {
      var i2 = r2.getTokenBefore(t4.body, Yw), a2 = r2.getTokenAfter(i2);
      i2.loc.end.line === a2.loc.start.line && "below" === n2 ? e25.report({ node: a2, messageId: "expected", fix: function(e26) {
        return e26.insertTextBefore(a2, "\n");
      } }) : i2.loc.end.line !== a2.loc.start.line && "beside" === n2 && e25.report({ node: a2, messageId: "unexpected", fix: function(e26) {
        return r2.getFirstTokenBetween(i2, a2, { includeComments: true, filter: Xw }) ? null : e26.replaceTextRange([i2.range[1], a2.range[0]], " ");
      } });
    }
  }
  var r2 = e25.getSourceCode(), n2 = e25.options[0] || "beside";
  return { ArrowFunctionExpression: function(e26) {
    return t3(e26);
  } };
} };
var e_ = { meta: { type: "layout", docs: { description: "enforce consistent indentation", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/indent-legacy" }, deprecated: true, replacedBy: ["indent"], fixable: "whitespace", schema: [{ oneOf: [{ enum: ["tab"] }, { type: "integer", minimum: 0 }] }, { type: "object", properties: { SwitchCase: { type: "integer", minimum: 0 }, VariableDeclarator: { oneOf: [{ type: "integer", minimum: 0 }, { type: "object", properties: { var: { type: "integer", minimum: 0 }, let: { type: "integer", minimum: 0 }, const: { type: "integer", minimum: 0 } } }] }, outerIIFEBody: { type: "integer", minimum: 0 }, MemberExpression: { type: "integer", minimum: 0 }, FunctionDeclaration: { type: "object", properties: { parameters: { oneOf: [{ type: "integer", minimum: 0 }, { enum: ["first"] }] }, body: { type: "integer", minimum: 0 } } }, FunctionExpression: { type: "object", properties: { parameters: { oneOf: [{ type: "integer", minimum: 0 }, { enum: ["first"] }] }, body: { type: "integer", minimum: 0 } } }, CallExpression: { type: "object", properties: { parameters: { oneOf: [{ type: "integer", minimum: 0 }, { enum: ["first"] }] } } }, ArrayExpression: { oneOf: [{ type: "integer", minimum: 0 }, { enum: ["first"] }] }, ObjectExpression: { oneOf: [{ type: "integer", minimum: 0 }, { enum: ["first"] }] } }, additionalProperties: false }], messages: { expected: "Expected indentation of {{expected}} but found {{actual}}." } }, create: function(e25) {
  function t3(e26, t4, r3) {
    var n3 = "".concat(e26, " ").concat(x2).concat(1 === e26 ? "" : "s"), i2 = "space".concat(1 === t4 ? "" : "s"), a3 = "tab".concat(1 === r3 ? "" : "s");
    return { expected: n3, actual: 0 < t4 && 0 < r3 ? "".concat(t4, " ").concat(i2, " and ").concat(r3, " ").concat(a3) : 0 < t4 ? "space" === x2 ? t4 : "".concat(t4, " ").concat(i2) : 0 < r3 ? "tab" === x2 ? r3 : "".concat(r3, " ").concat(a3) : "0" };
  }
  function r2(r3, n3, i2, a3, o3, s3) {
    if (!i2 || !a3) {
      var u3 = ("space" === x2 ? " " : "	").repeat(n3), c3 = s3 ? [r3.range[1] - r3.loc.end.column, r3.range[1] - r3.loc.end.column + i2 + a3] : [r3.range[0] - r3.loc.start.column, r3.range[0] - r3.loc.start.column + i2 + a3];
      e25.report({ node: r3, loc: o3, messageId: "expected", data: t3(n3, i2, a3), fix: function(e26) {
        return e26.replaceTextRange(c3, u3);
      } });
    }
  }
  function n2(e26, t4) {
    var r3 = t4 ? C3.getLastToken(e26) : C3.getFirstToken(e26), n3 = C3.getText(r3, r3.loc.start.column).split(""), i2 = n3.slice(0, n3.findIndex(function(e27) {
      return " " !== e27 && "	" !== e27;
    })), a3 = i2.filter(function(e27) {
      return " " === e27;
    }).length, o3 = i2.filter(function(e27) {
      return "	" === e27;
    }).length;
    return { space: a3, tab: o3, goodChar: "space" === x2 ? a3 : o3, badChar: "space" === x2 ? o3 : a3 };
  }
  function a2(e26, t4) {
    var r3 = true === t4 ? C3.getLastToken(e26, 1) : C3.getTokenBefore(e26);
    return (true === t4 ? e26.loc.end.line : e26.loc.start.line) !== (r3 ? r3.loc.end.line : -1);
  }
  function o2(e26, t4) {
    var i2 = n2(e26, false);
    ("ArrayExpression" !== e26.type && "ObjectExpression" !== e26.type && (i2.goodChar !== t4 || 0 !== i2.badChar) && a2(e26) && r2(e26, t4, i2.space, i2.tab), "IfStatement" === e26.type && e26.alternate) && (o2(C3.getTokenBefore(e26.alternate), t4), a2(e26.alternate) || o2(e26.alternate, t4));
    "TryStatement" === e26.type && e26.handler && o2(C3.getFirstToken(e26.handler), t4);
    "TryStatement" === e26.type && e26.finalizer && o2(C3.getTokenBefore(e26.finalizer), t4);
    "DoWhileStatement" === e26.type && o2(C3.getTokenAfter(e26.body), t4);
  }
  function s2(e26, t4) {
    e26.forEach(function(e27) {
      return o2(e27, t4);
    });
  }
  function u2(e26, t4) {
    var i2 = C3.getLastToken(e26), o3 = n2(i2, true);
    (o3.goodChar !== t4 || 0 !== o3.badChar) && a2(e26, true) && r2(e26, t4, o3.space, o3.tab, { line: i2.loc.start.line, column: i2.loc.start.column }, true);
  }
  function c2(e26, t4) {
    var i2 = n2(e26, false);
    (i2.goodChar !== t4 || 0 !== i2.badChar) && a2(e26) && r2(e26, t4, i2.space, i2.tab, { line: e26.loc.start.line, column: e26.loc.start.column });
  }
  function l2(e26, t4, r3) {
    for (var n3 = e26.parent, i2 = new Set(r3 || ["Program"]); n3.type !== t4 && !i2.has(n3.type) && "Program" !== n3.type; ) n3 = n3.parent;
    return n3.type === t4 ? n3 : null;
  }
  function p2(e26) {
    return l2(e26, "VariableDeclarator");
  }
  function f2(e26, t4) {
    return t4 && t4.parent.loc.start.line === e26.loc.start.line && 1 < t4.parent.declarations.length;
  }
  function h2(e26) {
    var t4 = C3.getLastToken(e26);
    return e26.loc.start.line === t4.loc.end.line;
  }
  function d2(e26) {
    if (!h2(e26)) {
      var t4, r3, i2 = "ArrayExpression" === e26.type ? e26.elements : e26.properties;
      i2 = i2.filter(function(e27) {
        return null !== e27;
      });
      var o3 = p2(e26);
      if (a2(e26)) {
        var l3 = e26.parent;
        if (t4 = n2(l3).goodChar, o3 && o3.loc.start.line === e26.loc.start.line) o3 || function(e27) {
          return !("ArrayExpression" !== e27.type || !e27.elements[0]) && e27.elements[0].loc.start.line === e27.loc.start.line && "ObjectExpression" === e27.elements[0].type;
        }(l3) || "MemberExpression" === l3.type || "ExpressionStatement" === l3.type || "AssignmentExpression" === l3.type || "Property" === l3.type || (t4 += b2);
        else if ("VariableDeclarator" !== l3.type || o3 === o3.parent.declarations[0]) if ("VariableDeclarator" === l3.type && o3.loc.start.line === l3.loc.start.line) t4 += b2 * E2.VariableDeclarator[o3.parent.kind];
        else if ("ObjectExpression" === l3.type || "ArrayExpression" === l3.type) {
          var d3 = "ObjectExpression" === e26.parent.type ? e26.parent.properties : e26.parent.elements;
          d3[0] && d3[0].loc.start.line === l3.loc.start.line && d3[0].loc.end.line !== l3.loc.start.line || ("number" == typeof E2[l3.type] ? t4 += E2[l3.type] * b2 : t4 = d3[0].loc.start.column);
        } else "CallExpression" === l3.type || "NewExpression" === l3.type ? "number" == typeof E2.CallExpression.arguments ? t4 += E2.CallExpression.arguments * b2 : "first" === E2.CallExpression.arguments ? -1 !== l3.arguments.indexOf(e26) && (t4 = l3.arguments[0].loc.start.column) : t4 += b2 : ("LogicalExpression" === l3.type || "ArrowFunctionExpression" === l3.type) && (t4 += b2);
        c2(e26, t4);
      } else t4 = n2(e26).goodChar;
      r3 = "first" === E2[e26.type] ? i2.length ? i2[0].loc.start.column : 0 : t4 + b2 * E2[e26.type], f2(e26, o3) && (r3 += b2 * E2.VariableDeclarator[o3.parent.kind]), s2(i2, r3), 0 < i2.length && i2[i2.length - 1].loc.end.line === e26.loc.end.line || u2(e26, t4 + (f2(e26, o3) ? E2.VariableDeclarator[o3.parent.kind] * b2 : 0));
    }
  }
  function m2(e26) {
    if (!h2(e26)) if (!e26.parent || "FunctionExpression" !== e26.parent.type && "FunctionDeclaration" !== e26.parent.type && "ArrowFunctionExpression" !== e26.parent.type) {
      var t4, r3;
      r3 = e26.parent && -1 !== ["IfStatement", "WhileStatement", "ForStatement", "ForInStatement", "ForOfStatement", "DoWhileStatement", "ClassDeclaration", "TryStatement"].indexOf(e26.parent.type) && function(e27) {
        return "BlockStatement" === e27.type || "ClassBody" === e27.type || e27.body && "BlockStatement" === e27.body.type || e27.consequent && "BlockStatement" === e27.consequent.type;
      }(e26) ? n2(e26.parent).goodChar : e26.parent && "CatchClause" === e26.parent.type ? n2(e26.parent.parent).goodChar : n2(e26).goodChar, 0 < (t4 = "IfStatement" === e26.type && "BlockStatement" !== e26.consequent.type ? [e26.consequent] : Array.isArray(e26.body) ? e26.body : [e26.body]).length && s2(t4, r3 + b2), "BlockStatement" === e26.type && u2(e26, r3);
    } else !function(e27) {
      var t5, r4 = e27.parent;
      if (t5 = !r4.parent || "Property" !== r4.parent.type && "ArrayExpression" !== r4.parent.type ? n2(r4).goodChar : n2(r4, false).goodChar, "CallExpression" === r4.parent.type) {
        var i2 = r4.parent;
        "FunctionExpression" !== r4.type && "ArrowFunctionExpression" !== r4.type ? i2 && i2.loc.start.line < e27.loc.start.line && (t5 = n2(i2).goodChar) : function(e28) {
          var t6 = e28.parent;
          return !!(2 <= t6.arguments.length && t6.arguments[1] === e28) && t6.arguments[0].loc.end.line > t6.arguments[0].loc.start.line;
        }(r4) && i2.callee.loc.start.line === i2.callee.loc.end.line && !a2(r4) && (t5 = n2(i2).goodChar);
      }
      var o3 = b2;
      null !== E2.outerIIFEBody && function(e28) {
        var t6 = e28.parent, r5 = t6.parent;
        if ("CallExpression" !== t6.type || t6.callee !== e28) return false;
        for (; "UnaryExpression" === r5.type && ("!" === r5.operator || "~" === r5.operator || "+" === r5.operator || "-" === r5.operator) || "AssignmentExpression" === r5.type || "LogicalExpression" === r5.type || "SequenceExpression" === r5.type || "VariableDeclarator" === r5.type; ) r5 = r5.parent;
        return ("ExpressionStatement" === r5.type || "VariableDeclaration" === r5.type) && r5.parent && "Program" === r5.parent.type;
      }(r4) ? o3 = E2.outerIIFEBody * b2 : "FunctionExpression" === r4.type ? o3 = E2.FunctionExpression.body * b2 : "FunctionDeclaration" === r4.type && (o3 = E2.FunctionDeclaration.body * b2), t5 += o3;
      var c3 = p2(e27);
      c3 && f2(e27, c3) && (t5 += b2 * E2.VariableDeclarator[c3.parent.kind]), 0 < e27.body.length && s2(e27.body, t5), u2(e27, t5 - o3);
    }(e26);
  }
  function g2(e26) {
    "BlockStatement" !== e26.body.type && m2(e26);
  }
  function y2(e26, t4) {
    var r3, i2 = "SwitchStatement" === e26.type ? e26 : e26.parent, a3 = void 0 === t4 ? n2(i2).goodChar : t4;
    return D2[i2.loc.start.line] ? D2[i2.loc.start.line] : (r3 = 0 < i2.cases.length && 0 === E2.SwitchCase ? a3 : a3 + b2 * E2.SwitchCase, D2[i2.loc.start.line] = r3, r3);
  }
  var v2 = null, x2 = "space", b2 = 4, E2 = { SwitchCase: 0, VariableDeclarator: { var: 1, let: 1, const: 1 }, outerIIFEBody: null, FunctionDeclaration: { parameters: v2, body: 1 }, FunctionExpression: { parameters: v2, body: 1 }, CallExpression: { arguments: v2 }, ArrayExpression: 1, ObjectExpression: 1 }, C3 = e25.getSourceCode();
  if (e25.options.length && ("tab" === e25.options[0] ? (b2 = 1, x2 = "tab") : "number" == typeof e25.options[0] && (b2 = e25.options[0], x2 = "space"), e25.options[1])) {
    var S3 = e25.options[1];
    E2.SwitchCase = S3.SwitchCase || 0;
    var k2 = S3.VariableDeclarator;
    "number" == typeof k2 ? E2.VariableDeclarator = { var: k2, let: k2, const: k2 } : "object" == i(k2) && Object.assign(E2.VariableDeclarator, k2), "number" == typeof S3.outerIIFEBody && (E2.outerIIFEBody = S3.outerIIFEBody), "number" == typeof S3.MemberExpression && (E2.MemberExpression = S3.MemberExpression), "object" == i(S3.FunctionDeclaration) && Object.assign(E2.FunctionDeclaration, S3.FunctionDeclaration), "object" == i(S3.FunctionExpression) && Object.assign(E2.FunctionExpression, S3.FunctionExpression), "object" == i(S3.CallExpression) && Object.assign(E2.CallExpression, S3.CallExpression), ("number" == typeof S3.ArrayExpression || "string" == typeof S3.ArrayExpression) && (E2.ArrayExpression = S3.ArrayExpression), ("number" == typeof S3.ObjectExpression || "string" == typeof S3.ObjectExpression) && (E2.ObjectExpression = S3.ObjectExpression);
  }
  var D2 = {};
  return { Program: function(e26) {
    0 < e26.body.length && s2(e26.body, n2(e26).goodChar);
  }, ClassBody: m2, BlockStatement: m2, WhileStatement: g2, ForStatement: g2, ForInStatement: g2, ForOfStatement: g2, DoWhileStatement: g2, IfStatement: function(e26) {
    "BlockStatement" !== e26.consequent.type && e26.consequent.loc.start.line > e26.loc.start.line && m2(e26);
  }, VariableDeclaration: function(e26) {
    e26.declarations[e26.declarations.length - 1].loc.start.line > e26.declarations[0].loc.start.line && function(e27) {
      var t4 = function(e28) {
        return e28.declarations.reduce(function(t5, r4) {
          var n3 = t5[t5.length - 1];
          return (r4.loc.start.line !== e28.loc.start.line && !n3 || n3 && n3.loc.start.line !== r4.loc.start.line) && t5.push(r4), t5;
        }, []);
      }(e27), r3 = n2(e27).goodChar, i2 = t4[t4.length - 1], a3 = r3 + b2 * E2.VariableDeclarator[e27.kind];
      if (s2(t4, a3), !(C3.getLastToken(e27).loc.end.line <= i2.loc.end.line)) {
        var o3 = C3.getTokenBefore(i2);
        "," === o3.value ? u2(e27, n2(o3).goodChar) : u2(e27, a3 - b2);
      }
    }(e26);
  }, ObjectExpression: function(e26) {
    d2(e26);
  }, ArrayExpression: function(e26) {
    d2(e26);
  }, MemberExpression: function(e26) {
    if (void 0 !== E2.MemberExpression && !h2(e26) && !l2(e26, "VariableDeclarator", ["FunctionExpression", "ArrowFunctionExpression"]) && !l2(e26, "AssignmentExpression", ["FunctionExpression"])) {
      var t4 = n2(e26).goodChar + b2 * E2.MemberExpression, r3 = [e26.property], i2 = C3.getTokenBefore(e26.property);
      "Punctuator" === i2.type && "." === i2.value && r3.push(i2), s2(r3, t4);
    }
  }, SwitchStatement: function(e26) {
    var t4 = n2(e26).goodChar, r3 = y2(e26, t4);
    s2(e26.cases, r3), u2(e26, t4);
  }, SwitchCase: function(e26) {
    if (!h2(e26)) {
      var t4 = y2(e26);
      s2(e26.consequent, t4 + b2);
    }
  }, FunctionDeclaration: function(e26) {
    h2(e26) || ("first" === E2.FunctionDeclaration.parameters && e26.params.length ? s2(e26.params.slice(1), e26.params[0].loc.start.column) : null !== E2.FunctionDeclaration.parameters && s2(e26.params, n2(e26).goodChar + b2 * E2.FunctionDeclaration.parameters));
  }, FunctionExpression: function(e26) {
    h2(e26) || ("first" === E2.FunctionExpression.parameters && e26.params.length ? s2(e26.params.slice(1), e26.params[0].loc.start.column) : null !== E2.FunctionExpression.parameters && s2(e26.params, n2(e26).goodChar + b2 * E2.FunctionExpression.parameters));
  }, ReturnStatement: function(e26) {
    if (!h2(e26)) {
      var t4 = n2(e26).goodChar;
      !function(e27) {
        var t5 = C3.getText(e27).replace(C3.getText(e27.argument), "");
        return /^return[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*?\([\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*?\);*?/.test(t5);
      }(e26) ? o2(e26, t4) : function(e27, t5) {
        var i2 = C3.getLastToken(e27, LA.isClosingParenToken);
        if (!C3.getText(i2, i2.loc.start.column).slice(0, -1).trim()) {
          var a3 = n2(i2, true);
          a3.goodChar !== t5 && r2(e27, t5, a3.space, a3.tab, { line: i2.loc.start.line, column: i2.loc.start.column }, true);
        }
      }(e26, t4);
    }
  }, CallExpression: function(e26) {
    h2(e26) || ("first" === E2.CallExpression.arguments && e26.arguments.length ? s2(e26.arguments.slice(1), e26.arguments[0].loc.start.column) : null !== E2.CallExpression.arguments && s2(e26.arguments, n2(e26).goodChar + b2 * E2.CallExpression.arguments));
  } };
} };
var t_ = /* @__PURE__ */ new Set(["AssignmentExpression", "AssignmentPattern", "ArrayExpression", "ArrayPattern", "ArrowFunctionExpression", "AwaitExpression", "BlockStatement", "BinaryExpression", "BreakStatement", "CallExpression", "CatchClause", "ClassBody", "ClassDeclaration", "ClassExpression", "ConditionalExpression", "ContinueStatement", "DoWhileStatement", "DebuggerStatement", "EmptyStatement", "ExperimentalRestProperty", "ExperimentalSpreadProperty", "ExpressionStatement", "ForStatement", "ForInStatement", "ForOfStatement", "FunctionDeclaration", "FunctionExpression", "Identifier", "IfStatement", "Literal", "LabeledStatement", "LogicalExpression", "MemberExpression", "MetaProperty", "MethodDefinition", "NewExpression", "ObjectExpression", "ObjectPattern", "Program", "Property", "RestElement", "ReturnStatement", "SequenceExpression", "SpreadElement", "Super", "SwitchCase", "SwitchStatement", "TaggedTemplateExpression", "TemplateElement", "TemplateLiteral", "ThisExpression", "ThrowStatement", "TryStatement", "UnaryExpression", "UpdateExpression", "VariableDeclaration", "VariableDeclarator", "WhileStatement", "WithStatement", "YieldExpression", "JSXFragment", "JSXOpeningFragment", "JSXClosingFragment", "JSXIdentifier", "JSXNamespacedName", "JSXMemberExpression", "JSXEmptyExpression", "JSXExpressionContainer", "JSXElement", "JSXClosingElement", "JSXOpeningElement", "JSXAttribute", "JSXSpreadAttribute", "JSXText", "ExportDefaultDeclaration", "ExportNamedDeclaration", "ExportAllDeclaration", "ExportSpecifier", "ImportDeclaration", "ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier", "ImportExpression"]);
var r_ = function() {
  function e25() {
    a(this, e25), this._rbTree = TA();
  }
  return s(e25, [{ key: "insert", value: function(e26, t3) {
    var r2 = this._rbTree.find(e26);
    this._rbTree = r2.valid ? r2.update(t3) : this._rbTree.insert(e26, t3);
  } }, { key: "findLe", value: function(e26) {
    var t3 = this._rbTree.le(e26);
    return t3 && { key: t3.key, value: t3.value };
  } }, { key: "deleteRange", value: function(e26, t3) {
    if (e26 !== t3) for (var r2 = this._rbTree.ge(e26); r2.valid && r2.key < t3; ) this._rbTree = this._rbTree.remove(r2.key), r2.next();
  } }]), e25;
}();
var n_ = function() {
  function e25(t3) {
    a(this, e25), this.sourceCode = t3, this.firstTokensByLineNumber = t3.tokensAndComments.reduce(function(e26, r2) {
      return e26.has(r2.loc.start.line) || e26.set(r2.loc.start.line, r2), !e26.has(r2.loc.end.line) && t3.text.slice(r2.range[1] - r2.loc.end.column, r2.range[1]).trim() && e26.set(r2.loc.end.line, r2), e26;
    }, /* @__PURE__ */ new Map());
  }
  return s(e25, [{ key: "getFirstTokenOfLine", value: function(e26) {
    return this.firstTokensByLineNumber.get(e26.loc.start.line);
  } }, { key: "isFirstTokenOfLine", value: function(e26) {
    return this.getFirstTokenOfLine(e26) === e26;
  } }, { key: "getTokenIndent", value: function(e26) {
    return this.sourceCode.text.slice(e26.range[0] - e26.loc.start.column, e26.range[0]);
  } }]), e25;
}();
var i_ = function() {
  function e25(t3, r2, n2) {
    a(this, e25), this._tokenInfo = t3, this._indentSize = r2, this._indentType = n2, this._tree = new r_(), this._tree.insert(0, { offset: 0, from: null, force: false }), this._lockedFirstTokens = /* @__PURE__ */ new WeakMap(), this._desiredIndentCache = /* @__PURE__ */ new WeakMap(), this._ignoredTokens = /* @__PURE__ */ new WeakSet();
  }
  return s(e25, [{ key: "_getOffsetDescriptor", value: function(e26) {
    return this._tree.findLe(e26.range[0]).value;
  } }, { key: "matchOffsetOf", value: function(e26, t3) {
    this._lockedFirstTokens.set(t3, e26);
  } }, { key: "setDesiredOffset", value: function(e26, t3, r2) {
    return this.setDesiredOffsets(e26.range, t3, r2);
  } }, { key: "setDesiredOffsets", value: function(e26, t3, r2, n2) {
    var i2 = { offset: r2, from: t3, force: n2 }, a2 = this._tree.findLe(e26[1]).value, o2 = t3 && t3.range[0] >= e26[0] && t3.range[1] <= e26[1], s2 = o2 && this._getOffsetDescriptor(t3);
    this._tree.deleteRange(e26[0] + 1, e26[1]), this._tree.insert(e26[0], i2), o2 && (this._tree.insert(t3.range[0], s2), this._tree.insert(t3.range[1], i2)), this._tree.insert(e26[1], a2);
  } }, { key: "getDesiredIndent", value: function(e26) {
    if (!this._desiredIndentCache.has(e26)) if (this._ignoredTokens.has(e26)) this._desiredIndentCache.set(e26, this._tokenInfo.getTokenIndent(e26));
    else if (this._lockedFirstTokens.has(e26)) {
      var t3 = this._lockedFirstTokens.get(e26);
      this._desiredIndentCache.set(e26, this.getDesiredIndent(this._tokenInfo.getFirstTokenOfLine(t3)) + this._indentType.repeat(t3.loc.start.column - this._tokenInfo.getFirstTokenOfLine(t3).loc.start.column));
    } else {
      var r2 = this._getOffsetDescriptor(e26), n2 = !r2.from || r2.from.loc.start.line !== e26.loc.start.line || /^[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*?\n/.test(e26.value) || r2.force ? r2.offset * this._indentSize : 0;
      this._desiredIndentCache.set(e26, (r2.from ? this.getDesiredIndent(r2.from) : "") + this._indentType.repeat(n2));
    }
    return this._desiredIndentCache.get(e26);
  } }, { key: "ignoreToken", value: function(e26) {
    this._tokenInfo.isFirstTokenOfLine(e26) && this._ignoredTokens.add(e26);
  } }, { key: "getFirstDependency", value: function(e26) {
    return this._getOffsetDescriptor(e26).from;
  } }]), e25;
}();
var a_ = { oneOf: [{ type: "integer", minimum: 0 }, { enum: ["first", "off"] }] };
var o_ = { meta: { type: "layout", docs: { description: "enforce consistent indentation", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/indent" }, fixable: "whitespace", schema: [{ oneOf: [{ enum: ["tab"] }, { type: "integer", minimum: 0 }] }, { type: "object", properties: { SwitchCase: { type: "integer", minimum: 0, default: 0 }, VariableDeclarator: { oneOf: [a_, { type: "object", properties: { var: a_, let: a_, const: a_ }, additionalProperties: false }] }, outerIIFEBody: { type: "integer", minimum: 0 }, MemberExpression: { oneOf: [{ type: "integer", minimum: 0 }, { enum: ["off"] }] }, FunctionDeclaration: { type: "object", properties: { parameters: a_, body: { type: "integer", minimum: 0 } }, additionalProperties: false }, FunctionExpression: { type: "object", properties: { parameters: a_, body: { type: "integer", minimum: 0 } }, additionalProperties: false }, CallExpression: { type: "object", properties: { arguments: a_ }, additionalProperties: false }, ArrayExpression: a_, ObjectExpression: a_, ImportDeclaration: a_, flatTernaryExpressions: { type: "boolean", default: false }, ignoredNodes: { type: "array", items: { type: "string", not: { pattern: ":exit$" } } }, ignoreComments: { type: "boolean", default: false } }, additionalProperties: false }], messages: { wrongIndentation: "Expected indentation of {{expected}} but found {{actual}}." } }, create: function(e25) {
  function t3(e26, t4, r3) {
    var n3 = "".concat(e26, " ").concat(p2).concat(1 === e26 ? "" : "s"), i3 = "space".concat(1 === t4 ? "" : "s"), a3 = "tab".concat(1 === r3 ? "" : "s");
    return { expected: n3, actual: 0 < t4 ? "space" === p2 ? t4 : "".concat(t4, " ").concat(i3) : 0 < r3 ? "tab" === p2 ? r3 : "".concat(r3, " ").concat(a3) : "0" };
  }
  function r2(r3, n3) {
    var i3 = Array.from(m2.getTokenIndent(r3)), a3 = i3.filter(function(e26) {
      return " " === e26;
    }).length, o3 = i3.filter(function(e26) {
      return "	" === e26;
    }).length;
    e25.report({ node: r3, messageId: "wrongIndentation", data: t3(n3.length, a3, o3), loc: { start: { line: r3.loc.start.line, column: 0 }, end: { line: r3.loc.start.line, column: r3.loc.start.column } }, fix: function(e26) {
      var t4 = [r3.range[0] - r3.loc.start.column, r3.range[0]];
      return e26.replaceTextRange(t4, n3);
    } });
  }
  function n2(e26, t4) {
    var r3 = m2.getTokenIndent(e26);
    return r3 === t4 || r3.includes(" ") && r3.includes("	");
  }
  function i2(e26, t4, r3, n3) {
    function i3(e27) {
      for (var r4 = d2.getTokenBefore(e27); LA.isOpeningParenToken(r4) && r4 !== t4; ) r4 = d2.getTokenBefore(r4);
      return d2.getTokenAfter(r4);
    }
    g2.setDesiredOffsets([t4.range[1], r3.range[0]], t4, "number" == typeof n3 ? n3 : 1), g2.setDesiredOffset(r3, t4, 0), "first" === n3 && e26.length && !e26[0] || e26.forEach(function(r4, a3) {
      if (r4 && ("off" === n3 && g2.ignoreToken(i3(r4)), 0 !== a3)) if ("first" === n3 && m2.isFirstTokenOfLine(i3(r4))) g2.matchOffsetOf(i3(e26[0]), i3(r4));
      else {
        var o3 = e26[a3 - 1], s3 = o3 && i3(o3), u2 = o3 && d2.getLastToken(o3);
        o3 && u2.loc.end.line - function(e27) {
          var t5 = e27.match(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*$/)[0].match(LA.createGlobalLinebreakMatcher());
          return null === t5 ? 0 : t5.length;
        }(u2.value) > t4.loc.end.line && g2.setDesiredOffsets([o3.range[1], r4.range[1]], s3, 0);
      }
    });
  }
  function a2(e26) {
    if ("BlockStatement" !== e26.type) {
      for (var t4 = d2.getTokenBefore(e26, LA.isNotOpeningParenToken), r3 = d2.getFirstToken(e26), n3 = d2.getLastToken(e26); LA.isOpeningParenToken(d2.getTokenBefore(r3)) && LA.isClosingParenToken(d2.getTokenAfter(n3)); ) r3 = d2.getTokenBefore(r3), n3 = d2.getTokenAfter(n3);
      g2.setDesiredOffsets([r3.range[0], n3.range[1]], t4, 1);
      var i3 = d2.getLastToken(e26);
      "EmptyStatement" !== e26.type && LA.isSemicolonToken(i3) && g2.setDesiredOffset(i3, t4, 0);
    }
  }
  function o2(e26) {
    var t4 = e26.arguments.length ? d2.getFirstTokenBetween(e26.callee, e26.arguments[0], LA.isOpeningParenToken) : d2.getLastToken(e26, 1), r3 = d2.getLastToken(e26);
    y2.add(t4), y2.add(r3), g2.setDesiredOffset(t4, d2.getTokenBefore(t4), 0), i2(e26.arguments, t4, r3, h2.CallExpression.arguments);
  }
  function s2(e26) {
    var t4 = new Set(d2.getTokens(e26, { includeComments: true }));
    t4.forEach(function(e27) {
      if (!t4.has(g2.getFirstDependency(e27))) {
        var r3 = m2.getFirstTokenOfLine(e27);
        e27 === r3 ? g2.ignoreToken(e27) : g2.setDesiredOffset(e27, r3, 0);
      }
    });
  }
  function c2(e26, t4) {
    var r3 = e26.loc.end.line, n3 = t4.loc.start.line;
    if (r3 === n3 || r3 === n3 - 1) return false;
    for (var i3 = r3 + 1; i3 < n3; ++i3) if (!m2.firstTokensByLineNumber.has(i3)) return true;
    return false;
  }
  function l2(e26) {
    C3.add(e26), v2.add(d2.getFirstToken(e26));
  }
  var p2 = "space", f2 = 4, h2 = { SwitchCase: 0, VariableDeclarator: { var: 1, let: 1, const: 1 }, outerIIFEBody: 1, FunctionDeclaration: { parameters: 1, body: 1 }, FunctionExpression: { parameters: 1, body: 1 }, CallExpression: { arguments: 1 }, MemberExpression: 1, ArrayExpression: 1, ObjectExpression: 1, ImportDeclaration: 1, flatTernaryExpressions: false, ignoredNodes: [], ignoreComments: false };
  e25.options.length && ("tab" === e25.options[0] ? (f2 = 1, p2 = "tab") : (f2 = e25.options[0], p2 = "space"), e25.options[1] && (Object.assign(h2, e25.options[1]), ("number" == typeof h2.VariableDeclarator || "first" === h2.VariableDeclarator) && (h2.VariableDeclarator = { var: h2.VariableDeclarator, let: h2.VariableDeclarator, const: h2.VariableDeclarator })));
  var d2 = e25.getSourceCode(), m2 = new n_(d2), g2 = new i_(m2, f2, "space" == p2 ? " " : "	"), y2 = /* @__PURE__ */ new WeakSet(), v2 = /* @__PURE__ */ new Set(), x2 = { "ArrayExpression, ArrayPattern": function(e26) {
    var t4 = d2.getFirstToken(e26), r3 = d2.getTokenAfter(Fy.lodash.findLast(e26.elements) || t4, LA.isClosingBracketToken);
    i2(e26.elements, t4, r3, h2.ArrayExpression);
  }, "ObjectExpression, ObjectPattern": function(e26) {
    var t4 = d2.getFirstToken(e26), r3 = d2.getTokenAfter(e26.properties.length ? e26.properties[e26.properties.length - 1] : t4, LA.isClosingBraceToken);
    i2(e26.properties, t4, r3, h2.ObjectExpression);
  }, ArrowFunctionExpression: function(e26) {
    var t4 = d2.getFirstToken(e26);
    if (LA.isOpeningParenToken(t4)) {
      var r3 = t4, n3 = d2.getTokenBefore(e26.body, LA.isClosingParenToken);
      y2.add(r3), y2.add(n3), i2(e26.params, r3, n3, h2.FunctionExpression.parameters);
    }
    a2(e26.body);
  }, AssignmentExpression: function(e26) {
    var t4 = d2.getFirstTokenBetween(e26.left, e26.right, function(t5) {
      return t5.value === e26.operator;
    });
    g2.setDesiredOffsets([t4.range[0], e26.range[1]], d2.getLastToken(e26.left), 1), g2.ignoreToken(t4), g2.ignoreToken(d2.getTokenAfter(t4));
  }, "BinaryExpression, LogicalExpression": function(e26) {
    var t4 = d2.getFirstTokenBetween(e26.left, e26.right, function(t5) {
      return t5.value === e26.operator;
    }), r3 = d2.getTokenAfter(t4);
    g2.ignoreToken(t4), g2.ignoreToken(r3), g2.setDesiredOffset(r3, t4, 0);
  }, "BlockStatement, ClassBody": function(e26) {
    var t4;
    t4 = e26.parent && function(e27) {
      if (!e27.parent || "CallExpression" !== e27.parent.type || e27.parent.callee !== e27) return false;
      for (var t5 = e27.parent && e27.parent.parent; "UnaryExpression" === t5.type && -1 < ["!", "~", "+", "-"].indexOf(t5.operator) || "AssignmentExpression" === t5.type || "LogicalExpression" === t5.type || "SequenceExpression" === t5.type || "VariableDeclarator" === t5.type; ) t5 = t5.parent;
      return ("ExpressionStatement" === t5.type || "VariableDeclaration" === t5.type) && "Program" === t5.parent.type;
    }(e26.parent) ? h2.outerIIFEBody : !e26.parent || "FunctionExpression" !== e26.parent.type && "ArrowFunctionExpression" !== e26.parent.type ? e26.parent && "FunctionDeclaration" === e26.parent.type ? h2.FunctionDeclaration.body : 1 : h2.FunctionExpression.body, LA.STATEMENT_LIST_PARENTS.has(e26.parent.type) || g2.setDesiredOffset(d2.getFirstToken(e26), d2.getFirstToken(e26.parent), 0), i2(e26.body, d2.getFirstToken(e26), d2.getLastToken(e26), t4);
  }, CallExpression: o2, "ClassDeclaration[superClass], ClassExpression[superClass]": function(e26) {
    var t4 = d2.getFirstToken(e26), r3 = d2.getTokenBefore(e26.superClass, LA.isNotOpeningParenToken);
    g2.setDesiredOffsets([r3.range[0], e26.body.range[0]], t4, 1);
  }, ConditionalExpression: function(e26) {
    var t4 = d2.getFirstToken(e26);
    if (!h2.flatTernaryExpressions || !LA.isTokenOnSameLine(e26.test, e26.consequent) || function(e27, t5) {
      for (var r4 = t5; r4.parent && !r4.parent.type.endsWith("Statement") && !r4.parent.type.endsWith("Declaration"); ) r4 = r4.parent;
      return !(r4 = r4.parent) || r4.loc.start.line === e27.loc.start.line;
    }(t4, e26)) {
      var r3 = d2.getFirstTokenBetween(e26.test, e26.consequent, function(e27) {
        return "Punctuator" === e27.type && "?" === e27.value;
      }), n3 = d2.getFirstTokenBetween(e26.consequent, e26.alternate, function(e27) {
        return "Punctuator" === e27.type && ":" === e27.value;
      }), i3 = d2.getTokenAfter(r3), a3 = d2.getTokenBefore(n3), o3 = d2.getTokenAfter(n3);
      g2.setDesiredOffset(r3, t4, 1), g2.setDesiredOffset(n3, t4, 1), g2.setDesiredOffset(i3, t4, 1), a3.loc.end.line === o3.loc.start.line ? g2.setDesiredOffset(o3, i3, 0) : g2.setDesiredOffset(o3, t4, 1);
    }
  }, "DoWhileStatement, WhileStatement, ForInStatement, ForOfStatement": function(e26) {
    return a2(e26.body);
  }, ExportNamedDeclaration: function(e26) {
    if (null === e26.declaration) {
      var t4 = d2.getLastToken(e26, LA.isClosingBraceToken);
      i2(e26.specifiers, d2.getFirstToken(e26, { skip: 1 }), t4, 1), e26.source && g2.setDesiredOffsets([t4.range[1], e26.range[1]], d2.getFirstToken(e26), 1);
    }
  }, ForStatement: function(e26) {
    var t4 = d2.getFirstToken(e26, 1);
    e26.init && g2.setDesiredOffsets(e26.init.range, t4, 1), e26.test && g2.setDesiredOffsets(e26.test.range, t4, 1), e26.update && g2.setDesiredOffsets(e26.update.range, t4, 1), a2(e26.body);
  }, "FunctionDeclaration, FunctionExpression": function(e26) {
    var t4 = d2.getTokenBefore(e26.body), r3 = d2.getTokenBefore(e26.params.length ? e26.params[0] : t4);
    y2.add(r3), y2.add(t4), i2(e26.params, r3, t4, h2[e26.type].parameters);
  }, IfStatement: function(e26) {
    a2(e26.consequent), e26.alternate && "IfStatement" !== e26.alternate.type && a2(e26.alternate);
  }, ImportDeclaration: function(e26) {
    if (e26.specifiers.some(function(e27) {
      return "ImportSpecifier" === e27.type;
    })) {
      var t4 = d2.getFirstToken(e26, LA.isOpeningBraceToken), r3 = d2.getLastToken(e26, LA.isClosingBraceToken);
      i2(e26.specifiers.filter(function(e27) {
        return "ImportSpecifier" === e27.type;
      }), t4, r3, h2.ImportDeclaration);
    }
    var n3 = d2.getLastToken(e26, function(e27) {
      return "Identifier" === e27.type && "from" === e27.value;
    }), a3 = d2.getLastToken(e26, function(e27) {
      return "String" === e27.type;
    }), o3 = d2.getLastToken(e26, function(e27) {
      return "Punctuator" === e27.type && ";" === e27.value;
    });
    if (n3) {
      var s3 = o3 && o3.range[1] === a3.range[1] ? e26.range[1] : a3.range[1];
      g2.setDesiredOffsets([n3.range[0], s3], d2.getFirstToken(e26), 1);
    }
  }, ImportExpression: function(e26) {
    var t4 = d2.getFirstToken(e26, 1), r3 = d2.getLastToken(e26);
    y2.add(t4), y2.add(r3), g2.setDesiredOffset(t4, d2.getTokenBefore(t4), 0), i2([e26.source], t4, r3, h2.CallExpression.arguments);
  }, "MemberExpression, JSXMemberExpression, MetaProperty": function(e26) {
    var t4 = "MetaProperty" === e26.type ? e26.meta : e26.object, r3 = d2.getFirstTokenBetween(t4, e26.property, LA.isNotClosingParenToken), n3 = d2.getTokenAfter(r3), i3 = d2.getTokensBetween(t4, e26.property, { filter: LA.isClosingParenToken }).length, a3 = i3 ? d2.getTokenBefore(t4, { skip: i3 - 1 }) : d2.getFirstToken(t4), o3 = d2.getTokenBefore(r3), s3 = e26.computed ? r3 : n3;
    e26.computed && (g2.setDesiredOffset(d2.getLastToken(e26), r3, 0), g2.setDesiredOffsets(e26.property.range, r3, 1));
    var u2 = o3.loc.end.line === s3.loc.start.line ? o3 : a3;
    "number" == typeof h2.MemberExpression ? (g2.setDesiredOffset(r3, u2, h2.MemberExpression), g2.setDesiredOffset(n3, e26.computed ? r3 : u2, h2.MemberExpression)) : (g2.ignoreToken(r3), g2.ignoreToken(n3), g2.setDesiredOffset(r3, u2, 0), g2.setDesiredOffset(n3, r3, 0));
  }, NewExpression: function(e26) {
    (0 < e26.arguments.length || LA.isClosingParenToken(d2.getLastToken(e26)) && LA.isOpeningParenToken(d2.getLastToken(e26, 1))) && o2(e26);
  }, Property: function(e26) {
    if (!e26.shorthand && !e26.method && "init" === e26.kind) {
      var t4 = d2.getFirstTokenBetween(e26.key, e26.value, LA.isColonToken);
      g2.ignoreToken(d2.getTokenAfter(t4));
    }
  }, SwitchStatement: function(e26) {
    var t4 = d2.getTokenAfter(e26.discriminant, LA.isOpeningBraceToken), r3 = d2.getLastToken(e26);
    g2.setDesiredOffsets([t4.range[1], r3.range[0]], t4, h2.SwitchCase), e26.cases.length && d2.getTokensBetween(e26.cases[e26.cases.length - 1], r3, { includeComments: true, filter: LA.isCommentToken }).forEach(function(e27) {
      return g2.ignoreToken(e27);
    });
  }, SwitchCase: function(e26) {
    if (1 !== e26.consequent.length || "BlockStatement" !== e26.consequent[0].type) {
      var t4 = d2.getFirstToken(e26), r3 = d2.getTokenAfter(e26);
      g2.setDesiredOffsets([t4.range[1], r3.range[0]], t4, 1);
    }
  }, TemplateLiteral: function(e26) {
    e26.expressions.forEach(function(t4, r3) {
      var n3 = e26.quasis[r3], i3 = e26.quasis[r3 + 1], a3 = n3.loc.start.line === n3.loc.end.line ? d2.getFirstToken(n3) : null;
      g2.setDesiredOffsets([n3.range[1], i3.range[0]], a3, 1), g2.setDesiredOffset(d2.getFirstToken(i3), a3, 0);
    });
  }, VariableDeclaration: function(e26) {
    var t4 = Object.prototype.hasOwnProperty.call(h2.VariableDeclarator, e26.kind) ? h2.VariableDeclarator[e26.kind] : 1, r3 = d2.getFirstToken(e26), n3 = d2.getLastToken(e26);
    if ("first" === h2.VariableDeclarator[e26.kind]) {
      if (1 < e26.declarations.length) return void i2(e26.declarations, r3, n3, "first");
      t4 = 1;
    }
    e26.declarations[e26.declarations.length - 1].loc.start.line > e26.loc.start.line ? g2.setDesiredOffsets(e26.range, r3, t4, true) : g2.setDesiredOffsets(e26.range, r3, t4), LA.isSemicolonToken(n3) && g2.ignoreToken(n3);
  }, VariableDeclarator: function(e26) {
    if (e26.init) {
      var t4 = d2.getTokenBefore(e26.init, LA.isNotOpeningParenToken), r3 = d2.getTokenAfter(t4);
      g2.ignoreToken(t4), g2.ignoreToken(r3), g2.setDesiredOffsets([r3.range[0], e26.range[1]], t4, 1), g2.setDesiredOffset(t4, d2.getLastToken(e26.id), 0);
    }
  }, "JSXAttribute[value]": function(e26) {
    var t4 = d2.getFirstTokenBetween(e26.name, e26.value, function(e27) {
      return "Punctuator" === e27.type && "=" === e27.value;
    });
    g2.setDesiredOffsets([t4.range[0], e26.value.range[1]], d2.getFirstToken(e26.name), 1);
  }, JSXElement: function(e26) {
    e26.closingElement && i2(e26.children, d2.getFirstToken(e26.openingElement), d2.getFirstToken(e26.closingElement), 1);
  }, JSXOpeningElement: function(e26) {
    var t4, r3 = d2.getFirstToken(e26);
    e26.selfClosing ? (t4 = d2.getLastToken(e26, { skip: 1 }), g2.setDesiredOffset(d2.getLastToken(e26), t4, 0)) : t4 = d2.getLastToken(e26), g2.setDesiredOffsets(e26.name.range, d2.getFirstToken(e26)), i2(e26.attributes, r3, t4, 1);
  }, JSXClosingElement: function(e26) {
    var t4 = d2.getFirstToken(e26);
    g2.setDesiredOffsets(e26.name.range, t4, 1);
  }, JSXFragment: function(e26) {
    var t4 = d2.getFirstToken(e26.openingFragment), r3 = d2.getFirstToken(e26.closingFragment);
    i2(e26.children, t4, r3, 1);
  }, JSXOpeningFragment: function(e26) {
    var t4 = d2.getFirstToken(e26), r3 = d2.getLastToken(e26);
    g2.setDesiredOffsets(e26.range, t4, 1), g2.matchOffsetOf(t4, r3);
  }, JSXClosingFragment: function(e26) {
    var t4 = d2.getFirstToken(e26), r3 = d2.getLastToken(e26, { skip: 1 }), n3 = d2.getLastToken(e26), i3 = LA.isTokenOnSameLine(r3, n3) ? r3 : n3;
    g2.setDesiredOffsets(e26.range, t4, 1), g2.matchOffsetOf(t4, i3);
  }, JSXExpressionContainer: function(e26) {
    var t4 = d2.getFirstToken(e26), r3 = d2.getLastToken(e26);
    g2.setDesiredOffsets([t4.range[1], r3.range[0]], t4, 1);
  }, JSXSpreadAttribute: function(e26) {
    var t4 = d2.getFirstToken(e26), r3 = d2.getLastToken(e26);
    g2.setDesiredOffsets([t4.range[1], r3.range[0]], t4, 1);
  }, "*": function(e26) {
    var t4 = d2.getFirstToken(e26);
    t4 && !v2.has(t4) && g2.setDesiredOffsets(e26.range, t4, 0);
  } }, b2 = [], E2 = Fy.lodash.mapValues(x2, function(e26) {
    return function(t4) {
      return b2.push({ listener: e26, node: t4 });
    };
  }), C3 = /* @__PURE__ */ new Set(), S3 = h2.ignoredNodes.reduce(function(e26, t4) {
    return Object.assign(e26, u({}, t4, l2));
  }, {});
  return Object.assign(E2, S3, { "*:exit": function(e26) {
    t_.has(e26.type) || l2(e26);
  }, "Program:exit": function() {
    h2.ignoreComments && d2.getAllComments().forEach(function(e27) {
      return g2.ignoreToken(e27);
    }), b2.filter(function(e27) {
      return !C3.has(e27.node);
    }).forEach(function(e27) {
      return e27.listener(e27.node);
    }), C3.forEach(s2), function(e27) {
      var t4 = [], r3 = [];
      e27.forEach(function(e28) {
        LA.isOpeningParenToken(e28) ? t4.push(e28) : LA.isClosingParenToken(e28) && r3.unshift({ left: t4.pop(), right: e28 });
      }), r3.forEach(function(e28) {
        var t5 = e28.left, r4 = e28.right;
        if (!y2.has(t5) && !y2.has(r4)) {
          var n3 = new Set(d2.getTokensBetween(t5, r4));
          n3.forEach(function(e29) {
            n3.has(g2.getFirstDependency(e29)) || g2.setDesiredOffset(e29, t5, 1);
          });
        }
        g2.setDesiredOffset(r4, t5, 0);
      });
    }(d2.ast.tokens);
    var e26 = d2.ast.comments.reduce(function(e27, t4) {
      var r3 = d2.getTokenBefore(t4, { includeComments: true });
      return e27.set(t4, e27.has(r3) ? e27.get(r3) : r3);
    }, /* @__PURE__ */ new WeakMap());
    d2.lines.forEach(function(t4, i3) {
      var a3 = i3 + 1;
      if (m2.firstTokensByLineNumber.has(a3)) {
        var o3 = m2.firstTokensByLineNumber.get(a3);
        if (o3.loc.start.line === a3) {
          if (LA.isCommentToken(o3)) {
            var s3 = e26.get(o3), u2 = s3 ? d2.getTokenAfter(s3) : d2.ast.tokens[0], l3 = s3 && !c2(s3, o3), p3 = u2 && !c2(o3, u2);
            if (u2 && LA.isSemicolonToken(u2) && !LA.isTokenOnSameLine(o3, u2) && g2.setDesiredOffset(o3, u2, 0), l3 && n2(o3, g2.getDesiredIndent(s3)) || p3 && n2(o3, g2.getDesiredIndent(u2))) return;
          }
          n2(o3, g2.getDesiredIndent(o3)) || r2(o3, g2.getDesiredIndent(o3));
        }
      }
    });
  } });
} };
function s_(e25) {
  return "ForInStatement" === e25.type || "ForOfStatement" === e25.type || "ForStatement" === e25.type;
}
function u_(e25) {
  var t3 = e25.parent, r2 = t3.parent;
  return s_(r2) ? "ForStatement" === r2.type ? r2.init === t3 : r2.left === t3 : !!e25.init;
}
var c_ = { meta: { type: "suggestion", docs: { description: "require or disallow initialization in variable declarations", category: "Variables", recommended: false, url: "https://eslint.org/docs/rules/init-declarations" }, schema: { anyOf: [{ type: "array", items: [{ enum: ["always"] }], minItems: 0, maxItems: 1 }, { type: "array", items: [{ enum: ["never"] }, { type: "object", properties: { ignoreForLoopInit: { type: "boolean" } }, additionalProperties: false }], minItems: 0, maxItems: 2 }] }, messages: { initialized: "Variable '{{idName}}' should be initialized on declaration.", notInitialized: "Variable '{{idName}}' should not be initialized on declaration." } }, create: function(e25) {
  var t3 = e25.options[0] || "always", r2 = e25.options[1] || {};
  return { "VariableDeclaration:exit": function(n2) {
    for (var i2 = n2.kind, a2 = n2.declarations, o2 = 0; o2 < a2.length; ++o2) {
      var s2 = a2[o2], u2 = s2.id, c2 = u_(s2), l2 = r2.ignoreForLoopInit && s_(n2.parent), p2 = "";
      "always" !== t3 || c2 ? "never" === t3 && "const" !== i2 && c2 && !l2 && (p2 = "notInitialized") : p2 = "initialized", "Identifier" === u2.type && p2 && e25.report({ node: s2, messageId: p2, data: { idName: u2.name } });
    }
  } };
} };
var l_ = { "prefer-double": { quote: '"', description: "singlequote", convert: function(e25) {
  return e25.replace(/'/g, '"');
} }, "prefer-single": { quote: "'", description: "doublequote", convert: function(e25) {
  return e25.replace(/"/g, "'");
} } };
var p_ = { meta: { type: "layout", docs: { description: "enforce the consistent use of either double or single quotes in JSX attributes", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/jsx-quotes" }, fixable: "whitespace", schema: [{ enum: ["prefer-single", "prefer-double"] }], messages: { unexpected: "Unexpected usage of {{description}}." } }, create: function(e25) {
  var t3 = e25.options[0] || "prefer-double", r2 = l_[t3];
  return { JSXAttribute: function(t4) {
    var n2 = t4.value;
    n2 && LA.isStringLiteral(n2) && !function(e26) {
      return -1 !== e26.value.indexOf(r2.quote) || LA.isSurroundedBy(e26.raw, r2.quote);
    }(n2) && e25.report({ node: n2, messageId: "unexpected", data: { description: r2.description }, fix: function(e26) {
      return e26.replaceText(n2, r2.convert(n2.raw));
    } });
  } };
} };
function f_(e25) {
  return e25[e25.length - 1];
}
function h_(e25) {
  return e25.loc.end.line === e25.loc.start.line;
}
function d_(e25, t3) {
  return e25.mode = t3.mode || "strict", e25.beforeColon = void 0 === t3.beforeColon ? 0 : +t3.beforeColon, e25.afterColon = void 0 === t3.afterColon ? 1 : +t3.afterColon, void 0 !== t3.align && ("object" == i(t3.align) ? e25.align = t3.align : e25.align = { on: t3.align, mode: e25.mode, beforeColon: e25.beforeColon, afterColon: e25.afterColon }), e25;
}
var m_ = { meta: { type: "layout", docs: { description: "enforce consistent spacing between keys and values in object literal properties", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/key-spacing" }, fixable: "whitespace", schema: [{ anyOf: [{ type: "object", properties: { align: { anyOf: [{ enum: ["colon", "value"] }, { type: "object", properties: { mode: { enum: ["strict", "minimum"] }, on: { enum: ["colon", "value"] }, beforeColon: { type: "boolean" }, afterColon: { type: "boolean" } }, additionalProperties: false }] }, mode: { enum: ["strict", "minimum"] }, beforeColon: { type: "boolean" }, afterColon: { type: "boolean" } }, additionalProperties: false }, { type: "object", properties: { singleLine: { type: "object", properties: { mode: { enum: ["strict", "minimum"] }, beforeColon: { type: "boolean" }, afterColon: { type: "boolean" } }, additionalProperties: false }, multiLine: { type: "object", properties: { align: { anyOf: [{ enum: ["colon", "value"] }, { type: "object", properties: { mode: { enum: ["strict", "minimum"] }, on: { enum: ["colon", "value"] }, beforeColon: { type: "boolean" }, afterColon: { type: "boolean" } }, additionalProperties: false }] }, mode: { enum: ["strict", "minimum"] }, beforeColon: { type: "boolean" }, afterColon: { type: "boolean" } }, additionalProperties: false } }, additionalProperties: false }, { type: "object", properties: { singleLine: { type: "object", properties: { mode: { enum: ["strict", "minimum"] }, beforeColon: { type: "boolean" }, afterColon: { type: "boolean" } }, additionalProperties: false }, multiLine: { type: "object", properties: { mode: { enum: ["strict", "minimum"] }, beforeColon: { type: "boolean" }, afterColon: { type: "boolean" } }, additionalProperties: false }, align: { type: "object", properties: { mode: { enum: ["strict", "minimum"] }, on: { enum: ["colon", "value"] }, beforeColon: { type: "boolean" }, afterColon: { type: "boolean" } }, additionalProperties: false } }, additionalProperties: false }] }], messages: { extraKey: "Extra space after {{computed}}key '{{key}}'.", extraValue: "Extra space before value for {{computed}}key '{{key}}'.", missingKey: "Missing space after {{computed}}key '{{key}}'.", missingValue: "Missing space before value for {{computed}}key '{{key}}'." } }, create: function(e25) {
  function t3(e26) {
    return !(e26.method || e26.shorthand || "init" !== e26.kind || "Property" !== e26.type);
  }
  function r2(e26) {
    var t4 = e26.key;
    return e26.computed ? d2.getText().slice(t4.range[0], t4.range[1]) : e26.key.name || e26.key.value;
  }
  function n2(t4, n3, i2, a3, o3) {
    var s3 = i2.length - a3, u3 = function(e26) {
      return d2.getTokenAfter(e26, LA.isColonToken);
    }(t4.key), c3 = d2.getTokenBefore(u3, { includeComments: true }), l3 = d2.getTokenAfter(u3, { includeComments: true }), p3 = "key" === n3, f3 = p3 ? c3.loc.start : l3.loc.start, h3 = 0 < s3, m2 = Math.abs(s3), g2 = Array(m2 + 1).join(" ");
    if ((s3 && "strict" === o3 || 0 > s3 && "minimum" === o3 || 0 < s3 && !a3 && "minimum" === o3) && (!a3 || !function(e26) {
      return LA.LINEBREAK_MATCHER.test(e26);
    }(i2))) {
      var y2, v2;
      if (h3) v2 = p3 ? [c3.range[1], c3.range[1] + m2] : [l3.range[0] - m2, l3.range[0]], y2 = function(e26) {
        return e26.removeRange(v2);
      };
      else y2 = p3 ? function(e26) {
        return e26.insertTextAfter(c3, g2);
      } : function(e26) {
        return e26.insertTextBefore(l3, g2);
      };
      var x2;
      x2 = h3 ? "key" === n3 ? "extraKey" : "extraValue" : "key" === n3 ? "missingKey" : "missingValue", e25.report({ node: t4[n3], loc: f3, messageId: x2, data: { computed: t4.computed ? "computed " : "", key: r2(t4) }, fix: y2 });
    }
  }
  function a2(e26) {
    var t4 = d2.getFirstToken(e26);
    return function(e27) {
      var t5 = d2.getTokenAfter(e27, LA.isColonToken);
      return d2.getTokenBefore(t5);
    }(e26.key).range[1] - t4.range[0];
  }
  function o2(e26) {
    var t4 = /([\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*):([\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*)/.exec(d2.getText().slice(e26.key.range[1], e26.value.range[0]));
    return t4 ? { beforeColon: t4[1], afterColon: t4[2] } : null;
  }
  function s2(e26) {
    return 1 === e26.properties.length ? [e26.properties] : e26.properties.reduce(function(e27, t4) {
      var r3 = f_(e27), n3 = f_(r3);
      return !n3 || function(e28, t5) {
        var r4 = e28.loc.start.line, n4 = t5.loc.start.line;
        if (1 >= n4 - r4) return true;
        var i2 = d2.getCommentsBefore(t5);
        if (i2.length && 1 >= i2[0].loc.start.line - r4 && 1 >= n4 - f_(i2).loc.end.line) {
          for (var a3 = 1; a3 < i2.length; a3++) if (1 < i2[a3].loc.start.line - i2[a3 - 1].loc.end.line) return false;
          return true;
        }
        return false;
      }(n3, t4) ? r3.push(t4) : e27.push([t4]), e27;
    }, [[]]);
  }
  function u2(e26) {
    s2(e26).forEach(function(e27) {
      !function(e28) {
        var t4, r3, i2, s3 = e28.length, u3 = e28.map(a2), c3 = h2.on, l3 = Math.max.apply(Math, E(u3));
        h2 && 1 < s3 ? (t4 = h2.beforeColon, r3 = h2.afterColon, i2 = h2.mode) : (t4 = p2.beforeColon, r3 = p2.afterColon, i2 = h2.mode), l3 += "colon" === c3 ? t4 : r3;
        for (var f3 = 0; f3 < s3; f3++) {
          var d3 = e28[f3], m2 = o2(d3);
          if (m2) {
            var g2 = u3[f3];
            "value" === c3 ? (n2(d3, "key", m2.beforeColon, t4, i2), n2(d3, "value", m2.afterColon, l3 - g2, i2)) : (n2(d3, "key", m2.beforeColon, l3 - g2, i2), n2(d3, "value", m2.afterColon, r3, i2));
          }
        }
      }(e27.filter(t3));
    });
  }
  function c2(e26, t4) {
    var r3 = o2(e26);
    r3 && (n2(e26, "key", r3.beforeColon, t4.beforeColon, t4.mode), n2(e26, "value", r3.afterColon, t4.afterColon, t4.mode));
  }
  var l2 = function(e26, t4) {
    return "object" == i(t4.align) ? (e26.align = d_({}, t4.align), e26.align.on = t4.align.on || "colon", e26.align.mode = t4.align.mode || "strict", e26.multiLine = d_({}, t4.multiLine || t4), e26.singleLine = d_({}, t4.singleLine || t4)) : (e26.multiLine = d_({}, t4.multiLine || t4), e26.singleLine = d_({}, t4.singleLine || t4), e26.multiLine.align && (e26.align = { on: e26.multiLine.align.on, mode: e26.multiLine.align.mode || e26.multiLine.mode, beforeColon: e26.multiLine.align.beforeColon, afterColon: e26.multiLine.align.afterColon })), e26;
  }({}, e25.options[0] || {}), p2 = l2.multiLine, f2 = l2.singleLine, h2 = l2.align || null, d2 = e25.getSourceCode();
  return h2 ? { ObjectExpression: function(e26) {
    h_(e26) ? function(e27) {
      for (var t4 = e27.length, r3 = 0; r3 < t4; r3++) c2(e27[r3], f2);
    }(e26.properties.filter(t3)) : u2(e26);
  } } : { Property: function(e26) {
    c2(e26, h_(e26.parent) ? f2 : p2);
  } };
} };
var g_ = /^[\)>\]\}]$/;
var y_ = /^(?:[!\(<\[\{~]|\+\+?|\x2D\x2D?)$/;
var v_ = /^[\)\*>\]\}]$/;
var x_ = /^[\*\{]$/;
var b_ = /\$\{$/;
var E_ = /^\}/;
var C_ = /^(?:JSXElement|RegularExpression|String|Template)$/;
var S_ = Aw.concat(["as", "async", "await", "from", "get", "let", "of", "set", "yield"]);
function k_(e25) {
  return "Template" === e25.type && b_.test(e25.value);
}
function D_(e25) {
  return "Template" === e25.type && E_.test(e25.value);
}
!function() {
  S_.sort();
  for (var e25 = 1; e25 < S_.length; ++e25) if (S_[e25] === S_[e25 - 1]) throw new Error("Duplication was found in the keyword list: ".concat(S_[e25]));
}();
var F_ = { meta: { type: "layout", docs: { description: "enforce consistent spacing before and after keywords", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/keyword-spacing" }, fixable: "whitespace", schema: [{ type: "object", properties: { before: { type: "boolean", default: true }, after: { type: "boolean", default: true }, overrides: { type: "object", properties: S_.reduce(function(e25, t3) {
  return e25[t3] = { type: "object", properties: { before: { type: "boolean" }, after: { type: "boolean" } }, additionalProperties: false }, e25;
}, {}), additionalProperties: false } }, additionalProperties: false }], messages: { expectedBefore: 'Expected space(s) before "{{value}}".', expectedAfter: 'Expected space(s) after "{{value}}".', unexpectedBefore: 'Unexpected space(s) before "{{value}}".', unexpectedAfter: 'Unexpected space(s) after "{{value}}".' } }, create: function(e25) {
  function t3(t4, r3) {
    var n3 = m2.getTokenBefore(t4);
    n3 && (C_.test(n3.type) || r3.test(n3.value)) && !k_(n3) && LA.isTokenOnSameLine(n3, t4) && !m2.isSpaceBetweenTokens(n3, t4) && e25.report({ loc: t4.loc.start, messageId: "expectedBefore", data: t4, fix: function(e26) {
      return e26.insertTextBefore(t4, " ");
    } });
  }
  function r2(t4, r3) {
    var n3 = m2.getTokenBefore(t4);
    n3 && (C_.test(n3.type) || r3.test(n3.value)) && !k_(n3) && LA.isTokenOnSameLine(n3, t4) && m2.isSpaceBetweenTokens(n3, t4) && e25.report({ loc: t4.loc.start, messageId: "unexpectedBefore", data: t4, fix: function(e26) {
      return e26.removeRange([n3.range[1], t4.range[0]]);
    } });
  }
  function n2(t4, r3) {
    var n3 = m2.getTokenAfter(t4);
    n3 && (C_.test(n3.type) || r3.test(n3.value)) && !D_(n3) && LA.isTokenOnSameLine(t4, n3) && !m2.isSpaceBetweenTokens(t4, n3) && e25.report({ loc: t4.loc.start, messageId: "expectedAfter", data: t4, fix: function(e26) {
      return e26.insertTextAfter(t4, " ");
    } });
  }
  function i2(t4, r3) {
    var n3 = m2.getTokenAfter(t4);
    n3 && (C_.test(n3.type) || r3.test(n3.value)) && !D_(n3) && LA.isTokenOnSameLine(t4, n3) && m2.isSpaceBetweenTokens(t4, n3) && e25.report({ loc: t4.loc.start, messageId: "unexpectedAfter", data: t4, fix: function(e26) {
      return e26.removeRange([t4.range[1], n3.range[0]]);
    } });
  }
  function a2(e26, t4) {
    g2[e26.value].before(e26, t4 || g_);
  }
  function o2(e26, t4) {
    g2[e26.value].after(e26, t4 || y_);
  }
  function s2(e26) {
    a2(e26), o2(e26);
  }
  function u2(e26) {
    var t4 = e26 && m2.getFirstToken(e26);
    t4 && "Keyword" === t4.type && s2(t4);
  }
  function c2(e26) {
    var t4 = e26 && m2.getFirstToken(e26);
    t4 && "Keyword" === t4.type && a2(t4);
  }
  function l2(e26) {
    e26 && s2(m2.getTokenBefore(e26, LA.isKeywordToken));
  }
  function p2(e26) {
    var t4 = e26 && m2.getFirstToken(e26);
    t4 && ("Keyword" === t4.type && "function" === t4.value || "async" === t4.value) && a2(t4);
  }
  function f2(e26) {
    u2(e26), l2(e26.superClass);
  }
  function h2(e26) {
    var t4 = m2.getFirstToken(e26);
    if (a2(t4, v_), o2(t4, x_), "ExportDefaultDeclaration" === e26.type && s2(m2.getTokenAfter(t4)), e26.source) {
      var r3 = m2.getTokenBefore(e26.source);
      a2(r3, v_), o2(r3, x_);
    }
  }
  function d2(e26) {
    if (e26.static && u2(e26), "get" === e26.kind || "set" === e26.kind || (e26.method || "MethodDefinition" === e26.type) && e26.value.async) {
      var t4 = m2.getTokenBefore(e26.key, function(e27) {
        switch (e27.value) {
          case "get":
          case "set":
          case "async":
            return true;
          default:
            return false;
        }
      });
      if (!t4) throw new Error("Failed to find token get, set, or async beside method name");
      s2(t4);
    }
  }
  var m2 = e25.getSourceCode(), g2 = function() {
    for (var e26 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, a3 = false !== e26.before, o3 = false !== e26.after, s3 = { before: a3 ? t3 : r2, after: o3 ? n2 : i2 }, u3 = e26 && e26.overrides || {}, c3 = /* @__PURE__ */ Object.create(null), l3 = 0; l3 < S_.length; ++l3) {
      var p3 = S_[l3], f3 = u3[p3];
      if (f3) {
        var h3 = "before" in f3 ? f3.before : a3, d3 = "after" in f3 ? f3.after : o3;
        c3[p3] = { before: h3 ? t3 : r2, after: d3 ? n2 : i2 };
      } else c3[p3] = s3;
    }
    return c3;
  }(e25.options[0]);
  return { DebuggerStatement: u2, WithStatement: u2, BreakStatement: u2, ContinueStatement: u2, ReturnStatement: u2, ThrowStatement: u2, TryStatement: function(e26) {
    u2(e26), u2(e26.handler), l2(e26.finalizer);
  }, IfStatement: function(e26) {
    u2(e26), l2(e26.alternate);
  }, SwitchStatement: u2, SwitchCase: u2, DoWhileStatement: function(e26) {
    u2(e26), l2(e26.test);
  }, ForInStatement: function(e26) {
    u2(e26), l2(e26.right);
  }, ForOfStatement: function(e26) {
    e26.await ? (a2(m2.getFirstToken(e26, 0)), o2(m2.getFirstToken(e26, 1))) : u2(e26), s2(m2.getTokenBefore(e26.right, LA.isNotOpeningParenToken));
  }, ForStatement: u2, WhileStatement: u2, ClassDeclaration: f2, ExportNamedDeclaration: h2, ExportDefaultDeclaration: h2, ExportAllDeclaration: h2, FunctionDeclaration: p2, ImportDeclaration: h2, VariableDeclaration: u2, ArrowFunctionExpression: p2, AwaitExpression: function(e26) {
    a2(m2.getFirstToken(e26));
  }, ClassExpression: f2, FunctionExpression: p2, NewExpression: c2, Super: c2, ThisExpression: c2, UnaryExpression: c2, YieldExpression: c2, ImportNamespaceSpecifier: function(e26) {
    a2(m2.getFirstToken(e26, 1), v_);
  }, MethodDefinition: d2, Property: d2 };
} };
var A_ = { meta: { type: "layout", docs: { description: "enforce position of line comments", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/line-comment-position" }, schema: [{ oneOf: [{ enum: ["above", "beside"] }, { type: "object", properties: { position: { enum: ["above", "beside"] }, ignorePattern: { type: "string" }, applyDefaultPatterns: { type: "boolean" }, applyDefaultIgnorePatterns: { type: "boolean" } }, additionalProperties: false }] }], messages: { above: "Expected comment to be above code.", beside: "Expected comment to be beside code." } }, create: function(e25) {
  var t3, r2, n2 = e25.options[0], i2 = true;
  n2 && "string" != typeof n2 ? (t3 = !n2.position || "above" === n2.position, r2 = n2.ignorePattern, i2 = Object.prototype.hasOwnProperty.call(n2, "applyDefaultIgnorePatterns") ? n2.applyDefaultIgnorePatterns : false !== n2.applyDefaultPatterns) : t3 = !n2 || "above" === n2;
  var a2 = LA.COMMENTS_IGNORE_PATTERN, o2 = /^[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*falls?[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]?through/, s2 = new RegExp(r2, "u"), u2 = e25.getSourceCode();
  return { Program: function() {
    u2.getAllComments().filter(function(e26) {
      return "Line" === e26.type;
    }).forEach(function(n3) {
      if (!(i2 && (a2.test(n3.value) || o2.test(n3.value)) || r2 && s2.test(n3.value))) {
        var c2 = u2.getTokenBefore(n3, { includeComments: true }), l2 = c2 && c2.loc.end.line === n3.loc.start.line;
        t3 ? l2 && e25.report({ node: n3, messageId: "above" }) : !l2 && e25.report({ node: n3, messageId: "beside" });
      }
    });
  } };
} };
var w_ = { meta: { type: "layout", docs: { description: "enforce consistent linebreak style", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/linebreak-style" }, fixable: "whitespace", schema: [{ enum: ["unix", "windows"] }], messages: { expectedLF: "Expected linebreaks to be 'LF' but found 'CRLF'.", expectedCRLF: "Expected linebreaks to be 'CRLF' but found 'LF'." } }, create: function(e25) {
  function t3(e26, t4) {
    return function(r3) {
      return r3.replaceTextRange(e26, t4);
    };
  }
  var r2 = e25.getSourceCode();
  return { Program: function(n2) {
    for (var i2, a2 = "unix" === (e25.options[0] || "unix"), o2 = a2 ? "\n" : "\r\n", s2 = r2.getText(), u2 = LA.createGlobalLinebreakMatcher(), c2 = 0; null !== (i2 = u2.exec(s2)); ) if (c2++, i2[0] !== o2) {
      var l2 = i2.index, p2 = [l2, l2 + i2[0].length];
      e25.report({ node: n2, loc: { line: c2, column: r2.lines[c2 - 1].length }, messageId: a2 ? "expectedLF" : "expectedCRLF", fix: t3(p2, o2) });
    }
  } };
} };
var __ = { meta: { type: "layout", docs: { description: "require empty lines around comments", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/lines-around-comment" }, fixable: "whitespace", schema: [{ type: "object", properties: { beforeBlockComment: { type: "boolean", default: true }, afterBlockComment: { type: "boolean", default: false }, beforeLineComment: { type: "boolean", default: false }, afterLineComment: { type: "boolean", default: false }, allowBlockStart: { type: "boolean", default: false }, allowBlockEnd: { type: "boolean", default: false }, allowClassStart: { type: "boolean" }, allowClassEnd: { type: "boolean" }, allowObjectStart: { type: "boolean" }, allowObjectEnd: { type: "boolean" }, allowArrayStart: { type: "boolean" }, allowArrayEnd: { type: "boolean" }, ignorePattern: { type: "string" }, applyDefaultIgnorePatterns: { type: "boolean" } }, additionalProperties: false }], messages: { after: "Expected line after comment.", before: "Expected line before comment." } }, create: function(e25) {
  function t3(e26, t4) {
    return e26.type === t4 || e26.body && e26.body.type === t4 || e26.consequent && e26.consequent.type === t4;
  }
  function r2(e26) {
    return x2.getNodeByRangeIndex(e26.range[0]);
  }
  function n2(e26, n3) {
    var i3 = r2(e26);
    return i3 && t3(i3, n3) && 1 == e26.loc.start.line - i3.loc.start.line;
  }
  function i2(e26, n3) {
    var i3 = r2(e26);
    return i3 && t3(i3, n3) && 1 == i3.loc.end.line - e26.loc.end.line;
  }
  function a2(e26) {
    return n2(e26, "ClassBody") || n2(e26, "BlockStatement") || n2(e26, "SwitchCase");
  }
  function o2(e26) {
    return i2(e26, "ClassBody") || i2(e26, "BlockStatement") || i2(e26, "SwitchCase") || i2(e26, "SwitchStatement");
  }
  function s2(e26) {
    return n2(e26, "ClassBody");
  }
  function u2(e26) {
    return i2(e26, "ClassBody");
  }
  function c2(e26) {
    return n2(e26, "ObjectExpression") || n2(e26, "ObjectPattern");
  }
  function l2(e26) {
    return i2(e26, "ObjectExpression") || i2(e26, "ObjectPattern");
  }
  function p2(e26) {
    return n2(e26, "ArrayExpression") || n2(e26, "ArrayPattern");
  }
  function f2(e26) {
    return i2(e26, "ArrayExpression") || i2(e26, "ArrayPattern");
  }
  function h2(t4, r3) {
    if (!(v2 && g2.test(t4.value) || m2 && y2.test(t4.value))) {
      var n3 = r3.after, i3 = r3.before, h3 = t4.loc.start.line - 1, b3 = t4.loc.end.line + 1, C4 = function(e26) {
        var t5 = e26;
        do {
          t5 = x2.getTokenBefore(t5, { includeComments: true });
        } while (t5 && LA.isCommentToken(t5));
        if (t5 && LA.isTokenOnSameLine(t5, e26)) return true;
        t5 = e26;
        do {
          t5 = x2.getTokenAfter(t5, { includeComments: true });
        } while (t5 && LA.isCommentToken(t5));
        return !(!t5 || !LA.isTokenOnSameLine(e26, t5));
      }(t4), S4 = d2.allowBlockStart && a2(t4) && !(false === d2.allowClassStart && s2(t4)), k3 = d2.allowBlockEnd && o2(t4) && !(false === d2.allowClassEnd && u2(t4)), F2 = d2.allowClassStart && s2(t4), A2 = d2.allowClassEnd && u2(t4), w2 = d2.allowObjectStart && c2(t4), _2 = d2.allowObjectEnd && l2(t4), T2 = d2.allowArrayStart && p2(t4), P2 = d2.allowArrayEnd && f2(t4);
      if (1 > h3 && (i3 = false), b3 >= E2 && (n3 = false), !C4) {
        var I2 = x2.getTokenBefore(t4, { includeComments: true }), B2 = x2.getTokenAfter(t4, { includeComments: true });
        if (!(S4 || F2 || w2 || T2) && i3 && !Fy.lodash.includes(D2, h3) && (!LA.isCommentToken(I2) || !LA.isTokenOnSameLine(I2, t4))) {
          var O2 = t4.range[0] - t4.loc.start.column, L2 = [O2, O2];
          e25.report({ node: t4, messageId: "before", fix: function(e26) {
            return e26.insertTextBeforeRange(L2, "\n");
          } });
        }
        k3 || A2 || _2 || P2 || !n3 || Fy.lodash.includes(D2, b3) || LA.isCommentToken(B2) && LA.isTokenOnSameLine(t4, B2) || e25.report({ node: t4, messageId: "after", fix: function(e26) {
          return e26.insertTextAfter(t4, "\n");
        } });
      }
    }
  }
  var d2 = Object.assign({}, e25.options[0]), m2 = d2.ignorePattern, g2 = LA.COMMENTS_IGNORE_PATTERN, y2 = new RegExp(m2, "u"), v2 = false !== d2.applyDefaultIgnorePatterns;
  d2.beforeBlockComment = !(void 0 !== d2.beforeBlockComment) || d2.beforeBlockComment;
  var x2 = e25.getSourceCode(), b2 = x2.lines, E2 = b2.length + 1, C3 = x2.getAllComments(), S3 = function(e26) {
    var t4 = [];
    return e26.forEach(function(e27) {
      var r3 = e27.loc.start.line, n3 = e27.loc.end.line;
      t4.push(r3, n3);
    }), t4;
  }(C3), k2 = function(e26) {
    return e26.map(function(e27, t4) {
      return { code: e27.trim(), num: t4 + 1 };
    }).filter(function(e27) {
      return !e27.code;
    }).map(function(e27) {
      return e27.num;
    });
  }(b2), D2 = S3.concat(k2);
  return { Program: function() {
    C3.forEach(function(e26) {
      "Line" === e26.type ? (d2.beforeLineComment || d2.afterLineComment) && h2(e26, { after: d2.afterLineComment, before: d2.beforeLineComment }) : "Block" === e26.type && (d2.beforeBlockComment || d2.afterBlockComment) && h2(e26, { after: d2.afterBlockComment, before: d2.beforeBlockComment });
    });
  } };
} };
var T_ = { meta: { type: "layout", docs: { description: "require or disallow newlines around directives", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/lines-around-directive" }, schema: [{ oneOf: [{ enum: ["always", "never"] }, { type: "object", properties: { before: { enum: ["always", "never"] }, after: { enum: ["always", "never"] } }, additionalProperties: false, minProperties: 2 }] }], fixable: "whitespace", messages: { expected: 'Expected newline {{location}} "{{value}}" directive.', unexpected: 'Unexpected newline {{location}} "{{value}}" directive.' }, deprecated: true, replacedBy: ["padding-line-between-statements"] }, create: function(e25) {
  function t3(e26) {
    var t4 = o2.getTokenBefore(e26, { includeComments: true }), r3 = t4 ? t4.loc.end.line : 0;
    return 2 <= e26.loc.start.line - r3;
  }
  function r2(e26) {
    var t4 = o2.getLastToken(e26), r3 = o2.getTokenBefore(t4);
    return LA.isSemicolonToken(t4) && t4.loc.start.line > r3.loc.end.line ? r3 : t4;
  }
  function n2(e26) {
    var t4 = r2(e26);
    return 2 <= o2.getTokenAfter(t4, { includeComments: true }).loc.start.line - t4.loc.end.line;
  }
  function i2(t4, n3, i3) {
    e25.report({ node: t4, messageId: i3 ? "expected" : "unexpected", data: { value: t4.expression.value, location: n3 }, fix: function(e26) {
      var a3 = r2(t4);
      return i3 ? "before" === n3 ? e26.insertTextBefore(t4, "\n") : e26.insertTextAfter(a3, "\n") : e26.removeRange("before" === n3 ? [t4.range[0] - 1, t4.range[0]] : [a3.range[1], a3.range[1] + 1]);
    } });
  }
  function a2(e26) {
    var r3 = LA.getDirectivePrologue(e26);
    if (r3.length) {
      var a3 = r3[0], s3 = o2.getCommentsBefore(a3);
      s3.length ? ("always" === u2 && !t3(a3) && i2(a3, "before", true), "never" === u2 && t3(a3) && i2(a3, "before", false)) : "Program" === e26.type && "never" === u2 && !s3.length && t3(a3) && i2(a3, "before", false);
      var l2 = r3[r3.length - 1], p2 = "Program" === e26.type ? e26.body : e26.body.body;
      (l2 !== p2[p2.length - 1] || l2.trailingComments) && ("always" === c2 && !n2(l2) && i2(l2, "after", true), "never" === c2 && n2(l2) && i2(l2, "after", false));
    }
  }
  var o2 = e25.getSourceCode(), s2 = e25.options[0] || "always", u2 = "string" == typeof s2 ? s2 : s2.before, c2 = "string" == typeof s2 ? s2 : s2.after;
  return { Program: a2, FunctionDeclaration: a2, FunctionExpression: a2, ArrowFunctionExpression: a2 };
} };
var P_ = { meta: { type: "layout", docs: { description: "require or disallow an empty line between class members", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/lines-between-class-members" }, fixable: "whitespace", schema: [{ enum: ["always", "never"] }, { type: "object", properties: { exceptAfterSingleLine: { type: "boolean", default: false } }, additionalProperties: false }], messages: { never: "Unexpected blank line between class members.", always: "Expected blank line between class members." } }, create: function(e25) {
  var t3 = [];
  t3[0] = e25.options[0] || "always", t3[1] = e25.options[1] || { exceptAfterSingleLine: false };
  var r2 = e25.getSourceCode();
  return { ClassBody: function(n2) {
    for (var i2 = n2.body, a2 = function(n3) {
      var a3 = r2.getFirstToken(i2[n3]), o3 = r2.getLastToken(i2[n3]), s2 = r2.getFirstToken(i2[n3 + 1]), u2 = function(e26, t4) {
        var n4 = r2.getCommentsBefore(t4), i3 = n4.length;
        if (0 === i3) return 1 <= t4.loc.start.line - e26.loc.end.line - 1;
        for (var a4 = 0, o4 = -1, s3 = 0; s3 < i3; s3++) {
          a4 += n4[s3].loc.end.line - n4[s3].loc.start.line + 1, o4 === n4[s3].loc.start.line && (a4 -= 1), o4 = n4[s3].loc.end.line;
        }
        return e26.loc.end.line === n4[0].loc.start.line && (a4 -= 1), n4[i3 - 1].loc.end.line === t4.loc.start.line && (a4 -= 1), 1 <= t4.loc.start.line - e26.loc.end.line - 1 - a4;
      }(o3, s2), c2 = !!LA.isTokenOnSameLine(a3, o3) && t3[1].exceptAfterSingleLine;
      ("always" !== t3[0] || c2 || u2) && ("never" !== t3[0] || !u2) || e25.report({ node: i2[n3 + 1], messageId: u2 ? "never" : "always", fix: function(e26) {
        return u2 ? e26.replaceTextRange([o3.range[1], s2.range[0]], "\n") : e26.insertTextAfter(o3, "\n");
      } });
    }, o2 = 0; o2 < i2.length - 1; o2++) a2(o2);
  } };
} };
var I_ = { meta: { type: "suggestion", docs: { description: "enforce a maximum depth that blocks can be nested", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/max-depth" }, schema: [{ oneOf: [{ type: "integer", minimum: 0 }, { type: "object", properties: { maximum: { type: "integer", minimum: 0 }, max: { type: "integer", minimum: 0 } }, additionalProperties: false }] }], messages: { tooDeeply: "Blocks are nested too deeply ({{depth}}). Maximum allowed is {{maxDepth}}." } }, create: function(e25) {
  function t3() {
    o2.push(0);
  }
  function r2() {
    o2.pop();
  }
  function n2(t4) {
    var r3 = ++o2[o2.length - 1];
    r3 > u2 && e25.report({ node: t4, messageId: "tooDeeply", data: { depth: r3, maxDepth: u2 } });
  }
  function a2() {
    o2[o2.length - 1]--;
  }
  var o2 = [], s2 = e25.options[0], u2 = 4;
  return "object" == i(s2) && (Object.prototype.hasOwnProperty.call(s2, "maximum") || Object.prototype.hasOwnProperty.call(s2, "max")) && (u2 = s2.maximum || s2.max), "number" == typeof s2 && (u2 = s2), { Program: t3, FunctionDeclaration: t3, FunctionExpression: t3, ArrowFunctionExpression: t3, IfStatement: function(e26) {
    "IfStatement" !== e26.parent.type && n2(e26);
  }, SwitchStatement: n2, TryStatement: n2, DoWhileStatement: n2, WhileStatement: n2, WithStatement: n2, ForStatement: n2, ForInStatement: n2, ForOfStatement: n2, "IfStatement:exit": a2, "SwitchStatement:exit": a2, "TryStatement:exit": a2, "DoWhileStatement:exit": a2, "WhileStatement:exit": a2, "WithStatement:exit": a2, "ForStatement:exit": a2, "ForInStatement:exit": a2, "ForOfStatement:exit": a2, "FunctionDeclaration:exit": r2, "FunctionExpression:exit": r2, "ArrowFunctionExpression:exit": r2, "Program:exit": r2 };
} };
var B_ = { type: "object", properties: { code: { type: "integer", minimum: 0 }, comments: { type: "integer", minimum: 0 }, tabWidth: { type: "integer", minimum: 0 }, ignorePattern: { type: "string" }, ignoreComments: { type: "boolean" }, ignoreStrings: { type: "boolean" }, ignoreUrls: { type: "boolean" }, ignoreTemplateLiterals: { type: "boolean" }, ignoreRegExpLiterals: { type: "boolean" }, ignoreTrailingComments: { type: "boolean" } }, additionalProperties: false };
var O_ = { anyOf: [B_, { type: "integer", minimum: 0 }] };
var L_ = { meta: { type: "layout", docs: { description: "enforce a maximum line length", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/max-len" }, schema: [O_, O_, B_], messages: { max: "This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.", maxComment: "This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}." } }, create: function(e25) {
  function t3(e26, t4, r3) {
    return r3 && r3.loc.start.line === t4 && t4 <= r3.loc.end.line && (r3.loc.end.line > t4 || r3.loc.end.column === e26.length);
  }
  function r2(e26, t4) {
    return e26.slice(0, t4.loc.start.column).replace(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+$/, "");
  }
  function n2(e26, t4, r3) {
    Array.isArray(e26[t4]) || (e26[t4] = []), e26[t4].push(r3);
  }
  function i2(e26, t4) {
    for (var r3 = t4.loc.start.line; r3 <= t4.loc.end.line; ++r3) n2(e26, r3, t4);
    return e26;
  }
  var a2 = /(?:[\0-"\$-\.0-9;->@-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]):\/\/(?:[\0-"\$->@-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/, o2 = e25.getSourceCode(), s2 = Object.assign({}, e25.options[e25.options.length - 1]);
  "number" == typeof e25.options[0] && (s2.code = e25.options[0]), "number" == typeof e25.options[1] && (s2.tabWidth = e25.options[1]);
  var u2 = "number" == typeof s2.code ? s2.code : 80, c2 = "number" == typeof s2.tabWidth ? s2.tabWidth : 4, l2 = !!s2.ignoreComments, p2 = !!s2.ignoreStrings, f2 = !!s2.ignoreTemplateLiterals, h2 = !!s2.ignoreRegExpLiterals, d2 = !!s2.ignoreTrailingComments || !!s2.ignoreComments, m2 = !!s2.ignoreUrls, g2 = s2.comments, y2 = s2.ignorePattern || null;
  return y2 && (y2 = new RegExp(y2, "u")), { Program: function(n3) {
    var s3 = o2.lines, v2 = l2 || g2 || d2 ? o2.getAllComments() : [], x2 = 0, b2 = o2.ast.tokens.filter(function(e26) {
      return "String" === e26.type || "JSXText" === e26.type && "JSXAttribute" === o2.getNodeByRangeIndex(e26.range[0] - 1).type;
    }).reduce(i2, {}), E2 = o2.ast.tokens.filter(function(e26) {
      return "Template" === e26.type;
    }).reduce(i2, {}), C3 = o2.ast.tokens.filter(function(e26) {
      return "RegularExpression" === e26.type;
    }).reduce(i2, {});
    s3.forEach(function(i3, o3) {
      var s4, S3 = o3 + 1, k2 = false;
      if (x2 < v2.length) {
        var D2 = null;
        do {
          D2 = v2[++x2];
        } while (D2 && D2.loc.start.line <= S3);
        if (function(e26, t4, r3) {
          var n4 = r3.loc.start, i4 = r3.loc.end, a3 = !e26.slice(0, r3.loc.start.column).trim();
          return r3 && (n4.line < t4 || n4.line === t4 && a3) && (i4.line > t4 || i4.line === t4 && i4.column === e26.length);
        }(i3, S3, D2 = v2[--x2])) k2 = true, s4 = i3;
        else if (d2 && t3(i3, S3, D2)) {
          s4 = r2(i3, D2);
          for (var F2 = x2; t3(s4, S3, v2[--F2]); ) s4 = r2(s4, v2[F2]);
        } else s4 = i3;
      } else s4 = i3;
      if (!(y2 && y2.test(s4) || m2 && a2.test(s4) || p2 && b2[S3] || f2 && E2[S3] || h2 && C3[S3])) {
        var A2 = function(e26, t4) {
          var r3 = 0;
          return e26.replace(/\t/g, function(e27, n4) {
            r3 += t4 - (t4 ? (n4 + r3) % t4 : 0) - 1;
          }), Array.from(e26).length + r3;
        }(s4, c2);
        k2 && l2 || (k2 && g2 ? A2 > g2 && e25.report({ node: n3, loc: { line: S3, column: 0 }, messageId: "maxComment", data: { lineLength: A2, maxCommentLength: g2 } }) : A2 > u2 && e25.report({ node: n3, loc: { line: S3, column: 0 }, messageId: "max", data: { lineLength: A2, maxLength: u2 } }));
      }
    });
  } };
} };
var N_ = { meta: { type: "suggestion", docs: { description: "enforce a maximum number of line of code in a function", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/max-lines-per-function" }, schema: [{ oneOf: [{ type: "object", properties: { max: { type: "integer", minimum: 0 }, skipComments: { type: "boolean" }, skipBlankLines: { type: "boolean" }, IIFEs: { type: "boolean" } }, additionalProperties: false }, { type: "integer", minimum: 1 }] }], messages: { exceed: "{{name}} has too many lines ({{lineCount}}). Maximum allowed is {{maxLines}}." } }, create: function(e25) {
  function t3(e26, t4, r3) {
    var n3 = r3.loc.start, i2 = r3.loc.end, a3 = n3.line === t4 && !e26.slice(0, n3.column).trim(), o3 = i2.line === t4 && !e26.slice(i2.column).trim();
    return r3 && (n3.line < t4 || a3) && (i2.line > t4 || o3);
  }
  function r2(r3) {
    var n3 = function(e26) {
      return !(!e26.parent || e26 !== e26.parent.value || "MethodDefinition" !== e26.parent.type && ("Property" !== e26.parent.type || true !== e26.parent.method && "get" !== e26.parent.kind && "set" !== e26.parent.kind));
    }(r3) ? r3.parent : r3;
    if (l2 || !function(e26) {
      return "FunctionExpression" === e26.type && e26.parent && "CallExpression" === e26.parent.type && e26.parent.callee === e26;
    }(n3)) {
      for (var i2 = 0, o3 = n3.loc.start.line - 1; o3 < n3.loc.end.line; ++o3) {
        var f2 = a2[o3];
        u2 && p2.has(o3 + 1) && t3(f2, o3 + 1, p2.get(o3 + 1)) || c2 && f2.match(/^[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*$/) || i2++;
      }
      if (i2 > s2) {
        var h2 = Fy.lodash.upperFirst(LA.getFunctionNameWithKind(r3));
        e25.report({ node: n3, messageId: "exceed", data: { name: h2, lineCount: i2, maxLines: s2 } });
      }
    }
  }
  var n2 = e25.getSourceCode(), a2 = n2.lines, o2 = e25.options[0], s2 = 50, u2 = false, c2 = false, l2 = false;
  "object" == i(o2) ? (s2 = "number" == typeof o2.max ? o2.max : 50, u2 = !!o2.skipComments, c2 = !!o2.skipBlankLines, l2 = !!o2.IIFEs) : "number" == typeof o2 && (s2 = o2);
  var p2 = function(e26) {
    var t4 = /* @__PURE__ */ new Map();
    return e26 ? (e26.forEach(function(e27) {
      for (var r3 = e27.loc.start.line; r3 <= e27.loc.end.line; r3++) t4.set(r3, e27);
    }), t4) : t4;
  }(n2.getAllComments());
  return { FunctionDeclaration: r2, FunctionExpression: r2, ArrowFunctionExpression: r2 };
} };
var j_ = { meta: { type: "suggestion", docs: { description: "enforce a maximum number of lines per file", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/max-lines" }, schema: [{ oneOf: [{ type: "integer", minimum: 0 }, { type: "object", properties: { max: { type: "integer", minimum: 0 }, skipComments: { type: "boolean" }, skipBlankLines: { type: "boolean" } }, additionalProperties: false }] }], messages: { exceed: "File has too many lines ({{actual}}). Maximum allowed is {{max}}." } }, create: function(e25) {
  function t3(e26) {
    return e26 && ("Block" === e26.type || "Line" === e26.type);
  }
  function r2(e26) {
    var r3, n3 = e26.loc.start.line, i2 = e26.loc.end.line;
    r3 = e26;
    do {
      r3 = u2.getTokenBefore(r3, { includeComments: true });
    } while (t3(r3));
    r3 && LA.isTokenOnSameLine(r3, e26) && (n3 += 1), r3 = e26;
    do {
      r3 = u2.getTokenAfter(r3, { includeComments: true });
    } while (t3(r3));
    return r3 && LA.isTokenOnSameLine(e26, r3) && (i2 -= 1), n3 <= i2 ? Fy.lodash.range(n3, i2 + 1) : [];
  }
  var n2 = e25.options[0], a2 = 300;
  "object" == i(n2) && Object.prototype.hasOwnProperty.call(n2, "max") ? a2 = n2.max : "number" == typeof n2 && (a2 = n2);
  var o2 = n2 && n2.skipComments, s2 = n2 && n2.skipBlankLines, u2 = e25.getSourceCode();
  return { "Program:exit": function() {
    var t4 = u2.lines.map(function(e26, t5) {
      return { lineNumber: t5 + 1, text: e26 };
    });
    if (s2 && (t4 = t4.filter(function(e26) {
      return "" !== e26.text.trim();
    })), o2) {
      var n3 = u2.getAllComments(), i2 = Fy.lodash.flatten(n3.map(function(e26) {
        return r2(e26);
      }));
      t4 = t4.filter(function(e26) {
        return !Fy.lodash.includes(i2, e26.lineNumber);
      });
    }
    t4.length > a2 && e25.report({ loc: { line: 1, column: 0 }, messageId: "exceed", data: { max: a2, actual: t4.length } });
  } };
} };
var R_ = { meta: { type: "suggestion", docs: { description: "enforce a maximum depth that callbacks can be nested", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/max-nested-callbacks" }, schema: [{ oneOf: [{ type: "integer", minimum: 0 }, { type: "object", properties: { maximum: { type: "integer", minimum: 0 }, max: { type: "integer", minimum: 0 } }, additionalProperties: false }] }], messages: { exceed: "Too many nested callbacks ({{num}}). Maximum allowed is {{max}}." } }, create: function(e25) {
  function t3(t4) {
    if ("CallExpression" === t4.parent.type && o2.push(t4), o2.length > a2) {
      var r3 = { num: o2.length, max: a2 };
      e25.report({ node: t4, messageId: "exceed", data: r3 });
    }
  }
  function r2() {
    o2.pop();
  }
  var n2 = e25.options[0], a2 = 10;
  "object" == i(n2) && (Object.prototype.hasOwnProperty.call(n2, "maximum") || Object.prototype.hasOwnProperty.call(n2, "max")) ? a2 = n2.maximum || n2.max : "number" == typeof n2 && (a2 = n2);
  var o2 = [];
  return { ArrowFunctionExpression: t3, "ArrowFunctionExpression:exit": r2, FunctionExpression: t3, "FunctionExpression:exit": r2 };
} };
var M_ = { meta: { type: "suggestion", docs: { description: "enforce a maximum number of parameters in function definitions", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/max-params" }, schema: [{ oneOf: [{ type: "integer", minimum: 0 }, { type: "object", properties: { maximum: { type: "integer", minimum: 0 }, max: { type: "integer", minimum: 0 } }, additionalProperties: false }] }], messages: { exceed: "{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}." } }, create: function(e25) {
  function t3(t4) {
    t4.params.length > a2 && e25.report({ loc: LA.getFunctionHeadLoc(t4, r2), node: t4, messageId: "exceed", data: { name: Fy.lodash.upperFirst(LA.getFunctionNameWithKind(t4)), count: t4.params.length, max: a2 } });
  }
  var r2 = e25.getSourceCode(), n2 = e25.options[0], a2 = 3;
  return "object" == i(n2) && (Object.prototype.hasOwnProperty.call(n2, "maximum") || Object.prototype.hasOwnProperty.call(n2, "max")) && (a2 = n2.maximum || n2.max), "number" == typeof n2 && (a2 = n2), { FunctionDeclaration: t3, ArrowFunctionExpression: t3, FunctionExpression: t3 };
} };
var V_ = { meta: { type: "layout", docs: { description: "enforce a maximum number of statements allowed per line", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/max-statements-per-line" }, schema: [{ type: "object", properties: { max: { type: "integer", minimum: 1, default: 1 } }, additionalProperties: false }], messages: { exceed: "This line has {{numberOfStatementsOnThisLine}} {{statements}}. Maximum allowed is {{maxStatementsPerLine}}." } }, create: function(e25) {
  function t3() {
    i2 && e25.report({ node: i2, messageId: "exceed", data: { numberOfStatementsOnThisLine: c2, maxStatementsPerLine: s2, statements: 1 === c2 ? "statement" : "statements" } }), i2 = null;
  }
  function r2(e26) {
    var r3 = e26.loc.start.line;
    l2.test(e26.parent.type) && e26.parent.alternate !== e26 || (r3 === u2 ? c2 += 1 : (t3(), c2 = 1, u2 = r3), c2 === s2 + 1 && (i2 = i2 || e26));
  }
  function n2(e26) {
    var r3 = function(e27) {
      return a2.getLastToken(e27, LA.isNotSemicolonToken);
    }(e26).loc.end.line;
    r3 !== u2 && (t3(), c2 = 1, u2 = r3);
  }
  var i2, a2 = e25.getSourceCode(), o2 = e25.options[0] || {}, s2 = void 0 === o2.max ? 1 : o2.max, u2 = 0, c2 = 0, l2 = /^(?:(?:DoWhile|For|ForIn|ForOf|If|Labeled|While)Statement|Export(?:Default|Named)Declaration)$/;
  return { BreakStatement: r2, ClassDeclaration: r2, ContinueStatement: r2, DebuggerStatement: r2, DoWhileStatement: r2, ExpressionStatement: r2, ForInStatement: r2, ForOfStatement: r2, ForStatement: r2, FunctionDeclaration: r2, IfStatement: r2, ImportDeclaration: r2, LabeledStatement: r2, ReturnStatement: r2, SwitchStatement: r2, ThrowStatement: r2, TryStatement: r2, VariableDeclaration: r2, WhileStatement: r2, WithStatement: r2, ExportNamedDeclaration: r2, ExportDefaultDeclaration: r2, ExportAllDeclaration: r2, "BreakStatement:exit": n2, "ClassDeclaration:exit": n2, "ContinueStatement:exit": n2, "DebuggerStatement:exit": n2, "DoWhileStatement:exit": n2, "ExpressionStatement:exit": n2, "ForInStatement:exit": n2, "ForOfStatement:exit": n2, "ForStatement:exit": n2, "FunctionDeclaration:exit": n2, "IfStatement:exit": n2, "ImportDeclaration:exit": n2, "LabeledStatement:exit": n2, "ReturnStatement:exit": n2, "SwitchStatement:exit": n2, "ThrowStatement:exit": n2, "TryStatement:exit": n2, "VariableDeclaration:exit": n2, "WhileStatement:exit": n2, "WithStatement:exit": n2, "ExportNamedDeclaration:exit": n2, "ExportDefaultDeclaration:exit": n2, "ExportAllDeclaration:exit": n2, "Program:exit": t3 };
} };
var U_ = { meta: { type: "suggestion", docs: { description: "enforce a maximum number of statements allowed in function blocks", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/max-statements" }, schema: [{ oneOf: [{ type: "integer", minimum: 0 }, { type: "object", properties: { maximum: { type: "integer", minimum: 0 }, max: { type: "integer", minimum: 0 } }, additionalProperties: false }] }, { type: "object", properties: { ignoreTopLevelFunctions: { type: "boolean" } }, additionalProperties: false }], messages: { exceed: "{{name}} has too many statements ({{count}}). Maximum allowed is {{max}}." } }, create: function(e25) {
  function t3(t4, r3, n3) {
    if (r3 > n3) {
      var i2 = Fy.lodash.upperFirst(LA.getFunctionNameWithKind(t4));
      e25.report({ node: t4, messageId: "exceed", data: { name: i2, count: r3, max: n3 } });
    }
  }
  function r2() {
    a2.push(0);
  }
  function n2(e26) {
    var r3 = a2.pop();
    s2 && 0 === a2.length ? u2.push({ node: e26, count: r3 }) : t3(e26, r3, c2);
  }
  var a2 = [], o2 = e25.options[0], s2 = e25.options[1] && e25.options[1].ignoreTopLevelFunctions || false, u2 = [], c2 = 10;
  return "object" == i(o2) && (Object.prototype.hasOwnProperty.call(o2, "maximum") || Object.prototype.hasOwnProperty.call(o2, "max")) ? c2 = o2.maximum || o2.max : "number" == typeof o2 && (c2 = o2), { FunctionDeclaration: r2, FunctionExpression: r2, ArrowFunctionExpression: r2, BlockStatement: function(e26) {
    a2[a2.length - 1] += e26.body.length;
  }, "FunctionDeclaration:exit": n2, "FunctionExpression:exit": n2, "ArrowFunctionExpression:exit": n2, "Program:exit": function() {
    1 === u2.length || u2.forEach(function(e26) {
      var r3 = e26.count;
      t3(e26.node, r3, c2);
    });
  } };
} };
var q_ = { meta: { type: "suggestion", docs: { description: "enforce a particular style for multiline comments", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/multiline-comment-style" }, fixable: "whitespace", schema: [{ enum: ["starred-block", "separate-lines", "bare-block"] }], messages: { expectedBlock: "Expected a block comment instead of consecutive line comments.", expectedBareBlock: "Expected a block comment without padding stars.", startNewline: "Expected a linebreak after '/*'.", endNewline: "Expected a linebreak before '*/'.", missingStar: "Expected a '*' at the start of this line.", alignment: "Expected this line to be aligned with the start of the comment.", expectedLines: "Expected multiple line comments instead of a block comment." } }, create: function(e25) {
  function t3(e26) {
    var t4 = b(e26, 1)[0];
    if ("Block" !== t4.type) return false;
    var r3 = t4.value.split(LA.LINEBREAK_MATCHER);
    return 0 < r3.length && r3.every(function(e27, t5) {
      return (0 === t5 || t5 === r3.length - 1 ? /^[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*$/ : /^[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*\*/).test(e27);
    });
  }
  function r2(e26) {
    var t4 = b(e26, 1)[0];
    if ("Block" !== t4.type) return false;
    var r3 = t4.value.split(LA.LINEBREAK_MATCHER);
    return /^\*[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*$/.test(r3[0]) && r3.slice(1, -1).every(function(e27) {
      return /^[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]* /.test(e27);
    }) && /^[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*$/.test(r3[r3.length - 1]);
  }
  function n2(e26) {
    var r3 = b(e26, 1)[0];
    return "Line" === r3.type ? function(e27) {
      var t4 = e27.map(function(e28) {
        return e28.value;
      }).filter(function(e28) {
        return e28.trim().length;
      }).every(function(e28) {
        return e28.startsWith(" ");
      });
      return e27.map(function(e28) {
        var r4 = e28.value;
        return t4 ? r4.replace(/^ /, "") : r4;
      });
    }(e26) : t3(e26) ? function(e27) {
      var t4 = e27.value.split(LA.LINEBREAK_MATCHER).filter(function(e28, t5, r5) {
        return 0 !== t5 && t5 !== r5.length - 1;
      }).map(function(e28) {
        return e28.replace(/^[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*$/, "");
      }), r4 = t4.map(function(e28) {
        return e28.replace(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*\*/, "");
      }).filter(function(e28) {
        return e28.trim().length;
      }).every(function(e28) {
        return e28.startsWith(" ");
      });
      return t4.map(function(e28) {
        return e28.replace(r4 ? /[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*\* ?/ : /[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*\*/, "");
      });
    }(r3) : function(e27) {
      var t4 = e27.value.split(LA.LINEBREAK_MATCHER).map(function(e28) {
        return e28.replace(/^[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*$/, "");
      }), r4 = "".concat(o2.text.slice(e27.range[0] - e27.loc.start.column, e27.range[0]), "   "), n3 = "", i3 = true, a3 = false, s3 = void 0;
      try {
        for (var u3, c2 = t4.entries()[Symbol.iterator](); !(i3 = (u3 = c2.next()).done); i3 = true) {
          var l2 = b(u3.value, 2), p2 = l2[0], f2 = l2[1];
          if (f2.trim().length && 0 !== p2) {
            var h2 = b(f2.match(/^([\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*\*?[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*)/), 2)[1];
            if (h2.length < r4.length) {
              var d2 = r4.slice(h2.length - r4.length);
              d2.length > n3.length && (n3 = d2);
            }
          }
        }
      } catch (e28) {
        a3 = true, s3 = e28;
      } finally {
        try {
          i3 || null == c2.return || c2.return();
        } finally {
          if (a3) throw s3;
        }
      }
      return t4.map(function(e28) {
        var t5 = b(e28.match(/^([\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*\*?[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*)((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)/), 3), i4 = t5[1], a4 = t5[2];
        return i4.length > r4.length ? "".concat(i4.slice(r4.length - (n3.length + i4.length))).concat(a4) : i4.length < r4.length ? "".concat(i4.slice(r4.length)).concat(a4) : a4;
      });
    }(r3);
  }
  function i2(e26) {
    return o2.text.slice(e26.range[0] - e26.loc.start.column, e26.range[0]);
  }
  function a2(e26, t4) {
    return "/* ".concat(t4.join("\n".concat(i2(e26), "   ")), " */");
  }
  var o2 = e25.getSourceCode(), s2 = e25.options[0] || "starred-block", u2 = { "starred-block": function(t4) {
    var r3 = b(t4, 1)[0], a3 = n2(t4);
    a3.some(function(e26) {
      return e26.includes("*/");
    }) || (1 < t4.length ? e25.report({ loc: { start: r3.loc.start, end: t4[t4.length - 1].loc.end }, messageId: "expectedBlock", fix: function(e26) {
      var n3 = [r3.range[0], t4[t4.length - 1].range[1]];
      return a3.some(function(e27) {
        return e27.startsWith("/");
      }) ? null : e26.replaceTextRange(n3, function(e27, t5) {
        var r4 = i2(e27);
        return "/*\n".concat(t5.map(function(e28) {
          return "".concat(r4, " * ").concat(e28);
        }).join("\n"), "\n").concat(r4, " */");
      }(r3, a3));
    } }) : function() {
      var t5 = r3.value.split(LA.LINEBREAK_MATCHER), n3 = i2(r3), a4 = "".concat(n3, " *");
      if (!/^\*?[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*$/.test(t5[0])) {
        var s3 = r3.value.startsWith("*") ? r3.range[0] + 1 : r3.range[0];
        e25.report({ loc: { start: r3.loc.start, end: { line: r3.loc.start.line, column: r3.loc.start.column + 2 } }, messageId: "startNewline", fix: function(e26) {
          return e26.insertTextAfterRange([s3, s3 + 2], "\n".concat(a4));
        } });
      }
      /^[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*$/.test(t5[t5.length - 1]) || e25.report({ loc: { start: { line: r3.loc.end.line, column: r3.loc.end.column - 2 }, end: r3.loc.end }, messageId: "endNewline", fix: function(e26) {
        return e26.replaceTextRange([r3.range[1] - 2, r3.range[1]], "\n".concat(a4, "/"));
      } });
      for (var u3 = function(n4) {
        var i3 = o2.lines[n4 - 1], s4 = function(e26) {
          return /^[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*\*/.test(e26);
        }(i3) ? "alignment" : "missingStar";
        i3.startsWith(a4) || e25.report({ loc: { start: { line: n4, column: 0 }, end: { line: n4, column: i3.length } }, messageId: s4, fix: function(e26) {
          var u4 = o2.getIndexFromLoc({ line: n4, column: 0 });
          if ("alignment" === s4) {
            var c3 = b(i3.match(/^([\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*\*)/) || [], 2)[1], l2 = u4 + (void 0 === c3 ? "" : c3).length;
            return e26.replaceTextRange([u4, l2], a4);
          }
          var p2, f2 = b(i3.match(/^([\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*)/) || [], 2)[1], h2 = void 0 === f2 ? "" : f2, d2 = u4 + h2.length, m2 = true, g2 = false, y2 = void 0;
          try {
            for (var v2, x2 = t5.entries()[Symbol.iterator](); !(m2 = (v2 = x2.next()).done); m2 = true) {
              var E2 = b(v2.value, 2), C3 = E2[0], S3 = E2[1];
              if (/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+/.test(S3)) {
                var k2 = b(o2.lines[r3.loc.start.line - 1 + C3].match(/^([\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*(?:\/?\*)?([\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*))/) || [], 3), D2 = k2[1], F2 = void 0 === D2 ? "" : D2, A2 = k2[2], w2 = void 0 === A2 ? "" : A2;
                p2 = "".concat(h2.slice(F2.length)).concat(w2);
                break;
              }
            }
          } catch (e27) {
            g2 = true, y2 = e27;
          } finally {
            try {
              m2 || null == x2.return || x2.return();
            } finally {
              if (g2) throw y2;
            }
          }
          return e26.replaceTextRange([u4, d2], "".concat(a4).concat(p2));
        } });
      }, c2 = r3.loc.start.line + 1; c2 <= r3.loc.end.line; c2++) u3(c2);
    }());
  }, "separate-lines": function(t4) {
    var a3 = b(t4, 1)[0];
    if ("Block" === a3.type && !r2(t4)) {
      var s3 = n2(t4), u3 = o2.getTokenAfter(a3, { includeComments: true });
      u3 && a3.loc.end.line === u3.loc.start.line || e25.report({ loc: { start: a3.loc.start, end: { line: a3.loc.start.line, column: a3.loc.start.column + 2 } }, messageId: "expectedLines", fix: function(e26) {
        return e26.replaceText(a3, function(e27, t5) {
          return t5.map(function(e28) {
            return "// ".concat(e28);
          }).join("\n".concat(i2(e27)));
        }(a3, s3));
      } });
    }
  }, "bare-block": function(i3) {
    if (!r2(i3)) {
      var o3 = b(i3, 1)[0], s3 = n2(i3);
      "Line" === o3.type && 1 < s3.length && !s3.some(function(e26) {
        return e26.includes("*/");
      }) && e25.report({ loc: { start: o3.loc.start, end: i3[i3.length - 1].loc.end }, messageId: "expectedBlock", fix: function(e26) {
        return e26.replaceTextRange([o3.range[0], i3[i3.length - 1].range[1]], a2(o3, s3));
      } }), t3(i3) && e25.report({ loc: { start: o3.loc.start, end: { line: o3.loc.start.line, column: o3.loc.start.column + 2 } }, messageId: "expectedBareBlock", fix: function(e26) {
        return e26.replaceText(o3, a2(o3, s3));
      } });
    }
  } };
  return { Program: function() {
    return o2.getAllComments().filter(function(e26) {
      return "Shebang" !== e26.type;
    }).filter(function(e26) {
      return !LA.COMMENTS_IGNORE_PATTERN.test(e26.value);
    }).filter(function(e26) {
      var t4 = o2.getTokenBefore(e26, { includeComments: true });
      return !t4 || t4.loc.end.line < e26.loc.start.line;
    }).reduce(function(e26, t4, r3, n3) {
      var i3 = o2.getTokenBefore(t4, { includeComments: true });
      return "Line" === t4.type && r3 && "Line" === n3[r3 - 1].type && i3 && i3.loc.end.line === t4.loc.start.line - 1 && i3 === n3[r3 - 1] ? e26[e26.length - 1].push(t4) : e26.push([t4]), e26;
    }, []).filter(function(e26) {
      return 1 !== e26.length || e26[0].loc.start.line !== e26[0].loc.end.line;
    }).forEach(u2[s2]);
  } };
} };
var W_ = { meta: { type: "layout", docs: { description: "enforce newlines between operands of ternary expressions", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/multiline-ternary" }, schema: [{ enum: ["always", "always-multiline", "never"] }], messages: { expectedTestCons: "Expected newline between test and consequent of ternary expression.", expectedConsAlt: "Expected newline between consequent and alternate of ternary expression.", unexpectedTestCons: "Unexpected newline between test and consequent of ternary expression.", unexpectedConsAlt: "Unexpected newline between consequent and alternate of ternary expression." } }, create: function(e25) {
  function t3(t4, r3, n2) {
    e25.report({ node: t4, messageId: "".concat(n2 ? "expected" : "unexpected").concat(t4 === r3.test ? "TestCons" : "ConsAlt") });
  }
  var r2 = e25.options[0];
  return { ConditionalExpression: function(e26) {
    var n2 = LA.isTokenOnSameLine(e26.test, e26.consequent), i2 = LA.isTokenOnSameLine(e26.consequent, e26.alternate);
    if ("never" === r2) n2 || t3(e26.test, e26, false), i2 || t3(e26.consequent, e26, false);
    else {
      if ("always-multiline" === r2 && e26.loc.start.line === e26.loc.end.line) return;
      n2 && t3(e26.test, e26, true), i2 && t3(e26.consequent, e26, true);
    }
  } };
} };
var $_ = ["Array", "Boolean", "Date", "Error", "Function", "Number", "Object", "RegExp", "String", "Symbol", "BigInt"];
function G_(e25, t3, r2) {
  if (Object.prototype.hasOwnProperty.call(e25, t3) && !Array.isArray(e25[t3])) throw new TypeError("".concat(t3, ", if provided, must be an Array"));
  return e25[t3] || r2;
}
function z_(e25, t3) {
  return e25[t3] = true, e25;
}
var H_ = { meta: { type: "suggestion", docs: { description: "require constructor names to begin with a capital letter", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/new-cap" }, schema: [{ type: "object", properties: { newIsCap: { type: "boolean", default: true }, capIsNew: { type: "boolean", default: true }, newIsCapExceptions: { type: "array", items: { type: "string" } }, newIsCapExceptionPattern: { type: "string" }, capIsNewExceptions: { type: "array", items: { type: "string" } }, capIsNewExceptionPattern: { type: "string" }, properties: { type: "boolean", default: true } }, additionalProperties: false }], messages: { upper: "A function with a name starting with an uppercase letter should only be used as a constructor.", lower: "A constructor name should not start with a lowercase letter." } }, create: function(e25) {
  function t3(e26) {
    var t4 = "";
    if ("MemberExpression" === e26.callee.type) {
      var r3 = e26.callee.property;
      "Literal" === r3.type && "string" == typeof r3.value ? t4 = r3.value : "Identifier" === r3.type && !e26.callee.computed && (t4 = r3.name);
    } else t4 = e26.callee.name;
    return t4;
  }
  function r2(e26) {
    var t4 = e26.charAt(0), r3 = t4.toLowerCase();
    return r3 === t4.toUpperCase() ? "non-alpha" : t4 === r3 ? "lower" : "upper";
  }
  function n2(e26, t4, r3, n3) {
    var i3 = f2.getText(t4.callee);
    return !(!e26[r3] && !e26[i3]) || !(!n3 || !n3.test(i3)) || ("UTC" === r3 && "MemberExpression" === t4.callee.type ? "Identifier" === t4.callee.object.type && "Date" === t4.callee.object.name : o2 && "MemberExpression" === t4.callee.type);
  }
  function i2(t4, r3) {
    var n3 = t4.callee;
    "MemberExpression" === n3.type && (n3 = n3.property), e25.report({ node: t4, loc: n3.loc.start, messageId: r3 });
  }
  var a2 = Object.assign({}, e25.options[0]);
  a2.newIsCap = false !== a2.newIsCap, a2.capIsNew = false !== a2.capIsNew;
  var o2 = false === a2.properties, s2 = G_(a2, "newIsCapExceptions", []).reduce(z_, {}), u2 = a2.newIsCapExceptionPattern ? new RegExp(a2.newIsCapExceptionPattern, "u") : null, c2 = function(e26) {
    var t4 = G_(e26, "capIsNewExceptions", $_);
    return t4 !== $_ && (t4 = t4.concat($_)), t4.reduce(z_, {});
  }(a2), l2 = a2.capIsNewExceptionPattern ? new RegExp(a2.capIsNewExceptionPattern, "u") : null, p2 = {}, f2 = e25.getSourceCode();
  return a2.newIsCap && (p2.NewExpression = function(e26) {
    var a3 = t3(e26);
    a3 && ("lower" !== r2(a3) || n2(s2, e26, a3, u2) || i2(e26, "lower"));
  }), a2.capIsNew && (p2.CallExpression = function(e26) {
    var a3 = t3(e26);
    a3 && ("upper" !== r2(a3) || n2(c2, e26, a3, l2) || i2(e26, "upper"));
  }), p2;
} };
var K_ = { meta: { type: "layout", docs: { description: "enforce or disallow parentheses when invoking a constructor with no arguments", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/new-parens" }, fixable: "code", schema: { anyOf: [{ type: "array", items: [{ enum: ["always", "never"] }], minItems: 0, maxItems: 1 }] }, messages: { missing: "Missing '()' invoking a constructor.", unnecessary: "Unnecessary '()' invoking a constructor with no arguments." } }, create: function(e25) {
  var t3 = "never" !== e25.options[0], r2 = e25.getSourceCode();
  return { NewExpression: function(n2) {
    if (0 === n2.arguments.length) {
      var i2 = r2.getLastToken(n2), a2 = i2 && LA.isClosingParenToken(i2) && LA.isOpeningParenToken(r2.getTokenBefore(i2)) && n2.callee.range[1] < n2.range[1];
      t3 ? !a2 && e25.report({ node: n2, messageId: "missing", fix: function(e26) {
        return e26.insertTextAfter(n2, "()");
      } }) : a2 && e25.report({ node: n2, messageId: "unnecessary", fix: function(e26) {
        return [e26.remove(r2.getTokenBefore(i2)), e26.remove(i2), e26.insertTextBefore(n2, "("), e26.insertTextAfter(n2, ")")];
      } });
    }
  } };
} };
var J_ = { meta: { type: "layout", docs: { description: "require or disallow an empty line after variable declarations", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/newline-after-var" }, schema: [{ enum: ["never", "always"] }], fixable: "whitespace", messages: { expected: "Expected blank line after variable declarations.", unexpected: "Unexpected blank line after variable declarations." }, deprecated: true, replacedBy: ["padding-line-between-statements"] }, create: function(e25) {
  function t3(e26) {
    var r3 = i2[e26];
    return i2[r3 + 1] ? t3(r3 + 1) : r3;
  }
  var r2 = e25.getSourceCode(), n2 = "never" === e25.options[0] ? "never" : "always", i2 = r2.getAllComments().reduce(function(e26, t4) {
    return e26[t4.loc.start.line] = t4.loc.end.line, e26;
  }, {});
  return { VariableDeclaration: function(a2) {
    var o2 = function(e26) {
      var t4 = r2.getLastToken(e26);
      if ("Punctuator" === t4.type && ";" === t4.value) {
        var n3 = r2.getTokenBefore(t4);
        if (n3.loc.end.line !== t4.loc.start.line) return n3;
      }
      return t4;
    }(a2), s2 = o2 === r2.getLastToken(a2) ? r2.getTokenAfter(a2) : r2.getLastToken(a2), u2 = o2.loc.end.line + 1;
    if (s2 && !/* @__PURE__ */ function(e26) {
      return "ForStatement" === e26 || "ForInStatement" === e26 || "ForOfStatement" === e26;
    }(a2.parent.type) && !/* @__PURE__ */ function(e26) {
      return "ExportNamedDeclaration" === e26 || "ExportSpecifier" === e26 || "ExportDefaultDeclaration" === e26 || "ExportAllDeclaration" === e26;
    }(a2.parent.type) && !("Keyword" === s2.type && /* @__PURE__ */ function(e26) {
      return "var" === e26 || "let" === e26 || "const" === e26;
    }(s2.value) || function(e26) {
      var t4 = r2.getTokenAfter(e26);
      return !t4 || "Punctuator" === t4.type && "}" === t4.value;
    }(a2))) {
      var c2 = s2.loc.start.line > u2, l2 = void 0 !== i2[u2];
      "never" === n2 && c2 && !l2 && e25.report({ node: a2, messageId: "unexpected", data: { identifier: a2.name }, fix: function(e26) {
        var t4 = r2.getText().slice(o2.range[1], s2.range[0]).split(LA.LINEBREAK_MATCHER);
        return e26.replaceTextRange([o2.range[1], s2.range[0]], "".concat(t4.slice(0, -1).join(""), "\n").concat(t4[t4.length - 1]));
      } }), "always" !== n2 || c2 && (!l2 || function(e26, r3) {
        return e26.loc.start.line > t3(r3) + 1;
      }(s2, u2)) || e25.report({ node: a2, messageId: "expected", data: { identifier: a2.name }, fix: function(e26) {
        return (c2 ? t3(u2) : o2.loc.end.line) === s2.loc.start.line ? e26.insertTextBefore(s2, "\n\n") : e26.insertTextBeforeRange([s2.range[0] - s2.loc.start.column, s2.range[1]], "\n");
      } });
    }
  } };
} };
var Q_ = { meta: { type: "layout", docs: { description: "require an empty line before `return` statements", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/newline-before-return" }, fixable: "whitespace", schema: [], messages: { expected: "Expected newline before return statement." }, deprecated: true, replacedBy: ["padding-line-between-statements"] }, create: function(e25) {
  function t3(e26, t4) {
    var r3 = i2.getTokenBefore(e26);
    return t4.some(function(e27) {
      return r3.value === e27;
    });
  }
  function r2(e26) {
    var r3 = e26.parent.type;
    return e26.parent.body ? Array.isArray(e26.parent.body) ? e26.parent.body[0] === e26 : e26.parent.body === e26 : t3(e26, "IfStatement" === r3 ? ["else", ")"] : "DoWhileStatement" === r3 ? ["do"] : "SwitchCase" === r3 ? [":"] : [")"]);
  }
  function n2(e26) {
    var t4 = e26.loc.start.line, r3 = function(e27) {
      var t5 = i2.getTokenBefore(e27);
      return t5 ? t5.loc.end.line : 0;
    }(e26), n3 = function(e27, t5) {
      var r4 = i2.getCommentsBefore(e27), n4 = 0;
      return r4.length ? (r4.forEach(function(r5) {
        n4++, "Block" === r5.type && (n4 += r5.loc.end.line - r5.loc.start.line), r5.loc.start.line === t5 && n4--, r5.loc.end.line === e27.loc.start.line && n4--;
      }), n4) : n4;
    }(e26, r3);
    return 1 < t4 - r3 - n3;
  }
  var i2 = e25.getSourceCode();
  return { ReturnStatement: function(t4) {
    r2(t4) || n2(t4) || e25.report({ node: t4, messageId: "expected", fix: function(e26) {
      if (function(e27) {
        var t5 = i2.getCommentsBefore(e27), r4 = t5[t5.length - 1], n4 = i2.getTokenBefore(e27);
        return !(0 !== t5.length && (r4.loc.end.line !== n4.loc.end.line || r4.loc.end.line === e27.loc.start.line));
      }(t4)) {
        var r3 = i2.getTokenBefore(t4), n3 = t4.loc.start.line === r3.loc.end.line ? "\n\n" : "\n";
        return e26.insertTextBefore(t4, n3);
      }
      return null;
    } });
  } };
} };
var X_ = { meta: { type: "layout", docs: { description: "require a newline after each call in a method chain", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/newline-per-chained-call" }, fixable: "whitespace", schema: [{ type: "object", properties: { ignoreChainWithDepth: { type: "integer", minimum: 1, maximum: 10, default: 2 } }, additionalProperties: false }], messages: { expected: "Expected line break before `{{callee}}`." } }, create: function(e25) {
  function t3(e26) {
    var t4 = function(e27) {
      return e27.computed ? "[" : ".";
    }(e26), r3 = n2.getText(e26.property).split(LA.LINEBREAK_MATCHER), i2 = e26.computed && 1 === r3.length ? "]" : "";
    return t4 + r3[0] + i2;
  }
  var r2 = (e25.options[0] || {}).ignoreChainWithDepth || 2, n2 = e25.getSourceCode();
  return { "CallExpression:exit": function(i2) {
    if (i2.callee && "MemberExpression" === i2.callee.type) {
      for (var a2 = i2.callee, o2 = a2.object, s2 = 1; o2 && o2.callee; ) s2 += 1, o2 = o2.callee.object;
      s2 > r2 && LA.isTokenOnSameLine(a2.object, a2.property) && e25.report({ node: a2.property, loc: a2.property.loc.start, messageId: "expected", data: { callee: t3(a2) }, fix: function(e26) {
        var t4 = n2.getTokenAfter(a2.object, LA.isNotClosingParenToken);
        return e26.insertTextBefore(t4, "\n");
      } });
    }
  } };
} };
var Y_ = LA.getStaticPropertyName;
function Z_(e25) {
  return /^(alert|confirm|prompt)$/.test(e25);
}
function eT(e25, t3) {
  var r2 = function(e26, t4) {
    var r3 = e26.references.filter(function(e27) {
      return e27.identifier.range[0] === t4.range[0] && e27.identifier.range[1] === t4.range[1];
    });
    return 1 === r3.length ? r3[0] : null;
  }(e25, t3);
  return r2 && r2.resolved && 0 < r2.resolved.defs.length;
}
var tT = { meta: { type: "suggestion", docs: { description: "disallow the use of `alert`, `confirm`, and `prompt`", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-alert" }, schema: [], messages: { unexpected: "Unexpected {{name}}." } }, create: function(e25) {
  return { CallExpression: function(t3) {
    var r2 = t3.callee, n2 = e25.getScope();
    if ("Identifier" === r2.type) {
      var i2 = r2.name;
      !eT(n2, r2) && Z_(r2.name) && e25.report({ node: t3, messageId: "unexpected", data: { name: i2 } });
    } else if ("MemberExpression" === r2.type && function(e26, t4) {
      return !("global" !== e26.type || "ThisExpression" !== t4.type) || !("window" !== t4.name) && !eT(e26, t4);
    }(n2, r2.object)) {
      var a2 = Y_(r2);
      Z_(a2) && e25.report({ node: t3, messageId: "unexpected", data: { name: a2 } });
    }
  } };
} };
function rT(e25) {
  var t3 = e25.type;
  return "FunctionDeclaration" === t3 || "FunctionExpression" === t3 || "ArrowFunctionExpression" === t3 || "ForOfStatement" === t3 && true === e25.await;
}
function nT(e25, t3) {
  switch (t3.type) {
    case "ForStatement":
      return e25 === t3.test || e25 === t3.update || e25 === t3.body;
    case "ForOfStatement":
    case "ForInStatement":
      return e25 === t3.body;
    case "WhileStatement":
    case "DoWhileStatement":
      return e25 === t3.test || e25 === t3.body;
    default:
      return false;
  }
}
var iT = { meta: { type: "problem", docs: { description: "disallow `await` inside of loops", category: "Possible Errors", recommended: false, url: "https://eslint.org/docs/rules/no-await-in-loop" }, schema: [], messages: { unexpectedAwait: "Unexpected `await` inside a loop." } }, create: function(e25) {
  function t3(t4) {
    if ("ForOfStatement" !== t4.type || t4.await) for (var r2 = t4, n2 = r2.parent; n2 && !rT(n2); ) {
      if (nT(r2, n2)) return void e25.report({ node: t4, messageId: "unexpectedAwait" });
      r2 = n2, n2 = n2.parent;
    }
  }
  return { AwaitExpression: t3, ForOfStatement: t3 };
} };
var aT = ["^", "|", "&", "<<", ">>", ">>>", "^=", "|=", "&=", "<<=", ">>=", ">>>=", "~"];
var oT = { meta: { type: "suggestion", docs: { description: "disallow bitwise operators", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-bitwise" }, schema: [{ type: "object", properties: { allow: { type: "array", items: { enum: aT }, uniqueItems: true }, int32Hint: { type: "boolean", default: false } }, additionalProperties: false }], messages: { unexpected: "Unexpected use of '{{operator}}'." } }, create: function(e25) {
  function t3(t4) {
    e25.report({ node: t4, messageId: "unexpected", data: { operator: t4.operator } });
  }
  function r2(e26) {
    !function(e27) {
      return -1 !== aT.indexOf(e27.operator);
    }(e26) || function(e27) {
      return -1 !== i2.indexOf(e27.operator);
    }(e26) || function(e27) {
      return a2 && "|" === e27.operator && e27.right && "Literal" === e27.right.type && 0 === e27.right.value;
    }(e26) || t3(e26);
  }
  var n2 = e25.options[0] || {}, i2 = n2.allow || [], a2 = true === n2.int32Hint;
  return { AssignmentExpression: r2, BinaryExpression: r2, UnaryExpression: r2 };
} };
var sT = { meta: { type: "suggestion", docs: { description: "disallow `catch` clause parameters from shadowing variables in the outer scope", category: "Variables", recommended: false, url: "https://eslint.org/docs/rules/no-catch-shadow" }, replacedBy: ["no-shadow"], deprecated: true, schema: [], messages: { mutable: "Value of '{{name}}' may be overwritten in IE 8 and earlier." } }, create: function(e25) {
  return { "CatchClause[param!=null]": function(t3) {
    var r2 = e25.getScope();
    r2.block === t3 && (r2 = r2.upper), function(e26, t4) {
      return null !== LA.getVariableByName(e26, t4);
    }(r2, t3.param.name) && e25.report({ node: t3, messageId: "mutable", data: { name: t3.param.name } });
  } };
} };
var uT = { meta: { type: "problem", docs: { description: "disallow reassigning class members", category: "ECMAScript 6", recommended: true, url: "https://eslint.org/docs/rules/no-class-assign" }, schema: [], messages: { class: "'{{name}}' is a class." } }, create: function(e25) {
  function t3(t4) {
    LA.getModifyingReferences(t4.references).forEach(function(t5) {
      e25.report({ node: t5.identifier, messageId: "class", data: { name: t5.identifier.name } });
    });
  }
  function r2(r3) {
    e25.getDeclaredVariables(r3).forEach(t3);
  }
  return { ClassDeclaration: r2, ClassExpression: r2 };
} };
var cT = { meta: { type: "problem", docs: { description: "disallow comparing against -0", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-compare-neg-zero" }, fixable: null, schema: [], messages: { unexpected: "Do not use the '{{operator}}' operator to compare against -0." } }, create: function(e25) {
  function t3(e26) {
    return "UnaryExpression" === e26.type && "-" === e26.operator && "Literal" === e26.argument.type && 0 === e26.argument.value;
  }
  var r2 = /* @__PURE__ */ new Set([">", ">=", "<", "<=", "==", "===", "!=", "!=="]);
  return { BinaryExpression: function(n2) {
    r2.has(n2.operator) && (t3(n2.left) || t3(n2.right)) && e25.report({ node: n2, messageId: "unexpected", data: { operator: n2.operator } });
  } };
} };
var lT = /* @__PURE__ */ new Set(["IfStatement", "WhileStatement", "DoWhileStatement", "ForStatement", "ConditionalExpression"]);
var pT = { DoWhileStatement: "a 'do...while' statement", ForStatement: "a 'for' statement", IfStatement: "an 'if' statement", WhileStatement: "a 'while' statement" };
var fT = { meta: { type: "problem", docs: { description: "disallow assignment operators in conditional expressions", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-cond-assign" }, schema: [{ enum: ["except-parens", "always"] }], messages: { unexpected: "Unexpected assignment within {{type}}.", missing: "Expected a conditional expression and instead saw an assignment." } }, create: function(e25) {
  function t3(e26) {
    return e26.parent && lT.has(e26.parent.type) && e26 === e26.parent.test;
  }
  function r2(e26) {
    var r3 = e26;
    do {
      if (t3(r3)) return r3.parent;
    } while ((r3 = r3.parent) && !LA.isFunction(r3));
    return null;
  }
  function n2(t4) {
    t4.test && "AssignmentExpression" === t4.test.type && ("ForStatement" === t4.type ? !LA.isParenthesised(a2, t4.test) : !function(e26) {
      var t5 = a2.getTokenBefore(e26, 1), r3 = a2.getTokenAfter(e26, 1);
      return LA.isParenthesised(a2, e26) && t5 && LA.isOpeningParenToken(t5) && t5.range[1] <= e26.range[0] && LA.isClosingParenToken(r3) && r3.range[0] >= e26.range[1];
    }(t4.test)) && e25.report({ node: t4.test, messageId: "missing" });
  }
  var i2 = e25.options[0] || "except-parens", a2 = e25.getSourceCode();
  return "always" === i2 ? { AssignmentExpression: function(t4) {
    var n3 = r2(t4);
    n3 && e25.report({ node: t4, messageId: "unexpected", data: { type: pT[n3.type] || n3.type } });
  } } : { DoWhileStatement: n2, ForStatement: n2, IfStatement: n2, WhileStatement: n2, ConditionalExpression: n2 };
} };
var hT = { meta: { type: "suggestion", docs: { description: "disallow arrow functions where they could be confused with comparisons", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/no-confusing-arrow" }, fixable: "code", schema: [{ type: "object", properties: { allowParens: { type: "boolean", default: true } }, additionalProperties: false }], messages: { confusing: "Arrow function used ambiguously with a conditional expression." } }, create: function(e25) {
  var t3 = e25.options[0] || {}, r2 = t3.allowParens || void 0 === t3.allowParens, n2 = e25.getSourceCode();
  return { ArrowFunctionExpression: function(t4) {
    var i2 = t4.body;
    (function(e26) {
      return e26 && "ConditionalExpression" === e26.type;
    })(i2) && (!r2 || !LA.isParenthesised(n2, i2)) && e25.report({ node: t4, messageId: "confusing", fix: function(e26) {
      return r2 && e26.replaceText(t4.body, "(".concat(n2.getText(t4.body), ")"));
    } });
  } };
} };
var dT = { meta: { type: "suggestion", docs: { description: "disallow the use of `console`", category: "Possible Errors", recommended: false, url: "https://eslint.org/docs/rules/no-console" }, schema: [{ type: "object", properties: { allow: { type: "array", items: { type: "string" }, minItems: 1, uniqueItems: true } }, additionalProperties: false }], messages: { unexpected: "Unexpected console statement." } }, create: function(e25) {
  function t3(e26) {
    var t4 = e26.identifier;
    return t4 && "console" === t4.name;
  }
  function r2(e26) {
    var t4 = e26.identifier, r3 = t4.parent;
    return "MemberExpression" === r3.type && r3.object === t4 && !function(e27) {
      var t5 = LA.getStaticPropertyName(e27);
      return t5 && -1 !== i2.indexOf(t5);
    }(r3);
  }
  function n2(t4) {
    var r3 = t4.identifier.parent;
    e25.report({ node: r3, loc: r3.loc, messageId: "unexpected" });
  }
  var i2 = (e25.options[0] || {}).allow || [];
  return { "Program:exit": function() {
    var i3 = e25.getScope(), a2 = LA.getVariableByName(i3, "console"), o2 = a2 && 0 < a2.defs.length, s2 = a2 ? a2.references : i3.through.filter(t3);
    o2 || s2.filter(r2).forEach(n2);
  } };
} };
var mT = { meta: { type: "problem", docs: { description: "disallow reassigning `const` variables", category: "ECMAScript 6", recommended: true, url: "https://eslint.org/docs/rules/no-const-assign" }, schema: [], messages: { const: "'{{name}}' is constant." } }, create: function(e25) {
  function t3(t4) {
    LA.getModifyingReferences(t4.references).forEach(function(t5) {
      e25.report({ node: t5.identifier, messageId: "const", data: { name: t5.identifier.name } });
    });
  }
  return { VariableDeclaration: function(r2) {
    "const" === r2.kind && e25.getDeclaredVariables(r2).forEach(t3);
  } };
} };
var gT = ["===", "!==", "==", "!="];
var yT = [">", "<", ">=", "<=", "in", "instanceof"];
var vT = { meta: { type: "problem", docs: { description: "disallow constant expressions in conditions", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-constant-condition" }, schema: [{ type: "object", properties: { checkLoops: { type: "boolean", default: true } }, additionalProperties: false }], messages: { unexpected: "Unexpected constant condition." } }, create: function(e25) {
  function t3(e26, r3) {
    switch (e26.type) {
      case "Literal":
        return "||" === r3 && true === e26.value || "&&" === r3 && false === e26.value;
      case "UnaryExpression":
        return "&&" === r3 && "void" === e26.operator;
      case "LogicalExpression":
        return t3(e26.left, e26.operator) || t3(e26.right, e26.operator);
    }
    return false;
  }
  function r2(e26, n3) {
    switch (e26.type) {
      case "Literal":
      case "ArrowFunctionExpression":
      case "FunctionExpression":
      case "ObjectExpression":
      case "ArrayExpression":
        return true;
      case "UnaryExpression":
        return !("void" !== e26.operator) || "typeof" === e26.operator && n3 || r2(e26.argument, true);
      case "BinaryExpression":
        return r2(e26.left, false) && r2(e26.right, false) && "in" !== e26.operator;
      case "LogicalExpression":
        var i3 = r2(e26.left, n3), a3 = r2(e26.right, n3), o3 = i3 && t3(e26.left, e26.operator), s3 = a3 && t3(e26.right, e26.operator);
        return i3 && a3 || "||" === e26.operator && a3 && e26.right.value && (!e26.parent || "BinaryExpression" !== e26.parent.type || !(gT.includes(e26.parent.operator) || yT.includes(e26.parent.operator))) || o3 || s3;
      case "AssignmentExpression":
        return "=" === e26.operator && r2(e26.right, n3);
      case "SequenceExpression":
        return r2(e26.expressions[e26.expressions.length - 1], n3);
    }
    return false;
  }
  function n2(t4) {
    l2.has(t4) && (l2.delete(t4), e25.report({ node: t4.test, messageId: "unexpected" }));
  }
  function i2(t4) {
    t4.test && r2(t4.test, true) && e25.report({ node: t4.test, messageId: "unexpected" });
  }
  function a2() {
    c2.push(l2), l2 = /* @__PURE__ */ new Set();
  }
  function o2() {
    l2 = c2.pop();
  }
  function s2(e26) {
    u2 && function(e27) {
      e27.test && r2(e27.test, true) && l2.add(e27);
    }(e26);
  }
  var u2 = false !== (e25.options[0] || {}).checkLoops, c2 = [], l2 = /* @__PURE__ */ new Set();
  return { ConditionalExpression: i2, IfStatement: i2, WhileStatement: s2, "WhileStatement:exit": n2, DoWhileStatement: s2, "DoWhileStatement:exit": n2, ForStatement: s2, "ForStatement > .test": function(e26) {
    return s2(e26.parent);
  }, "ForStatement:exit": n2, FunctionDeclaration: a2, "FunctionDeclaration:exit": o2, FunctionExpression: a2, "FunctionExpression:exit": o2, YieldExpression: function() {
    return l2.clear();
  } };
} };
var xT = PA.RegExpValidator;
var bT = new (function() {
  function e25() {
    a(this, e25), this.ecmaVersion = 2018, this._source = "", this._controlChars = [], this._validator = new xT(this);
  }
  return s(e25, [{ key: "onPatternEnter", value: function() {
    this._controlChars = [];
  } }, { key: "onCharacter", value: function(e26, t3, r2) {
    0 <= r2 && 31 >= r2 && (this._source.codePointAt(e26) === r2 || this._source.slice(e26, t3).startsWith("\\x") || this._source.slice(e26, t3).startsWith("\\u")) && this._controlChars.push("\\x".concat("0".concat(r2.toString(16)).slice(-2)));
  } }, { key: "collectControlChars", value: function(e26) {
    try {
      this._source = e26, this._validator.validatePattern(e26);
    } catch (e27) {
    }
    return this._controlChars;
  } }]), e25;
}())();
var ET = { meta: { type: "problem", docs: { description: "disallow control characters in regular expressions", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-control-regex" }, schema: [], messages: { unexpected: "Unexpected control character(s) in regular expression: {{controlChars}}." } }, create: function(e25) {
  return { Literal: function(t3) {
    var r2 = function(e26) {
      return e26.regex ? e26.regex.pattern : "string" != typeof e26.value || "NewExpression" !== e26.parent.type && "CallExpression" !== e26.parent.type || "Identifier" !== e26.parent.callee.type || "RegExp" !== e26.parent.callee.name || e26.parent.arguments[0] !== e26 ? null : e26.value;
    }(t3);
    if (r2) {
      var n2 = bT.collectControlChars(r2);
      0 < n2.length && e25.report({ node: t3, messageId: "unexpected", data: { controlChars: n2.join(", ") } });
    }
  } };
} };
var CT = { meta: { type: "problem", docs: { description: "disallow duplicate class members", category: "ECMAScript 6", recommended: true, url: "https://eslint.org/docs/rules/no-dupe-class-members" }, schema: [], messages: { unexpected: "Duplicate name '{{name}}'." } }, create: function(e25) {
  function t3(e26, t4) {
    var n2 = r2[r2.length - 1], i2 = "$".concat(e26);
    return n2[i2] || (n2[i2] = { nonStatic: { init: false, get: false, set: false }, static: { init: false, get: false, set: false } }), n2[i2][t4 ? "static" : "nonStatic"];
  }
  var r2 = [];
  return { Program: function() {
    r2 = [];
  }, ClassBody: function() {
    r2.push(/* @__PURE__ */ Object.create(null));
  }, "ClassBody:exit": function() {
    r2.pop();
  }, MethodDefinition: function(r3) {
    if (!r3.computed) {
      var n2 = function(e26) {
        switch (e26.type) {
          case "Identifier":
            return e26.name;
          case "Literal":
            return e26.value + "";
          default:
            return "";
        }
      }(r3.key), i2 = t3(n2, r3.static), a2 = false;
      "get" === r3.kind ? (a2 = i2.init || i2.get, i2.get = true) : "set" === r3.kind ? (a2 = i2.init || i2.set, i2.set = true) : (a2 = i2.init || i2.get || i2.set, i2.init = true), a2 && e25.report({ node: r3, messageId: "unexpected", data: { name: n2 } });
    }
  } };
} };
function ST(e25, t3, r2) {
  return t3.every(function(t4) {
    return r2.some(function(r3) {
      return e25(t4, r3);
    });
  });
}
function kT(e25, t3) {
  return "LogicalExpression" === t3.type && t3.operator === e25 ? [].concat(E(kT(e25, t3.left)), E(kT(e25, t3.right))) : [t3];
}
var DT = kT.bind(null, "||");
var FT = kT.bind(null, "&&");
var AT = { meta: { type: "problem", docs: { description: "disallow duplicate conditions in if-else-if chains", category: "Possible Errors", recommended: false, url: "https://eslint.org/docs/rules/no-dupe-else-if" }, schema: [], messages: { unexpected: "This branch can never execute. Its condition is a duplicate or covered by previous conditions in the if-else-if chain." } }, create: function(e25) {
  var t3 = e25.getSourceCode(), r2 = ST.bind(null, function e26(r3, n2) {
    return !(r3.type !== n2.type) && ("LogicalExpression" !== r3.type || "||" !== r3.operator && "&&" !== r3.operator || r3.operator !== n2.operator ? LA.equalTokens(r3, n2, t3) : e26(r3.left, n2.left) && e26(r3.right, n2.right) || e26(r3.left, n2.right) && e26(r3.right, n2.left));
  });
  return { IfStatement: function(t4) {
    for (var n2 = t4.test, i2 = "LogicalExpression" === n2.type && "&&" === n2.operator ? [n2].concat(E(FT(n2))) : [n2], a2 = function(t5, i3) {
      t5 = t5.parent;
      var a3 = DT(t5.test).map(FT);
      if ((i3 = i3.map(function(e26) {
        return e26.filter(function(e27) {
          return !a3.some(function(t6) {
            return r2(t6, e27);
          });
        });
      })).some(function(e26) {
        return 0 === e26.length;
      })) return e25.report({ node: n2, messageId: "unexpected" }), o2 = t5, s2 = i3, "break";
      o2 = t5, s2 = i3;
    }, o2 = t4, s2 = i2.map(function(e26) {
      return DT(e26).map(FT);
    }); o2.parent && "IfStatement" === o2.parent.type && o2.parent.alternate === o2; ) {
      if ("break" === a2(o2, s2)) break;
    }
  } };
} };
var wT = /^(?:init|get)$/;
var _T = /^(?:init|set)$/;
var TT = function() {
  function e25(t3, r2) {
    a(this, e25), this.upper = t3, this.node = r2, this.properties = /* @__PURE__ */ new Map();
  }
  return s(e25, [{ key: "getPropertyInfo", value: function(e26) {
    var t3 = LA.getStaticPropertyName(e26);
    return this.properties.has(t3) || this.properties.set(t3, { get: false, set: false }), this.properties.get(t3);
  } }, { key: "isPropertyDefined", value: function(e26) {
    var t3 = this.getPropertyInfo(e26);
    return wT.test(e26.kind) && t3.get || _T.test(e26.kind) && t3.set;
  } }, { key: "defineProperty", value: function(e26) {
    var t3 = this.getPropertyInfo(e26);
    wT.test(e26.kind) && (t3.get = true), _T.test(e26.kind) && (t3.set = true);
  } }]), e25;
}();
var PT = { meta: { type: "problem", docs: { description: "disallow duplicate keys in object literals", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-dupe-keys" }, schema: [], messages: { unexpected: "Duplicate key '{{name}}'." } }, create: function(e25) {
  var t3 = null;
  return { ObjectExpression: function(e26) {
    t3 = new TT(t3, e26);
  }, "ObjectExpression:exit": function() {
    t3 = t3.upper;
  }, Property: function(r2) {
    var n2 = LA.getStaticPropertyName(r2);
    "ObjectExpression" !== r2.parent.type || null === n2 || (t3.isPropertyDefined(r2) && e25.report({ node: t3.node, loc: r2.key.loc, messageId: "unexpected", data: { name: n2 } }), t3.defineProperty(r2));
  } };
} };
var IT = { meta: { type: "problem", docs: { description: "disallow duplicate case labels", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-duplicate-case" }, schema: [], messages: { unexpected: "Duplicate case label." } }, create: function(e25) {
  var t3 = e25.getSourceCode();
  return { SwitchStatement: function(r2) {
    var n2 = /* @__PURE__ */ new Set(), i2 = true, a2 = false, o2 = void 0;
    try {
      for (var s2, u2 = r2.cases[Symbol.iterator](); !(i2 = (s2 = u2.next()).done); i2 = true) {
        var c2 = s2.value;
        if (c2.test) {
          var l2 = t3.getText(c2.test);
          n2.has(l2) ? e25.report({ node: c2, messageId: "unexpected" }) : n2.add(l2);
        }
      }
    } catch (e26) {
      a2 = true, o2 = e26;
    } finally {
      try {
        i2 || null == u2.return || u2.return();
      } finally {
        if (a2) throw o2;
      }
    }
  } };
} };
function BT(e25) {
  return e25 && e25.source && e25.source.value ? e25.source.value.trim() : "";
}
function OT(e25, t3, r2, n2, i2) {
  -1 !== n2.indexOf(r2) && e25.report({ node: t3, messageId: i2, data: { module: r2 } });
}
function LT(e25, t3, r2, n2) {
  return function(i2) {
    var a2 = BT(i2);
    a2 && (OT(e25, i2, a2, r2, "import"), t3 && OT(e25, i2, a2, n2, "importAs"), r2.push(a2));
  };
}
function NT(e25, t3, r2) {
  return function(n2) {
    var i2 = BT(n2);
    i2 && (OT(e25, n2, i2, r2, "export"), OT(e25, n2, i2, t3, "exportAs"), r2.push(i2));
  };
}
var jT = { meta: { type: "problem", docs: { description: "disallow duplicate module imports", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/no-duplicate-imports" }, schema: [{ type: "object", properties: { includeExports: { type: "boolean", default: false } }, additionalProperties: false }], messages: { import: "'{{module}}' import is duplicated.", importAs: "'{{module}}' import is duplicated as export.", export: "'{{module}}' export is duplicated.", exportAs: "'{{module}}' export is duplicated as import." } }, create: function(e25) {
  var t3 = (e25.options[0] || {}).includeExports, r2 = [], n2 = [], i2 = { ImportDeclaration: LT(e25, t3, r2, n2) };
  return t3 && (i2.ExportNamedDeclaration = NT(e25, r2, n2), i2.ExportAllDeclaration = NT(e25, r2, n2)), i2;
} };
var RT = function() {
  function e25(t3, r2) {
    a(this, e25), this.fixer = t3, this.sourceCode = r2, this.retainedRange = null;
  }
  return s(e25, [{ key: "retainRange", value: function(e26) {
    return this.retainedRange = e26, this;
  } }, { key: "retainEnclosingFunction", value: function(e26) {
    var t3 = LA.getUpperFunction(e26);
    return this.retainRange(t3 ? t3.range : this.sourceCode.ast.range);
  } }, { key: "retainSurroundingTokens", value: function(e26) {
    var t3 = this.sourceCode.getTokenBefore(e26) || e26, r2 = this.sourceCode.getTokenAfter(e26) || e26;
    return this.retainRange([t3.range[0], r2.range[1]]);
  } }, { key: "replaceTextRange", value: function(e26, t3) {
    var r2;
    return r2 = this.retainedRange ? [Math.min(this.retainedRange[0], e26[0]), Math.max(this.retainedRange[1], e26[1])] : e26, this.fixer.replaceTextRange(r2, this.sourceCode.text.slice(r2[0], e26[0]) + t3 + this.sourceCode.text.slice(e26[1], r2[1]));
  } }, { key: "remove", value: function(e26) {
    return this.replaceTextRange(e26.range, "");
  } }]), e25;
}();
var MT = { meta: { type: "suggestion", docs: { description: "disallow `else` blocks after `return` statements in `if` statements", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-else-return" }, schema: [{ type: "object", properties: { allowElseIf: { type: "boolean", default: true } }, additionalProperties: false }], fixable: "code", messages: { unexpected: "Unnecessary 'else' after 'return'." } }, create: function(e25) {
  function t3(e26, t4) {
    if ("FunctionDeclaration" === e26.type) return false;
    if ("BlockStatement" !== e26.type) return true;
    var r3 = t4.childScopes.find(function(t5) {
      return t5.block === e26;
    });
    return !r3 || function(e27, t5) {
      if (0 === e27.length) return true;
      var r4 = t5.variableScope;
      if (t5.variables.filter(function(e28) {
        return 0 < e28.defs.length;
      }).some(function(t6) {
        var r5 = t6.name;
        return e27.includes(r5);
      })) return false;
      if (t5 !== r4 && "catch" === t5.upper.type && t5.upper.variables.some(function(t6) {
        var r5 = t6.name;
        return e27.includes(r5);
      })) return false;
      if (t5.variables.filter(function(e28) {
        var t6 = e28.defs, r5 = e28.references;
        return 0 === t6.length && 0 < r5.length;
      }).some(function(t6) {
        var r5 = t6.name;
        return e27.includes(r5);
      })) return false;
      if (t5.through.some(function(t6) {
        return e27.includes(t6.identifier.name);
      })) return false;
      if (t5 !== r4) {
        var n3 = t5.block.range;
        if (r4.variables.filter(function(t6) {
          var r5 = t6.name;
          return e27.includes(r5);
        }).some(function(e28) {
          return e28.defs.some(function(e29) {
            var t6 = e29.node.range;
            return n3[0] <= t6[0] && t6[1] <= n3[1];
          });
        })) return false;
      }
      return true;
    }(r3.variables.map(function(e27) {
      return e27.name;
    }), t4);
  }
  function r2(r3) {
    var n3 = e25.getScope();
    e25.report({ node: r3, messageId: "unexpected", fix: function(i3) {
      if (!t3(r3, n3)) return null;
      var a3, o3, s2 = e25.getSourceCode(), u2 = s2.getFirstToken(r3), c2 = s2.getTokenBefore(u2), l2 = s2.getText(r3), p2 = s2.getTokenBefore(c2);
      o3 = "Punctuator" === u2.type && "{" === u2.value ? s2.getTokenAfter(u2) : u2;
      var f2 = "BlockStatement" !== r3.parent.consequent.type && ";" !== p2.value, h2 = /^[\(\+\x2D\/\[`]/.test(o3.value);
      if (f2 && h2) return null;
      var d2 = s2.getLastToken(r3), m2 = s2.getTokenBefore(d2);
      if (";" !== m2.value) {
        var g2 = s2.getTokenAfter(d2), y2 = g2 && /^[\(\+\x2D\/\[`]/.test(g2.value), v2 = g2 && g2.loc.start.line === m2.loc.start.line;
        if (y2 || v2 && "}" !== g2.value) return null;
      }
      return a3 = "Punctuator" === u2.type && "{" === u2.value ? l2.slice(1, -1) : l2, new RT(i3, s2).retainEnclosingFunction(r3).replaceTextRange([c2.range[0], r3.range[1]], a3);
    } });
  }
  function n2(e26) {
    return "ReturnStatement" === e26.type;
  }
  function i2(e26) {
    if ("BlockStatement" === e26.type) {
      var t4 = e26.body, r3 = t4[t4.length - 1];
      return r3 && n2(r3);
    }
    return n2(e26);
  }
  function a2(e26) {
    return n2(e26) || function(e27) {
      return "IfStatement" === e27.type && function(e28) {
        return e28.alternate && e28.consequent;
      }(e27) && i2(e27.alternate) && i2(e27.consequent);
    }(e26);
  }
  function o2(e26) {
    return "BlockStatement" === e26.type ? e26.body.some(a2) : a2(e26);
  }
  return { "IfStatement:exit": !(e25.options[0] && false === e25.options[0].allowElseIf) ? function(e26) {
    var t4 = e26.parent;
    if (LA.STATEMENT_LIST_PARENTS.has(t4.type)) {
      for (var n3, i3 = [], a3 = e26; "IfStatement" === a3.type; a3 = a3.alternate) {
        if (!a3.alternate) return;
        i3.push(a3.consequent), n3 = a3.alternate;
      }
      i3.every(o2) && r2(n3);
    }
  } : function(e26) {
    var t4 = e26.parent;
    if (LA.STATEMENT_LIST_PARENTS.has(t4.type)) {
      var n3 = e26.alternate;
      n3 && o2(e26.consequent) && r2(n3);
    }
  } };
} };
var VT = /^\/((?:[\0-Z\]-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])|\\(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])|\[((?:[\0-\[\^-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])|\\(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))+\])*\/[gimsuy]*$/;
var UT = { meta: { type: "problem", docs: { description: "disallow empty character classes in regular expressions", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-empty-character-class" }, schema: [], messages: { unexpected: "Empty class." } }, create: function(e25) {
  var t3 = e25.getSourceCode();
  return { Literal: function(r2) {
    var n2 = t3.getFirstToken(r2);
    "RegularExpression" !== n2.type || VT.test(n2.value) || e25.report({ node: r2, messageId: "unexpected" });
  } };
} };
var qT = { meta: { type: "suggestion", docs: { description: "disallow empty functions", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-empty-function" }, schema: [{ type: "object", properties: { allow: { type: "array", items: { enum: Object.freeze(["functions", "arrowFunctions", "generatorFunctions", "methods", "generatorMethods", "getters", "setters", "constructors"]) }, uniqueItems: true } }, additionalProperties: false }], messages: { unexpected: "Unexpected empty {{name}}." } }, create: function(e25) {
  function t3(t4) {
    var i2 = function(e26) {
      var t5 = e26.parent, r3 = "";
      if ("ArrowFunctionExpression" === e26.type) return "arrowFunctions";
      if ("Property" === t5.type) {
        if ("get" === t5.kind) return "getters";
        if ("set" === t5.kind) return "setters";
        r3 = t5.method ? "methods" : "functions";
      } else if ("MethodDefinition" === t5.type) {
        if ("get" === t5.kind) return "getters";
        if ("set" === t5.kind) return "setters";
        if ("constructor" === t5.kind) return "constructors";
        r3 = "methods";
      } else r3 = "functions";
      var n3 = "";
      if (e26.generator) n3 = "generator";
      else {
        if (!e26.async) return r3;
        n3 = "async";
      }
      return n3 + r3[0].toUpperCase() + r3.slice(1);
    }(t4), a2 = LA.getFunctionNameWithKind(t4), o2 = n2.getTokens(t4.body, { includeComments: true, filter: LA.isCommentToken });
    -1 === r2.indexOf(i2) && "BlockStatement" === t4.body.type && 0 === t4.body.body.length && 0 === o2.length && e25.report({ node: t4, loc: t4.body.loc.start, messageId: "unexpected", data: { name: a2 } });
  }
  var r2 = (e25.options[0] || {}).allow || [], n2 = e25.getSourceCode();
  return { ArrowFunctionExpression: t3, FunctionDeclaration: t3, FunctionExpression: t3 };
} };
var WT = { meta: { type: "suggestion", docs: { description: "disallow empty block statements", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-empty" }, schema: [{ type: "object", properties: { allowEmptyCatch: { type: "boolean", default: false } }, additionalProperties: false }], messages: { unexpected: "Empty {{type}} statement." } }, create: function(e25) {
  var t3 = (e25.options[0] || {}).allowEmptyCatch || false, r2 = e25.getSourceCode();
  return { BlockStatement: function(n2) {
    0 !== n2.body.length || LA.isFunction(n2.parent) || t3 && "CatchClause" === n2.parent.type || 0 < r2.getCommentsInside(n2).length || e25.report({ node: n2, messageId: "unexpected", data: { type: "block" } });
  }, SwitchStatement: function(t4) {
    (void 0 === t4.cases || 0 === t4.cases.length) && e25.report({ node: t4, messageId: "unexpected", data: { type: "switch" } });
  } };
} };
var $T = Object.freeze(["global", "window"]);
function GT(e25, t3) {
  return "Identifier" === e25.type && e25.name === t3;
}
function zT(e25, t3) {
  switch (e25.type) {
    case "Literal":
      return e25.value === t3;
    case "TemplateLiteral":
      return 0 === e25.expressions.length && e25.quasis[0].value.cooked === t3;
    default:
      return false;
  }
}
function HT(e25, t3) {
  return "MemberExpression" === e25.type && (e25.computed ? zT : GT)(e25.property, t3);
}
var KT = { meta: { type: "suggestion", docs: { description: "disallow the use of `eval()`", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-eval" }, schema: [{ type: "object", properties: { allowIndirect: { type: "boolean", default: false } }, additionalProperties: false }], messages: { unexpected: "eval can be harmful." } }, create: function(e25) {
  function t3(t4) {
    var r3 = e25.getScope().isStrict;
    o2 = { upper: o2, node: t4, strict: r3, defaultThis: false, initialized: r3 };
  }
  function r2() {
    o2 = o2.upper;
  }
  function n2(t4) {
    var r3 = t4.parent, n3 = "MemberExpression" === t4.type ? t4.property : t4, i3 = "CallExpression" === r3.type && r3.callee === t4 ? r3 : t4;
    e25.report({ node: i3, loc: n3.loc.start, messageId: "unexpected" });
  }
  var i2 = !(!e25.options[0] || !e25.options[0].allowIndirect), a2 = e25.getSourceCode(), o2 = null;
  return i2 ? { "CallExpression:exit": function(e26) {
    var t4 = e26.callee;
    GT(t4, "eval") && n2(t4);
  } } : { "CallExpression:exit": function(e26) {
    var t4 = e26.callee;
    GT(t4, "eval") && n2(t4);
  }, Program: function(t4) {
    var r3 = e25.getScope(), n3 = e25.parserOptions.ecmaFeatures || {}, i3 = r3.isStrict || "module" === t4.sourceType || n3.globalReturn && r3.childScopes[0].isStrict;
    o2 = { upper: null, node: t4, strict: i3, defaultThis: true, initialized: true };
  }, "Program:exit": function() {
    var t4 = e25.getScope();
    r2(), function(e26) {
      var t5 = LA.getVariableByName(e26, "eval");
      if (t5) for (var r3 = t5.references, i3 = 0; i3 < r3.length; ++i3) {
        var a3 = r3[i3].identifier;
        "eval" !== a3.name || LA.isCallee(a3) || n2(a3);
      }
    }(t4), function(e26) {
      for (var t5 = 0; t5 < $T.length; ++t5) {
        var r3 = $T[t5], i3 = LA.getVariableByName(e26, r3);
        if (i3) for (var a3 = i3.references, o3 = 0; o3 < a3.length; ++o3) {
          for (var s2 = a3[o3].identifier.parent; HT(s2, r3); ) s2 = s2.parent;
          HT(s2, "eval") && n2(s2);
        }
      }
    }(t4);
  }, FunctionDeclaration: t3, "FunctionDeclaration:exit": r2, FunctionExpression: t3, "FunctionExpression:exit": r2, ArrowFunctionExpression: t3, "ArrowFunctionExpression:exit": r2, ThisExpression: function(e26) {
    HT(e26.parent, "eval") && (!o2.initialized && (o2.initialized = true, o2.defaultThis = LA.isDefaultThisBinding(o2.node, a2)), !o2.strict && o2.defaultThis && n2(e26.parent));
  } };
} };
var JT = { meta: { type: "problem", docs: { description: "disallow reassigning exceptions in `catch` clauses", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-ex-assign" }, schema: [], messages: { unexpected: "Do not assign to the exception parameter." } }, create: function(e25) {
  function t3(t4) {
    LA.getModifyingReferences(t4.references).forEach(function(t5) {
      e25.report({ node: t5.identifier, messageId: "unexpected" });
    });
  }
  return { CatchClause: function(r2) {
    e25.getDeclaredVariables(r2).forEach(t3);
  } };
} };
var QT = /* @__PURE__ */ new Set(["defineProperty", "defineProperties"]);
var XT = { meta: { type: "suggestion", docs: { description: "disallow extending native types", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-extend-native" }, schema: [{ type: "object", properties: { exceptions: { type: "array", items: { type: "string" }, uniqueItems: true } }, additionalProperties: false }], messages: { unexpected: "{{builtin}} prototype is read only, properties should not be added." } }, create: function(e25) {
  function t3(t4, r3) {
    e25.report({ node: t4, messageId: "unexpected", data: { builtin: r3 } });
  }
  function r2(e26) {
    return !(!e26 || !e26.parent || "MemberExpression" !== e26.parent.type || e26.parent.object !== e26 || "prototype" !== LA.getStaticPropertyName(e26.parent));
  }
  function n2(e26) {
    !function(e27) {
      return !(!r2(e27) || "MemberExpression" !== e27.parent.parent.type || "AssignmentExpression" !== e27.parent.parent.parent.type || e27.parent.parent.parent.left !== e27.parent.parent);
    }(e26) ? function(e27) {
      return !(!r2(e27) || "CallExpression" !== e27.parent.parent.type || e27.parent.parent.arguments[0] !== e27.parent || "MemberExpression" !== e27.parent.parent.callee.type || "Identifier" !== e27.parent.parent.callee.object.type || "Object" !== e27.parent.parent.callee.object.name || "Identifier" !== e27.parent.parent.callee.property.type || !QT.has(e27.parent.parent.callee.property.name));
    }(e26) && t3(e26.parent.parent, e26.name) : t3(e26.parent.parent.parent, e26.name);
  }
  var i2 = e25.options[0] || {}, a2 = new Set(i2.exceptions || []), o2 = new Set(Object.keys(Fy.globals.builtin).filter(function(e26) {
    return e26[0].toUpperCase() === e26[0];
  }).filter(function(e26) {
    return !a2.has(e26);
  }));
  return { "Program:exit": function() {
    var t4 = e25.getScope();
    o2.forEach(function(e26) {
      var r3 = t4.set.get(e26);
      r3 && r3.references && r3.references.map(function(e27) {
        return e27.identifier;
      }).forEach(n2);
    });
  } };
} };
var YT = /* @__PURE__ */ new Set(["Literal", "Identifier", "ThisExpression", "FunctionExpression"]);
var ZT = { meta: { type: "suggestion", docs: { description: "disallow unnecessary calls to `.bind()`", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-extra-bind" }, schema: [], fixable: "code", messages: { unexpected: "The function binding is unnecessary." } }, create: function(e25) {
  function t3(t4) {
    e25.report({ node: t4.parent.parent, messageId: "unexpected", loc: t4.parent.property.loc.start, fix: function(e26) {
      if (t4.parent.parent.arguments.length && !function(e27) {
        return YT.has(e27.type);
      }(t4.parent.parent.arguments[0])) return null;
      var r3 = a2.getFirstTokenBetween(t4.parent.object, t4.parent.property, LA.isNotClosingParenToken), n3 = a2.getLastToken(t4.parent.parent);
      return a2.commentsExistBetween(r3, n3) ? null : e26.removeRange([r3.range[0], t4.parent.parent.range[1]]);
    } });
  }
  function r2(e26) {
    var t4 = e26.parent, r3 = t4.parent;
    return r3 && "CallExpression" === r3.type && r3.callee === t4 && 1 === r3.arguments.length && "SpreadElement" !== r3.arguments[0].type && "MemberExpression" === t4.type && t4.object === e26 && "bind" === LA.getStaticPropertyName(t4);
  }
  function n2(e26) {
    o2 = { isBound: r2(e26), thisFound: false, upper: o2 };
  }
  function i2(e26) {
    o2.isBound && !o2.thisFound && t3(e26), o2 = o2.upper;
  }
  var a2 = e25.getSourceCode(), o2 = null;
  return { "ArrowFunctionExpression:exit": function(e26) {
    r2(e26) && t3(e26);
  }, FunctionDeclaration: n2, "FunctionDeclaration:exit": i2, FunctionExpression: n2, "FunctionExpression:exit": i2, ThisExpression: function() {
    o2 && (o2.thisFound = true);
  } };
} };
var eP = { meta: { type: "suggestion", docs: { description: "disallow unnecessary boolean casts", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-extra-boolean-cast" }, schema: [], fixable: "code", messages: { unexpectedCall: "Redundant Boolean call.", unexpectedNegation: "Redundant double negation." } }, create: function(e25) {
  function t3(e26, t4) {
    return -1 !== i2.indexOf(t4.type) && e26 === t4.test || "UnaryExpression" === t4.type && "!" === t4.operator;
  }
  function r2(e26) {
    return !!n2.getCommentsInside(e26).length;
  }
  var n2 = e25.getSourceCode(), i2 = ["IfStatement", "DoWhileStatement", "WhileStatement", "ConditionalExpression", "ForStatement"];
  return { UnaryExpression: function(i3) {
    var a2 = e25.getAncestors(), o2 = a2.pop(), s2 = a2.pop();
    "!" !== i3.operator || "UnaryExpression" !== o2.type || "!" !== o2.operator || (t3(o2, s2) || ("CallExpression" === s2.type || "NewExpression" === s2.type) && "Identifier" === s2.callee.type && "Boolean" === s2.callee.name) && e25.report({ node: o2, messageId: "unexpectedNegation", fix: function(e26) {
      if (r2(o2)) return null;
      var t4 = "", a3 = n2.getTokenBefore(o2), s3 = n2.getFirstToken(i3.argument);
      return a3 && a3.range[1] === o2.range[0] && !LA.canTokensBeAdjacent(a3, s3) && (t4 = " "), e26.replaceText(o2, t4 + n2.getText(i3.argument));
    } });
  }, CallExpression: function(i3) {
    var a2 = i3.parent;
    "Identifier" !== i3.callee.type || "Boolean" !== i3.callee.name || t3(i3, a2) && e25.report({ node: i3, messageId: "unexpectedCall", fix: function(e26) {
      if (!i3.arguments.length) {
        if ("UnaryExpression" === a2.type && "!" === a2.operator) {
          if (r2(a2)) return null;
          var t4 = "", o2 = n2.getTokenBefore(a2);
          return o2 && o2.range[1] === a2.range[0] && !LA.canTokensBeAdjacent(o2, "true") && (t4 = " "), e26.replaceText(a2, t4 + "true");
        }
        return r2(i3) ? null : e26.replaceText(i3, "false");
      }
      if (1 < i3.arguments.length || "SpreadElement" === i3.arguments[0].type || r2(i3)) return null;
      var s2 = i3.arguments[0];
      return LA.getPrecedence(s2) < LA.getPrecedence(i3.parent) ? e26.replaceText(i3, "(".concat(n2.getText(s2), ")")) : e26.replaceText(i3, n2.getText(s2));
    } });
  } };
} };
var tP = { meta: { type: "suggestion", docs: { description: "disallow unnecessary labels", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-extra-label" }, schema: [], fixable: "code", messages: { unexpected: "This label '{{name}}' is unnecessary." } }, create: function(e25) {
  function t3(e26) {
    a2 = { label: "LabeledStatement" === e26.parent.type ? e26.parent.label : null, breakable: true, upper: a2 };
  }
  function r2() {
    a2 = a2.upper;
  }
  function n2(t4) {
    if (t4.label) {
      for (var r3 = t4.label, n3 = a2; null !== n3; n3 = n3.upper) if (n3.breakable || n3.label && n3.label.name === r3.name) return void (n3.breakable && n3.label && n3.label.name === r3.name && e25.report({ node: r3, messageId: "unexpected", data: r3, fix: function(e26) {
        var n4 = i2.getFirstToken(t4);
        return i2.commentsExistBetween(n4, r3) ? null : e26.removeRange([n4.range[1], r3.range[1]]);
      } }));
    }
  }
  var i2 = e25.getSourceCode(), a2 = null;
  return { WhileStatement: t3, "WhileStatement:exit": r2, DoWhileStatement: t3, "DoWhileStatement:exit": r2, ForStatement: t3, "ForStatement:exit": r2, ForInStatement: t3, "ForInStatement:exit": r2, ForOfStatement: t3, "ForOfStatement:exit": r2, SwitchStatement: t3, "SwitchStatement:exit": r2, LabeledStatement: function(e26) {
    LA.isBreakableStatement(e26.body) || (a2 = { label: e26.label, breakable: false, upper: a2 });
  }, "LabeledStatement:exit": function(e26) {
    LA.isBreakableStatement(e26.body) || (a2 = a2.upper);
  }, BreakStatement: n2, ContinueStatement: n2 };
} };
var rP = Fy.require$$0.isParenthesized;
var nP = { meta: { type: "layout", docs: { description: "disallow unnecessary parentheses", category: "Possible Errors", recommended: false, url: "https://eslint.org/docs/rules/no-extra-parens" }, fixable: "code", schema: { anyOf: [{ type: "array", items: [{ enum: ["functions"] }], minItems: 0, maxItems: 1 }, { type: "array", items: [{ enum: ["all"] }, { type: "object", properties: { conditionalAssign: { type: "boolean" }, nestedBinaryExpressions: { type: "boolean" }, returnAssign: { type: "boolean" }, ignoreJSX: { enum: ["none", "all", "single-line", "multi-line"] }, enforceForArrowConditionals: { type: "boolean" }, enforceForSequenceExpressions: { type: "boolean" }, enforceForNewInMemberExpressions: { type: "boolean" } }, additionalProperties: false }], minItems: 0, maxItems: 2 }] }, messages: { unexpected: "Unnecessary parentheses around expression." } }, create: function(e25) {
  function t3(e26) {
    if ("JSXElement" === e26.type || "JSXFragment" === e26.type) {
      var t4 = e26.loc.start.line === e26.loc.end.line;
      switch (P2) {
        case "all":
          return false;
        case "multi-line":
          return t4;
        case "single-line":
          return !t4;
      }
    }
    return !("SequenceExpression" === e26.type && B2) && (A2 || "FunctionExpression" === e26.type || "ArrowFunctionExpression" === e26.type);
  }
  function r2(e26) {
    return rP(1, e26, k2);
  }
  function n2(e26) {
    return rP(2, e26, k2);
  }
  function i2(e26) {
    return t3(e26) && r2(e26);
  }
  function a2(e26) {
    return t3(e26) && n2(e26);
  }
  function o2(e26) {
    return w2 && "AssignmentExpression" === e26.test.type;
  }
  function s2(e26) {
    var t4 = k2.getLastToken(e26), r3 = k2.getTokenBefore(t4);
    return 0 < e26.arguments.length || LA.isOpeningParenToken(r3) && LA.isClosingParenToken(t4) && e26.callee.range[1] < e26.range[1];
  }
  function u2(e26) {
    return !("AssignmentExpression" !== e26.type && ("ConditionalExpression" !== e26.type || "AssignmentExpression" !== e26.consequent.type && "AssignmentExpression" !== e26.alternate.type) && !(e26.left && "AssignmentExpression" === e26.left.type || e26.right && "AssignmentExpression" === e26.right.type));
  }
  function c2(e26) {
    return !(!T2 || !function(e27) {
      for (var t4 = e27; t4; t4 = t4.parent) if ("ReturnStatement" === t4.type || "ArrowFunctionExpression" === t4.type && "BlockStatement" !== t4.body.type) return true;
      return false;
    }(e26)) && ("ReturnStatement" === e26.type ? e26.argument && u2(e26.argument) : "ArrowFunctionExpression" === e26.type && "BlockStatement" !== e26.body.type ? u2(e26.body) : u2(e26));
  }
  function l2(e26, t4) {
    return e26.loc.end.line === t4.loc.start.line ? i2(t4) : a2(t4);
  }
  function p2(e26) {
    return "CallExpression" === e26.type && "FunctionExpression" === e26.callee.type;
  }
  function f2(t4) {
    function i3() {
      e25.report({ node: t4, loc: a3.loc, messageId: "unexpected", fix: function(e26) {
        var r3 = k2.text.slice(a3.range[1], o3.range[0]);
        return e26.replaceTextRange([a3.range[0], o3.range[1]], (function(e27) {
          var t5 = k2.getTokenBefore(e27), r4 = k2.getTokenBefore(e27, 1), n3 = k2.getFirstToken(e27);
          return r4 && r4.range[1] === t5.range[0] && t5.range[1] === n3.range[0] && !LA.canTokensBeAdjacent(r4, n3);
        }(t4) ? " " : "") + r3 + (function(e27) {
          var t5 = k2.getTokensAfter(e27, { count: 2 }), r4 = t5[0], n3 = t5[1], i4 = k2.getLastToken(e27);
          return r4 && n3 && !k2.isSpaceBetweenTokens(r4, n3) && !LA.canTokensBeAdjacent(i4, n3);
        }(t4) ? " " : ""));
      } });
    }
    var a3 = k2.getTokenBefore(t4), o3 = k2.getTokenAfter(t4);
    if (!n2(t4)) {
      if (D2.has(k2.getFirstToken(t4))) return;
      if (p2(t4) && !r2(t4.callee)) return;
    }
    return S3 ? void S3.reports.push({ node: t4, finishReport: i3 }) : void i3();
  }
  function h2(e26) {
    "UnaryExpression" === e26.type && "BinaryExpression" === e26.argument.type && "**" === e26.argument.operator || i2(e26.argument) && F2(e26.argument) >= F2(e26) && f2(e26.argument);
  }
  function d2(e26) {
    var t4 = e26.callee;
    if (i2(t4) && F2(t4) >= F2(e26)) {
      var r3 = "NewExpression" === t4.type && !s2(t4);
      !a2(t4) && (p2(e26) || r3 || "MemberExpression" === t4.type && function(e27) {
        for (var t5 = e27.object, r4 = e27.object.type; "MemberExpression" === r4; ) r4 = (t5 = t5.object).type;
        return "CallExpression" === r4;
      }(t4)) || f2(e26.callee);
    }
    e26.arguments.filter(function(e27) {
      return i2(e27) && F2(e27) >= L2;
    }).forEach(f2);
  }
  function m2(e26) {
    var t4 = F2(e26), r3 = F2(e26.left), n3 = F2(e26.right), a3 = "**" === e26.operator, o3 = _2 && ("BinaryExpression" === e26.left.type || "LogicalExpression" === e26.left.type) || "UnaryExpression" === e26.left.type && a3, s3 = _2 && ("BinaryExpression" === e26.right.type || "LogicalExpression" === e26.right.type);
    !o3 && i2(e26.left) && (r3 > t4 || r3 === t4 && !a3) && f2(e26.left), !s3 && i2(e26.right) && (n3 > t4 || n3 === t4 && a3) && f2(e26.right);
  }
  function g2(e26) {
    e26.superClass && ((F2(e26.superClass) > N2 ? i2(e26.superClass) : a2(e26.superClass)) && f2(e26.superClass));
  }
  function y2(e26) {
    (F2(e26.argument) >= L2 ? i2(e26.argument) : a2(e26.argument)) && f2(e26.argument);
  }
  function v2(e26) {
    var t4 = r2(e26) ? k2.getTokenBefore(e26) : k2.getFirstToken(e26), n3 = k2.getTokenAfter(t4, LA.isNotOpeningParenToken), a3 = n3 ? k2.getTokenAfter(n3) : null, o3 = n3 ? k2.getTokenAfter(n3, LA.isNotClosingParenToken) : null;
    LA.isOpeningParenToken(t4) && (LA.isOpeningBraceToken(n3) || "Keyword" === n3.type && ("function" === n3.value || "class" === n3.value || "let" === n3.value && o3 && (LA.isOpeningBracketToken(o3) || "Identifier" === o3.type)) || n3 && "Identifier" === n3.type && "async" === n3.value && a3 && "Keyword" === a3.type && "function" === a3.value) && D2.add(n3), i2(e26) && f2(e26);
  }
  function x2(e26, t4) {
    return function(e27, t5) {
      for (var r3 = [e27], n3 = e27; n3 !== t5; ) {
        if (null === (n3 = n3.parent)) throw new Error("Nodes are not in the ancestor-descendant relationship.");
        r3.push(n3);
      }
      return r3;
    }(t4, e26).reverse();
  }
  function b2(e26, t4) {
    switch (e26.type) {
      case "ArrayExpression":
      case "ArrayPattern":
      case "BlockStatement":
      case "ObjectExpression":
      case "ObjectPattern":
      case "TemplateLiteral":
        return true;
      case "ArrowFunctionExpression":
      case "FunctionExpression":
        return e26.params.includes(t4);
      case "CallExpression":
      case "NewExpression":
        return e26.arguments.includes(t4);
      case "MemberExpression":
        return e26.computed && e26.property === t4;
      case "ConditionalExpression":
        return e26.consequent === t4;
      default:
        return false;
    }
  }
  function C3(e26) {
    return S3.reports.some(function(t4) {
      return t4.node === e26;
    });
  }
  var S3, k2 = e25.getSourceCode(), D2 = /* @__PURE__ */ new WeakSet(), F2 = LA.getPrecedence, A2 = "functions" !== e25.options[0], w2 = A2 && e25.options[1] && false === e25.options[1].conditionalAssign, _2 = A2 && e25.options[1] && false === e25.options[1].nestedBinaryExpressions, T2 = A2 && e25.options[1] && false === e25.options[1].returnAssign, P2 = A2 && e25.options[1] && e25.options[1].ignoreJSX, I2 = A2 && e25.options[1] && false === e25.options[1].enforceForArrowConditionals, B2 = A2 && e25.options[1] && false === e25.options[1].enforceForSequenceExpressions, O2 = A2 && e25.options[1] && false === e25.options[1].enforceForNewInMemberExpressions, L2 = F2({ type: "AssignmentExpression" }), N2 = F2({ type: "UpdateExpression" });
  return { ArrayExpression: function(e26) {
    e26.elements.filter(function(e27) {
      return e27 && i2(e27) && F2(e27) >= L2;
    }).forEach(f2);
  }, ArrowFunctionExpression: function(e26) {
    if (!c2(e26) && ("ConditionalExpression" !== e26.body.type || !I2 || n2(e26.body)) && "BlockStatement" !== e26.body.type) {
      var t4 = k2.getFirstToken(e26.body, LA.isNotOpeningParenToken), r3 = k2.getTokenBefore(t4);
      LA.isOpeningParenToken(r3) && LA.isOpeningBraceToken(t4) && D2.add(t4), i2(e26.body) && F2(e26.body) >= L2 && f2(e26.body);
    }
  }, AssignmentExpression: function(e26) {
    c2(e26) || i2(e26.right) && F2(e26.right) >= F2(e26) && f2(e26.right);
  }, BinaryExpression: function(e26) {
    S3 && "in" === e26.operator && S3.inExpressionNodes.push(e26), m2(e26);
  }, CallExpression: d2, ClassBody: function(e26) {
    e26.body.filter(function(e27) {
      return "MethodDefinition" === e27.type && e27.computed && e27.key && i2(e27.key) && F2(e27.key) >= L2;
    }).forEach(function(e27) {
      return f2(e27.key);
    });
  }, ConditionalExpression: function(e26) {
    c2(e26) || (i2(e26.test) && F2(e26.test) >= F2({ type: "LogicalExpression", operator: "||" }) && f2(e26.test), i2(e26.consequent) && F2(e26.consequent) >= L2 && f2(e26.consequent), i2(e26.alternate) && F2(e26.alternate) >= L2 && f2(e26.alternate));
  }, DoWhileStatement: function(e26) {
    i2(e26.test) && !o2(e26) && f2(e26.test);
  }, ExportDefaultDeclaration: function(e26) {
    return v2(e26.declaration);
  }, ExpressionStatement: function(e26) {
    return v2(e26.expression);
  }, "ForInStatement, ForOfStatement": function(e26) {
    if ("VariableDeclarator" !== e26.left.type) {
      var t4 = k2.getFirstToken(e26.left, LA.isNotOpeningParenToken);
      "let" === t4.value && (t4.range[1] === e26.left.range[1] || LA.isOpeningBracketToken(k2.getTokenAfter(t4, LA.isNotClosingParenToken))) && D2.add(t4);
    }
    ("ForOfStatement" !== e26.type || "SequenceExpression" !== e26.right.type) && i2(e26.right) && f2(e26.right), i2(e26.left) && f2(e26.left);
  }, ForStatement: function(e26) {
    e26.test && i2(e26.test) && !o2(e26) && f2(e26.test), e26.update && i2(e26.update) && f2(e26.update), e26.init && (S3 = { upper: S3, inExpressionNodes: [], reports: [] }, i2(e26.init) && f2(e26.init));
  }, "ForStatement > *.init:exit": function(e26) {
    S3.reports.length && S3.inExpressionNodes.forEach(function(t4) {
      for (var i3, a3 = x2(e26, t4), o3 = 0; o3 < a3.length; o3++) {
        var s3 = a3[o3];
        if (o3 < a3.length - 1) {
          if (b2(s3, a3[o3 + 1])) return;
        }
        if (r2(s3)) {
          if (!C3(s3)) return;
          if (n2(s3)) return;
          i3 || (i3 = s3);
        }
      }
      !function(e27) {
        S3.reports = S3.reports.filter(function(t5) {
          return t5.node !== e27;
        });
      }(i3);
    }), function() {
      var e27, t4, r3 = S3, n3 = r3.upper, i3 = r3.inExpressionNodes, a3 = r3.reports;
      n3 ? ((e27 = n3.inExpressionNodes).push.apply(e27, E(i3)), (t4 = n3.reports).push.apply(t4, E(a3))) : a3.forEach(function(e28) {
        return (0, e28.finishReport)();
      }), S3 = n3;
    }();
  }, IfStatement: function(e26) {
    i2(e26.test) && !o2(e26) && f2(e26.test);
  }, ImportExpression: function(e26) {
    var t4 = e26.source;
    "SequenceExpression" === t4.type ? a2(t4) && f2(t4) : i2(t4) && f2(t4);
  }, LogicalExpression: m2, MemberExpression: function(e26) {
    var t4 = i2(e26.object);
    t4 && F2(e26.object) >= F2(e26) && (e26.computed || !(LA.isDecimalInteger(e26.object) || "Literal" === e26.object.type && e26.object.regex)) && f2(e26.object), t4 && "CallExpression" === e26.object.type && "NewExpression" !== e26.parent.type && f2(e26.object), t4 && !O2 && "NewExpression" === e26.object.type && s2(e26.object) && f2(e26.object), e26.computed && i2(e26.property) && f2(e26.property);
  }, NewExpression: d2, ObjectExpression: function(e26) {
    e26.properties.filter(function(e27) {
      var t4 = e27.value;
      return t4 && i2(t4) && F2(t4) >= L2;
    }).forEach(function(e27) {
      return f2(e27.value);
    });
  }, Property: function(e26) {
    if (e26.computed) {
      var t4 = e26.key;
      t4 && i2(t4) && F2(t4) >= L2 && f2(t4);
    }
  }, ReturnStatement: function(e26) {
    var t4 = k2.getFirstToken(e26);
    c2(e26) || e26.argument && l2(t4, e26.argument) && ("Literal" !== e26.argument.type || !e26.argument.regex) && f2(e26.argument);
  }, SequenceExpression: function(e26) {
    e26.expressions.filter(function(t4) {
      return i2(t4) && F2(t4) >= F2(e26);
    }).forEach(f2);
  }, SwitchCase: function(e26) {
    e26.test && i2(e26.test) && f2(e26.test);
  }, SwitchStatement: function(e26) {
    i2(e26.discriminant) && f2(e26.discriminant);
  }, ThrowStatement: function(e26) {
    l2(k2.getFirstToken(e26), e26.argument) && f2(e26.argument);
  }, UnaryExpression: h2, UpdateExpression: h2, AwaitExpression: h2, VariableDeclarator: function(e26) {
    e26.init && i2(e26.init) && F2(e26.init) >= L2 && ("Literal" !== e26.init.type || !e26.init.regex) && f2(e26.init);
  }, WhileStatement: function(e26) {
    i2(e26.test) && !o2(e26) && f2(e26.test);
  }, WithStatement: function(e26) {
    i2(e26.object) && f2(e26.object);
  }, YieldExpression: function(e26) {
    if (e26.argument) {
      var t4 = k2.getFirstToken(e26);
      (F2(e26.argument) >= F2(e26) && l2(t4, e26.argument) || a2(e26.argument)) && f2(e26.argument);
    }
  }, ClassDeclaration: g2, ClassExpression: g2, SpreadElement: y2, SpreadProperty: y2, ExperimentalSpreadProperty: y2, TemplateLiteral: function(e26) {
    e26.expressions.filter(function(e27) {
      return e27 && i2(e27);
    }).forEach(f2);
  }, AssignmentPattern: function(e26) {
    var t4 = e26.right;
    t4 && i2(t4) && F2(t4) >= L2 && f2(t4);
  } };
} };
var iP = { meta: { type: "suggestion", docs: { description: "disallow unnecessary semicolons", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-extra-semi" }, fixable: "code", schema: [], messages: { unexpected: "Unnecessary semicolon." } }, create: function(e25) {
  function t3(t4) {
    e25.report({ node: t4, messageId: "unexpected", fix: function(r3) {
      return new RT(r3, e25.getSourceCode()).retainSurroundingTokens(t4).remove(t4);
    } });
  }
  function r2(e26) {
    for (var r3 = e26; "Punctuator" === r3.type && !LA.isClosingBraceToken(r3); r3 = n2.getTokenAfter(r3)) LA.isSemicolonToken(r3) && t3(r3);
  }
  var n2 = e25.getSourceCode();
  return { EmptyStatement: function(e26) {
    var r3 = e26.parent;
    -1 === ["ForStatement", "ForInStatement", "ForOfStatement", "WhileStatement", "DoWhileStatement", "IfStatement", "LabeledStatement", "WithStatement"].indexOf(r3.type) && t3(e26);
  }, ClassBody: function(e26) {
    r2(n2.getFirstToken(e26, 1));
  }, MethodDefinition: function(e26) {
    r2(n2.getTokenAfter(e26));
  } };
} };
var aP = /fall[s\u017F]?[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]?through/i;
function oP(e25) {
  return e25.reachable;
}
var sP = { meta: { type: "problem", docs: { description: "disallow fallthrough of `case` statements", category: "Best Practices", recommended: true, url: "https://eslint.org/docs/rules/no-fallthrough" }, schema: [{ type: "object", properties: { commentPattern: { type: "string", default: "" } }, additionalProperties: false }], messages: { case: "Expected a 'break' statement before 'case'.", default: "Expected a 'break' statement before 'default'." } }, create: function(e25) {
  var t3, r2 = e25.options[0] || {}, n2 = null, i2 = e25.getSourceCode(), a2 = null;
  return t3 = r2.commentPattern ? new RegExp(r2.commentPattern, "u") : aP, { onCodePathStart: function(e26) {
    n2 = e26;
  }, onCodePathEnd: function() {
    n2 = n2.upper;
  }, SwitchCase: function(r3) {
    a2 && !function(e26, t4, r4) {
      var n3 = t4.getSourceCode(), i3 = Fy.lodash.last(n3.getCommentsBefore(e26));
      return !(!i3 || !r4.test(i3.value));
    }(r3, e25, t3) && e25.report({ messageId: r3.test ? "case" : "default", node: r3 }), a2 = null;
  }, "SwitchCase:exit": function(e26) {
    var t4 = i2.getTokenAfter(e26);
    n2.currentSegments.some(oP) && (0 < e26.consequent.length || function(e27, t5) {
      return t5.loc.start.line > e27.loc.end.line + 1;
    }(e26, t4)) && Fy.lodash.last(e26.parent.cases) !== e26 && (a2 = e26);
  } };
} };
var uP = { meta: { type: "suggestion", docs: { description: "disallow leading or trailing decimal points in numeric literals", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-floating-decimal" }, schema: [], fixable: "code", messages: { leading: "A leading decimal point can be confused with a dot.", trailing: "A trailing decimal point can be confused with a dot." } }, create: function(e25) {
  var t3 = e25.getSourceCode();
  return { Literal: function(r2) {
    "number" == typeof r2.value && (r2.raw.startsWith(".") && e25.report({ node: r2, messageId: "leading", fix: function(e26) {
      var n2 = t3.getTokenBefore(r2), i2 = n2 && n2.range[1] === r2.range[0] && !LA.canTokensBeAdjacent(n2, "0".concat(r2.raw));
      return e26.insertTextBefore(r2, i2 ? " 0" : "0");
    } }), r2.raw.indexOf(".") === r2.raw.length - 1 && e25.report({ node: r2, messageId: "trailing", fix: function(e26) {
      return e26.insertTextAfter(r2, "0");
    } }));
  } };
} };
var cP = { meta: { type: "problem", docs: { description: "disallow reassigning `function` declarations", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-func-assign" }, schema: [] }, create: function(e25) {
  function t3(t4) {
    LA.getModifyingReferences(t4).forEach(function(t5) {
      e25.report({ node: t5.identifier, message: "'{{name}}' is a function.", data: { name: t5.identifier.name } });
    });
  }
  function r2(e26) {
    "FunctionName" === e26.defs[0].type && t3(e26.references);
  }
  function n2(t4) {
    e25.getDeclaredVariables(t4).forEach(r2);
  }
  return { FunctionDeclaration: n2, FunctionExpression: n2 };
} };
var lP = /^(?:i|lastI)ndexOf$/;
function pP(e25) {
  return "Literal" === e25.type && "number" == typeof e25.value || "CallExpression" === e25.type && ("Number" === e25.callee.name || "parseInt" === e25.callee.name || "parseFloat" === e25.callee.name);
}
function fP(e25) {
  return LA.isStringLiteral(e25) && ("" === e25.value || "TemplateLiteral" === e25.type && 1 === e25.quasis.length && "" === e25.quasis[0].value.cooked);
}
function hP(e25) {
  return fP(e25.left) ? e25.right : e25.left;
}
var dP = { meta: { type: "suggestion", docs: { description: "disallow shorthand type conversions", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-implicit-coercion" }, fixable: "code", schema: [{ type: "object", properties: { boolean: { type: "boolean", default: true }, number: { type: "boolean", default: true }, string: { type: "boolean", default: true }, allow: { type: "array", items: { enum: ["~", "!!", "+", "*"] }, uniqueItems: true } }, additionalProperties: false }] }, create: function(e25) {
  function t3(t4, r3, i2) {
    e25.report({ node: t4, message: "use `{{recommendation}}` instead.", data: { recommendation: r3 }, fix: function(e26) {
      if (!i2) return null;
      var a2 = n2.getTokenBefore(t4);
      return a2 && a2.range[1] === t4.range[0] && !LA.canTokensBeAdjacent(a2, r3) ? e26.replaceText(t4, " ".concat(r3)) : e26.replaceText(t4, r3);
    } });
  }
  var r2 = function(e26) {
    return { boolean: !("boolean" in e26) || e26.boolean, number: !("number" in e26) || e26.number, string: !("string" in e26) || e26.string, allow: e26.allow || [] };
  }(e25.options[0] || {}), n2 = e25.getSourceCode();
  return { UnaryExpression: function(e26) {
    0 <= r2.allow.indexOf("!!") || !r2.boolean || !function(e27) {
      return "!" === e27.operator && "UnaryExpression" === e27.argument.type && "!" === e27.argument.operator;
    }(e26) || t3(e26, "Boolean(".concat(n2.getText(e26.argument.argument), ")"), true);
    0 <= r2.allow.indexOf("~") || !r2.boolean || !function(e27) {
      return "~" === e27.operator && "CallExpression" === e27.argument.type && "MemberExpression" === e27.argument.callee.type && "Identifier" === e27.argument.callee.property.type && lP.test(e27.argument.callee.property.name);
    }(e26) || t3(e26, "".concat(n2.getText(e26.argument), " !== -1"), false);
    0 <= r2.allow.indexOf("+") || !r2.number || "+" !== e26.operator || pP(e26.argument) || t3(e26, "Number(".concat(n2.getText(e26.argument), ")"), true);
  }, "BinaryExpression:exit": function(e26) {
    var i2 = 0 <= r2.allow.indexOf("*"), a2 = !i2 && r2.number && function(e27) {
      return "*" === e27.operator && ("Literal" === e27.left.type && 1 === e27.left.value || "Literal" === e27.right.type && 1 === e27.right.value);
    }(e26) && function(e27) {
      var t4 = e27.left, r3 = e27.right;
      return "BinaryExpression" === r3.type || pP(r3) ? "BinaryExpression" === t4.type || pP(t4) ? null : t4 : r3;
    }(e26);
    a2 && t3(e26, "Number(".concat(n2.getText(a2), ")"), true);
    !(i2 = 0 <= r2.allow.indexOf("+")) && r2.string && function(e27) {
      return "+" === e27.operator && (fP(e27.left) && !LA.isStringLiteral(e27.right) || fP(e27.right) && !LA.isStringLiteral(e27.left));
    }(e26) && t3(e26, "String(".concat(n2.getText(hP(e26)), ")"), true);
  }, AssignmentExpression: function(e26) {
    if (!(0 <= r2.allow.indexOf("+")) && r2.string && function(e27) {
      return "+=" === e27.operator && fP(e27.right);
    }(e26)) {
      var i2 = n2.getText(hP(e26));
      t3(e26, "".concat(i2, " = String(").concat(i2, ")"), true);
    }
  } };
} };
var mP = Fy.require$$0;
var gP = mP.findVariable;
var yP = mP.getPropertyName;
var vP = { Object: /* @__PURE__ */ new Set(["assign", "defineProperties", "defineProperty", "freeze", "setPrototypeOf"]), Reflect: /* @__PURE__ */ new Set(["defineProperty", "deleteProperty", "set", "setPrototypeOf"]) };
function xP(e25, t3) {
  var r2 = e25.parent;
  return "MemberExpression" === r2.type && r2.object === e25 && (function(e26) {
    var t4 = e26.parent;
    return "AssignmentExpression" === t4.type && t4.left === e26 || "ArrayPattern" === t4.type || "Property" === t4.type && t4.value === e26 && "ObjectPattern" === t4.parent.type || "RestElement" === t4.type || "AssignmentPattern" === t4.type && t4.left === e26;
  }(r2) || function(e26) {
    var t4 = e26.parent;
    return "UpdateExpression" === t4.type && t4.argument === e26 || "UnaryExpression" === t4.type && "delete" === t4.operator && t4.argument === e26;
  }(r2) || function(e26) {
    var t4 = e26.parent;
    return "ForInStatement" === t4.type && t4.left === e26 || "ForOfStatement" === t4.type && t4.left === e26;
  }(r2)) || function(e26, t4) {
    var r3 = e26.parent;
    if ("CallExpression" === r3.type && r3.arguments[0] === e26 && "MemberExpression" === r3.callee.type && "Identifier" === r3.callee.object.type) {
      var n2 = r3.callee, i2 = n2.object;
      if (Object.keys(vP).includes(i2.name)) {
        var a2 = gP(t4, i2);
        return null !== a2 && "global" === a2.scope.type && vP[i2.name].has(yP(n2, t4));
      }
    }
    return false;
  }(e25, t3);
}
function bP(e25) {
  for (var t3 = e25.parent; t3 && "AssignmentExpression" !== t3.type && "UpdateExpression" !== t3.type && "UnaryExpression" !== t3.type && "CallExpression" !== t3.type && "ForInStatement" !== t3.type && "ForOfStatement" !== t3.type; ) t3 = t3.parent;
  return t3 || e25;
}
var EP = { meta: { type: "problem", docs: { description: "disallow assigning to imported bindings", category: "Possible Errors", recommended: false, url: "https://eslint.org/docs/rules/no-import-assign" }, schema: [], messages: { readonly: "'{{name}}' is read-only.", readonlyMember: "The members of '{{name}}' are read-only." } }, create: function(e25) {
  return { ImportDeclaration: function(t3) {
    var r2 = e25.getScope(), n2 = true, i2 = false, a2 = void 0;
    try {
      for (var o2, s2 = e25.getDeclaredVariables(t3)[Symbol.iterator](); !(n2 = (o2 = s2.next()).done); n2 = true) {
        var u2 = o2.value, c2 = u2.defs.some(function(e26) {
          return "ImportNamespaceSpecifier" === e26.node.type;
        }), l2 = null, p2 = true, f2 = false, h2 = void 0;
        try {
          for (var d2, m2 = u2.references[Symbol.iterator](); !(p2 = (d2 = m2.next()).done); p2 = true) {
            var g2 = d2.value, y2 = g2.identifier;
            y2 !== l2 && (l2 = y2, g2.isWrite() ? e25.report({ node: bP(y2), messageId: "readonly", data: { name: y2.name } }) : c2 && xP(y2, r2) && e25.report({ node: bP(y2), messageId: "readonlyMember", data: { name: y2.name } }));
          }
        } catch (e26) {
          f2 = true, h2 = e26;
        } finally {
          try {
            p2 || null == m2.return || m2.return();
          } finally {
            if (f2) throw h2;
          }
        }
      }
    } catch (e26) {
      i2 = true, a2 = e26;
    } finally {
      try {
        n2 || null == s2.return || s2.return();
      } finally {
        if (i2) throw a2;
      }
    }
  } };
} };
var CP = { meta: { type: "suggestion", docs: { description: "disallow inline comments after code", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-inline-comments" }, schema: [] }, create: function(e25) {
  function t3(t4) {
    var n2 = r2.lines[t4.loc.start.line - 1] + "", i2 = r2.lines[t4.loc.end.line - 1] + "", a2 = n2.slice(0, t4.loc.start.column).trim(), o2 = i2.slice(t4.loc.end.column).trim(), s2 = !a2, u2 = !o2;
    if (!s2 || !u2) {
      if ((s2 || "{" === a2) && (u2 || "}" === o2)) {
        var c2 = r2.getNodeByRangeIndex(t4.range[0]);
        if (c2 && "JSXEmptyExpression" === c2.type) return;
      }
      LA.isDirectiveComment(t4) || e25.report({ node: t4, message: "Unexpected comment inline with code." });
    }
  }
  var r2 = e25.getSourceCode();
  return { Program: function() {
    r2.getAllComments().filter(function(e26) {
      return "Shebang" !== e26.type;
    }).forEach(t3);
  } };
} };
var SP = new (0, PA.RegExpValidator)({ ecmaVersion: 2018 });
var kP = /[gimsuy]/g;
var DP = void 0;
var FP = { meta: { type: "problem", docs: { description: "disallow invalid regular expression strings in `RegExp` constructors", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-invalid-regexp" }, schema: [{ type: "object", properties: { allowConstructorFlags: { type: "array", items: { type: "string" } } }, additionalProperties: false }] }, create: function(e25) {
  function t3(e26) {
    return e26 && "Literal" === e26.type && "string" == typeof e26.value;
  }
  function r2(e26, t4) {
    try {
      return SP.validatePattern(e26, DP, DP, t4), null;
    } catch (e27) {
      return e27.message;
    }
  }
  var n2 = e25.options[0], i2 = null;
  if (n2 && n2.allowConstructorFlags) {
    var a2 = n2.allowConstructorFlags.join("").replace(kP, "");
    a2 && (i2 = new RegExp("[".concat(a2, "]"), "giu"));
  }
  return { "CallExpression, NewExpression": function(n3) {
    if ("Identifier" === n3.callee.type && "RegExp" === n3.callee.name && t3(n3.arguments[0])) {
      var a3 = n3.arguments[0].value, o2 = t3(n3.arguments[1]) ? n3.arguments[1].value : "";
      i2 && (o2 = o2.replace(i2, ""));
      var s2 = function(e26) {
        try {
          return SP.validateFlags(e26), null;
        } catch (t4) {
          return "Invalid flags supplied to RegExp constructor '".concat(e26, "'");
        }
      }(o2) || (o2 ? r2(a3, -1 !== o2.indexOf("u")) : r2(a3, true) && r2(a3, false));
      s2 && e25.report({ node: n3, message: "{{message}}.", data: { message: s2 } });
    }
  } };
} };
var AP = { meta: { type: "suggestion", docs: { description: "disallow `this` keywords outside of classes or class-like objects", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-invalid-this" }, schema: [{ type: "object", properties: { capIsConstructor: { type: "boolean", default: true } }, additionalProperties: false }] }, create: function(e25) {
  function t3(t4) {
    i2.push({ init: !e25.getScope().isStrict, node: t4, valid: true });
  }
  function r2() {
    i2.pop();
  }
  var n2 = false !== (e25.options[0] || {}).capIsConstructor, i2 = [], a2 = e25.getSourceCode();
  return i2.getCurrent = function() {
    var e26 = this[this.length - 1];
    return e26.init || (e26.init = true, e26.valid = !LA.isDefaultThisBinding(e26.node, a2, { capIsConstructor: n2 })), e26;
  }, { Program: function(t4) {
    var r3 = e25.getScope(), n3 = e25.parserOptions.ecmaFeatures || {};
    i2.push({ init: true, node: t4, valid: !(r3.isStrict || "module" === t4.sourceType || n3.globalReturn && r3.childScopes[0].isStrict) });
  }, "Program:exit": function() {
    i2.pop();
  }, FunctionDeclaration: t3, "FunctionDeclaration:exit": r2, FunctionExpression: t3, "FunctionExpression:exit": r2, ThisExpression: function(t4) {
    var r3 = i2.getCurrent();
    r3 && !r3.valid && e25.report({ node: t4, message: "Unexpected 'this'." });
  } };
} };
var wP = /[\x0B\f\x85\xA0\u1680\u180E\u2000-\u200B\u2028\u2029\u202F\u205F\u3000\uFEFF]/;
var _P = /[\x0B\f\x85\xA0\u1680\u180E\u2000-\u200B\u202F\u205F\u3000\uFEFF]+/gm;
var TP = /[\u2028\u2029]/gm;
var PP = LA.createGlobalLinebreakMatcher();
var IP = { meta: { type: "problem", docs: { description: "disallow irregular whitespace", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-irregular-whitespace" }, schema: [{ type: "object", properties: { skipComments: { type: "boolean", default: false }, skipStrings: { type: "boolean", default: true }, skipTemplates: { type: "boolean", default: false }, skipRegExps: { type: "boolean", default: false } }, additionalProperties: false }] }, create: function(e25) {
  function t3(e26) {
    var t4 = e26.loc.start, r3 = e26.loc.end;
    a2 = a2.filter(function(e27) {
      var n3 = e27.loc;
      return !(n3.line >= t4.line && n3.line <= r3.line && n3.column >= t4.column && (n3.column <= r3.column || n3.line < r3.line));
    });
  }
  function r2(e26) {
    var r3 = u2 && "string" == typeof e26.value, n3 = c2 && !!e26.regex;
    (r3 || n3) && wP.test(e26.raw) && t3(e26);
  }
  function n2(e26) {
    wP.test(e26.value) && t3(e26);
  }
  function i2() {
  }
  var a2 = [], o2 = e25.options[0] || {}, s2 = !!o2.skipComments, u2 = false !== o2.skipStrings, c2 = !!o2.skipRegExps, l2 = !!o2.skipTemplates, p2 = e25.getSourceCode(), f2 = p2.getAllComments(), h2 = {};
  return wP.test(p2.getText()) ? (h2.Program = function(e26) {
    (function(e27) {
      p2.lines.forEach(function(t4, r3) {
        for (var n3; null !== (n3 = _P.exec(t4)); ) {
          var i3 = { line: r3 + 1, column: n3.index };
          a2.push({ node: e27, message: "Irregular whitespace not allowed.", loc: i3 });
        }
      });
    })(e26), function(e27) {
      for (var t4, r3 = p2.getText(), n3 = p2.lines, i3 = r3.match(PP), o3 = -1; null !== (t4 = TP.exec(r3)); ) {
        var s3 = i3.indexOf(t4[0], o3 + 1) || 0, u3 = { line: s3 + 1, column: n3[s3].length };
        a2.push({ node: e27, message: "Irregular whitespace not allowed.", loc: u3 }), o3 = s3;
      }
    }(e26);
  }, h2.Identifier = r2, h2.Literal = r2, h2.TemplateElement = l2 ? function(e26) {
    "string" == typeof e26.value.raw && wP.test(e26.value.raw) && t3(e26);
  } : i2, h2["Program:exit"] = function() {
    s2 && f2.forEach(n2), a2.forEach(function(t4) {
      return e25.report(t4);
    });
  }) : h2.Program = i2, h2;
} };
var BP = { meta: { type: "suggestion", docs: { description: "disallow labels that share a name with a variable", category: "Variables", recommended: false, url: "https://eslint.org/docs/rules/no-label-var" }, schema: [] }, create: function(e25) {
  return { LabeledStatement: function(t3) {
    (function(e26, t4) {
      return null !== LA.getVariableByName(e26, t4);
    })(e25.getScope(), t3.label.name) && e25.report({ node: t3, message: "Found identifier with same name as label." });
  } };
} };
var OP = { meta: { type: "suggestion", docs: { description: "disallow labeled statements", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-labels" }, schema: [{ type: "object", properties: { allowLoop: { type: "boolean", default: false }, allowSwitch: { type: "boolean", default: false } }, additionalProperties: false }] }, create: function(e25) {
  function t3(e26) {
    return LA.isLoop(e26) ? "loop" : "SwitchStatement" === e26.type ? "switch" : "other";
  }
  function r2(e26) {
    return "loop" === e26 ? a2 : !("switch" != e26) && o2;
  }
  function n2(e26) {
    for (var t4 = s2; t4; ) {
      if (t4.label === e26) return t4.kind;
      t4 = t4.upper;
    }
    return "other";
  }
  var i2 = e25.options[0], a2 = i2 && i2.allowLoop, o2 = i2 && i2.allowSwitch, s2 = null;
  return { LabeledStatement: function(e26) {
    s2 = { label: e26.label.name, kind: t3(e26.body), upper: s2 };
  }, "LabeledStatement:exit": function(t4) {
    r2(s2.kind) || e25.report({ node: t4, message: "Unexpected labeled statement." }), s2 = s2.upper;
  }, BreakStatement: function(t4) {
    t4.label && !r2(n2(t4.label.name)) && e25.report({ node: t4, message: "Unexpected label in break statement." });
  }, ContinueStatement: function(t4) {
    t4.label && !r2(n2(t4.label.name)) && e25.report({ node: t4, message: "Unexpected label in continue statement." });
  } };
} };
function LP(e25) {
  for (var t3 = e25; t3.parent; t3 = t3.parent) {
    var r2 = t3.parent;
    switch (r2.type) {
      case "WhileStatement":
      case "DoWhileStatement":
        return r2;
      case "ForStatement":
        if (r2.init !== t3) return r2;
        break;
      case "ForInStatement":
      case "ForOfStatement":
        if (r2.right !== t3) return r2;
        break;
      case "ArrowFunctionExpression":
      case "FunctionExpression":
      case "FunctionDeclaration":
        return null;
    }
  }
  return null;
}
function NP(e25, t3) {
  var r2 = t3.resolved, n2 = r2 && r2.defs[0], i2 = n2 && n2.parent, a2 = i2 && "VariableDeclaration" === i2.type ? i2.kind : "";
  if ("const" === a2) return true;
  if ("let" === a2 && i2.range[0] > e25.range[0] && i2.range[1] < e25.range[1]) return true;
  var o2 = function(e26, t4) {
    for (var r3 = t4 ? t4.range[1] : 0, n3 = e26, i3 = e26; i3 && i3.range[0] >= r3; ) n3 = i3, i3 = LP(i3);
    return n3;
  }(e25, "let" === a2 ? i2 : null).range[0];
  return !!r2 && r2.references.every(function(e26) {
    var t4 = e26.identifier;
    return !e26.isWrite() || r2.scope.variableScope === e26.from.variableScope && t4.range[0] < o2;
  });
}
var jP = { meta: { type: "suggestion", docs: { description: "disallow function declarations that contain unsafe references inside loop statements", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-loop-func" }, schema: [], messages: { unsafeRefs: "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}." } }, create: function(e25) {
  function t3(t4) {
    var r2 = LP(t4);
    if (r2) {
      var n2 = e25.getScope().through.filter(function(e26) {
        return !NP(r2, e26);
      }).map(function(e26) {
        return e26.identifier.name;
      });
      0 < n2.length && e25.report({ node: t4, messageId: "unsafeRefs", data: { varNames: "'".concat(n2.join("', '"), "'") } });
    }
  }
  return { ArrowFunctionExpression: t3, FunctionExpression: t3, FunctionDeclaration: t3 };
} };
var RP = /* @__PURE__ */ new Set([768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1471, 1473, 1474, 1476, 1477, 1479, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1648, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1759, 1760, 1761, 1762, 1763, 1764, 1767, 1768, 1770, 1771, 1772, 1773, 1809, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2070, 2071, 2072, 2073, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2085, 2086, 2087, 2089, 2090, 2091, 2092, 2093, 2137, 2138, 2139, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2362, 2363, 2364, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2385, 2386, 2387, 2388, 2389, 2390, 2391, 2402, 2403, 2433, 2434, 2435, 2492, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2503, 2504, 2507, 2508, 2509, 2519, 2530, 2531, 2561, 2562, 2563, 2620, 2622, 2623, 2624, 2625, 2626, 2631, 2632, 2635, 2636, 2637, 2641, 2672, 2673, 2677, 2689, 2690, 2691, 2748, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2759, 2760, 2761, 2763, 2764, 2765, 2786, 2787, 2810, 2811, 2812, 2813, 2814, 2815, 2817, 2818, 2819, 2876, 2878, 2879, 2880, 2881, 2882, 2883, 2884, 2887, 2888, 2891, 2892, 2893, 2902, 2903, 2914, 2915, 2946, 3006, 3007, 3008, 3009, 3010, 3014, 3015, 3016, 3018, 3019, 3020, 3021, 3031, 3072, 3073, 3074, 3075, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3142, 3143, 3144, 3146, 3147, 3148, 3149, 3157, 3158, 3170, 3171, 3201, 3202, 3203, 3260, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3270, 3271, 3272, 3274, 3275, 3276, 3277, 3285, 3286, 3298, 3299, 3328, 3329, 3330, 3331, 3387, 3388, 3390, 3391, 3392, 3393, 3394, 3395, 3396, 3398, 3399, 3400, 3402, 3403, 3404, 3405, 3415, 3426, 3427, 3458, 3459, 3530, 3535, 3536, 3537, 3538, 3539, 3540, 3542, 3544, 3545, 3546, 3547, 3548, 3549, 3550, 3551, 3570, 3571, 3633, 3636, 3637, 3638, 3639, 3640, 3641, 3642, 3655, 3656, 3657, 3658, 3659, 3660, 3661, 3662, 3761, 3764, 3765, 3766, 3767, 3768, 3769, 3771, 3772, 3784, 3785, 3786, 3787, 3788, 3789, 3864, 3865, 3893, 3895, 3897, 3902, 3903, 3953, 3954, 3955, 3956, 3957, 3958, 3959, 3960, 3961, 3962, 3963, 3964, 3965, 3966, 3967, 3968, 3969, 3970, 3971, 3972, 3974, 3975, 3981, 3982, 3983, 3984, 3985, 3986, 3987, 3988, 3989, 3990, 3991, 3993, 3994, 3995, 3996, 3997, 3998, 3999, 4e3, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4014, 4015, 4016, 4017, 4018, 4019, 4020, 4021, 4022, 4023, 4024, 4025, 4026, 4027, 4028, 4038, 4139, 4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150, 4151, 4152, 4153, 4154, 4155, 4156, 4157, 4158, 4182, 4183, 4184, 4185, 4190, 4191, 4192, 4194, 4195, 4196, 4199, 4200, 4201, 4202, 4203, 4204, 4205, 4209, 4210, 4211, 4212, 4226, 4227, 4228, 4229, 4230, 4231, 4232, 4233, 4234, 4235, 4236, 4237, 4239, 4250, 4251, 4252, 4253, 4957, 4958, 4959, 5906, 5907, 5908, 5938, 5939, 5940, 5970, 5971, 6002, 6003, 6068, 6069, 6070, 6071, 6072, 6073, 6074, 6075, 6076, 6077, 6078, 6079, 6080, 6081, 6082, 6083, 6084, 6085, 6086, 6087, 6088, 6089, 6090, 6091, 6092, 6093, 6094, 6095, 6096, 6097, 6098, 6099, 6109, 6155, 6156, 6157, 6277, 6278, 6313, 6432, 6433, 6434, 6435, 6436, 6437, 6438, 6439, 6440, 6441, 6442, 6443, 6448, 6449, 6450, 6451, 6452, 6453, 6454, 6455, 6456, 6457, 6458, 6459, 6679, 6680, 6681, 6682, 6683, 6741, 6742, 6743, 6744, 6745, 6746, 6747, 6748, 6749, 6750, 6752, 6753, 6754, 6755, 6756, 6757, 6758, 6759, 6760, 6761, 6762, 6763, 6764, 6765, 6766, 6767, 6768, 6769, 6770, 6771, 6772, 6773, 6774, 6775, 6776, 6777, 6778, 6779, 6780, 6783, 6832, 6833, 6834, 6835, 6836, 6837, 6838, 6839, 6840, 6841, 6842, 6843, 6844, 6845, 6846, 6912, 6913, 6914, 6915, 6916, 6964, 6965, 6966, 6967, 6968, 6969, 6970, 6971, 6972, 6973, 6974, 6975, 6976, 6977, 6978, 6979, 6980, 7019, 7020, 7021, 7022, 7023, 7024, 7025, 7026, 7027, 7040, 7041, 7042, 7073, 7074, 7075, 7076, 7077, 7078, 7079, 7080, 7081, 7082, 7083, 7084, 7085, 7142, 7143, 7144, 7145, 7146, 7147, 7148, 7149, 7150, 7151, 7152, 7153, 7154, 7155, 7204, 7205, 7206, 7207, 7208, 7209, 7210, 7211, 7212, 7213, 7214, 7215, 7216, 7217, 7218, 7219, 7220, 7221, 7222, 7223, 7376, 7377, 7378, 7380, 7381, 7382, 7383, 7384, 7385, 7386, 7387, 7388, 7389, 7390, 7391, 7392, 7393, 7394, 7395, 7396, 7397, 7398, 7399, 7400, 7405, 7410, 7411, 7412, 7415, 7416, 7417, 7616, 7617, 7618, 7619, 7620, 7621, 7622, 7623, 7624, 7625, 7626, 7627, 7628, 7629, 7630, 7631, 7632, 7633, 7634, 7635, 7636, 7637, 7638, 7639, 7640, 7641, 7642, 7643, 7644, 7645, 7646, 7647, 7648, 7649, 7650, 7651, 7652, 7653, 7654, 7655, 7656, 7657, 7658, 7659, 7660, 7661, 7662, 7663, 7664, 7665, 7666, 7667, 7668, 7669, 7670, 7671, 7672, 7673, 7675, 7676, 7677, 7678, 7679, 8400, 8401, 8402, 8403, 8404, 8405, 8406, 8407, 8408, 8409, 8410, 8411, 8412, 8413, 8414, 8415, 8416, 8417, 8418, 8419, 8420, 8421, 8422, 8423, 8424, 8425, 8426, 8427, 8428, 8429, 8430, 8431, 8432, 11503, 11504, 11505, 11647, 11744, 11745, 11746, 11747, 11748, 11749, 11750, 11751, 11752, 11753, 11754, 11755, 11756, 11757, 11758, 11759, 11760, 11761, 11762, 11763, 11764, 11765, 11766, 11767, 11768, 11769, 11770, 11771, 11772, 11773, 11774, 11775, 12330, 12331, 12332, 12333, 12334, 12335, 12441, 12442, 42607, 42608, 42609, 42610, 42612, 42613, 42614, 42615, 42616, 42617, 42618, 42619, 42620, 42621, 42654, 42655, 42736, 42737, 43010, 43014, 43019, 43043, 43044, 43045, 43046, 43047, 43136, 43137, 43188, 43189, 43190, 43191, 43192, 43193, 43194, 43195, 43196, 43197, 43198, 43199, 43200, 43201, 43202, 43203, 43204, 43205, 43232, 43233, 43234, 43235, 43236, 43237, 43238, 43239, 43240, 43241, 43242, 43243, 43244, 43245, 43246, 43247, 43248, 43249, 43302, 43303, 43304, 43305, 43306, 43307, 43308, 43309, 43335, 43336, 43337, 43338, 43339, 43340, 43341, 43342, 43343, 43344, 43345, 43346, 43347, 43392, 43393, 43394, 43395, 43443, 43444, 43445, 43446, 43447, 43448, 43449, 43450, 43451, 43452, 43453, 43454, 43455, 43456, 43493, 43561, 43562, 43563, 43564, 43565, 43566, 43567, 43568, 43569, 43570, 43571, 43572, 43573, 43574, 43587, 43596, 43597, 43643, 43644, 43645, 43696, 43698, 43699, 43700, 43703, 43704, 43710, 43711, 43713, 43755, 43756, 43757, 43758, 43759, 43765, 43766, 44003, 44004, 44005, 44006, 44007, 44008, 44009, 44010, 44012, 44013, 64286, 65024, 65025, 65026, 65027, 65028, 65029, 65030, 65031, 65032, 65033, 65034, 65035, 65036, 65037, 65038, 65039, 65056, 65057, 65058, 65059, 65060, 65061, 65062, 65063, 65064, 65065, 65066, 65067, 65068, 65069, 65070, 65071, 66045, 66272, 66422, 66423, 66424, 66425, 66426, 68097, 68098, 68099, 68101, 68102, 68108, 68109, 68110, 68111, 68152, 68153, 68154, 68159, 68325, 68326, 69632, 69633, 69634, 69688, 69689, 69690, 69691, 69692, 69693, 69694, 69695, 69696, 69697, 69698, 69699, 69700, 69701, 69702, 69759, 69760, 69761, 69762, 69808, 69809, 69810, 69811, 69812, 69813, 69814, 69815, 69816, 69817, 69818, 69888, 69889, 69890, 69927, 69928, 69929, 69930, 69931, 69932, 69933, 69934, 69935, 69936, 69937, 69938, 69939, 69940, 70003, 70016, 70017, 70018, 70067, 70068, 70069, 70070, 70071, 70072, 70073, 70074, 70075, 70076, 70077, 70078, 70079, 70080, 70090, 70091, 70092, 70188, 70189, 70190, 70191, 70192, 70193, 70194, 70195, 70196, 70197, 70198, 70199, 70206, 70367, 70368, 70369, 70370, 70371, 70372, 70373, 70374, 70375, 70376, 70377, 70378, 70400, 70401, 70402, 70403, 70460, 70462, 70463, 70464, 70465, 70466, 70467, 70468, 70471, 70472, 70475, 70476, 70477, 70487, 70498, 70499, 70502, 70503, 70504, 70505, 70506, 70507, 70508, 70512, 70513, 70514, 70515, 70516, 70709, 70710, 70711, 70712, 70713, 70714, 70715, 70716, 70717, 70718, 70719, 70720, 70721, 70722, 70723, 70724, 70725, 70726, 70832, 70833, 70834, 70835, 70836, 70837, 70838, 70839, 70840, 70841, 70842, 70843, 70844, 70845, 70846, 70847, 70848, 70849, 70850, 70851, 71087, 71088, 71089, 71090, 71091, 71092, 71093, 71096, 71097, 71098, 71099, 71100, 71101, 71102, 71103, 71104, 71132, 71133, 71216, 71217, 71218, 71219, 71220, 71221, 71222, 71223, 71224, 71225, 71226, 71227, 71228, 71229, 71230, 71231, 71232, 71339, 71340, 71341, 71342, 71343, 71344, 71345, 71346, 71347, 71348, 71349, 71350, 71351, 71453, 71454, 71455, 71456, 71457, 71458, 71459, 71460, 71461, 71462, 71463, 71464, 71465, 71466, 71467, 72193, 72194, 72195, 72196, 72197, 72198, 72199, 72200, 72201, 72202, 72243, 72244, 72245, 72246, 72247, 72248, 72249, 72251, 72252, 72253, 72254, 72263, 72273, 72274, 72275, 72276, 72277, 72278, 72279, 72280, 72281, 72282, 72283, 72330, 72331, 72332, 72333, 72334, 72335, 72336, 72337, 72338, 72339, 72340, 72341, 72342, 72343, 72344, 72345, 72751, 72752, 72753, 72754, 72755, 72756, 72757, 72758, 72760, 72761, 72762, 72763, 72764, 72765, 72766, 72767, 72850, 72851, 72852, 72853, 72854, 72855, 72856, 72857, 72858, 72859, 72860, 72861, 72862, 72863, 72864, 72865, 72866, 72867, 72868, 72869, 72870, 72871, 72873, 72874, 72875, 72876, 72877, 72878, 72879, 72880, 72881, 72882, 72883, 72884, 72885, 72886, 73009, 73010, 73011, 73012, 73013, 73014, 73018, 73020, 73021, 73023, 73024, 73025, 73026, 73027, 73028, 73029, 73031, 92912, 92913, 92914, 92915, 92916, 92976, 92977, 92978, 92979, 92980, 92981, 92982, 94033, 94034, 94035, 94036, 94037, 94038, 94039, 94040, 94041, 94042, 94043, 94044, 94045, 94046, 94047, 94048, 94049, 94050, 94051, 94052, 94053, 94054, 94055, 94056, 94057, 94058, 94059, 94060, 94061, 94062, 94063, 94064, 94065, 94066, 94067, 94068, 94069, 94070, 94071, 94072, 94073, 94074, 94075, 94076, 94077, 94078, 94095, 94096, 94097, 94098, 113821, 113822, 119141, 119142, 119143, 119144, 119145, 119149, 119150, 119151, 119152, 119153, 119154, 119163, 119164, 119165, 119166, 119167, 119168, 119169, 119170, 119173, 119174, 119175, 119176, 119177, 119178, 119179, 119210, 119211, 119212, 119213, 119362, 119363, 119364, 121344, 121345, 121346, 121347, 121348, 121349, 121350, 121351, 121352, 121353, 121354, 121355, 121356, 121357, 121358, 121359, 121360, 121361, 121362, 121363, 121364, 121365, 121366, 121367, 121368, 121369, 121370, 121371, 121372, 121373, 121374, 121375, 121376, 121377, 121378, 121379, 121380, 121381, 121382, 121383, 121384, 121385, 121386, 121387, 121388, 121389, 121390, 121391, 121392, 121393, 121394, 121395, 121396, 121397, 121398, 121403, 121404, 121405, 121406, 121407, 121408, 121409, 121410, 121411, 121412, 121413, 121414, 121415, 121416, 121417, 121418, 121419, 121420, 121421, 121422, 121423, 121424, 121425, 121426, 121427, 121428, 121429, 121430, 121431, 121432, 121433, 121434, 121435, 121436, 121437, 121438, 121439, 121440, 121441, 121442, 121443, 121444, 121445, 121446, 121447, 121448, 121449, 121450, 121451, 121452, 121461, 121476, 121499, 121500, 121501, 121502, 121503, 121505, 121506, 121507, 121508, 121509, 121510, 121511, 121512, 121513, 121514, 121515, 121516, 121517, 121518, 121519, 122880, 122881, 122882, 122883, 122884, 122885, 122886, 122888, 122889, 122890, 122891, 122892, 122893, 122894, 122895, 122896, 122897, 122898, 122899, 122900, 122901, 122902, 122903, 122904, 122907, 122908, 122909, 122910, 122911, 122912, 122913, 122915, 122916, 122918, 122919, 122920, 122921, 122922, 125136, 125137, 125138, 125139, 125140, 125141, 125142, 125252, 125253, 125254, 125255, 125256, 125257, 125258, 917760, 917761, 917762, 917763, 917764, 917765, 917766, 917767, 917768, 917769, 917770, 917771, 917772, 917773, 917774, 917775, 917776, 917777, 917778, 917779, 917780, 917781, 917782, 917783, 917784, 917785, 917786, 917787, 917788, 917789, 917790, 917791, 917792, 917793, 917794, 917795, 917796, 917797, 917798, 917799, 917800, 917801, 917802, 917803, 917804, 917805, 917806, 917807, 917808, 917809, 917810, 917811, 917812, 917813, 917814, 917815, 917816, 917817, 917818, 917819, 917820, 917821, 917822, 917823, 917824, 917825, 917826, 917827, 917828, 917829, 917830, 917831, 917832, 917833, 917834, 917835, 917836, 917837, 917838, 917839, 917840, 917841, 917842, 917843, 917844, 917845, 917846, 917847, 917848, 917849, 917850, 917851, 917852, 917853, 917854, 917855, 917856, 917857, 917858, 917859, 917860, 917861, 917862, 917863, 917864, 917865, 917866, 917867, 917868, 917869, 917870, 917871, 917872, 917873, 917874, 917875, 917876, 917877, 917878, 917879, 917880, 917881, 917882, 917883, 917884, 917885, 917886, 917887, 917888, 917889, 917890, 917891, 917892, 917893, 917894, 917895, 917896, 917897, 917898, 917899, 917900, 917901, 917902, 917903, 917904, 917905, 917906, 917907, 917908, 917909, 917910, 917911, 917912, 917913, 917914, 917915, 917916, 917917, 917918, 917919, 917920, 917921, 917922, 917923, 917924, 917925, 917926, 917927, 917928, 917929, 917930, 917931, 917932, 917933, 917934, 917935, 917936, 917937, 917938, 917939, 917940, 917941, 917942, 917943, 917944, 917945, 917946, 917947, 917948, 917949, 917950, 917951, 917952, 917953, 917954, 917955, 917956, 917957, 917958, 917959, 917960, 917961, 917962, 917963, 917964, 917965, 917966, 917967, 917968, 917969, 917970, 917971, 917972, 917973, 917974, 917975, 917976, 917977, 917978, 917979, 917980, 917981, 917982, 917983, 917984, 917985, 917986, 917987, 917988, 917989, 917990, 917991, 917992, 917993, 917994, 917995, 917996, 917997, 917998, 917999]);
var MP = function(e25) {
  return RP.has(e25);
};
var VP = function(e25) {
  return 127995 <= e25 && 127999 >= e25;
};
var UP = function(e25) {
  return 127462 <= e25 && 127487 >= e25;
};
var qP = function(e25, t3) {
  return 55296 <= e25 && 56320 > e25 && 56320 <= t3 && 57344 > t3;
};
var WP = Fy.require$$0;
var $P = WP.CALL;
var GP = WP.CONSTRUCT;
var zP = WP.ReferenceTracker;
var HP = WP.getStringIfConstant;
var KP = PA.RegExpParser;
var JP = PA.visitRegExpAST;
var QP = MP;
var XP = VP;
var YP = UP;
var ZP = qP;
function eI(e25) {
  var t3, r2, n2, i2, a2, o2, s2;
  return regeneratorRuntime.wrap(function(u2) {
    for (; ; ) switch (u2.prev = u2.next) {
      case 0:
        t3 = [], r2 = true, n2 = false, i2 = void 0, u2.prev = 4, a2 = e25[Symbol.iterator]();
      case 6:
        if (r2 = (o2 = a2.next()).done) {
          u2.next = 26;
          break;
        }
        s2 = o2.value, u2.t0 = s2.type, u2.next = "Character" === u2.t0 ? 11 : "CharacterClassRange" === u2.t0 ? 13 : "CharacterSet" === u2.t0 ? 18 : 23;
        break;
      case 11:
        return t3.push(s2.value), u2.abrupt("break", 23);
      case 13:
        return t3.push(s2.min.value), u2.next = 16, t3;
      case 16:
        return t3 = [s2.max.value], u2.abrupt("break", 23);
      case 18:
        if (u2.t1 = 0 < t3.length, !u2.t1) {
          u2.next = 23;
          break;
        }
        return u2.next = 22, t3;
      case 22:
        t3 = [];
      case 23:
        r2 = true, u2.next = 6;
        break;
      case 26:
        u2.next = 32;
        break;
      case 28:
        u2.prev = 28, u2.t2 = u2.catch(4), n2 = true, i2 = u2.t2;
      case 32:
        u2.prev = 32, u2.prev = 33, r2 || null == a2.return || a2.return();
      case 35:
        if (u2.prev = 35, !n2) {
          u2.next = 38;
          break;
        }
        throw i2;
      case 38:
        return u2.finish(35);
      case 39:
        return u2.finish(32);
      case 40:
        if (u2.t3 = 0 < t3.length, !u2.t3) {
          u2.next = 44;
          break;
        }
        return u2.next = 44, t3;
      case 44:
      case "end":
        return u2.stop();
    }
  }, AA, null, [[4, 28, 32, 40], [33, , 35, 39]]);
}
var tI = { surrogatePairWithoutUFlag: function(e25) {
  return e25.some(function(t3, r2) {
    return 0 !== r2 && ZP(e25[r2 - 1], t3);
  });
}, combiningClass: function(e25) {
  return e25.some(function(t3, r2) {
    return 0 !== r2 && QP(t3) && !QP(e25[r2 - 1]);
  });
}, emojiModifier: function(e25) {
  return e25.some(function(t3, r2) {
    return 0 !== r2 && XP(t3) && !XP(e25[r2 - 1]);
  });
}, regionalIndicatorSymbol: function(e25) {
  return e25.some(function(t3, r2) {
    return 0 !== r2 && YP(t3) && YP(e25[r2 - 1]);
  });
}, zwj: function(e25) {
  var t3 = e25.length - 1;
  return e25.some(function(r2, n2) {
    return 0 !== n2 && n2 !== t3 && 8205 === r2 && 8205 !== e25[n2 - 1] && 8205 !== e25[n2 + 1];
  });
} };
var rI = Object.keys(tI);
var nI = { meta: { type: "problem", docs: { description: "disallow characters which are made with multiple code points in character class syntax", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-misleading-character-class" }, schema: [], messages: { surrogatePairWithoutUFlag: "Unexpected surrogate pair in character class. Use 'u' flag.", combiningClass: "Unexpected combined character in character class.", emojiModifier: "Unexpected modified Emoji in character class.", regionalIndicatorSymbol: "Unexpected national flag in character class.", zwj: "Unexpected joined character sequence in character class." } }, create: function(e25) {
  function t3(t4, n2, i2) {
    var a2, o2 = { surrogatePairWithoutUFlag: false, combiningClass: false, variationSelector: false, emojiModifier: false, regionalIndicatorSymbol: false, zwj: false };
    try {
      a2 = r2.parsePattern(n2, 0, n2.length, i2.includes("u"));
    } catch (t5) {
      return;
    }
    JP(a2, { onCharacterClassEnter: function(e26) {
      var t5 = true, r3 = false, n3 = void 0;
      try {
        for (var i3, a3 = eI(e26.elements)[Symbol.iterator](); !(t5 = (i3 = a3.next()).done); t5 = true) {
          var s3 = i3.value, u3 = true, c3 = false, l3 = void 0;
          try {
            for (var p3, f3 = rI[Symbol.iterator](); !(u3 = (p3 = f3.next()).done); u3 = true) {
              var h2 = p3.value;
              o2[h2] = o2[h2] || tI[h2](s3);
            }
          } catch (e27) {
            c3 = true, l3 = e27;
          } finally {
            try {
              u3 || null == f3.return || f3.return();
            } finally {
              if (c3) throw l3;
            }
          }
        }
      } catch (e27) {
        r3 = true, n3 = e27;
      } finally {
        try {
          t5 || null == a3.return || a3.return();
        } finally {
          if (r3) throw n3;
        }
      }
    } });
    var s2 = true, u2 = false, c2 = void 0;
    try {
      for (var l2, p2 = rI[Symbol.iterator](); !(s2 = (l2 = p2.next()).done); s2 = true) {
        var f2 = l2.value;
        o2[f2] && e25.report({ node: t4, messageId: f2 });
      }
    } catch (e26) {
      u2 = true, c2 = e26;
    } finally {
      try {
        s2 || null == p2.return || p2.return();
      } finally {
        if (u2) throw c2;
      }
    }
  }
  var r2 = new KP();
  return { "Literal[regex]": function(e26) {
    t3(e26, e26.regex.pattern, e26.regex.flags);
  }, Program: function() {
    var r3 = e25.getScope(), n2 = new zP(r3), i2 = true, a2 = false, o2 = void 0;
    try {
      for (var s2, c2 = n2.iterateGlobalReferences({ RegExp: (l2 = {}, u(l2, $P, true), u(l2, GP, true), l2) })[Symbol.iterator](); !(i2 = (s2 = c2.next()).done); i2 = true) {
        var l2, p2 = s2.value.node, f2 = b(p2.arguments, 2), h2 = f2[0], d2 = f2[1], m2 = HP(h2, r3), g2 = HP(d2, r3);
        "string" == typeof m2 && t3(p2, m2, g2 || "");
      }
    } catch (e26) {
      a2 = true, o2 = e26;
    } finally {
      try {
        i2 || null == c2.return || c2.return();
      } finally {
        if (a2) throw o2;
      }
    }
  } };
} };
var iI = ["+", "-", "*", "/", "%", "**"];
var aI = ["&", "|", "^", "~", "<<", ">>", ">>>"];
var oI = ["==", "!=", "===", "!==", ">", ">=", "<", "<="];
var sI = ["&&", "||"];
var uI = ["in", "instanceof"];
var cI = [].concat(iI, aI, oI, sI, uI, ["?:"]);
var lI = [iI, aI, oI, sI, uI];
var pI = /^(?:Binary|Logical|Conditional)Expression$/;
function fI(e25) {
  return "ConditionalExpression" === e25.type ? e25.test : e25.left;
}
var hI = { meta: { type: "suggestion", docs: { description: "disallow mixed binary operators", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-mixed-operators" }, schema: [{ type: "object", properties: { groups: { type: "array", items: { type: "array", items: { enum: cI }, minItems: 2, uniqueItems: true }, uniqueItems: true }, allowSamePrecedence: { type: "boolean", default: true } }, additionalProperties: false }] }, create: function(e25) {
  function t3(e26) {
    var t4 = e26, r3 = e26.parent;
    return !function(e27, t5, r4) {
      return e27.some(function(e28) {
        return -1 !== e28.indexOf(t5) && -1 !== e28.indexOf(r4);
      });
    }(o2.groups, t4.operator, "ConditionalExpression" === r3.type ? "?:" : r3.operator) || o2.allowSamePrecedence && LA.getPrecedence(t4) === LA.getPrecedence(r3);
  }
  function r2(e26) {
    return a2.getTokenAfter(fI(e26), LA.isNotClosingParenToken);
  }
  function n2(t4) {
    var n3 = t4.parent, i3 = fI(n3) === t4 ? t4 : n3, a3 = fI(n3) === t4 ? n3 : t4, o3 = "Unexpected mix of '{{leftOperator}}' and '{{rightOperator}}'.", s2 = { leftOperator: i3.operator || "?:", rightOperator: a3.operator || "?:" };
    e25.report({ node: i3, loc: r2(i3).loc, message: o3, data: s2 }), e25.report({ node: a3, loc: r2(a3).loc, message: o3, data: s2 });
  }
  function i2(e26) {
    pI.test(e26.parent.type) && ("ConditionalExpression" === e26.parent.type && !t3(e26) && function(e27) {
      return !LA.isParenthesised(a2, e27) && !LA.isParenthesised(a2, e27.test);
    }(e26.parent) ? n2(e26) : pI.test(e26.parent.type) && function(e27) {
      return e27.operator !== e27.parent.operator && !LA.isParenthesised(a2, e27);
    }(e26) && !t3(e26) && n2(e26));
  }
  var a2 = e25.getSourceCode(), o2 = function() {
    var e26 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    return { groups: e26.groups && 0 < e26.groups.length ? e26.groups : lI, allowSamePrecedence: false !== e26.allowSamePrecedence };
  }(e25.options[0]);
  return { BinaryExpression: i2, LogicalExpression: i2 };
} };
var dI = { meta: { type: "suggestion", docs: { description: "disallow `require` calls to be mixed with regular variable declarations", category: "Node.js and CommonJS", recommended: false, url: "https://eslint.org/docs/rules/no-mixed-requires" }, schema: [{ oneOf: [{ type: "boolean" }, { type: "object", properties: { grouping: { type: "boolean" }, allowCall: { type: "boolean" } }, additionalProperties: false }] }] }, create: function(e25) {
  function t3(e26) {
    return e26 ? "CallExpression" === e26.type && "Identifier" === e26.callee.type && "require" === e26.callee.name ? "require" : s2 && "CallExpression" === e26.type && "CallExpression" === e26.callee.type ? t3(e26.callee) : "MemberExpression" === e26.type ? t3(e26.object) : "other" : "uninitialized";
  }
  function r2(e26) {
    var r3 = {};
    return e26.forEach(function(e27) {
      var n3 = t3(e27.init);
      r3[n3] = true;
    }), !(!r3[c2] || !r3[l2] && !r3[p2]);
  }
  function n2(e26) {
    var r3 = {};
    return e26.forEach(function(e27) {
      t3(e27.init) === c2 && (r3[function e28(t4) {
        if ("MemberExpression" === t4.type) return e28(t4.object);
        if (0 === t4.arguments.length) return f2;
        var r4 = t4.arguments[0];
        return "Literal" !== r4.type || "string" != typeof r4.value ? "computed" : -1 === u2.indexOf(r4.value) ? /^\.{0,2}\//.test(r4.value) ? "file" : "module" : "core";
      }(e27.init)] = true);
    }), 1 >= Object.keys(r3).length;
  }
  var a2 = e25.options[0], o2 = false, s2 = false;
  "object" == i(a2) ? (o2 = a2.grouping, s2 = a2.allowCall) : o2 = !!a2;
  var u2 = ["assert", "buffer", "child_process", "cluster", "crypto", "dgram", "dns", "domain", "events", "fs", "http", "https", "net", "os", "path", "punycode", "querystring", "readline", "repl", "smalloc", "stream", "string_decoder", "tls", "tty", "url", "util", "v8", "vm", "zlib"], c2 = "require", l2 = "uninitialized", p2 = "other", f2 = "computed";
  return { VariableDeclaration: function(t4) {
    r2(t4.declarations) ? e25.report({ node: t4, message: "Do not mix 'require' and other declarations." }) : o2 && !n2(t4.declarations) && e25.report({ node: t4, message: "Do not mix core, module, file and computed requires." });
  } };
} };
var mI = { meta: { type: "layout", docs: { description: "disallow multiple spaces", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-multi-spaces" }, fixable: "whitespace", schema: [{ type: "object", properties: { exceptions: { type: "object", patternProperties: { "^([A-Z][a-z]*)+$": { type: "boolean" } }, additionalProperties: false }, ignoreEOLComments: { type: "boolean", default: false } }, additionalProperties: false }] }, create: function(e25) {
  function t3(e26) {
    var t4 = e26.value.split("\n"), r3 = t4[0], n3 = "".concat(r3.slice(0, 12), "...");
    return 1 === t4.length && 12 >= r3.length ? r3 : n3;
  }
  var r2 = e25.getSourceCode(), n2 = e25.options[0] || {}, i2 = n2.ignoreEOLComments, a2 = Object.assign({ Property: true }, n2.exceptions), o2 = 0 < Object.keys(a2).filter(function(e26) {
    return a2[e26];
  }).length;
  return { Program: function() {
    r2.tokensAndComments.forEach(function(n3, s2, u2) {
      if (s2 !== u2.length - 1) {
        var c2 = u2[s2 + 1];
        if (r2.text.slice(n3.range[1], c2.range[0]).includes("  ") && !(n3.loc.end.line < c2.loc.start.line) && !(i2 && LA.isCommentToken(c2) && (s2 === u2.length - 2 || c2.loc.end.line < u2[s2 + 2].loc.start.line))) {
          if (o2) {
            var l2 = r2.getNodeByRangeIndex(c2.range[0] - 1);
            if (l2 && a2[l2.type]) return;
          }
          var p2;
          p2 = "Block" === c2.type ? "/*".concat(t3(c2), "*/") : "Line" === c2.type ? "//".concat(t3(c2)) : c2.value, e25.report({ node: c2, loc: { start: n3.loc.end, end: c2.loc.start }, message: "Multiple spaces found before '{{displayValue}}'.", data: { displayValue: p2 }, fix: function(e26) {
            return e26.replaceTextRange([n3.range[1], c2.range[0]], " ");
          } });
        }
      }
    });
  } };
} };
var gI = { meta: { type: "suggestion", docs: { description: "disallow multiline strings", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-multi-str" }, schema: [] }, create: function(e25) {
  return { Literal: function(t3) {
    LA.LINEBREAK_MATCHER.test(t3.raw) && !function(e26) {
      return 0 === e26.type.indexOf("JSX");
    }(t3.parent) && e25.report({ node: t3, message: "Multiline support is limited to browsers supporting ES5 only." });
  } };
} };
var yI = { meta: { type: "layout", docs: { description: "disallow multiple empty lines", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-multiple-empty-lines" }, fixable: "whitespace", schema: [{ type: "object", properties: { max: { type: "integer", minimum: 0 }, maxEOF: { type: "integer", minimum: 0 }, maxBOF: { type: "integer", minimum: 0 } }, required: ["max"], additionalProperties: false }] }, create: function(e25) {
  var t3 = 2, r2 = t3, n2 = t3;
  e25.options.length && (t3 = e25.options[0].max, r2 = void 0 === e25.options[0].maxEOF ? t3 : e25.options[0].maxEOF, n2 = void 0 === e25.options[0].maxBOF ? t3 : e25.options[0].maxBOF);
  var i2 = e25.getSourceCode(), a2 = "" === i2.lines[i2.lines.length - 1] ? i2.lines.slice(0, -1) : i2.lines, o2 = /* @__PURE__ */ new Set();
  return { TemplateLiteral: function(e26) {
    e26.quasis.forEach(function(e27) {
      for (var t4 = e27.loc.start.line; t4 < e27.loc.end.line; t4++) o2.add(t4);
    });
  }, "Program:exit": function(s2) {
    return a2.reduce(function(e26, t4, r3) {
      return (t4.trim() || o2.has(r3 + 1)) && e26.push(r3 + 1), e26;
    }, []).concat(a2.length + 1).reduce(function(o3, u2) {
      var c2, l2;
      return 0 === o3 ? (c2 = "Too many blank lines at the beginning of file. Max of {{max}} allowed.", l2 = n2) : u2 === a2.length + 1 ? (c2 = "Too many blank lines at the end of file. Max of {{max}} allowed.", l2 = r2) : (c2 = "More than {{max}} blank {{pluralizedLines}} not allowed.", l2 = t3), u2 - o3 - 1 > l2 && e25.report({ node: s2, loc: { start: { line: o3 + 1, column: 0 }, end: { line: u2, column: 0 } }, message: c2, data: { max: l2, pluralizedLines: 1 === l2 ? "line" : "lines" }, fix: function(e26) {
        var t4 = i2.getIndexFromLoc({ line: o3 + 1, column: 0 }), r3 = u2 - l2, n3 = r3 <= a2.length ? i2.getIndexFromLoc({ line: r3, column: 0 }) : i2.text.length;
        return e26.removeRange([t4, n3]);
      } }), u2;
    }, 0);
  } };
} };
var vI = Fy.require$$0;
var xI = vI.CALL;
var bI = vI.ReferenceTracker;
var EI = ["Atomics", "JSON", "Math", "Reflect"];
var CI = { meta: { type: "problem", docs: { description: "disallow calling global object properties as functions", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-obj-calls" }, schema: [], messages: { unexpectedCall: "'{{name}}' is not a function." } }, create: function(e25) {
  return { Program: function() {
    var t3 = e25.getScope(), r2 = new bI(t3), n2 = {}, i2 = true, a2 = false, o2 = void 0;
    try {
      for (var s2, c2 = EI[Symbol.iterator](); !(i2 = (s2 = c2.next()).done); i2 = true) {
        n2[s2.value] = u({}, xI, true);
      }
    } catch (e26) {
      a2 = true, o2 = e26;
    } finally {
      try {
        i2 || null == c2.return || c2.return();
      } finally {
        if (a2) throw o2;
      }
    }
    var l2 = true, p2 = false, f2 = void 0;
    try {
      for (var h2, d2 = r2.iterateGlobalReferences(n2)[Symbol.iterator](); !(l2 = (h2 = d2.next()).done); l2 = true) {
        var m2 = h2.value.node;
        e25.report({ node: m2, messageId: "unexpectedCall", data: { name: m2.callee.name } });
      }
    } catch (e26) {
      p2 = true, f2 = e26;
    } finally {
      try {
        l2 || null == d2.return || d2.return();
      } finally {
        if (p2) throw f2;
      }
    }
  } };
} };
var SI = /(?:Statement|Declaration|Function(?:Expression)?|Program)$/;
var kI = { meta: { type: "suggestion", docs: { description: "disallow reassigning `function` parameters", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-param-reassign" }, schema: [{ oneOf: [{ type: "object", properties: { props: { enum: [false] } }, additionalProperties: false }, { type: "object", properties: { props: { enum: [true] }, ignorePropertyModificationsFor: { type: "array", items: { type: "string" }, uniqueItems: true }, ignorePropertyModificationsForRegex: { type: "array", items: { type: "string" }, uniqueItems: true } }, additionalProperties: false }] }] }, create: function(e25) {
  function t3(e26) {
    return o2.includes(e26) || s2.some(function(t4) {
      return new RegExp(t4, "u").test(e26);
    });
  }
  function r2(r3, n3, i3) {
    var o3 = r3.identifier;
    o3 && !r3.init && (0 === n3 || i3[n3 - 1].identifier !== o3) && (r3.isWrite() ? e25.report({ node: o3, message: "Assignment to function parameter '{{name}}'.", data: { name: o3.name } }) : a2 && function(e26) {
      for (var t4 = e26.identifier, r4 = t4.parent; r4 && (!SI.test(r4.type) || "ForInStatement" === r4.type || "ForOfStatement" === r4.type); ) {
        switch (r4.type) {
          case "AssignmentExpression":
            return r4.left === t4;
          case "UpdateExpression":
            return true;
          case "UnaryExpression":
            if ("delete" === r4.operator) return true;
            break;
          case "ForInStatement":
          case "ForOfStatement":
            return !(r4.left !== t4);
          case "CallExpression":
            if (r4.callee !== t4) return false;
            break;
          case "MemberExpression":
            if (r4.property === t4) return false;
            break;
          case "Property":
            if (r4.key === t4) return false;
            break;
          case "ConditionalExpression":
            if (r4.test === t4) return false;
        }
        r4 = (t4 = r4).parent;
      }
      return false;
    }(r3) && !t3(o3.name) && e25.report({ node: o3, message: "Assignment to property of function parameter '{{name}}'.", data: { name: o3.name } }));
  }
  function n2(e26) {
    "Parameter" === e26.defs[0].type && e26.references.forEach(r2);
  }
  function i2(t4) {
    e25.getDeclaredVariables(t4).forEach(n2);
  }
  var a2 = e25.options[0] && e25.options[0].props, o2 = e25.options[0] && e25.options[0].ignorePropertyModificationsFor || [], s2 = e25.options[0] && e25.options[0].ignorePropertyModificationsForRegex || [];
  return { "FunctionDeclaration:exit": i2, "FunctionExpression:exit": i2, "ArrowFunctionExpression:exit": i2 };
} };
var DI = { meta: { type: "suggestion", docs: { description: "disallow the unary operators `++` and `--`", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-plusplus" }, schema: [{ type: "object", properties: { allowForLoopAfterthoughts: { type: "boolean", default: false } }, additionalProperties: false }] }, create: function(e25) {
  var t3 = e25.options[0], r2 = false;
  return "object" == i(t3) && (r2 = true === t3.allowForLoopAfterthoughts), { UpdateExpression: function(t4) {
    r2 && "ForStatement" === t4.parent.type || e25.report({ node: t4, message: "Unary operator '{{operator}}' used.", data: { operator: t4.operator } });
  } };
} };
var FI = { meta: { type: "suggestion", docs: { description: "disallow variable redeclaration", category: "Best Practices", recommended: true, url: "https://eslint.org/docs/rules/no-redeclare" }, messages: { redeclared: "'{{id}}' is already defined.", redeclaredAsBuiltin: "'{{id}}' is already defined as a built-in global variable.", redeclaredBySyntax: "'{{id}}' is already defined by a variable declaration." }, schema: [{ type: "object", properties: { builtinGlobals: { type: "boolean", default: true } }, additionalProperties: false }] }, create: function(e25) {
  var t3 = regeneratorRuntime.mark(r2);
  function r2(e26) {
    var r3, n3, i3, s2, u2, c2, l2, p2, f2, h2, d2, m2;
    return regeneratorRuntime.wrap(function(t4) {
      for (; ; ) switch (t4.prev = t4.next) {
        case 0:
          if (t4.t0 = a2.builtinGlobals && ("readonly" === e26.eslintImplicitGlobalSetting || "writable" === e26.eslintImplicitGlobalSetting), !t4.t0) {
            t4.next = 4;
            break;
          }
          return t4.next = 4, { type: "builtin" };
        case 4:
          r3 = true, n3 = false, i3 = void 0, t4.prev = 7, s2 = e26.identifiers[Symbol.iterator]();
        case 9:
          if (r3 = (u2 = s2.next()).done) {
            t4.next = 16;
            break;
          }
          return c2 = u2.value, t4.next = 13, { type: "syntax", node: c2, loc: c2.loc };
        case 13:
          r3 = true, t4.next = 9;
          break;
        case 16:
          t4.next = 22;
          break;
        case 18:
          t4.prev = 18, t4.t1 = t4.catch(7), n3 = true, i3 = t4.t1;
        case 22:
          t4.prev = 22, t4.prev = 23, r3 || null == s2.return || s2.return();
        case 25:
          if (t4.prev = 25, !n3) {
            t4.next = 28;
            break;
          }
          throw i3;
        case 28:
          return t4.finish(25);
        case 29:
          return t4.finish(22);
        case 30:
          if (!e26.eslintExplicitGlobalComments) {
            t4.next = 57;
            break;
          }
          l2 = true, p2 = false, f2 = void 0, t4.prev = 34, h2 = e26.eslintExplicitGlobalComments[Symbol.iterator]();
        case 36:
          if (l2 = (d2 = h2.next()).done) {
            t4.next = 43;
            break;
          }
          return m2 = d2.value, t4.next = 40, { type: "comment", node: m2, loc: LA.getNameLocationInGlobalDirectiveComment(o2, m2, e26.name) };
        case 40:
          l2 = true, t4.next = 36;
          break;
        case 43:
          t4.next = 49;
          break;
        case 45:
          t4.prev = 45, t4.t2 = t4.catch(34), p2 = true, f2 = t4.t2;
        case 49:
          t4.prev = 49, t4.prev = 50, l2 || null == h2.return || h2.return();
        case 52:
          if (t4.prev = 52, !p2) {
            t4.next = 55;
            break;
          }
          throw f2;
        case 55:
          return t4.finish(52);
        case 56:
          return t4.finish(49);
        case 57:
        case "end":
          return t4.stop();
      }
    }, t3, null, [[7, 18, 22, 30], [23, , 25, 29], [34, 45, 49, 57], [50, , 52, 56]]);
  }
  function n2(t4) {
    var n3, i3 = true, a3 = false, o3 = void 0;
    try {
      for (var s2, u2 = t4.variables[Symbol.iterator](); !(i3 = (s2 = u2.next()).done); i3 = true) {
        var c2 = s2.value, l2 = r2(c2), p2 = C2(n3 = l2) || S2(n3) || k(), f2 = p2[0], h2 = p2.slice(1);
        if (0 !== h2.length) {
          var d2 = "builtin" === f2.type ? "redeclaredAsBuiltin" : "redeclaredBySyntax", m2 = { id: c2.name }, g2 = true, y2 = false, v2 = void 0;
          try {
            for (var x2, b2 = h2[Symbol.iterator](); !(g2 = (x2 = b2.next()).done); g2 = true) {
              var E2 = x2.value, D2 = E2.type, F2 = E2.node, A2 = E2.loc, w2 = D2 === f2.type ? "redeclared" : d2;
              e25.report({ node: F2, loc: A2, messageId: w2, data: m2 });
            }
          } catch (e26) {
            y2 = true, v2 = e26;
          } finally {
            try {
              g2 || null == b2.return || b2.return();
            } finally {
              if (y2) throw v2;
            }
          }
        }
      }
    } catch (e26) {
      a3 = true, o3 = e26;
    } finally {
      try {
        i3 || null == u2.return || u2.return();
      } finally {
        if (a3) throw o3;
      }
    }
  }
  function i2(t4) {
    var r3 = e25.getScope();
    r3.block === t4 && n2(r3);
  }
  var a2 = { builtinGlobals: !(0 !== e25.options.length && !e25.options[0].builtinGlobals) }, o2 = e25.getSourceCode();
  return { Program: function() {
    var t4 = e25.getScope();
    n2(t4), "global" === t4.type && t4.childScopes[0] && t4.block === t4.childScopes[0].block && n2(t4.childScopes[0]);
  }, FunctionDeclaration: i2, FunctionExpression: i2, ArrowFunctionExpression: i2, BlockStatement: i2, ForStatement: i2, ForInStatement: i2, ForOfStatement: i2, SwitchStatement: i2 };
} };
var AI = new PA.RegExpParser();
var wI = / {2}/;
function _I(e25) {
  return e25 && "Literal" === e25.type && "string" == typeof e25.value;
}
var TI = { meta: { type: "suggestion", docs: { description: "disallow multiple spaces in regular expressions", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-regex-spaces" }, schema: [], fixable: "code" }, create: function(e25) {
  function t3(t4, r3, n2, a2, o2) {
    if (wI.test(n2)) {
      var s2, u2 = [];
      try {
        s2 = AI.parsePattern(r3, 0, r3.length, o2.includes("u"));
      } catch (t5) {
        return;
      }
      PA.visitRegExpAST(s2, { onCharacterClassEnter: function(e26) {
        u2.push(e26);
      } });
      for (var c2, l2 = /( {2,})(?: [\*\+\?\{]|(?:[\0-\),->@-z\|-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])|$)/g, p2 = function(i2) {
        var o3 = i2[1].length, s3 = i2.index;
        if (u2.every(function(e26) {
          var t5 = e26.start, r4 = e26.end;
          return s3 < t5 || r4 <= s3;
        })) return { v: void e25.report({ node: t4, message: "Spaces are hard to count. Use {{{length}}}.", data: { length: o3 }, fix: function(e26) {
          return r3 === n2 ? e26.replaceTextRange([a2 + s3, a2 + s3 + o3], " {".concat(o3, "}")) : null;
        } }) };
      }; c2 = l2.exec(r3); ) {
        var f2 = p2(c2);
        if ("object" === i(f2)) return f2.v;
      }
    }
  }
  function r2(r3) {
    var n2 = e25.getScope(), i2 = LA.getVariableByName(n2, "RegExp"), a2 = i2 && 0 < i2.defs.length, o2 = r3.arguments[0], s2 = r3.arguments[1];
    "Identifier" === r3.callee.type && "RegExp" === r3.callee.name && _I(o2) && !a2 && t3(r3, o2.value, o2.raw.slice(1, -1), o2.range[0] + 1, _I(s2) ? s2.value : "");
  }
  return { Literal: function(e26) {
    if (e26.regex) {
      var r3 = e26.regex.pattern, n2 = e26.raw.slice(1, e26.raw.lastIndexOf("/"));
      t3(e26, r3, n2, e26.range[0] + 1, e26.regex.flags);
    }
  }, CallExpression: r2, NewExpression: r2 };
} };
var PI = "Unexpected use of '{{name}}'.";
var II = "Unexpected use of '{{name}}'. {{customMessage}}";
var BI = { meta: { type: "suggestion", docs: { description: "disallow specified global variables", category: "Variables", recommended: false, url: "https://eslint.org/docs/rules/no-restricted-globals" }, schema: { type: "array", items: { oneOf: [{ type: "string" }, { type: "object", properties: { name: { type: "string" }, message: { type: "string" } }, required: ["name"], additionalProperties: false }] }, uniqueItems: true, minItems: 0 } }, create: function(e25) {
  function t3(t4) {
    var r3 = t4.identifier.name, i2 = n2[r3], a2 = i2 ? II : PI;
    e25.report({ node: t4.identifier, message: a2, data: { name: r3, customMessage: i2 } });
  }
  function r2(e26) {
    return Object.prototype.hasOwnProperty.call(n2, e26);
  }
  if (0 === e25.options.length) return {};
  var n2 = e25.options.reduce(function(e26, t4) {
    return "string" == typeof t4 ? e26[t4] = null : e26[t4.name] = t4.message, e26;
  }, {});
  return { Program: function() {
    var n3 = e25.getScope();
    n3.variables.forEach(function(e26) {
      !e26.defs.length && r2(e26.name) && e26.references.forEach(t3);
    }), n3.through.forEach(function(e26) {
      r2(e26.identifier.name) && t3(e26);
    });
  } };
} };
var OI = { type: "array", items: { anyOf: [{ type: "string" }, { type: "object", properties: { name: { type: "string" }, message: { type: "string", minLength: 1 }, importNames: { type: "array", items: { type: "string" } } }, additionalProperties: false, required: ["name"] }] }, uniqueItems: true };
var LI = { meta: { type: "suggestion", docs: { description: "disallow specified modules when loaded by `import`", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/no-restricted-imports" }, messages: { path: "'{{importSource}}' import is restricted from being used.", pathWithCustomMessage: "'{{importSource}}' import is restricted from being used. {{customMessage}}", patterns: "'{{importSource}}' import is restricted from being used by a pattern.", everything: "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.", everythingWithCustomMessage: "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}" }, schema: { anyOf: [OI, { type: "array", items: { type: "object", properties: { paths: OI, patterns: { type: "array", items: { type: "string" }, uniqueItems: true } }, additionalProperties: false }, additionalItems: false }] } }, create: function(e25) {
  function t3(t4) {
    var r3 = t4.source.value.trim(), n3 = f2[r3] && f2[r3].message;
    e25.report({ node: t4, messageId: n3 ? "pathWithCustomMessage" : "path", data: { importSource: r3, customMessage: n3 } });
  }
  function r2(t4) {
    var r3 = t4.source.value.trim();
    e25.report({ node: t4, messageId: "patterns", data: { importSource: r3 } });
  }
  function n2(t4, r3) {
    var n3 = f2[t4].importNames, i2 = f2[t4] && f2[t4].message;
    e25.report({ node: r3, messageId: i2 ? "everythingWithCustomMessage" : "everything", data: { importSource: t4, importNames: n3, customMessage: i2 } });
  }
  function a2(e26, t4) {
    return Object.prototype.hasOwnProperty.call(f2, e26) && f2[e26].importNames && function(e27) {
      return e27.has("*");
    }(t4);
  }
  function o2(e26, t4) {
    var r3 = false;
    return Object.prototype.hasOwnProperty.call(f2, e26) && (r3 = !f2[e26].importNames || function(e27, t5) {
      return t5.some(function(t6) {
        return e27.has(t6);
      });
    }(t4, f2[e26].importNames)), r3;
  }
  function s2(e26) {
    var i2 = e26.source.value.trim(), s3 = e26.specifiers ? e26.specifiers.reduce(function(e27, t4) {
      return "ImportDefaultSpecifier" === t4.type ? e27.add("default") : "ImportNamespaceSpecifier" === t4.type ? e27.add("*") : t4.imported ? e27.add(t4.imported.name) : t4.local && e27.add(t4.local.name), e27;
    }, /* @__PURE__ */ new Set()) : /* @__PURE__ */ new Set();
    a2(i2, s3) && n2(i2, e26), o2(i2, s3) && t3(e26), function(e27) {
      return 0 < p2.length && h2.ignores(e27);
    }(i2) && r2(e26);
  }
  var u2 = Array.isArray(e25.options) ? e25.options : [], c2 = "object" == i(u2[0]) && (Object.prototype.hasOwnProperty.call(u2[0], "paths") || Object.prototype.hasOwnProperty.call(u2[0], "patterns")), l2 = (c2 ? u2[0].paths : e25.options) || [], p2 = (c2 ? u2[0].patterns : []) || [], f2 = l2.reduce(function(e26, t4) {
    return "string" == typeof t4 ? e26[t4] = { message: null } : e26[t4.name] = { message: t4.message, importNames: t4.importNames }, e26;
  }, {});
  if (0 === Object.keys(l2).length && 0 === p2.length) return {};
  var h2 = IA().add(p2);
  return { ImportDeclaration: s2, ExportNamedDeclaration: function(e26) {
    e26.source && s2(e26);
  }, ExportAllDeclaration: s2 };
} };
var NI = "'{{moduleName}}' module is restricted from being used.";
var jI = "'{{moduleName}}' module is restricted from being used. {{customMessage}}";
var RI = { type: "array", items: { anyOf: [{ type: "string" }, { type: "object", properties: { name: { type: "string" }, message: { type: "string", minLength: 1 } }, additionalProperties: false, required: ["name"] }] }, uniqueItems: true };
var MI = { meta: { type: "suggestion", docs: { description: "disallow specified modules when loaded by `require`", category: "Node.js and CommonJS", recommended: false, url: "https://eslint.org/docs/rules/no-restricted-modules" }, schema: { anyOf: [RI, { type: "array", items: { type: "object", properties: { paths: RI, patterns: { type: "array", items: { type: "string" }, uniqueItems: true } }, additionalProperties: false }, additionalItems: false }] } }, create: function(e25) {
  var t3 = Array.isArray(e25.options) ? e25.options : [], r2 = "object" == i(t3[0]) && (Object.prototype.hasOwnProperty.call(t3[0], "paths") || Object.prototype.hasOwnProperty.call(t3[0], "patterns")), n2 = (r2 ? t3[0].paths : e25.options) || [], a2 = (r2 ? t3[0].patterns : []) || [], o2 = n2.reduce(function(e26, t4) {
    return "string" == typeof t4 ? e26[t4] = null : e26[t4.name] = t4.message, e26;
  }, {});
  if (0 === Object.keys(n2).length && 0 === a2.length) return {};
  var s2 = IA().add(a2);
  return { CallExpression: function(t4) {
    if (function(e26) {
      return "Identifier" === e26.callee.type && "require" === e26.callee.name;
    }(t4) && t4.arguments.length && function(e26) {
      return e26 && "Literal" === e26.type && "string" == typeof e26.value;
    }(t4.arguments[0])) {
      var r3 = t4.arguments[0].value.trim();
      (function(e26) {
        return Object.prototype.hasOwnProperty.call(o2, e26);
      })(r3) && function(t5) {
        var r4 = t5.arguments[0].value.trim(), n3 = o2[r4], i2 = n3 ? jI : NI;
        e25.report({ node: t5, message: i2, data: { moduleName: r4, customMessage: n3 } });
      }(t4), 0 < a2.length && s2.ignores(r3) && e25.report({ node: t4, message: "'{{moduleName}}' module is restricted from being used by a pattern.", data: { moduleName: r3 } });
    }
  } };
} };
var VI = { meta: { type: "suggestion", docs: { description: "disallow certain properties on certain objects", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-restricted-properties" }, schema: { type: "array", items: { anyOf: [{ type: "object", properties: { object: { type: "string" }, property: { type: "string" }, message: { type: "string" } }, additionalProperties: false, required: ["object"] }, { type: "object", properties: { object: { type: "string" }, property: { type: "string" }, message: { type: "string" } }, additionalProperties: false, required: ["property"] }] }, uniqueItems: true } }, create: function(e25) {
  function t3(t4, r3, n3) {
    if (null !== n3) {
      var s2 = i2.get(r3), u2 = s2 ? s2.get(n3) : a2.get(r3), c2 = o2.get(n3);
      if (u2) {
        var l2 = u2.message ? " ".concat(u2.message) : "";
        e25.report({ node: t4, message: "'{{objectName}}.{{propertyName}}' is restricted from being used.{{message}}", data: { objectName: r3, propertyName: n3, message: l2 } });
      } else if (c2) {
        var p2 = c2.message ? " ".concat(c2.message) : "";
        e25.report({ node: t4, message: "'{{propertyName}}' is restricted from being used.{{message}}", data: { propertyName: n3, message: p2 } });
      }
    }
  }
  function r2(e26) {
    if ("Identifier" === e26.right.type) {
      var r3 = e26.right.name;
      "ObjectPattern" === e26.left.type && e26.left.properties.forEach(function(n3) {
        t3(e26.left, r3, LA.getStaticPropertyName(n3));
      });
    }
  }
  var n2 = e25.options;
  if (0 === n2.length) return {};
  var i2 = /* @__PURE__ */ new Map(), a2 = /* @__PURE__ */ new Map(), o2 = /* @__PURE__ */ new Map();
  return n2.forEach(function(e26) {
    var t4 = e26.object, r3 = e26.property;
    void 0 === t4 ? o2.set(r3, { message: e26.message }) : void 0 === r3 ? a2.set(t4, { message: e26.message }) : (!i2.has(t4) && i2.set(t4, /* @__PURE__ */ new Map()), i2.get(t4).set(r3, { message: e26.message }));
  }), { MemberExpression: function(e26) {
    t3(e26, e26.object && e26.object.name, LA.getStaticPropertyName(e26));
  }, VariableDeclarator: function(e26) {
    if (e26.init && "Identifier" === e26.init.type) {
      var r3 = e26.init.name;
      "ObjectPattern" === e26.id.type && e26.id.properties.forEach(function(n3) {
        t3(e26.id, r3, LA.getStaticPropertyName(n3));
      });
    }
  }, AssignmentExpression: r2, AssignmentPattern: r2 };
} };
var UI = { meta: { type: "suggestion", docs: { description: "disallow specified syntax", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-restricted-syntax" }, schema: { type: "array", items: { oneOf: [{ type: "string" }, { type: "object", properties: { selector: { type: "string" }, message: { type: "string" } }, required: ["selector"], additionalProperties: false }] }, uniqueItems: true, minItems: 0 } }, create: function(e25) {
  return e25.options.reduce(function(t3, r2) {
    var n2 = "string" == typeof r2, i2 = !n2 && !!r2.message, a2 = n2 ? r2 : r2.selector, o2 = i2 ? r2.message : "Using '{{selector}}' is not allowed.";
    return Object.assign(t3, u({}, a2, function(t4) {
      e25.report({ node: t4, message: o2, data: i2 ? {} : { selector: a2 } });
    }));
  }, {});
} };
var qI = /^(?:[A-Za-z]+?Statement|ArrowFunctionExpression|FunctionExpression|ClassExpression)$/;
var WI = { meta: { type: "suggestion", docs: { description: "disallow assignment operators in `return` statements", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-return-assign" }, schema: [{ enum: ["except-parens", "always"] }] }, create: function(e25) {
  var t3 = "except-parens" !== (e25.options[0] || "except-parens"), r2 = e25.getSourceCode();
  return { AssignmentExpression: function(n2) {
    if (t3 || !LA.isParenthesised(r2, n2)) {
      for (var i2 = n2, a2 = i2.parent; a2 && !qI.test(a2.type); ) i2 = a2, a2 = a2.parent;
      a2 && "ReturnStatement" === a2.type ? e25.report({ node: a2, message: "Return statement should not contain assignment." }) : a2 && "ArrowFunctionExpression" === a2.type && a2.body === i2 && e25.report({ node: a2, message: "Arrow function should not return assignment." });
    }
  } };
} };
var $I = "Redundant use of `await` on a return value.";
var GI = { meta: { type: "suggestion", docs: { description: "disallow unnecessary `return await`", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-return-await" }, fixable: null, schema: [] }, create: function(e25) {
  function t3(t4) {
    e25.report({ node: e25.getSourceCode().getFirstToken(t4), loc: t4.loc, message: $I });
  }
  function r2(e26) {
    for (var t4 = e26; !LA.isFunction(t4) && "Program" !== t4.type; ) {
      if ("TryStatement" === t4.parent.type && (t4 === t4.parent.block || t4 === t4.parent.handler && t4.parent.finalizer)) return true;
      t4 = t4.parent;
    }
    return false;
  }
  return { AwaitExpression: function(e26) {
    (function e27(t4) {
      return !("ArrowFunctionExpression" !== t4.parent.type) || ("ReturnStatement" === t4.parent.type ? !r2(t4.parent) : "ConditionalExpression" !== t4.parent.type || t4 !== t4.parent.consequent && t4 !== t4.parent.alternate ? "LogicalExpression" === t4.parent.type && t4 === t4.parent.right ? e27(t4.parent) : !("SequenceExpression" !== t4.parent.type || t4 !== t4.parent.expressions[t4.parent.expressions.length - 1]) && e27(t4.parent) : e27(t4.parent));
    })(e26) && !r2(e26) && t3(e26);
  } };
} };
var zI = /[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+/g;
function HI(e25, t3) {
  if (!function(e26, t4) {
    if ("Identifier" === e26.property.type && e26.property.type === t4.property.type && e26.property.name === t4.property.name && e26.computed === t4.computed) return true;
    var r3 = LA.getStaticPropertyName(e26), n3 = LA.getStaticPropertyName(t4);
    return null !== r3 && r3 === n3;
  }(e25, t3)) return false;
  var r2 = e25.object, n2 = t3.object;
  return !(r2.type !== n2.type) && ("MemberExpression" === r2.type ? HI(r2, n2) : !("ThisExpression" !== r2.type) || "Identifier" === r2.type && r2.name === n2.name);
}
var KI = { meta: { type: "problem", docs: { description: "disallow assignments where both sides are exactly the same", category: "Best Practices", recommended: true, url: "https://eslint.org/docs/rules/no-self-assign" }, schema: [{ type: "object", properties: { props: { type: "boolean", default: true } }, additionalProperties: false }] }, create: function(e25) {
  function t3(t4) {
    e25.report({ node: t4, message: "'{{name}}' is assigned to itself.", data: { name: r2.getText(t4).replace(zI, "") } });
  }
  var r2 = e25.getSourceCode(), n2 = b(e25.options, 1)[0], i2 = (n2 = void 0 === n2 ? {} : n2).props, a2 = void 0 === i2 || i2;
  return { AssignmentExpression: function(e26) {
    "=" === e26.operator && function e27(t4, r3, n3, i3) {
      if (t4 && r3) if ("Identifier" === t4.type && "Identifier" === r3.type && t4.name === r3.name) i3(r3);
      else if ("ArrayPattern" === t4.type && "ArrayExpression" === r3.type) for (var a3 = Math.min(t4.elements.length, r3.elements.length), o2 = 0; o2 < a3; ++o2) {
        var s2 = t4.elements[o2], u2 = r3.elements[o2];
        if (s2 && "RestElement" === s2.type && o2 < r3.elements.length - 1) break;
        if (e27(s2, u2, n3, i3), u2 && "SpreadElement" === u2.type) break;
      }
      else if ("RestElement" === t4.type && "SpreadElement" === r3.type) e27(t4.argument, r3.argument, n3, i3);
      else if ("ObjectPattern" === t4.type && "ObjectExpression" === r3.type && 1 <= r3.properties.length) {
        for (var c2 = 0, l2 = r3.properties.length - 1; 0 <= l2; --l2) {
          var p2 = r3.properties[l2].type;
          if ("SpreadElement" === p2 || "ExperimentalSpreadProperty" === p2) {
            c2 = l2 + 1;
            break;
          }
        }
        for (var f2 = 0; f2 < t4.properties.length; ++f2) for (var h2 = c2; h2 < r3.properties.length; ++h2) e27(t4.properties[f2], r3.properties[h2], n3, i3);
      } else if ("Property" !== t4.type || "Property" !== r3.type || "init" !== r3.kind || r3.method) n3 && "MemberExpression" === t4.type && "MemberExpression" === r3.type && HI(t4, r3) && i3(r3);
      else {
        var d2 = LA.getStaticPropertyName(t4);
        null !== d2 && d2 === LA.getStaticPropertyName(r3) && e27(t4.value, r3.value, n3, i3);
      }
      else ;
    }(e26.left, e26.right, a2, t3);
  } };
} };
var JI = { meta: { type: "problem", docs: { description: "disallow comparisons where both sides are exactly the same", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-self-compare" }, schema: [] }, create: function(e25) {
  function t3(e26, t4) {
    var n2 = r2.getTokens(e26), i2 = r2.getTokens(t4);
    return n2.length === i2.length && n2.every(function(e27, t5) {
      return e27.type === i2[t5].type && e27.value === i2[t5].value;
    });
  }
  var r2 = e25.getSourceCode();
  return { BinaryExpression: function(r3) {
    (/* @__PURE__ */ new Set(["===", "==", "!==", "!=", ">", "<", ">=", "<="])).has(r3.operator) && t3(r3.left, r3.right) && e25.report({ node: r3, message: "Comparing to itself is potentially pointless." });
  } };
} };
var QI = { meta: { type: "suggestion", docs: { description: "disallow comma operators", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-sequences" }, schema: [] }, create: function(e25) {
  function t3(e26) {
    return e26.parent && i2[e26.parent.type] && e26 === e26.parent[i2[e26.parent.type]];
  }
  function r2(e26) {
    return LA.isParenthesised(n2, e26);
  }
  var n2 = e25.getSourceCode(), i2 = { DoWhileStatement: "test", IfStatement: "test", SwitchStatement: "discriminant", WhileStatement: "test", WithStatement: "object", ArrowFunctionExpression: "body" };
  return { SequenceExpression: function(i3) {
    if ("ForStatement" !== i3.parent.type || i3 !== i3.parent.init && i3 !== i3.parent.update) {
      if (t3(i3)) {
        if (function(e26) {
          var t4 = n2.getTokenBefore(e26, 1), i4 = n2.getTokenAfter(e26, 1);
          return r2(e26) && t4 && i4 && LA.isOpeningParenToken(t4) && t4.range[1] <= e26.range[0] && LA.isClosingParenToken(i4) && i4.range[0] >= e26.range[1];
        }(i3)) return;
      } else if (r2(i3)) return;
      var a2 = n2.getTokenAfter(i3.expressions[0], LA.isCommaToken);
      e25.report({ node: i3, loc: a2.loc, message: "Unexpected use of comma operator." });
    }
  } };
} };
var XI = Fy.require$$0.findVariable;
function YI(e25, t3, r2, n2, i2) {
  var a2 = e25.parent;
  return "CallExpression" === a2.type && a2.arguments[i2] === e25 && "MemberExpression" === a2.callee.type && LA.getStaticPropertyName(a2.callee) === n2 && "Identifier" === a2.callee.object.type && a2.callee.object.name === r2 && function(e26, t4) {
    var r3 = XI(t4, e26);
    return null !== r3 && "global" === r3.scope.type && 0 === r3.defs.length;
  }(a2.callee.object, t3);
}
function ZI(e25, t3) {
  var r2 = e25.parent;
  return !("set" !== r2.kind || r2.value !== e25) || !("Property" !== r2.type || r2.value !== e25 || "set" !== LA.getStaticPropertyName(r2) || "ObjectExpression" !== r2.parent.type || !function(e26, t4) {
    if (YI(e26, t4, "Object", "defineProperty", 2) || YI(e26, t4, "Reflect", "defineProperty", 2)) return true;
    var r3 = e26.parent;
    if ("Property" === r3.type && r3.value === e26) {
      var n2 = r3.parent;
      if ("ObjectExpression" === n2.type && (YI(n2, t4, "Object", "create", 1) || YI(n2, t4, "Object", "defineProperties", 1))) return true;
    }
    return false;
  }(r2.parent, t3));
}
var eB = { meta: { type: "problem", docs: { description: "disallow returning values from setters", category: "Possible Errors", recommended: false, url: "https://eslint.org/docs/rules/no-setter-return" }, schema: [], messages: { returnsValue: "Setter cannot return a value." } }, create: function(e25) {
  function t3(t4) {
    var r3 = function(e26) {
      var t5 = e26.upper;
      return "function-expression-name" === t5.type ? t5.upper : t5;
    }(e25.getScope());
    i2 = { upper: i2, isSetter: ZI(t4, r3) };
  }
  function r2() {
    i2 = i2.upper;
  }
  function n2(t4) {
    e25.report({ node: t4, messageId: "returnsValue" });
  }
  var i2 = null;
  return { FunctionDeclaration: t3, FunctionExpression: t3, ArrowFunctionExpression: function(e26) {
    t3(e26), i2.isSetter && e26.expression && n2(e26.body);
  }, "FunctionDeclaration:exit": r2, "FunctionExpression:exit": r2, "ArrowFunctionExpression:exit": r2, ReturnStatement: function(e26) {
    i2 && i2.isSetter && e26.argument && n2(e26);
  } };
} };
function tB(e25) {
  return "undefined" === e25.name && e25.references.every(function(e26) {
    return !e26.isWrite();
  }) && e25.defs.every(function(e26) {
    return "VariableDeclarator" === e26.node.type && null === e26.node.init;
  });
}
var rB = { meta: { type: "suggestion", docs: { description: "disallow identifiers from shadowing restricted names", category: "Variables", recommended: true, url: "https://eslint.org/docs/rules/no-shadow-restricted-names" }, schema: [] }, create: function(e25) {
  var t3 = /* @__PURE__ */ new Set(["undefined", "NaN", "Infinity", "arguments", "eval"]);
  return { "VariableDeclaration, :function, CatchClause": function(r2) {
    var n2 = true, i2 = false, a2 = void 0;
    try {
      for (var o2, s2 = e25.getDeclaredVariables(r2)[Symbol.iterator](); !(n2 = (o2 = s2.next()).done); n2 = true) {
        var u2 = o2.value;
        0 < u2.defs.length && t3.has(u2.name) && !tB(u2) && e25.report({ node: u2.defs[0].name, message: "Shadowing of global property '{{idName}}'.", data: { idName: u2.name } });
      }
    } catch (e26) {
      i2 = true, a2 = e26;
    } finally {
      try {
        n2 || null == s2.return || s2.return();
      } finally {
        if (i2) throw a2;
      }
    }
  } };
} };
var nB = { meta: { type: "suggestion", docs: { description: "disallow variable declarations from shadowing variables declared in the outer scope", category: "Variables", recommended: false, url: "https://eslint.org/docs/rules/no-shadow" }, schema: [{ type: "object", properties: { builtinGlobals: { type: "boolean", default: false }, hoist: { enum: ["all", "functions", "never"], default: "functions" }, allow: { type: "array", items: { type: "string" } } }, additionalProperties: false }] }, create: function(e25) {
  function t3(e26) {
    return -1 !== s2.allow.indexOf(e26.name);
  }
  function r2(e26) {
    var t4 = e26.scope.block;
    return "ClassDeclaration" === t4.type && t4.id === e26.identifiers[0];
  }
  function n2(e26, t4) {
    var r3 = t4.scope, n3 = t4.defs[0], i3 = n3 && n3.parent && n3.parent.range, a3 = e26.scope, o3 = e26.defs[0], s3 = o3 && o3.name.range;
    return i3 && s3 && i3[0] < s3[0] && s3[1] < i3[1] && ("FunctionName" === o3.type && "FunctionExpression" === o3.node.type || "ClassExpression" === o3.node.type) && r3 === a3.upper;
  }
  function i2(e26) {
    var t4 = e26.defs[0];
    return t4 && t4.name.range;
  }
  function a2(e26, t4) {
    var r3 = t4.defs[0], n3 = i2(e26), a3 = i2(t4);
    return n3 && a3 && n3[1] < a3[0] && ("functions" !== s2.hoist || !r3 || "FunctionDeclaration" !== r3.node.type);
  }
  function o2(i3) {
    for (var o3 = i3.variables, u2 = 0; u2 < o3.length; ++u2) {
      var c2 = o3[u2];
      if (0 !== c2.identifiers.length && !r2(c2) && !t3(c2)) {
        var l2 = LA.getVariableByName(i3.upper, c2.name);
        l2 && (0 < l2.identifiers.length || s2.builtinGlobals && "writeable" in l2) && !n2(c2, l2) && ("all" === s2.hoist || !a2(c2, l2)) && e25.report({ node: c2.identifiers[0], message: "'{{name}}' is already declared in the upper scope.", data: c2 });
      }
    }
  }
  var s2 = { builtinGlobals: e25.options[0] && e25.options[0].builtinGlobals, hoist: e25.options[0] && e25.options[0].hoist || "functions", allow: e25.options[0] && e25.options[0].allow || [] };
  return { "Program:exit": function() {
    for (var t4 = e25.getScope().childScopes.slice(); t4.length; ) {
      var r3 = t4.pop();
      t4.push.apply(t4, E(r3.childScopes)), o2(r3);
    }
  } };
} };
var iB = { meta: { type: "suggestion", docs: { description: "disallow synchronous methods", category: "Node.js and CommonJS", recommended: false, url: "https://eslint.org/docs/rules/no-sync" }, schema: [{ type: "object", properties: { allowAtRootLevel: { type: "boolean", default: false } }, additionalProperties: false }] }, create: function(e25) {
  return u({}, e25.options[0] && e25.options[0].allowAtRootLevel ? ":function MemberExpression[property.name=/.*Sync$/]" : "MemberExpression[property.name=/.*Sync$/]", function(t3) {
    e25.report({ node: t3, message: "Unexpected sync method: '{{propertyName}}'.", data: { propertyName: t3.property.name } });
  });
} };
var aB = /\t+/g;
var oB = /(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/;
var sB = { meta: { type: "layout", docs: { description: "disallow all tabs", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-tabs" }, schema: [{ type: "object", properties: { allowIndentationTabs: { type: "boolean", default: false } }, additionalProperties: false }] }, create: function(e25) {
  var t3 = e25.getSourceCode(), r2 = e25.options && e25.options[0] && e25.options[0].allowIndentationTabs;
  return { Program: function(n2) {
    t3.getLines().forEach(function(t4, i2) {
      for (var a2; null !== (a2 = aB.exec(t4)); ) (!r2 || oB.test(t4.slice(0, a2.index))) && e25.report({ node: n2, loc: { start: { line: i2 + 1, column: a2.index }, end: { line: i2 + 1, column: a2.index + a2[0].length } }, message: "Unexpected tab character." });
    });
  } };
} };
var uB = { meta: { type: "problem", docs: { description: "disallow `this`/`super` before calling `super()` in constructors", category: "ECMAScript 6", recommended: true, url: "https://eslint.org/docs/rules/no-this-before-super" }, schema: [] }, create: function(e25) {
  function t3(e26) {
    return !e26.reachable || o2[e26.id].superCalled;
  }
  function r2() {
    return !!(a2 && a2.isConstructor && a2.hasExtends);
  }
  function n2() {
    return r2() && !a2.codePath.currentSegments.every(t3);
  }
  function i2(e26) {
    for (var t4 = a2.codePath.currentSegments, r3 = 0; r3 < t4.length; ++r3) {
      var n3 = t4[r3];
      n3.reachable && o2[n3.id].invalidNodes.push(e26);
    }
  }
  var a2 = null, o2 = /* @__PURE__ */ Object.create(null);
  return { onCodePathStart: function(e26, t4) {
    if (function(e27) {
      return "FunctionExpression" === e27.type && "MethodDefinition" === e27.parent.type && "constructor" === e27.parent.kind;
    }(t4)) {
      var r3 = t4.parent.parent.parent;
      a2 = { upper: a2, isConstructor: true, hasExtends: !(!r3.superClass || LA.isNullOrUndefined(r3.superClass)), codePath: e26 };
    } else a2 = { upper: a2, isConstructor: false, hasExtends: false, codePath: e26 };
  }, onCodePathEnd: function(t4) {
    var r3 = a2.hasExtends;
    a2 = a2.upper, r3 && t4.traverseSegments(function(t5, r4) {
      for (var n3 = o2[t5.id], i3 = 0; i3 < n3.invalidNodes.length; ++i3) {
        var a3 = n3.invalidNodes[i3];
        e25.report({ message: "'{{kind}}' is not allowed before 'super()'.", node: a3, data: { kind: "Super" === a3.type ? "super" : "this" } });
      }
      n3.superCalled && r4.skip();
    });
  }, onCodePathSegmentStart: function(e26) {
    r2() && (o2[e26.id] = { superCalled: 0 < e26.prevSegments.length && e26.prevSegments.every(t3), invalidNodes: [] });
  }, onCodePathSegmentLoop: function(e26, n3) {
    r2() && a2.codePath.traverseSegments({ first: n3, last: e26 }, function(e27, r3) {
      var n4 = o2[e27.id];
      n4.superCalled ? (n4.invalidNodes = [], r3.skip()) : 0 < e27.prevSegments.length && e27.prevSegments.every(t3) && (n4.superCalled = true, n4.invalidNodes = []);
    });
  }, ThisExpression: function(e26) {
    n2() && i2(e26);
  }, Super: function(e26) {
    !LA.isCallee(e26) && n2() && i2(e26);
  }, "CallExpression:exit": function(e26) {
    "Super" === e26.callee.type && n2() && function() {
      for (var e27 = a2.codePath.currentSegments, t4 = 0; t4 < e27.length; ++t4) {
        var r3 = e27[t4];
        r3.reachable && (o2[r3.id].superCalled = true);
      }
    }();
  }, "Program:exit": function() {
    o2 = /* @__PURE__ */ Object.create(null);
  } };
} };
var cB = { meta: { type: "suggestion", docs: { description: "disallow throwing literals as exceptions", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-throw-literal" }, schema: [], messages: { object: "Expected an error object to be thrown.", undef: "Do not throw undefined." } }, create: function(e25) {
  return { ThrowStatement: function(t3) {
    LA.couldBeError(t3.argument) ? "Identifier" === t3.argument.type && "undefined" === t3.argument.name && e25.report({ node: t3, messageId: "undef" }) : e25.report({ node: t3, messageId: "object" });
  } };
} };
var lB = { meta: { type: "layout", docs: { description: "disallow trailing whitespace at the end of lines", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-trailing-spaces" }, fixable: "whitespace", schema: [{ type: "object", properties: { skipBlankLines: { type: "boolean", default: false }, ignoreComments: { type: "boolean", default: false } }, additionalProperties: false }] }, create: function(e25) {
  function t3(t4, r3, n3) {
    e25.report({ node: t4, loc: r3, message: "Trailing spaces not allowed.", fix: function(e26) {
      return e26.removeRange(n3);
    } });
  }
  var r2 = e25.getSourceCode(), n2 = "[ 	\xA0\u2000-\u200B\u3000]", i2 = e25.options[0] || {}, a2 = i2.skipBlankLines || false, o2 = i2.ignoreComments || false;
  return { Program: function(e26) {
    for (var i3 = new RegExp("".concat(n2, "+$"), "u"), s2 = new RegExp("^".concat(n2, "*$"), "u"), u2 = r2.lines, c2 = r2.getText().match(LA.createGlobalLinebreakMatcher()), l2 = function(e27) {
      var t4 = /* @__PURE__ */ new Set();
      return e27.forEach(function(e28) {
        for (var r3 = "Block" === e28.type ? e28.loc.end.line - 1 : e28.loc.end.line, n3 = e28.loc.start.line; n3 <= r3; n3++) t4.add(n3);
      }), t4;
    }(r2.getAllComments()), p2 = 0, f2 = [], h2 = 0, d2 = u2.length; h2 < d2; h2++) {
      var m2 = h2 + 1, g2 = c2 && c2[h2] ? c2[h2].length : 1, y2 = u2[h2].length + g2, v2 = i3.exec(u2[h2]);
      if (v2) {
        var x2 = { start: { line: m2, column: v2.index }, end: { line: m2, column: y2 - g2 } }, b2 = p2 + x2.start.column, E2 = p2 + x2.end.column, C3 = r2.getNodeByRangeIndex(b2);
        if (C3 && "TemplateElement" === C3.type && b2 > C3.parent.range[0] && E2 < C3.parent.range[1]) {
          p2 += y2;
          continue;
        }
        if (a2 && s2.test(u2[h2])) {
          p2 += y2;
          continue;
        }
        f2 = [b2, E2], o2 && l2.has(m2) || t3(e26, x2, f2);
      }
      p2 += y2;
    }
  } };
} };
var pB = { meta: { type: "suggestion", docs: { description: "disallow initializing variables to `undefined`", category: "Variables", recommended: false, url: "https://eslint.org/docs/rules/no-undef-init" }, schema: [], fixable: "code" }, create: function(e25) {
  var t3 = e25.getSourceCode();
  return { VariableDeclarator: function(r2) {
    var n2 = t3.getText(r2.id), i2 = r2.init && r2.init.name, a2 = e25.getScope(), o2 = LA.getVariableByName(a2, "undefined"), s2 = o2 && 0 < o2.defs.length, u2 = t3.getLastToken(r2);
    "undefined" !== i2 || "const" === r2.parent.kind || s2 || e25.report({ node: r2, message: "It's not necessary to initialize '{{name}}' to undefined.", data: { name: n2 }, fix: function(e26) {
      return "var" === r2.parent.kind ? null : "ArrayPattern" === r2.id.type || "ObjectPattern" === r2.id.type ? null : t3.commentsExistBetween(r2.id, u2) ? null : e26.removeRange([r2.id.range[1], r2.range[1]]);
    } });
  } };
} };
var fB = { meta: { type: "problem", docs: { description: "disallow the use of undeclared variables unless mentioned in `/*global */` comments", category: "Variables", recommended: true, url: "https://eslint.org/docs/rules/no-undef" }, schema: [{ type: "object", properties: { typeof: { type: "boolean", default: false } }, additionalProperties: false }], messages: { undef: "'{{name}}' is not defined." } }, create: function(e25) {
  var t3 = e25.options[0], r2 = t3 && true === t3.typeof || false;
  return { "Program:exit": function() {
    e25.getScope().through.forEach(function(t4) {
      var n2 = t4.identifier;
      !r2 && function(e26) {
        var t5 = e26.parent;
        return "UnaryExpression" === t5.type && "typeof" === t5.operator;
      }(n2) || e25.report({ node: n2, messageId: "undef", data: n2 });
    });
  } };
} };
var hB = { meta: { type: "suggestion", docs: { description: "disallow the use of `undefined` as an identifier", category: "Variables", recommended: false, url: "https://eslint.org/docs/rules/no-undefined" }, schema: [] }, create: function(e25) {
  function t3(t4) {
    e25.report({ node: t4, message: "Unexpected use of undefined." });
  }
  function r2(e26) {
    var r3 = e26.set.get("undefined");
    if (r3) {
      var n2 = r3.references, i2 = r3.defs;
      n2.filter(function(e27) {
        return !e27.init;
      }).forEach(function(e27) {
        return t3(e27.identifier);
      }), i2.forEach(function(e27) {
        return t3(e27.name);
      });
    }
  }
  return { "Program:exit": function() {
    for (var t4 = [e25.getScope()]; t4.length; ) {
      var n2 = t4.pop();
      t4.push.apply(t4, E(n2.childScopes)), r2(n2);
    }
  } };
} };
var dB = { meta: { type: "problem", docs: { description: "disallow confusing multiline expressions", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-unexpected-multiline" }, schema: [], messages: { function: "Unexpected newline between function and ( of function call.", property: "Unexpected newline between object and [ of property access.", taggedTemplate: "Unexpected newline between template tag and template literal.", division: "Unexpected newline between numerator and division operator." } }, create: function(e25) {
  function t3(t4, r3) {
    var i2 = n2.getTokenAfter(t4, LA.isNotClosingParenToken), a2 = n2.getTokenBefore(i2);
    i2.loc.start.line !== a2.loc.end.line && e25.report({ node: t4, loc: i2.loc.start, messageId: r3, data: { char: i2.value } });
  }
  var r2 = /^[gimsuy]+$/, n2 = e25.getSourceCode();
  return { MemberExpression: function(e26) {
    e26.computed && t3(e26.object, "property");
  }, TaggedTemplateExpression: function(t4) {
    t4.tag.loc.end.line === t4.quasi.loc.start.line || e25.report({ node: t4, loc: t4.loc.start, messageId: "taggedTemplate" });
  }, CallExpression: function(e26) {
    0 === e26.arguments.length || t3(e26.callee, "function");
  }, "BinaryExpression[operator='/'] > BinaryExpression[operator='/'].left": function(e26) {
    var i2 = n2.getTokenAfter(e26, function(e27) {
      return "/" === e27.value;
    }), a2 = n2.getTokenAfter(i2);
    "Identifier" === a2.type && r2.test(a2.value) && i2.range[1] === a2.range[0] && t3(e26.left, "division");
  } };
} };
var mB = /(?:(?:Call|Class|Function|Member|New|Yield)Expression|Statement|Declaration)$/;
var gB = /^(?:DoWhile|For|While)Statement$/;
var yB = /^(?:BinaryExpression|ConditionalExpression)$/;
var vB = /^(?:ArrowFunction|Class|Function)Expression$/;
var xB = /^(?:Call|Member|New|TaggedTemplate|Yield)Expression$/;
function bB(e25) {
  if (e25.init) {
    var t3 = e25.resolved && e25.resolved.defs[0];
    if (!t3 || "Variable" !== t3.type || "var" !== t3.parent.kind) return false;
  }
  return e25.isWrite();
}
function EB(e25) {
  return !e25.modified;
}
function CB(e25) {
  return !(e25.modified || e25.group);
}
function SB(e25, t3) {
  var r2 = e25.range, n2 = t3.identifier.range;
  return r2[0] <= n2[0] && n2[1] <= r2[1];
}
var kB = { WhileStatement: SB, DoWhileStatement: SB, ForStatement: function(e25, t3) {
  return SB(e25, t3) && !(e25.init && SB(e25.init, t3));
} };
function DB(e25) {
  for (var t3 = e25.identifier; t3; ) {
    if ("FunctionDeclaration" === t3.type) return t3.id ? t3 : null;
    t3 = t3.parent;
  }
  return null;
}
var FB = { meta: { type: "problem", docs: { description: "disallow unmodified loop conditions", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-unmodified-loop-condition" }, schema: [] }, create: function(e25) {
  function t3(t4) {
    var r3 = t4.reference.identifier;
    e25.report({ node: r3, message: "'{{name}}' is not modified in this loop.", data: r3 });
  }
  function r2(e26) {
    e26.every(EB) && e26.forEach(t3);
  }
  function n2(e26) {
    var t4 = false;
    return Fy.Traverser.traverse(e26, { visitorKeys: o2.visitorKeys, enter: function(e27) {
      xB.test(e27.type) ? (t4 = true, this.break()) : vB.test(e27.type) && this.skip();
    } }), t4;
  }
  function i2(e26) {
    if (e26.init) return null;
    for (var t4 = null, r3 = e26.identifier, i3 = r3.parent; i3; ) {
      if (mB.test(i3.type)) {
        if (gB.test(i3.type) && i3.test === r3) return { reference: e26, group: t4, isInLoop: kB[i3.type].bind(null, i3), modified: false };
        break;
      }
      if (yB.test(i3.type)) {
        if (n2(i3)) break;
        t4 = i3;
      }
      r3 = i3, i3 = i3.parent;
    }
    return null;
  }
  function a2(e26) {
    var r3 = e26.references.map(i2).filter(Boolean);
    if (0 !== r3.length) {
      !function(e27) {
        for (var t4 = 0; t4 < e27.length; ++t4) {
          var r4 = e27[t4];
          if (r4.group) {
            var n4 = s2.get(r4.group);
            n4 || (n4 = [], s2.set(r4.group, n4)), n4.push(r4);
          }
        }
      }(r3);
      var n3 = e26.references.filter(bB);
      0 < n3.length && function(e27, t4) {
        for (var r4 = 0; r4 < e27.length; ++r4) for (var n4 = e27[r4], i3 = 0; !n4.modified && i3 < t4.length; ++i3) {
          var a3 = t4[i3], o3 = void 0, s3 = void 0, u2 = n4.isInLoop(a3) || !!((o3 = DB(a3)) && (s3 = LA.getVariableByName(a3.from.upper, o3.id.name)) && s3.references.some(n4.isInLoop));
          n4.modified = u2;
        }
      }(r3, n3), r3.filter(CB).forEach(t3);
    }
  }
  var o2 = e25.getSourceCode(), s2 = null;
  return { "Program:exit": function() {
    var t4, n3 = [e25.getScope()];
    for (s2 = /* @__PURE__ */ new Map(); t4 = n3.pop(); ) n3.push.apply(n3, E(t4.childScopes)), t4.variables.forEach(a2);
    s2.forEach(r2), s2 = null;
  } };
} };
var AB = /* @__PURE__ */ new Set(["==", "===", "!=", "!==", ">", ">=", "<", "<=", "in", "instanceof"]);
var wB = { "==": "!=", "!=": "==", "===": "!==", "!==": "===" };
var _B = LA.getPrecedence({ type: "LogicalExpression", operator: "||" });
var TB = { meta: { type: "suggestion", docs: { description: "disallow ternary operators when simpler alternatives exist", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-unneeded-ternary" }, schema: [{ type: "object", properties: { defaultAssignment: { type: "boolean", default: true } }, additionalProperties: false }], fixable: "code" }, create: function(e25) {
  function t3(e26) {
    return "Literal" === e26.type && "boolean" == typeof e26.value;
  }
  function r2(e26) {
    if ("BinaryExpression" === e26.type && Object.prototype.hasOwnProperty.call(wB, e26.operator)) {
      var t4 = i2.getFirstTokenBetween(e26.left, e26.right, function(t5) {
        return t5.value === e26.operator;
      }), r3 = i2.getText();
      return r3.slice(e26.range[0], t4.range[0]) + wB[e26.operator] + r3.slice(t4.range[1], e26.range[1]);
    }
    return LA.getPrecedence(e26) < LA.getPrecedence({ type: "UnaryExpression" }) ? "!(".concat(LA.getParenthesisedText(i2, e26), ")") : "!".concat(LA.getParenthesisedText(i2, e26));
  }
  var n2 = false !== (e25.options[0] || {}).defaultAssignment, i2 = e25.getSourceCode();
  return { ConditionalExpression: function(a2) {
    t3(a2.alternate) && t3(a2.consequent) ? e25.report({ node: a2, loc: a2.consequent.loc.start, message: "Unnecessary use of boolean literals in conditional expression.", fix: function(e26) {
      return a2.consequent.value === a2.alternate.value ? "Identifier" === a2.test.type ? e26.replaceText(a2, a2.consequent.value.toString()) : null : a2.alternate.value ? e26.replaceText(a2, r2(a2.test)) : e26.replaceText(a2, function(e27) {
        return "BinaryExpression" === e27.type && AB.has(e27.operator) || "UnaryExpression" === e27.type && "!" === e27.operator;
      }(a2.test) ? LA.getParenthesisedText(i2, a2.test) : "!".concat(r2(a2.test)));
    } }) : !n2 && function(e26) {
      return "Identifier" === e26.test.type && "Identifier" === e26.consequent.type && e26.test.name === e26.consequent.name;
    }(a2) && e25.report({ node: a2, loc: a2.consequent.loc.start, message: "Unnecessary use of conditional expression for default assignment.", fix: function(e26) {
      var t4 = LA.getPrecedence(a2.alternate) < _B && !LA.isParenthesised(i2, a2.alternate) ? "(".concat(i2.getText(a2.alternate), ")") : LA.getParenthesisedText(i2, a2.alternate), r3 = LA.getParenthesisedText(i2, a2.test);
      return e26.replaceText(a2, "".concat(r3, " || ").concat(t4));
    } });
  } };
} };
function PB(e25) {
  return !!e25.init;
}
function IB(e25) {
  return !e25.reachable;
}
var BB = function() {
  function e25(t3) {
    a(this, e25), this.sourceCode = t3, this.startNode = null, this.endNode = null;
  }
  return s(e25, [{ key: "contains", value: function(e26) {
    return e26.range[0] >= this.startNode.range[0] && e26.range[1] <= this.endNode.range[1];
  } }, { key: "isConsecutive", value: function(e26) {
    return this.contains(this.sourceCode.getTokenBefore(e26));
  } }, { key: "merge", value: function(e26) {
    this.endNode = e26;
  } }, { key: "reset", value: function(e26) {
    this.startNode = this.endNode = e26;
  } }, { key: "location", get: function() {
    return { start: this.startNode.loc.start, end: this.endNode.loc.end };
  } }, { key: "isEmpty", get: function() {
    return !(this.startNode && this.endNode);
  } }]), e25;
}();
var OB = { meta: { type: "problem", docs: { description: "disallow unreachable code after `return`, `throw`, `continue`, and `break` statements", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-unreachable" }, schema: [] }, create: function(e25) {
  function t3(t4) {
    var i2 = null;
    if (t4 && r2.currentSegments.every(IB)) {
      if (n2.isEmpty) return void n2.reset(t4);
      if (n2.contains(t4)) return;
      if (n2.isConsecutive(t4)) return void n2.merge(t4);
      i2 = t4;
    }
    n2.isEmpty || e25.report({ message: "Unreachable code.", loc: n2.location, node: n2.startNode }), n2.reset(i2);
  }
  var r2 = null, n2 = new BB(e25.getSourceCode());
  return { onCodePathStart: function(e26) {
    r2 = e26;
  }, onCodePathEnd: function() {
    r2 = r2.upper;
  }, BlockStatement: t3, BreakStatement: t3, ClassDeclaration: t3, ContinueStatement: t3, DebuggerStatement: t3, DoWhileStatement: t3, ExpressionStatement: t3, ForInStatement: t3, ForOfStatement: t3, ForStatement: t3, IfStatement: t3, ImportDeclaration: t3, LabeledStatement: t3, ReturnStatement: t3, SwitchStatement: t3, ThrowStatement: t3, TryStatement: t3, VariableDeclaration: function(e26) {
    ("var" !== e26.kind || e26.declarations.some(PB)) && t3(e26);
  }, WhileStatement: t3, WithStatement: t3, ExportNamedDeclaration: t3, ExportDefaultDeclaration: t3, ExportAllDeclaration: t3, "Program:exit": function() {
    t3();
  } };
} };
var LB = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression)$/;
var NB = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|DoWhileStatement|WhileStatement|ForOfStatement|ForInStatement|ForStatement|SwitchStatement)$/;
var jB = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|DoWhileStatement|WhileStatement|ForOfStatement|ForInStatement|ForStatement)$/;
var RB = { meta: { type: "problem", docs: { description: "disallow control flow statements in `finally` blocks", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-unsafe-finally" }, schema: [] }, create: function(e25) {
  function t3(e26) {
    return "TryStatement" === e26.parent.type && e26.parent.finalizer === e26;
  }
  function r2(e26, r3) {
    var n3, i2 = false;
    n3 = "BreakStatement" !== e26.type || e26.label ? "ContinueStatement" === e26.type ? jB : LB : NB;
    for (var a2 = e26; a2 && !n3.test(a2.type); a2 = a2.parent) if (a2.parent.label && r3 && a2.parent.label.name === r3.name && (i2 = true), t3(a2)) return !(r3 && i2);
    return false;
  }
  function n2(t4) {
    r2(t4, t4.label) && e25.report({ message: "Unsafe usage of {{nodeType}}.", data: { nodeType: t4.type }, node: t4, line: t4.loc.line, column: t4.loc.column });
  }
  return { ReturnStatement: n2, ThrowStatement: n2, BreakStatement: n2, ContinueStatement: n2 };
} };
var MB = { meta: { type: "problem", docs: { description: "disallow negating the left operand of relational operators", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-unsafe-negation" }, schema: [{ type: "object", properties: { enforceForOrderingRelations: { type: "boolean", default: false } }, additionalProperties: false }], fixable: null, messages: { unexpected: "Unexpected negating the left operand of '{{operator}}' operator." } }, create: function(e25) {
  var t3 = e25.getSourceCode(), r2 = true === (e25.options[0] || {}).enforceForOrderingRelations;
  return { BinaryExpression: function(n2) {
    var i2 = r2 && /* @__PURE__ */ function(e26) {
      return "<" === e26 || ">" === e26 || ">=" === e26 || "<=" === e26;
    }(n2.operator);
    (/* @__PURE__ */ function(e26) {
      return "in" === e26 || "instanceof" === e26;
    }(n2.operator) || i2) && function(e26) {
      return "UnaryExpression" === e26.type && "!" === e26.operator;
    }(n2.left) && !LA.isParenthesised(t3, n2.left) && e25.report({ node: n2, loc: n2.left.loc, messageId: "unexpected", data: { operator: n2.operator } });
  } };
} };
var VB = { meta: { type: "problem", docs: { description: "disallow unused variables", category: "Variables", recommended: true, url: "https://eslint.org/docs/rules/no-unused-vars" }, schema: [{ oneOf: [{ enum: ["all", "local"] }, { type: "object", properties: { vars: { enum: ["all", "local"] }, varsIgnorePattern: { type: "string" }, args: { enum: ["all", "after-used", "none"] }, ignoreRestSiblings: { type: "boolean" }, argsIgnorePattern: { type: "string" }, caughtErrors: { enum: ["all", "none"] }, caughtErrorsIgnorePattern: { type: "string" } } }] }] }, create: function(e25) {
  function t3(e26) {
    var t4, r3, n3 = e26.defs && e26.defs[0] && e26.defs[0].type;
    "CatchClause" === n3 && f2.caughtErrorsIgnorePattern ? (t4 = "args", r3 = f2.caughtErrorsIgnorePattern.toString()) : "Parameter" === n3 && f2.argsIgnorePattern ? (t4 = "args", r3 = f2.argsIgnorePattern.toString()) : "Parameter" !== n3 && f2.varsIgnorePattern && (t4 = "vars", r3 = f2.varsIgnorePattern.toString());
    var i3 = t4 ? " Allowed unused ".concat(t4, " must match ").concat(r3, ".") : "";
    return "'{{name}}' is defined but never used.".concat(i3);
  }
  function r2() {
    var e26 = f2.varsIgnorePattern ? " Allowed unused vars must match ".concat(f2.varsIgnorePattern.toString(), ".") : "";
    return "'{{name}}' is assigned a value but never used.".concat(e26);
  }
  function n2(e26) {
    var t4 = e26.defs[0];
    if (t4) {
      var r3 = t4.node;
      if ("VariableDeclarator" === r3.type) r3 = r3.parent;
      else if ("Parameter" === t4.type) return false;
      return 0 === r3.parent.type.indexOf("Export");
    }
    return false;
  }
  function i2(e26) {
    return !!f2.ignoreRestSiblings && e26.defs.some(function(e27) {
      var t4 = e27.name.parent, r3 = t4.parent;
      return "Property" === t4.type && "ObjectPattern" === r3.type && p2.test(r3.properties[r3.properties.length - 1].type);
    });
  }
  function a2(e26, t4) {
    return e26.range[0] >= t4.range[0] && e26.range[1] <= t4.range[1];
  }
  function o2(e26, t4) {
    var r3 = LA.getUpperFunction(e26);
    return r3 && a2(r3, t4) && function(e27, t5) {
      for (var r4 = e27, n3 = e27.parent; n3 && a2(n3, t5); ) {
        switch (n3.type) {
          case "SequenceExpression":
            if (n3.expressions[n3.expressions.length - 1] !== r4) return false;
            break;
          case "CallExpression":
          case "NewExpression":
            return n3.callee !== r4;
          case "AssignmentExpression":
          case "TaggedTemplateExpression":
          case "YieldExpression":
            return true;
          default:
            if (d2.test(n3.type)) return true;
        }
        r4 = n3, n3 = n3.parent;
      }
      return false;
    }(r3, t4);
  }
  function s2(e26) {
    var t4 = function(e27) {
      var t5 = [];
      return e27.defs.forEach(function(e28) {
        var r4 = e28.type, n4 = e28.node;
        "FunctionName" === r4 && t5.push(n4), "Variable" === r4 && n4.init && ("FunctionExpression" === n4.init.type || "ArrowFunctionExpression" === n4.init.type) && t5.push(n4.init);
      }), t5;
    }(e26), r3 = 0 < t4.length, n3 = null;
    return e26.references.some(function(e27) {
      if (function(e28) {
        var t5 = e28.identifier.parent;
        return "VariableDeclarator" === t5.type && (t5 = t5.parent.parent), "ForInStatement" === t5.type && (!!(t5 = "BlockStatement" === t5.body.type ? t5.body.body[0] : t5.body) && "ReturnStatement" === t5.type);
      }(e27)) return true;
      var i3 = function(e28, t5) {
        var r4 = e28.identifier, n4 = r4.parent, i4 = n4.parent;
        return e28.isRead() && ("AssignmentExpression" === n4.type && "ExpressionStatement" === i4.type && n4.left === r4 || "UpdateExpression" === n4.type && "ExpressionStatement" === i4.type || t5 && a2(r4, t5) && !o2(r4, t5));
      }(e27, n3);
      return n3 = function(e28, t5) {
        var r4 = e28.identifier, n4 = r4.parent, i4 = n4.parent, o3 = e28.from.variableScope !== e28.resolved.scope.variableScope || LA.isInLoop(r4);
        return t5 && a2(r4, t5) ? t5 : "AssignmentExpression" !== n4.type || "ExpressionStatement" !== i4.type || r4 !== n4.left || o3 ? null : n4.right;
      }(e27, n3), function(e28) {
        return e28.isRead();
      }(e27) && !i3 && !(r3 && function(e28, t5) {
        for (var r4 = e28.from; r4; ) {
          if (0 <= t5.indexOf(r4.block)) return true;
          r4 = r4.upper;
        }
        return false;
      }(e27, t4));
    });
  }
  function u2(t4) {
    var r3 = t4.defs[0], n3 = e25.getDeclaredVariables(r3.node);
    return !n3.slice(n3.indexOf(t4) + 1).some(function(e26) {
      return 0 < e26.references.length || e26.eslintUsed;
    });
  }
  function c2(e26, t4) {
    var r3, a3, o3 = e26.variables, l3 = e26.childScopes;
    if ("global" !== e26.type || "all" === f2.vars) for (r3 = 0, a3 = o3.length; r3 < a3; ++r3) {
      var p3 = o3[r3];
      if (("class" !== e26.type || e26.block.id !== p3.identifiers[0]) && !(e26.functionExpressionScope || p3.eslintUsed || "function" === e26.type && "arguments" === p3.name && 0 === p3.identifiers.length)) {
        var h3 = p3.defs[0];
        if (h3) {
          var d3 = h3.type;
          if ("CatchClause" === d3) {
            if ("none" === f2.caughtErrors) continue;
            if (f2.caughtErrorsIgnorePattern && f2.caughtErrorsIgnorePattern.test(h3.name.name)) continue;
          }
          if ("Parameter" === d3) {
            if (("Property" === h3.node.parent.type || "MethodDefinition" === h3.node.parent.type) && "set" === h3.node.parent.kind) continue;
            if ("none" === f2.args) continue;
            if (f2.argsIgnorePattern && f2.argsIgnorePattern.test(h3.name.name)) continue;
            if ("after-used" === f2.args && LA.isFunction(h3.name.parent) && !u2(p3)) continue;
          } else if (f2.varsIgnorePattern && f2.varsIgnorePattern.test(h3.name.name)) continue;
        }
        s2(p3) || n2(p3) || i2(p3) || t4.push(p3);
      }
    }
    for (r3 = 0, a3 = l3.length; r3 < a3; ++r3) c2(l3[r3], t4);
    return t4;
  }
  var l2 = e25.getSourceCode(), p2 = /^(?:RestElement|(?:Experimental)?RestProperty)$/, f2 = { vars: "all", args: "after-used", ignoreRestSiblings: false, caughtErrors: "none" }, h2 = e25.options[0];
  h2 && ("string" == typeof h2 ? f2.vars = h2 : (f2.vars = h2.vars || f2.vars, f2.args = h2.args || f2.args, f2.ignoreRestSiblings = h2.ignoreRestSiblings || f2.ignoreRestSiblings, f2.caughtErrors = h2.caughtErrors || f2.caughtErrors, h2.varsIgnorePattern && (f2.varsIgnorePattern = new RegExp(h2.varsIgnorePattern, "u")), h2.argsIgnorePattern && (f2.argsIgnorePattern = new RegExp(h2.argsIgnorePattern, "u")), h2.caughtErrorsIgnorePattern && (f2.caughtErrorsIgnorePattern = new RegExp(h2.caughtErrorsIgnorePattern, "u"))));
  var d2 = /(?:Statement|Declaration)$/;
  return { "Program:exit": function(n3) {
    for (var i3 = c2(e25.getScope(), []), a3 = 0, o3 = i3.length; a3 < o3; ++a3) {
      var s3 = i3[a3];
      if (0 < s3.defs.length) e25.report({ node: s3.identifiers[0], message: s3.references.some(function(e26) {
        return e26.isWrite();
      }) ? r2() : t3(s3), data: s3 });
      else if (s3.eslintExplicitGlobalComments) {
        var u3 = s3.eslintExplicitGlobalComments[0];
        e25.report({ node: n3, loc: LA.getNameLocationInGlobalDirectiveComment(l2, u3, s3.name), message: t3(s3), data: s3 });
      }
    }
  } };
} };
var UB = /^(?:(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|CatchClause|ImportDeclaration|ExportNamedDeclaration)$/;
var qB = /^For(?:In|Of)Statement$/;
function WB(e25, t3) {
  return e25 && e25.range[0] <= t3 && t3 <= e25.range[1];
}
var $B = { meta: { type: "problem", docs: { description: "disallow the use of variables before they are defined", category: "Variables", recommended: false, url: "https://eslint.org/docs/rules/no-use-before-define" }, schema: [{ oneOf: [{ enum: ["nofunc"] }, { type: "object", properties: { functions: { type: "boolean" }, classes: { type: "boolean" }, variables: { type: "boolean" } }, additionalProperties: false }] }] }, create: function(e25) {
  function t3(e26, t4) {
    return function(e27) {
      return "FunctionName" === e27.defs[0].type;
    }(e26) ? n2.functions : function(e27, t5) {
      return "ClassName" === e27.defs[0].type && e27.scope.variableScope !== t5.from.variableScope;
    }(e26, t4) ? n2.classes : !function(e27, t5) {
      return "Variable" === e27.defs[0].type && e27.scope.variableScope !== t5.from.variableScope;
    }(e26, t4) || n2.variables;
  }
  function r2(n3) {
    n3.references.forEach(function(r3) {
      var n4 = r3.resolved;
      !r3.init && n4 && 0 !== n4.identifiers.length && (!(n4.identifiers[0].range[1] < r3.identifier.range[1]) || function(e26, t4) {
        if (e26.scope !== t4.from) return false;
        for (var r4 = e26.identifiers[0].parent, n5 = t4.identifier.range[1]; r4; ) {
          if ("VariableDeclarator" === r4.type) {
            if (WB(r4.init, n5)) return true;
            if (qB.test(r4.parent.parent.type) && WB(r4.parent.parent.right, n5)) return true;
            break;
          }
          if ("AssignmentPattern" === r4.type) {
            if (WB(r4.right, n5)) return true;
          } else if (UB.test(r4.type)) break;
          r4 = r4.parent;
        }
        return false;
      }(n4, r3)) && t3(n4, r3) && e25.report({ node: r3.identifier, message: "'{{name}}' was used before it was defined.", data: r3.identifier });
    }), n3.childScopes.forEach(r2);
  }
  var n2 = function(e26) {
    var t4 = true, r3 = true, n3 = true;
    return "string" == typeof e26 ? t4 = "nofunc" != e26 : "object" == i(e26) && null !== e26 && (t4 = false !== e26.functions, r3 = false !== e26.classes, n3 = false !== e26.variables), { functions: t4, classes: r3, variables: n3 };
  }(e25.options[0]);
  return { Program: function() {
    r2(e25.getScope());
  } };
} };
var GB = { meta: { type: "suggestion", docs: { description: "disallow unnecessary calls to `.call()` and `.apply()`", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-useless-call" }, schema: [] }, create: function(e25) {
  var t3 = e25.getSourceCode();
  return { CallExpression: function(r2) {
    if (function(e26) {
      return "MemberExpression" === e26.callee.type && "Identifier" === e26.callee.property.type && false === e26.callee.computed && ("call" === e26.callee.property.name && 1 <= e26.arguments.length || "apply" === e26.callee.property.name && 2 === e26.arguments.length && "ArrayExpression" === e26.arguments[1].type);
    }(r2)) {
      var n2 = r2.callee.object;
      (function(e26, t4, r3) {
        return e26 ? LA.equalTokens(e26, t4, r3) : LA.isNullOrUndefined(t4);
      })("MemberExpression" === n2.type ? n2.object : null, r2.arguments[0], t3) && e25.report({ node: r2, message: "unnecessary '.{{name}}()'.", data: { name: r2.callee.property.name } });
    }
  } };
} };
var zB = "Unnecessarily computed property [{{property}}] found.";
var HB = { meta: { type: "suggestion", docs: { description: "disallow unnecessary computed property keys in objects and classes", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/no-useless-computed-key" }, schema: [{ type: "object", properties: { enforceForClassMembers: { type: "boolean", default: false } }, additionalProperties: false }], fixable: "code" }, create: function(e25) {
  function t3(t4) {
    if (t4.computed) {
      var n2, a2 = t4.key, o2 = i(a2.value);
      n2 = "MethodDefinition" === t4.type ? t4.static ? "prototype" : "constructor" : "__proto__", "Literal" === a2.type && ("string" === o2 || "number" === o2) && a2.value !== n2 && e25.report({ node: t4, message: zB, data: { property: r2.getText(a2) }, fix: function(e26) {
        var n3 = r2.getFirstToken(t4, LA.isOpeningBracketToken), i2 = r2.getFirstTokenBetween(t4.key, t4.value, LA.isClosingBracketToken), o3 = r2.getTokensBetween(n3, i2, 1);
        if (o3.slice(0, -1).some(function(e27, t5) {
          return r2.getText().slice(e27.range[1], o3[t5 + 1].range[0]).trim();
        })) return null;
        var s2 = r2.getTokenBefore(n3), u2 = (s2.range[1] === n3.range[0] && !LA.canTokensBeAdjacent(s2, r2.getFirstToken(a2)) ? " " : "") + a2.raw;
        return e26.replaceTextRange([n3.range[0], i2.range[1]], u2);
      } });
    }
  }
  var r2 = e25.getSourceCode();
  return { Property: t3, MethodDefinition: e25.options[0] && e25.options[0].enforceForClassMembers ? t3 : Fy.lodash.noop };
} };
function KB(e25) {
  return "BinaryExpression" === e25.type && "+" === e25.operator;
}
function JB(e25) {
  return "+" === e25.value && "Punctuator" === e25.type;
}
var QB = { meta: { type: "suggestion", docs: { description: "disallow unnecessary concatenation of literals or template literals", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-useless-concat" }, schema: [] }, create: function(e25) {
  var t3 = e25.getSourceCode();
  return { BinaryExpression: function(r2) {
    if ("+" === r2.operator) {
      var n2 = function(e26) {
        for (var t4 = e26.left; KB(t4); ) t4 = t4.right;
        return t4;
      }(r2), i2 = function(e26) {
        for (var t4 = e26.right; KB(t4); ) t4 = t4.left;
        return t4;
      }(r2);
      if (LA.isStringLiteral(n2) && LA.isStringLiteral(i2) && LA.isTokenOnSameLine(n2, i2)) {
        var a2 = t3.getFirstTokenBetween(n2, i2, JB);
        e25.report({ node: r2, loc: a2.loc.start, message: "Unexpected string concatenation of literals." });
      }
    }
  } };
} };
function XB(e25) {
  return "Identifier" === e25.type || "RestElement" === e25.type;
}
function YB(e25, t3) {
  return "Identifier" === e25.type && "Identifier" === t3.type && e25.name === t3.name;
}
function ZB(e25, t3) {
  return YB(e25, t3) || function(e26, t4) {
    return "RestElement" === e26.type && "SpreadElement" === t4.type && YB(e26.argument, t4.argument);
  }(e25, t3);
}
function eO(e25, t3) {
  return function(e26) {
    return 1 === e26.length && "ExpressionStatement" === e26[0].type && "CallExpression" === e26[0].expression.type && "Super" === e26[0].expression.callee.type;
  }(e25) && t3.every(XB) && (function(e26) {
    return 1 === e26.length && "SpreadElement" === e26[0].type && "Identifier" === e26[0].argument.type && "arguments" === e26[0].argument.name;
  }(e25[0].expression.arguments) || function(e26, t4) {
    if (e26.length !== t4.length) return false;
    for (var r2 = 0; r2 < e26.length; ++r2) if (!ZB(e26[r2], t4[r2])) return false;
    return true;
  }(t3, e25[0].expression.arguments));
}
var tO = { meta: { type: "suggestion", docs: { description: "disallow unnecessary constructors", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/no-useless-constructor" }, schema: [] }, create: function(e25) {
  return { MethodDefinition: function(t3) {
    if ("constructor" === t3.kind) {
      var r2 = t3.value.body.body, n2 = t3.value.params;
      (t3.parent.parent.superClass ? eO(r2, n2) : 0 === r2.length) && e25.report({ node: t3, message: "Useless constructor." });
    }
  } };
} };
function rO(e25, t3) {
  return new Set(regeneratorRuntime.mark(function r2() {
    return regeneratorRuntime.wrap(function(r3) {
      for (; ; ) switch (r3.prev = r3.next) {
        case 0:
          return r3.delegateYield(e25, "t0", 1);
        case 1:
          return r3.delegateYield(t3, "t1", 2);
        case 2:
        case "end":
          return r3.stop();
      }
    }, r2);
  })());
}
var nO = rO(new Set("\\nrvtbfux"), LA.LINEBREAKS);
var iO = new Set("\\bcdDfnpPrsStvwWxu0123456789]");
var aO = rO(iO, new Set("^/.$*+?[{}|()Bk"));
var oO = { meta: { type: "suggestion", docs: { description: "disallow unnecessary escape characters", category: "Best Practices", recommended: true, url: "https://eslint.org/docs/rules/no-useless-escape", suggestion: true }, messages: { unnecessaryEscape: "Unnecessary escape character: \\{{character}}.", removeEscape: "Remove the `\\`. This maintains the current functionality.", escapeBackslash: "Replace the `\\` with `\\\\` to include the actual backslash character." }, schema: [] }, create: function(e25) {
  function t3(t4, r3, n3) {
    var a2 = i2.getLocFromIndex(i2.getIndexFromLoc(t4.loc.start) + r3), o2 = i2.getIndexFromLoc(t4.loc.start) + r3, s2 = [o2, o2 + 1];
    e25.report({ node: t4, loc: { start: a2, end: { line: a2.line, column: a2.column + 1 } }, messageId: "unnecessaryEscape", data: { character: n3 }, suggest: [{ messageId: "removeEscape", fix: function(e26) {
      return e26.removeRange(s2);
    } }, { messageId: "escapeBackslash", fix: function(e26) {
      return e26.insertTextBeforeRange(s2, "\\");
    } }] });
  }
  function r2(e26, r3) {
    var n3, i3 = "TemplateElement" === e26.type, a2 = r3[0][1], o2 = !nO.has(a2);
    i3 ? (n3 = "`" === a2, "$" === a2 ? o2 = "{" !== r3.input[r3.index + 2] : "{" === a2 && (o2 = "$" !== r3.input[r3.index - 1])) : n3 = a2 === e26.raw[0], o2 && !n3 && t3(e26, r3.index + 1, r3[0].slice(1));
  }
  function n2(e26) {
    var n3 = "TemplateElement" === e26.type;
    if (!(n3 && e26.parent && e26.parent.parent && "TaggedTemplateExpression" === e26.parent.parent.type && e26.parent === e26.parent.parent.quasi)) if ("string" == typeof e26.value || n3) {
      if ("JSXAttribute" === e26.parent.type || "JSXElement" === e26.parent.type || "JSXFragment" === e26.parent.type) return;
      for (var i3, a2 = n3 ? e26.value.raw : e26.raw.slice(1, -1), o2 = /\\(?:[\0-\/:-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g; i3 = o2.exec(a2); ) r2(e26, i3);
    } else e26.regex && function(e27) {
      var t4 = [];
      return e27.split("").reduce(function(e28, r3, n4) {
        if (!e28.escapeNextChar) {
          if ("\\" === r3) return Object.assign(e28, { escapeNextChar: true });
          if ("[" === r3 && !e28.inCharClass) return Object.assign(e28, { inCharClass: true, startingCharClass: true });
          if ("]" === r3 && e28.inCharClass) return t4.length && t4[t4.length - 1].inCharClass && (t4[t4.length - 1].endsCharClass = true), Object.assign(e28, { inCharClass: false, startingCharClass: false });
        }
        return t4.push({ text: r3, index: n4, escaped: e28.escapeNextChar, inCharClass: e28.inCharClass, startsCharClass: e28.startingCharClass, endsCharClass: false }), Object.assign(e28, { escapeNextChar: false, startingCharClass: false });
      }, { escapeNextChar: false, inCharClass: false, startingCharClass: false }), t4;
    }(e26.regex.pattern).filter(function(e27) {
      return "-" !== e27.text || !e27.inCharClass || e27.startsCharClass || e27.endsCharClass;
    }).filter(function(e27) {
      return !("^" === e27.text && e27.startsCharClass);
    }).filter(function(e27) {
      return e27.escaped;
    }).filter(function(e27) {
      return !(e27.inCharClass ? iO : aO).has(e27.text);
    }).forEach(function(r3) {
      return t3(e26, r3.index, r3.text);
    });
  }
  var i2 = e25.getSourceCode();
  return { Literal: n2, TemplateElement: n2 };
} };
var sO = { meta: { type: "suggestion", docs: { description: "disallow renaming import, export, and destructured assignments to the same name", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/no-useless-rename" }, fixable: "code", schema: [{ type: "object", properties: { ignoreDestructuring: { type: "boolean", default: false }, ignoreImport: { type: "boolean", default: false }, ignoreExport: { type: "boolean", default: false } }, additionalProperties: false }] }, create: function(e25) {
  function t3(t4, n3, i3, a3) {
    var o3 = "Identifier" === n3.type ? n3.name : n3.value;
    return e25.report({ node: t4, message: "{{type}} {{name}} unnecessarily renamed.", data: { name: o3, type: a3 }, fix: function(e26) {
      if (r2.commentsExistBetween(n3, i3)) return null;
      var t5 = "AssignmentPattern" === i3.type ? r2.getText(i3) : o3;
      return e26.replaceTextRange([n3.range[0], i3.range[1]], t5);
    } });
  }
  var r2 = e25.getSourceCode(), n2 = e25.options[0] || {}, i2 = true === n2.ignoreDestructuring, a2 = true === n2.ignoreImport, o2 = true === n2.ignoreExport;
  return { ObjectPattern: function(e26) {
    if (!i2) {
      var r3 = true, n3 = false, a3 = void 0;
      try {
        for (var o3, s2 = e26.properties[Symbol.iterator](); !(r3 = (o3 = s2.next()).done); r3 = true) {
          var u2 = o3.value;
          if ("ExperimentalRestProperty" !== u2.type) {
            if (!u2.shorthand && "RestElement" !== u2.type && !u2.computed) ("Identifier" === u2.key.type && u2.key.name || "Literal" === u2.key.type && u2.key.value) === ("AssignmentPattern" === u2.value.type ? u2.value.left.name : u2.value.name) && t3(u2, u2.key, u2.value, "Destructuring assignment");
          }
        }
      } catch (e27) {
        n3 = true, a3 = e27;
      } finally {
        try {
          r3 || null == s2.return || s2.return();
        } finally {
          if (n3) throw a3;
        }
      }
    }
  }, ImportSpecifier: function(e26) {
    a2 || e26.imported.name === e26.local.name && e26.imported.range[0] !== e26.local.range[0] && t3(e26, e26.imported, e26.local, "Import");
  }, ExportSpecifier: function(e26) {
    o2 || e26.local.name === e26.exported.name && e26.local.range[0] !== e26.exported.range[0] && t3(e26, e26.local, e26.exported, "Export");
  } };
} };
function uO(e25, t3) {
  var r2 = e25.indexOf(t3);
  -1 !== r2 && e25.splice(r2, 1);
}
var cO = { meta: { type: "suggestion", docs: { description: "disallow redundant return statements", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-useless-return" }, fixable: "code", schema: [] }, create: function(e25) {
  function t3(e26) {
    var t4 = a2.get(e26);
    return !t4 || t4.returned;
  }
  function r2(e26, n3, i3) {
    var o3 = i3 || /* @__PURE__ */ new WeakSet(), s3 = true, u3 = false, c2 = void 0;
    try {
      for (var l2, p2 = n3[Symbol.iterator](); !(s3 = (l2 = p2.next()).done); s3 = true) {
        var f2 = l2.value;
        f2.reachable ? e26.push.apply(e26, E(a2.get(f2).uselessReturns)) : o3.has(f2) || (o3.add(f2), r2(e26, f2.allPrevSegments.filter(t3), o3));
      }
    } catch (e27) {
      u3 = true, c2 = e27;
    } finally {
      try {
        s3 || null == p2.return || p2.return();
      } finally {
        if (u3) throw c2;
      }
    }
    return e26;
  }
  function n2(e26) {
    if (!e26.reachable) return o2.add(e26), void e26.allPrevSegments.filter(t3).filter(function(e27) {
      return !o2.has(e27);
    }).forEach(n2);
    var r3 = a2.get(e26), i3 = true, s3 = false, c2 = void 0;
    try {
      for (var l2, p2 = r3.uselessReturns[Symbol.iterator](); !(i3 = (l2 = p2.next()).done); i3 = true) {
        var f2 = l2.value;
        uO(u2.uselessReturns, f2);
      }
    } catch (e27) {
      s3 = true, c2 = e27;
    } finally {
      try {
        i3 || null == p2.return || p2.return();
      } finally {
        if (s3) throw c2;
      }
    }
    r3.uselessReturns = [];
  }
  function i2() {
    u2.codePath.currentSegments.forEach(n2);
  }
  var a2 = /* @__PURE__ */ new WeakMap(), o2 = /* @__PURE__ */ new WeakSet(), s2 = e25.getSourceCode(), u2 = null;
  return { onCodePathStart: function(e26) {
    u2 = { upper: u2, uselessReturns: [], codePath: e26 };
  }, onCodePathEnd: function() {
    var t4 = true, r3 = false, n3 = void 0;
    try {
      for (var i3, a3 = function() {
        var t5 = i3.value;
        e25.report({ node: t5, loc: t5.loc, message: "Unnecessary return statement.", fix: function(e26) {
          return function(e27) {
            return LA.STATEMENT_LIST_PARENTS.has(e27.parent.type);
          }(t5) && !s2.getCommentsInside(t5).length ? new RT(e26, s2).retainEnclosingFunction(t5).remove(t5) : null;
        } });
      }, o3 = u2.uselessReturns[Symbol.iterator](); !(t4 = (i3 = o3.next()).done); t4 = true) a3();
    } catch (e26) {
      r3 = true, n3 = e26;
    } finally {
      try {
        t4 || null == o3.return || o3.return();
      } finally {
        if (r3) throw n3;
      }
    }
    u2 = u2.upper;
  }, onCodePathSegmentStart: function(e26) {
    var t4 = { uselessReturns: r2([], e26.allPrevSegments), returned: false };
    a2.set(e26, t4);
  }, ReturnStatement: function(e26) {
    if (e26.argument && i2(), !(e26.argument || LA.isInLoop(e26) || function(e27) {
      for (var t5 = e27; t5 && t5.parent && !LA.isFunction(t5); t5 = t5.parent) if ("TryStatement" === t5.parent.type && t5.parent.finalizer === t5) return true;
      return false;
    }(e26)) && u2.codePath.currentSegments.some(function(e27) {
      return e27.reachable;
    })) {
      var t4 = true, r3 = false, n3 = void 0;
      try {
        for (var o3, s3 = u2.codePath.currentSegments[Symbol.iterator](); !(t4 = (o3 = s3.next()).done); t4 = true) {
          var c2 = o3.value, l2 = a2.get(c2);
          l2 && (l2.uselessReturns.push(e26), l2.returned = true);
        }
      } catch (e27) {
        r3 = true, n3 = e27;
      } finally {
        try {
          t4 || null == s3.return || s3.return();
        } finally {
          if (r3) throw n3;
        }
      }
      u2.uselessReturns.push(e26);
    }
  }, ClassDeclaration: i2, ContinueStatement: i2, DebuggerStatement: i2, DoWhileStatement: i2, EmptyStatement: i2, ExpressionStatement: i2, ForInStatement: i2, ForOfStatement: i2, ForStatement: i2, IfStatement: i2, ImportDeclaration: i2, LabeledStatement: i2, SwitchStatement: i2, ThrowStatement: i2, TryStatement: i2, VariableDeclaration: i2, WhileStatement: i2, WithStatement: i2, ExportNamedDeclaration: i2, ExportDefaultDeclaration: i2, ExportAllDeclaration: i2 };
} };
function lO(e25) {
  return !!e25.scope && "global" === e25.scope.type;
}
function pO(e25) {
  for (var t3 = e25; "function" !== t3.type && "global" !== t3.type; ) t3 = t3.upper;
  return t3;
}
function fO(e25) {
  var t3 = pO(e25.scope);
  return e25.references.some(function(e26) {
    return pO(e26.from) !== t3;
  });
}
function hO(e25) {
  return ("ForOfStatement" === e25.parent.type || "ForInStatement" === e25.parent.type) && e25 === e25.parent.left;
}
var dO = /^(?:Program|BlockStatement|SwitchStatement|ForStatement|ForInStatement|ForOfStatement)$/;
function mO(e25) {
  return 2 <= e25.defs.length;
}
function gO(e25) {
  return "let" === e25.name;
}
var yO = { meta: { type: "suggestion", docs: { description: "require `let` or `const` instead of `var`", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/no-var" }, schema: [], fixable: "code" }, create: function(e25) {
  function t3(t4) {
    return !!t4.init && e25.getDeclaredVariables(t4).some(function(e26) {
      var t5 = e26.range[0], r3 = e26.range[1];
      return function(e27) {
        var n3 = e27.defs[0].name, i3 = n3.range[0], a2 = "AssignmentPattern" === n3.parent.type ? n3.parent.right : null, o2 = a2 && a2.range[0], s2 = a2 && a2.range[1];
        return e27.references.some(function(e28) {
          var n4 = e28.identifier.range[0], u2 = e28.identifier.range[1];
          return !e28.init && (n4 < i3 || null !== a2 && n4 >= o2 && u2 <= s2 || n4 >= t5 && u2 <= r3);
        });
      };
    }(t4.init));
  }
  function r2(r3) {
    var n3 = e25.getDeclaredVariables(r3), i3 = function(e26) {
      for (var t4 = e26; t4; t4 = t4.parent) if (dO.test(t4.type)) return t4;
      return null;
    }(r3);
    if ("SwitchCase" === r3.parent.type || r3.declarations.some(t3) || n3.some(lO) || n3.some(mO) || n3.some(/* @__PURE__ */ function(e26) {
      function t4(t5) {
        var r4 = e26.range, n4 = t5.identifier.range;
        return n4[0] < r4[0] || n4[1] > r4[1];
      }
      return function(e27) {
        return e27.references.some(t4);
      };
    }(i3)) || n3.some(gO)) return false;
    if (LA.isInLoop(r3)) {
      if (n3.some(fO)) return false;
      if (!hO(r3) && !function(e26) {
        return e26.declarations.every(function(e27) {
          return null !== e27.init;
        });
      }(r3)) return false;
    }
    return !!(hO(r3) || "ForStatement" === r3.parent.type && r3.parent.init === r3 || LA.STATEMENT_LIST_PARENTS.has(r3.parent.type));
  }
  function n2(t4) {
    e25.report({ node: t4, message: "Unexpected var, use let or const instead.", fix: function(e26) {
      var n3 = i2.getFirstToken(t4, { filter: function(e27) {
        return "var" === e27.value;
      } });
      return r2(t4) ? e26.replaceText(n3, "let") : null;
    } });
  }
  var i2 = e25.getSourceCode();
  return { "VariableDeclaration:exit": function(e26) {
    "var" === e26.kind && n2(e26);
  } };
} };
var vO = Fy.lodash.escapeRegExp;
var xO = { meta: { type: "suggestion", docs: { description: "disallow specified warning terms in comments", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-warning-comments" }, schema: [{ type: "object", properties: { terms: { type: "array", items: { type: "string" } }, location: { enum: ["start", "anywhere"] } }, additionalProperties: false }] }, create: function(e25) {
  function t3(t4) {
    LA.isDirectiveComment(t4) && o2.test(t4.value) || function(e26) {
      var t5 = [];
      return s2.forEach(function(r3, n3) {
        r3.test(e26) && t5.push(i2[n3]);
      }), t5;
    }(t4.value).forEach(function(r3) {
      e25.report({ node: t4, message: "Unexpected '{{matchedTerm}}' comment.", data: { matchedTerm: r3 } });
    });
  }
  var r2 = e25.getSourceCode(), n2 = e25.options[0] || {}, i2 = n2.terms || ["todo", "fixme", "xxx"], a2 = n2.location || "start", o2 = /\bno\x2Dwarning\x2Dcomments\b/, s2 = i2.map(function(e26) {
    var t4, r3 = vO(e26), n3 = "\\b", i3 = /[0-9A-Z_a-z]$/.test(e26) ? "\\b" : "";
    return t4 = "start" === a2 ? "^\\s*" : /^[0-9A-Z_a-z]/.test(e26) ? n3 : "", "start" === a2 ? new RegExp(t4 + r3 + i3, "iu") : new RegExp(t4 + r3 + i3 + "|".concat(n3) + e26 + n3, "iu");
  });
  return { Program: function() {
    r2.getAllComments().filter(function(e26) {
      return "Shebang" !== e26.type;
    }).forEach(t3);
  } };
} };
var bO = { meta: { type: "layout", docs: { description: "disallow whitespace before properties", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-whitespace-before-property" }, fixable: "whitespace", schema: [] }, create: function(e25) {
  function t3(t4, n2, i2) {
    var a2 = t4.computed ? "" : ".";
    e25.report({ node: t4, message: "Unexpected whitespace before property {{propName}}.", data: { propName: r2.getText(t4.property) }, fix: function(e26) {
      return !t4.computed && LA.isDecimalInteger(t4.object) ? null : e26.replaceTextRange([n2.range[1], i2.range[0]], a2);
    } });
  }
  var r2 = e25.getSourceCode();
  return { MemberExpression: function(e26) {
    var n2, i2;
    LA.isTokenOnSameLine(e26.object, e26.property) && (e26.computed ? (n2 = r2.getTokenBefore(e26.property, LA.isOpeningBracketToken), i2 = r2.getTokenBefore(n2)) : (n2 = r2.getFirstToken(e26.property), i2 = r2.getTokenBefore(n2, 1)), r2.isSpaceBetweenTokens(i2, n2) && t3(e26, i2, n2));
  } };
} };
var EO = { enum: ["beside", "below", "any"] };
var CO = { meta: { type: "layout", docs: { description: "enforce the location of single-line statements", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/nonblock-statement-body-position" }, fixable: "whitespace", schema: [EO, { properties: { overrides: { properties: { if: EO, else: EO, while: EO, do: EO, for: EO }, additionalProperties: false } }, additionalProperties: false }] }, create: function(e25) {
  function t3(t4, n2) {
    var i2 = function(t5) {
      return e25.options[1] && e25.options[1].overrides && e25.options[1].overrides[t5] || e25.options[0] || "beside";
    }(n2);
    if ("BlockStatement" !== t4.type && "any" !== i2) {
      var a2 = r2.getTokenBefore(t4);
      a2.loc.end.line === t4.loc.start.line && "below" === i2 ? e25.report({ node: t4, message: "Expected a linebreak before this statement.", fix: function(e26) {
        return e26.insertTextBefore(t4, "\n");
      } }) : a2.loc.end.line !== t4.loc.start.line && "beside" === i2 && e25.report({ node: t4, message: "Expected no linebreak before this statement.", fix: function(e26) {
        return r2.getText().slice(a2.range[1], t4.range[0]).trim() ? null : e26.replaceTextRange([a2.range[1], t4.range[0]], " ");
      } });
    }
  }
  var r2 = e25.getSourceCode();
  return { IfStatement: function(e26) {
    t3(e26.consequent, "if"), e26.alternate && "IfStatement" !== e26.alternate.type && t3(e26.alternate, "else");
  }, WhileStatement: function(e26) {
    return t3(e26.body, "while");
  }, DoWhileStatement: function(e26) {
    return t3(e26.body, "do");
  }, ForStatement: function(e26) {
    return t3(e26.body, "for");
  }, ForInStatement: function(e26) {
    return t3(e26.body, "for");
  }, ForOfStatement: function(e26) {
    return t3(e26.body, "for");
  } };
} };
var SO = { oneOf: [{ enum: ["always", "never"] }, { type: "object", properties: { multiline: { type: "boolean" }, minProperties: { type: "integer", minimum: 0 }, consistent: { type: "boolean" } }, additionalProperties: false, minProperties: 1 }] };
function kO(e25) {
  var t3 = Number.POSITIVE_INFINITY, r2 = false, n2 = t3, i2 = false;
  return e25 ? "always" === e25 ? n2 = 0 : "never" === e25 ? n2 = t3 : (r2 = !!e25.multiline, n2 = e25.minProperties || t3, i2 = !!e25.consistent) : i2 = true, { multiline: r2, minProperties: n2, consistent: i2 };
}
var DO = { meta: { type: "layout", docs: { description: "enforce consistent line breaks inside braces", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/object-curly-newline" }, fixable: "whitespace", schema: [{ oneOf: [SO, { type: "object", properties: { ObjectExpression: SO, ObjectPattern: SO, ImportDeclaration: SO, ExportDeclaration: SO }, additionalProperties: false, minProperties: 1 }] }] }, create: function(e25) {
  function t3(t4) {
    var i2 = n2[t4.type];
    if (("ImportDeclaration" !== t4.type || t4.specifiers.some(function(e26) {
      return "ImportSpecifier" === e26.type;
    })) && ("ExportNamedDeclaration" !== t4.type || t4.specifiers.some(function(e26) {
      return "ExportSpecifier" === e26.type;
    }))) {
      var a2 = r2.getFirstToken(t4, function(e26) {
        return "{" === e26.value;
      }), o2 = t4.typeAnnotation ? r2.getTokenBefore(t4.typeAnnotation) : r2.getLastToken(t4, function(e26) {
        return "}" === e26.value;
      }), s2 = r2.getTokenAfter(a2, { includeComments: true }), u2 = r2.getTokenBefore(o2, { includeComments: true }), c2 = function(e26, t5, r3, n3) {
        var i3;
        return (i3 = "ObjectExpression" === e26.type || "ObjectPattern" === e26.type ? e26.properties : e26.specifiers.filter(function(e27) {
          return "ImportSpecifier" === e27.type || "ExportSpecifier" === e27.type;
        })).length >= t5.minProperties || t5.multiline && 0 < i3.length && r3.loc.start.line !== n3.loc.end.line;
      }(t4, i2, s2, u2), l2 = LA.isCommentToken(s2), p2 = LA.isCommentToken(u2);
      if (s2 = r2.getTokenAfter(a2), u2 = r2.getTokenBefore(o2), c2) LA.isTokenOnSameLine(a2, s2) && e25.report({ message: "Expected a line break after this opening brace.", node: t4, loc: a2.loc.start, fix: function(e26) {
        return l2 ? null : e26.insertTextAfter(a2, "\n");
      } }), LA.isTokenOnSameLine(u2, o2) && e25.report({ message: "Expected a line break before this closing brace.", node: t4, loc: o2.loc.start, fix: function(e26) {
        return p2 ? null : e26.insertTextBefore(o2, "\n");
      } });
      else {
        var f2 = i2.consistent, h2 = !LA.isTokenOnSameLine(a2, s2), d2 = !LA.isTokenOnSameLine(u2, o2);
        (!f2 && h2 || f2 && h2 && !d2) && e25.report({ message: "Unexpected line break after this opening brace.", node: t4, loc: a2.loc.start, fix: function(e26) {
          return l2 ? null : e26.removeRange([a2.range[1], s2.range[0]]);
        } }), (!f2 && d2 || f2 && !h2 && d2) && e25.report({ message: "Unexpected line break before this closing brace.", node: t4, loc: o2.loc.start, fix: function(e26) {
          return p2 ? null : e26.removeRange([u2.range[1], o2.range[0]]);
        } });
      }
    }
  }
  var r2 = e25.getSourceCode(), n2 = function(e26) {
    var t4 = Fy.lodash.overSome([Fy.lodash.isPlainObject, Fy.lodash.isString]);
    if (Fy.lodash.isPlainObject(e26) && Fy.lodash.some(e26, t4)) return { ObjectExpression: kO(e26.ObjectExpression), ObjectPattern: kO(e26.ObjectPattern), ImportDeclaration: kO(e26.ImportDeclaration), ExportNamedDeclaration: kO(e26.ExportDeclaration) };
    var r3 = kO(e26);
    return { ObjectExpression: r3, ObjectPattern: r3, ImportDeclaration: r3, ExportNamedDeclaration: r3 };
  }(e25.options[0]);
  return { ObjectExpression: t3, ObjectPattern: t3, ImportDeclaration: t3, ExportNamedDeclaration: t3 };
} };
var FO = { meta: { type: "layout", docs: { description: "enforce consistent spacing inside braces", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/object-curly-spacing" }, fixable: "whitespace", schema: [{ enum: ["always", "never"] }, { type: "object", properties: { arraysInObjects: { type: "boolean" }, objectsInObjects: { type: "boolean" } }, additionalProperties: false }] }, create: function(e25) {
  function t3(t4) {
    return !!e25.options[1] && e25.options[1][t4] === !u2;
  }
  function r2(t4, r3) {
    var n3 = e25.getSourceCode().getTokenAfter(r3, { includeComments: true });
    e25.report({ node: t4, loc: { start: r3.loc.end, end: n3.loc.start }, message: "There should be no space after '{{token}}'.", data: { token: r3.value }, fix: function(e26) {
      return e26.removeRange([r3.range[1], n3.range[0]]);
    } });
  }
  function n2(t4, r3) {
    var n3 = e25.getSourceCode().getTokenBefore(r3, { includeComments: true });
    e25.report({ node: t4, loc: { start: n3.loc.end, end: r3.loc.start }, message: "There should be no space before '{{token}}'.", data: { token: r3.value }, fix: function(e26) {
      return e26.removeRange([n3.range[1], r3.range[0]]);
    } });
  }
  function i2(t4, r3) {
    e25.report({ node: t4, loc: r3.loc, message: "A space is required after '{{token}}'.", data: { token: r3.value }, fix: function(e26) {
      return e26.insertTextAfter(r3, " ");
    } });
  }
  function a2(t4, r3) {
    e25.report({ node: t4, loc: r3.loc, message: "A space is required before '{{token}}'.", data: { token: r3.value }, fix: function(e26) {
      return e26.insertTextBefore(r3, " ");
    } });
  }
  function o2(e26, t4, o3, s3, u3) {
    if (LA.isTokenOnSameLine(t4, o3)) {
      var p2 = c2.isSpaceBetweenTokens(t4, o3);
      l2.spaced && !p2 && i2(e26, t4), !l2.spaced && p2 && "Line" !== o3.type && r2(e26, t4);
    }
    if (LA.isTokenOnSameLine(s3, u3)) {
      var f2 = (l2.arraysInObjectsException && LA.isClosingBracketToken(s3) || l2.objectsInObjectsException && LA.isClosingBraceToken(s3)) && c2.getNodeByRangeIndex(s3.range[0]).type, h2 = l2.arraysInObjectsException && "ArrayExpression" === f2 || l2.objectsInObjectsException && ("ObjectExpression" === f2 || "ObjectPattern" === f2) ? !l2.spaced : l2.spaced, d2 = c2.isSpaceBetweenTokens(s3, u3);
      h2 && !d2 && a2(e26, u3), !h2 && d2 && n2(e26, u3);
    }
  }
  function s2(e26) {
    if (0 !== e26.properties.length) {
      var t4 = c2.getFirstToken(e26), r3 = function(e27) {
        var t5 = e27.properties[e27.properties.length - 1];
        return c2.getTokenAfter(t5, LA.isClosingBraceToken);
      }(e26);
      o2(e26, t4, c2.getTokenAfter(t4, { includeComments: true }), c2.getTokenBefore(r3, { includeComments: true }), r3);
    }
  }
  var u2 = "always" === e25.options[0], c2 = e25.getSourceCode(), l2 = { spaced: u2, arraysInObjectsException: t3("arraysInObjects"), objectsInObjectsException: t3("objectsInObjects") };
  return { ObjectPattern: s2, ObjectExpression: s2, ImportDeclaration: function(e26) {
    if (0 !== e26.specifiers.length) {
      var t4 = e26.specifiers[0], r3 = e26.specifiers[e26.specifiers.length - 1];
      if ("ImportSpecifier" === r3.type) {
        "ImportSpecifier" !== t4.type && (t4 = e26.specifiers[1]);
        var n3 = c2.getTokenBefore(t4), i3 = c2.getTokenAfter(r3, LA.isNotCommaToken);
        o2(e26, n3, c2.getTokenAfter(n3, { includeComments: true }), c2.getTokenBefore(i3, { includeComments: true }), i3);
      }
    }
  }, ExportNamedDeclaration: function(e26) {
    if (0 !== e26.specifiers.length) {
      var t4 = e26.specifiers[0], r3 = e26.specifiers[e26.specifiers.length - 1], n3 = c2.getTokenBefore(t4), i3 = c2.getTokenAfter(r3, LA.isNotCommaToken);
      o2(e26, n3, c2.getTokenAfter(n3, { includeComments: true }), c2.getTokenBefore(i3, { includeComments: true }), i3);
    }
  } };
} };
var AO = "always";
var wO = "never";
var _O = "methods";
var TO = "properties";
var PO = "consistent";
var IO = "consistent-as-needed";
var BO = { meta: { type: "suggestion", docs: { description: "require or disallow method and property shorthand syntax for object literals", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/object-shorthand" }, fixable: "code", schema: { anyOf: [{ type: "array", items: [{ enum: ["always", "methods", "properties", "never", "consistent", "consistent-as-needed"] }], minItems: 0, maxItems: 1 }, { type: "array", items: [{ enum: ["always", "methods", "properties"] }, { type: "object", properties: { avoidQuotes: { type: "boolean" } }, additionalProperties: false }], minItems: 0, maxItems: 2 }, { type: "array", items: [{ enum: ["always", "methods"] }, { type: "object", properties: { ignoreConstructors: { type: "boolean" }, avoidQuotes: { type: "boolean" }, avoidExplicitReturnArrows: { type: "boolean" } }, additionalProperties: false }], minItems: 0, maxItems: 2 }] } }, create: function(e25) {
  function t3(e26) {
    return "set" !== e26.kind && "get" !== e26.kind && "SpreadElement" !== e26.type && "SpreadProperty" !== e26.type && "ExperimentalSpreadProperty" !== e26.type;
  }
  function r2(e26) {
    return "Literal" === e26.type && "string" == typeof e26.value;
  }
  function n2(e26) {
    return e26.shorthand || e26.method;
  }
  function i2(e26) {
    var t4 = e26.value;
    return "FunctionExpression" === t4.type ? !t4.id : !("Identifier" !== t4.type) && LA.getStaticPropertyName(e26) === t4.name;
  }
  function a2(r3, a3) {
    var o3 = r3.properties.filter(t3);
    if (0 < o3.length) {
      var s3 = o3.filter(n2);
      if (s3.length !== o3.length) {
        if (0 < s3.length) e25.report({ node: r3, message: "Unexpected mix of shorthand and non-shorthand properties." });
        else if (a3) {
          o3.every(i2) && e25.report({ node: r3, message: "Expected shorthand for all properties." });
        }
      }
    }
  }
  function o2() {
    E2.unshift(/* @__PURE__ */ new Set()), e25.getScope().variables.filter(function(e26) {
      return "arguments" === e26.name;
    }).forEach(function(e26) {
      e26.references.map(function(e27) {
        return e27.identifier;
      }).forEach(function(e27) {
        return S3.add(e27);
      });
    });
  }
  function s2() {
    E2.shift();
  }
  function u2() {
    E2[0].forEach(function(e26) {
      return C3.add(e26);
    });
  }
  var c2 = e25.options[0] || AO, l2 = c2 === _O || c2 === AO, p2 = c2 === TO || c2 === AO, f2 = c2 === wO, h2 = c2 === PO, d2 = c2 === IO, m2 = e25.options[1] || {}, g2 = m2.ignoreConstructors, y2 = m2.avoidQuotes, v2 = !!m2.avoidExplicitReturnArrows, x2 = e25.getSourceCode(), b2 = /(?:[\0-#%-\/:-\^`-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/, E2 = [], C3 = /* @__PURE__ */ new WeakSet(), S3 = /* @__PURE__ */ new WeakSet();
  return { Program: o2, FunctionDeclaration: o2, FunctionExpression: o2, "Program:exit": s2, "FunctionDeclaration:exit": s2, "FunctionExpression:exit": s2, ArrowFunctionExpression: function(e26) {
    E2[0].add(e26);
  }, "ArrowFunctionExpression:exit": function(e26) {
    E2[0].delete(e26);
  }, ThisExpression: u2, Super: u2, MetaProperty: function(e26) {
    "new" === e26.meta.name && "target" === e26.property.name && u2();
  }, Identifier: function(e26) {
    S3.has(e26) && u2();
  }, ObjectExpression: function(e26) {
    h2 ? a2(e26, false) : d2 && a2(e26, true);
  }, "Property:exit": function(t4) {
    var n3 = t4.method || t4.shorthand;
    if ("ObjectPattern" !== t4.parent.type && "get" !== t4.kind && "set" !== t4.kind && (!t4.computed || "FunctionExpression" === t4.value.type || "ArrowFunctionExpression" === t4.value.type)) if (n3) if (t4.method && (f2 || y2 && r2(t4.key))) {
      var i3 = f2 ? "Expected longform method syntax." : "Expected longform method syntax for string literal keys.";
      e25.report({ node: t4, message: i3, fix: function(e26) {
        return function(e27, t5) {
          var r3 = t5.computed ? x2.getTokens(t5).find(function(e28) {
            return "[" === e28.value;
          }) : x2.getFirstToken(t5.key), n4 = t5.computed ? x2.getTokensBetween(t5.key, t5.value).find(function(e28) {
            return "]" === e28.value;
          }) : x2.getLastToken(t5.key), i4 = x2.text.slice(r3.range[0], n4.range[1]), a3 = "function";
          return t5.value.async && (a3 = "async ".concat(a3)), t5.value.generator && (a3 = "".concat(a3, "*")), e27.replaceTextRange([t5.range[0], n4.range[1]], "".concat(i4, ": ").concat(a3));
        }(e26, t4);
      } });
    } else f2 && e25.report({ node: t4, message: "Expected longform property syntax.", fix: function(e26) {
      return e26.insertTextAfter(t4.key, ": ".concat(t4.key.name));
    } });
    else if (!l2 || t4.value.id || "FunctionExpression" !== t4.value.type && "ArrowFunctionExpression" !== t4.value.type) {
      if ("Identifier" === t4.value.type && t4.key.name === t4.value.name && p2) e25.report({ node: t4, message: "Expected property shorthand.", fix: function(e26) {
        return e26.replaceText(t4, t4.value.name);
      } });
      else if ("Identifier" === t4.value.type && "Literal" === t4.key.type && t4.key.value === t4.value.name && p2) {
        if (y2) return;
        e25.report({ node: t4, message: "Expected property shorthand.", fix: function(e26) {
          return e26.replaceText(t4, t4.value.name);
        } });
      }
    } else {
      if (g2 && "Identifier" === t4.key.type && function(e26) {
        var t5 = b2.exec(e26);
        if (!t5) return false;
        var r3 = e26.charAt(t5.index);
        return r3 === r3.toUpperCase();
      }(t4.key.name)) return;
      if (y2 && r2(t4.key)) return;
      ("FunctionExpression" === t4.value.type || "ArrowFunctionExpression" === t4.value.type && "BlockStatement" === t4.value.body.type && v2 && !C3.has(t4.value)) && e25.report({ node: t4, message: "Expected method shorthand.", fix: function(e26) {
        return function(e27, t5) {
          var r3 = t5.computed ? x2.getFirstToken(t5, LA.isOpeningBracketToken) : x2.getFirstToken(t5.key), n4 = t5.computed ? x2.getFirstTokenBetween(t5.key, t5.value, LA.isClosingBracketToken) : x2.getLastToken(t5.key), i4 = x2.text.slice(r3.range[0], n4.range[1]), a3 = "";
          if (x2.commentsExistBetween(n4, t5.value)) return null;
          t5.value.async && (a3 += "async "), t5.value.generator && (a3 += "*");
          var o3 = [r3.range[0], t5.range[1]], s3 = a3 + i4;
          if ("FunctionExpression" === t5.value.type) {
            var u3 = x2.getTokens(t5.value).find(function(e28) {
              return "Keyword" === e28.type && "function" === e28.value;
            }), c3 = t5.value.generator ? x2.getTokenAfter(u3) : u3;
            return e27.replaceTextRange(o3, s3 + x2.text.slice(c3.range[1], t5.value.range[1]));
          }
          var l3, p3 = x2.getTokenBefore(t5.value.body, LA.isArrowToken), f3 = x2.text.slice(p3.range[1], t5.value.range[1]), h3 = false;
          if (l3 = 0 === t5.value.params.length ? x2.getFirstToken(t5.value, LA.isOpeningParenToken) : x2.getTokenBefore(t5.value.params[0]), 1 === t5.value.params.length) {
            var d3 = LA.isOpeningParenToken(l3), m3 = l3.range[0] < t5.range[0];
            h3 = !d3 || m3;
          }
          var g3 = h3 ? t5.value.params[0].range[0] : l3.range[0], y3 = x2.getTokenBefore(p3).range[1], v3 = x2.text.slice(g3, y3), b3 = h3 ? "(".concat(v3, ")") : v3;
          return e27.replaceTextRange(o3, s3 + b3 + f3);
        }(e26, t4);
      } });
    }
  } };
} };
var OO = { meta: { type: "suggestion", docs: { description: "enforce variables to be declared either together or separately in functions", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/one-var" }, fixable: "code", schema: [{ oneOf: [{ enum: ["always", "never", "consecutive"] }, { type: "object", properties: { separateRequires: { type: "boolean" }, var: { enum: ["always", "never", "consecutive"] }, let: { enum: ["always", "never", "consecutive"] }, const: { enum: ["always", "never", "consecutive"] } }, additionalProperties: false }, { type: "object", properties: { initialized: { enum: ["always", "never", "consecutive"] }, uninitialized: { enum: ["always", "never", "consecutive"] } }, additionalProperties: false }] }] }, create: function(e25) {
  function t3() {
    v2.push({ let: { initialized: false, uninitialized: false }, const: { initialized: false, uninitialized: false } });
  }
  function r2() {
    y2.push({ initialized: false, uninitialized: false }), t3();
  }
  function n2() {
    v2.pop();
  }
  function a2() {
    y2.pop(), n2();
  }
  function o2(e26) {
    return e26.init && "CallExpression" === e26.init.type && "require" === e26.init.callee.name;
  }
  function s2(e26) {
    for (var t4 = { uninitialized: 0, initialized: 0 }, r3 = 0; r3 < e26.length; r3++) null === e26[r3].init ? t4.uninitialized++ : t4.initialized++;
    return t4;
  }
  function u2(e26, t4) {
    var r3 = s2(t4), n3 = m2[e26] || {}, i2 = function(e27) {
      var t5;
      return "var" === e27 ? t5 = y2[y2.length - 1] : "let" === e27 ? t5 = v2[v2.length - 1].let : "const" == e27 && (t5 = v2[v2.length - 1].const), t5;
    }(e26), a3 = t4.some(o2);
    return !(n3.uninitialized === p2 && n3.initialized === p2 && (i2.uninitialized || i2.initialized) && !a3 || 0 < r3.uninitialized && n3.uninitialized === p2 && i2.uninitialized || 0 < r3.initialized && n3.initialized === p2 && i2.initialized && !a3 || i2.required && a3 || (function(e27, t5, r4) {
      for (var n4 = 0; n4 < t5.length; n4++) null === t5[n4].init ? m2[e27] && m2[e27].uninitialized === p2 && (r4.uninitialized = true) : m2[e27] && m2[e27].initialized === p2 && (m2.separateRequires && o2(t5[n4]) ? r4.required = true : r4.initialized = true);
    }(e26, t4, i2), 0));
  }
  function c2(e26) {
    var t4 = e26[0], r3 = Array.isArray(t4.parent.parent.body) ? t4.parent.parent.body : [], n3 = r3.findIndex(function(e27) {
      return e27.range[0] === t4.parent.range[0];
    }), i2 = r3[n3 - 1];
    return function(e27) {
      var r4 = g2.getTokenBefore(t4), n4 = g2.getTokenBefore(r4), a3 = [];
      return i2 && i2.kind === g2.getText(r4) && (";" === n4.value ? a3.push(e27.replaceText(n4, ",")) : a3.push(e27.insertTextAfter(n4, ",")), a3.push(e27.replaceText(r4, ""))), a3;
    };
  }
  function l2(e26) {
    return function(t4) {
      return e26.declarations.map(function(r3) {
        var n3 = g2.getTokenAfter(r3);
        if (null === n3) return null;
        var i2 = g2.getTokenAfter(n3, { includeComments: true });
        if ("," !== n3.value) return null;
        if (i2.range[0] === n3.range[1]) return t4.replaceText(n3, "; ".concat(e26.kind, " "));
        if (i2.loc.start.line > n3.loc.end.line || "Line" === i2.type || "Block" === i2.type) {
          for (var a3 = i2; "Line" === a3.type || "Block" === a3.type; ) a3 = g2.getTokenAfter(a3, { includeComments: true });
          return t4.replaceTextRange([n3.range[0], a3.range[0]], ";".concat(g2.text.slice(n3.range[1], a3.range[0])).concat(e26.kind, " "));
        }
        return t4.replaceText(n3, "; ".concat(e26.kind));
      }).filter(function(e27) {
        return e27;
      });
    };
  }
  var p2 = "always", f2 = "never", h2 = "consecutive", d2 = e25.options[0] || "always", m2 = {};
  "string" == typeof d2 ? (m2.var = { uninitialized: d2, initialized: d2 }, m2.let = { uninitialized: d2, initialized: d2 }, m2.const = { uninitialized: d2, initialized: d2 }) : "object" == i(d2) && (m2.separateRequires = !!d2.separateRequires, m2.var = { uninitialized: d2.var, initialized: d2.var }, m2.let = { uninitialized: d2.let, initialized: d2.let }, m2.const = { uninitialized: d2.const, initialized: d2.const }, Object.prototype.hasOwnProperty.call(d2, "uninitialized") && (m2.var.uninitialized = d2.uninitialized, m2.let.uninitialized = d2.uninitialized, m2.const.uninitialized = d2.uninitialized), Object.prototype.hasOwnProperty.call(d2, "initialized") && (m2.var.initialized = d2.initialized, m2.let.initialized = d2.initialized, m2.const.initialized = d2.initialized));
  var g2 = e25.getSourceCode(), y2 = [], v2 = [];
  return { Program: r2, FunctionDeclaration: r2, FunctionExpression: r2, ArrowFunctionExpression: r2, BlockStatement: t3, ForStatement: t3, ForInStatement: t3, ForOfStatement: t3, SwitchStatement: t3, VariableDeclaration: function(t4) {
    var r3 = t4.parent, n3 = t4.kind;
    if (m2[n3]) {
      var i2 = t4.declarations, a3 = s2(i2), d3 = i2.some(o2) && !i2.every(o2);
      m2[n3].initialized === p2 && m2.separateRequires && d3 && e25.report({ node: t4, message: "Split requires to be separated into a single block." });
      var g3 = r3.body && 0 < r3.body.length && r3.body.indexOf(t4) || 0;
      if (0 < g3) {
        var y3 = r3.body[g3 - 1], v3 = "VariableDeclaration" === y3.type, x2 = i2.concat(y3.declarations || []);
        if (v3 && y3.kind === n3 && (!x2.some(o2) || x2.every(o2))) {
          var b2 = s2(y3.declarations);
          m2[n3].initialized === h2 && m2[n3].uninitialized === h2 ? e25.report({ node: t4, message: "Combine this with the previous '{{type}}' statement.", data: { type: n3 }, fix: c2(i2) }) : m2[n3].initialized === h2 && 0 < a3.initialized && 0 < b2.initialized ? e25.report({ node: t4, message: "Combine this with the previous '{{type}}' statement with initialized variables.", data: { type: n3 }, fix: c2(i2) }) : m2[n3].uninitialized === h2 && 0 < a3.uninitialized && 0 < b2.uninitialized && e25.report({ node: t4, message: "Combine this with the previous '{{type}}' statement with uninitialized variables.", data: { type: n3 }, fix: c2(i2) });
        }
      }
      if (!u2(n3, i2)) {
        if (m2[n3].initialized === p2 && m2[n3].uninitialized === p2) e25.report({ node: t4, message: "Combine this with the previous '{{type}}' statement.", data: { type: n3 }, fix: c2(i2) });
        else if (m2[n3].initialized === p2 && 0 < a3.initialized && e25.report({ node: t4, message: "Combine this with the previous '{{type}}' statement with initialized variables.", data: { type: n3 }, fix: c2(i2) }), m2[n3].uninitialized === p2 && 0 < a3.uninitialized) {
          if (t4.parent.left === t4 && ("ForInStatement" === t4.parent.type || "ForOfStatement" === t4.parent.type)) return;
          e25.report({ node: t4, message: "Combine this with the previous '{{type}}' statement with uninitialized variables.", data: { type: n3 }, fix: c2(i2) });
        }
      }
      if ("ForStatement" !== r3.type || r3.init !== t4) 1 < a3.uninitialized + a3.initialized && (m2[n3].initialized === f2 && m2[n3].uninitialized === f2 ? e25.report({ node: t4, message: "Split '{{type}}' declarations into multiple statements.", data: { type: n3 }, fix: l2(t4) }) : m2[n3].initialized === f2 && 0 < a3.initialized ? e25.report({ node: t4, message: "Split initialized '{{type}}' declarations into multiple statements.", data: { type: n3 }, fix: l2(t4) }) : m2[n3].uninitialized === f2 && 0 < a3.uninitialized && e25.report({ node: t4, message: "Split uninitialized '{{type}}' declarations into multiple statements.", data: { type: n3 }, fix: l2(t4) }));
    }
  }, "ForStatement:exit": n2, "ForOfStatement:exit": n2, "ForInStatement:exit": n2, "SwitchStatement:exit": n2, "BlockStatement:exit": n2, "Program:exit": a2, "FunctionDeclaration:exit": a2, "FunctionExpression:exit": a2, "ArrowFunctionExpression:exit": a2 };
} };
function LO(e25) {
  return 0 <= ["*", "&", "^", "|"].indexOf(e25);
}
function NO(e25, t3) {
  if (e25.type !== t3.type) return false;
  switch (e25.type) {
    case "Identifier":
      return e25.name === t3.name;
    case "Literal":
      return e25.value === t3.value;
    case "MemberExpression":
      return NO(e25.object, t3.object) && NO(e25.property, t3.property);
    case "ThisExpression":
      return true;
    default:
      return false;
  }
}
function jO(e25) {
  return "Identifier" === e25.type || "MemberExpression" === e25.type && ("Identifier" === e25.object.type || "ThisExpression" === e25.object.type) && (!e25.computed || "Literal" === e25.property.type);
}
var RO = { meta: { type: "suggestion", docs: { description: "require or disallow assignment operator shorthand where possible", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/operator-assignment" }, schema: [{ enum: ["always", "never"] }], fixable: "code", messages: { replaced: "Assignment can be replaced with operator assignment.", unexpected: "Unexpected operator assignment shorthand." } }, create: function(e25) {
  function t3(e26) {
    return r2.getFirstTokenBetween(e26.left, e26.right, function(t4) {
      return t4.value === e26.operator;
    });
  }
  var r2 = e25.getSourceCode();
  return { AssignmentExpression: "never" === e25.options[0] ? function(n2) {
    "=" !== n2.operator && e25.report({ node: n2, messageId: "unexpected", fix: function(e26) {
      if (jO(n2.left)) {
        var i2, a2 = r2.getFirstToken(n2), o2 = t3(n2), s2 = r2.getText().slice(n2.range[0], o2.range[0]), u2 = n2.operator.slice(0, -1);
        if (r2.commentsExistBetween(a2, o2)) return null;
        if (LA.getPrecedence(n2.right) <= LA.getPrecedence({ type: "BinaryExpression", operator: u2 }) && !LA.isParenthesised(r2, n2.right)) i2 = "".concat(r2.text.slice(o2.range[1], n2.right.range[0]), "(").concat(r2.getText(n2.right), ")");
        else {
          var c2 = r2.getFirstToken(n2.right), l2 = "";
          o2.range[1] !== c2.range[0] || LA.canTokensBeAdjacent(u2, c2) || (l2 = " "), i2 = "".concat(l2).concat(r2.text.slice(o2.range[1], n2.range[1]));
        }
        return e26.replaceText(n2, "".concat(s2, "= ").concat(s2).concat(u2).concat(i2));
      }
      return null;
    } });
  } : function(n2) {
    if ("=" === n2.operator && "BinaryExpression" === n2.right.type) {
      var i2 = n2.left, a2 = n2.right, o2 = a2.operator;
      (LO(o2) || function(e26) {
        return 0 <= ["+", "-", "/", "%", "<<", ">>", ">>>", "**"].indexOf(e26);
      }(o2)) && (NO(i2, a2.left) ? e25.report({ node: n2, messageId: "replaced", fix: function(e26) {
        if (jO(i2)) {
          var o3 = t3(n2), s2 = t3(a2), u2 = r2.getText().slice(n2.range[0], o3.range[0]), c2 = r2.getText().slice(s2.range[1], n2.right.range[1]);
          return r2.commentsExistBetween(o3, s2) ? null : e26.replaceText(n2, "".concat(u2).concat(a2.operator, "=").concat(c2));
        }
        return null;
      } }) : NO(i2, a2.right) && LO(o2) && e25.report({ node: n2, messageId: "replaced" }));
    }
  } };
} };
var MO = { meta: { type: "layout", docs: { description: "enforce consistent linebreak style for operators", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/operator-linebreak" }, schema: [{ enum: ["after", "before", "none", null] }, { type: "object", properties: { overrides: { type: "object", properties: { anyOf: { type: "string", enum: ["after", "before", "none", "ignore"] } } } }, additionalProperties: false }], fixable: "code" }, create: function(e25) {
  function t3(t4, r3) {
    var n3 = s2.getTokenAfter(r3, LA.isNotClosingParenToken), a3 = s2.getTokenBefore(n3), u2 = s2.getTokenAfter(n3), c2 = n3.value, l2 = o2[c2], p2 = l2 || i2, f2 = /* @__PURE__ */ function(e26, t5) {
      return function(r4) {
        var n4, i3, a4 = s2.getTokenBefore(e26), o3 = s2.getTokenAfter(e26), u3 = s2.text.slice(a4.range[1], e26.range[0]), c3 = s2.text.slice(e26.range[1], o3.range[0]);
        if (!LA.isTokenOnSameLine(a4, e26) !== !LA.isTokenOnSameLine(e26, o3) && "none" !== t5) {
          if (s2.getTokenBefore(e26, { includeComments: true }) !== a4 && s2.getTokenAfter(e26, { includeComments: true }) !== o3) return null;
          n4 = c3, i3 = u3;
        } else {
          var l3 = LA.createGlobalLinebreakMatcher();
          if (n4 = "before" === t5 || u3.trim() ? u3 : u3.replace(l3, ""), i3 = "after" === t5 || c3.trim() ? c3 : c3.replace(l3, ""), n4 === u3 && i3 === c3) return null;
        }
        return "" === i3 && "Punctuator" === o3.type && "+-".includes(e26.value) && o3.value === e26.value && (i3 += " "), r4.replaceTextRange([a4.range[1], o3.range[0]], n4 + e26.value + i3);
      };
    }(n3, p2);
    LA.isTokenOnSameLine(a3, n3) && LA.isTokenOnSameLine(n3, u2) || ("ignore" === l2 || LA.isTokenOnSameLine(a3, n3) || LA.isTokenOnSameLine(n3, u2) ? "before" === p2 && LA.isTokenOnSameLine(a3, n3) ? e25.report({ node: t4, loc: { line: n3.loc.end.line, column: n3.loc.end.column }, message: "'{{operator}}' should be placed at the beginning of the line.", data: { operator: c2 }, fix: f2 }) : "after" === p2 && LA.isTokenOnSameLine(n3, u2) ? e25.report({ node: t4, loc: { line: n3.loc.end.line, column: n3.loc.end.column }, message: "'{{operator}}' should be placed at the end of the line.", data: { operator: c2 }, fix: f2 }) : "none" === p2 && e25.report({ node: t4, loc: { line: n3.loc.end.line, column: n3.loc.end.column }, message: "There should be no line break before or after '{{operator}}'.", data: { operator: c2 }, fix: f2 }) : e25.report({ node: t4, loc: { line: n3.loc.end.line, column: n3.loc.end.column }, message: "Bad line breaking before and after '{{operator}}'.", data: { operator: c2 }, fix: f2 }));
  }
  function r2(e26) {
    t3(e26, e26.left);
  }
  var n2 = !e25.options[0], i2 = e25.options[0] || "after", a2 = e25.options[1] || {}, o2 = a2.overrides ? Object.assign({}, a2.overrides) : {};
  n2 && !o2["?"] && (o2["?"] = "before"), n2 && !o2[":"] && (o2[":"] = "before");
  var s2 = e25.getSourceCode();
  return { BinaryExpression: r2, LogicalExpression: r2, AssignmentExpression: r2, VariableDeclarator: function(e26) {
    e26.init && t3(e26, e26.id);
  }, ConditionalExpression: function(e26) {
    t3(e26, e26.test), t3(e26, e26.consequent);
  } };
} };
var VO = { meta: { type: "layout", docs: { description: "require or disallow padding within blocks", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/padded-blocks" }, fixable: "whitespace", schema: [{ oneOf: [{ enum: ["always", "never"] }, { type: "object", properties: { blocks: { enum: ["always", "never"] }, switches: { enum: ["always", "never"] }, classes: { enum: ["always", "never"] } }, additionalProperties: false, minProperties: 1 }] }, { type: "object", properties: { allowSingleLineBlocks: { type: "boolean" } } }] }, create: function(e25) {
  function t3(e26) {
    return "Line" === e26.type || "Block" === e26.type;
  }
  function r2(e26, t4) {
    return 2 <= t4.loc.start.line - e26.loc.end.line;
  }
  function n2(e26) {
    var r3, n3 = e26;
    do {
      r3 = n3, n3 = f2.getTokenAfter(n3, { includeComments: true });
    } while (t3(n3) && n3.loc.start.line === r3.loc.end.line);
    return n3;
  }
  function i2(e26) {
    var r3, n3 = e26;
    do {
      r3 = n3, n3 = f2.getTokenBefore(n3, { includeComments: true });
    } while (t3(n3) && n3.loc.end.line === r3.loc.start.line);
    return n3;
  }
  function a2(t4) {
    var a3 = n2(function(e26) {
      return "SwitchStatement" === e26.type ? f2.getTokenBefore(e26.cases[0]) : f2.getFirstToken(e26);
    }(t4)), s3 = f2.getTokenBefore(a3, { includeComments: true }), u3 = i2(f2.getLastToken(t4)), c3 = f2.getTokenAfter(u3, { includeComments: true }), h3 = r2(s3, a3), d2 = r2(u3, c3);
    o2.allowSingleLineBlocks && LA.isTokenOnSameLine(s3, c3) || (function(e26) {
      switch (e26.type) {
        case "BlockStatement":
          return o2.blocks;
        case "SwitchStatement":
          return o2.switches;
        case "ClassBody":
          return o2.classes;
        default:
          throw new Error("unreachable");
      }
    }(t4) ? (!h3 && e25.report({ node: t4, loc: { line: s3.loc.start.line, column: s3.loc.start.column }, fix: function(e26) {
      return e26.insertTextAfter(s3, "\n");
    }, message: l2 }), !d2 && e25.report({ node: t4, loc: { line: c3.loc.end.line, column: c3.loc.end.column - 1 }, fix: function(e26) {
      return e26.insertTextBefore(c3, "\n");
    }, message: l2 })) : (h3 && e25.report({ node: t4, loc: { line: s3.loc.start.line, column: s3.loc.start.column }, fix: function(e26) {
      return e26.replaceTextRange([s3.range[1], a3.range[0] - a3.loc.start.column], "\n");
    }, message: p2 }), d2 && e25.report({ node: t4, loc: { line: c3.loc.end.line, column: c3.loc.end.column - 1 }, message: p2, fix: function(e26) {
      return e26.replaceTextRange([u3.range[1], c3.range[0] - c3.loc.start.column], "\n");
    } })));
  }
  var o2 = {}, s2 = e25.options[0] || "always", u2 = e25.options[1] || {};
  if ("string" == typeof s2) {
    var c2 = "always" === s2;
    o2.blocks = c2, o2.switches = c2, o2.classes = c2;
  } else Object.prototype.hasOwnProperty.call(s2, "blocks") && (o2.blocks = "always" === s2.blocks), Object.prototype.hasOwnProperty.call(s2, "switches") && (o2.switches = "always" === s2.switches), Object.prototype.hasOwnProperty.call(s2, "classes") && (o2.classes = "always" === s2.classes);
  Object.prototype.hasOwnProperty.call(u2, "allowSingleLineBlocks") && (o2.allowSingleLineBlocks = true === u2.allowSingleLineBlocks);
  var l2 = "Block must be padded by blank lines.", p2 = "Block must not be padded by blank lines.", f2 = e25.getSourceCode(), h2 = {};
  return Object.prototype.hasOwnProperty.call(o2, "switches") && (h2.SwitchStatement = function(e26) {
    0 === e26.cases.length || a2(e26);
  }), Object.prototype.hasOwnProperty.call(o2, "blocks") && (h2.BlockStatement = function(e26) {
    0 === e26.body.length || a2(e26);
  }), Object.prototype.hasOwnProperty.call(o2, "classes") && (h2.ClassBody = function(e26) {
    0 === e26.body.length || a2(e26);
  }), h2;
} };
var UO = ("[".concat(Array.from(LA.LINEBREAKS).join(""), "]"), /^([\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*?)[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*([\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*;?)$/);
var qO = /^(?:module[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*\.[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*)?exports(?:[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*\.|[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*\[|$)/;
var WO = /^require\(/;
function $O(e25) {
  return { test: function(t3, r2) {
    return r2.getFirstToken(t3).value === e25;
  } };
}
function GO(e25) {
  return { test: function(t3, r2) {
    return t3.loc.start.line === t3.loc.end.line && r2.getFirstToken(t3).value === e25;
  } };
}
function zO(e25) {
  return { test: function(t3, r2) {
    return t3.loc.start.line !== t3.loc.end.line && r2.getFirstToken(t3).value === e25;
  } };
}
function HO(e25) {
  return { test: function(t3) {
    return t3.type === e25;
  } };
}
function KO(e25) {
  if ("ExpressionStatement" === e25.type) {
    var t3 = e25.expression;
    return "UnaryExpression" === t3.type && (t3 = t3.argument), "CallExpression" === t3.type && LA.isFunction(t3.callee);
  }
  return false;
}
function JO(e25, t3) {
  if ("DoWhileStatement" === t3.type && "BlockStatement" === t3.body.type) return true;
  if (KO(t3)) return true;
  var r2 = e25.getLastToken(t3, LA.isNotSemicolonToken), n2 = r2 && LA.isClosingBraceToken(r2) ? e25.getNodeByRangeIndex(r2.range[0]) : null;
  return !!n2 && ("BlockStatement" === n2.type || "SwitchStatement" === n2.type);
}
function QO(e25, t3) {
  return "ExpressionStatement" === e25.type && ("Program" === e25.parent.type || "BlockStatement" === e25.parent.type && LA.isFunction(e25.parent.parent)) && "Literal" === e25.expression.type && "string" == typeof e25.expression.value && !LA.isParenthesised(t3, e25.expression);
}
function XO(e25, t3) {
  if (QO(e25, t3)) {
    var r2 = true, n2 = false, i2 = void 0;
    try {
      for (var a2, o2 = e25.parent.body[Symbol.iterator](); !(r2 = (a2 = o2.next()).done); r2 = true) {
        var s2 = a2.value;
        if (s2 === e25) break;
        if (!QO(s2, t3)) return false;
      }
    } catch (e26) {
      n2 = true, i2 = e26;
    } finally {
      try {
        r2 || null == o2.return || o2.return();
      } finally {
        if (n2) throw i2;
      }
    }
    return true;
  }
  return false;
}
function YO(e25, t3) {
  var r2 = e25.getLastToken(t3), n2 = e25.getTokenBefore(r2), i2 = e25.getTokenAfter(r2);
  return !!(n2 && i2 && n2.range[0] >= t3.range[0] && LA.isSemicolonToken(r2) && r2.loc.start.line !== n2.loc.end.line && r2.loc.end.line === i2.loc.start.line) ? n2 : r2;
}
function ZO(e25, t3, r2) {
  return t3 + r2;
}
var eL = { any: { verify: function() {
} }, never: { verify: function(e25, t3, r2, n2) {
  0 === n2.length || e25.report({ node: r2, message: "Unexpected blank line before this statement.", fix: function(t4) {
    if (2 <= n2.length) return null;
    var r3 = n2[0][0], i2 = n2[0][1], a2 = r3.range[1], o2 = i2.range[0], s2 = e25.getSourceCode().text.slice(a2, o2).replace(UO, ZO);
    return t4.replaceTextRange([a2, o2], s2);
  } });
} }, always: { verify: function(e25, t3, r2, n2) {
  0 < n2.length || e25.report({ node: r2, message: "Expected blank line before this statement.", fix: function(n3) {
    var i2 = e25.getSourceCode(), a2 = YO(i2, t3), o2 = i2.getFirstTokenBetween(a2, r2, { includeComments: true, filter: function(e26) {
      return !LA.isTokenOnSameLine(a2, e26) || (a2 = e26, false);
    } }) || r2, s2 = LA.isTokenOnSameLine(a2, o2) ? "\n\n" : "\n";
    return n3.insertTextAfter(a2, s2);
  } });
} } };
var tL = { "*": { test: function() {
  return true;
} }, "block-like": { test: function(e25, t3) {
  return JO(t3, e25);
} }, "cjs-export": { test: function(e25, t3) {
  return "ExpressionStatement" === e25.type && "AssignmentExpression" === e25.expression.type && qO.test(t3.getText(e25.expression.left));
} }, "cjs-import": { test: function(e25, t3) {
  return "VariableDeclaration" === e25.type && 0 < e25.declarations.length && !!e25.declarations[0].init && WO.test(t3.getText(e25.declarations[0].init));
} }, directive: { test: XO }, expression: { test: function(e25, t3) {
  return "ExpressionStatement" === e25.type && !XO(e25, t3);
} }, iife: { test: KO }, "multiline-block-like": { test: function(e25, t3) {
  return e25.loc.start.line !== e25.loc.end.line && JO(t3, e25);
} }, "multiline-expression": { test: function(e25, t3) {
  return e25.loc.start.line !== e25.loc.end.line && "ExpressionStatement" === e25.type && !XO(e25, t3);
} }, "multiline-const": zO("const"), "multiline-let": zO("let"), "multiline-var": zO("var"), "singleline-const": GO("const"), "singleline-let": GO("let"), "singleline-var": GO("var"), block: HO("BlockStatement"), empty: HO("EmptyStatement"), function: HO("FunctionDeclaration"), break: $O("break"), case: $O("case"), class: $O("class"), const: $O("const"), continue: $O("continue"), debugger: $O("debugger"), default: $O("default"), do: $O("do"), export: $O("export"), for: $O("for"), if: $O("if"), import: $O("import"), let: $O("let"), return: $O("return"), switch: $O("switch"), throw: $O("throw"), try: $O("try"), var: $O("var"), while: $O("while"), with: $O("with") };
var rL = { meta: { type: "layout", docs: { description: "require or disallow padding lines between statements", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/padding-line-between-statements" }, fixable: "whitespace", schema: { definitions: { paddingType: { enum: Object.keys(eL) }, statementType: { anyOf: [{ enum: Object.keys(tL) }, { type: "array", items: { enum: Object.keys(tL) }, minItems: 1, uniqueItems: true, additionalItems: false }] } }, type: "array", items: { type: "object", properties: { blankLine: { $ref: "#/definitions/paddingType" }, prev: { $ref: "#/definitions/statementType" }, next: { $ref: "#/definitions/statementType" } }, additionalProperties: false, required: ["blankLine", "prev", "next"] }, additionalItems: false } }, create: function(e25) {
  function t3() {
    u2 = { upper: u2, prevNode: null };
  }
  function r2() {
    u2 = u2.upper;
  }
  function n2(e26, t4) {
    for (var r3 = e26; "LabeledStatement" === r3.type; ) r3 = r3.body;
    return Array.isArray(t4) ? t4.some(n2.bind(null, r3)) : tL[t4].test(r3, o2);
  }
  function i2(e26, t4) {
    for (var r3 = s2.length - 1; 0 <= r3; --r3) {
      var i3 = s2[r3];
      if (n2(e26, i3.prev) && n2(t4, i3.next)) return eL[i3.blankLine];
    }
    return eL.any;
  }
  function a2(t4) {
    var r3 = t4.parent.type;
    if (LA.STATEMENT_LIST_PARENTS.has(r3) || "SwitchStatement" === r3) {
      var n3 = u2.prevNode;
      if (n3) {
        var a3 = i2(n3, t4), s3 = function(e26, t5) {
          var r4 = [], n4 = YO(o2, e26);
          if (2 <= t5.loc.start.line - n4.loc.end.line) do {
            var i3 = o2.getTokenAfter(n4, { includeComments: true });
            2 <= i3.loc.start.line - n4.loc.end.line && r4.push([n4, i3]), n4 = i3;
          } while (n4.range[0] < t5.range[0]);
          return r4;
        }(n3, t4);
        a3.verify(e25, n3, t4, s3);
      }
      u2.prevNode = t4;
    }
  }
  var o2 = e25.getSourceCode(), s2 = e25.options || [], u2 = null;
  return { Program: t3, BlockStatement: t3, SwitchStatement: t3, "Program:exit": r2, "BlockStatement:exit": r2, "SwitchStatement:exit": r2, ":statement": a2, SwitchCase: function(e26) {
    a2(e26), t3();
  }, "SwitchCase:exit": r2 };
} };
var nL = { meta: { type: "suggestion", docs: { description: "require using arrow functions for callbacks", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/prefer-arrow-callback" }, schema: [{ type: "object", properties: { allowNamedFunctions: { type: "boolean", default: false }, allowUnboundThis: { type: "boolean", default: true } }, additionalProperties: false }], fixable: "code" }, create: function(e25) {
  function t3() {
    s2.push({ this: false, super: false, meta: false });
  }
  function r2() {
    return s2.pop();
  }
  var n2 = e25.options[0] || {}, i2 = false !== n2.allowUnboundThis, a2 = n2.allowNamedFunctions, o2 = e25.getSourceCode(), s2 = [];
  return { Program: function() {
    s2 = [];
  }, ThisExpression: function() {
    var e26 = s2[s2.length - 1];
    e26 && (e26.this = true);
  }, Super: function() {
    var e26 = s2[s2.length - 1];
    e26 && (e26.super = true);
  }, MetaProperty: function(e26) {
    var t4 = s2[s2.length - 1];
    t4 && function(e27, t5, r3) {
      return e27.meta.name === t5 && e27.property.name === r3;
    }(e26, "new", "target") && (t4.meta = true);
  }, FunctionDeclaration: t3, "FunctionDeclaration:exit": r2, FunctionExpression: t3, "FunctionExpression:exit": function(t4) {
    var n3 = r2();
    if (!(a2 && t4.id && t4.id.name || t4.generator)) {
      var s3 = e25.getDeclaredVariables(t4)[0];
      if (!(function(e26) {
        return e26 && "FunctionName" === e26.defs[0].type;
      }(s3) && 0 < s3.references.length)) {
        var u2 = function(e26) {
          for (var t5 = e26.variables, r3 = 0; r3 < t5.length; ++r3) {
            var n4 = t5[r3];
            if ("arguments" === n4.name) return 0 === n4.identifiers.length ? n4 : null;
          }
          return null;
        }(e25.getScope());
        if (!(u2 && 0 < u2.references.length)) {
          var c2 = function(e26) {
            for (var t5 = { isCallback: false, isLexicalThis: false }, r3 = e26, n4 = e26.parent; r3; ) {
              switch (n4.type) {
                case "LogicalExpression":
                case "ConditionalExpression":
                  break;
                case "MemberExpression":
                  if (n4.object !== r3 || n4.property.computed || "Identifier" !== n4.property.type || "bind" !== n4.property.name || "CallExpression" !== n4.parent.type || n4.parent.callee !== n4) return t5;
                  t5.isLexicalThis = 1 === n4.parent.arguments.length && "ThisExpression" === n4.parent.arguments[0].type, n4 = n4.parent;
                  break;
                case "CallExpression":
                case "NewExpression":
                  return n4.callee !== r3 && (t5.isCallback = true), t5;
                default:
                  return t5;
              }
              r3 = n4, n4 = n4.parent;
            }
            throw new Error("unreachable");
          }(t4);
          !c2.isCallback || i2 && n3.this && !c2.isLexicalThis || n3.super || n3.meta || e25.report({ node: t4, message: "Unexpected function expression.", fix: function(e26) {
            if (!c2.isLexicalThis && n3.this || function(e27) {
              return e27.every(function(e28) {
                return "Identifier" === e28.type;
              }) && e27.length !== new Set(e27.map(function(e28) {
                return e28.name;
              })).size;
            }(t4.params)) return null;
            var r3 = t4.params.length ? o2.getTokenBefore(t4.params[0]) : o2.getTokenBefore(t4.body, 1), i3 = o2.getTokenBefore(t4.body), a3 = t4.async ? "async " : "", s4 = o2.text.slice(r3.range[0], i3.range[1]), u3 = "".concat(a3).concat(s4, " => ").concat(o2.getText(t4.body)), l2 = c2.isLexicalThis ? t4.parent.parent : t4, p2 = "CallExpression" !== l2.parent.type && "ConditionalExpression" !== l2.parent.type ? "(".concat(u3, ")") : u3;
            return e26.replaceText(l2, p2);
          } });
        }
      }
    }
  } };
} };
var iL = /^(?:(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+?Pattern|RestElement|SpreadProperty|ExperimentalRestProperty|Property)$/;
var aL = /^(?:Program|BlockStatement|SwitchCase)$/;
var oL = /^(?:VariableDeclarator|AssignmentExpression)$/;
function sL(e25, t3) {
  if (t3.through.find(function(t4) {
    return t4.resolved && t4.resolved.name === e25;
  })) return true;
  var r2 = LA.getVariableByName(t3, e25);
  return null !== r2 && r2.defs.some(function(e26) {
    return "Parameter" === e26.type;
  });
}
function uL(e25) {
  if (!e25.isWrite()) return null;
  for (var t3 = e25.identifier.parent; iL.test(t3.type); ) t3 = t3.parent;
  return oL.test(t3.type) ? t3 : null;
}
function cL(e25) {
  switch (e25.type) {
    case "ObjectPattern":
      return e25.properties.some(function(e26) {
        return !!e26 && cL(e26.argument || e26.value);
      });
    case "ArrayPattern":
      return e25.elements.some(function(e26) {
        return !!e26 && cL(e26);
      });
    case "AssignmentPattern":
      return cL(e25.left);
    case "MemberExpression":
      return true;
  }
  return false;
}
function lL(e25, t3) {
  if (e25.eslintUsed && "global" === e25.scope.type) return null;
  for (var r2 = null, n2 = false, i2 = e25.references, a2 = 0; a2 < i2.length; ++a2) {
    var o2 = i2[a2];
    if (o2.isWrite()) {
      if (null !== r2 && r2.identifier !== o2.identifier) return null;
      var s2 = uL(o2);
      if (null !== s2 && void 0 !== s2.left) {
        var u2 = s2.left, c2 = false, l2 = false;
        if ("ObjectPattern" === u2.type) c2 = u2.properties.filter(function(e26) {
          return e26.value;
        }).map(function(e26) {
          return e26.value.name;
        }).some(function(t4) {
          return sL(t4, e25.scope);
        }), l2 = cL(u2);
        else if ("ArrayPattern" === u2.type) {
          c2 = u2.elements.map(function(e26) {
            return e26 && e26.name;
          }).some(function(t4) {
            return sL(t4, e25.scope);
          }), l2 = cL(u2);
        }
        if (c2 || l2) return null;
      }
      r2 = o2;
    } else if (o2.isRead() && null === r2) {
      if (t3) return null;
      n2 = true;
    }
  }
  return null !== r2 && r2.from === e25.scope && function(e26) {
    for (var t4 = e26.parent; iL.test(t4.type); ) t4 = t4.parent;
    return "VariableDeclarator" === t4.type || "AssignmentExpression" === t4.type && "ExpressionStatement" === t4.parent.type && aL.test(t4.parent.parent.type);
  }(r2.identifier) ? n2 ? e25.defs[0].name : r2.identifier : null;
}
var pL = { meta: { type: "suggestion", docs: { description: "require `const` declarations for variables that are never reassigned after declared", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/prefer-const" }, fixable: "code", schema: [{ type: "object", properties: { destructuring: { enum: ["any", "all"], default: "any" }, ignoreReadBeforeAssign: { type: "boolean", default: false } }, additionalProperties: false }], messages: { useConst: "'{{name}}' is never reassigned. Use 'const' instead." } }, create: function(e25) {
  function t3(t4) {
    var r3 = t4.filter(Boolean);
    if (t4.length && (i2 || r3.length === t4.length)) {
      var a3 = function e26(t5, r4, n3) {
        return !t5 || n3(t5) ? null : t5.type === r4 ? t5 : e26(t5.parent, r4, n3);
      }(t4[0], "VariableDeclaration", function(e26) {
        return e26.type.endsWith("Statement");
      }), o3 = null === a3;
      if (!o3 && 0 < a3.declarations.length) {
        var l2 = a3.declarations[0];
        if (l2.init) {
          var p2 = l2.init.parent;
          "VariableDeclarator" === p2.type && (p2.id.name !== c2 && (c2 = p2.id.name, s2 = 0), "ObjectPattern" === p2.id.type && p2.init.name !== c2 && (c2 = p2.init.name, s2 = 0), p2.id !== u2 && (u2 = p2.id, s2 = 0));
        }
      }
      var f2 = a3 && ("ForInStatement" === a3.parent.type || "ForOfStatement" === a3.parent.type || a3.declarations.every(function(e26) {
        return e26.init;
      })) && r3.length === t4.length;
      !o3 && a3.declarations && 1 !== a3.declarations.length && a3 && a3.declarations && 1 <= a3.declarations.length && (s2 += r3.length, f2 = f2 && s2 === a3.declarations.length), r3.forEach(function(t5) {
        e25.report({ node: t5, messageId: "useConst", data: t5, fix: f2 ? function(e26) {
          return e26.replaceText(n2.getFirstToken(a3, function(e27) {
            return e27.value === a3.kind;
          }), "const");
        } : null });
      });
    }
  }
  var r2 = e25.options[0] || {}, n2 = e25.getSourceCode(), i2 = "all" !== r2.destructuring, a2 = true === r2.ignoreReadBeforeAssign, o2 = [], s2 = 0, u2 = null, c2 = "";
  return { "Program:exit": function() {
    (function(e26, t4) {
      for (var r3 = /* @__PURE__ */ new Map(), n3 = 0; n3 < e26.length; ++n3) for (var i3 = e26[n3], a3 = i3.references, o3 = lL(i3, t4), s3 = null, u3 = 0; u3 < a3.length; ++u3) {
        var c3 = a3[u3], l2 = c3.identifier;
        if (l2 !== s3) {
          s3 = l2;
          var p2 = uL(c3);
          p2 && (r3.has(p2) ? r3.get(p2).push(o3) : r3.set(p2, [o3]));
        }
      }
      return r3;
    })(o2, a2).forEach(t3);
  }, VariableDeclaration: function(t4) {
    "let" !== t4.kind || function(e26) {
      return "ForStatement" === e26.parent.type && e26.parent.init === e26;
    }(t4) || o2.push.apply(o2, E(e25.getDeclaredVariables(t4)));
  } };
} };
var fL = { meta: { type: "suggestion", docs: { description: "require destructuring from arrays and/or objects", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/prefer-destructuring" }, fixable: "code", schema: [{ oneOf: [{ type: "object", properties: { VariableDeclarator: { type: "object", properties: { array: { type: "boolean" }, object: { type: "boolean" } }, additionalProperties: false }, AssignmentExpression: { type: "object", properties: { array: { type: "boolean" }, object: { type: "boolean" } }, additionalProperties: false } }, additionalProperties: false }, { type: "object", properties: { array: { type: "boolean" }, object: { type: "boolean" } }, additionalProperties: false }] }, { type: "object", properties: { enforceForRenamedProperties: { type: "boolean" } }, additionalProperties: false }] }, create: function(e25) {
  function t3(e26, t4) {
    return s2 && s2[e26] && s2[e26][t4];
  }
  function r2(t4, r3, n3) {
    e25.report({ node: t4, message: "Use {{type}} destructuring.", data: { type: r3 }, fix: n3 });
  }
  function n2(t4, r3) {
    var n3 = r3.init, i3 = e25.getSourceCode();
    return t4.replaceText(r3, "{".concat(n3.property.name, "} = ").concat(i3.getText(n3.object)));
  }
  function i2(e26, i3, a3) {
    if ("MemberExpression" === i3.type && "Super" !== i3.object.type) {
      if (function(e27) {
        return Number.isInteger(e27.property.value);
      }(i3)) return void (t3(a3.type, "array") && r2(a3, "array", null));
      var s3 = function(e27) {
        return "VariableDeclarator" === e27.type && "Identifier" === e27.id.type && "MemberExpression" === e27.init.type && e27.id.name === e27.init.property.name;
      }(a3) ? function(e27) {
        return n2(e27, a3);
      } : null;
      if (t3(a3.type, "object") && o2) return void r2(a3, "object", s3);
      if (t3(a3.type, "object")) {
        var u2 = i3.property;
        ("Literal" !== u2.type || e26.name !== u2.value) && ("Identifier" !== u2.type || e26.name !== u2.name || i3.computed) || r2(a3, "object", s3);
      }
    }
  }
  var a2 = e25.options[0], o2 = e25.options[1] && e25.options[1].enforceForRenamedProperties, s2 = { VariableDeclarator: { array: true, object: true }, AssignmentExpression: { array: true, object: true } };
  return a2 && (s2 = void 0 !== a2.array || void 0 !== a2.object ? { VariableDeclarator: a2, AssignmentExpression: a2 } : a2), { VariableDeclarator: function(e26) {
    e26.init && "MemberExpression" === e26.init.type && i2(e26.id, e26.init, e26);
  }, AssignmentExpression: function(e26) {
    "=" === e26.operator && i2(e26.left, e26.right, e26);
  } };
} };
var hL = Fy.require$$0;
var dL = hL.CALL;
var mL = hL.ReferenceTracker;
var gL = LA.getPrecedence({ type: "BinaryExpression", operator: "**" });
function yL(e25, t3) {
  return t3 ? "(".concat(e25, ")") : e25;
}
var vL = { meta: { type: "suggestion", docs: { description: "disallow the use of `Math.pow` in favor of the `**` operator", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/prefer-exponentiation-operator" }, schema: [], fixable: "code", messages: { useExponentiation: "Use the '**' operator instead of 'Math.pow'." } }, create: function(e25) {
  function t3(t4) {
    e25.report({ node: t4, messageId: "useExponentiation", fix: function(e26) {
      if (2 !== t4.arguments.length || t4.arguments.some(function(e27) {
        return "SpreadElement" === e27.type;
      }) || 0 < r2.getCommentsInside(t4).length) return null;
      var n2 = t4.arguments[0], i2 = t4.arguments[1], a2 = r2.getText(n2), o2 = r2.getText(i2), s2 = function(e27) {
        return LA.getPrecedence(e27) <= gL || "UnaryExpression" === e27.type;
      }(n2), u2 = function(e27) {
        return LA.getPrecedence(e27) < gL;
      }(i2), c2 = function(e27, t5) {
        var r3 = e27.parent;
        return ("ClassDeclaration" === r3.type || r3.type.endsWith("Expression") && LA.getPrecedence(r3) >= gL && ("BinaryExpression" !== r3.type || "**" !== r3.operator || r3.right !== e27) && !(("CallExpression" === r3.type || "NewExpression" === r3.type) && r3.arguments.includes(e27)) && !("MemberExpression" === r3.type && r3.computed && r3.property === e27) && "ArrayExpression" !== r3.type) && !LA.isParenthesised(t5, e27);
      }(t4, r2), l2 = "", p2 = "";
      if (!c2) {
        if (!s2) {
          var f2 = r2.getFirstToken(n2), h2 = r2.getTokenBefore(t4);
          h2 && h2.range[1] === t4.range[0] && !LA.canTokensBeAdjacent(h2, f2) && (l2 = " ");
        }
        if (!u2) {
          var d2 = r2.getLastToken(i2), m2 = r2.getTokenAfter(t4);
          m2 && t4.range[1] === m2.range[0] && !LA.canTokensBeAdjacent(d2, m2) && (p2 = " ");
        }
      }
      var g2 = yL(a2, s2), y2 = yL(o2, u2), v2 = yL("".concat(g2, "**").concat(y2), c2);
      return e26.replaceText(t4, "".concat(l2).concat(v2).concat(p2));
    } });
  }
  var r2 = e25.getSourceCode();
  return { Program: function() {
    var r3 = e25.getScope(), n2 = new mL(r3), i2 = { Math: { pow: u({}, dL, true) } }, a2 = true, o2 = false, s2 = void 0;
    try {
      for (var c2, l2 = n2.iterateGlobalReferences(i2)[Symbol.iterator](); !(a2 = (c2 = l2.next()).done); a2 = true) {
        t3(c2.value.node);
      }
    } catch (e26) {
      o2 = true, s2 = e26;
    } finally {
      try {
        a2 || null == l2.return || l2.return();
      } finally {
        if (o2) throw s2;
      }
    }
  } };
} };
var xL = Fy.require$$0;
var bL = xL.CALL;
var EL = xL.CONSTRUCT;
var CL = xL.ReferenceTracker;
var SL = xL.getStringIfConstant;
var kL = new PA.RegExpParser();
var DL = { meta: { type: "suggestion", docs: { description: "enforce using named capture group in regular expression", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/prefer-named-capture-group" }, schema: [], messages: { required: "Capture group '{{group}}' should be converted to a named or non-capturing group." } }, create: function(e25) {
  function t3(t4, r2, n2) {
    var i2;
    try {
      i2 = kL.parsePattern(t4, 0, t4.length, n2);
    } catch (e26) {
      return;
    }
    PA.visitRegExpAST(i2, { onCapturingGroupEnter: function(t5) {
      t5.name || e25.report({ node: r2, messageId: "required", data: { group: t5.raw } });
    } });
  }
  return { Literal: function(e26) {
    e26.regex && t3(e26.regex.pattern, e26, e26.regex.flags.includes("u"));
  }, Program: function() {
    var r2, n2 = e25.getScope(), i2 = new CL(n2), a2 = { RegExp: (r2 = {}, u(r2, bL, true), u(r2, EL, true), r2) }, o2 = true, s2 = false, c2 = void 0;
    try {
      for (var l2, p2 = i2.iterateGlobalReferences(a2)[Symbol.iterator](); !(o2 = (l2 = p2.next()).done); o2 = true) {
        var f2 = l2.value.node, h2 = SL(f2.arguments[0]), d2 = SL(f2.arguments[1]);
        h2 && t3(h2, f2, d2 && d2.includes("u"));
      }
    } catch (e26) {
      s2 = true, c2 = e26;
    } finally {
      try {
        o2 || null == p2.return || p2.return();
      } finally {
        if (s2) throw c2;
      }
    }
  } };
} };
var FL = { meta: { type: "suggestion", docs: { description: "disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/prefer-numeric-literals" }, schema: [], fixable: "code" }, create: function(e25) {
  var t3 = e25.getSourceCode(), r2 = { 2: "binary", 8: "octal", 16: "hexadecimal" }, n2 = { 2: "0b", 8: "0o", 16: "0x" };
  return { CallExpression: function(i2) {
    if (2 === i2.arguments.length) {
      var a2 = r2[i2.arguments[1].value];
      (function(e26) {
        switch (e26.type) {
          case "Identifier":
            return "parseInt" === e26.name;
          case "MemberExpression":
            return "Identifier" === e26.object.type && "Number" === e26.object.name && "Identifier" === e26.property.type && "parseInt" === e26.property.name;
        }
        return false;
      })(i2.callee) && a2 && "Literal" === i2.arguments[0].type && e25.report({ node: i2, message: "Use {{radixName}} literals instead of {{functionName}}().", data: { radixName: a2, functionName: t3.getText(i2.callee) }, fix: function(e26) {
        if (t3.getCommentsInside(i2).length) return null;
        var r3 = "".concat(n2[i2.arguments[1].value]).concat(i2.arguments[0].value);
        if (+r3 !== parseInt(i2.arguments[0].value, i2.arguments[1].value)) return null;
        var a3 = t3.getTokenBefore(i2), o2 = t3.getTokenAfter(i2), s2 = "", u2 = "";
        return a3 && a3.range[1] === i2.range[0] && !LA.canTokensBeAdjacent(a3, r3) && (s2 = " "), o2 && i2.range[1] === o2.range[0] && !LA.canTokensBeAdjacent(r3, o2) && (u2 = " "), e26.replaceText(i2, "".concat(s2).concat(r3).concat(u2));
      } });
    }
  } };
} };
var AL = Fy.require$$0;
var wL = AL.CALL;
var _L = AL.ReferenceTracker;
var TL = LA.isCommaToken;
var PL = LA.isOpeningParenToken;
var IL = LA.isClosingParenToken;
var BL = LA.isParenthesised;
var OL = /[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]/;
function LL(e25) {
  return e25.arguments.some(function(e26) {
    return "SpreadElement" === e26.type;
  });
}
function NL(e25, t3) {
  var r2 = e25.parent;
  switch (r2.type) {
    case "VariableDeclarator":
    case "ArrayExpression":
    case "ReturnStatement":
    case "CallExpression":
    case "Property":
      return false;
    case "AssignmentExpression":
      return r2.left === e25 && !BL(t3, e25);
    default:
      return !BL(t3, e25);
  }
}
function jL(e25, t3) {
  switch (e25.type) {
    case "AssignmentExpression":
    case "ArrowFunctionExpression":
    case "ConditionalExpression":
      return !BL(t3, e25);
    default:
      return false;
  }
}
function RL(e25, t3, r2) {
  for (var n2 = [r2.getFirstToken(e25), r2.getLastToken(e25)], i2 = r2.getTokenBefore(e25), a2 = r2.getTokenAfter(e25); i2 && a2 && i2.range[0] > t3.range[0] && PL(i2) && IL(a2); ) n2.push(i2, a2), i2 = r2.getTokenBefore(i2), a2 = r2.getTokenAfter(a2);
  return n2.sort(function(e26, t4) {
    return e26.range[0] - t4.range[0];
  });
}
function ML(e25, t3) {
  var r2 = t3.text, n2 = e25.range[0], i2 = t3.getTokenBefore(e25, { includeComments: true });
  if (i2 && "Line" === i2.type) return n2;
  for (; OL.test(r2[n2 - 1] || ""); ) n2 -= 1;
  return n2;
}
function VL(e25, t3) {
  for (var r2 = t3.text, n2 = e25.range[1]; OL.test(r2[n2] || ""); ) n2 += 1;
  return n2;
}
function UL(e25, t3) {
  return regeneratorRuntime.mark(function r2(n2) {
    var i2, a2, o2, s2, u2, c2, l2, p2, f2, h2, d2, m2, g2, y2, v2, x2, b2, E2, C3, S3, k2;
    return regeneratorRuntime.wrap(function(r3) {
      for (; ; ) switch (r3.prev = r3.next) {
        case 0:
          return i2 = t3.getTokenAfter(e25.callee, PL), a2 = t3.getLastToken(e25), r3.next = 3, n2.remove(e25.callee);
        case 3:
          if (!NL(e25, t3)) {
            r3.next = 10;
            break;
          }
          return r3.next = 6, n2.replaceText(i2, "({");
        case 6:
          return r3.next = 8, n2.replaceText(a2, "})");
        case 8:
          r3.next = 14;
          break;
        case 10:
          return r3.next = 12, n2.replaceText(i2, "{");
        case 12:
          return r3.next = 14, n2.replaceText(a2, "}");
        case 14:
          o2 = true, s2 = false, u2 = void 0, r3.prev = 17, c2 = e25.arguments[Symbol.iterator]();
        case 19:
          if (o2 = (l2 = c2.next()).done) {
            r3.next = 73;
            break;
          }
          if (p2 = l2.value, f2 = RL(p2, i2, t3), h2 = f2.shift(), d2 = f2.pop(), "ObjectExpression" !== p2.type) {
            r3.next = 61;
            break;
          }
          m2 = t3.getLastToken(p2, 1), g2 = t3.getTokenAfter(d2), y2 = true, v2 = false, x2 = void 0, r3.prev = 27, b2 = f2[Symbol.iterator]();
        case 29:
          if (y2 = (E2 = b2.next()).done) {
            r3.next = 36;
            break;
          }
          return C3 = E2.value, r3.next = 33, n2.remove(C3);
        case 33:
          y2 = true, r3.next = 29;
          break;
        case 36:
          r3.next = 42;
          break;
        case 38:
          r3.prev = 38, r3.t0 = r3.catch(27), v2 = true, x2 = r3.t0;
        case 42:
          r3.prev = 42, r3.prev = 43, y2 || null == b2.return || b2.return();
        case 45:
          if (r3.prev = 45, !v2) {
            r3.next = 48;
            break;
          }
          throw x2;
        case 48:
          return r3.finish(45);
        case 49:
          return r3.finish(42);
        case 50:
          return S3 = [h2.range[0], VL(h2, t3)], k2 = [Math.max(ML(d2, t3), S3[1]), d2.range[1]], r3.next = 53, n2.removeRange(S3);
        case 53:
          return r3.next = 55, n2.removeRange(k2);
        case 55:
          if (r3.t1 = (0 === p2.properties.length || TL(m2)) && TL(g2), !r3.t1) {
            r3.next = 59;
            break;
          }
          return r3.next = 59, n2.remove(g2);
        case 59:
          r3.next = 70;
          break;
        case 61:
          if (!jL(p2, t3)) {
            r3.next = 68;
            break;
          }
          return r3.next = 64, n2.insertTextBefore(h2, "...(");
        case 64:
          return r3.next = 66, n2.insertTextAfter(d2, ")");
        case 66:
          r3.next = 70;
          break;
        case 68:
          return r3.next = 70, n2.insertTextBefore(h2, "...");
        case 70:
          o2 = true, r3.next = 19;
          break;
        case 73:
          r3.next = 79;
          break;
        case 75:
          r3.prev = 75, r3.t2 = r3.catch(17), s2 = true, u2 = r3.t2;
        case 79:
          r3.prev = 79, r3.prev = 80, o2 || null == c2.return || c2.return();
        case 82:
          if (r3.prev = 82, !s2) {
            r3.next = 85;
            break;
          }
          throw u2;
        case 85:
          return r3.finish(82);
        case 86:
          return r3.finish(79);
        case 87:
        case "end":
          return r3.stop();
      }
    }, r2, null, [[17, 75, 79, 87], [27, 38, 42, 50], [43, , 45, 49], [80, , 82, 86]]);
  });
}
var qL = { meta: { type: "suggestion", docs: { description: "disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead.", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/prefer-object-spread" }, schema: [], fixable: "code", messages: { useSpreadMessage: "Use an object spread instead of `Object.assign` eg: `{ ...foo }`.", useLiteralMessage: "Use an object literal instead of `Object.assign`. eg: `{ foo: bar }`." } }, create: function(e25) {
  var t3 = e25.getSourceCode();
  return { Program: function() {
    var r2 = e25.getScope(), n2 = new _L(r2), i2 = { Object: { assign: u({}, wL, true) } }, a2 = true, o2 = false, s2 = void 0;
    try {
      for (var c2, l2 = n2.iterateGlobalReferences(i2)[Symbol.iterator](); !(a2 = (c2 = l2.next()).done); a2 = true) {
        var p2 = c2.value.node;
        if (1 <= p2.arguments.length && "ObjectExpression" === p2.arguments[0].type && !LL(p2)) {
          var f2 = 1 === p2.arguments.length ? "useLiteralMessage" : "useSpreadMessage", h2 = UL(p2, t3);
          e25.report({ node: p2, messageId: f2, fix: h2 });
        }
      }
    } catch (e26) {
      o2 = true, s2 = e26;
    } finally {
      try {
        a2 || null == l2.return || l2.return();
      } finally {
        if (o2) throw s2;
      }
    }
  } };
} };
var WL = { meta: { type: "suggestion", docs: { description: "require using Error objects as Promise rejection reasons", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/prefer-promise-reject-errors" }, fixable: null, schema: [{ type: "object", properties: { allowEmptyReject: { type: "boolean", default: false } }, additionalProperties: false }] }, create: function(e25) {
  function t3(t4) {
    (t4.arguments.length || !r2) && (t4.arguments.length && LA.couldBeError(t4.arguments[0]) && ("Identifier" !== t4.arguments[0].type || "undefined" !== t4.arguments[0].name) || e25.report({ node: t4, message: "Expected the Promise rejection reason to be an Error." }));
  }
  var r2 = e25.options.length && e25.options[0].allowEmptyReject;
  return { CallExpression: function(e26) {
    (function(e27) {
      return "MemberExpression" === e27.callee.type && "Identifier" === e27.callee.object.type && "Promise" === e27.callee.object.name && "Identifier" === e27.callee.property.type && "reject" === e27.callee.property.name;
    })(e26) && t3(e26);
  }, "NewExpression:exit": function(r3) {
    "Identifier" === r3.callee.type && "Promise" === r3.callee.name && r3.arguments.length && LA.isFunction(r3.arguments[0]) && 1 < r3.arguments[0].params.length && "Identifier" === r3.arguments[0].params[1].type && e25.getDeclaredVariables(r3.arguments[0]).find(function(e26) {
      return e26.name === r3.arguments[0].params[1].name;
    }).references.filter(function(e26) {
      return e26.isRead();
    }).filter(function(e26) {
      return "CallExpression" === e26.identifier.parent.type && e26.identifier === e26.identifier.parent.callee;
    }).forEach(function(e26) {
      return t3(e26.identifier.parent);
    });
  } };
} };
var $L = { meta: { type: "suggestion", docs: { description: "require `Reflect` methods where applicable", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/prefer-reflect" }, deprecated: true, replacedBy: [], schema: [{ type: "object", properties: { exceptions: { type: "array", items: { enum: ["apply", "call", "delete", "defineProperty", "getOwnPropertyDescriptor", "getPrototypeOf", "setPrototypeOf", "isExtensible", "getOwnPropertyNames", "preventExtensions"] }, uniqueItems: true } }, additionalProperties: false }] }, create: function(e25) {
  function t3(t4, r3, n3) {
    e25.report({ node: t4, message: "Avoid using {{existing}}, instead use {{substitute}}.", data: { existing: r3, substitute: n3 } });
  }
  var r2 = { apply: "Function.prototype.apply", call: "Function.prototype.call", defineProperty: "Object.defineProperty", getOwnPropertyDescriptor: "Object.getOwnPropertyDescriptor", getPrototypeOf: "Object.getPrototypeOf", setPrototypeOf: "Object.setPrototypeOf", isExtensible: "Object.isExtensible", getOwnPropertyNames: "Object.getOwnPropertyNames", preventExtensions: "Object.preventExtensions" }, n2 = { apply: "Reflect.apply", call: "Reflect.apply", defineProperty: "Reflect.defineProperty", getOwnPropertyDescriptor: "Reflect.getOwnPropertyDescriptor", getPrototypeOf: "Reflect.getPrototypeOf", setPrototypeOf: "Reflect.setPrototypeOf", isExtensible: "Reflect.isExtensible", getOwnPropertyNames: "Reflect.getOwnPropertyNames", preventExtensions: "Reflect.preventExtensions" }, i2 = (e25.options[0] || {}).exceptions || [];
  return { CallExpression: function(e26) {
    var a2 = (e26.callee.property || {}).name, o2 = "Reflect" === (e26.callee.object || {}).name, s2 = Object.prototype.hasOwnProperty.call(n2, a2), u2 = -1 !== i2.indexOf(a2);
    !s2 || o2 || u2 || t3(e26, r2[a2], n2[a2]);
  }, UnaryExpression: function(e26) {
    var r3 = "delete" === e26.operator, n3 = "Identifier" === e26.argument.type, a2 = -1 !== i2.indexOf("delete");
    !r3 || n3 || a2 || t3(e26, "the delete keyword", "Reflect.deleteProperty");
  } };
} };
var GL = Fy.require$$0;
var zL = GL.CALL;
var HL = GL.CONSTRUCT;
var KL = GL.ReferenceTracker;
var JL = GL.findVariable;
function QL(e25) {
  return "TemplateLiteral" === e25.type && 0 === e25.expressions.length;
}
var XL = { meta: { type: "suggestion", docs: { description: "disallow use of the `RegExp` constructor in favor of regular expression literals", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/prefer-regex-literals" }, schema: [], messages: { unexpectedRegExp: "Use a regular expression literal instead of the 'RegExp' constructor." } }, create: function(e25) {
  function t3(t4) {
    var r3 = e25.getScope(), n2 = JL(r3, t4);
    return null !== n2 && "global" === n2.scope.type && 0 === n2.defs.length;
  }
  function r2(e26) {
    return function(e27) {
      return "Literal" === e27.type && "string" == typeof e27.value;
    }(e26) || QL(e26) || function(e27) {
      return "TaggedTemplateExpression" === e27.type && "MemberExpression" === e27.tag.type && "Identifier" === e27.tag.object.type && "String" === e27.tag.object.name && t3(e27.tag.object) && "raw" === LA.getStaticPropertyName(e27.tag) && QL(e27.quasi);
    }(e26);
  }
  return { Program: function() {
    var t4, n2 = e25.getScope(), i2 = new KL(n2), a2 = { RegExp: (t4 = {}, u(t4, zL, true), u(t4, HL, true), t4) }, o2 = true, s2 = false, c2 = void 0;
    try {
      for (var l2, p2 = i2.iterateGlobalReferences(a2)[Symbol.iterator](); !(o2 = (l2 = p2.next()).done); o2 = true) {
        var f2 = l2.value.node, h2 = f2.arguments;
        (1 === h2.length || 2 === h2.length) && h2.every(r2) && e25.report({ node: f2, messageId: "unexpectedRegExp" });
      }
    } catch (e26) {
      s2 = true, c2 = e26;
    } finally {
      try {
        o2 || null == p2.return || p2.return();
      } finally {
        if (s2) throw c2;
      }
    }
  } };
} };
function YL(e25) {
  var t3 = e25.identifier, r2 = t3.parent;
  return "MemberExpression" !== r2.type || r2.object !== t3 || r2.computed;
}
var ZL = { meta: { type: "suggestion", docs: { description: "require rest parameters instead of `arguments`", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/prefer-rest-params" }, schema: [] }, create: function(e25) {
  function t3(t4) {
    e25.report({ node: t4.identifier, loc: t4.identifier.loc, message: "Use the rest parameters instead of 'arguments'." });
  }
  function r2() {
    var r3 = function(e26) {
      for (var t4 = e26.variables, r4 = 0; r4 < t4.length; ++r4) {
        var n2 = t4[r4];
        if ("arguments" === n2.name) return 0 === n2.identifiers.length ? n2 : null;
      }
      return null;
    }(e25.getScope());
    r3 && r3.references.filter(YL).forEach(t3);
  }
  return { "FunctionDeclaration:exit": r2, "FunctionExpression:exit": r2 };
} };
var eN = { meta: { type: "suggestion", docs: { description: "require spread operators instead of `.apply()`", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/prefer-spread" }, schema: [], fixable: null }, create: function(e25) {
  var t3 = e25.getSourceCode();
  return { CallExpression: function(r2) {
    if (function(e26) {
      return "MemberExpression" === e26.callee.type && "Identifier" === e26.callee.property.type && "apply" === e26.callee.property.name && false === e26.callee.computed && 2 === e26.arguments.length && "ArrayExpression" !== e26.arguments[1].type && "SpreadElement" !== e26.arguments[1].type;
    }(r2)) {
      var n2 = r2.callee.object;
      (function(e26, t4, r3) {
        return e26 ? LA.equalTokens(e26, t4, r3) : LA.isNullOrUndefined(t4);
      })("MemberExpression" === n2.type ? n2.object : null, r2.arguments[0], t3) && e25.report({ node: r2, message: "Use the spread operator instead of '.apply()'." });
    }
  } };
} };
function tN(e25) {
  return "BinaryExpression" === e25.type && "+" === e25.operator;
}
function rN(e25) {
  for (var t3 = e25; tN(t3.parent); ) t3 = t3.parent;
  return t3;
}
function nN(e25) {
  return tN(e25) ? nN(e25.left) || nN(e25.right) : function(e26) {
    return !!("Literal" === e26.type && "string" == typeof e26.value) && LA.hasOctalEscapeSequence(e26.raw);
  }(e25);
}
function iN(e25) {
  return tN(e25) ? iN(e25.right) || iN(e25.left) : !LA.isStringLiteral(e25);
}
function aN(e25) {
  return "BinaryExpression" === e25.type ? aN(e25.left) : "TemplateLiteral" === e25.type ? e25.expressions.length && e25.quasis.length && e25.quasis[0].range[0] === e25.quasis[0].range[1] : "Literal" !== e25.type || "string" != typeof e25.value;
}
var oN = { meta: { type: "suggestion", docs: { description: "require template literals instead of string concatenation", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/prefer-template" }, schema: [], fixable: "code" }, create: function(e25) {
  function t3(e26, t4) {
    var r3 = [e26].concat(i2.getTokensBetween(e26, t4)).concat(t4), n3 = i2.getText();
    return r3.slice(0, -1).reduce(function(e27, t5, i3) {
      return e27 + n3.slice(t5.range[1], r3[i3 + 1].range[0]);
    }, "");
  }
  function r2(e26, n3, a3) {
    if ("Literal" === e26.type && "string" == typeof e26.value) return "`".concat(e26.raw.slice(1, -1).replace(/\\*(\$\{|`)/g, function(e27) {
      return e27.lastIndexOf("\\") % 2 ? "\\".concat(e27) : e27;
    }).replace(new RegExp("\\\\".concat(e26.raw[0]), "gu"), e26.raw[0]), "`");
    if ("TemplateLiteral" === e26.type) return i2.getText(e26);
    if (tN(e26) && function e27(t4) {
      return tN(t4) ? e27(t4.right) || e27(t4.left) : LA.isStringLiteral(t4);
    }(e26) && iN(e26)) {
      var o2 = i2.getFirstTokenBetween(e26.left, e26.right, function(e27) {
        return "+" === e27.value;
      }), s2 = t3(e26.left, o2), u2 = t3(o2, e26.right), c2 = function(e27) {
        return "BinaryExpression" === e27.type ? aN(e27.right) : "TemplateLiteral" === e27.type ? e27.expressions.length && e27.quasis.length && e27.quasis[e27.quasis.length - 1].range[0] === e27.quasis[e27.quasis.length - 1].range[1] : "Literal" !== e27.type || "string" != typeof e27.value;
      }(e26.left), l2 = aN(e26.right);
      return c2 ? r2(e26.left, n3, s2 + u2).slice(0, -1) + r2(e26.right, null, a3).slice(1) : l2 ? r2(e26.left, n3, null).slice(0, -1) + r2(e26.right, s2 + u2, a3).slice(1) : "".concat(r2(e26.left, n3, null)).concat(s2, "+").concat(u2).concat(r2(e26.right, a3, null));
    }
    return "`${".concat(n3 || "").concat(i2.getText(e26)).concat(a3 || "", "}`");
  }
  function n2(t4) {
    if (LA.isStringLiteral(t4) && tN(t4.parent)) {
      var n3 = rN(t4.parent);
      a2[n3.range[0]] || (a2[n3.range[0]] = true, iN(n3) && e25.report({ node: n3, message: "Unexpected string concatenation.", fix: function(e26) {
        return function(e27, t5) {
          var n4 = rN(t5.parent);
          return nN(n4) ? null : e27.replaceText(n4, r2(n4, null, null));
        }(e26, t4);
      } }));
    }
  }
  var i2 = e25.getSourceCode(), a2 = /* @__PURE__ */ Object.create(null);
  return { Program: function() {
    a2 = /* @__PURE__ */ Object.create(null);
  }, Literal: n2, TemplateLiteral: n2 };
} };
var sN = { meta: { type: "suggestion", docs: { description: "require quotes around object literal property names", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/quote-props" }, schema: { anyOf: [{ type: "array", items: [{ enum: ["always", "as-needed", "consistent", "consistent-as-needed"] }], minItems: 0, maxItems: 1 }, { type: "array", items: [{ enum: ["always", "as-needed", "consistent", "consistent-as-needed"] }, { type: "object", properties: { keywords: { type: "boolean" }, unnecessary: { type: "boolean" }, numbers: { type: "boolean" } }, additionalProperties: false }], minItems: 0, maxItems: 2 }] }, fixable: "code" }, create: function(e25) {
  function t3(e26) {
    return 0 <= Aw.indexOf(e26);
  }
  function r2(e26, t4, r3) {
    return 1 === t4.length && 0 === t4[0].start && t4[0].end === e26.length && (0 <= ["Identifier", "Keyword", "Null", "Boolean"].indexOf(t4[0].type) || "Numeric" === t4[0].type && !r3 && +t4[0].value + "" === t4[0].value);
  }
  function n2(e26) {
    return "Identifier" === e26.type ? e26.name : e26.value;
  }
  function i2(e26) {
    return "Literal" === e26.type && "string" == typeof e26.value ? g2.getText(e26) : '"'.concat("Identifier" === e26.type ? e26.name : e26.value, '"');
  }
  function a2(a3) {
    var o3 = a3.key;
    if (!(a3.method || a3.computed || a3.shorthand)) if ("Literal" === o3.type && "string" == typeof o3.value) {
      var s3;
      try {
        s3 = Fy.espree.tokenize(o3.value);
      } catch (e26) {
        return;
      }
      if (1 !== s3.length) return;
      if (t3(s3[0].value) && c2) return;
      l2 && r2(o3.value, s3, p2) && e25.report({ node: a3, message: f2, data: { property: o3.value }, fix: function(e26) {
        return e26.replaceText(o3, n2(o3));
      } });
    } else c2 && "Identifier" === o3.type && t3(o3.name) ? e25.report({ node: a3, message: m2, data: { property: o3.name }, fix: function(e26) {
      return e26.replaceText(o3, i2(o3));
    } }) : p2 && "Literal" === o3.type && "number" == typeof o3.value && e25.report({ node: a3, message: d2, data: { property: o3.value }, fix: function(e26) {
      return e26.replaceText(o3, i2(o3));
    } });
  }
  function o2(t4) {
    var r3 = t4.key;
    t4.method || t4.computed || t4.shorthand || "Literal" === r3.type && "string" == typeof r3.value || e25.report({ node: t4, message: h2, data: { property: r3.name || r3.value }, fix: function(e26) {
      return e26.replaceText(r3, i2(r3));
    } });
  }
  function s2(a3, o3) {
    var s3 = [], u3 = [], l3 = null, p3 = false;
    a3.properties.forEach(function(e26) {
      var n3 = e26.key;
      if (n3 && !e26.method && !e26.computed && !e26.shorthand) {
        if ("Literal" !== n3.type || "string" != typeof n3.value) c2 && o3 && "Identifier" === n3.type && t3(n3.name) ? (u3.push(e26), p3 = true, l3 = n3.name) : u3.push(e26);
        else if (s3.push(e26), o3) {
          var i3;
          try {
            i3 = Fy.espree.tokenize(n3.value);
          } catch (e27) {
            return void (p3 = true);
          }
          p3 = p3 || !r2(n3.value, i3) || c2 && t3(i3[0].value);
        }
      }
    }), o3 && s3.length && !p3 ? s3.forEach(function(t4) {
      e25.report({ node: t4, message: "Properties shouldn't be quoted as all quotes are redundant.", fix: function(e26) {
        return e26.replaceText(t4.key, n2(t4.key));
      } });
    }) : u3.length && l3 ? u3.forEach(function(t4) {
      e25.report({ node: t4, message: "Properties should be quoted as '{{property}}' is a reserved word.", data: { property: l3 }, fix: function(e26) {
        return e26.replaceText(t4.key, i2(t4.key));
      } });
    }) : s3.length && u3.length && u3.forEach(function(t4) {
      e25.report({ node: t4, message: "Inconsistently quoted property '{{key}}' found.", data: { key: t4.key.name || t4.key.value }, fix: function(e26) {
        return e26.replaceText(t4.key, i2(t4.key));
      } });
    });
  }
  var u2 = e25.options[0], c2 = e25.options[1] && e25.options[1].keywords, l2 = !e25.options[1] || false !== e25.options[1].unnecessary, p2 = e25.options[1] && e25.options[1].numbers, f2 = "Unnecessarily quoted property '{{property}}' found.", h2 = "Unquoted property '{{property}}' found.", d2 = "Unquoted number literal '{{property}}' used as key.", m2 = "Unquoted reserved word '{{property}}' used as key.", g2 = e25.getSourceCode();
  return { Property: function(e26) {
    "always" !== u2 && u2 || o2(e26), "as-needed" === u2 && a2(e26);
  }, ObjectExpression: function(e26) {
    "consistent" === u2 && s2(e26, false), "consistent-as-needed" === u2 && s2(e26, true);
  } };
} };
var uN = { double: { quote: '"', alternateQuote: "'", description: "doublequote" }, single: { quote: "'", alternateQuote: '"', description: "singlequote" }, backtick: { quote: "`", alternateQuote: '"', description: "backtick" } };
var cN = /(^|(?:[\0-\[\]-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))(\\\\)*[]/;
uN.double.convert = uN.single.convert = uN.backtick.convert = function(e25) {
  var t3 = this.quote, r2 = e25[0];
  return t3 === r2 ? e25 : t3 + e25.slice(1, -1).replace(/\\(\$\{|\r\n?|\n|(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))|["'`]|\$\{|(\r\n?|\n)/g, function(e26, n2, i2) {
    return n2 === r2 || "`" === r2 && "${" === n2 ? n2 : e26 === t3 || "`" === t3 && "${" === e26 ? "\\".concat(e26) : i2 && "`" === r2 ? "\\n" : e26;
  }) + t3;
};
var lN = { meta: { type: "layout", docs: { description: "enforce the consistent use of either backticks, double, or single quotes", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/quotes" }, fixable: "code", schema: [{ enum: ["single", "double", "backtick"] }, { anyOf: [{ enum: ["avoid-escape"] }, { type: "object", properties: { avoidEscape: { type: "boolean" }, allowTemplateLiterals: { type: "boolean" } }, additionalProperties: false }] }] }, create: function(e25) {
  function t3(e26) {
    return "ExpressionStatement" === e26.type && "Literal" === e26.expression.type && "string" == typeof e26.expression.value;
  }
  function r2(e26) {
    var r3 = e26.parent.parent;
    if ("Program" !== r3.type && ("BlockStatement" !== r3.type || !LA.isFunction(r3.parent))) return false;
    for (var n3 = 0; n3 < r3.body.length; ++n3) {
      var i3 = r3.body[n3];
      if (i3 === e26.parent) return true;
      if (!t3(i3)) break;
    }
    return false;
  }
  function n2(e26) {
    var t4 = e26.parent;
    switch (t4.type) {
      case "ExpressionStatement":
        return r2(e26);
      case "Property":
      case "MethodDefinition":
        return t4.key === e26 && !t4.computed;
      case "ImportDeclaration":
      case "ExportNamedDeclaration":
      case "ExportAllDeclaration":
        return t4.source === e26;
      default:
        return false;
    }
  }
  var i2 = e25.options[0], a2 = uN[i2 || "double"], o2 = e25.options[1], s2 = o2 && true === o2.allowTemplateLiterals, u2 = e25.getSourceCode(), c2 = o2 && true === o2.avoidEscape;
  return "avoid-escape" === o2 && (c2 = true), { Literal: function(t4) {
    var r3 = t4.value, o3 = t4.raw;
    if (a2 && "string" == typeof r3) {
      var s3 = "backtick" === i2 && n2(t4) || function(e26) {
        return "JSXAttribute" === e26.parent.type || "JSXElement" === e26.parent.type || "JSXFragment" === e26.parent.type;
      }(t4) || LA.isSurroundedBy(o3, a2.quote);
      !s3 && c2 && (s3 = LA.isSurroundedBy(o3, a2.alternateQuote) && 0 <= o3.indexOf(a2.quote)), s3 || e25.report({ node: t4, message: "Strings must use {{description}}.", data: { description: a2.description }, fix: function(e26) {
        return "backtick" === i2 && LA.hasOctalEscapeSequence(o3) ? null : e26.replaceText(t4, a2.convert(t4.raw));
      } });
    }
  }, TemplateLiteral: function(t4) {
    s2 || "backtick" === i2 || function(e26) {
      return "TaggedTemplateExpression" === e26.parent.type && e26 === e26.parent.quasi || (0 < e26.expressions.length || !!(1 <= e26.quasis.length && cN.test(e26.quasis[0].value.raw)));
    }(t4) || e25.report({ node: t4, message: "Strings must use {{description}}.", data: { description: a2.description }, fix: function(e26) {
      return r2(t4) ? null : e26.replaceText(t4, a2.convert(u2.getText(t4)));
    } });
  } };
} };
var pN = "always";
var fN = "as-needed";
function hN(e25) {
  return 1 <= e25.defs.length;
}
var dN = { meta: { type: "suggestion", docs: { description: "enforce the consistent use of the radix argument when using `parseInt()`", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/radix" }, schema: [{ enum: ["always", "as-needed"] }] }, create: function(e25) {
  function t3(t4) {
    var n2 = t4.arguments;
    switch (n2.length) {
      case 0:
        e25.report({ node: t4, message: "Missing parameters." });
        break;
      case 1:
        r2 === pN && e25.report({ node: t4, message: "Missing radix parameter." });
        break;
      default:
        r2 === fN && function(e26) {
          return "Literal" === e26.type && 10 === e26.value;
        }(n2[1]) ? e25.report({ node: t4, message: "Redundant radix parameter." }) : !function(e26) {
          return !("Literal" === e26.type && "number" != typeof e26.value || "Identifier" === e26.type && "undefined" === e26.name);
        }(n2[1]) && e25.report({ node: t4, message: "Invalid radix parameter." });
    }
  }
  var r2 = e25.options[0] || pN;
  return { "Program:exit": function() {
    var r3, n2 = e25.getScope();
    hN(r3 = LA.getVariableByName(n2, "parseInt")) || r3.references.forEach(function(e26) {
      var r4 = e26.identifier;
      LA.isCallee(r4) && t3(r4.parent);
    }), hN(r3 = LA.getVariableByName(n2, "Number")) || r3.references.forEach(function(e26) {
      var r4 = e26.identifier.parent;
      (function(e27) {
        return "MemberExpression" === e27.type && !e27.computed && "Identifier" === e27.property.type && "parseInt" === e27.property.name;
      })(r4) && LA.isCallee(r4) && t3(r4.parent);
    });
  } };
} };
function mN(e25) {
  var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : /* @__PURE__ */ new Map(), r2 = true, n2 = false, i2 = void 0;
  try {
    for (var a2, o2 = e25.references[Symbol.iterator](); !(r2 = (a2 = o2.next()).done); r2 = true) {
      var s2 = a2.value;
      t3.set(s2.identifier, s2);
    }
  } catch (e26) {
    n2 = true, i2 = e26;
  } finally {
    try {
      r2 || null == o2.return || o2.return();
    } finally {
      if (n2) throw i2;
    }
  }
  var u2 = true, c2 = false, l2 = void 0;
  try {
    for (var p2, f2 = e25.childScopes[Symbol.iterator](); !(u2 = (p2 = f2.next()).done); u2 = true) {
      var h2 = p2.value;
      "function" !== h2.type && mN(h2, t3);
    }
  } catch (e26) {
    c2 = true, l2 = e26;
  } finally {
    try {
      u2 || null == f2.return || f2.return();
    } finally {
      if (c2) throw l2;
    }
  }
  return t3;
}
var gN = function() {
  function e25() {
    a(this, e25), this.info = /* @__PURE__ */ new WeakMap();
  }
  return s(e25, [{ key: "initialize", value: function(e26) {
    var t3 = /* @__PURE__ */ new Set(), r2 = /* @__PURE__ */ new Set(), n2 = true, i2 = false, a2 = void 0;
    try {
      for (var o2, s2 = e26.prevSegments[Symbol.iterator](); !(n2 = (o2 = s2.next()).done); n2 = true) {
        var u2 = o2.value, c2 = this.info.get(u2);
        c2 && (c2.outdatedReadVariableNames.forEach(Set.prototype.add, t3), c2.freshReadVariableNames.forEach(Set.prototype.add, r2));
      }
    } catch (e27) {
      i2 = true, a2 = e27;
    } finally {
      try {
        n2 || null == s2.return || s2.return();
      } finally {
        if (i2) throw a2;
      }
    }
    this.info.set(e26, { outdatedReadVariableNames: t3, freshReadVariableNames: r2 });
  } }, { key: "markAsRead", value: function(e26, t3) {
    var r2 = true, n2 = false, i2 = void 0;
    try {
      for (var a2, o2 = e26[Symbol.iterator](); !(r2 = (a2 = o2.next()).done); r2 = true) {
        var s2 = a2.value, u2 = this.info.get(s2);
        u2 && u2.freshReadVariableNames.add(t3);
      }
    } catch (e27) {
      n2 = true, i2 = e27;
    } finally {
      try {
        r2 || null == o2.return || o2.return();
      } finally {
        if (n2) throw i2;
      }
    }
  } }, { key: "makeOutdated", value: function(e26) {
    var t3 = true, r2 = false, n2 = void 0;
    try {
      for (var i2, a2 = e26[Symbol.iterator](); !(t3 = (i2 = a2.next()).done); t3 = true) {
        var o2 = i2.value, s2 = this.info.get(o2);
        s2 && (s2.freshReadVariableNames.forEach(Set.prototype.add, s2.outdatedReadVariableNames), s2.freshReadVariableNames.clear());
      }
    } catch (e27) {
      r2 = true, n2 = e27;
    } finally {
      try {
        t3 || null == a2.return || a2.return();
      } finally {
        if (r2) throw n2;
      }
    }
  } }, { key: "isOutdated", value: function(e26, t3) {
    var r2 = true, n2 = false, i2 = void 0;
    try {
      for (var a2, o2 = e26[Symbol.iterator](); !(r2 = (a2 = o2.next()).done); r2 = true) {
        var s2 = a2.value, u2 = this.info.get(s2);
        if (u2 && u2.outdatedReadVariableNames.has(t3)) return true;
      }
    } catch (e27) {
      n2 = true, i2 = e27;
    } finally {
      try {
        r2 || null == o2.return || o2.return();
      } finally {
        if (n2) throw i2;
      }
    }
    return false;
  } }]), e25;
}();
var yN = { meta: { type: "problem", docs: { description: "disallow assignments that can lead to race conditions due to usage of `await` or `yield`", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/require-atomic-updates" }, fixable: null, schema: [], messages: { nonAtomicUpdate: "Possible race condition: `{{value}}` might be reassigned based on an outdated value of `{{value}}`." } }, create: function(e25) {
  var t3 = e25.getSourceCode(), r2 = /* @__PURE__ */ new Map(), n2 = new gN(), i2 = null;
  return { onCodePathStart: function(t4) {
    var r3 = e25.getScope(), n3 = "function" === r3.type && (r3.block.async || r3.block.generator);
    i2 = { upper: i2, codePath: t4, referenceMap: n3 ? mN(r3) : null };
  }, onCodePathEnd: function() {
    i2 = i2.upper;
  }, onCodePathSegmentStart: function(e26) {
    n2.initialize(e26);
  }, Identifier: function(e26) {
    var t4 = i2, a2 = t4.codePath, o2 = t4.referenceMap, s2 = o2 && o2.get(e26);
    if (s2) {
      var u2 = s2.identifier.name, c2 = s2.resolved, l2 = function(e27) {
        if (e27.writeExpr) return e27.writeExpr;
        for (var t5 = e27.identifier; t5; ) {
          var r3 = t5.parent.type;
          if ("AssignmentExpression" === r3 && t5.parent.left === t5) return t5.parent.right;
          if ("MemberExpression" !== r3 || t5.parent.object !== t5) break;
          t5 = t5.parent;
        }
        return null;
      }(s2), p2 = "MemberExpression" === s2.identifier.parent.type;
      if (s2.isRead() && !(l2 && "=" === l2.parent.operator) && n2.markAsRead(a2.currentSegments, u2), l2 && l2.parent.right === l2 && !function(e27, t5) {
        if (!e27) return false;
        if (t5 && e27.defs.some(function(e28) {
          return "Parameter" === e28.type;
        })) return false;
        var r3 = e27.scope.variableScope;
        return e27.references.every(function(e28) {
          return e28.from.variableScope === r3;
        });
      }(c2, p2)) {
        var f2 = r2.get(l2);
        f2 || (f2 = [], r2.set(l2, f2)), f2.push(s2);
      }
    }
  }, ":expression:exit": function(a2) {
    var o2 = i2, s2 = o2.codePath;
    if (o2.referenceMap) {
      ("AwaitExpression" === a2.type || "YieldExpression" === a2.type) && n2.makeOutdated(s2.currentSegments);
      var u2 = r2.get(a2);
      if (u2) {
        r2.delete(a2);
        var c2 = true, l2 = false, p2 = void 0;
        try {
          for (var f2, h2 = u2[Symbol.iterator](); !(c2 = (f2 = h2.next()).done); c2 = true) {
            var d2 = f2.value.identifier.name;
            n2.isOutdated(s2.currentSegments, d2) && e25.report({ node: a2.parent, messageId: "nonAtomicUpdate", data: { value: t3.getText(a2.parent.left) } });
          }
        } catch (e26) {
          l2 = true, p2 = e26;
        } finally {
          try {
            c2 || null == h2.return || h2.return();
          } finally {
            if (l2) throw p2;
          }
        }
      }
    }
  } };
} };
function vN(e25) {
  return e25[0].toUpperCase() + e25.slice(1);
}
var xN = { meta: { type: "suggestion", docs: { description: "disallow async functions which have no `await` expression", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/require-await" }, schema: [] }, create: function(e25) {
  function t3() {
    i2 = { upper: i2, hasAwait: false };
  }
  function r2(t4) {
    !t4.async || i2.hasAwait || LA.isEmptyFunction(t4) || e25.report({ node: t4, loc: LA.getFunctionHeadLoc(t4, n2), message: "{{name}} has no 'await' expression.", data: { name: vN(LA.getFunctionNameWithKind(t4)) } }), i2 = i2.upper;
  }
  var n2 = e25.getSourceCode(), i2 = null;
  return { FunctionDeclaration: t3, FunctionExpression: t3, ArrowFunctionExpression: t3, "FunctionDeclaration:exit": r2, "FunctionExpression:exit": r2, "ArrowFunctionExpression:exit": r2, AwaitExpression: function() {
    i2 && (i2.hasAwait = true);
  }, ForOfStatement: function(e26) {
    !i2 || e26.await && (i2.hasAwait = true);
  } };
} };
var bN = { meta: { type: "suggestion", docs: { description: "require JSDoc comments", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/require-jsdoc" }, schema: [{ type: "object", properties: { require: { type: "object", properties: { ClassDeclaration: { type: "boolean", default: false }, MethodDefinition: { type: "boolean", default: false }, FunctionDeclaration: { type: "boolean", default: true }, ArrowFunctionExpression: { type: "boolean", default: false }, FunctionExpression: { type: "boolean", default: false } }, additionalProperties: false, default: {} } }, additionalProperties: false }], deprecated: true, replacedBy: [] }, create: function(e25) {
  function t3(t4) {
    e25.report({ node: t4, message: "Missing JSDoc comment." });
  }
  function r2(e26) {
    n2.getJSDocComment(e26) || t3(e26);
  }
  var n2 = e25.getSourceCode(), i2 = Object.assign({ FunctionDeclaration: true, MethodDefinition: false, ClassDeclaration: false, ArrowFunctionExpression: false, FunctionExpression: false }, e25.options[0] && e25.options[0].require);
  return { FunctionDeclaration: function(e26) {
    i2.FunctionDeclaration && r2(e26);
  }, FunctionExpression: function(e26) {
    (i2.MethodDefinition && "MethodDefinition" === e26.parent.type || i2.FunctionExpression && ("VariableDeclarator" === e26.parent.type || "Property" === e26.parent.type && e26 === e26.parent.value)) && r2(e26);
  }, ClassDeclaration: function(e26) {
    i2.ClassDeclaration && r2(e26);
  }, ArrowFunctionExpression: function(e26) {
    i2.ArrowFunctionExpression && "VariableDeclarator" === e26.parent.type && r2(e26);
  } };
} };
var EN = Fy.require$$0;
var CN = EN.CALL;
var SN = EN.CONSTRUCT;
var kN = EN.ReferenceTracker;
var DN = EN.getStringIfConstant;
var FN = { meta: { type: "suggestion", docs: { description: "enforce the use of `u` flag on RegExp", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/require-unicode-regexp" }, messages: { requireUFlag: "Use the 'u' flag." }, schema: [] }, create: function(e25) {
  return { "Literal[regex]": function(t3) {
    (t3.regex.flags || "").includes("u") || e25.report({ node: t3, messageId: "requireUFlag" });
  }, Program: function() {
    var t3, r2 = e25.getScope(), n2 = new kN(r2), i2 = { RegExp: (t3 = {}, u(t3, CN, true), u(t3, SN, true), t3) }, a2 = true, o2 = false, s2 = void 0;
    try {
      for (var c2, l2 = n2.iterateGlobalReferences(i2)[Symbol.iterator](); !(a2 = (c2 = l2.next()).done); a2 = true) {
        var p2 = c2.value.node, f2 = p2.arguments[1], h2 = DN(f2, r2);
        f2 && ("string" != typeof h2 || h2.includes("u")) || e25.report({ node: p2, messageId: "requireUFlag" });
      }
    } catch (e26) {
      o2 = true, s2 = e26;
    } finally {
      try {
        a2 || null == l2.return || l2.return();
      } finally {
        if (o2) throw s2;
      }
    }
  } };
} };
var AN = { meta: { type: "layout", docs: { description: "enforce consistent spacing before and after semicolons", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/semi-spacing" }, fixable: "whitespace", schema: [{ type: "object", properties: { before: { type: "boolean", default: false }, after: { type: "boolean", default: true } }, additionalProperties: false }] }, create: function(e25) {
  function t3(t4, r3) {
    if (LA.isSemicolonToken(t4)) {
      var n3 = t4.loc.start;
      !function(e26) {
        var t5 = a2.getTokenBefore(e26);
        return t5 && LA.isTokenOnSameLine(t5, e26) && a2.isSpaceBetweenTokens(t5, e26);
      }(t4) ? o2 && e25.report({ node: r3, loc: n3, message: "Missing whitespace before semicolon.", fix: function(e26) {
        return e26.insertTextBefore(t4, " ");
      } }) : !o2 && e25.report({ node: r3, loc: n3, message: "Unexpected whitespace before semicolon.", fix: function(e26) {
        var r4 = a2.getTokenBefore(t4);
        return e26.removeRange([r4.range[1], t4.range[0]]);
      } }), function(e26) {
        var t5 = a2.getTokenBefore(e26);
        return !(t5 && LA.isTokenOnSameLine(e26, t5));
      }(t4) || function(e26) {
        var t5 = a2.getTokenAfter(e26);
        return !(t5 && LA.isTokenOnSameLine(e26, t5));
      }(t4) || function(e26) {
        var t5 = a2.getTokenAfter(e26);
        return t5 && LA.isClosingBraceToken(t5) || LA.isClosingParenToken(t5);
      }(t4) || (function(e26) {
        var t5 = a2.getTokenAfter(e26);
        return t5 && LA.isTokenOnSameLine(e26, t5) && a2.isSpaceBetweenTokens(e26, t5);
      }(t4) ? !s2 && e25.report({ node: r3, loc: n3, message: "Unexpected whitespace after semicolon.", fix: function(e26) {
        var r4 = a2.getTokenAfter(t4);
        return e26.removeRange([t4.range[1], r4.range[0]]);
      } }) : s2 && e25.report({ node: r3, loc: n3, message: "Missing whitespace after semicolon.", fix: function(e26) {
        return e26.insertTextAfter(t4, " ");
      } }));
    }
  }
  function r2(e26) {
    t3(a2.getLastToken(e26), e26);
  }
  var n2 = e25.options[0], a2 = e25.getSourceCode(), o2 = false, s2 = true;
  return "object" == i(n2) && (o2 = n2.before, s2 = n2.after), { VariableDeclaration: r2, ExpressionStatement: r2, BreakStatement: r2, ContinueStatement: r2, DebuggerStatement: r2, ReturnStatement: r2, ThrowStatement: r2, ImportDeclaration: r2, ExportNamedDeclaration: r2, ExportAllDeclaration: r2, ExportDefaultDeclaration: r2, ForStatement: function(e26) {
    e26.init && t3(a2.getTokenAfter(e26.init), e26), e26.test && t3(a2.getTokenAfter(e26.test), e26);
  } };
} };
var wN = ":matches(".concat("BreakStatement,ContinueStatement,DebuggerStatement,DoWhileStatement,ExportAllDeclaration,ExportDefaultDeclaration,ExportNamedDeclaration,ExpressionStatement,ImportDeclaration,ReturnStatement,ThrowStatement,VariableDeclaration", ")");
var _N = { asc: function(e25, t3) {
  return e25 <= t3;
}, ascI: function(e25, t3) {
  return e25.toLowerCase() <= t3.toLowerCase();
}, ascN: function(e25, t3) {
  return 0 >= BA(e25, t3);
}, ascIN: function(e25, t3) {
  return 0 >= BA(e25.toLowerCase(), t3.toLowerCase());
}, desc: function(e25, t3) {
  return _N.asc(t3, e25);
}, descI: function(e25, t3) {
  return _N.ascI(t3, e25);
}, descN: function(e25, t3) {
  return _N.ascN(t3, e25);
}, descIN: function(e25, t3) {
  return _N.ascIN(t3, e25);
} };
function TN(e25) {
  return "(?:".concat(Fy.lodash.escapeRegExp(e25), ")");
}
function PN(e25) {
  return "".concat(TN(e25), "+");
}
function IN(e25) {
  var t3 = "";
  return 0 === e25.length ? t3 += "\\s" : (t3 += "(?:\\s|", 1 === e25.length ? t3 += PN(e25[0]) : (t3 += "(?:", t3 += e25.map(PN).join("|"), t3 += ")"), t3 += "(?:$|[".concat(Array.from(LA.LINEBREAKS).join(""), "]))")), t3;
}
function BN(e25, t3) {
  var r2 = "^";
  return 1 === e25.length ? r2 += TN(e25[0]) : (r2 += "(?:", r2 += e25.map(TN).join("|"), r2 += ")"), r2 += "?", r2 += IN(t3), new RegExp(r2, "u");
}
function ON(e25) {
  var t3 = "^(".concat(e25.map(TN).join("|"), ")?[ 	]+");
  return new RegExp(t3, "u");
}
function LN(e25) {
  for (var t3 = [], r2 = 0; r2 < e25.length; r2++) {
    var n2 = e25[r2];
    if ("ExpressionStatement" !== n2.type || "Literal" !== n2.expression.type || "use strict" !== n2.expression.value) break;
    t3[r2] = n2;
  }
  return t3;
}
function NN(e25) {
  return "Identifier" === e25.type;
}
function jN(e25) {
  return e25.every(NN);
}
var RN = /\$\{$/;
var MN = /^\}/;
function VN(e25) {
  return !!e25 && "Identifier" === e25.type && "NaN" === e25.name;
}
function UN(e25) {
  return 0 <= ["<", "<="].indexOf(e25);
}
function qN(e25) {
  return "UnaryExpression" === e25.type && "-" === e25.operator && e25.prefix && "Literal" === e25.argument.type && "number" == typeof e25.argument.value;
}
function WN(e25, t3) {
  return "Literal" === e25.type ? e25 : qN(e25) ? { type: "Literal", value: -e25.argument.value, raw: "-".concat(e25.argument.value) } : t3 ? { type: "Literal", value: t3, raw: t3 + "" } : null;
}
function $N(e25, t3) {
  if (e25.type !== t3.type) return false;
  switch (e25.type) {
    case "Identifier":
      return e25.name === t3.name;
    case "Literal":
      return e25.value === t3.value;
    case "MemberExpression":
      var r2 = LA.getStaticPropertyName(e25);
      return null === r2 ? e25.computed === t3.computed && $N(e25.object, t3.object) && $N(e25.property, t3.property) : $N(e25.object, t3.object) && r2 === LA.getStaticPropertyName(t3);
    case "ThisExpression":
      return true;
    default:
      return false;
  }
}
var GN = { "accessor-pairs": MA, "array-bracket-newline": VA, "array-bracket-spacing": UA, "array-callback-return": KA, "array-element-newline": JA, "arrow-body-style": QA, "arrow-parens": YA, "arrow-spacing": ZA, "block-scoped-var": { meta: { type: "suggestion", docs: { description: "enforce the use of variables within the scope they are defined", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/block-scoped-var" }, schema: [], messages: { outOfScope: "'{{name}}' used outside of binding context." } }, create: function(e25) {
  function t3(e26) {
    i2.push(e26.range);
  }
  function r2() {
    i2.pop();
  }
  function n2(t4) {
    var r3 = t4.identifier;
    e25.report({ node: r3, messageId: "outOfScope", data: { name: r3.name } });
  }
  var i2 = [];
  return { Program: function(e26) {
    i2 = [e26.range];
  }, BlockStatement: t3, "BlockStatement:exit": r2, ForStatement: t3, "ForStatement:exit": r2, ForInStatement: t3, "ForInStatement:exit": r2, ForOfStatement: t3, "ForOfStatement:exit": r2, SwitchStatement: t3, "SwitchStatement:exit": r2, CatchClause: t3, "CatchClause:exit": r2, VariableDeclaration: function(t4) {
    function r3(e26) {
      var t5 = e26.identifier.range;
      return t5[0] < a2[0] || t5[1] > a2[1];
    }
    if ("var" === t4.kind) for (var a2 = i2[i2.length - 1], o2 = e25.getDeclaredVariables(t4), s2 = 0; s2 < o2.length; ++s2) o2[s2].references.filter(r3).forEach(n2);
  } };
} }, "block-spacing": ew, "brace-style": tw, "callback-return": { meta: { type: "suggestion", docs: { description: "require `return` statements after callbacks", category: "Node.js and CommonJS", recommended: false, url: "https://eslint.org/docs/rules/callback-return" }, schema: [{ type: "array", items: { type: "string" } }], messages: { missingReturn: "Expected return with your callback function." } }, create: function(e25) {
  function t3(e26, r3) {
    return e26.parent ? -1 === r3.indexOf(e26.parent.type) ? t3(e26.parent, r3) : e26.parent : null;
  }
  function r2(e26) {
    return function e27(t4) {
      if ("Identifier" === t4.type) return true;
      if ("MemberExpression" === t4.type) {
        if ("Identifier" === t4.object.type) return true;
        if ("MemberExpression" === t4.object.type) return e27(t4.object);
      }
      return false;
    }(e26.callee) && -1 < i2.indexOf(a2.getText(e26.callee));
  }
  function n2(e26, t4) {
    return !(!t4 || "ExpressionStatement" !== t4.type || t4.expression !== e26 && ("BinaryExpression" !== t4.expression.type && "LogicalExpression" !== t4.expression.type || t4.expression.right !== e26));
  }
  var i2 = e25.options[0] || ["callback", "cb", "next"], a2 = e25.getSourceCode();
  return { CallExpression: function(i3) {
    if (r2(i3)) {
      var a3 = t3(i3, ["BlockStatement", "ReturnStatement", "ArrowFunctionExpression"]) || {};
      if ("ReturnStatement" !== a3.type && "ArrowFunctionExpression" !== a3.type) {
        if ("BlockStatement" === a3.type) {
          var o2 = a3.body[a3.body.length - 1];
          if (n2(i3, o2)) {
            var s2 = a3.parent.type;
            if ("FunctionExpression" === s2 || "FunctionDeclaration" === s2 || "ArrowFunctionExpression" === s2) return;
          }
          if ("ReturnStatement" === o2.type && n2(i3, a3.body[a3.body.length - 2])) return;
        }
        t3(i3, ["FunctionDeclaration", "FunctionExpression", "ArrowFunctionExpression"]) && e25.report({ node: i3, messageId: "missingReturn" });
      }
    }
  } };
} }, camelcase: rw, "capitalized-comments": lw, "class-methods-use-this": pw, "comma-dangle": hw, "comma-spacing": dw, "comma-style": mw, complexity: gw, "computed-property-spacing": yw, "consistent-return": xw, "consistent-this": { meta: { type: "suggestion", docs: { description: "enforce consistent naming when capturing the current execution context", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/consistent-this" }, schema: { type: "array", items: { type: "string", minLength: 1 }, uniqueItems: true }, messages: { aliasNotAssignedToThis: "Designated alias '{{name}}' is not assigned to 'this'.", unexpectedAlias: "Unexpected alias '{{name}}' for 'this'." } }, create: function(e25) {
  function t3(t4, r3) {
    e25.report({ node: t4, messageId: "aliasNotAssignedToThis", data: { name: r3 } });
  }
  function r2(r3, n3, i3) {
    var o2 = "ThisExpression" === i3.type;
    -1 === a2.indexOf(n3) ? o2 && e25.report({ node: r3, messageId: "unexpectedAlias", data: { name: n3 } }) : (!o2 || r3.operator && "=" !== r3.operator) && t3(r3, n3);
  }
  function n2(e26, r3) {
    var n3 = r3.set.get(e26);
    n3 && !n3.defs.some(function(e27) {
      return "VariableDeclarator" === e27.node.type && null !== e27.node.init;
    }) && (n3.references.some(function(e27) {
      var t4 = e27.writeExpr;
      return e27.from === r3 && t4 && "ThisExpression" === t4.type && "=" === t4.parent.operator;
    }) || n3.defs.map(function(e27) {
      return e27.node;
    }).forEach(function(r4) {
      t3(r4, e26);
    }));
  }
  function i2() {
    var t4 = e25.getScope();
    a2.forEach(function(e26) {
      n2(e26, t4);
    });
  }
  var a2 = [];
  return 0 === e25.options.length ? a2.push("that") : a2 = e25.options, { "Program:exit": i2, "FunctionExpression:exit": i2, "FunctionDeclaration:exit": i2, VariableDeclarator: function(e26) {
    var t4 = e26.id, n3 = "ArrayPattern" === t4.type || "ObjectPattern" === t4.type;
    null === e26.init || n3 || r2(e26, t4.name, e26.init);
  }, AssignmentExpression: function(e26) {
    "Identifier" === e26.left.type && r2(e26, e26.left.name, e26.right);
  } };
} }, "constructor-super": Cw, curly: Sw, "default-case": Dw, "default-param-last": { meta: { type: "suggestion", docs: { description: "enforce default parameters to be last", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/default-param-last" }, schema: [], messages: { shouldBeLast: "Default parameters should be last." } }, create: function(e25) {
  function t3(t4) {
    for (var r2 = false, n2 = t4.params.length - 1; 0 <= n2; n2 -= 1) {
      var i2 = t4.params[n2];
      "AssignmentPattern" === i2.type || "RestElement" === i2.type ? r2 && "AssignmentPattern" === i2.type && e25.report({ node: i2, messageId: "shouldBeLast" }) : r2 = true;
    }
  }
  return { FunctionDeclaration: t3, FunctionExpression: t3, ArrowFunctionExpression: t3 };
} }, "dot-location": Fw, "dot-notation": Tw, "eol-last": Pw, eqeqeq: Iw, "for-direction": { meta: { type: "problem", docs: { description: 'enforce "for" loop update clause moving the counter in the right direction.', category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/for-direction" }, fixable: null, schema: [], messages: { incorrectDirection: "The update clause in this loop moves the variable in the wrong direction." } }, create: function(e25) {
  function t3(t4) {
    e25.report({ node: t4, messageId: "incorrectDirection" });
  }
  function r2(e26, t4) {
    if ("UnaryExpression" === e26.right.type) {
      if ("-" === e26.right.operator) return -t4;
    } else if ("Identifier" === e26.right.type) return 0;
    return t4;
  }
  return { ForStatement: function(e26) {
    if (e26.test && "BinaryExpression" === e26.test.type && "Identifier" === e26.test.left.type && e26.update) {
      var n2, i2 = e26.test.left.name, a2 = e26.test.operator, o2 = e26.update;
      if ("<" === a2 || "<=" === a2) n2 = -1;
      else {
        if (">" !== a2 && ">=" !== a2) return;
        n2 = 1;
      }
      "UpdateExpression" === o2.type ? function(e27, t4) {
        if ("Identifier" === e27.argument.type && e27.argument.name === t4) {
          if ("++" === e27.operator) return 1;
          if ("--" === e27.operator) return -1;
        }
        return 0;
      }(o2, i2) === n2 && t3(e26) : "AssignmentExpression" === o2.type && function(e27, t4) {
        if (e27.left.name === t4) {
          if ("+=" === e27.operator) return r2(e27, 1);
          if ("-=" === e27.operator) return r2(e27, -1);
        }
        return 0;
      }(o2, i2) === n2 && t3(e26);
    }
  } };
} }, "func-call-spacing": Bw, "func-name-matching": Nw, "func-names": jw, "func-style": { meta: { type: "suggestion", docs: { description: "enforce the consistent use of either `function` declarations or expressions", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/func-style" }, schema: [{ enum: ["declaration", "expression"] }, { type: "object", properties: { allowArrowFunctions: { type: "boolean", default: false } }, additionalProperties: false }], messages: { expression: "Expected a function expression.", declaration: "Expected a function declaration." } }, create: function(e25) {
  var t3 = e25.options[0], r2 = e25.options[1] && e25.options[1].allowArrowFunctions, n2 = "declaration" === t3, i2 = [], a2 = { FunctionDeclaration: function(t4) {
    i2.push(false), n2 || "ExportDefaultDeclaration" === t4.parent.type || e25.report({ node: t4, messageId: "expression" });
  }, "FunctionDeclaration:exit": function() {
    i2.pop();
  }, FunctionExpression: function(t4) {
    i2.push(false), n2 && "VariableDeclarator" === t4.parent.type && e25.report({ node: t4.parent, messageId: "declaration" });
  }, "FunctionExpression:exit": function() {
    i2.pop();
  }, ThisExpression: function() {
    0 < i2.length && (i2[i2.length - 1] = true);
  } };
  return r2 || (a2.ArrowFunctionExpression = function() {
    i2.push(false);
  }, a2["ArrowFunctionExpression:exit"] = function(t4) {
    var r3 = i2.pop();
    n2 && !r3 && "VariableDeclarator" === t4.parent.type && e25.report({ node: t4.parent, messageId: "declaration" });
  }), a2;
} }, "function-call-argument-newline": { meta: { type: "layout", docs: { description: "enforce line breaks between arguments of a function call", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/function-call-argument-newline" }, fixable: "whitespace", schema: [{ enum: ["always", "never", "consistent"] }], messages: { unexpectedLineBreak: "There should be no line break here.", missingLineBreak: "There should be a line break after this argument." } }, create: function(e25) {
  function t3(t4, r3) {
    for (var i3 = 1; i3 < t4.arguments.length; i3++) {
      var a2 = n2.getLastToken(t4.arguments[i3 - 1]), o2 = n2.getFirstToken(t4.arguments[i3]);
      if (r3.check(a2, o2)) {
        var s2 = n2.getTokenBefore(o2, { includeComments: true }), u2 = "Line" === s2.type;
        e25.report({ node: t4, loc: { start: s2.loc.end, end: o2.loc.start }, messageId: r3.messageId, fix: u2 ? null : r3.createFix(o2, s2) });
      }
    }
  }
  function r2(r3) {
    if (!(2 > r3.arguments.length)) {
      var a2 = e25.options[0] || "always";
      if ("never" === a2) t3(r3, i2.unexpected);
      else if ("always" === a2) t3(r3, i2.missing);
      else if ("consistent" === a2) {
        var o2 = n2.getLastToken(r3.arguments[0]), s2 = n2.getFirstToken(r3.arguments[1]);
        o2.loc.end.line === s2.loc.start.line ? t3(r3, i2.unexpected) : t3(r3, i2.missing);
      }
    }
  }
  var n2 = e25.getSourceCode(), i2 = { unexpected: { messageId: "unexpectedLineBreak", check: function(e26, t4) {
    return e26.loc.end.line !== t4.loc.start.line;
  }, createFix: function(e26, t4) {
    return function(r3) {
      return r3.replaceTextRange([t4.range[1], e26.range[0]], " ");
    };
  } }, missing: { messageId: "missingLineBreak", check: function(e26, t4) {
    return e26.loc.end.line === t4.loc.start.line;
  }, createFix: function(e26, t4) {
    return function(r3) {
      return r3.replaceTextRange([t4.range[1], e26.range[0]], "\n");
    };
  } } };
  return { CallExpression: r2, NewExpression: r2 };
} }, "function-paren-newline": Rw, "generator-star-spacing": Vw, "getter-return": $w, "global-require": zw, "grouped-accessor-pairs": Kw, "guard-for-in": { meta: { type: "suggestion", docs: { description: "require `for-in` loops to include an `if` statement", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/guard-for-in" }, schema: [], messages: { wrap: "The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype." } }, create: function(e25) {
  return { ForInStatement: function(t3) {
    var r2 = t3.body;
    if (!("EmptyStatement" === r2.type || "IfStatement" === r2.type || "BlockStatement" === r2.type && 0 === r2.body.length || "BlockStatement" === r2.type && 1 === r2.body.length && "IfStatement" === r2.body[0].type)) {
      if ("BlockStatement" === r2.type && 1 <= r2.body.length && "IfStatement" === r2.body[0].type) {
        var n2 = r2.body[0];
        if ("ContinueStatement" === n2.consequent.type) return;
        if ("BlockStatement" === n2.consequent.type && 1 === n2.consequent.body.length && "ContinueStatement" === n2.consequent.body[0].type) return;
      }
      e25.report({ node: t3, messageId: "wrap" });
    }
  } };
} }, "handle-callback-err": Jw, "id-blacklist": { meta: { type: "suggestion", docs: { description: "disallow specified identifiers", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/id-blacklist" }, schema: { type: "array", items: { type: "string" }, uniqueItems: true }, messages: { blacklisted: "Identifier '{{name}}' is blacklisted." } }, create: function(e25) {
  function t3(e26) {
    return -1 !== i2.indexOf(e26);
  }
  function r2(e26, r3) {
    return "CallExpression" !== e26.type && "NewExpression" !== e26.type && t3(r3);
  }
  function n2(t4) {
    e25.report({ node: t4, messageId: "blacklisted", data: { name: t4.name } });
  }
  var i2 = e25.options;
  return { Identifier: function(e26) {
    var i3 = e26.name, a2 = "MemberExpression" === e26.parent.type ? e26.parent.parent : e26.parent;
    "MemberExpression" === e26.parent.type ? "Identifier" === e26.parent.object.type && e26.parent.object.name === e26.name ? t3(i3) && n2(e26) : "AssignmentExpression" === a2.type && ("MemberExpression" !== a2.right.type || "MemberExpression" === a2.left.type && a2.left.property.name === e26.name) && t3(i3) && n2(e26) : (e26.parent.type, r2(a2, i3) && n2(e26));
  } };
} }, "id-length": { meta: { type: "suggestion", docs: { description: "enforce minimum and maximum identifier lengths", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/id-length" }, schema: [{ type: "object", properties: { min: { type: "integer", default: 2 }, max: { type: "integer" }, exceptions: { type: "array", uniqueItems: true, items: { type: "string" } }, properties: { enum: ["always", "never"] } }, additionalProperties: false }], messages: { tooShort: "Identifier name '{{name}}' is too short (< {{min}}).", tooLong: "Identifier name '{{name}}' is too long (> {{max}})." } }, create: function(e25) {
  var t3 = e25.options[0] || {}, r2 = void 0 === t3.min ? 2 : t3.min, n2 = void 0 === t3.max ? 1 / 0 : t3.max, i2 = "never" !== t3.properties, a2 = (t3.exceptions ? t3.exceptions : []).reduce(function(e26, t4) {
    return e26[t4] = true, e26;
  }, {}), o2 = { MemberExpression: i2 && function(e26) {
    return !e26.computed && (e26.parent.left === e26 && "AssignmentExpression" === e26.parent.type || "Property" === e26.parent.type && e26.parent.value === e26 && "ObjectPattern" === e26.parent.parent.type && e26.parent.parent.parent.left === e26.parent.parent);
  }, AssignmentPattern: function(e26, t4) {
    return e26.left === t4;
  }, VariableDeclarator: function(e26, t4) {
    return e26.id === t4;
  }, Property: i2 && function(e26, t4) {
    return e26.key === t4;
  }, ImportDefaultSpecifier: true, RestElement: true, FunctionExpression: true, ArrowFunctionExpression: true, ClassDeclaration: true, FunctionDeclaration: true, MethodDefinition: true, CatchClause: true };
  return { Identifier: function(t4) {
    var i3 = t4.name, s2 = t4.parent, u2 = i3.length < r2, c2 = i3.length > n2;
    if ((u2 || c2) && !a2[i3]) {
      var l2 = o2[s2.type];
      l2 && (true === l2 || l2(s2, t4)) && e25.report({ node: t4, messageId: u2 ? "tooShort" : "tooLong", data: { name: i3, min: r2, max: n2 } });
    }
  } };
} }, "id-match": Qw, "implicit-arrow-linebreak": Zw, "indent-legacy": e_, indent: o_, "init-declarations": c_, "jsx-quotes": p_, "key-spacing": m_, "keyword-spacing": F_, "line-comment-position": A_, "linebreak-style": w_, "lines-around-comment": __, "lines-around-directive": T_, "lines-between-class-members": P_, "max-classes-per-file": { meta: { type: "suggestion", docs: { description: "enforce a maximum number of classes per file", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/max-classes-per-file" }, schema: [{ type: "integer", minimum: 1 }], messages: { maximumExceeded: "File has too many classes ({{ classCount }}). Maximum allowed is {{ max }}." } }, create: function(e25) {
  var t3 = e25.options[0] || 1, r2 = 0;
  return { Program: function() {
    r2 = 0;
  }, "Program:exit": function(n2) {
    r2 > t3 && e25.report({ node: n2, messageId: "maximumExceeded", data: { classCount: r2, max: t3 } });
  }, "ClassDeclaration, ClassExpression": function() {
    r2++;
  } };
} }, "max-depth": I_, "max-len": L_, "max-lines-per-function": N_, "max-lines": j_, "max-nested-callbacks": R_, "max-params": M_, "max-statements-per-line": V_, "max-statements": U_, "multiline-comment-style": q_, "multiline-ternary": W_, "new-cap": H_, "new-parens": K_, "newline-after-var": J_, "newline-before-return": Q_, "newline-per-chained-call": X_, "no-alert": tT, "no-array-constructor": { meta: { type: "suggestion", docs: { description: "disallow `Array` constructors", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-array-constructor" }, schema: [], messages: { preferLiteral: "The array literal notation [] is preferable." } }, create: function(e25) {
  function t3(t4) {
    1 !== t4.arguments.length && "Identifier" === t4.callee.type && "Array" === t4.callee.name && e25.report({ node: t4, messageId: "preferLiteral" });
  }
  return { CallExpression: t3, NewExpression: t3 };
} }, "no-async-promise-executor": { meta: { type: "problem", docs: { description: "disallow using an async function as a Promise executor", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-async-promise-executor" }, fixable: null, schema: [], messages: { async: "Promise executor functions should not be async." } }, create: function(e25) {
  return { "NewExpression[callee.name='Promise'][arguments.0.async=true]": function(t3) {
    e25.report({ node: e25.getSourceCode().getFirstToken(t3.arguments[0], function(e26) {
      return "async" === e26.value;
    }), messageId: "async" });
  } };
} }, "no-await-in-loop": iT, "no-bitwise": oT, "no-buffer-constructor": { meta: { type: "problem", docs: { description: "disallow use of the `Buffer()` constructor", category: "Node.js and CommonJS", recommended: false, url: "https://eslint.org/docs/rules/no-buffer-constructor" }, schema: [], messages: { deprecated: "{{expr}} is deprecated. Use Buffer.from(), Buffer.alloc(), or Buffer.allocUnsafe() instead." } }, create: function(e25) {
  return { "CallExpression[callee.name='Buffer'], NewExpression[callee.name='Buffer']": function(t3) {
    e25.report({ node: t3, messageId: "deprecated", data: { expr: "CallExpression" === t3.type ? "Buffer()" : "new Buffer()" } });
  } };
} }, "no-caller": { meta: { type: "suggestion", docs: { description: "disallow the use of `arguments.caller` or `arguments.callee`", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-caller" }, schema: [], messages: { unexpected: "Avoid arguments.{{prop}}." } }, create: function(e25) {
  return { MemberExpression: function(t3) {
    var r2 = t3.object.name, n2 = t3.property.name;
    "arguments" === r2 && !t3.computed && n2 && n2.match(/^calle[er]$/) && e25.report({ node: t3, messageId: "unexpected", data: { prop: n2 } });
  } };
} }, "no-case-declarations": { meta: { type: "suggestion", docs: { description: "disallow lexical declarations in case clauses", category: "Best Practices", recommended: true, url: "https://eslint.org/docs/rules/no-case-declarations" }, schema: [], messages: { unexpected: "Unexpected lexical declaration in case block." } }, create: function(e25) {
  function t3(e26) {
    switch (e26.type) {
      case "FunctionDeclaration":
      case "ClassDeclaration":
        return true;
      case "VariableDeclaration":
        return "var" !== e26.kind;
      default:
        return false;
    }
  }
  return { SwitchCase: function(r2) {
    for (var n2 = 0; n2 < r2.consequent.length; n2++) {
      var i2 = r2.consequent[n2];
      t3(i2) && e25.report({ node: i2, messageId: "unexpected" });
    }
  } };
} }, "no-catch-shadow": sT, "no-class-assign": uT, "no-compare-neg-zero": cT, "no-cond-assign": fT, "no-confusing-arrow": hT, "no-console": dT, "no-const-assign": mT, "no-constant-condition": vT, "no-constructor-return": { meta: { type: "problem", docs: { description: "disallow returning value from constructor", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-constructor-return" }, schema: {}, fixable: null, messages: { unexpected: "Unexpected return statement in constructor." } }, create: function(e25) {
  var t3 = [];
  return { onCodePathStart: function(e26, r2) {
    t3.push(r2);
  }, onCodePathEnd: function() {
    t3.pop();
  }, ReturnStatement: function(r2) {
    var n2 = t3[t3.length - 1];
    !n2.parent || "MethodDefinition" === n2.parent.type && "constructor" === n2.parent.kind && (r2.parent.parent === n2 || r2.argument) && e25.report({ node: r2, messageId: "unexpected" });
  } };
} }, "no-continue": { meta: { type: "suggestion", docs: { description: "disallow `continue` statements", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-continue" }, schema: [], messages: { unexpected: "Unexpected use of continue statement." } }, create: function(e25) {
  return { ContinueStatement: function(t3) {
    e25.report({ node: t3, messageId: "unexpected" });
  } };
} }, "no-control-regex": ET, "no-debugger": { meta: { type: "problem", docs: { description: "disallow the use of `debugger`", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-debugger" }, fixable: null, schema: [], messages: { unexpected: "Unexpected 'debugger' statement." } }, create: function(e25) {
  return { DebuggerStatement: function(t3) {
    e25.report({ node: t3, messageId: "unexpected" });
  } };
} }, "no-delete-var": { meta: { type: "suggestion", docs: { description: "disallow deleting variables", category: "Variables", recommended: true, url: "https://eslint.org/docs/rules/no-delete-var" }, schema: [], messages: { unexpected: "Variables should not be deleted." } }, create: function(e25) {
  return { UnaryExpression: function(t3) {
    "delete" === t3.operator && "Identifier" === t3.argument.type && e25.report({ node: t3, messageId: "unexpected" });
  } };
} }, "no-div-regex": { meta: { type: "suggestion", docs: { description: "disallow division operators explicitly at the beginning of regular expressions", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-div-regex" }, fixable: "code", schema: [], messages: { unexpected: "A regular expression literal can be confused with '/='." } }, create: function(e25) {
  var t3 = e25.getSourceCode();
  return { Literal: function(r2) {
    var n2 = t3.getFirstToken(r2);
    "RegularExpression" === n2.type && "=" === n2.value[1] && e25.report({ node: r2, messageId: "unexpected", fix: function(e26) {
      return e26.replaceTextRange([n2.range[0] + 1, n2.range[0] + 2], "[=]");
    } });
  } };
} }, "no-dupe-args": { meta: { type: "problem", docs: { description: "disallow duplicate arguments in `function` definitions", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-dupe-args" }, schema: [], messages: { unexpected: "Duplicate param '{{name}}'." } }, create: function(e25) {
  function t3(e26) {
    return "Parameter" === e26.type;
  }
  function r2(r3) {
    for (var n2 = e25.getDeclaredVariables(r3), i2 = 0; i2 < n2.length; ++i2) {
      var a2 = n2[i2];
      2 <= a2.defs.filter(t3).length && e25.report({ node: r3, messageId: "unexpected", data: { name: a2.name } });
    }
  }
  return { FunctionDeclaration: r2, FunctionExpression: r2 };
} }, "no-dupe-class-members": CT, "no-dupe-else-if": AT, "no-dupe-keys": PT, "no-duplicate-case": IT, "no-duplicate-imports": jT, "no-else-return": MT, "no-empty-character-class": UT, "no-empty-function": qT, "no-empty-pattern": { meta: { type: "problem", docs: { description: "disallow empty destructuring patterns", category: "Best Practices", recommended: true, url: "https://eslint.org/docs/rules/no-empty-pattern" }, schema: [], messages: { unexpected: "Unexpected empty {{type}} pattern." } }, create: function(e25) {
  return { ObjectPattern: function(t3) {
    0 === t3.properties.length && e25.report({ node: t3, messageId: "unexpected", data: { type: "object" } });
  }, ArrayPattern: function(t3) {
    0 === t3.elements.length && e25.report({ node: t3, messageId: "unexpected", data: { type: "array" } });
  } };
} }, "no-empty": WT, "no-eq-null": { meta: { type: "suggestion", docs: { description: "disallow `null` comparisons without type-checking operators", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-eq-null" }, schema: [], messages: { unexpected: "Use '===' to compare with null." } }, create: function(e25) {
  return { BinaryExpression: function(t3) {
    var r2 = "==" === t3.operator || "!=" === t3.operator;
    ("Literal" === t3.right.type && "null" === t3.right.raw && r2 || "Literal" === t3.left.type && "null" === t3.left.raw && r2) && e25.report({ node: t3, messageId: "unexpected" });
  } };
} }, "no-eval": KT, "no-ex-assign": JT, "no-extend-native": XT, "no-extra-bind": ZT, "no-extra-boolean-cast": eP, "no-extra-label": tP, "no-extra-parens": nP, "no-extra-semi": iP, "no-fallthrough": sP, "no-floating-decimal": uP, "no-func-assign": cP, "no-global-assign": { meta: { type: "suggestion", docs: { description: "disallow assignments to native objects or read-only global variables", category: "Best Practices", recommended: true, url: "https://eslint.org/docs/rules/no-global-assign" }, schema: [{ type: "object", properties: { exceptions: { type: "array", items: { type: "string" }, uniqueItems: true } }, additionalProperties: false }] }, create: function(e25) {
  function t3(t4, r3, n3) {
    var i3 = t4.identifier;
    false === t4.init && t4.isWrite() && (0 === r3 || n3[r3 - 1].identifier !== i3) && e25.report({ node: i3, message: "Read-only global '{{name}}' should not be modified.", data: i3 });
  }
  function r2(e26) {
    false === e26.writeable && -1 === i2.indexOf(e26.name) && e26.references.forEach(t3);
  }
  var n2 = e25.options[0], i2 = n2 && n2.exceptions || [];
  return { Program: function() {
    e25.getScope().variables.forEach(r2);
  } };
} }, "no-implicit-coercion": dP, "no-implicit-globals": { meta: { type: "suggestion", docs: { description: "disallow declarations in the global scope", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-implicit-globals" }, schema: [{ type: "object", properties: { lexicalBindings: { type: "boolean", default: false } }, additionalProperties: false }], messages: { globalNonLexicalBinding: "Unexpected {{kind}} declaration in the global scope, wrap in an IIFE for a local variable, assign as global property for a global variable.", globalLexicalBinding: "Unexpected {{kind}} declaration in the global scope, wrap in a block or in an IIFE.", globalVariableLeak: "Global variable leak, declare the variable if it is intended to be local.", assignmentToReadonlyGlobal: "Unexpected assignment to read-only global variable.", redeclarationOfReadonlyGlobal: "Unexpected redeclaration of read-only global variable." } }, create: function(e25) {
  function t3(t4, r3, n2) {
    e25.report({ node: t4, messageId: r3, data: { kind: n2 } });
  }
  var r2 = e25.options[0] && true === e25.options[0].lexicalBindings;
  return { Program: function() {
    var n2 = e25.getScope();
    n2.variables.forEach(function(e26) {
      var n3 = false === e26.writeable;
      true === e26.writeable || e26.defs.forEach(function(e27) {
        var i2 = e27.node;
        ("FunctionName" === e27.type || "Variable" === e27.type && "var" === e27.parent.kind) && (n3 ? t3(i2, "redeclarationOfReadonlyGlobal") : t3(i2, "globalNonLexicalBinding", "FunctionName" === e27.type ? "function" : "'".concat(e27.parent.kind, "'"))), r2 && ("ClassName" === e27.type || "Variable" === e27.type && ("let" === e27.parent.kind || "const" === e27.parent.kind)) && (n3 ? t3(i2, "redeclarationOfReadonlyGlobal") : t3(i2, "globalLexicalBinding", "ClassName" === e27.type ? "class" : "'".concat(e27.parent.kind, "'")));
      });
    }), n2.implicit.variables.forEach(function(e26) {
      var r3, i2 = n2.set.get(e26.name);
      if (i2) {
        if (i2.writeable) return;
        r3 = "assignmentToReadonlyGlobal";
      } else r3 = "globalVariableLeak";
      e26.defs.forEach(function(e27) {
        t3(e27.node, r3);
      });
    });
  } };
} }, "no-implied-eval": { meta: { type: "suggestion", docs: { description: "disallow the use of `eval()`-like methods", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-implied-eval" }, schema: [] }, create: function(e25) {
  function t3(e26) {
    return e26 ? e26[e26.length - 1] : null;
  }
  function r2(e26) {
    var t4 = "MemberExpression" === e26.callee.type;
    return ("Identifier" === e26.callee.type && a2.test(e26.callee.name) || t4 && function(e27) {
      var t5 = e27.object, r3 = e27.property, n3 = a2.test(r3.name) || a2.test(r3.value);
      return "window" === t5.name && n3;
    }(e26.callee)) && e26.arguments.length;
  }
  function n2(e26) {
    return e26.parent === t3(t3(o2)) && ("CallExpression" !== e26.parent.type || e26 === e26.parent.arguments[0]);
  }
  function i2(t4) {
    if (n2(t4)) {
      var r3 = o2.pop();
      e25.report({ node: r3[0], message: "Implied eval. Consider passing a function instead of a string." });
    }
  }
  var a2 = /^(setTimeout|setInterval|execScript)$/, o2 = [];
  return { CallExpression: function(e26) {
    r2(e26) && o2.push([e26]);
  }, "CallExpression:exit": function(e26) {
    e26 === t3(t3(o2)) && o2.pop();
  }, BinaryExpression: function(e26) {
    "+" === e26.operator && n2(e26) && t3(o2).push(e26);
  }, "BinaryExpression:exit": function(e26) {
    e26 === t3(t3(o2)) && t3(o2).pop();
  }, Literal: function(e26) {
    "string" == typeof e26.value && i2(e26);
  }, TemplateLiteral: function(e26) {
    i2(e26);
  } };
} }, "no-import-assign": EP, "no-inline-comments": CP, "no-inner-declarations": { meta: { type: "problem", docs: { description: "disallow variable or `function` declarations in nested blocks", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-inner-declarations" }, schema: [{ enum: ["functions", "both"] }] }, create: function(e25) {
  function t3(t4) {
    var r2 = function() {
      for (var t5 = e25.getAncestors(), r3 = t5.pop(), n2 = 1; r3 && 0 > ["Program", "FunctionDeclaration", "FunctionExpression", "ArrowFunctionExpression"].indexOf(r3.type); ) n2 += 1, r3 = t5.pop();
      return { type: r3.type, distance: n2 };
    }();
    "Program" === r2.type && 1 === r2.distance || 2 === r2.distance || e25.report({ node: t4, message: "Move {{type}} declaration to {{body}} root.", data: { type: "FunctionDeclaration" === t4.type ? "function" : "variable", body: "Program" === r2.type ? "program" : "function body" } });
  }
  return { FunctionDeclaration: t3, VariableDeclaration: function(r2) {
    "both" === e25.options[0] && "var" === r2.kind && t3(r2);
  } };
} }, "no-invalid-regexp": FP, "no-invalid-this": AP, "no-irregular-whitespace": IP, "no-iterator": { meta: { type: "suggestion", docs: { description: "disallow the use of the `__iterator__` property", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-iterator" }, schema: [] }, create: function(e25) {
  return { MemberExpression: function(t3) {
    (t3.property && "Identifier" === t3.property.type && "__iterator__" === t3.property.name && !t3.computed || "Literal" === t3.property.type && "__iterator__" === t3.property.value) && e25.report({ node: t3, message: "Reserved name '__iterator__'." });
  } };
} }, "no-label-var": BP, "no-labels": OP, "no-lone-blocks": { meta: { type: "suggestion", docs: { description: "disallow unnecessary nested blocks", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-lone-blocks" }, schema: [] }, create: function(e25) {
  function t3(t4) {
    var r3 = "BlockStatement" === t4.parent.type ? "Nested block is redundant." : "Block is redundant.";
    e25.report({ node: t4, message: r3 });
  }
  function r2(e26) {
    return "BlockStatement" === e26.parent.type || "Program" === e26.parent.type || "SwitchCase" === e26.parent.type && (e26.parent.consequent[0] !== e26 || 1 !== e26.parent.consequent.length);
  }
  function n2() {
    if (0 !== a2.length) {
      var t4 = e25.getAncestors().pop();
      a2[a2.length - 1] === t4 && a2.pop();
    }
  }
  var i2, a2 = [];
  return i2 = { BlockStatement: function(e26) {
    r2(e26) && t3(e26);
  } }, 6 <= e25.parserOptions.ecmaVersion && ((i2 = { BlockStatement: function(e26) {
    r2(e26) && a2.push(e26);
  }, "BlockStatement:exit": function(e26) {
    0 < a2.length && a2[a2.length - 1] === e26 ? (a2.pop(), t3(e26)) : "BlockStatement" === e26.parent.type && 1 === e26.parent.body.length && t3(e26);
  } }).VariableDeclaration = function(e26) {
    ("let" === e26.kind || "const" === e26.kind) && n2();
  }, i2.FunctionDeclaration = function() {
    e25.getScope().isStrict && n2();
  }, i2.ClassDeclaration = n2), i2;
} }, "no-lonely-if": { meta: { type: "suggestion", docs: { description: "disallow `if` statements as the only statement in `else` blocks", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-lonely-if" }, schema: [], fixable: "code" }, create: function(e25) {
  var t3 = e25.getSourceCode();
  return { IfStatement: function(r2) {
    var n2 = e25.getAncestors(), i2 = n2.pop(), a2 = n2.pop();
    i2 && "BlockStatement" === i2.type && 1 === i2.body.length && a2 && "IfStatement" === a2.type && i2 === a2.alternate && e25.report({ node: r2, message: "Unexpected if as the only statement in an else block.", fix: function(e26) {
      var n3 = t3.getFirstToken(i2), a3 = t3.getLastToken(i2), o2 = t3.getTokenBefore(n3), s2 = t3.getTokenAfter(a3), u2 = t3.getLastToken(r2.consequent), c2 = t3.getText();
      return c2.slice(n3.range[1], r2.range[0]).trim() || c2.slice(r2.range[1], a3.range[0]).trim() ? null : "BlockStatement" !== r2.consequent.type && ";" !== u2.value && s2 && (r2.consequent.loc.end.line === s2.loc.start.line || /^[\(\+\x2D\/\[`]/.test(s2.value) || "++" === u2.value || "--" === u2.value) ? null : e26.replaceTextRange([n3.range[0], a3.range[1]], (o2.range[1] === n3.range[0] ? " " : "") + t3.getText(r2));
    } });
  } };
} }, "no-loop-func": jP, "no-magic-numbers": { meta: { type: "suggestion", docs: { description: "disallow magic numbers", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-magic-numbers" }, schema: [{ type: "object", properties: { detectObjects: { type: "boolean", default: false }, enforceConst: { type: "boolean", default: false }, ignore: { type: "array", items: { type: "number" }, uniqueItems: true }, ignoreArrayIndexes: { type: "boolean", default: false } }, additionalProperties: false }], messages: { useConst: "Number constants declarations must use 'const'.", noMagic: "No magic number: {{raw}}." } }, create: function(e25) {
  function t3(e26) {
    return -1 !== o2.indexOf(e26);
  }
  function r2(e26) {
    return "MemberExpression" === e26.type && s2;
  }
  var n2 = e25.options[0] || {}, i2 = !!n2.detectObjects, a2 = !!n2.enforceConst, o2 = n2.ignore || [], s2 = !!n2.ignoreArrayIndexes;
  return { Literal: function(n3) {
    var o3, s3, u2, c2, l2 = i2 ? [] : ["ObjectExpression", "Property", "AssignmentExpression"];
    (function(e26) {
      return "number" == typeof e26.value;
    })(n3) && ("UnaryExpression" === n3.parent.type && "-" === n3.parent.operator ? (s3 = (o3 = n3.parent).parent, u2 = -n3.value, c2 = "-".concat(n3.raw)) : (o3 = n3, s3 = n3.parent, u2 = n3.value, c2 = n3.raw), t3(u2) || function(e26, t4) {
      return "CallExpression" === e26.type && t4 === e26.arguments[1] && ("parseInt" === e26.callee.name || "MemberExpression" === e26.callee.type && "Number" === e26.callee.object.name && "parseInt" === e26.callee.property.name);
    }(s3, o3) || r2(s3) || function(e26) {
      return 0 === e26.type.indexOf("JSX");
    }(s3) || ("VariableDeclarator" === s3.type ? a2 && "const" !== s3.parent.kind && e25.report({ node: o3, messageId: "useConst" }) : (-1 === l2.indexOf(s3.type) || "AssignmentExpression" === s3.type && "Identifier" === s3.left.type) && e25.report({ node: o3, messageId: "noMagic", data: { raw: c2 } })));
  } };
} }, "no-misleading-character-class": nI, "no-mixed-operators": hI, "no-mixed-requires": dI, "no-mixed-spaces-and-tabs": { meta: { type: "layout", docs: { description: "disallow mixed spaces and tabs for indentation", category: "Stylistic Issues", recommended: true, url: "https://eslint.org/docs/rules/no-mixed-spaces-and-tabs" }, schema: [{ enum: ["smart-tabs", true, false] }] }, create: function(e25) {
  function t3(e26, t4, r3) {
    return !!(t4 < e26.start.line) || t4 === e26.start.line && r3 < e26.start.column;
  }
  function r2(e26, t4, r3) {
    return !!(t4 > e26.end.line) || t4 === e26.end.line && r3 > e26.end.column;
  }
  var n2, i2 = e25.getSourceCode(), a2 = [];
  switch (e25.options[0]) {
    case true:
    case "smart-tabs":
      n2 = true;
      break;
    default:
      n2 = false;
  }
  return { TemplateElement: function(e26) {
    a2.push(e26.loc);
  }, "Program:exit": function(o2) {
    var s2 = /^(?=[\t ]*(\t | \t))/, u2 = i2.lines;
    i2.getAllComments().forEach(function(e26) {
      a2.push(e26.loc);
    }), a2.sort(function(e26, r3) {
      return t3(e26, r3.start.line, r3.start.column) ? 1 : t3(r3, e26.start.line, r3.start.column) ? -1 : 0;
    }), n2 && (s2 = /^(?=[\t ]* \t)/), u2.forEach(function(n3, i3) {
      var u3 = s2.exec(n3);
      if (u3) {
        for (var c2 = i3 + 1, l2 = u3.index + 1, p2 = 0; p2 < a2.length; p2++) if (!t3(a2[p2], c2, l2) && !r2(a2[p2], c2, l2)) return;
        e25.report({ node: o2, loc: { line: c2, column: l2 }, message: "Mixed spaces and tabs." });
      }
    });
  } };
} }, "no-multi-assign": { meta: { type: "suggestion", docs: { description: "disallow use of chained assignment expressions", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-multi-assign" }, schema: [] }, create: function(e25) {
  return { AssignmentExpression: function(t3) {
    -1 !== ["AssignmentExpression", "VariableDeclarator"].indexOf(t3.parent.type) && e25.report({ node: t3, message: "Unexpected chained assignment." });
  } };
} }, "no-multi-spaces": mI, "no-multi-str": gI, "no-multiple-empty-lines": yI, "no-native-reassign": { meta: { type: "suggestion", docs: { description: "disallow assignments to native objects or read-only global variables", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-native-reassign" }, deprecated: true, replacedBy: ["no-global-assign"], schema: [{ type: "object", properties: { exceptions: { type: "array", items: { type: "string" }, uniqueItems: true } }, additionalProperties: false }] }, create: function(e25) {
  function t3(t4, r3, n3) {
    var i3 = t4.identifier;
    false === t4.init && t4.isWrite() && (0 === r3 || n3[r3 - 1].identifier !== i3) && e25.report({ node: i3, message: "Read-only global '{{name}}' should not be modified.", data: i3 });
  }
  function r2(e26) {
    false === e26.writeable && -1 === i2.indexOf(e26.name) && e26.references.forEach(t3);
  }
  var n2 = e25.options[0], i2 = n2 && n2.exceptions || [];
  return { Program: function() {
    e25.getScope().variables.forEach(r2);
  } };
} }, "no-negated-condition": { meta: { type: "suggestion", docs: { description: "disallow negated conditions", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-negated-condition" }, schema: [] }, create: function(e25) {
  function t3(e26) {
    return function(e27) {
      return "UnaryExpression" === e27.type && "!" === e27.operator;
    }(e26.test) || function(e27) {
      return "BinaryExpression" === e27.type && ("!=" === e27.operator || "!==" === e27.operator);
    }(e26.test);
  }
  return { IfStatement: function(r2) {
    !function(e26) {
      return e26.alternate && "IfStatement" !== e26.alternate.type;
    }(r2) || t3(r2) && e25.report({ node: r2, message: "Unexpected negated condition." });
  }, ConditionalExpression: function(r2) {
    t3(r2) && e25.report({ node: r2, message: "Unexpected negated condition." });
  } };
} }, "no-negated-in-lhs": { meta: { type: "problem", docs: { description: "disallow negating the left operand in `in` expressions", category: "Possible Errors", recommended: false, url: "https://eslint.org/docs/rules/no-negated-in-lhs" }, replacedBy: ["no-unsafe-negation"], deprecated: true, schema: [] }, create: function(e25) {
  return { BinaryExpression: function(t3) {
    "in" === t3.operator && "UnaryExpression" === t3.left.type && "!" === t3.left.operator && e25.report({ node: t3, message: "The 'in' expression's left operand is negated." });
  } };
} }, "no-nested-ternary": { meta: { type: "suggestion", docs: { description: "disallow nested ternary expressions", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-nested-ternary" }, schema: [] }, create: function(e25) {
  return { ConditionalExpression: function(t3) {
    ("ConditionalExpression" === t3.alternate.type || "ConditionalExpression" === t3.consequent.type) && e25.report({ node: t3, message: "Do not nest ternary expressions." });
  } };
} }, "no-new-func": { meta: { type: "suggestion", docs: { description: "disallow `new` operators with the `Function` object", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-new-func" }, schema: [] }, create: function(e25) {
  function t3(t4) {
    e25.report({ node: t4, message: "The Function constructor is eval." });
  }
  return { "NewExpression[callee.name = 'Function']": t3, "CallExpression[callee.name = 'Function']": t3 };
} }, "no-new-object": { meta: { type: "suggestion", docs: { description: "disallow `Object` constructors", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-new-object" }, schema: [] }, create: function(e25) {
  return { NewExpression: function(t3) {
    "Object" === t3.callee.name && e25.report({ node: t3, message: "The object literal notation {} is preferrable." });
  } };
} }, "no-new-require": { meta: { type: "suggestion", docs: { description: "disallow `new` operators with calls to `require`", category: "Node.js and CommonJS", recommended: false, url: "https://eslint.org/docs/rules/no-new-require" }, schema: [] }, create: function(e25) {
  return { NewExpression: function(t3) {
    "Identifier" === t3.callee.type && "require" === t3.callee.name && e25.report({ node: t3, message: "Unexpected use of new with require." });
  } };
} }, "no-new-symbol": { meta: { type: "problem", docs: { description: "disallow `new` operators with the `Symbol` object", category: "ECMAScript 6", recommended: true, url: "https://eslint.org/docs/rules/no-new-symbol" }, schema: [] }, create: function(e25) {
  return { "Program:exit": function() {
    var t3 = e25.getScope().set.get("Symbol");
    t3 && 0 === t3.defs.length && t3.references.forEach(function(t4) {
      var r2 = t4.identifier;
      r2.parent && "NewExpression" === r2.parent.type && e25.report({ node: r2, message: "`Symbol` cannot be called as a constructor." });
    });
  } };
} }, "no-new-wrappers": { meta: { type: "suggestion", docs: { description: "disallow `new` operators with the `String`, `Number`, and `Boolean` objects", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-new-wrappers" }, schema: [] }, create: function(e25) {
  return { NewExpression: function(t3) {
    -1 < ["String", "Number", "Boolean", "Math", "JSON"].indexOf(t3.callee.name) && e25.report({ node: t3, message: "Do not use {{fn}} as a constructor.", data: { fn: t3.callee.name } });
  } };
} }, "no-new": { meta: { type: "suggestion", docs: { description: "disallow `new` operators outside of assignments or comparisons", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-new" }, schema: [] }, create: function(e25) {
  return { "ExpressionStatement > NewExpression": function(t3) {
    e25.report({ node: t3.parent, message: "Do not use 'new' for side effects." });
  } };
} }, "no-obj-calls": CI, "no-octal-escape": { meta: { type: "suggestion", docs: { description: "disallow octal escape sequences in string literals", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-octal-escape" }, schema: [], messages: { octalEscapeSequence: "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead." } }, create: function(e25) {
  return { Literal: function(t3) {
    if ("string" == typeof t3.value) {
      var r2 = t3.raw.match(/^(?:(?:[\0-\[\]-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])|\\(?:[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))*?\\([0-3][0-7]{1,2}|[4-7][0-7]|0(?=[89])|[1-7])/);
      r2 && e25.report({ node: t3, messageId: "octalEscapeSequence", data: { sequence: r2[1] } });
    }
  } };
} }, "no-octal": { meta: { type: "suggestion", docs: { description: "disallow octal literals", category: "Best Practices", recommended: true, url: "https://eslint.org/docs/rules/no-octal" }, schema: [] }, create: function(e25) {
  return { Literal: function(t3) {
    "number" == typeof t3.value && /^0[0-9]/.test(t3.raw) && e25.report({ node: t3, message: "Octal literals should not be used." });
  } };
} }, "no-param-reassign": kI, "no-path-concat": { meta: { type: "suggestion", docs: { description: "disallow string concatenation with `__dirname` and `__filename`", category: "Node.js and CommonJS", recommended: false, url: "https://eslint.org/docs/rules/no-path-concat" }, schema: [] }, create: function(e25) {
  var t3 = /^__(?:dir|file)name$/;
  return { BinaryExpression: function(r2) {
    var n2 = r2.left, i2 = r2.right;
    "+" === r2.operator && ("Identifier" === n2.type && t3.test(n2.name) || "Identifier" === i2.type && t3.test(i2.name)) && e25.report({ node: r2, message: "Use path.join() or path.resolve() instead of + to create paths." });
  } };
} }, "no-plusplus": DI, "no-process-env": { meta: { type: "suggestion", docs: { description: "disallow the use of `process.env`", category: "Node.js and CommonJS", recommended: false, url: "https://eslint.org/docs/rules/no-process-env" }, schema: [] }, create: function(e25) {
  return { MemberExpression: function(t3) {
    var r2 = t3.object.name, n2 = t3.property.name;
    "process" === r2 && !t3.computed && n2 && "env" === n2 && e25.report({ node: t3, message: "Unexpected use of process.env." });
  } };
} }, "no-process-exit": { meta: { type: "suggestion", docs: { description: "disallow the use of `process.exit()`", category: "Node.js and CommonJS", recommended: false, url: "https://eslint.org/docs/rules/no-process-exit" }, schema: [] }, create: function(e25) {
  return { "CallExpression > MemberExpression.callee[object.name = 'process'][property.name = 'exit']": function(t3) {
    e25.report({ node: t3.parent, message: "Don't use process.exit(); throw an error instead." });
  } };
} }, "no-proto": { meta: { type: "suggestion", docs: { description: "disallow the use of the `__proto__` property", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-proto" }, schema: [] }, create: function(e25) {
  return { MemberExpression: function(t3) {
    (t3.property && "Identifier" === t3.property.type && "__proto__" === t3.property.name && !t3.computed || "Literal" === t3.property.type && "__proto__" === t3.property.value) && e25.report({ node: t3, message: "The '__proto__' property is deprecated." });
  } };
} }, "no-prototype-builtins": { meta: { type: "problem", docs: { description: "disallow calling some `Object.prototype` methods directly on objects", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-prototype-builtins" }, schema: [] }, create: function(e25) {
  var t3 = ["hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable"];
  return { CallExpression: function(r2) {
    if ("MemberExpression" === r2.callee.type && !r2.callee.computed) {
      var n2 = r2.callee.property.name;
      -1 < t3.indexOf(n2) && e25.report({ message: "Do not access Object.prototype method '{{prop}}' from target object.", loc: r2.callee.property.loc.start, data: { prop: n2 }, node: r2 });
    }
  } };
} }, "no-redeclare": FI, "no-regex-spaces": TI, "no-restricted-globals": BI, "no-restricted-imports": LI, "no-restricted-modules": MI, "no-restricted-properties": VI, "no-restricted-syntax": UI, "no-return-assign": WI, "no-return-await": GI, "no-script-url": { meta: { type: "suggestion", docs: { description: "disallow `javascript:` urls", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-script-url" }, schema: [] }, create: function(e25) {
  return { Literal: function(t3) {
    t3.value && "string" == typeof t3.value && (0 === t3.value.toLowerCase().indexOf("javascript:") && e25.report({ node: t3, message: "Script URL is a form of eval." }));
  } };
} }, "no-self-assign": KI, "no-self-compare": JI, "no-sequences": QI, "no-setter-return": eB, "no-shadow-restricted-names": rB, "no-shadow": nB, "no-spaced-func": { meta: { type: "layout", docs: { description: "disallow spacing between function identifiers and their applications (deprecated)", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-spaced-func" }, deprecated: true, replacedBy: ["func-call-spacing"], fixable: "whitespace", schema: [] }, create: function(e25) {
  function t3(t4) {
    for (var n2 = r2.getLastToken(t4.callee), i2 = n2, a2 = r2.getTokenAfter(n2); a2 && a2.range[1] < t4.range[1] && "(" !== a2.value; ) i2 = a2, a2 = r2.getTokenAfter(a2);
    a2 && a2.range[1] < t4.range[1] && r2.isSpaceBetweenTokens(i2, a2) && e25.report({ node: t4, loc: n2.loc.start, message: "Unexpected space between function name and paren.", fix: function(e26) {
      return e26.removeRange([i2.range[1], a2.range[0]]);
    } });
  }
  var r2 = e25.getSourceCode();
  return { CallExpression: t3, NewExpression: t3 };
} }, "no-sparse-arrays": { meta: { type: "problem", docs: { description: "disallow sparse arrays", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/no-sparse-arrays" }, schema: [] }, create: function(e25) {
  return { ArrayExpression: function(t3) {
    -1 < t3.elements.indexOf(null) && e25.report({ node: t3, message: "Unexpected comma in middle of array." });
  } };
} }, "no-sync": iB, "no-tabs": sB, "no-template-curly-in-string": { meta: { type: "problem", docs: { description: "disallow template literal placeholder syntax in regular strings", category: "Possible Errors", recommended: false, url: "https://eslint.org/docs/rules/no-template-curly-in-string" }, schema: [] }, create: function(e25) {
  var t3 = /\$\{(?:[\0-\|~-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+\}/;
  return { Literal: function(r2) {
    "string" == typeof r2.value && t3.test(r2.value) && e25.report({ node: r2, message: "Unexpected template string expression." });
  } };
} }, "no-ternary": { meta: { type: "suggestion", docs: { description: "disallow ternary operators", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-ternary" }, schema: [] }, create: function(e25) {
  return { ConditionalExpression: function(t3) {
    e25.report({ node: t3, message: "Ternary operator used." });
  } };
} }, "no-this-before-super": uB, "no-throw-literal": cB, "no-trailing-spaces": lB, "no-undef-init": pB, "no-undef": fB, "no-undefined": hB, "no-underscore-dangle": { meta: { type: "suggestion", docs: { description: "disallow dangling underscores in identifiers", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/no-underscore-dangle" }, schema: [{ type: "object", properties: { allow: { type: "array", items: { type: "string" } }, allowAfterThis: { type: "boolean", default: false }, allowAfterSuper: { type: "boolean", default: false }, allowAfterThisConstructor: { type: "boolean", default: false }, enforceInMethodNames: { type: "boolean", default: false } }, additionalProperties: false }] }, create: function(e25) {
  function t3(e26) {
    return a2.some(function(t4) {
      return t4 === e26;
    });
  }
  function r2(e26) {
    var t4 = e26.length;
    return "_" !== e26 && ("_" === e26[0] || "_" === e26[t4 - 1]);
  }
  function n2(t4) {
    var n3 = t4.key.name, i3 = "MethodDefinition" === t4.type || "Property" === t4.type && t4.method;
    void 0 !== n3 && c2 && i3 && r2(n3) && e25.report({ node: t4, message: "Unexpected dangling '_' in '{{identifier}}'.", data: { identifier: n3 } });
  }
  var i2 = e25.options[0] || {}, a2 = i2.allow ? i2.allow : [], o2 = void 0 !== i2.allowAfterThis && i2.allowAfterThis, s2 = void 0 !== i2.allowAfterSuper && i2.allowAfterSuper, u2 = void 0 !== i2.allowAfterThisConstructor && i2.allowAfterThisConstructor, c2 = void 0 !== i2.enforceInMethodNames && i2.enforceInMethodNames;
  return { FunctionDeclaration: function(n3) {
    if (n3.id) {
      var i3 = n3.id.name;
      void 0 !== i3 && r2(i3) && !t3(i3) && e25.report({ node: n3, message: "Unexpected dangling '_' in '{{identifier}}'.", data: { identifier: i3 } });
    }
  }, VariableDeclarator: function(n3) {
    var i3 = n3.id.name;
    void 0 === i3 || !r2(i3) || /* @__PURE__ */ function(e26) {
      return "_" === e26;
    }(i3) || t3(i3) || e25.report({ node: n3, message: "Unexpected dangling '_' in '{{identifier}}'.", data: { identifier: i3 } });
  }, MemberExpression: function(n3) {
    var i3 = n3.property.name, a3 = "ThisExpression" === n3.object.type, c3 = "Super" === n3.object.type, l2 = function(e26) {
      return "MemberExpression" === e26.object.type && "constructor" === e26.object.property.name && "ThisExpression" === e26.object.object.type;
    }(n3);
    void 0 === i3 || !r2(i3) || a3 && o2 || c3 && s2 || l2 && u2 || /* @__PURE__ */ function(e26) {
      return "__proto__" === e26;
    }(i3) || t3(i3) || e25.report({ node: n3, message: "Unexpected dangling '_' in '{{identifier}}'.", data: { identifier: i3 } });
  }, MethodDefinition: n2, Property: n2 };
} }, "no-unexpected-multiline": dB, "no-unmodified-loop-condition": FB, "no-unneeded-ternary": TB, "no-unreachable": OB, "no-unsafe-finally": RB, "no-unsafe-negation": MB, "no-unused-expressions": { meta: { type: "suggestion", docs: { description: "disallow unused expressions", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-unused-expressions" }, schema: [{ type: "object", properties: { allowShortCircuit: { type: "boolean", default: false }, allowTernary: { type: "boolean", default: false }, allowTaggedTemplates: { type: "boolean", default: false } }, additionalProperties: false }] }, create: function(e25) {
  function t3(e26) {
    return "ExpressionStatement" === e26.type && "Literal" === e26.expression.type && "string" == typeof e26.expression.value;
  }
  function r2(e26) {
    return function(e27, t4) {
      for (var r3 = 0; r3 < t4.length; ++r3) if (!e27(t4[r3])) return t4.slice(0, r3);
      return t4.slice();
    }(t3, e26.body);
  }
  var n2 = e25.options[0] || {}, i2 = n2.allowShortCircuit || false, a2 = n2.allowTernary || false, o2 = n2.allowTaggedTemplates || false;
  return { ExpressionStatement: function(t4) {
    (function e26(t5) {
      return a2 && "ConditionalExpression" === t5.type ? e26(t5.consequent) && e26(t5.alternate) : i2 && "LogicalExpression" === t5.type ? e26(t5.right) : !(!o2 || "TaggedTemplateExpression" !== t5.type) || /^(?:Assignment|Call|New|Update|Yield|Await)Expression$/.test(t5.type) || "UnaryExpression" === t5.type && 0 <= ["delete", "void"].indexOf(t5.operator);
    })(t4.expression) || function(e26, t5) {
      var n3 = t5[t5.length - 1], i3 = t5[t5.length - 2];
      return ("Program" === n3.type || "BlockStatement" === n3.type && /Function/.test(i3.type)) && 0 <= r2(n3).indexOf(e26);
    }(t4, e25.getAncestors()) || e25.report({ node: t4, message: "Expected an assignment or function call and instead saw an expression." });
  } };
} }, "no-unused-labels": { meta: { type: "suggestion", docs: { description: "disallow unused labels", category: "Best Practices", recommended: true, url: "https://eslint.org/docs/rules/no-unused-labels" }, schema: [], fixable: "code", messages: { unused: "'{{name}}:' is defined but never used." } }, create: function(e25) {
  function t3(e26) {
    if (e26.label) for (var t4 = e26.label.name, r3 = n2; r3; ) {
      if (r3.label === t4) {
        r3.used = true;
        break;
      }
      r3 = r3.upper;
    }
  }
  var r2 = e25.getSourceCode(), n2 = null;
  return { LabeledStatement: function(e26) {
    n2 = { label: e26.label.name, used: false, upper: n2 };
  }, "LabeledStatement:exit": function(t4) {
    n2.used || e25.report({ node: t4.label, messageId: "unused", data: t4.label, fix: function(e26) {
      return r2.getTokenAfter(t4.label, { includeComments: true }) === r2.getTokenBefore(t4.body, { includeComments: true }) ? e26.removeRange([t4.range[0], t4.body.range[0]]) : null;
    } }), n2 = n2.upper;
  }, BreakStatement: t3, ContinueStatement: t3 };
} }, "no-unused-vars": VB, "no-use-before-define": $B, "no-useless-call": GB, "no-useless-catch": { meta: { type: "suggestion", docs: { description: "disallow unnecessary `catch` clauses", category: "Best Practices", recommended: true, url: "https://eslint.org/docs/rules/no-useless-catch" }, schema: [] }, create: function(e25) {
  return { CatchClause: function(t3) {
    t3.param && "Identifier" === t3.param.type && t3.body.body.length && "ThrowStatement" === t3.body.body[0].type && "Identifier" === t3.body.body[0].argument.type && t3.body.body[0].argument.name === t3.param.name && (t3.parent.finalizer ? e25.report({ node: t3, message: "Unnecessary catch clause." }) : e25.report({ node: t3.parent, message: "Unnecessary try/catch wrapper." }));
  } };
} }, "no-useless-computed-key": HB, "no-useless-concat": QB, "no-useless-constructor": tO, "no-useless-escape": oO, "no-useless-rename": sO, "no-useless-return": cO, "no-var": yO, "no-void": { meta: { type: "suggestion", docs: { description: "disallow `void` operators", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/no-void" }, schema: [] }, create: function(e25) {
  return { UnaryExpression: function(t3) {
    "void" === t3.operator && e25.report({ node: t3, message: "Expected 'undefined' and instead saw 'void'." });
  } };
} }, "no-warning-comments": xO, "no-whitespace-before-property": bO, "no-with": { meta: { type: "suggestion", docs: { description: "disallow `with` statements", category: "Best Practices", recommended: true, url: "https://eslint.org/docs/rules/no-with" }, schema: [] }, create: function(e25) {
  return { WithStatement: function(t3) {
    e25.report({ node: t3, message: "Unexpected use of 'with' statement." });
  } };
} }, "nonblock-statement-body-position": CO, "object-curly-newline": DO, "object-curly-spacing": FO, "object-property-newline": { meta: { type: "layout", docs: { description: "enforce placing object properties on separate lines", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/object-property-newline" }, schema: [{ type: "object", properties: { allowAllPropertiesOnSameLine: { type: "boolean", default: false }, allowMultiplePropertiesPerLine: { type: "boolean", default: false } }, additionalProperties: false }], fixable: "whitespace" }, create: function(e25) {
  var t3 = e25.options[0] && (e25.options[0].allowAllPropertiesOnSameLine || e25.options[0].allowMultiplePropertiesPerLine), r2 = t3 ? "Object properties must go on a new line if they aren't all on the same line." : "Object properties must go on a new line.", n2 = e25.getSourceCode();
  return { ObjectExpression: function(i2) {
    if (t3 && 1 < i2.properties.length) {
      var a2 = n2.getFirstToken(i2.properties[0]), o2 = n2.getLastToken(i2.properties[i2.properties.length - 1]);
      if (a2.loc.end.line === o2.loc.start.line) return;
    }
    for (var s2 = function(t4) {
      var a3 = n2.getLastToken(i2.properties[t4 - 1]), o3 = n2.getFirstToken(i2.properties[t4]);
      a3.loc.end.line === o3.loc.start.line && e25.report({ node: i2, loc: o3.loc.start, message: r2, fix: function(e26) {
        var t5 = [n2.getTokenBefore(o3).range[1], o3.range[0]];
        return n2.text.slice(t5[0], t5[1]).trim() ? null : e26.replaceTextRange(t5, "\n");
      } });
    }, u2 = 1; u2 < i2.properties.length; u2++) s2(u2);
  } };
} }, "object-shorthand": BO, "one-var-declaration-per-line": { meta: { type: "suggestion", docs: { description: "require or disallow newlines around variable declarations", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/one-var-declaration-per-line" }, schema: [{ enum: ["always", "initializations"] }], fixable: "whitespace" }, create: function(e25) {
  var t3 = "always" === e25.options[0];
  return { VariableDeclaration: function(r2) {
    var n2;
    /* @__PURE__ */ (function(e26) {
      return "ForStatement" === e26 || "ForInStatement" === e26 || "ForOfStatement" === e26;
    })(r2.parent.type) || r2.declarations.forEach(function(i2) {
      n2 && n2.loc.end.line === i2.loc.start.line && (t3 || n2.init || i2.init) && e25.report({ node: r2, message: "Expected variable declaration to be on a new line.", loc: i2.loc.start, fix: function(e26) {
        return e26.insertTextBefore(i2, "\n");
      } }), n2 = i2;
    });
  } };
} }, "one-var": OO, "operator-assignment": RO, "operator-linebreak": MO, "padded-blocks": VO, "padding-line-between-statements": rL, "prefer-arrow-callback": nL, "prefer-const": pL, "prefer-destructuring": fL, "prefer-exponentiation-operator": vL, "prefer-named-capture-group": DL, "prefer-numeric-literals": FL, "prefer-object-spread": qL, "prefer-promise-reject-errors": WL, "prefer-reflect": $L, "prefer-regex-literals": XL, "prefer-rest-params": ZL, "prefer-spread": eN, "prefer-template": oN, "quote-props": sN, quotes: lN, radix: dN, "require-atomic-updates": yN, "require-await": xN, "require-jsdoc": bN, "require-unicode-regexp": FN, "require-yield": { meta: { type: "suggestion", docs: { description: "require generator functions to contain `yield`", category: "ECMAScript 6", recommended: true, url: "https://eslint.org/docs/rules/require-yield" }, schema: [] }, create: function(e25) {
  function t3(e26) {
    e26.generator && n2.push(0);
  }
  function r2(t4) {
    t4.generator && (0 === n2.pop() && 0 < t4.body.body.length && e25.report({ node: t4, message: "This generator function does not have 'yield'." }));
  }
  var n2 = [];
  return { FunctionDeclaration: t3, "FunctionDeclaration:exit": r2, FunctionExpression: t3, "FunctionExpression:exit": r2, YieldExpression: function() {
    0 < n2.length && (n2[n2.length - 1] += 1);
  } };
} }, "rest-spread-spacing": { meta: { type: "layout", docs: { description: "enforce spacing between rest and spread operators and their expressions", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/rest-spread-spacing" }, fixable: "whitespace", schema: [{ enum: ["always", "never"] }] }, create: function(e25) {
  function t3(t4) {
    var i2, a2 = r2.getFirstToken(t4), o2 = r2.getTokenAfter(a2), s2 = r2.isSpaceBetweenTokens(a2, o2);
    switch (t4.type) {
      case "SpreadElement":
        i2 = "spread", "ObjectExpression" === t4.parent.type && (i2 += " property");
        break;
      case "RestElement":
        i2 = "rest", "ObjectPattern" === t4.parent.type && (i2 += " property");
        break;
      case "ExperimentalSpreadProperty":
        i2 = "spread property";
        break;
      case "ExperimentalRestProperty":
        i2 = "rest property";
        break;
      default:
        return;
    }
    n2 && !s2 ? e25.report({ node: t4, loc: { line: a2.loc.end.line, column: a2.loc.end.column }, message: "Expected whitespace after {{type}} operator.", data: { type: i2 }, fix: function(e26) {
      return e26.replaceTextRange([a2.range[1], o2.range[0]], " ");
    } }) : !n2 && s2 && e25.report({ node: t4, loc: { line: a2.loc.end.line, column: a2.loc.end.column }, message: "Unexpected whitespace after {{type}} operator.", data: { type: i2 }, fix: function(e26) {
      return e26.removeRange([a2.range[1], o2.range[0]]);
    } });
  }
  var r2 = e25.getSourceCode(), n2 = "always" === e25.options[0];
  return { SpreadElement: t3, RestElement: t3, ExperimentalSpreadProperty: t3, ExperimentalRestProperty: t3 };
} }, "semi-spacing": AN, "semi-style": { meta: { type: "layout", docs: { description: "enforce location of semicolons", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/semi-style" }, schema: [{ enum: ["last", "first"] }], fixable: "whitespace" }, create: function(e25) {
  var t3;
  function r2(t4, r3) {
    var i3 = n2.getTokenBefore(t4), a2 = n2.getTokenAfter(t4), o2 = !i3 || LA.isTokenOnSameLine(i3, t4), s2 = !a2 || LA.isTokenOnSameLine(t4, a2);
    ("last" !== r3 || o2) && ("first" !== r3 || s2) || e25.report({ loc: t4.loc, message: "Expected this semicolon to be at {{pos}}.", data: { pos: "last" === r3 ? "the end of the previous line" : "the beginning of the next line" }, fix: function(e26) {
      if (i3 && a2 && n2.commentsExistBetween(i3, a2)) return null;
      var o3 = i3 ? i3.range[1] : t4.range[0], s3 = a2 ? a2.range[0] : t4.range[1], u2 = "last" === r3 ? ";\n" : "\n;";
      return e26.replaceTextRange([o3, s3], u2);
    } });
  }
  var n2 = e25.getSourceCode(), i2 = e25.options[0] || "last";
  return u(t3 = {}, wN, function(e26) {
    if ("first" !== i2 || !function(e27) {
      var t5 = e27.parent.type;
      if ("IfStatement" === t5 && e27.parent.consequent === e27 && e27.parent.alternate) return true;
      if ("DoWhileStatement" === t5) return true;
      var r3 = function(e28) {
        var t6 = e28.type;
        return "BlockStatement" === t6 || "Program" === t6 ? e28.body : "SwitchCase" === t6 ? e28.consequent : null;
      }(e27.parent);
      return null !== r3 && r3[r3.length - 1] === e27;
    }(e26)) {
      var t4 = n2.getLastToken(e26);
      LA.isSemicolonToken(t4) && r2(t4, i2);
    }
  }), u(t3, "ForStatement", function(e26) {
    var t4 = e26.init && n2.getTokenAfter(e26.init, LA.isSemicolonToken), i3 = e26.test && n2.getTokenAfter(e26.test, LA.isSemicolonToken);
    t4 && r2(t4, "last"), i3 && r2(i3, "last");
  }), t3;
} }, semi: { meta: { type: "layout", docs: { description: "require or disallow semicolons instead of ASI", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/semi" }, fixable: "code", schema: { anyOf: [{ type: "array", items: [{ enum: ["never"] }, { type: "object", properties: { beforeStatementContinuationChars: { enum: ["always", "any", "never"] } }, additionalProperties: false }], minItems: 0, maxItems: 2 }, { type: "array", items: [{ enum: ["always"] }, { type: "object", properties: { omitLastInOneLineBlock: { type: "boolean" } }, additionalProperties: false }], minItems: 0, maxItems: 2 }] } }, create: function(e25) {
  function t3(t4, r3) {
    var n3, i3, a3, o3 = p2.getLastToken(t4);
    r3 ? (n3 = "Extra semicolon.", a3 = o3.loc, i3 = function(e26) {
      return new RT(e26, p2).retainSurroundingTokens(o3).remove(o3);
    }) : (n3 = "Missing semicolon.", a3 = { start: o3.loc.end, end: LA.getNextLocation(p2, o3.loc.end) }, i3 = function(e26) {
      return e26.insertTextAfter(o3, ";");
    }), e25.report({ node: t4, loc: a3, message: n3, fix: i3 });
  }
  function r2(e26) {
    var t4 = e26.type;
    return "DoWhileStatement" !== t4 && "BreakStatement" !== t4 && "ContinueStatement" !== t4 && "DebuggerStatement" !== t4 && "ImportDeclaration" !== t4 && "ExportAllDeclaration" !== t4 && ("ReturnStatement" === t4 ? !!e26.argument : "ExportNamedDeclaration" === t4 ? !!e26.declaration : !function(e27) {
      if (!LA.isClosingBraceToken(e27)) return false;
      var t5 = p2.getNodeByRangeIndex(e27.range[0]);
      return "BlockStatement" === t5.type && "ArrowFunctionExpression" === t5.parent.type;
    }(p2.getLastToken(e26, 1)));
  }
  function n2(e26) {
    return !!e26 && o2.test(e26.value) && "++" !== e26.value && "--" !== e26.value;
  }
  function i2(e26) {
    return !(!function(e27) {
      var t4 = p2.getTokenAfter(e27);
      return !t4 || LA.isClosingBraceToken(t4) || LA.isSemicolonToken(t4);
    }(p2.getLastToken(e26)) && (function(e27) {
      var t4 = p2.getLastToken(e27, 1), r3 = p2.getTokenAfter(e27);
      return !!r3 && LA.isTokenOnSameLine(t4, r3);
    }(e26) || ("never" !== l2 || r2(e26)) && n2(p2.getTokenAfter(e26))));
  }
  function a2(e26) {
    var r3 = LA.isSemicolonToken(p2.getLastToken(e26));
    if (u2) r3 && i2(e26) ? t3(e26, true) : !r3 && "always" === l2 && n2(p2.getTokenAfter(e26)) && t3(e26);
    else {
      var a3 = c2 && function(e27) {
        var t4 = e27.parent, r4 = p2.getTokenAfter(e27);
        return !(!r4 || "}" !== r4.value || !t4 || "BlockStatement" !== t4.type || t4.loc.start.line !== t4.loc.end.line);
      }(e26);
      r3 && a3 ? t3(e26, true) : !r3 && !a3 && t3(e26);
    }
  }
  var o2 = /^[\(\+\x2D\/\[`]/, s2 = e25.options[1], u2 = "never" === e25.options[0], c2 = !(!s2 || !s2.omitLastInOneLineBlock), l2 = s2 && s2.beforeStatementContinuationChars || "any", p2 = e25.getSourceCode();
  return { VariableDeclaration: function(e26) {
    var t4 = e26.parent;
    "ForStatement" === t4.type && t4.init === e26 || /^For(?:In|Of)Statement/.test(t4.type) && t4.left === e26 || a2(e26);
  }, ExpressionStatement: a2, ReturnStatement: a2, ThrowStatement: a2, DoWhileStatement: a2, DebuggerStatement: a2, BreakStatement: a2, ContinueStatement: a2, ImportDeclaration: a2, ExportAllDeclaration: a2, ExportNamedDeclaration: function(e26) {
    e26.declaration || a2(e26);
  }, ExportDefaultDeclaration: function(e26) {
    /(?:Class|Function)Declaration/.test(e26.declaration.type) || a2(e26);
  } };
} }, "sort-imports": { meta: { type: "suggestion", docs: { description: "enforce sorted import declarations within modules", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/sort-imports" }, schema: [{ type: "object", properties: { ignoreCase: { type: "boolean", default: false }, memberSyntaxSortOrder: { type: "array", items: { enum: ["none", "all", "multiple", "single"] }, uniqueItems: true, minItems: 4, maxItems: 4 }, ignoreDeclarationSort: { type: "boolean", default: false }, ignoreMemberSort: { type: "boolean", default: false } }, additionalProperties: false }], fixable: "code" }, create: function(e25) {
  function t3(e26) {
    return s2.indexOf(function(e27) {
      return 0 === e27.specifiers.length ? "none" : "ImportNamespaceSpecifier" === e27.specifiers[0].type ? "all" : 1 === e27.specifiers.length ? "single" : "multiple";
    }(e26));
  }
  function r2(e26) {
    return e26.specifiers[0] ? e26.specifiers[0].local.name : null;
  }
  var n2 = e25.options[0] || {}, i2 = n2.ignoreCase || false, a2 = n2.ignoreDeclarationSort || false, o2 = n2.ignoreMemberSort || false, s2 = n2.memberSyntaxSortOrder || ["none", "all", "multiple", "single"], u2 = e25.getSourceCode(), c2 = null;
  return { ImportDeclaration: function(n3) {
    if (!a2) {
      if (c2) {
        var l2 = t3(n3), p2 = t3(c2), f2 = r2(n3), h2 = r2(c2);
        i2 && (h2 = h2 && h2.toLowerCase(), f2 = f2 && f2.toLowerCase()), l2 === p2 ? h2 && f2 && f2 < h2 && e25.report({ node: n3, message: "Imports should be sorted alphabetically." }) : l2 < p2 && e25.report({ node: n3, message: "Expected '{{syntaxA}}' syntax before '{{syntaxB}}' syntax.", data: { syntaxA: s2[l2], syntaxB: s2[p2] } });
      }
      c2 = n3;
    }
    if (!o2) {
      var d2 = n3.specifiers.filter(function(e26) {
        return "ImportSpecifier" === e26.type;
      }), m2 = i2 ? function(e26) {
        return e26.local.name.toLowerCase();
      } : function(e26) {
        return e26.local.name;
      }, g2 = d2.map(m2).findIndex(function(e26, t4, r3) {
        return r3[t4 - 1] > e26;
      });
      -1 !== g2 && e25.report({ node: d2[g2], message: "Member '{{memberName}}' of the import declaration should be sorted alphabetically.", data: { memberName: d2[g2].local.name }, fix: function(e26) {
        return d2.some(function(e27) {
          return u2.getCommentsBefore(e27).length || u2.getCommentsAfter(e27).length;
        }) ? null : e26.replaceTextRange([d2[0].range[0], d2[d2.length - 1].range[1]], d2.slice().sort(function(e27, t4) {
          return m2(e27) > m2(t4) ? 1 : -1;
        }).reduce(function(e27, t4, r3) {
          var n4 = r3 === d2.length - 1 ? "" : u2.getText().slice(d2[r3].range[1], d2[r3 + 1].range[0]);
          return e27 + u2.getText(t4) + n4;
        }, ""));
      } });
    }
  } };
} }, "sort-keys": { meta: { type: "suggestion", docs: { description: "require object keys to be sorted", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/sort-keys" }, schema: [{ enum: ["asc", "desc"] }, { type: "object", properties: { caseSensitive: { type: "boolean", default: true }, natural: { type: "boolean", default: false }, minKeys: { type: "integer", minimum: 2, default: 2 } }, additionalProperties: false }] }, create: function(e25) {
  var t3 = e25.options[0] || "asc", r2 = e25.options[1], n2 = r2 && false === r2.caseSensitive, i2 = r2 && r2.natural, a2 = r2 && r2.minKeys, o2 = _N[t3 + (n2 ? "I" : "") + (i2 ? "N" : "")], s2 = null;
  return { ObjectExpression: function(e26) {
    s2 = { upper: s2, prevName: null, numKeys: e26.properties.length };
  }, "ObjectExpression:exit": function() {
    s2 = s2.upper;
  }, SpreadElement: function(e26) {
    "ObjectExpression" === e26.parent.type && (s2.prevName = null);
  }, Property: function(r3) {
    if ("ObjectPattern" !== r3.parent.type) {
      var u2 = s2.prevName, c2 = s2.numKeys, l2 = function(e26) {
        var t4 = LA.getStaticPropertyName(e26);
        return null === t4 ? e26.key.name || null : t4;
      }(r3);
      null !== l2 && (s2.prevName = l2), null === u2 || null === l2 || c2 < a2 || !o2(u2, l2) && e25.report({ node: r3, loc: r3.key.loc, message: "Expected object keys to be in {{natual}}{{insensitive}}{{order}}ending order. '{{thisName}}' should be before '{{prevName}}'.", data: { thisName: l2, prevName: u2, order: t3, insensitive: n2 ? "insensitive " : "", natual: i2 ? "natural " : "" } });
    }
  } };
} }, "sort-vars": { meta: { type: "suggestion", docs: { description: "require variables within the same declaration block to be sorted", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/sort-vars" }, schema: [{ type: "object", properties: { ignoreCase: { type: "boolean", default: false } }, additionalProperties: false }], fixable: "code" }, create: function(e25) {
  var t3 = (e25.options[0] || {}).ignoreCase || false, r2 = e25.getSourceCode();
  return { VariableDeclaration: function(n2) {
    var i2 = n2.declarations.filter(function(e26) {
      return "Identifier" === e26.id.type;
    }), a2 = t3 ? function(e26) {
      return e26.id.name.toLowerCase();
    } : function(e26) {
      return e26.id.name;
    }, o2 = i2.some(function(e26) {
      return null !== e26.init && "Literal" !== e26.init.type;
    }), s2 = false;
    i2.slice(1).reduce(function(t4, n3) {
      var u2 = a2(t4);
      return a2(n3) < u2 ? (e25.report({ node: n3, message: "Variables within the same declaration block should be sorted alphabetically.", fix: function(e26) {
        return o2 || s2 ? null : e26.replaceTextRange([i2[0].range[0], i2[i2.length - 1].range[1]], i2.slice().sort(function(e27, t5) {
          return a2(e27) > a2(t5) ? 1 : -1;
        }).reduce(function(e27, t5, n4) {
          var a3 = n4 === i2.length - 1 ? "" : r2.getText().slice(i2[n4].range[1], i2[n4 + 1].range[0]);
          return e27 + r2.getText(t5) + a3;
        }, ""));
      } }), s2 = true, t4) : n3;
    }, i2[0]);
  } };
} }, "space-before-blocks": { meta: { type: "layout", docs: { description: "enforce consistent spacing before blocks", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/space-before-blocks" }, fixable: "whitespace", schema: [{ oneOf: [{ enum: ["always", "never"] }, { type: "object", properties: { keywords: { enum: ["always", "never", "off"] }, functions: { enum: ["always", "never", "off"] }, classes: { enum: ["always", "never", "off"] } }, additionalProperties: false }] }] }, create: function(e25) {
  function t3(t4) {
    var r3 = n2.getTokenBefore(t4);
    if (r3 && !function(e26) {
      return "Punctuator" === e26.type && "=>" === e26.value || "Keyword" === e26.type;
    }(r3) && LA.isTokenOnSameLine(r3, t4)) {
      var i2, p2, f2 = n2.isSpaceBetweenTokens(r3, t4), h2 = e25.getAncestors().pop();
      "FunctionExpression" === h2.type || "FunctionDeclaration" === h2.type ? (i2 = a2, p2 = u2) : "ClassBody" === t4.type ? (i2 = s2, p2 = l2) : (i2 = o2, p2 = c2), i2 && !f2 ? e25.report({ node: t4, message: "Missing space before opening brace.", fix: function(e26) {
        return e26.insertTextBefore(t4, " ");
      } }) : p2 && f2 && e25.report({ node: t4, message: "Unexpected space before opening brace.", fix: function(e26) {
        return e26.removeRange([r3.range[1], t4.range[0]]);
      } });
    }
  }
  var r2 = e25.options[0], n2 = e25.getSourceCode(), a2 = true, o2 = true, s2 = true, u2 = false, c2 = false, l2 = false;
  return "object" == i(r2) ? (a2 = "always" === r2.functions, o2 = "always" === r2.keywords, s2 = "always" === r2.classes, u2 = "never" === r2.functions, c2 = "never" === r2.keywords, l2 = "never" === r2.classes) : "never" === r2 && (a2 = false, o2 = false, s2 = false, u2 = true, c2 = true, l2 = true), { BlockStatement: t3, ClassBody: t3, SwitchStatement: function(e26) {
    var r3 = e26.cases;
    t3(0 < r3.length ? n2.getTokenBefore(r3[0]) : n2.getLastToken(e26, 1));
  } };
} }, "space-before-function-paren": { meta: { type: "layout", docs: { description: "enforce consistent spacing before `function` definition opening parenthesis", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/space-before-function-paren" }, fixable: "whitespace", schema: [{ oneOf: [{ enum: ["always", "never"] }, { type: "object", properties: { anonymous: { enum: ["always", "never", "ignore"] }, named: { enum: ["always", "never", "ignore"] }, asyncArrow: { enum: ["always", "never", "ignore"] } }, additionalProperties: false }] }] }, create: function(e25) {
  function t3(e26) {
    if ("ArrowFunctionExpression" !== e26.type) {
      if (function(e27) {
        if (e27.id) return true;
        var t4 = e27.parent;
        return "MethodDefinition" === t4.type || "Property" === t4.type && ("get" === t4.kind || "set" === t4.kind || t4.method);
      }(e26)) return o2.named || a2;
      if (!e26.generator) return o2.anonymous || a2;
    } else if (e26.async && LA.isOpeningParenToken(n2.getFirstToken(e26, { skip: 1 }))) return o2.asyncArrow || a2;
    return "ignore";
  }
  function r2(r3) {
    var i2 = t3(r3);
    if ("ignore" !== i2) {
      var a3 = n2.getFirstToken(r3, LA.isOpeningParenToken), o3 = n2.getTokenBefore(a3), s2 = n2.isSpaceBetweenTokens(o3, a3);
      s2 && "never" === i2 ? e25.report({ node: r3, loc: o3.loc.end, message: "Unexpected space before function parentheses.", fix: function(e26) {
        var t4 = n2.getCommentsBefore(a3);
        return t4.some(function(e27) {
          return "Line" === e27.type;
        }) ? null : e26.replaceTextRange([o3.range[1], a3.range[0]], t4.reduce(function(e27, t5) {
          return e27 + n2.getText(t5);
        }, ""));
      } }) : !s2 && "always" === i2 && e25.report({ node: r3, loc: o3.loc.end, message: "Missing space before function parentheses.", fix: function(e26) {
        return e26.insertTextAfter(o3, " ");
      } });
    }
  }
  var n2 = e25.getSourceCode(), a2 = "string" == typeof e25.options[0] ? e25.options[0] : "always", o2 = "object" == i(e25.options[0]) ? e25.options[0] : {};
  return { ArrowFunctionExpression: r2, FunctionDeclaration: r2, FunctionExpression: r2 };
} }, "space-in-parens": { meta: { type: "layout", docs: { description: "enforce consistent spacing inside parentheses", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/space-in-parens" }, fixable: "whitespace", schema: [{ enum: ["always", "never"] }, { type: "object", properties: { exceptions: { type: "array", items: { enum: ["{}", "[]", "()", "empty"] }, uniqueItems: true } }, additionalProperties: false }], messages: { missingOpeningSpace: "There must be a space after this paren.", missingClosingSpace: "There must be a space before this paren.", rejectedOpeningSpace: "There should be no space after this paren.", rejectedClosingSpace: "There should be no space before this paren." } }, create: function(e25) {
  function t3(e26) {
    return s2.openers.includes(e26.value);
  }
  function r2(e26) {
    return s2.closers.includes(e26.value);
  }
  function n2(e26, r3) {
    return !p2.isSpaceBetweenTokens(e26, r3) && (l2.empty || !LA.isClosingParenToken(r3)) && (u2 ? !t3(r3) : t3(r3));
  }
  function i2(e26, r3) {
    return !!LA.isTokenOnSameLine(e26, r3) && "Line" !== r3.type && !!p2.isSpaceBetweenTokens(e26, r3) && (u2 ? t3(r3) : !t3(r3));
  }
  function a2(e26, t4) {
    return !p2.isSpaceBetweenTokens(e26, t4) && (l2.empty || !LA.isOpeningParenToken(e26)) && (u2 ? !r2(e26) : r2(e26));
  }
  function o2(e26, t4) {
    return !!LA.isTokenOnSameLine(e26, t4) && !!p2.isSpaceBetweenTokens(e26, t4) && (u2 ? r2(e26) : !r2(e26));
  }
  var s2, u2 = "always" === e25.options[0], c2 = e25.options[1] && e25.options[1].exceptions || [], l2 = {};
  c2.length && (l2.braceException = c2.includes("{}"), l2.bracketException = c2.includes("[]"), l2.parenException = c2.includes("()"), l2.empty = c2.includes("empty"));
  var p2 = e25.getSourceCode();
  return { Program: function(t4) {
    s2 = function() {
      var e26 = [], t5 = [];
      return l2.braceException && (e26.push("{"), t5.push("}")), l2.bracketException && (e26.push("["), t5.push("]")), l2.parenException && (e26.push("("), t5.push(")")), l2.empty && (e26.push(")"), t5.push("(")), { openers: e26, closers: t5 };
    }();
    var r3 = p2.tokensAndComments;
    r3.forEach(function(s3, u3) {
      var c3 = r3[u3 - 1], l3 = r3[u3 + 1];
      (LA.isOpeningParenToken(s3) || LA.isClosingParenToken(s3)) && ("(" === s3.value && n2(s3, l3) && e25.report({ node: t4, loc: s3.loc, messageId: "missingOpeningSpace", fix: function(e26) {
        return e26.insertTextAfter(s3, " ");
      } }), "(" === s3.value && i2(s3, l3) && e25.report({ node: t4, loc: { start: s3.loc.end, end: l3.loc.start }, messageId: "rejectedOpeningSpace", fix: function(e26) {
        return e26.removeRange([s3.range[1], l3.range[0]]);
      } }), ")" === s3.value && a2(c3, s3) && e25.report({ node: t4, loc: s3.loc, messageId: "missingClosingSpace", fix: function(e26) {
        return e26.insertTextBefore(s3, " ");
      } }), ")" === s3.value && o2(c3, s3) && e25.report({ node: t4, loc: { start: c3.loc.end, end: s3.loc.start }, messageId: "rejectedClosingSpace", fix: function(e26) {
        return e26.removeRange([c3.range[1], s3.range[0]]);
      } }));
    });
  } };
} }, "space-infix-ops": { meta: { type: "layout", docs: { description: "require spacing around infix operators", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/space-infix-ops" }, fixable: "whitespace", schema: [{ type: "object", properties: { int32Hint: { type: "boolean", default: false } }, additionalProperties: false }] }, create: function(e25) {
  function t3(e26, t4, r3) {
    var n3 = a2.getFirstTokenBetween(e26, t4, function(e27) {
      return e27.value === r3;
    }), i3 = a2.getTokenBefore(n3), o2 = a2.getTokenAfter(n3);
    return a2.isSpaceBetweenTokens(i3, n3) && a2.isSpaceBetweenTokens(n3, o2) ? null : n3;
  }
  function r2(t4, r3) {
    e25.report({ node: t4, loc: r3.loc, message: "Operator '{{operator}}' must be spaced.", data: { operator: r3.value }, fix: function(e26) {
      var t5 = a2.getTokenBefore(r3), n3 = a2.getTokenAfter(r3), i3 = "";
      return 0 == r3.range[0] - t5.range[1] && (i3 = " "), i3 += r3.value, 0 == n3.range[0] - r3.range[1] && (i3 += " "), e26.replaceText(r3, i3);
    } });
  }
  function n2(e26) {
    var n3 = t3(e26.left.typeAnnotation ? e26.left.typeAnnotation : e26.left, e26.right, e26.operator || "=");
    n3 && (!i2 || !a2.getText(e26).endsWith("|0")) && r2(e26, n3);
  }
  var i2 = !!e25.options[0] && true === e25.options[0].int32Hint, a2 = e25.getSourceCode();
  return { AssignmentExpression: n2, AssignmentPattern: n2, BinaryExpression: n2, LogicalExpression: n2, ConditionalExpression: function(e26) {
    var n3 = t3(e26.test, e26.consequent, "?"), i3 = t3(e26.consequent, e26.alternate, ":");
    n3 ? r2(e26, n3) : i3 && r2(e26, i3);
  }, VariableDeclarator: function(e26) {
    var n3 = e26.id.typeAnnotation ? e26.id.typeAnnotation : e26.id, i3 = e26.init;
    if (i3) {
      var a3 = t3(n3, i3, "=");
      a3 && r2(e26, a3);
    }
  } };
} }, "space-unary-ops": { meta: { type: "layout", docs: { description: "enforce consistent spacing before or after unary operators", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/space-unary-ops" }, fixable: "whitespace", schema: [{ type: "object", properties: { words: { type: "boolean", default: true }, nonwords: { type: "boolean", default: false }, overrides: { type: "object", additionalProperties: { type: "boolean" } } }, additionalProperties: false }], messages: { unexpectedBefore: "Unexpected space before unary operator '{{operator}}'.", unexpectedAfter: "Unexpected space after unary operator '{{operator}}'.", unexpectedAfterWord: "Unexpected space after unary word operator '{{word}}'.", wordOperator: "Unary word operator '{{word}}' must be followed by whitespace.", operator: "Unary operator '{{operator}}' must be followed by whitespace.", beforeUnaryExpressions: "Space is required before unary expressions '{{token}}'." } }, create: function(e25) {
  function t3(e26) {
    return c2.overrides && Object.prototype.hasOwnProperty.call(c2.overrides, e26);
  }
  function r2(e26) {
    return c2.overrides[e26];
  }
  function n2(t4, r3, n3, i3) {
    n3.range[0] === r3.range[1] && e25.report({ node: t4, messageId: "wordOperator", data: { word: i3 }, fix: function(e26) {
      return e26.insertTextAfter(r3, " ");
    } });
  }
  function i2(t4, r3, n3, i3) {
    LA.canTokensBeAdjacent(r3, n3) && n3.range[0] > r3.range[1] && e25.report({ node: t4, messageId: "unexpectedAfterWord", data: { word: i3 }, fix: function(e26) {
      return e26.removeRange([r3.range[1], n3.range[0]]);
    } });
  }
  function a2(e26, a3, o3, s3) {
    t3(s3) ? r2(s3) ? n2(e26, a3, o3, s3) : i2(e26, a3, o3, s3) : c2.words ? n2(e26, a3, o3, s3) : i2(e26, a3, o3, s3);
  }
  function o2(t4, r3, n3) {
    if (t4.prefix) {
      if (function(e26) {
        return e26 && "UnaryExpression" === e26.type && "!" === e26.argument.operator && e26.argument && "UnaryExpression" === e26.argument.type && "!" === e26.argument.operator;
      }(t4)) return;
      r3.range[1] === n3.range[0] && e25.report({ node: t4, messageId: "operator", data: { operator: r3.value }, fix: function(e26) {
        return e26.insertTextAfter(r3, " ");
      } });
    } else r3.range[1] === n3.range[0] && e25.report({ node: t4, messageId: "beforeUnaryExpressions", data: { token: n3.value }, fix: function(e26) {
      return e26.insertTextBefore(n3, " ");
    } });
  }
  function s2(t4, r3, n3) {
    t4.prefix ? n3.range[0] > r3.range[1] && e25.report({ node: t4, messageId: "unexpectedAfter", data: { operator: r3.value }, fix: function(e26) {
      return LA.canTokensBeAdjacent(r3, n3) ? e26.removeRange([r3.range[1], n3.range[0]]) : null;
    } }) : n3.range[0] > r3.range[1] && e25.report({ node: t4, messageId: "unexpectedBefore", data: { operator: n3.value }, fix: function(e26) {
      return e26.removeRange([r3.range[1], n3.range[0]]);
    } });
  }
  function u2(e26) {
    var n3 = "UpdateExpression" !== e26.type || e26.prefix ? l2.getFirstTokens(e26, 2) : l2.getLastTokens(e26, 2), i3 = n3[0], u3 = n3[1];
    if ("NewExpression" !== e26.type && !e26.prefix || "Keyword" !== i3.type) {
      var p2 = e26.prefix ? n3[0].value : n3[1].value;
      t3(p2) ? r2(p2) ? o2(e26, i3, u3) : s2(e26, i3, u3) : c2.nonwords ? o2(e26, i3, u3) : s2(e26, i3, u3);
    } else a2(e26, i3, u3, i3.value);
  }
  var c2 = e25.options[0] || { words: true, nonwords: false }, l2 = e25.getSourceCode();
  return { UnaryExpression: u2, UpdateExpression: u2, NewExpression: u2, YieldExpression: function(e26) {
    var t4 = l2.getFirstTokens(e26, 3);
    !e26.argument || e26.delegate || a2(e26, t4[0], t4[1], "yield");
  }, AwaitExpression: function(e26) {
    var t4 = l2.getFirstTokens(e26, 3);
    a2(e26, t4[0], t4[1], "await");
  } };
} }, "spaced-comment": { meta: { type: "suggestion", docs: { description: "enforce consistent spacing after the `//` or `/*` in a comment", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/spaced-comment" }, fixable: "whitespace", schema: [{ enum: ["always", "never"] }, { type: "object", properties: { exceptions: { type: "array", items: { type: "string" } }, markers: { type: "array", items: { type: "string" } }, line: { type: "object", properties: { exceptions: { type: "array", items: { type: "string" } }, markers: { type: "array", items: { type: "string" } } }, additionalProperties: false }, block: { type: "object", properties: { exceptions: { type: "array", items: { type: "string" } }, markers: { type: "array", items: { type: "string" } }, balanced: { type: "boolean", default: false } }, additionalProperties: false } }, additionalProperties: false }] }, create: function(e25) {
  function t3(t4, r3, n3, i3) {
    var o3 = "block" === t4.type.toLowerCase() ? "/*" : "//";
    e25.report({ node: t4, fix: function(e26) {
      var r4 = t4.range[0], i4 = r4 + 2;
      return a2 ? (n3 && (i4 += n3[0].length), e26.insertTextAfterRange([r4, i4], " ")) : (i4 += n3[0].length, e26.replaceTextRange([r4, i4], o3 + (n3[1] ? n3[1] : "")));
    }, message: r3, data: { refChar: i3 } });
  }
  function r2(t4, r3, n3) {
    e25.report({ node: t4, fix: function(e26) {
      if (a2) return e26.insertTextAfterRange([t4.range[0], t4.range[1] - 2], " ");
      var r4 = t4.range[1] - 2, i3 = r4 - n3[0].length;
      return e26.replaceTextRange([i3, r4], "");
    }, message: r3 });
  }
  function n2(e26) {
    var n3 = e26.type.toLowerCase(), i3 = u2[n3], o3 = "block" === n3 ? "/*" : "//";
    if (0 !== e26.value.length && !i3.markers.has(e26.value)) {
      var c2 = i3.beginRegex.exec(e26.value), l2 = i3.endRegex.exec(e26.value);
      if (a2) {
        if (!c2) {
          var p2 = i3.captureMarker.exec(e26.value), f2 = p2 ? o3 + p2[0] : o3;
          i3.hasExceptions ? t3(e26, "Expected exception block, space or tab after '{{refChar}}' in comment.", p2, f2) : t3(e26, "Expected space or tab after '{{refChar}}' in comment.", p2, f2);
        }
        s2 && "block" === n3 && !l2 && r2(e26, "Expected space or tab before '*/' in comment.");
      } else c2 && (c2[1] ? t3(e26, "Unexpected space or tab after marker ({{refChar}}) in comment.", c2, c2[1]) : t3(e26, "Unexpected space or tab after '{{refChar}}' in comment.", c2, o3)), s2 && "block" === n3 && l2 && r2(e26, "Unexpected space or tab before '*/' in comment.", l2);
    }
  }
  var i2 = e25.getSourceCode(), a2 = "never" !== e25.options[0], o2 = e25.options[1] || {}, s2 = o2.block && o2.block.balanced, u2 = ["block", "line"].reduce(function(e26, t4) {
    var r3 = function(e27) {
      return -1 === e27.indexOf("*") ? e27.concat("*") : e27;
    }(o2[t4] && o2[t4].markers || o2.markers || []), n3 = o2[t4] && o2[t4].exceptions || o2.exceptions || [];
    return e26[t4] = { beginRegex: a2 ? BN(r3, n3) : ON(r3), endRegex: s2 && a2 ? new RegExp("".concat(IN(n3), "$"), "u") : new RegExp("[ 	]+$", "u"), hasExceptions: 0 < n3.length, captureMarker: new RegExp("^(".concat(r3.map(TN).join("|"), ")"), "u"), markers: new Set(r3) }, e26;
  }, {});
  return { Program: function() {
    i2.getAllComments().filter(function(e26) {
      return "Shebang" !== e26.type;
    }).forEach(n2);
  } };
} }, strict: { meta: { type: "suggestion", docs: { description: "require or disallow strict mode directives", category: "Strict Mode", recommended: false, url: "https://eslint.org/docs/rules/strict" }, schema: [{ enum: ["never", "global", "function", "safe"] }], fixable: "code", messages: { function: "Use the function form of 'use strict'.", global: "Use the global form of 'use strict'.", multiple: "Multiple 'use strict' directives.", never: "Strict mode is not permitted.", unnecessary: "Unnecessary 'use strict' directive.", module: "'use strict' is unnecessary inside of modules.", implied: "'use strict' is unnecessary when implied strict mode is enabled.", unnecessaryInClasses: "'use strict' is unnecessary inside of classes.", nonSimpleParameterList: "'use strict' directive inside a function with non-simple parameter list throws a syntax error since ES2016.", wrap: "Wrap {{name}} in a function with 'use strict' directive." } }, create: function(e25) {
  function t3(e26) {
    return "multiple" === e26 || "unnecessary" === e26 || "module" === e26 || "implied" === e26 || "unnecessaryInClasses" === e26;
  }
  function r2(e26) {
    return function(t4) {
      return t4.remove(e26);
    };
  }
  function n2(t4, n3, i3, a3, o3) {
    t4.slice(n3, i3).forEach(function(t5) {
      e25.report({ node: t5, messageId: a3, fix: o3 ? r2(t5) : null });
    });
  }
  function i2(e26, t4, r3) {
    n2(e26, 0, e26.length, t4, r3);
  }
  function a2(e26, t4, r3) {
    n2(e26, 1, e26.length, t4, r3);
  }
  function o2(t4, n3) {
    var i3 = 0 < p2.length, o3 = 0 === l2.length && 0 === p2.length, s3 = 0 < l2.length && l2[l2.length - 1], u3 = 0 < n3.length;
    u3 ? (jN(t4.params) ? s3 ? e25.report({ node: n3[0], messageId: "unnecessary", fix: r2(n3[0]) }) : i3 && e25.report({ node: n3[0], messageId: "unnecessaryInClasses", fix: r2(n3[0]) }) : e25.report({ node: n3[0], messageId: "nonSimpleParameterList" }), a2(n3, "multiple", true)) : o3 && (jN(t4.params) ? e25.report({ node: t4, messageId: "function" }) : e25.report({ node: t4, messageId: "wrap", data: { name: LA.getFunctionNameWithKind(t4) } })), l2.push(s3 || u3);
  }
  function s2() {
    l2.pop();
  }
  function u2(r3) {
    var n3 = "BlockStatement" === r3.body.type ? LN(r3.body.body) : [];
    "function" === f2 ? o2(r3, n3) : 0 < n3.length && (jN(r3.params) ? i2(n3, f2, t3(f2)) : (e25.report({ node: n3[0], messageId: "nonSimpleParameterList" }), a2(n3, "multiple", true)));
  }
  var c2 = e25.parserOptions.ecmaFeatures || {}, l2 = [], p2 = [], f2 = e25.options[0] || "safe";
  c2.impliedStrict ? f2 = "implied" : "safe" === f2 && (f2 = c2.globalReturn ? "global" : "function");
  var h2 = { Program: function(r3) {
    var n3 = LN(r3.body);
    "module" === r3.sourceType && (f2 = "module"), "global" === f2 ? (0 < r3.body.length && 0 === n3.length && e25.report({ node: r3, messageId: "global" }), a2(n3, "multiple", true)) : i2(n3, f2, t3(f2));
  }, FunctionDeclaration: u2, FunctionExpression: u2, ArrowFunctionExpression: u2 };
  return "function" === f2 && Object.assign(h2, { ClassBody: function() {
    p2.push(true);
  }, "ClassBody:exit": function() {
    p2.pop();
  }, "FunctionDeclaration:exit": s2, "FunctionExpression:exit": s2, "ArrowFunctionExpression:exit": s2 }), h2;
} }, "switch-colon-spacing": { meta: { type: "layout", docs: { description: "enforce spacing around colons of switch statements", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/switch-colon-spacing" }, schema: [{ type: "object", properties: { before: { type: "boolean", default: false }, after: { type: "boolean", default: true } }, additionalProperties: false }], fixable: "whitespace", messages: { expectedBefore: "Expected space(s) before this colon.", expectedAfter: "Expected space(s) after this colon.", unexpectedBefore: "Unexpected space(s) before this colon.", unexpectedAfter: "Unexpected space(s) after this colon." } }, create: function(e25) {
  function t3(e26, t4, r3) {
    return LA.isClosingBraceToken(t4) || !LA.isTokenOnSameLine(e26, t4) || n2.isSpaceBetweenTokens(e26, t4) === r3;
  }
  function r2(e26, t4, r3, i3) {
    return function(e27, t5) {
      return null !== n2.getFirstTokenBetween(e27, t5, { includeComments: true, filter: LA.isCommentToken });
    }(t4, r3) ? null : i3 ? e26.insertTextAfter(t4, " ") : e26.removeRange([t4.range[1], r3.range[0]]);
  }
  var n2 = e25.getSourceCode(), i2 = e25.options[0] || {}, a2 = true === i2.before, o2 = false !== i2.after;
  return { SwitchCase: function(i3) {
    var s2 = function(e26) {
      return e26.test ? n2.getTokenAfter(e26.test, LA.isColonToken) : n2.getFirstToken(e26, 1);
    }(i3), u2 = n2.getTokenBefore(s2), c2 = n2.getTokenAfter(s2);
    t3(u2, s2, a2) || e25.report({ node: i3, loc: s2.loc, messageId: a2 ? "expectedBefore" : "unexpectedBefore", fix: function(e26) {
      return r2(e26, u2, s2, a2);
    } }), t3(s2, c2, o2) || e25.report({ node: i3, loc: s2.loc, messageId: o2 ? "expectedAfter" : "unexpectedAfter", fix: function(e26) {
      return r2(e26, s2, c2, o2);
    } });
  } };
} }, "symbol-description": { meta: { type: "suggestion", docs: { description: "require symbol descriptions", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/symbol-description" }, fixable: null, schema: [], messages: { expected: "Expected Symbol to have a description." } }, create: function(e25) {
  function t3(t4) {
    0 === t4.arguments.length && e25.report({ node: t4, messageId: "expected" });
  }
  return { "Program:exit": function() {
    var r2 = e25.getScope(), n2 = LA.getVariableByName(r2, "Symbol");
    n2 && 0 === n2.defs.length && n2.references.forEach(function(e26) {
      var r3 = e26.identifier;
      LA.isCallee(r3) && t3(r3.parent);
    });
  } };
} }, "template-curly-spacing": { meta: { type: "layout", docs: { description: "require or disallow spacing around embedded expressions of template strings", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/template-curly-spacing" }, fixable: "whitespace", schema: [{ enum: ["always", "never"] }], messages: { expectedBefore: "Expected space(s) before '}'.", expectedAfter: "Expected space(s) after '${'.", unexpectedBefore: "Unexpected space(s) before '}'.", unexpectedAfter: "Unexpected space(s) after '${'." } }, create: function(e25) {
  function t3(t4) {
    var r3 = n2.getTokenBefore(t4);
    r3 && MN.test(t4.value) && LA.isTokenOnSameLine(r3, t4) && n2.isSpaceBetweenTokens(r3, t4) !== i2 && e25.report({ loc: t4.loc.start, messageId: "".concat(a2, "Before"), fix: function(e26) {
      return i2 ? e26.insertTextBefore(t4, " ") : e26.removeRange([r3.range[1], t4.range[0]]);
    } });
  }
  function r2(t4) {
    var r3 = n2.getTokenAfter(t4);
    r3 && RN.test(t4.value) && LA.isTokenOnSameLine(t4, r3) && n2.isSpaceBetweenTokens(t4, r3) !== i2 && e25.report({ loc: { line: t4.loc.end.line, column: t4.loc.end.column - 2 }, messageId: "".concat(a2, "After"), fix: function(e26) {
      return i2 ? e26.insertTextAfter(t4, " ") : e26.removeRange([t4.range[1], r3.range[0]]);
    } });
  }
  var n2 = e25.getSourceCode(), i2 = "always" === e25.options[0], a2 = i2 ? "expected" : "unexpected";
  return { TemplateElement: function(e26) {
    var i3 = n2.getFirstToken(e26);
    t3(i3), r2(i3);
  } };
} }, "template-tag-spacing": { meta: { type: "layout", docs: { description: "require or disallow spacing between template tags and their literals", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/template-tag-spacing" }, fixable: "whitespace", schema: [{ enum: ["always", "never"] }], messages: { unexpected: "Unexpected space between template tag and template literal.", missing: "Missing space between template tag and template literal." } }, create: function(e25) {
  var t3 = "always" !== e25.options[0], r2 = e25.getSourceCode();
  return { TaggedTemplateExpression: function(n2) {
    var i2 = r2.getTokenBefore(n2.quasi), a2 = r2.getFirstToken(n2.quasi), o2 = r2.isSpaceBetweenTokens(i2, a2);
    t3 && o2 ? e25.report({ node: n2, loc: i2.loc.start, messageId: "unexpected", fix: function(e26) {
      var t4 = r2.getCommentsBefore(n2.quasi);
      return t4.some(function(e27) {
        return "Line" === e27.type;
      }) ? null : e26.replaceTextRange([i2.range[1], a2.range[0]], t4.reduce(function(e27, t5) {
        return e27 + r2.getText(t5);
      }, ""));
    } }) : !t3 && !o2 && e25.report({ node: n2, loc: i2.loc.start, messageId: "missing", fix: function(e26) {
      return e26.insertTextAfter(i2, " ");
    } });
  } };
} }, "unicode-bom": { meta: { type: "layout", docs: { description: "require or disallow Unicode byte order mark (BOM)", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/unicode-bom" }, fixable: "whitespace", schema: [{ enum: ["always", "never"] }], messages: { expected: "Expected Unicode BOM (Byte Order Mark).", unexpected: "Unexpected Unicode BOM (Byte Order Mark)." } }, create: function(e25) {
  return { Program: function(t3) {
    var r2 = e25.getSourceCode(), n2 = { column: 0, line: 1 }, i2 = e25.options[0] || "never";
    r2.hasBOM || "always" !== i2 ? r2.hasBOM && "never" === i2 && e25.report({ node: t3, loc: n2, messageId: "unexpected", fix: function(e26) {
      return e26.removeRange([-1, 0]);
    } }) : e25.report({ node: t3, loc: n2, messageId: "expected", fix: function(e26) {
      return e26.insertTextBeforeRange([0, 1], "\uFEFF");
    } });
  } };
} }, "use-isnan": { meta: { type: "problem", docs: { description: "require calls to `isNaN()` when checking for `NaN`", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/use-isnan" }, schema: [{ type: "object", properties: { enforceForSwitchCase: { type: "boolean", default: false }, enforceForIndexOf: { type: "boolean", default: false } }, additionalProperties: false }], messages: { comparisonWithNaN: "Use the isNaN function to compare with NaN.", switchNaN: "'switch(NaN)' can never match a case clause. Use Number.isNaN instead of the switch.", caseNaN: "'case NaN' can never match. Use Number.isNaN before the switch.", indexOfNaN: "Array prototype method '{{ methodName }}' cannot find NaN." } }, create: function(e25) {
  var t3 = e25.options[0] && e25.options[0].enforceForSwitchCase, r2 = e25.options[0] && e25.options[0].enforceForIndexOf, n2 = { BinaryExpression: function(t4) {
    /^(?:[<>]|[!=]=)=?$/.test(t4.operator) && (VN(t4.left) || VN(t4.right)) && e25.report({ node: t4, messageId: "comparisonWithNaN" });
  } };
  return t3 && (n2.SwitchStatement = function(t4) {
    VN(t4.discriminant) && e25.report({ node: t4, messageId: "switchNaN" });
    var r3 = true, n3 = false, i2 = void 0;
    try {
      for (var a2, o2 = t4.cases[Symbol.iterator](); !(r3 = (a2 = o2.next()).done); r3 = true) {
        var s2 = a2.value;
        VN(s2.test) && e25.report({ node: s2, messageId: "caseNaN" });
      }
    } catch (e26) {
      n3 = true, i2 = e26;
    } finally {
      try {
        r3 || null == o2.return || o2.return();
      } finally {
        if (n3) throw i2;
      }
    }
  }), r2 && (n2.CallExpression = function(t4) {
    var r3 = t4.callee;
    if ("MemberExpression" === r3.type) {
      var n3 = LA.getStaticPropertyName(r3);
      ("indexOf" === n3 || "lastIndexOf" === n3) && 1 === t4.arguments.length && VN(t4.arguments[0]) && e25.report({ node: t4, messageId: "indexOfNaN", data: { methodName: n3 } });
    }
  }), n2;
} }, "valid-jsdoc": { meta: { type: "suggestion", docs: { description: "enforce valid JSDoc comments", category: "Possible Errors", recommended: false, url: "https://eslint.org/docs/rules/valid-jsdoc" }, schema: [{ type: "object", properties: { prefer: { type: "object", additionalProperties: { type: "string" } }, preferType: { type: "object", additionalProperties: { type: "string" } }, requireReturn: { type: "boolean", default: true }, requireParamDescription: { type: "boolean", default: true }, requireReturnDescription: { type: "boolean", default: true }, matchDescription: { type: "string" }, requireReturnType: { type: "boolean", default: true }, requireParamType: { type: "boolean", default: true } }, additionalProperties: false }], fixable: "code", messages: { unexpectedTag: "Unexpected @{{title}} tag; function has no return statement.", expected: "Expected JSDoc for '{{name}}' but found '{{jsdocName}}'.", use: "Use @{{name}} instead.", useType: "Use '{{expectedTypeName}}' instead of '{{currentTypeName}}'.", syntaxError: "JSDoc syntax error.", missingBrace: "JSDoc type missing brace.", missingParamDesc: "Missing JSDoc parameter description for '{{name}}'.", missingParamType: "Missing JSDoc parameter type for '{{name}}'.", missingReturnType: "Missing JSDoc return type.", missingReturnDesc: "Missing JSDoc return description.", missingReturn: "Missing JSDoc @{{returns}} for function.", missingParam: "Missing JSDoc for parameter '{{name}}'.", duplicateParam: "Duplicate JSDoc parameter '{{name}}'.", unsatisfiedDesc: "JSDoc description does not satisfy the regex pattern." }, deprecated: true, replacedBy: [] }, create: function(e25) {
  function t3(e26) {
    return "ClassExpression" === e26.type || "ClassDeclaration" === e26.type;
  }
  function r2(e26) {
    v2.push({ returnPresent: "ArrowFunctionExpression" === e26.type && "BlockStatement" !== e26.body.type || t3(e26) || e26.async });
  }
  function n2(e26) {
    return null === e26.type || "void" === e26.type.name || "UndefinedLiteral" === e26.type.type;
  }
  function i2(e26) {
    var t4;
    return e26.name ? t4 = e26 : e26.expression && (t4 = e26.expression), { currentType: t4, expectedTypeName: t4 && g2[t4.name] };
  }
  function a2(e26, t4) {
    return { start: l2.getLocFromIndex(e26.range[0] + 2 + t4.range[0]), end: l2.getLocFromIndex(e26.range[0] + 2 + t4.range[1]) };
  }
  function o2(t4, r3) {
    if (r3 && /* @__PURE__ */ function(e26) {
      return "UndefinedLiteral" !== e26 && "NullLiteral" !== e26 && "NullableLiteral" !== e26 && "FunctionType" !== e26 && "AllLiteral" !== e26;
    }(r3.type)) {
      var n3 = [], s3 = [];
      switch (r3.type) {
        case "TypeApplication":
          s3 = "UnionType" === r3.applications[0].type ? r3.applications[0].elements : r3.applications, n3.push(i2(r3));
          break;
        case "RecordType":
          s3 = r3.fields;
          break;
        case "UnionType":
        case "ArrayType":
          s3 = r3.elements;
          break;
        case "FieldType":
          r3.value && n3.push(i2(r3.value));
          break;
        default:
          n3.push(i2(r3));
      }
      s3.forEach(o2.bind(null, t4)), n3.forEach(function(r4) {
        r4.expectedTypeName && r4.expectedTypeName !== r4.currentType.name && e25.report({ node: t4, messageId: "useType", loc: a2(t4, r4.currentType), data: { currentTypeName: r4.currentType.name, expectedTypeName: r4.expectedTypeName }, fix: function(e26) {
          return e26.replaceTextRange(r4.currentType.range.map(function(e27) {
            return t4.range[0] + 2 + e27;
          }), r4.expectedTypeName);
        } });
      });
    }
  }
  function s2(r3) {
    var i3, s3 = l2.getJSDocComment(r3), g3 = v2.pop(), x2 = /* @__PURE__ */ Object.create(null), b2 = [], E2 = false, C3 = false, S3 = false, k2 = false, D2 = false;
    if (s3) {
      var F2;
      try {
        F2 = OA.parse(s3.value, { strict: true, unwrap: true, sloppy: true, range: true });
      } catch (t4) {
        return void (/brace[s\u017F]/i.test(t4.message) ? e25.report({ node: s3, messageId: "missingBrace" }) : e25.report({ node: s3, messageId: "syntaxError" }));
      }
      F2.tags.forEach(function(t4) {
        switch (t4.title.toLowerCase()) {
          case "param":
          case "arg":
          case "argument":
            b2.push(t4);
            break;
          case "return":
          case "returns":
            E2 = true, i3 = t4;
            break;
          case "constructor":
          case "class":
            C3 = true;
            break;
          case "override":
          case "inheritdoc":
            k2 = true;
            break;
          case "abstract":
          case "virtual":
            D2 = true;
            break;
          case "interface":
            S3 = true;
        }
        if (Object.prototype.hasOwnProperty.call(c2, t4.title) && t4.title !== c2[t4.title]) {
          var r4 = a2(s3, t4);
          e25.report({ node: s3, messageId: "use", loc: { start: r4.start, end: { line: r4.start.line, column: r4.start.column + "@".concat(t4.title).length } }, data: { name: c2[t4.title] }, fix: function(e26) {
            return e26.replaceTextRange([s3.range[0] + t4.range[0] + 3, s3.range[0] + t4.range[0] + t4.title.length + 3], c2[t4.title]);
          } });
        }
        y2 && t4.type && o2(s3, t4.type);
      }), b2.forEach(function(t4) {
        m2 && !t4.type && e25.report({ node: s3, messageId: "missingParamType", loc: a2(s3, t4), data: { name: t4.name } }), !t4.description && f2 && e25.report({ node: s3, messageId: "missingParamDesc", loc: a2(s3, t4), data: { name: t4.name } }), x2[t4.name] ? e25.report({ node: s3, messageId: "duplicateParam", loc: a2(s3, t4), data: { name: t4.name } }) : -1 === t4.name.indexOf(".") && (x2[t4.name] = t4);
      }), E2 && (p2 || g3.returnPresent || null !== i3.type && n2(i3) || D2 ? (d2 && !i3.type && e25.report({ node: s3, messageId: "missingReturnType" }), !n2(i3) && !i3.description && h2 && e25.report({ node: s3, messageId: "missingReturnDesc" })) : e25.report({ node: s3, messageId: "unexpectedTag", loc: a2(s3, i3), data: { title: i3.title } })), k2 || E2 || C3 || S3 || "get" === r3.parent.kind || "constructor" === r3.parent.kind || "set" === r3.parent.kind || t3(r3) || !p2 && (!g3.returnPresent || r3.async) || e25.report({ node: s3, messageId: "missingReturn", data: { returns: c2.returns || "returns" } });
      var A2 = Object.keys(x2);
      if (r3.params && r3.params.forEach(function(t4, r4) {
        var n3 = "AssignmentPattern" === t4.type ? t4.left : t4;
        if ("Identifier" === n3.type) {
          var i4 = n3.name;
          A2[r4] && i4 !== A2[r4] ? e25.report({ node: s3, messageId: "expected", loc: a2(s3, x2[A2[r4]]), data: { name: i4, jsdocName: A2[r4] } }) : !x2[i4] && !k2 && e25.report({ node: s3, messageId: "missingParam", data: { name: i4 } });
        }
      }), u2.matchDescription) new RegExp(u2.matchDescription, "u").test(F2.description) || e25.report({ node: s3, messageId: "unsatisfiedDesc" });
    }
  }
  var u2 = e25.options[0] || {}, c2 = u2.prefer || {}, l2 = e25.getSourceCode(), p2 = false !== u2.requireReturn, f2 = false !== u2.requireParamDescription, h2 = false !== u2.requireReturnDescription, d2 = false !== u2.requireReturnType, m2 = false !== u2.requireParamType, g2 = u2.preferType || {}, y2 = 0 !== Object.keys(g2).length, v2 = [];
  return { ArrowFunctionExpression: r2, FunctionExpression: r2, FunctionDeclaration: r2, ClassExpression: r2, ClassDeclaration: r2, "ArrowFunctionExpression:exit": s2, "FunctionExpression:exit": s2, "FunctionDeclaration:exit": s2, "ClassExpression:exit": s2, "ClassDeclaration:exit": s2, ReturnStatement: function(e26) {
    var t4 = v2[v2.length - 1];
    t4 && null !== e26.argument && (t4.returnPresent = true);
  } };
} }, "valid-typeof": { meta: { type: "problem", docs: { description: "enforce comparing `typeof` expressions against valid strings", category: "Possible Errors", recommended: true, url: "https://eslint.org/docs/rules/valid-typeof" }, schema: [{ type: "object", properties: { requireStringLiterals: { type: "boolean", default: false } }, additionalProperties: false }], messages: { invalidValue: "Invalid typeof comparison value.", notString: "Typeof comparisons should be to string literals." } }, create: function(e25) {
  function t3(e26) {
    return "UnaryExpression" === e26.type && "typeof" === e26.operator;
  }
  var r2 = ["symbol", "undefined", "object", "boolean", "number", "string", "function", "bigint"], n2 = ["==", "===", "!=", "!=="], i2 = e25.options[0] && e25.options[0].requireStringLiterals;
  return { UnaryExpression: function(a2) {
    if (t3(a2)) {
      var o2 = e25.getAncestors().pop();
      if ("BinaryExpression" === o2.type && -1 !== n2.indexOf(o2.operator)) {
        var s2 = o2.left === a2 ? o2.right : o2.left;
        if ("Literal" === s2.type || "TemplateLiteral" === s2.type && !s2.expressions.length) {
          var u2 = "Literal" === s2.type ? s2.value : s2.quasis[0].value.cooked;
          -1 === r2.indexOf(u2) && e25.report({ node: s2, messageId: "invalidValue" });
        } else i2 && !t3(s2) && e25.report({ node: s2, messageId: "notString" });
      }
    }
  } };
} }, "vars-on-top": { meta: { type: "suggestion", docs: { description: "require `var` declarations be placed at the top of their containing scope", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/vars-on-top" }, schema: [], messages: { top: "All 'var' declarations must be at the top of the function scope." } }, create: function(e25) {
  function t3(e26) {
    return "ExpressionStatement" === e26.type && "Literal" === e26.expression.type && "string" == typeof e26.expression.value;
  }
  function r2(e26) {
    return "ImportDeclaration" === e26.type || "ImportSpecifier" === e26.type || "ImportDefaultSpecifier" === e26.type || "ImportNamespaceSpecifier" === e26.type;
  }
  function n2(e26) {
    return "VariableDeclaration" === e26.type || "ExportNamedDeclaration" === e26.type && e26.declaration && "VariableDeclaration" === e26.declaration.type;
  }
  function i2(e26, i3) {
    for (var a3 = i3.length, o3 = 0; o3 < a3 && (t3(i3[o3]) || r2(i3[o3])); ++o3) ;
    for (; o3 < a3; ++o3) {
      if (!n2(i3[o3])) return false;
      if (i3[o3] === e26) return true;
    }
    return false;
  }
  function a2(t4, r3) {
    i2(t4, r3.body) || e25.report({ node: t4, messageId: "top" });
  }
  function o2(t4, r3, n3) {
    /Function/.test(n3.type) && "BlockStatement" === r3.type && i2(t4, r3.body) || e25.report({ node: t4, messageId: "top" });
  }
  return { "VariableDeclaration[kind='var']": function(e26) {
    "ExportNamedDeclaration" === e26.parent.type ? a2(e26.parent, e26.parent.parent) : "Program" === e26.parent.type ? a2(e26, e26.parent) : o2(e26, e26.parent, e26.parent.parent);
  } };
} }, "wrap-iife": { meta: { type: "layout", docs: { description: "require parentheses around immediate `function` invocations", category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/wrap-iife" }, schema: [{ enum: ["outside", "inside", "any"] }, { type: "object", properties: { functionPrototypeMethods: { type: "boolean", default: false } }, additionalProperties: false }], fixable: "code", messages: { wrapInvocation: "Wrap an immediate function invocation in parentheses.", wrapExpression: "Wrap only the function expression in parens.", moveInvocation: "Move the invocation into the parens that contain the function." } }, create: function(e25) {
  function t3(e26) {
    return LA.isParenthesised(a2, e26);
  }
  function r2(e26) {
    var t4 = e26.callee;
    return "FunctionExpression" === t4.type ? t4 : !i2 || "MemberExpression" !== t4.type || "FunctionExpression" !== t4.object.type || "call" !== LA.getStaticPropertyName(t4) && "apply" !== LA.getStaticPropertyName(t4) ? null : t4.object;
  }
  var n2 = e25.options[0] || "outside", i2 = e25.options[1] && e25.options[1].functionPrototypeMethods, a2 = e25.getSourceCode();
  return { CallExpression: function(i3) {
    var o2 = r2(i3);
    if (o2) {
      var s2 = t3(i3), u2 = t3(o2);
      s2 || u2 ? "inside" !== n2 || u2 ? "outside" === n2 && !s2 && e25.report({ node: i3, messageId: "moveInvocation", fix: function(e26) {
        var t4 = a2.getTokenAfter(o2);
        return e26.replaceTextRange([t4.range[0], i3.range[1]], "".concat(a2.getText().slice(t4.range[1], i3.range[1]), ")"));
      } }) : e25.report({ node: i3, messageId: "wrapExpression", fix: function(e26) {
        var t4 = a2.getTokenAfter(i3);
        return e26.replaceTextRange([o2.range[1], t4.range[1]], ")".concat(a2.getText().slice(o2.range[1], t4.range[0])));
      } }) : e25.report({ node: i3, messageId: "wrapInvocation", fix: function(e26) {
        var t4 = "inside" === n2 ? o2 : i3;
        return e26.replaceText(t4, "(".concat(a2.getText(t4), ")"));
      } });
    }
  } };
} }, "wrap-regex": { meta: { type: "layout", docs: { description: "require parenthesis around regex literals", category: "Stylistic Issues", recommended: false, url: "https://eslint.org/docs/rules/wrap-regex" }, schema: [], fixable: "code", messages: { requireParens: "Wrap the regexp literal in parens to disambiguate the slash." } }, create: function(e25) {
  var t3 = e25.getSourceCode();
  return { Literal: function(r2) {
    if ("RegularExpression" === t3.getFirstToken(r2).type) {
      var n2 = t3.getTokenBefore(r2), i2 = t3.getTokenAfter(r2), a2 = e25.getAncestors(), o2 = a2[a2.length - 1];
      "MemberExpression" !== o2.type || o2.object !== r2 || n2 && "(" === n2.value && i2 && ")" === i2.value || e25.report({ node: r2, messageId: "requireParens", fix: function(e26) {
        return e26.replaceText(r2, "(".concat(t3.getText(r2), ")"));
      } });
    }
  } };
} }, "yield-star-spacing": { meta: { type: "layout", docs: { description: "require or disallow spacing around the `*` in `yield*` expressions", category: "ECMAScript 6", recommended: false, url: "https://eslint.org/docs/rules/yield-star-spacing" }, fixable: "whitespace", schema: [{ oneOf: [{ enum: ["before", "after", "both", "neither"] }, { type: "object", properties: { before: { type: "boolean" }, after: { type: "boolean" } }, additionalProperties: false }] }], messages: { missingBefore: "Missing space before *.", missingAfter: "Missing space after *.", unexpectedBefore: "Unexpected space before *.", unexpectedAfter: "Unexpected space after *." } }, create: function(e25) {
  function t3(t4, i2, a2) {
    if (r2.isSpaceBetweenTokens(i2, a2) !== n2[t4]) {
      var o2, s2 = "*" === i2.value, u2 = n2[t4], c2 = s2 ? i2 : a2;
      o2 = u2 ? "before" === t4 ? "missingBefore" : "missingAfter" : "before" === t4 ? "unexpectedBefore" : "unexpectedAfter", e25.report({ node: c2, messageId: o2, fix: function(e26) {
        return u2 ? s2 ? e26.insertTextAfter(c2, " ") : e26.insertTextBefore(c2, " ") : e26.removeRange([i2.range[1], a2.range[0]]);
      } });
    }
  }
  var r2 = e25.getSourceCode(), n2 = function(e26) {
    return e26 && "string" != typeof e26 ? e26 : { before: { before: true, after: false }, after: { before: false, after: true }, both: { before: true, after: true }, neither: { before: false, after: false } }[e26 || "after"];
  }(e25.options[0]);
  return { YieldExpression: function(e26) {
    if (e26.delegate) {
      var n3 = r2.getFirstTokens(e26, 3), i2 = n3[0], a2 = n3[1], o2 = n3[2];
      t3("before", i2, a2), t3("after", a2, o2);
    }
  } };
} }, yoda: { meta: { type: "suggestion", docs: { description: 'require or disallow "Yoda" conditions', category: "Best Practices", recommended: false, url: "https://eslint.org/docs/rules/yoda" }, schema: [{ enum: ["always", "never"] }, { type: "object", properties: { exceptRange: { type: "boolean", default: false }, onlyEquality: { type: "boolean", default: false } }, additionalProperties: false }], fixable: "code", messages: { expected: "Expected literal to be on the {{expectedSide}} side of {{operator}}." } }, create: function(e25) {
  function t3(e26) {
    var t4 = e26.left, r3 = e26.right;
    return "LogicalExpression" === e26.type && "BinaryExpression" === t4.type && "BinaryExpression" === r3.type && UN(t4.operator) && UN(r3.operator) && (function() {
      var n3, i3;
      return "&&" === e26.operator && (n3 = WN(t4.left)) && (i3 = WN(r3.right, Number.POSITIVE_INFINITY)) && n3.value <= i3.value && $N(t4.right, r3.left);
    }() || function() {
      var n3, i3;
      return "||" === e26.operator && (n3 = WN(t4.right, Number.NEGATIVE_INFINITY)) && (i3 = WN(r3.left)) && n3.value <= i3.value && $N(t4.left, r3.right);
    }()) && LA.isParenthesised(o2, e26);
  }
  function r2(e26) {
    var t4 = o2.getTokenBefore(e26), r3 = o2.getFirstTokenBetween(e26.left, e26.right, function(t5) {
      return t5.value === e26.operator;
    }), n3 = o2.getText().slice(o2.getTokenBefore(r3).range[1], r3.range[0]), i3 = o2.getText().slice(r3.range[1], o2.getTokenAfter(r3).range[0]), a3 = o2.getText().slice(e26.range[0], o2.getTokenBefore(r3).range[1]), u2 = o2.getTokenAfter(r3), c2 = o2.getText().slice(u2.range[0], e26.range[1]), l2 = "";
    return t4 && t4.range[1] === e26.range[0] && !LA.canTokensBeAdjacent(t4, u2) && (l2 = " "), l2 + c2 + n3 + s2[r3.value] + i3 + a3;
  }
  var n2 = "always" === e25.options[0], i2 = e25.options[1] && e25.options[1].exceptRange, a2 = e25.options[1] && e25.options[1].onlyEquality, o2 = e25.getSourceCode(), s2 = { "===": "===", "!==": "!==", "==": "==", "!=": "!=", "<": ">", ">": "<", "<=": ">=", ">=": "<=" };
  return { BinaryExpression: function(o3) {
    var s3 = n2 ? o3.left : o3.right, u2 = n2 ? o3.right : o3.left;
    "Literal" !== u2.type && !qN(u2) || "Literal" === s3.type || qN(s3) || !function(e26) {
      return /^(==|===)$/.test(e26);
    }(o3.operator) && a2 || !function(e26) {
      return /^(==|===|!=|!==|<|>|<=|>=)$/.test(e26);
    }(o3.operator) || i2 && t3(e25.getAncestors().pop()) || e25.report({ node: o3, messageId: "expected", data: { operator: o3.operator, expectedSide: n2 ? "left" : "right" }, fix: function(e26) {
      return e26.replaceText(o3, r2(o3));
    } });
  } };
} } };
var zN = function(e25) {
  function t3() {
    var e26;
    return a(this, t3), (e26 = v(this, h(t3).call(this))).defineRules(GN), e26;
  }
  return f(t3, AD.linter_1), t3;
}();
var eslint4b_es_default = zN;

// src/main.js
var md_highlight = syntaxHighlighting(
  HighlightStyle.define([
    {
      tag: tags.heading1,
      fontWeight: "bold",
      fontFamily: "sans-serif",
      fontSize: "28px",
      textDecoration: "none"
    },
    {
      tag: tags.heading2,
      fontWeight: "bold",
      fontFamily: "sans-serif",
      fontSize: "26px",
      textDecoration: "none"
    },
    {
      tag: tags.heading3,
      fontWeight: "bold",
      fontFamily: "sans-serif",
      fontSize: "24px",
      textDecoration: "none"
    },
    {
      tag: tags.heading4,
      fontWeight: "bold",
      fontFamily: "sans-serif",
      fontSize: "22px",
      textDecoration: "none"
    },
    {
      tag: tags.heading5,
      fontWeight: "bold",
      fontFamily: "sans-serif",
      fontSize: "20px",
      textDecoration: "none"
    },
    {
      tag: tags.link,
      fontFamily: "sans-serif",
      textDecoration: "underline",
      color: "#1c9aa0"
    },
    { tag: tags.emphasis, fontFamily: "sans-serif", fontStyle: "italic" },
    {
      tag: tags.strong,
      fontFamily: "sans-serif",
      fontWeight: "bold",
      color: "#a07e3b"
    },
    { tag: tags.monospace, fontFamily: "monospace" },
    { tag: tags.content, fontFamily: "sans-serif" },
    { tag: tags.meta, color: "darkgrey" }
  ])
);
export {
  Compartment,
  Decoration,
  EditorState,
  EditorView,
  HighlightStyle,
  eslint4b_es_default as Linter,
  ViewPlugin,
  ViewUpdate,
  Vim,
  WidgetType,
  autocompletion,
  basicSetup,
  bracketMatching,
  closeBrackets,
  closeBracketsKeymap,
  completeFromList,
  completionKeymap,
  crosshairCursor,
  defaultHighlightStyle,
  defaultKeymap,
  drawSelection,
  dropCursor,
  esLint,
  foldAll,
  foldGutter,
  foldKeymap,
  foldable,
  highlightActiveLine,
  highlightActiveLineGutter,
  highlightSelectionMatches,
  highlightSpecialChars,
  history,
  historyKeymap,
  indentOnInput,
  indentWithTab,
  javascript,
  keymap,
  lineNumbers,
  lintGutter,
  linter,
  markdown,
  md_highlight,
  openLintPanel,
  rectangularSelection,
  searchKeymap,
  syntaxHighlighting,
  syntaxTree,
  tags as t,
  toggleFold,
  vim
};
/*! Bundled license information:

eslint4b-prebuilt/dist/eslint4b.es.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   *)
  (** @license URI.js v4.2.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js *)
  (*
     * @version    1.4.0
     * @date       2015-10-26
     * @stability  3 - Stable
     * @author     Lauri Rooden (https://github.com/litejs/natural-compare-lite)
     * @license    MIT License
     *)
*/
